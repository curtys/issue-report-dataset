{
    "comments": [
        {
            "author": "pschwartau@meer.net",
            "body": "This bug is the Rhino version of bug 145779 against SpiderMonkey.\nThe corresponding testcase for this is:\n\n          mozilla/js/tests/ecma_3/Function/regress-145779.js",
            "date": "20020520T21:08:13",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 84524\nExtending ecma_3/Function/regress-145779.js to cover other Ecma deviations\n\nThere are other problems with apply/call non-conformance.  ECMA 15.3.4.3\nrequires for apply to behave in the same way when passing undefined as first or\nsecond argument as in case of passing null:\n\n<i>If  thisArg is null or undefined, the called function is passed the global\nobject as the this value. Otherwise, the called function is passed\nToObject(thisArg) as the this value. \n\nIf argArray is null or undefined, the called function is passed no arguments.\nOtherwise, if argArray is neither an array nor an arguments object (see\n10.1.8), a TypeError exception is thrown. If argArray is either an array or an\narguments object, the function is passed the (ToUint32(argArray.length))\narguments argArray[0], argArray[1], ...,\nargArray[ToUint32(argArray.length)&#65533;1].</i>\n\nSimilarly ECMA 15.3.4.4 states for call:\n\n<i>If  thisArg is null or undefined, the called function is passed the global\nobject as the this value. Otherwise, the called function is passed\nToObject(thisArg) as the this value.</i>\n\nRhino does not behave as required for many cases of calling apply/call with\nnull or undefined but I think there is no point in creating additional bug\nreports for this so the the patch extends ecma_3/Function/regress-145779.js to\ncheck against the cited text.",
            "date": "20020521T21:54:16",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 84531\nFixes to org/mozilla/javascript/baseFunction.java\n\nThe patch makes apply.length to return 2 and addresses apply(undefined) etc.\nissues.",
            "date": "20020521T22:25:14",
            "id": 2
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Igor: thank you for such thorough and precise tests! Following\nprevailing custom in the JS testsuite, I have CVS-deleted\n\n  mozilla/js/tests/ecma_3/Function/regress-145779.js\n\nand added Igor's tests in the following two testcases:\n\n  mozilla/js/tests/ecma_3/Function/15.3.4.3-1.js\n  mozilla/js/tests/ecma_3/Function/15.3.4.4-1.js\n\nwhich test ECMA-262 Edition 3\n\n  Section 15.3.4.3 (Function.prototype.apply)\n  Section 15.3.4.4 (Function.prototype.call)\n\nI can confirm that before Igor's patch, Rhino generated exceptions\non both these testcases, but with Igor's patch, both tests pass -",
            "date": "20020522T06:26:40",
            "id": 3
        },
        {
            "author": "igor@mir2.org",
            "body": "I commited the patch",
            "date": "20020522T16:55:44",
            "id": 4
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Igor, thanks! Marking Fixed, then -",
            "date": "20020522T18:02:19",
            "id": 5
        },
        {
            "author": "pschwartau@meer.net",
            "body": "And marking Verified FIXED. Both testcases now pass in Rhino:\n\n          mozilla/js/tests/ecma_3/Function/15.3.4.3-1.js\n          mozilla/js/tests/ecma_3/Function/15.3.4.4-1.js\n\nAnd that holds for both the compiled and interpreted modes of Rhino.",
            "date": "20020522T18:04:01",
            "id": 6
        },
        {
            "author": "igor@mir2.org",
            "body": "Targeting as resolved against 1.5R4",
            "date": "20040213T12:16:10",
            "id": 7
        }
    ],
    "component": "Core",
    "description": "Function.prototype.apply has a FormalParameterList of length two:\n\n          Function.prototype.apply (thisArg, argArray)\n\nAccordingly, Function.prototype.apply.length should return 2.\nThis is explicitly stated in Section 15.3.4.3 of ECMA-262 Edition 3.\nSee http://www.mozilla.org/js/language/ for a reference.\n\nHowever, Rhino currently returns 1 instead of 2.\nThis was reported by igor3@apochta.com.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "145791",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "ECMA conformance: Function.prototype.apply(), Function.prototype.call()",
    "systemSpecification": true,
    "version": "other"
}