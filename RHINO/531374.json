{
    "comments": [
        {
            "author": "hannesw@gmail.com",
            "body": "This was fixed in CVS some time ago. I'm sorry for finding this bug only now and thanks for reporting!\n\nhttp://bonsai.mozilla.org/cvsview2.cgi?diff_mode=context&whitespace_mode=show&root=/cvsroot&subdir=mozilla/js/rhino/src/org/mozilla/javascript&command=DIFF_FRAMESET&root=/cvsroot&file=JavaAdapter.java&rev1=1.119&rev2=1.120",
            "date": "20100825T10:18:20",
            "id": 0
        }
    ],
    "component": "Core",
    "description": "User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3\nBuild Identifier: rhino1_7R2\n\nSummary:\tJavaAdapter broken for similar derivations (JavaAdapter.JavaAdapterSignature.equals is broken)\n\nJavaAdapter creates classes on the fly and caches the results; it uses JavaAdapter.JavaAdapterSignature to uniquely\nidentify the cached class (as a key for a Map) BUT JavaAdapter.JavaAdapterSignature.equals() is broken.\n\nThe JavaAdapter.JavaAdapterSignature.equals checks \"this\" against another signature - it checks the superclass and\ninheritance are the same, but checks the overridden method names of \"this\" against \"this\" - not the other instance.\n\nThe result is that if you use JavaAdapter to create two instances of a class and in both instances you override the \nsame method but with different implementation, the second class is seen as identical to the first.\n\nEG given this Java class:\n\tpublic class JsTest4Extra {\n\t\tpublic String testFirst() {\n\t\t\treturn \"first-not-implemented\";\n\t\t}\n\t\tpublic String testSecond() {\n\t\t\treturn \"second-not-implemented\";\n\t\t}\n\t}\n\n...and then writing this code in JS:\n\n\tvar myCompA = {\n\t\ttestFirst: function() {\n\t\t\treturn \"alpha: first-IS-implemented\";\n\t\t}\n\t};\n\tvar myA = new JavaAdapter(com.zenesis.test.script.JsTest4Extra, myCompA);\n\n\tvar myCompB = {\n\t\ttestSecond: function() {\n\t\t\treturn \"bravo: second-IS-implemented\";\n\t\t}\n\t};\n\n\tvar myB = new JavaAdapter(com.zenesis.test.script.JsTest4Extra, myCompB);\n\nin this example, myA and myB are supposed to be different instances overriding either testFirst() or testSecond() but\ninstead you get this:\n\n\t\ta.testFirst()=alpha: first-IS-implemented\n\t\ta.testSecond()=second-not-implemented\n\t\tb.testFirst()=undefined\n\t\tb.testSecond()=second-not-implemented\n\n\nReproducible: Always\n\nSteps to Reproduce:\npackage com.zenesis.test.script;\n\nimport java.io.StringReader;\n\nimport org.mozilla.javascript.Context;\nimport org.mozilla.javascript.ContextFactory;\nimport org.mozilla.javascript.NativeJavaObject;\nimport org.mozilla.javascript.Scriptable;\nimport org.mozilla.javascript.Undefined;\n\n/**\n * Demonstrates a bug in JavaAdapter.equals(); if you have a Java class and use JavaAdapter to override\n * a method in a derived instance, everything is fine.  If you seperately use JavaAdapter to override\n * a _different_ method of the same class (but in a new instance), Rhino will use the the class\n * it generated the first time around and _not_ generate a new class.  This is because JavaAdapter.equals()\n * is broken so Rhino thinks that it already has a suitable class.\n * \n * When running an unmodified Rhino1_7R2 this code produces:\n * \n\t\ta.testFirst()=alpha: first-IS-implemented\n\t\ta.testSecond()=second-not-implemented\n\t\tb.testFirst()=undefined\n\t\tb.testSecond()=second-not-implemented\n * \n * after patching org/mozilla/javascript/JavaAdapter.java line 91, it shows:\n * \n\t\ta.testFirst()=alpha: first-IS-implemented\n\t\ta.testSecond()=second-not-implemented\n\t\tb.testFirst()=first-not-implemented\n\t\tb.testSecond()=bravo: second-IS-implemented\n *\n * @author <a href=\"mailto:john.spackman@zenesis.com\">John Spackman</a>\n */\npublic class JsTest5 {\n\t\n\tprivate static final String ALPHA = \"\" +\n\t\t\t\"var myComp = {\\r\\n\" + \n\t\t\t\"\ttestFirst: function() {\\r\\n\" + \n\t\t\t\"\t\treturn \\\"alpha: first-IS-implemented\\\";\\r\\n\" + \n\t\t\t\"\t}\\r\\n\" + \n\t\t\t\"};\\r\\n\" + \n\t\t\t\"\\r\\n\" + \n\t\t\t\"new JavaAdapter(com.zenesis.test.script.JsTest4Extra, myComp);\";\n\n\tprivate static final String BRAVO = \"\" +\n\t\t\t\"var myCompB = {\\r\\n\" + \n\t\t\t\"\ttestSecond: function() {\\r\\n\" + \n\t\t\t\"\t\treturn \\\"bravo: second-IS-implemented\\\";\\r\\n\" + \n\t\t\t\"\t}\\r\\n\" + \n\t\t\t\"};\\r\\n\" + \n\t\t\t\"\\r\\n\" + \n\t\t\t\"new JavaAdapter(com.zenesis.test.script.JsTest4Extra, myCompB);\";\n\t\n\tpublic JsTest5() throws Exception {\n\t\tsuper();\n\t\tContext context = ContextFactory.getGlobal().enterContext();\n\t\tScriptable scope = context.initStandardObjects();\n\t\t\n\t\tJsTest4Extra a = (JsTest4Extra)run(scope, ALPHA);\n\t\tJsTest4Extra b = (JsTest4Extra)run(scope, BRAVO);\n\t\t\n\t\tSystem.out.println(\"a.testFirst()=\" + a.testFirst());\n\t\tSystem.out.println(\"a.testSecond()=\" + a.testSecond());\n\t\tSystem.out.println(\"b.testFirst()=\" + b.testFirst());\n\t\tSystem.out.println(\"b.testSecond()=\" + b.testSecond());\n\t}\n\t\n\tprivate Object run(Scriptable scope, String code) throws Exception {\n\t\tContext context = ContextFactory.getGlobal().enterContext();\n\t\ttry {\n\t\t    Object result = context.evaluateReader(scope, new StringReader(code), \"inline\", 1, null);\n\t\t\tif (result instanceof NativeJavaObject) {\n\t\t\t\tNativeJavaObject njo = (NativeJavaObject)result;\n\t\t\t\tresult = njo.unwrap();\n\t\t\t}\n\t\t\tif (result == Undefined.instance)\n\t\t\t\tresult = null;\n\t\t\treturn result;\n\t\t}finally {\n\t\t\tContext.exit();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tnew JsTest5();\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\nActual Results:  \n\t\ta.testFirst()=alpha: first-IS-implemented\n\t\ta.testSecond()=second-not-implemented\n\t\tb.testFirst()=undefined\n\t\tb.testSecond()=second-not-implemented\n\n\nExpected Results:  \n\t\ta.testFirst()=alpha: first-IS-implemented\n\t\ta.testSecond()=second-not-implemented\n\t\tb.testFirst()=first-not-implemented\n\t\tb.testSecond()=bravo: second-IS-implemented\n\n\nThe fix for this is on line 91 of org/mozilla/javascript/JavaAdapter.java; change this:\n   ObjToIntMap.Iterator iter = new ObjToIntMap.Iterator(names);\nto this:\n   ObjToIntMap.Iterator iter = new ObjToIntMap.Iterator(sig.names);",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "531374",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "JavaAdapter broken for similar derivations (JavaAdapter.JavaAdapterSignature.equals is broken)",
    "systemSpecification": true,
    "version": "other"
}