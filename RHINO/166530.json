{
    "comments": [
        {
            "author": "user@apochta.com",
            "body": "Created attachment 110302\nTo search in DefiningClassLoader.loadClass(String name, boolean resolve) for classes not defined by the class loader itself use parent loader, not the one obtained via Thread.getContextClassLoader()\n\nVarious parts of Rhino need to define classes based on generated code and for\nthat they use org.mozilla.classfile.DefiningClassLoader. Currently its\nDefiningClassLoader.loadClass(String name, boolean resolve) method when\nsearches for a class not defined by the loader itself calls\nThread.getContextClassLoader() on the assumption that an application may call\nThread.setContextClassLoader() to alter class loader for a particular thread. \n\nBy default Thread.getContextClassLoader() returns the system classes loader and\nif Rhino classes are not loaded through it, then any reference to a Rhino class\nfrom the generated byte code would either lead to ClassNotFoundException or if\na copy of Rhino is available on the system loader to ClassCastException later\nas in JVM classes with the same name but different class loaders are treated as\ndifferent classes. The later case I believe is the reason for the reported\nerror.\n\nTo resolve the issue, the patch changes DefiningClassLoader.loadClass to look\nfor a class from the parent class loader, which points to the loader that loads\nRhino classes and this is what necessary in all cases involving\nDefiningClassLoader usage.",
            "date": "20021229T12:15:45",
            "id": 0
        },
        {
            "author": "user@apochta.com",
            "body": "Created attachment 110304\nSmall fix to the previous version: the parentLoader field should be private",
            "date": "20021229T12:22:16",
            "id": 1
        },
        {
            "author": "user@apochta.com",
            "body": "I committed the above patch with few other changes to replace calls to\nThread.getContextClassLoader() by using a proper parent class loader for\ngenerated code. This fixed I believe a similar problem reported by Mike Gillam\nas he confirmed that after the changes the following is no longer an issue:\n\nMike Gillam <mgillam@attbi.com> wrote to netsacpe.public.mozilla.jseng:\n...\nI am using Rhino to script business objects implemented within an EJB\nSession object.\n\nEverything works fine until I redeploy the .EAR file.  After\nredeployment, none of the methods I expose in the ScriptableObject\nclasses work.  I get a ClassCastException.\n...\n\n org.mozilla.javascript.JavaScriptException:\njava.lang.ClassCastException\n \tat\norg.mozilla.javascript.JavaScriptException.wrapException(JavaScriptException.java:69)\n \tat org.mozilla.javascript.FunctionObject.call(FunctionObject.java:439)\n \tat org.mozilla.javascript.ScriptRuntime.call(ScriptRuntime.java:1225)\n \tat\norg.mozilla.javascript.gen.c85.call(IDBE_Pricing_Policy::SIZE_CRUST::IDV_Pricing_Formula:2)\n \tat com.moose.bos.BusinessRule.execute(BusinessRule.java:88)\n \tat com.moose.erp.PricingPolicy.price(PricingPolicy.java:88)\n \tat com.moose.erp.ItemHasPrice.price(ItemHasPrice.java:106)\n \tat com.moose.erp.Attribute.price(Attribute.java:225)\n \tat\ncom.moose.erp.ItemHasAttributes.describeConfiguration(ItemHasAttributes.java:186)\n \tat com.moose.erp.Item.configure(Item.java:245)\n \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n \tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n \tat java.lang.reflect.Method.invoke(Method.java:324)\n \tat com.moose.bos.BusinessObj.callCommand(BusinessObj.java:69)\n \tat com.moose.bos.BusinessObj.process(BusinessObj.java:488)\n \tat com.moose.bos.Entity.process(Entity.java:1507)\n \tat com.moose.bos.BusinessObj.processMessage(BusinessObj.java:574)\n \tat com.moose.bos.Server.processMessage(Server.java:973)\n \tat com.moose.bos.Server.processExternalMessage(Server.java:865)\n \tat com.moose.ejb.BOSSessionStatelessBean.process(BOSSessionStatelessBean.java:125)\n \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n \tat\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n \tat java.lang.reflect.Method.invoke(Method.java:324)\n \tat\norg.jboss.ejb.StatelessSessionContainer$ContainerInterceptor.invoke(StatelessSessionContainer.java:664)\n \tat\norg.jboss.resource.connectionmanager.CachedConnectionInterceptor.invoke(CachedConnectionInterceptor.java:186)\n \tat\norg.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext(AbstractTxInterceptor.java:96)\n \tat\norg.jboss.ejb.plugins.AbstractTxInterceptorBMT.invokeNext(AbstractTxInterceptorBMT.java:144)\n \tat org.jboss.ejb.plugins.TxInterceptorBMT.invoke(TxInterceptorBMT.java:62)\n \tat\norg.jboss.ejb.plugins.StatelessSessionInstanceInterceptor.invoke(StatelessSessionInstanceInterceptor.java:77)\n \tat org.jboss.ejb.plugins.SecurityInterceptor.invoke(SecurityInterceptor.java:129)\n \tat org.jboss.ejb.plugins.LogInterceptor.invoke(LogInterceptor.java:166)\n \tat\norg.jboss.ejb.StatelessSessionContainer.invoke(StatelessSessionContainer.java:313)\n \tat org.jboss.ejb.Container.invoke(Container.java:705)\n \tat org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:491)\n \tat org.jboss.invocation.local.LocalInvoker.invoke(LocalInvoker.java:98)\n \tat org.jboss.invocation.InvokerInterceptor.invoke(InvokerInterceptor.java:102)\n \tat org.jboss.proxy.TransactionInterceptor.invoke(TransactionInterceptor.java:73)\n \tat org.jboss.proxy.SecurityInterceptor.invoke(SecurityInterceptor.java:76)\n \tat\norg.jboss.proxy.ejb.StatelessSessionInterceptor.invoke(StatelessSessionInterceptor.java:111)\n \tat org.jboss.proxy.ClientContainer.invoke(ClientContainer.java:76)\n \tat $Proxy29.process(Unknown Source)\n \tat com.moose.servlet.BOSSrvlet.callBOS(BOSSrvlet.java:108)\n \tat\ncom.moose.servlet.ConfiguratorServlet.buildConfigFrame(ConfiguratorServlet.java:269)\netc.....\n",
            "date": "20030101T23:31:02",
            "id": 2
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Marking FIXED -",
            "date": "20030109T03:17:23",
            "id": 3
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Tentatively marking Verified; Leonid, can you confirm\nthat the bug is fixed with the latest Rhino source?\n\nIf not, you can reopen this bug; thanks -",
            "date": "20030109T03:20:44",
            "id": 4
        },
        {
            "author": "igor@mir2.org",
            "body": "Targeting as resolved against 1.5R4",
            "date": "20040213T12:18:37",
            "id": 5
        }
    ],
    "component": "Core",
    "description": "When I run unit tests that use rhino in JUnit GUI test tunner I receive the \nfollowing exception:\n\njava.lang.ExceptionInInitializerError: java.lang.ClassCostException: \norg.mozilla.javascript.optimizer.InvokerImpl\n  at org.mozilla.javascript.javascript.FunctionObject.newInvokerMaster(Unknown \nSource)\n  ...\n\nWhen I run it in JUnit text test runner, it works OK.\n\nI believe that it is because GUI JUnit uses its own class loader and Rhino uses \nits own.\n\nThe following test case might be used to reproduce bug:\n\n\npackage com.actimind.watf;\n\nimport junit.framework.*;\nimport org.mozilla.javascript.Context;\nimport org.mozilla.javascript.Scriptable;\n\npublic class RhinoTest extends TestCase\n{\n    public RhinoTest( String s )\n    {\n        super( s );\n    }\n\n    public void testRhino()\n    {\n        Context context = Context.enter();\n        try\n        {\n            Scriptable scope = context.initStandardObjects( null );\n        }\n        finally\n        {\n            context.exit();\n        }\n    }\n}\n\n\nJust run this in GUI JUnit test runner, and see what happens.\n\nI use Rhino 1.5R3",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "166530",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "ClassCostException in FunctionObject static initializer",
    "systemSpecification": true,
    "version": "other"
}