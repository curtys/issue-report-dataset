{
    "comments": [
        {
            "author": "pschwartau@meer.net",
            "body": "Oops, those tests are\n\n      mozilla/js/tests/ecma_2/RegExp/properties-001.js\n      mozilla/js/tests/js1_2/regexp/toString.js",
            "date": "20031118T03:53:42",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "I will fix it.",
            "date": "20031124T15:46:27",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 136232\nFix for NativeRegExp.toString()",
            "date": "20031124T15:47:44",
            "id": 2
        },
        {
            "author": "igor@mir2.org",
            "body": "I committed the fix",
            "date": "20031204T17:11:08",
            "id": 3
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Verified FIXED.\n\nThe above testcases used to fail in both the compiled and interpreted\nmodes of Rhino. Now they pass in both -",
            "date": "20031204T19:29:56",
            "id": 4
        },
        {
            "author": "igor@mir2.org",
            "body": "Trageting as resolved against 1.5R5",
            "date": "20040213T11:35:28",
            "id": 5
        }
    ],
    "component": "Core",
    "description": "SpiderMonkey recently changed the behavior of toString() and toSource()\nwhen applied to a RegExp object with an empty pattern. Do we want \nRhino to stay in synch?\n\nThis is the Rhino analogue of bug 225550 against SpiderMonkey.\nThe testcases for this are:\n\n      mozilla/js/testsecma_2/RegExp/properties-001.js\n      mozilla/js/testsjs1_2/regexp/toString.js\n\n\nHere is a comparison of the current SpiderMonkey and Rhino:\n\nRHINO:\n[/] java org.mozilla.javascript.tools.shell.Main\nRhino 1.5 release 5 0000 00 00\njs> (new RegExp).toString();\n//\njs> (new RegExp).toSource();\n//\n\n\nSPIDERMONKEY:\n[//d/JS_TRUNK/mozilla/js/src/WINNT4.0_DBG.OBJ] ./js\njs>\njs> (new RegExp).toString();\n/(?:)/\njs> (new RegExp).toSource();\n/(?:)/\n\n\nThe new approach lets eval() turn this string back into the empty regexp.\nThe old approach doesn't work, since \"//\" is a comment, not a regexp.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "226045",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "RegExp toSource/toString return an invalid empty RE",
    "systemSpecification": true,
    "version": "other"
}