{
    "comments": [
        {
            "author": "rspeyer@gmail.com",
            "body": "Created attachment 390099\nImplementation of String.trim",
            "date": "20090722T22:55:05",
            "id": 0
        },
        {
            "author": "rspeyer@gmail.com",
            "body": "Created attachment 390121\nmake String.trim remove additional whitespace and line terminator chars\n\nUpdate to String.trim, making it remove <NBSP>, <BOM>, <LS> and <PS> as well as conventional whitespace chars",
            "date": "20090723T00:17:11",
            "id": 1
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Comment on attachment 390121\nmake String.trim remove additional whitespace and line terminator chars\n\n>diff --git a/src/org/mozilla/javascript/NativeString.java b/src/org/mozilla/javascript/NativeString.java\n>index 7997275..be9aab3 100644\n>--- a/src/org/mozilla/javascript/NativeString.java\n>+++ b/src/org/mozilla/javascript/NativeString.java\n>@@ -152,7 +152,7 @@ final class NativeString extends IdScriptableObject\n>         addIdFunctionProperty(ctor, STRING_TAG,\n>                 ConstructorId_toLocaleLowerCase, \"toLocaleLowerCase\", 1);\n>         addIdFunctionProperty(ctor, STRING_TAG,\n>-                ConstructorId_fromCharCode, \"fromCharCode\", 1);\n>+                ConstructorId_trim, \"trim\", 0);\n\nGood you spotted that fromCharCode was in here twice. \n\nI don't see in the spec that \"trim\" should be a property of the constructor as well as the prototype. Do you see that?\n\n>         super.fillConstructorProperties(ctor);\n>     }\n> \n>@@ -198,6 +198,7 @@ final class NativeString extends IdScriptableObject\n>           case Id_localeCompare:     arity=1; s=\"localeCompare\";     break;\n>           case Id_toLocaleLowerCase: arity=0; s=\"toLocaleLowerCase\"; break;\n>           case Id_toLocaleUpperCase: arity=0; s=\"toLocaleUpperCase\"; break;\n>+          case Id_trim:              arity=0; s=\"trim\";              break;\n>           default: throw new IllegalArgumentException(String.valueOf(id));\n>         }\n>         initPrototypeMethod(STRING_TAG, id, s, arity);\n>@@ -230,7 +231,8 @@ final class NativeString extends IdScriptableObject\n>               case ConstructorId_search:\n>               case ConstructorId_replace:\n>               case ConstructorId_localeCompare:\n>-              case ConstructorId_toLocaleLowerCase: {\n>+              case ConstructorId_toLocaleLowerCase: \n>+              case ConstructorId_trim: {\n>                 if (args.length > 0) {\n>                     thisObj = ScriptRuntime.toObject(scope,\n>                             ScriptRuntime.toString(args[0]));\n>@@ -412,11 +414,32 @@ final class NativeString extends IdScriptableObject\n>                     return ScriptRuntime.toString(thisObj)\n>                             .toUpperCase(cx.getLocale());\n>                 }\n>+              case Id_trim:\n>+                {\n>+                    String str = ScriptRuntime.toString(thisObj).trim();\n\nWhy use the Java trim() here if you have to scan the characters anyway?\n\n>+                    char[] chars = str.toCharArray();\n>+\n>+                    int start = 0;\n>+                    while (start < chars.length && isWhitespaceOrLineTerminator(chars[start])) {\n>+                      start += 1;\n\nUse ++\n\n>+                    }\n>+                    int end = chars.length;\n>+                    while (end > start && isWhitespaceOrLineTerminator(chars[end-1])) {\n>+                      end--;\n>+                    }\n>+\n>+                    return str.substring(start, end);\n>+                }\n>             }\n>             throw new IllegalArgumentException(String.valueOf(id));\n>         }\n>     }\n> \n>+    private boolean isWhitespaceOrLineTerminator(char c) {\n>+      return Character.isWhitespace(c) || \n>+        c == '\\u2028' || c == '\\u2029' || c == '\\uFEFF' || c == '\\u00A0';\n>+    }\n>+\n>     private static NativeString realThis(Scriptable thisObj, IdFunctionObject f)\n>     {\n>         if (!(thisObj instanceof NativeString))\n>@@ -652,7 +675,7 @@ final class NativeString extends IdScriptableObject\n>     protected int findPrototypeId(String s)\n>     {\n>         int id;\n>-// #generated# Last update: 2007-05-01 22:11:49 EDT\n>+// #generated# Last update: 2009-07-23 07:32:39 EST\n>         L0: { id = 0; String X = null; int c;\n>             L: switch (s.length()) {\n>             case 3: c=s.charAt(2);\n>@@ -663,6 +686,7 @@ final class NativeString extends IdScriptableObject\n>             case 4: c=s.charAt(0);\n>                 if (c=='b') { X=\"bold\";id=Id_bold; }\n>                 else if (c=='l') { X=\"link\";id=Id_link; }\n>+                else if (c=='t') { X=\"trim\";id=Id_trim; }\n>                 break L;\n>             case 5: switch (s.charAt(4)) {\n>                 case 'd': X=\"fixed\";id=Id_fixed; break L;\n>@@ -756,7 +780,8 @@ final class NativeString extends IdScriptableObject\n>         Id_localeCompare             = 34,\n>         Id_toLocaleLowerCase         = 35,\n>         Id_toLocaleUpperCase         = 36,\n>-        MAX_PROTOTYPE_ID             = 36;\n>+        Id_trim                      = 37,\n>+        MAX_PROTOTYPE_ID             = Id_trim;\n> \n> // #/string_id_map#\n> \n>@@ -777,7 +802,8 @@ final class NativeString extends IdScriptableObject\n>         ConstructorId_search         = -Id_search,\n>         ConstructorId_replace        = -Id_replace,\n>         ConstructorId_localeCompare  = -Id_localeCompare,\n>-        ConstructorId_toLocaleLowerCase = -Id_toLocaleLowerCase;\n>+        ConstructorId_toLocaleLowerCase = -Id_toLocaleLowerCase,\n>+        ConstructorId_trim           = -Id_trim;\n> \n>     private String string;\n> }\n>diff --git a/testsrc/doctests/string.trim.doctest b/testsrc/doctests/string.trim.doctest\n>new file mode 100644\n>index 0000000..3730495\n>--- /dev/null\n>+++ b/testsrc/doctests/string.trim.doctest\n>@@ -0,0 +1,17 @@\n>+js> load('testsrc/doctests/util.js');\n>+\n>+js> \"\".trim\n>+function trim() { [native code for String.trim, arity=0] }\n>+\n>+js> String.trim\n>+function trim() { [native code for String.trim, arity=0] }\n>+\n>+js> String.trim.call({toString: function() { return \"a\" }})\n>+a\n>+\n>+js> \"  hello \".trim().length\n>+5\n>+\n>+js> var [t, n, r] = [String.fromCharCode(9), String.fromCharCode(10), String.fromCharCode(13)]\n>+js> (t + n + r + \" \" + \"abc\").trim().length\n>+3",
            "date": "20090724T13:55:09",
            "id": 2
        },
        {
            "author": "rspeyer@gmail.com",
            "body": "Created attachment 390616\nupdated trim implementation\n\nRemoved trim from String constructor, and made scanning of whitespace and line terminator characters explicit.",
            "date": "20090725T03:49:51",
            "id": 3
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Committed patch",
            "date": "20090725T12:29:16",
            "id": 4
        }
    ],
    "component": "Core",
    "description": "User-Agent:       Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-gb) AppleWebKit/530.18 (KHTML, like Gecko) Version/4.0.1 Safari/530.18\nBuild Identifier: Rhino 1.7 release 2 2009 03 22\n\nAs per 15.5.4.20 of the spec\n\nReproducible: Always",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "505890",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "-- enhancement",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Implement String.trim",
    "systemSpecification": false,
    "version": "other"
}