{
    "comments": [
        {
            "author": "norrisboyd@gmail.com",
            "body": "Checking in src/org/mozilla/javascript/NativeJavaMethod.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeJavaMethod.java,v  <-\n-  NativeJavaMethod.java\nnew revision: 1.65; previous revision: 1.64\ndone\nRCS file: /cvsroot/mozilla/js/rhino/testsrc/doctests/467396.doctest,v\ndone\nChecking in testsrc/doctests/467396.doctest;\n/cvsroot/mozilla/js/rhino/testsrc/doctests/467396.doctest,v  <--  467396.doctest\n\ninitial revision: 1.1\ndone\nRCS file: /cvsroot/mozilla/js/rhino/testsrc/org/mozilla/javascript/tests/Bug4965\n85.java,v\ndone\nChecking in testsrc/org/mozilla/javascript/tests/Bug496585.java;\n/cvsroot/mozilla/js/rhino/testsrc/org/mozilla/javascript/tests/Bug496585.java,v\n <--  Bug496585.java\ninitial revision: 1.1\ndone",
            "date": "20090609T17:44:14",
            "id": 0
        }
    ],
    "component": "Core",
    "description": "Hi there, \nI decided to run my application against the lastest version of rhino \nin source, and noticed that some of the calls to overloaded java \nfunctions triggered a index out of bounds exception. \nThe following testcase works in 1.7R1 \npackage foo; \nimport org.mozilla.javascript.Function; \nimport org.mozilla.javascript.ContextFactory; \nimport org.mozilla.javascript.ContextAction; \nimport org.mozilla.javascript.Context; \nimport org.junit.Test; \npublic class OverloadTest { \n        public void method(String one, Function function) { \n                System.out.println(\"string+function\"); \n        } \n        public void method(String... strings) { \n                System.out.println(\"string[]\"); \n        } \n        @Test \n        public void callOverloadedFunction() { \n                new ContextFactory().call(new ContextAction() { \n                        public Object run(Context cx) { \n                                cx.evaluateString(cx.initStandardObjects(),\"new \nPackages.foo.OverloadTest().method('one', 'two','three')\", \"<test>\", \n1, null); \n                                cx.evaluateString(cx.initStandardObjects(),\"new \nPackages.foo.OverloadTest().method('one', function() {})\", \"<test>\", \n1, null); \n                                return null; \n                        } \n                }); \n        } \n} \n\n//outputs: \nstring[] \nstring+function \nWhen I run it against the latest source, it results in the following \nstring[] \njava.lang.ArrayIndexOutOfBoundsException: 1 \n        at org.mozilla.javascript.NativeJavaMethod.preferSignature \n(NativeJavaMethod.java:508) \n        at org.mozilla.javascript.NativeJavaMethod.findFunction \n(NativeJavaMethod.java:367) \n        at org.mozilla.javascript.NativeJavaMethod.call(NativeJavaMethod.java: \n161) \n        at org.mozilla.javascript.optimizer.OptRuntime.call2(OptRuntime.java: \n76) \n        at org.mozilla.javascript.gen._test__2._c_script_0(<test>:1) \n        at org.mozilla.javascript.gen._test__2.call(<test>) \n        at org.mozilla.javascript.ContextFactory.doTopCall \n(ContextFactory.java:426) \n        at org.mozilla.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java: \n3060) \n        at org.mozilla.javascript.gen._test__2.call(<test>) \n        at org.mozilla.javascript.gen._test__2.exec(<test>) \n        at org.mozilla.javascript.Context.evaluateString(Context.java:1112) \n        at foo.OverloadTest$1.run(OverloadTest.java:24) \n        at org.mozilla.javascript.Context.call(Context.java:522) \n        at org.mozilla.javascript.ContextFactory.call(ContextFactory.java: \n535) \n        at foo.OverloadTest.callOverloadedFunction(OverloadTest.java:21) \n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) \n        at sun.reflect.NativeMethodAccessorImpl.invoke \n(NativeMethodAccessorImpl.java:39) \n        at sun.reflect.DelegatingMethodAccessorImpl.invoke \n(DelegatingMethodAccessorImpl.java:25) \n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall \n(FrameworkMethod.java:44) \n        at org.junit.internal.runners.model.ReflectiveCallable.run \n(ReflectiveCallable.java:15) \n        at org.junit.runners.model.FrameworkMethod.invokeExplosively \n(FrameworkMethod.java:41) \n        at org.junit.internal.runners.statements.InvokeMethod.evaluate \n(InvokeMethod.java:20) \n        at org.junit.internal.runners.statements.RunBefores.evaluate \n(RunBefores.java:28) \n        at org.junit.internal.runners.statements.RunAfters.evaluate \n(RunAfters.java:31) \n        at org.junit.runners.BlockJUnit4ClassRunner.runChild \n(BlockJUnit4ClassRunner.java:73) \n        at org.junit.runners.BlockJUnit4ClassRunner.runChild \n(BlockJUnit4ClassRunner.java:46) \n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180) \n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41) \n        at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173) \n        at org.junit.internal.runners.statements.RunBefores.evaluate \n(RunBefores.java:28) \n        at org.junit.internal.runners.statements.RunAfters.evaluate \n(RunAfters.java:31) \n        at org.junit.runners.ParentRunner.run(ParentRunner.java:220) \nbug?",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "496585",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Regression in overload resolution",
    "systemSpecification": true,
    "version": "head"
}