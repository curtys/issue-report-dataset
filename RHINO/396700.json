{
    "comments": [
        {
            "author": "dr.bobik+mozdev@gmail.com",
            "body": "Spidermonkey (JavaScript-C 1.6 pre-release 1 2006-04-04) does behave correctly, as described above.",
            "date": "20070919T14:03:57",
            "id": 0
        },
        {
            "author": "szegedia@freemail.hu",
            "body": "Fixed in CVS HEAD -- had to pass the thisObj argument through ScriptRuntime.toObject() to make sure primitives get promoted to object.\n\n    Checking in src/org/mozilla/javascript/NativeArray.java;\n    /cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeArray.java,v  <--  NativeArray.java\n    new revision: 1.75; previous revision: 1.74\n    done\n",
            "date": "20071023T17:49:20",
            "id": 1
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Attila, \n\nAfter this change we're now getting a failure with the code\n\nArray.prototype.some.call(\"foobar\", function(c) {return c == 'x'}, undefined)\n\nwhich results in \"false\" for SpiderMonkey, but results in the error \n\nuncaught JavaScript runtime exception: TypeError: Cannot convert undefined to an object.\n\nfor Rhino.",
            "date": "20071030T15:35:34",
            "id": 2
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Fixed: \n\nChecking in src/org/mozilla/javascript/NativeArray.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeArray.java,v  <--  NativeArray.java\nnew revision: 1.77; previous revision: 1.76\ndone\n",
            "date": "20071031T14:11:38",
            "id": 3
        }
    ],
    "component": "Core",
    "description": "User-Agent:       Mozilla/5.0 (compatible; Konqueror/3.5; Linux) KHTML/3.5.6 (like Gecko) (Kubuntu)\nBuild Identifier: Rhino 1.6 release 7\n\nArray.map when called with two arguments, the second being an empty string, ignores the second argument and uses the `this' object of the current scope instead. \nThis doesn't happen when the second argument is either an empty array ([]) or (new String('')), and is inconsistent with the code on http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Array:map#Compatibility\n\n\nReproducible: Always\n\nSteps to Reproduce:\njs> [0].map( function(){return this.toString();}, '');\n\n\nActual Results:  \n-> prints [object global]\n\nExpected Results:  \nshould return a 1 element array containing the empty string (prints as empty string, but may be verified by attaching a call to toSource() )\n\njs> [0].map( function(){return this.toSource();}, []);\n-> prints [] (correctly)\n\njs> [0].map( function(){return this.toSource();}, new String(''));\n-> prints (new String(\"\")) (also correctly)",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "396700",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Array.map inconsistent behavior when called with 2 arguments",
    "systemSpecification": false,
    "version": "other"
}