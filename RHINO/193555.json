{
    "comments": [
        {
            "author": "user@apochta.com",
            "body": "Created attachment 114598\nFix: replacing vars.hasLocal(name) by !vars.hasLocal(name)\n\nI wish I would be more careful when made the changes to VraibaleTable. In\nNodeTransformer.addVariables() in 1.4R3 had a condition \"vars.getLocal(name) ==\nnull\" which I replaced by \"vars.hasLocal(name)\" thus disabling access to the\nfunction name. On the other hand even the test suite does not have a check for\nthat, so it seems this feature quite unknown.\n\nIn any case, this one line patch to NodeTransformer.addVariables() restores the\nfunctionality.",
            "date": "20030216T11:16:29",
            "id": 0
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Testcase added to JS testsuite:\n\n      mozilla/js/tests/ecma_3/Function/regress-193555.js",
            "date": "20030217T23:09:40",
            "id": 1
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Testcase passes in SpiderMonkey; and as Igor reports, it passes if I run\nversion 1.5R3 of Rhino. Fails in 1.5RC4 with the error Igor reports -",
            "date": "20030217T23:22:53",
            "id": 2
        },
        {
            "author": "user@apochta.com",
            "body": "Marking fixed as I commited the fix some time ago",
            "date": "20030226T12:59:00",
            "id": 3
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Verified FIXED. \n\nThe above testcase now passes in the Rhino shell, in both \ncompiled and interpreted mode -",
            "date": "20030226T21:53:28",
            "id": 4
        },
        {
            "author": "igor@mir2.org",
            "body": "Targeting as resolved against 1.5R4.1",
            "date": "20040213T11:48:22",
            "id": 5
        }
    ],
    "component": "Core",
    "description": "In 1.5R4 a function expression can not access its function name. To test, run\nthe following test case in the Rhino shell with arbitrary optimization:\n\nvar x = function f() { return f.toString(); };\n\nvar ok = (x.toString() === x());\n\nprint(ok ? \"OK\" : \"FAILED\");\n\n\nIn Rhino 1.5R3 it prints OK while running 1.5R4 produces:\n\njs: \"/home/igor/js/x/f_rec.js\", line 2: uncaught JavaScript exception:\nReferenceError: \"f\" is not defined. (/home/igor/js/x/f_rec.js; line 2)",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "193555",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "1.5R4 regression: function expression has no access to its name",
    "systemSpecification": true,
    "version": "other"
}