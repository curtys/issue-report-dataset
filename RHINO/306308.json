{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 194160\nImplementation\n\nNot to introduce dependency on JDK 1.3-only feature in Rhino core I factored\nout that through JVMBridge",
            "date": "20050829T10:51:52",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "I committed the implementation.",
            "date": "20050829T10:59:03",
            "id": 1
        }
    ],
    "component": "Compiler",
    "description": "Currently the automatic conversion of JavaScript function to Java interface is\nimplemented through generation of Java class implementing the interface. This is\nsimilar to JavaAdapter code. In general it works nicely but still there are\nlimitations:\n\n1. It requires the permission to create a class loader which may not be granted\nto the application or applet.\n\n2. The class loader requires that its parent loader must have access to both\nRhino classes and the interface in question. It may not be possible with loading\ninterfaces dynamically.\n\n3. On some JVMs it causes memory leak.\n\nAll this problems can be addressed using java.lang.reflect.Proxy which is\navailable since JDK 1.3. Thus I suggest to use it for function->interface\nconversion. \n\nIt would have another benefit of making feature available with smalljs.jar as\nthe code would no longer depend on class generation library.\n\nIdeally it would be nice to use java.lang.reflect.Proxy for JavaAdapter as well\nwhen it needs to implement only interfaces without subclassing Java classes, but\nthat is for separated bug.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "306308",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "RFE",
    "priority": "-- enhancement",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "JS function as Java interface via reflect.Proxy",
    "systemSpecification": true,
    "version": "other"
}