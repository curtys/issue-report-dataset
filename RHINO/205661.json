{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 123280\nFix: follow default JS rules in ScriptableObject.setBySetter if start != this\n\nThe patch changes changes logic of a setter with delegator to never invoke it\nif the property is accessed via prototype. A similar treatment is applied for a\nsetter without delegator in the cases when start is not an instance of this\ntype since this case would show the same behavior of changing prototype\nproperty and not creating a new property in the original object.",
            "date": "20030514T15:11:10",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "I committed the patch",
            "date": "20030515T07:31:30",
            "id": 1
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Verified FIXED using Igor's testcase above -\n\nBEFORE FIX:\n[ ] java org.mozilla.javascript.tools.shell.Main -f 205661.js\nStrange\n\nAFTER FIX:\n[ ] java org.mozilla.javascript.tools.shell.Main -f 205661.js\nOK",
            "date": "20030515T18:02:45",
            "id": 2
        },
        {
            "author": "igor@mir2.org",
            "body": "Targeting as resolved against 1.5R5",
            "date": "20040213T11:42:19",
            "id": 3
        }
    ],
    "component": "Core",
    "description": "Rhino contains API that allows to define in Java getters and setters for JS\nproperties, see\nhttp://mozilla.org/rhino/apidocs/org/mozilla/javascript/ScriptableObject.html#defineProperty(java.lang.String,%20java.lang.Object,%20java.lang.reflect.Method,%20java.lang.reflect.Method,%20int)\n\nBut when the delegator form of the setter for property \"someProperty\" is used\nfor object \"x\" which is a prototype for object \"y\", then invoking:\n\ny.someProperty = 1\n\nwill change the value of someProperty in x leaving y object intact. This is\nrather unexpected behavior since it does not follow the standard JS logic which\nrequire in this case to create a new property someProperty in y without changing x.\n\nThis form of getters/setters is used to initialize various library objects\nlazily which can be used to demonstrate the problem in Rhino shell:\n\n----- test start -----\nfunction X() { }\nX.prototype = this;\n\nvar x = new X; // this is prototype of x now\n\n//Uncomment the following to enable proper behavior since it will initialize \n//JavaAdapter and replace getter/setter for JavaAdapter property in this \n\n//this.JavaAdapter;\n\nx.JavaAdapter = 1;\n\n\nvar ok = this.JavaAdapter != 1;\nprint(ok ? \"OK\" : \"Strange\");\n----- test end -----",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "205661",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Unexpected prototype and Java setter interaction",
    "systemSpecification": false,
    "version": "other"
}