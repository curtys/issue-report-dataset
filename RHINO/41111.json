{
    "comments": [
        {
            "author": "user@apochta.com",
            "body": "I suggest to close the bug as fixed as since 1.5R2 one can use omj.WrapHandler\nto explicitly control mapping of Java String to JS one and in Rhino 1.5R4 one\nwill be able to alter the behavior via simple\ncontextInstance.getWrapHandler().setJavaPrimitiveWrap(true) \n",
            "date": "20021203T22:09:01",
            "id": 0
        },
        {
            "author": "pschwartau@meer.net",
            "body": "OK, resolving as FIXED -",
            "date": "20021203T22:33:05",
            "id": 1
        },
        {
            "author": "pschwartau@meer.net",
            "body": "And marking Verified -",
            "date": "20021203T22:34:46",
            "id": 2
        },
        {
            "author": "igor@mir2.org",
            "body": "Targeting as resolved against 1.5R4",
            "date": "20040213T12:17:15",
            "id": 3
        }
    ],
    "component": "Core",
    "description": "rubys@us.ibm.com wrote:\n\n  That code snippet below is actually the same test as the one that I said\n  that works.\n\nSorry. I misread your note.\n\n\n\n  Note that there actually are three cases.  (1) java.lang.String, (2)\n  org.mozilla.javascript.NativeString, and (30\n  org.mozilla.javascript.NativeJavaObject wrappered java.lang.String.  It is\n  the third case that is not handled well.\n\n  If org.mozilla.javascript.NativeString were enhanced to support all of the\n  neccessary functions and attributes of java.lang.String, and the code were\n  more consistent on how it chose to wrapper String objects, then you could\n  eliminate a source of confusion while retaining backwards compatibility.\n\n  Another solution would be to find all cases where strings are handled\n  (e.g., ScriptRuntime.toNumber(Object)) and add specific code to handle\n  NativeJavaObject wrappered Strings as well.\n\nThat sounds like a reasonable approach. I'll open a bug for it and look into it \nonce we finally wrap up the 1.5 final.\n\n\n\n  - Sam Ruby\n\n  Norris Boyd <nboyd@atg.com> on 05/30/2000 04:06:31 PM\n\n  To:   Sam Ruby/Raleigh/IBM@IBMUS\n  cc:   Rick Rineholt/Raleigh/IBM@IBMUS\n  Subject:  Re: java.lang.String vs. JavaScript \"string\"\n\n  Actually, now that I think about it, we did make a change not too long ago\n  that\n  increases the priority of a [[DefaultValue]] conversion of a wrapped\n  java.lang.String to a JavaScript primitive string. So that fixes the code\n  snippet below:\n\n  js> foo = \"5\";\n  5\n  js> foo - 3\n  2\n\n  There are still some instances where problems may crop up, but they should\n  be\n  less with this change.\n\n  I'm trying to post a new zip file for Rhino, but have discovered that I\n  don't\n  have access anymore to post. I'm working to get around that.\n\n  --N\n\n  rubys@us.ibm.com wrote:\n\n  > In exploring code written using Rhino (and Rick's VB like front end), we\n  > find that there are a number of differences in ways that these two types\n  of\n  > strings are handled.  It would seem to me that these differences would be\n  > confusing to an end user.  In particular, the following works:\n  >\n  >    var foo = \"5\";\n  >    var bar = foo - 3;\n  >\n  > However, if foo is set as the return from a liveConnect type of call\n  (i.e.,\n  > it gets a true java.lang.String), then the user sees an error message\n  that\n  > the object does not have a \"toDouble\" method.  At a minimum, a more\n  > specific error message would be appropriate.\n  >\n  > A simple fix would seem to me to keep Strings always in their JavaScript\n  > format.  In particular, if the following call in NativeJavaMethod were\n  > changed from:\n  >\n  >    Object wrapped = NativeJavaObject.wrap(scope, retval, staticType);\n  >\n  > to\n  >\n  >    Object wrapped = ScriptRuntime.wrap(scope, retval, staticType);\n  >\n  > Then I think cases like these would be handled more intuitively.  Similar\n  > cases occur in JavaMembers, NativeJavaArray, and others.\n  >\n  > - Sam Ruby",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "41111",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "java.lang.String vs. primitive string type",
    "systemSpecification": true,
    "version": "other"
}