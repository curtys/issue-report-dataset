{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 188183\nImplementation\n\nThe patch adds RefCallable interface extending Callable and updates code\ngeneration/runtime to call refCall method in the new interface when necessary.\nAnother important consequence of the patch is that it changes implementation of\n\"()\" operator to require only Callable interface, not Function for its target.\nIn this way host objects that needs to support cases like:\n\nmatrix(0, 1) = 1; \nmatrix(1, 2) = matrix(0, 1);\nmatrix(0, 1) += 10;\n\nwould just need to implement RefCallable in addition to Scriptable and not\nworry about implementing Function.construct which is not necessary in this\ncase.",
            "date": "20050704T09:22:13",
            "id": 0
        },
        {
            "author": "mcbp223@yahoo.com",
            "body": "(In reply to comment #1)\n\nI was wondering if RefCallable should extend Callable or can be just an \nindependent interface, to make it even more flexible.\n\nAnyway if you can keep this change - and test only for Callable/RefCallable \nwhere you used to test for Function or BaseFunction - will help a lot in \nembeddings, sometimes Function is too heavyweight.",
            "date": "20050706T03:58:55",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "I committed the patch",
            "date": "20050731T14:27:49",
            "id": 2
        }
    ],
    "component": "Core",
    "description": "Currently Rhino has very limited runtime support for implementing\nfunction-results-as-lvalue. In particular it requires to subclass BaseFunction\nto override its callRef method. This is very inconvenient since to support the\nnotion like\n\nfoo() = bar\n\nwhere foo is a host object implementing Scriptable interface one forced to\nextend BaseFunction witch could force significant refactoring.\n\nThe idea would be to introduce a new interface that extends Callable to denote\nan object where () can return an lvalue represented as Ref subclass in Rhino.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "299613",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "-- enhancement",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Runtime support for function-results-as-lvalue",
    "systemSpecification": true,
    "version": "other"
}