{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 130962\nTest case executing a script returning regexp literal twice",
            "date": "20030905T20:05:51",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 131008\nAccess to scope independent compiled form of regexp\n\nOne way to fix the problem is to implement the optimizer logic in the\ninterpreter as well when regular expression is compiled when a function is\ncreated or when a script is executed. But it would mean that regexps are\nrecompiled each time script is executed. \n\nA better way would be to have an option to create scope-independent compiled\nregexp presentation and then wrap it into a Scriptable when a function is\ncreated and this is what the patch addresses. It splits newRegExp from\nRegExpProxy into compileRegExp and wrapRegExp where compileRegExp creates a\nself-contained object that does not have any references to scope and wrapRegExp\ngenerates a Scriptable wrap for it.",
            "date": "20030906T20:04:01",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 131019\nFix: store only only compiled regexps in InterpretedScript \n\nThe patch is an extension of the previous fix which dresses compiled regexps\ninto Scriptable clothes only during script execution and function construction\nso InterpretedScript has no reference to scope.",
            "date": "20030907T08:54:48",
            "id": 2
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 131030\nOptimizer changes: store compiled regexps in static variables\n\nSince compiled regexps is self-contained object, storing them as static fields\nin a generated class would not cause any memory leaks even if the generated\nclasses are produced by JS compiler and used as a part of an application. \n\nThis patch extends the previous one to include this optimization as well so\nregexp literals are compiled only once while their Scriptable wrappers are\ngenerated during function construction or script execution.",
            "date": "20030907T15:42:10",
            "id": 3
        },
        {
            "author": "igor@mir2.org",
            "body": "I committed the fix",
            "date": "20030910T11:06:48",
            "id": 4
        },
        {
            "author": "igor@mir2.org",
            "body": "Trageting as resolved against 1.5R5",
            "date": "20040213T11:33:27",
            "id": 5
        }
    ],
    "component": "Core",
    "description": "Currently in Rhino a Script object generated by the the interpreter contain a\nreference to scope object as long as there is at least one regular expression\npresent in the script. It prevents the original scope from garbage collection if\nscript is executed against a new scope and can wrong references to be used when\nusing regular expressions. \n\nThe optimizer does not have this problem since it creates regexp objects during\nscript execution.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "218440",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Compiled scripts should not contain references to scope",
    "systemSpecification": false,
    "version": "other"
}