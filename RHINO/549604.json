{
    "comments": [
        {
            "author": "mguillemot@yahoo.fr",
            "body": "Created attachment 429708\nPatch with unit test implementing NativeError's stack property and improving RhinoException.getScriptStacktrace in compiled mode",
            "date": "20100302T13:44:51",
            "id": 0
        },
        {
            "author": "hannesw@gmail.com",
            "body": "Thanks for report and patch. I guess mirroring the stack format from Firefox is important to you? I prefer the one we have in RhinoException.getScriptStackTrace() for readability, but I think anything that's easy to parse is ok.\n\nOne thing I'd like to add to your patch is including support for the stack property for Errors generated via new Error() when the Context.FEATURE_LOCATION_INFORMATION_IN_ERROR feature is enabled (see bug #342807), so I consider doing a bit more refactoring on that.",
            "date": "20100330T11:11:58",
            "id": 1
        },
        {
            "author": "mguillemot@yahoo.fr",
            "body": "Indeed it is important for me to mirror Firefox format. RhinoException.getScriptStackTrace is a bit more coherent with this patch but if you really want to improve the situation in this area, I think that RhinoException should rather provide access to a StackTraceElement[]. It would be far better than having to parse strings.\n\nYou're right, it makes sense to handle Context.FEATURE_LOCATION_INFORMATION_IN_ERROR too.",
            "date": "20100330T12:10:31",
            "id": 2
        },
        {
            "author": "hannesw@gmail.com",
            "body": "Created attachment 436164\nnew patch\n\nRewritten patch. This adds getScriptStack() methods to RhinoExceptions to get the exception's stack as array of the (newly introduced) ScriptStackElement class. The default stack format is the \"traditional\" Rhino format, but there's a static useMozillaStackStyle(boolean) method in RhinoException to switch to Mozilla/Firefox stack format. Is that a viable solution for you, Marc?\n\nThe patch also sets the stack on Errors thrown by script code if the FEATURE_LOCATION_INFORMATION_IN_ERROR context feature is enabled.",
            "date": "20100331T12:26:20",
            "id": 3
        },
        {
            "author": "hannesw@gmail.com",
            "body": "Created attachment 436176\nslightly revised version of the second patch",
            "date": "20100331T13:26:56",
            "id": 4
        },
        {
            "author": "hannesw@gmail.com",
            "body": "Committed the last patch. Let me know if you find any problems with it.\n\nChecking in src/org/mozilla/javascript/Interpreter.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/Interpreter.java,v  <--  Interpreter.java\nnew revision: 1.361; previous revision: 1.360\ndone\nChecking in src/org/mozilla/javascript/JavaScriptException.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/JavaScriptException.java,v  <--  JavaScriptException.java\nnew revision: 1.28; previous revision: 1.27\ndone\nChecking in src/org/mozilla/javascript/NativeError.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeError.java,v  <--  NativeError.java\nnew revision: 1.52; previous revision: 1.51\ndone\nChecking in src/org/mozilla/javascript/RhinoException.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/RhinoException.java,v  <--  RhinoException.java\nnew revision: 1.14; previous revision: 1.13\ndone\nChecking in src/org/mozilla/javascript/ScriptRuntime.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/ScriptRuntime.java,v  <--  ScriptRuntime.java\nnew revision: 1.327; previous revision: 1.326\ndone\nChecking in src/org/mozilla/javascript/ScriptStackElement.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/ScriptStackElement.java,v  <--  ScriptStackElement.java\nnew revision: 1.3; previous revision: 1.2\ndone\nRCS file: /cvsroot/mozilla/js/rhino/testsrc/org/mozilla/javascript/tests/ErrorPropertiesTest.java,v\ndone\nChecking in testsrc/org/mozilla/javascript/tests/ErrorPropertiesTest.java;\n/cvsroot/mozilla/js/rhino/testsrc/org/mozilla/javascript/tests/ErrorPropertiesTest.java,v  <--  ErrorPropertiesTest.java\ninitial revision: 1.1\ndone\nChecking in testsrc/org/mozilla/javascript/tests/StackTraceTest.java;\n/cvsroot/mozilla/js/rhino/testsrc/org/mozilla/javascript/tests/StackTraceTest.java,v  <--  StackTraceTest.java\nnew revision: 1.2; previous revision: 1.1\ndone\nChecking in testsrc/org/mozilla/javascript/tests/Utils.java;\n/cvsroot/mozilla/js/rhino/testsrc/org/mozilla/javascript/tests/Utils.java,v  <--  Utils.java\nnew revision: 1.3; previous revision: 1.2\ndone",
            "date": "20100331T15:15:07",
            "id": 5
        }
    ],
    "component": "Core",
    "description": "User-Agent:       Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.18) Gecko/2010021501 Ubuntu/9.04 (jaunty) Firefox/3.0.18\nBuild Identifier: \n\nNativeError already has two interesting non ECMA properties: lineNumber and fileName. It would be useful to have property stack as well as done in different browsers.\n\nAdditionally, the information returned by RhinoException.getScriptStackTrace vary depending on the optimization level used. In interpreted mode in contains the function name whereas it is not the case in compiled mode.\n\nReproducible: Always",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "549604",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "RFE",
    "priority": "-- enhancement",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Add (non ECMA) property \"stack\" to NativeError",
    "systemSpecification": true,
    "version": "other"
}