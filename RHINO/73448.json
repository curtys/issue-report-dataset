{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Markin as fixed as the above example now works with Rhino tip even if the last\nline would be replaced by \n  print(it.getClass().getName());\n\nThe fixes for bug 201893 addressed this issue as well.\n\n",
            "date": "20030901T12:32:41",
            "id": 0
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Marking Verified; the above testcase works for me in Rhino, too -",
            "date": "20030908T22:27:05",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "Trageting as resolved against 1.5R5",
            "date": "20040213T11:33:25",
            "id": 2
        }
    ],
    "component": "Core",
    "description": "Thanks for sending this along. Here's what's going on:\n\nThe value returned by v.interator() is an object of class \njava.util.AbstractList.Itr, which is a private class. The logic in Rhino \nattempts first to \nuse information about the dynamic type of the class; but if it is private it \nthen walks up the superclass list looking for a class it has access to. If it \nreaches java.lang.Object, it gives up and uses the static type of the class (in \nthis case java.util.Iterator). \n\nIdeally, rhino would use some combination of the static type and the superclass \nof the dynamic type in this case, but that's a tricky change to \nmove from a one-to-one relationship between the object and the class to a \none-to-many relationship. \n\nDavid Peacham wrote:\n\n  Norris - you might recall I asked you about this a few weeks back, but I\n  failed to produce a very convincing example.\n\n  I've now realised that it can be recreated much more simply. Try this in\n  your Rhino shell:\n\n  var v = new java.util.Vector();\n  print(v);\n  print(v.toString());\n  var it = v.iterator();\n  print(it);\n  print(it.toString());\n\n  The last statement fails. The iterator 'it' is of an interface type, and the\n  interface doesn't include toString(). The Java equivalent of this script\n  works fine, of course.\n\n  This isn't entirely an academic problem. For toString() it doesn't matter. I\n  can always convert 'it' to a JavaScript string by writing it+\"\". But if we\n  replace toString() with getClass(), it does matter. I can find out the class\n  of the vector, but not of the iterator.\n\n  I don't know whether you see this as a bug or not. You might argue that I\n  shouldn't call methods that aren't defined in the interface.\n\n  ===========================================\n  A David Peacham\n  ===========================================",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "73448",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Multiple classes to represent reflected private java class",
    "systemSpecification": true,
    "version": "other"
}