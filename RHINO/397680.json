{
    "comments": [
        {
            "author": "BijuMailList@GMail.Com",
            "body": "http://groups.google.com/group/mozilla.dev.tech.js-engine/browse_thread/thread/3211633206991a7e",
            "date": "20070929T13:01:34",
            "id": 0
        },
        {
            "author": "ohad.serfaty@gmail.com",
            "body": "Created attachment 283434\nA Patch for Codegen.java\n\nthe function addInstructionCount adds a call in the compiled call to ScriptRuntime to append the number of instructions that is appropriate",
            "date": "20071003T21:23:17",
            "id": 1
        },
        {
            "author": "ohad.serfaty@gmail.com",
            "body": "Created attachment 283435\nPatch to ScriptRuntime.java\n\nAdded the function that is being called by the compiled class - and adds the instruction count that is given by the argument.",
            "date": "20071003T21:25:16",
            "id": 2
        },
        {
            "author": "ohad.serfaty@gmail.com",
            "body": "Created attachment 283437\nPAtch to compilerEnviros.java",
            "date": "20071003T21:26:20",
            "id": 3
        },
        {
            "author": "ohad.serfaty@gmail.com",
            "body": "Created attachment 283438\nPAtch to Context.java",
            "date": "20071003T21:27:19",
            "id": 4
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "I changed the approach a bit and added some additional supporting code. \n\nCommitted:\n\nChecking in src/org/mozilla/javascript/CompilerEnvirons.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/CompilerEnvirons.java,v  <--  CompilerEnvirons.java\nnew revision: 1.17; previous revision: 1.16\ndone\nChecking in src/org/mozilla/javascript/Context.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/Context.java,v  <--  Context.java\nnew revision: 1.261; previous revision: 1.260\ndone\nChecking in src/org/mozilla/javascript/ScriptRuntime.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/ScriptRuntime.java,v  <--  ScriptRuntime.java\nnew revision: 1.278; previous revision: 1.277\ndone\nChecking in src/org/mozilla/javascript/optimizer/Codegen.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/optimizer/Codegen.java,v  <--  Codegen.java\nnew revision: 1.256; previous revision: 1.255\ndone\nChecking in toolsrc/org/mozilla/javascript/tools/jsc/Main.java;\n/cvsroot/mozilla/js/rhino/toolsrc/org/mozilla/javascript/tools/jsc/Main.java,v  <--  Main.java\nnew revision: 1.14; previous revision: 1.13\ndone\nChecking in toolsrc/org/mozilla/javascript/tools/resources/Messages.properties;\n/cvsroot/mozilla/js/rhino/toolsrc/org/mozilla/javascript/tools/resources/Messages.properties,v  <--  Messages.properties\nnew revision: 1.32; previous revision: 1.31\ndone\n",
            "date": "20071005T19:40:56",
            "id": 5
        }
    ],
    "component": "Compiler",
    "description": "from mozilla.dev.tech.js-engine:\n\n> 3. stopping the script in higher optimized code is impossible under\n> the current rhino conditions. I can use the Thread.stop() method but\n> am reluctant to do so as it is unsafe. Is it possible to have a stop()\n> or interrupt() function to stop execution of a malicious script thats\n> running in highly optimized  context ?\n\nYou're right that this is a feature request and a good one. The right\nway to do this is to implement Context.observeInstructionCount for\ncompiled mode. There would need to be some way to indicate to the\ncompiler that you'd like to observe the count, and then compile in\ncallbacks from the generated Java classes at key points (backwards\njumps, function returns) that increment a counter by some value that\napproximates the count of executed Java instructions. The runtime\ncould then monitor these like is already done for interpreted scripts.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "397680",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "-- enhancement",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Need to support Context.observeInstructionCount for compiled mode",
    "systemSpecification": true,
    "version": "1.6R6"
}