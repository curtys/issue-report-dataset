{
    "comments": [
        {
            "author": "norrisboyd@gmail.com",
            "body": "reassign to other account",
            "date": "20000527T18:17:05",
            "id": 0
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Hmm. Calling getModifiers on the java.lang.reflect.Field object for \"a\" returns \n25, and Modifiers.isPublic(25) is true.\n\nThis looks like a JDK bug: the modifiers values for \"A\" and \"a\" are the same for \nboth\n    interface A { int a = 0;  }\nand\n    interface A { public int a = 0;  }\n\nAny ideas, Patrick?",
            "date": "20000527T18:55:13",
            "id": 1
        },
        {
            "author": "morten@nvg.org",
            "body": "Must be a JVM bug indeed. but it works with JDK1.3.1 and JDK1.4.0, so sun must \nhave fixed it (though I couldnt find a reference to it in the bug parade). \nPackages.A.a returns 0 for me as it should.\n\n\nWhether you explicitly say a field is public or not it is still going to be \npublic. From Java Specification about interfaces:\n\n9.3 Field (Constant) Declarations\n..\nEvery field declaration in the body of an interface is implicitly public, \nstatic, and final. It is permitted to redundantly specify any or all of these \nmodifiers for such fields.\n",
            "date": "20020622T15:05:31",
            "id": 2
        },
        {
            "author": "igor@mir2.org",
            "body": "The raeson for the bug is that interface is declared package-private, and with\nreflection it is not possible to access such field. With public interface it\nworks under jdk 1.1-1.4:\n\n~/tmp> cat A.java \npublic interface A { int a = 0;  }\n\n~/tmp> CLASSPATH=. java -jar js.jar -e 'print(Packages.A.a)'\n0\n\nOn the other hand, if one apply the following patch to omj/JavaMembers.java to\nprint a detailed stack trace, then the original non=public A I got:\n\njava.lang.IllegalAccessException: Class org.mozilla.javascript.JavaMembers can\nnot access a member of class A with modifiers \"public static final\"\n        at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:57)\n        at java.lang.reflect.Field.doSecurityCheck(Field.java:811)\n\n\nUnder jdk 1.1, 1.3 the exception is the same but it does not have a detailed\nmessage.\n\nIn principle this can be solved under JDK 1.2 via calling setAccessible on the\nfield if its access trigers IllegalAccessException, but perhaps such change it\nis better to do consistently in places where reflection is used.\n\n\n\n\nPatch to enable stack printout:\nIndex: JavaMembers.java\n===================================================================\nRCS file: /cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/JavaMembers.java,v\nretrieving revision 1.31\ndiff -u -r1.31 JavaMembers.java\n--- JavaMembers.java\t9 Jun 2002 15:58:14 -0000\t1.31\n+++ JavaMembers.java\t3 Apr 2003 14:39:37 -0000\n@@ -104,11 +104,16 @@\n                 type = bp.getter.getReturnType();\n             } else {\n                 Field field = (Field) member;\n-                rval = field.get(isStatic ? null : javaObject);\n+                if (isStatic) {\n+\t\t\t\t\trval = field.get(null);\n+\t\t\t\t} else {\n+\t\t\t\t\trval = field.get(javaObject);\n+\t\t\t\t}\n                 type = field.getType();\n             }\n         } catch (IllegalAccessException accEx) {\n-            throw new RuntimeException(\"unexpected IllegalAccessException \"+\n+            accEx.printStackTrace();\n+\t\t\tthrow new RuntimeException(\"unexpected IllegalAccessException \"+\n                                        \"accessing Java field\");\n         } catch (InvocationTargetException e) {\n             // Since JavaScriptException is a checked exception, must\n",
            "date": "20030403T16:10:42",
            "id": 3
        },
        {
            "author": "igor@mir2.org",
            "body": "Marking as fixed: Rhino calls for some time setAccessible under JDK >= 1.2 after\nfirst failed access with IllegalAccessException",
            "date": "20030805T18:09:45",
            "id": 4
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Rubber-stamp vrfy",
            "date": "20030805T18:25:21",
            "id": 5
        },
        {
            "author": "igor@mir2.org",
            "body": "Trageting as resolved against 1.5R5",
            "date": "20040213T11:35:13",
            "id": 6
        }
    ],
    "component": "Core",
    "description": "[rhino] cat A.java\ninterface A { int a = 0;  }\n[rhino] rhino\njs> Packages.A.a\njava.lang.RuntimeException: unexpected IllegalAccessException accessing Java fie\nld\n        at org/mozilla/javascript/JavaMembers.get (JavaMembers.java:102)\n        at org/mozilla/javascript/NativeJavaClass.get (NativeJavaClass.java:94)\n        at org/mozilla/javascript/ScriptRuntime.getProp (ScriptRuntime.java:691)\n\n        at org/mozilla/javascript/Interpreter.interpret (Interpreter.java:1594)\n        at org/mozilla/javascript/InterpretedScript.call (InterpretedScript.java\n:67)\n        at org/mozilla/javascript/InterpretedScript.exec (InterpretedScript.java\n:54)\n        at org/mozilla/javascript/Context.evaluateReader (Context.java:741)\n        at org/mozilla/javascript/tools/shell/Main.evaluateReader (Main.java:347\n)\n        at org/mozilla/javascript/tools/shell/Main.processSource (Main.java:284)\n\n        at org/mozilla/javascript/tools/shell/Main.exec (Main.java:148)\n        at org/mozilla/javascript/tools/shell/Main.main (Main.java:74)\n\nERROR: java.lang.RuntimeException: unexpected IllegalAccessException accessing J\nava field",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "40688",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Exception accessing package protected member",
    "systemSpecification": true,
    "version": "other"
}