{
    "comments": [
        {
            "author": "norrisboyd@gmail.com",
            "body": "Added target milestone of 1.6R6.",
            "date": "20070518T18:32:19",
            "id": 0
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Assigning to Roshan.",
            "date": "20070518T19:15:34",
            "id": 1
        },
        {
            "author": "roshanj@google.com",
            "body": "Created attachment 265308\nBug Patch\n\nHere is a proposed patch.",
            "date": "20070518T22:29:33",
            "id": 2
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Fixed:\n\nChecking in ScriptableObject.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/ScriptableObject.java,v  <--  ScriptableObject.java\nnew revision: 1.122.2.2; previous revision: 1.122.2.1\ndone\n",
            "date": "20070615T12:40:36",
            "id": 3
        }
    ],
    "component": "Core",
    "description": "User-Agent:       Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.8.1.3) Gecko/20070309 Firefox/2.0.0.3\nBuild Identifier: 1.6R6\n\njs> function A() { this.foo_ = 'a'; }\njs> A.prototype.__defineGetter__('foo', function() {return this.foo_})\njs> new A().foo\na\njs> function B() { this.foo_ = 'b' }\njs> B.prototype = new A();\n[object Object]\njs> new B().foo\nb\njs> B.prototype.__defineSetter__('foo', function(f) {this.foo_ = f})\njs> new B().foo\njs> var b = new B()\njs> b.foo_\nb\njs> b.foo\njs> b.__lookupGetter__('foo')\n\nfunction () {\n    return this.foo_;\n}\n\n\n\"__lookupGetter__ is returning a getter defined on a prototype even when there is a setter (and no getter) defined on the object itself.  I'm pretty sure that the converse for __lookupSetter__ does the same thing. \"\n\n\nReproducible: Always\n\nSteps to Reproduce:\n1.\n2.\n3.\nActual Results:  \nThis should not happen:\n\njs> b.foo\njs> b.__lookupGetter__('foo')\n\nfunction () {\n    return this.foo_;\n}\n\nExpected Results:  \n__lookupGetter__ should fail\n\nThe same happens on __lookupSetter__",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "381180",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "__lookupGetter__ finds a function even when it should not (similarly for __lookupSetter__)",
    "systemSpecification": true,
    "version": "other"
}