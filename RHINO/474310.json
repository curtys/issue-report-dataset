{
    "comments": [
        {
            "author": "norrisboyd@gmail.com",
            "body": "Base Rhino doesn't implement type annotations. Also, f2 doesn't have a return statement. Changing these I get correct behavior:\n\nfunction f1(i )\n{\n return ++i;\n}\n\nfunction f2(i )\n{\n return f1(i);\n}\nprint(f2(\"5\"));\n\nprints \"6\".",
            "date": "20090120T02:04:00",
            "id": 0
        },
        {
            "author": "sbabovich@demandware.com",
            "body": "Looks like bug appears with optimization levels > 0. Check below (test.js contains your test):\n\n[.. classes]$ java org.mozilla.javascript.tools.jsc.Main -opt 0 test.js\n[.. classes]$ java test\n6\n[.. classes]$ java org.mozilla.javascript.tools.jsc.Main -opt 1 test.js\n[.. classes]$ java test\n1",
            "date": "20090120T15:58:58",
            "id": 1
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Confirmed",
            "date": "20090120T18:25:42",
            "id": 2
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Created attachment 358115\nProposed patch",
            "date": "20090122T02:51:16",
            "id": 3
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Committed change to CVS HEAD and 1.7R2 branch.",
            "date": "20090122T02:55:28",
            "id": 4
        }
    ],
    "component": "Compiler",
    "description": "User-Agent:       Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.5) Gecko/2008121622 Fedora/3.0.5-1.fc9 Firefox/3.0.5\nBuild Identifier: rhino1_7R1\n\nConsider the following java script function:\n\nfunction f1(i : Number) : String\n{\n return ++i;\n}\n\nfunction f2(i : Number) : String\n{\n  f1(i);\n}\n \nThe result of \nf2(\"5\") will return 1 - NOT 6 !!! \n\nHere is java code for f1() generated by compiler:\n\n    private static Object _c1(c1 c1_1, Context context, Scriptable scriptable, Scriptable scriptable1, Object i, double d, Object aobj[])\n    {\n        scriptable = c1_1.getParentScope();\n    //    0    0:aload_0         \n    //    1    1:invokeinterface #201 <Method Scriptable Scriptable.getParentScope()>\n    //    2    6:astore_2        \n        return OptRuntime.wrapDouble(++d);\n    //    3    7:dload           5\n    //    4    9:dconst_1        \n    //    5   10:dadd            \n    //    6   11:dup2            \n    //    7   12:dstore          5\n    //    8   14:invokestatic    #205 <Method Double OptRuntime.wrapDouble(double)>\n    //    9   17:goto            20\n    //   10   20:areturn         \n    }\n\n\nAs you can see optimized code ignores Object input parameter. org.mozilla.javascript.optimizer.Codegen.visitIncDec() needs to be fixed.\n\nIf replace ++i with i+1 correct java code is generated: \nprivate static Object _c1(c1 c1_1, Context context, Scriptable scriptable, Scriptable scriptable1, Object i, double d, Object aobj[])\n    {\n        if(i == Void.TYPE)\n    //*   0    0:aload           4\n    //*   1    2:getstatic       #201 <Field Class Void.TYPE>\n    //*   2    5:if_acmpne       15\n            i = OptRuntime.wrapDouble(d);\n    //    3    8:dload           5\n    //    4   10:invokestatic    #205 <Method Double OptRuntime.wrapDouble(double)>\n    //    5   13:astore          4\n        scriptable = c1_1.getParentScope();\n    //    6   15:aload_0         \n    //    7   16:invokeinterface #211 <Method Scriptable Scriptable.getParentScope()>\n    //    8   21:astore_2        \n        return OptRuntime.add(i, 1.0D);\n    //    9   22:aload           4\n    //   10   24:dconst_1        \n    //   11   25:invokestatic    #215 <Method Object OptRuntime.add(Object, double)>\n    //   12   28:goto            31\n    //   13   31:areturn         \n    }\n\n \n  \n\n\nReproducible: Always\n\nSteps to Reproduce:\n1.\n2.\n3.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "474310",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Incorrect optimization of unary increment/decrement operators applied to number function parameteres",
    "systemSpecification": true,
    "version": "other"
}