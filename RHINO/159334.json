{
    "comments": [
        {
            "author": "ycoquillard@businessdecision.fr",
            "body": "(forgot the exception stack)\n\nException stack for v1.5R2 :\n\njava.lang.reflect.InvocationTargetException: \njava.lang.ArrayIndexOutOfBoundsException\n        at org.mozilla.javascript.Interpreter.interpret(Interpreter.java:1782)\n        at org.mozilla.javascript.InterpretedScript.call\n(InterpretedScript.java:68)\n        at org.mozilla.javascript.InterpretedScript.exec\n(InterpretedScript.java:59)\n        at org.mozilla.javascript.Context.evaluateReader(Context.java:778)\n        at net.com_6.js.RhinoInterpretor.evaluateReader\n(RhinoInterpretor.java:223)\n        at net.com_6.js.RhinoInterpretor.processFile(RhinoInterpretor.java:203)\n        at net.com_6.js.Global.include(Global.java:185)\n        at inv1.invoke()\n        at org.mozilla.javascript.FunctionObject.doInvoke\n(FunctionObject.java:519)\n        at org.mozilla.javascript.FunctionObject.callVarargs\n(FunctionObject.java:534)\n        at org.mozilla.javascript.FunctionObject.call(FunctionObject.java:399)\n        at org.mozilla.javascript.ScriptRuntime.call(ScriptRuntime.java:1225)\n        at org.mozilla.javascript.Interpreter.interpret(Interpreter.java:1935)\n        at org.mozilla.javascript.InterpretedScript.call\n(InterpretedScript.java:68)\n        at org.mozilla.javascript.InterpretedScript.exec\n(InterpretedScript.java:59)\n        at org.mozilla.javascript.Context.evaluateReader(Context.java:778)\n        at net.com_6.js.RhinoInterpretor.evaluateReader\n(RhinoInterpretor.java:223)\n        at net.com_6.js.RhinoInterpretor.processSource\n(RhinoInterpretor.java:153)\n        at net.com_6.js.RhinoInterpretor.run(RhinoInterpretor.java:327)\n        at net.com_6.hiope.Main.<init>(Main.java:84)\n        at net.com_6.hiope.Main.main(Main.java:42)",
            "date": "20020725T12:23:50",
            "id": 0
        },
        {
            "author": "user@apochta.com",
            "body": "Created attachment 104747\nexplicit test case for script with 64K diffrent  tokens",
            "date": "20021031T12:17:17",
            "id": 1
        },
        {
            "author": "user@apochta.com",
            "body": "Created attachment 104748\nExtending limit on number of different tokens to 64K\n\nThe Rhino tip already contains fixes to extend the limit from 32K name and\nstrings to 32K of different name and strings. This patch extends the limit\nfarther to 64K via storing indexes as uint16 and explicitly detects during byte\ncode generation the limit violations.",
            "date": "20021031T12:22:26",
            "id": 2
        },
        {
            "author": "user@apochta.com",
            "body": "Created attachment 104749\nTest with 0xFFFF names and string literals \n\nThis version passes in SM as well",
            "date": "20021031T12:40:50",
            "id": 3
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Igor's testcase added to JS testsuite:\n\n      mozilla/js/tests/js1_5/Regress/regress-159334.js\n\nAs Igor indicates, this test passes in the SpiderMonkey shell.\nWithout the above patch, it fails in the current Rhino shell:\n\n*-* Testcase js1_5/Regress/regress-159334.js failed:\nExpected exit code 0, got 1\nTestcase terminated with signal 0\nComplete testcase output was:\n\njava.lang.ArrayIndexOutOfBoundsException: -32768\n  at org.mozilla.javascript.Interpreter.interpret(Interpreter.java:2231)\n  at org.mozilla.javascript.InterpretedScript.call(InterpretedScript.java:64)\n  at org.mozilla.javascript.NativeGlobal.evalSpecial(NativeGlobal.java:530)\n  at     \norg.mozilla.javascript.ScriptRuntime.callOrNewSpecial(ScriptRuntime.java:1207)\n  at org.mozilla.javascript.ScriptRuntime.callSpecial(ScriptRuntime.java:1247)\n  at org.mozilla.javascript.gen.c17.call([path to]/regress-159334.js:67)\n  at org.mozilla.javascript.gen.c17.exec([path to]/regress-159334.js)\n  at org.mozilla.javascript.Context.evaluateReader(Context.java:820)\n  at org.mozilla.javascript.tools.shell.Main.evaluateReader(Main.java:363)\n  at org.mozilla.javascript.tools.shell.Main.processFileSecure(Main.java:354)\n  at org.mozilla.javascript.tools.shell.Main.processFile(Main.java:291)\n  at org.mozilla.javascript.tools.shell.Main.processSource(Main.java:283)\n  at org.mozilla.javascript.tools.shell.Main.exec(Main.java:103)\n  at org.mozilla.javascript.tools.shell.Main.main(Main.java:76)\nException in thread \"main\"",
            "date": "20021101T02:16:23",
            "id": 4
        },
        {
            "author": "user@apochta.com",
            "body": "Created attachment 104840\nNew version js1_5/Regress/regress-159334.js\n\nThe current version of js1_5/Regress/regress-159334.js takes too long time and\ntoo match memory to run under JDK 1.1. This patch changes it to bring time\ndown. It still necessary to specify 50M heap size to run it under JDK 1.1, but\nat least timing is resonable.",
            "date": "20021101T10:44:22",
            "id": 5
        },
        {
            "author": "user@apochta.com",
            "body": "I commited the patch",
            "date": "20021101T14:54:10",
            "id": 6
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Igor's new version of the test has been checked in:\n\nChecking in regress-159334.js;\n/cvsroot/mozilla/js/tests/js1_5/Regress/regress-159334.js,v  <--  \nregress-159334.js\nnew revision: 1.2; previous revision: 1.1\ndone\n\n\nIs it OK to mark this bug fixed, or is there further work left?\nThe testcase (new version) used to fail in Rhino as in Comment #5.\nNow, it passes in both the compiled and interpreted Rhino shells -",
            "date": "20021102T01:39:36",
            "id": 7
        },
        {
            "author": "user@apochta.com",
            "body": "Yes, then it should be marked as fixed",
            "date": "20021102T14:37:45",
            "id": 8
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Resolving as Fixed -",
            "date": "20021102T20:41:33",
            "id": 9
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Marking Verified -",
            "date": "20021102T20:41:54",
            "id": 10
        },
        {
            "author": "igor@mir2.org",
            "body": "Targeting as resolved against 1.5R4",
            "date": "20040213T12:16:01",
            "id": 11
        }
    ],
    "component": "Core",
    "description": "As far as I understand Rhino's source code, I think it's a bug. It is present \non both versions 1.5R2 & 1.5R3. It occurs each time the number of token exceeds \n32767. \n\nV1.5R2 : org.mozilla.javascript.Interpreter:getString()\nV1.5R3 : org.mozilla.javascript.Interpreter.getShort()\n\nThe way the index to enter the token's table (theStringTable) is computed can \nresult in negative numbers. \n\nHere's the code in 1.5R2 ;\n\n    private static String getString(String[] theStringTable, byte[] iCode,\n                                    int pc){\n        int index = (iCode[pc] << 8) + (iCode[pc + 1] & 0xFF);\n        return theStringTable[index];\n    }\n\nAs iCode is a table of bytes, iCode[pc] can result in a negative number. Here's \nan ugly-coded patch ;\n\n    private static String getString(String[] theStringTable, byte[] iCode,\n                                    int pc){\n\tint a1 = iCode[pc];\n\tif ( a1<0 ) a1 += 256;\n\ta1 = a1 << 8;\n\tint a2 = iCode[pc + 1];\n\tif ( a2<0 ) a2 += 256;\n\ta2 = a2  & 0xFF;\n\tint index = a1 + a2;\n        return theStringTable[index];\n    }\n\nAs I use some kind of code-generation, I have functions that exceed 2500 lines. \nBy using this patch, everything works fine. Sorry for my bad english, I hope \nthis will help :)",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "159334",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- major",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "The javascript functions size is limited by a bug",
    "systemSpecification": true,
    "version": "other"
}