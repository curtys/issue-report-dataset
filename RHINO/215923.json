{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 129655\nFix: search protype chain until an instance of Java \"this\" class is found",
            "date": "20030812T13:51:26",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "I cimmitted the fix",
            "date": "20030813T06:04:59",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "Trageting as resolved against 1.5R5",
            "date": "20040213T11:36:12",
            "id": 2
        }
    ],
    "component": "Core",
    "description": "When a prototype chain contains more then one wrapped Java object obtained\nthrough Context.toObject(), Rhino uses the first Java object as Java \"this\" when\nscripts calls methods found in other objects.\n\nFor example, the following code:\n\nvar proto1 = java.lang.Integer(1);\nvar proto2 = java.lang.Boolean(false);\nproto2.__proto__ = proto1;\n\nvar o = { __proto__: proto2 };\n\nvar ok = (false == o.booleanValue());\n\nok = ok && (1 == o.intValue());\n\nprint(ok);\n\nthrows an exception when it applies () to \"o.intValue\" instead of printing\n\"true\" at the end. It happens because during evaluating of \"o.intValue()\"\nintValue is located in Integer and then it is applied to a Boolean instance.  \n\nThis is rather inconsistent since Rhino should either not to look for prototype\nchain for Java this (so o.booleanValue() should fail) or look all the whole\nprototype chain until it finds one. The first behavior is restrictive even if\nadheres better to semantics of JS function calls while the second allows to\nbuild a prototype chain of Java objects to expose all their methods in a\nconvenient way.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "215923",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "too shallow search for \"this\" when calling reflected Java methods",
    "systemSpecification": false,
    "version": "other"
}