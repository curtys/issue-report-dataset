{
    "comments": [
        {
            "author": "norrisboyd@gmail.com",
            "body": "Fixed:\n\nChecking in NativeJavaObject.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeJavaObject.java,v  <-- NativeJavaObject.java\nnew revision: 1.77; previous revision: 1.76\ndone\n",
            "date": "20070417T15:59:44",
            "id": 0
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Adding target milestone of 1.6R6 based on the date this bug was resolved FIXED.",
            "date": "20070518T15:12:16",
            "id": 1
        }
    ],
    "component": "Core",
    "description": "Currently a primitive long works but a java.lang.Long doesn't. Here's a shell session with debugging on to show overloading behavior:\n\njs> var l = java.lang.Long.parseLong(\"1111111111111111\", 16)\n ----- Found first applicable java.lang.Long.parseLong(java.lang.String,int) for arguments (string,number)\n ----- Calling java.lang.Long.parseLong (java.lang.String,int) for arguments (string,number)\n ----- Returned 1229782938247303441 actual = class java.lang.Long expect = long\n ----- Wrapped as 1229782938247303441 class = class java.lang.Long\njs> var L = new java.lang.Long(l)\n ----- Found first applicable java.lang.Long.(long) for arguments (number)\n ----- Rejecting (all current bests better) java.lang.Long.(java.lang.String) for arguments (number)\njs> java.lang.Long.bitCount (l)\n ----- Found java.lang.Long.bitCount(long) for arguments (number)\n ----- Calling java.lang.Long.bitCount(long) for arguments (number)\n ----- Returned 16 actual = class java.lang.Integer expect = int\n ----- Wrapped as 16 class = class java.lang.Integer\n16\njs> java.lang.Long.bitCount(L)\n ----- Found java.lang.Long.bitCount(long) for arguments (java.lang.Long)\n ----- Calling java.lang.Long.bitCount(long) for arguments (number)\n ----- Returned 14 actual = class java.lang.Integer expect = int\n ----- Wrapped as 14 class = class java.lang.Integer\n14\njs>\n\nHowever, with my proposed change, I get\n\njs> var l = java.lang.Long.parseLong(\"1111111111111111\", 16)\n ----- Found first applicable java.lang.Long.parseLong(java.lang.String,int) for arguments (string,number)\n ----- Calling java.lang.Long.parseLong(java.lang.String,int) for arguments (string,number)\n ----- Returned 1229782938247303441 actual = class java.lang.Long expect = long\n ----- Wrapped as 1229782938247303441 class = class java.lang.Long\njs> var L = new java.lang.Long(l)\n ----- Found first applicable java.lang.Long.(long) for arguments (number)\n ----- Rejecting (all current bests better) java.lang.Long.(java.lang.String) for arguments (number)\njs> java.lang.Long.bitCount(L)\n ----- Found java.lang.Long.bitCount(long) for arguments (java.lang.Long)\n ----- Calling java.lang.Long.bitCount(long) for arguments (number)\n ----- Returned 16 actual = class java.lang.Integer expect = int\n ----- Wrapped as 16 class = class java.lang.Integer\n16",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "377777",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Don't lose precision on a java.lang.Long passed to a long parameter",
    "systemSpecification": true,
    "version": "1.6R5"
}