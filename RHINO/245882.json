{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 150309\nImplementing JavaImporter\n\nSimultaneous usage of ImporterTopLevel as top scope and prototype object makes\nthe patch bigger then necessary. For example, it alters IdScriptable to avoid\nsetting parent scope to self causing infinite loops.",
            "date": "20040608T22:59:42",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 150367\nAdditional fix: no hiding Object.prototype.constructor\n\nThe previous patch made JavaImporter a full-fetured host object constructor\nthat defines among others JavaImporter.prototype.constructor property.\n\nThis is problematic for ImporterTopLevel usage as top scope object as it makes\ntop-level constructor property to point to JavaImporter.prototype.constructor\nand not to Object.prototype.constructor.\n\nThis additional fix resolves the regression.",
            "date": "20040609T17:06:33",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "Fixed: I committed both patches. \n\nWith the patch applied and \"with\" operator one can almost achive affect of\nglobal importPackage without adding package classes to the scope permanently:\n\nwith (new JavaImporter(Packages.java.awt.event)) {\n    var btn = new JButton();\n    ...\n}\n\n",
            "date": "20040609T17:11:09",
            "id": 2
        },
        {
            "author": "igor@mir2.org",
            "body": "Fixed: I committed both patches. \n\nWith the patch applied and \"with\" operator one can almost achive effect of\nglobal importPackage without adding package classes to the scope permanently:\n\nwith (new JavaImporter(Packages.java.awt.event)) {\n    var btn = new JButton();\n    ...\n}",
            "date": "20040609T17:11:27",
            "id": 3
        },
        {
            "author": "igor@mir2.org",
            "body": "The example in comment 4 is wrong. A better way to demonstrate usability of\nJavaImporter is this code:\n\nvar SwingGui = JavaImporter(Packages.javax.swing,\n                            Packages.javax.swing.event,\n                            Packages.javax.swing.border,\n                            java.awt.event,\n                            java.awt.Point,\n                            java.awt.Rectangle,\n                            java.awt.Dimension);\n...\n\nwith (SwingGui) {\n    var mybutton = new JButton(test);\n    var mypoint = new Point(10, 10);\n    var myframe = new JFrame();\n...\n}",
            "date": "20040803T11:36:57",
            "id": 4
        },
        {
            "author": "igor@mir2.org",
            "body": "Proper target milestone",
            "date": "20040812T07:25:33",
            "id": 5
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 156272\nRegression fix\n\nThe patch (which I already committed) fixes regression reported by Merten\nSchumman:\n\nThe new implementation of importPackage/importClass assumed that thisObj should\nalways be ImporterTopLevel. But this is wrong when ImporterTopLevel is used as\ntop scope object to provide global import* functions since such scope can be a\npart of prototype chain.",
            "date": "20040816T16:16:25",
            "id": 6
        },
        {
            "author": "merten.schumann@asg.com",
            "body": "JavaImporter is an absolutely useful extension to Rhino IMHO, nice feature!\n   Merten",
            "date": "20040817T07:12:31",
            "id": 7
        }
    ],
    "component": "Core",
    "description": "Currently in Rhino importPackage and importCass are available when\nImporterTopLevel is a scope object. I suggest to add JavaImporter constructor to\nRhino that would construct explicit ImporterTopLevel objects. The constructor\nshould be initialized during Context.initStandardObjects call to allow in all\nscripts a usage like:\n\nvar Swing = new JavaImporter();\nSwing.importPackage(Packages.java.awt.event);\nSwing.importPackage(Packages.javax.swing);\nSwing.importClass(Packages.java.awt.EventQueue);\n\nand later:\n\nvar btn = new Swing.JButton()\netc.\n\nIn this way it would be possible to create ready-to-use aliases to package\ngroups in application without danger of namespace pollution.\n\nThe constructor should also allow to pass a list of packages/classes to import\nto simplify usage:\n\nvar Swing = new JavaImporter(Packages.java.awt.event,\n                             Packages.javax.swing,\n\t\t\t     Packages.java.awt.EventQueue);\n\nThe extension should be orthogonal to the current usage of ImporterTopLevel as\ntop scope object.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "245882",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "RFE",
    "priority": "-- enhancement",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "JavaImporter constructor",
    "systemSpecification": false,
    "version": "other"
}