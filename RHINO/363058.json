{
    "comments": [
        {
            "author": "hannesw@gmail.com",
            "body": "Created attachment 247811\nRhinoException.getScriptStackTrace() methods to get JS-only stack dumps\n\nAdds public getScriptStackTrace() methods to org.mozilla.javascript.RhinoException. Going further, the RhinoException.printStackTrace() methods could be adapted to include this information in stack traces.",
            "date": "20061207T12:02:54",
            "id": 0
        },
        {
            "author": "szegedia@freemail.hu",
            "body": "This patch looks good, however we might have an (admittedly exotic, but neverthless possible) case where we have mixed compiled and interpreted code on the stack. This is because we can have systems where scripts are compiled in contexts with different optimization levels. So, you'd have to combine the two approaches: first allow the interpreter to patch the stack, then extract from it the patched entries + entries for Java frames coming from sources that end in .js.",
            "date": "20061217T14:01:09",
            "id": 1
        },
        {
            "author": "hannesw@gmail.com",
            "body": "Created attachment 251061\nRhinoException.getScriptStackTrace() now working with mixed interpreted/compiled stacks\n\nI've rewritten the patch to work for mixed compiled/interpreted stacks. Because the Interpreter.CallFrame class is private this is a bit more complex than I'd like. Interpreter.getScriptStack(RhinoException) now generates a java.util.List containing the interpreted script stack fragments, which are then inserted at the right place by RhinoException.getScriptStackTrace().",
            "date": "20070110T11:28:12",
            "id": 2
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Committed patch:\n\nChecking in src/org/mozilla/javascript/Interpreter.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/Interpreter.java,v  <--  Interpreter.java\nnew revision: 1.320.2.2; previous revision: 1.320.2.1\ndone\nChecking in src/org/mozilla/javascript/RhinoException.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/RhinoException.java,v  <--  RhinoException.java\nnew revision: 1.3.2.1; previous revision: 1.3\ndone\n",
            "date": "20070606T19:48:10",
            "id": 3
        }
    ],
    "component": "Core",
    "description": "User-Agent:       Mozilla/5.0 (X11; U; Linux i686; de; rv:1.8.1) Gecko/20060601 Firefox/2.0 (Ubuntu-edgy)\nBuild Identifier: \n\nWhen running with the optimizer enabled, Rhino produces \"mixed\" stack traces automatically, since javascript resources are actually compiled to java classes. In interpreter mode, Rhino makes some effort to include the script stack into stack traces (see Interpreter.getPatchedStack()). \n\nMixed stack traces are very useful, but I have found that an even greater blessing for script writers are script only stack traces which only include JavaScript stack information, excluding the Java stuff. After all, JavaScript is a full, autonomous language environment, so it deserves its own stack trace.\n\nIdeally, I think RhinoExceptions stack traces should have two parts, similar to the way nested exceptions are dumped: The first part with only the Javascript stack, followed by the full (possibly nested) Java stack trace. As an example (this is as it is implemented in Helma): \n\nhelma.scripting.ScriptingException: ReferenceError: \"xxx\" is not defined. (/home/hannes/gobi/code/Comment/Comment.js#35)\n        at /home/hannes/gobi/code/Comment/Comment.js:35\n        at /home/hannes/gobi/code/Page/PageCore.js:339\n        at /home/hannes/gobi/code/Page/PageMacros.js:452\n        at /home/hannes/gobi/code/HopObject/macros.js:10\n        at /home/hannes/gobi/code/Global/WikiMarkup.js:26\n        at /home/hannes/gobi/code/Page/PageCore.js:505\n        at /home/hannes/gobi/code/Page/PageCore.js:492\n        at /home/hannes/gobi/code/Page/Page.js:277\nFull trace: org.mozilla.javascript.EcmaError: ReferenceError: \"xxx\" is not defined. (/home/hannes/gobi/code/Comment/Comment.js#35)\n        at org.mozilla.javascript.ScriptRuntime.constructError(ScriptRuntime.java:3226)\n        at org.mozilla.javascript.ScriptRuntime.constructError(ScriptRuntime.java:3216)\n        at org.mozilla.javascript.ScriptRuntime.notFoundError(ScriptRuntime.java:3289)\n        at org.mozilla.javascript.ScriptRuntime.name(ScriptRuntime.java:1570)\n        at org.mozilla.javascript.gen.c64._c2(/home/hannes/gobi/code/Comment/Comment.js:35)\n        at org.mozilla.javascript.gen.c64.call(/home/hannes/gobi/code/Comment/Comment.js)\n        at org.mozilla.javascript.optimizer.OptRuntime.callProp0(OptRuntime.java:119)\n \n\nReproducible: Always",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "363058",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "RFE",
    "priority": "-- enhancement",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Provide JavaScript-only stack trace from RhinoException",
    "systemSpecification": true,
    "version": "other"
}