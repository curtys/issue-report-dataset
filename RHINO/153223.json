{
    "comments": [
        {
            "author": "pschwartau@meer.net",
            "body": "Created attachment 88537\nNew RegExp test failures",
            "date": "20020620T23:03:22",
            "id": 0
        },
        {
            "author": "rogerl@formerly-netscape.com.tld",
            "body": "Fix checked in - variety of things:\n\n'isWhitespace' doesn't return 'true' for non-breaking spaces.\nThe 'flat' input string might be the empty string.\nMessed up sign extension from Byte to Char.\nMessed up flow-control for capture setting in 'Match' vs. 'Test' cases.",
            "date": "20020621T18:29:24",
            "id": 1
        },
        {
            "author": "pschwartau@meer.net",
            "body": "The latest patch fixes all 6 of the new testcase failures I reported.\nHowever, it is causing one of the previous testcases to fail:\n\n\n*-* Testcase ecma_3/RegExp/regress-85721.js failed:\nBug Number 85721\nSTATUS: Performance: execution of regular expression\nFailure messages were:\n\nFAILED!: Section 1 of test -\n         Expected value 'Execution took less than 25 ms',\n         Actual value   'Execution took 63 ms'\n\n\nFAILED!: Section 2 of test -\n\nregexp = /<sql:connection \nid=\"([^\\r\\n]*?)\">\\s*<sql:url>\\s*([^\\r\\n]*?)\\s*<\\/sql:url>\\s*<sql:driver>\\s*([^\\r\n\\n]*?)\\s*<\n\\/sql:driver>\\s*(\\s*<sql:userId>\\s*([^\\r\\n]*?)\\s*<\\/sql:userId>\\s*)?\\s*(\\s*<sql:\npassword>\\s*([^\\r\\n]*?)\\s*<\\/sql:password>\\s*\n)?\\s*<\\/sql:connection>/\n\nstring = '<sql:connection id=\"conn1\"> <sql:url>www.m.com</sql:url> \n<sql:driver>drive.class</sql:driver>\\n<sql:userId\n>foo</sql:userId> <sql:password>goo</sql:password> </sql:connection>'\n\n\nFAILED!: ERROR !!! regexp FAILED to match anything !!!\n\nExpect: [\"<sql:connection id=\"conn1\"> <sql:url>www.m.com</sql:url> \n<sql:driver>drive.class</sql:driver>\n<sql:userId>foo</sql:userId> <sql:password>goo</sql:password> \n</sql:connection>\", \"conn1\", \"www.m.com\", \"drive.class\n\", \"<sql:userId>foo</sql:userId> \", \"foo\", \"<sql:password>goo</sql:password> \", \n\"goo\"]\n\nActual: null\n\n\n\nSection 1 (performance measurement) can be adusted if 25 ms is too unrealistic.\nHowever, note that before the latest patch, this section passed.\n\nSection 2 is checking the accuracy of the regexp match. It is a complicated\none, and I'm not sure what's going wrong...",
            "date": "20020622T01:20:51",
            "id": 2
        },
        {
            "author": "rogerl@formerly-netscape.com.tld",
            "body": "ggggaaaaaaaaaaaaarrrrrgghnnnnnnnnnhhhhh!\n\nI ran the tests, I swear I ran the tests.",
            "date": "20020622T04:05:23",
            "id": 3
        },
        {
            "author": "rogerl@formerly-netscape.com.tld",
            "body": "New fix checked in - isSpaceChar wasn't the right answer after all.\nRan all the tests - this time without any skip lists at all, I'm getting 36 \nfailures (Phil - does this seem right?) though none seem RegExp related.",
            "date": "20020622T19:46:02",
            "id": 4
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Roger: that sounds about right, actually. There is a skip list \ncalled \"rhino-n.tests\" in the js/tests/ directory, and it contains\nabout that number. \n\nI will run the full testsuite myself on this and report back -",
            "date": "20020623T02:18:35",
            "id": 5
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Marking Verified Fixed.\n\nI get no test failures in either the compiled or interpreted modes\nof Rhino. I am using only the current rhino-n.tests as a skip list.\n\nAfter discussion with Roger, I have increased the time limit in\necma_3/RegExp/regress-85721.js to 100 ms for the performance tests.",
            "date": "20020624T22:34:23",
            "id": 6
        },
        {
            "author": "igor@mir2.org",
            "body": "Targeting as resolved against 1.5R4",
            "date": "20040213T12:21:03",
            "id": 7
        }
    ],
    "component": "Core",
    "description": "A new RegExp implementation has been checked into Rhino. See, for example,\nbug 125562, \"Regexp performance improvement\".\n\nThis has fixed 6 Rhino bugs:\n  bug 106548  /^.*?$/ will not match anything\n  bug 114969  [], [^] are valid RegExp conditions\n  bug 123439  Backreferences /(a)? etc./ must hold |undefined| if not used\n  bug 124508  regexp.lastIndex should be integer-valued double, not uint32\n  bug 125562  Regexp performance improvement\n  bug 126317  Crash on re.exec(str) if re.lastIndex set to certain values\n\nAnd has fixed 6 test failures:\n  ecma_3/RegExp/regress-105972.js\n  ecma_3/RegExp/regress-100199.js\n  ecma_3/RegExp/regress-123437.js\n  ecma_2/RegExp/properties-002.js\n  ecma_3/RegExp/regress-85721.js\n  ecma_3/RegExp/15.10.6.2-2.js\n\n\nI have removed all 6 of these from the \"rhino-n.tests\" skip list.\n\n\nHowever, I am getting 6 new test failures:\n  ecma_2/String/match-002.js\n  ecma_2/String/match-003.js\n  ecma_3/String/regress-83293.js\n  ecma_3/Unicode/uc-002.js\n  ecma_3/Unicode/uc-004.js\n  js1_2/regexp/control_characters.js\n\n\nI am filing this bug to track this issue. I will attach an HTML \nfile of these test failures below, with hyperlinks to the testcases -",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "153223",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "New RegExp engine in Rhino",
    "systemSpecification": true,
    "version": "other"
}