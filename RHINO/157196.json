{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 91169\nCustom serialization of ScriptableObject\n\nThe patch marks slots array as transient and adds writeObject/readObject that\nwrite/read only existing slots in the hashtable. I had also to change\nimplementation of sealObject to set count to -1 - count so it would be possible\nto know amount of existing slots without searching throw the slots array even\nin the sealed object.",
            "date": "20020712T21:51:36",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 91548\nStress test for ScriptableObject serialization\n\nSave it as SerTest.java",
            "date": "20020716T21:22:01",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "Fixed: I commited the patch as it passes the above stress test.",
            "date": "20020716T21:28:55",
            "id": 2
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Verified FIXED. Before the patch, the above testcase failed as follows:\n\nException in thread \"main\" java.lang.RuntimeException: FAILED!\n        at SerTest.test(SerTest.java:36)\n        at SerTest.main(SerTest.java:12)\n\n\n\nAfter the patch:\n\nPASSED",
            "date": "20020717T01:01:35",
            "id": 3
        },
        {
            "author": "igor@mir2.org",
            "body": "Targeting as resolved against 1.5R4",
            "date": "20040213T12:16:08",
            "id": 4
        }
    ],
    "component": "Core",
    "description": "Currently ScriptableObject uses the standard Java support for serialization of\nits data structures from hashtable implementation. But this does not work\nproperly as long as the slots array contains deleted entries marked with the\nREMOVED slot tag. The standard Java de-serialization restores such entries to a\nreference to a newly allocated object which != REMOVED. Such entries will stick\nwith hashtable forever and at some point will violate internal sanity checks.\n\nIn addition, the standard serialization waists storage as it takes room to store\nempty/deleted slots.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "157196",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "ScriptableObject needs custom serialization implementation",
    "systemSpecification": true,
    "version": "other"
}