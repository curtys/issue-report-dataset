{
    "comments": [
        {
            "author": "hannesw@gmail.com",
            "body": "Created attachment 493112\nOnly bind function expression name if it isn't otherwise defined in the function",
            "date": "20101124T21:56:55",
            "id": 0
        },
        {
            "author": "hannesw@gmail.com",
            "body": "Committed my patch.",
            "date": "20101124T22:17:26",
            "id": 1
        }
    ],
    "component": "Core",
    "description": "ES spec chapter 13 says a named function expression is bound to its name inside the function itself, e.g.:\n\nvar f = function foo() {\n    return foo; // this function\n};\n\nThe binding is not supposed to be in the function's activation object itself, so if the function defines a parameter, variable, or nested function with the same name that should take precedence over the function expression binding. However, the way Rhino implements this, the function expression binding almost always takes precedence over local definitions of the same name. For example, the following functions all returns the function itself instead of the bindings defined within the function:\n\nvar f = function foo(foo) {\n    return foo; // should return foo parameter\n};\n\nvar f = function foo() {\n    var foo;\n    return foo; // should return foo var\n}\n\nvar f = function foo() {\n    function foo() {}\n    return foo; // should return local foo function\n}",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "614668",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Function expression binding takes precedence over local bindings",
    "systemSpecification": true,
    "version": "head"
}