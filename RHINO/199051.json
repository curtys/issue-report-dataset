{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 118361\nDisable invoker optimization if it triggers SecurityException\n\n\n\nThe patch adds a public API to enable/disable on per Context basis the invoker\noptimization and disables it for any Context instance that has seen\nSecurityException during invoker invocation. \n\nThe patch also disables invoker optimization in case of var-arg methods since\nthere any speedup in method invocation is berried under the need to\ncreate/unwrap additional argument arrays.",
            "date": "20030324T23:43:26",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 118908\nMinimalistic patch: initialize invoker in FunctionObject constructor\n\nA simple way to resolve the issue is to create an invoker object in\nFunctionObject constructor instead of doing this lazily during script call. In\ntypical applications FunctionObject instances are constructed during\ninitialization when there is no script or other code on Java stack with\nrestricted permissions, so as long as Rhino classes have enough permissions,\nInvoker optimization should be available. And if it is not, the patch catches\nSecurityException to disable the optimization in this case which will happen\nonly once and not during each call, so the performance impact should be minimal\neven in this case.",
            "date": "20030330T22:28:41",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 118933\nPatch fix: In FunctionObject constructor create invoker only if method != null",
            "date": "20030331T11:11:17",
            "id": 2
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 118934\nYet another patch update: see comments in omj/optimizer/InvokerImpl.java for the reason",
            "date": "20030331T11:36:30",
            "id": 3
        },
        {
            "author": "igor@mir2.org",
            "body": "I committed the above patch.",
            "date": "20030331T13:18:40",
            "id": 4
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Verified FIXED.\n\nI followed the steps that Igor outlined above in the Rhino1_5R4\nshell vs. the Rhino1_5R5pre shell. I got the same exception as\nIgor in R4, but no exception in R5pre. I tried both variations\nof the test (opt -1 and opt 9) which Igor explained above.\n\nI will attach my opt -1 results below -",
            "date": "20030331T22:11:48",
            "id": 5
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Created attachment 118978\nVerification results on WinNT",
            "date": "20030331T22:14:15",
            "id": 6
        },
        {
            "author": "igor@mir2.org",
            "body": "Targeting as resolved against 1.5R5",
            "date": "20040213T11:52:19",
            "id": 7
        }
    ],
    "component": "Core",
    "description": "To speedup invocation of Java methods via reflection Rhino generates special\nclasses that calls the reflected method directly. It requires to create a class\nloader to load the generated byte code for the class but currently Rhino does\nnot check for a possible SecurityException during loader creation/class load. \n\nIt can happen, for example, if a system security policy disable creation of\nclass loaders or a currently executed script does not have sufficient privileges\neven if Rhino classes are allowed to do that.\n\nThe problem was initially reported in netscape.public.mozilla.jseng, see\nhttp://groups.google.com/groups?dq=&hl=en&lr=&ie=UTF-8&threadm=3E708F75.2020108%40icesoft.com&prev=/groups%3Fdq%3D%26num%3D25%26hl%3Den%26lr%3D%26ie%3DUTF-8%26group%3Dnetscape.public.mozilla.jseng%26start%3D25\n\nHere is a way to reproduce the problem based on that:\n\n1. Create the policy file test.policy that prevents Rhino from creating class\nloaders with the following body:\n\ngrant codeBase \"file:${user.home}/path-to-js-jar\" \n{\n  permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n  permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n  permission java.util.PropertyPermission \"*\", \"read\";\n}; \n\n\nwhere ${user.home}/path-to-js-jar should be adjusted accordingly (on windows one\nmay use something like file:/d:/rhino1_5/js.jar\n\n2. Put the following 2 lines into the file test.js in the same directory as\ntest.policy:\n\nvar x = new java.lang.Integer(2);\nprint(x.intValue());\n\n\n3. Run Rhino shell in the interpreted mode (if creation of class loaders is\ndisabled, the optimizer would not work):\n\njava -Djava.security.manager -Djava.security.policy=test.policy\norg.mozilla.javascript.tools.shell.Main -opt -1 test.js\n\nIt gives instead of expected printed number 2 an exception stack trace:\n\nException in thread \"main\" java.security.AccessControlException: access denied\n(java.lang.RuntimePermission createClassLoader)\n        at\njava.security.AccessControlContext.checkPermission(AccessControlContext.java:272)\n        at java.security.AccessController.checkPermission(AccessController.java:399)\n        at java.lang.SecurityManager.checkPermission(SecurityManager.java:545)\n        at\njava.lang.SecurityManager.checkCreateClassLoader(SecurityManager.java:610)\n        at java.lang.ClassLoader.<init>(ClassLoader.java:234)\n        at\norg.mozilla.javascript.DefiningClassLoader.<init>(DefiningClassLoader.java:55)\n\n\nMore complex test case would be to grant the createClassLoader permission to\nRhino classes and use optimizer. In this case the generated classes does not\nsufficient privileges and triggers AccessControlException as well:\n\ntest.policy:\n\ngrant codeBase \"file:${user.home}/path-to-js-jar\" \n{\n  permission java.lang.RuntimePermission \"createClassLoader\";\n  permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n  permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n  permission java.util.PropertyPermission \"*\", \"read\";\n}; \n\ninvocation:\n\njava -Djava.security.manager -Djava.security.policy=test.policy\norg.mozilla.javascript.tools.shell.Main -opt 9 test.js\n\nleads to exactly the same exception.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "199051",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Invoker optimization does not work with security manager",
    "systemSpecification": false,
    "version": "other"
}