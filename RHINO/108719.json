{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 126941\nNew method: FunctionObject.getMethodOrConstructor()\n\nThe new method returns Method or Constructor instance that FunctionObject\nrepresents which can be used to get their declared class as well.\n\nI do not think implementing Wrapper interface by FunctionObject is a good idea.\nAFAICS it is only useful when calling Java methods that take Method or\nConstructor arguments which is rare. An other hand it would unwrap\nFunctionObject when calling to Java methods taking Object as argument like\nArray or Hashtable methods. Which in turn would make FunctionObject to behaves\ndifferently from other Function instances which is unnatural.",
            "date": "20030702T20:04:40",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "I committed the patch.",
            "date": "20030702T21:08:08",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "Targeting as resolved against 1.5R5",
            "date": "20040213T11:42:58",
            "id": 2
        }
    ],
    "component": "Core",
    "description": "In an IdScriptable/ jsFunction context, both arguments and \"thisObj\" can be a\nfunction with scope \"global\" and prototype \"function\".  If we want the class to\nwhich the wrapped function is a member -- in order to call another function for\nexample user help about the function, our options are limited.\n\nFor example, implementing `help(name)' or equivalently \"help('name')\" where name\nevaluates to a known (constructor or) function.\n\n`FunctionObject.getDeclaringClass()' returns the `Method.getDeclaringClass' when\n`method' is not null.\n\nIn org/mozilla/javascript/FunctionObject:\n\n    /**\n     * If the method exists in the current state, return the Java\n     * class of which this function's method is a member.  Otherwise\n     * return null.  */\n    public Class getDeclaringClass(){\n        if ( null != method)\n            return method. getDeclaringClass();\n        else\n            return null;\n    }\n\nThis appears to work well.\n\nAn alternative would be for FunctionObject to implement Wrapper, and unwrap to\nMethod.  This may or may not be appropriate, I'm not sure.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "108719",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "RFE",
    "priority": "-- enhancement",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "FunctionObject.getDeclaringClass() unambiguously identifies wrapped method",
    "systemSpecification": false,
    "version": "other"
}