{
    "comments": [
        {
            "author": "hannesw@gmail.com",
            "body": "Created attachment 516860\nAdds TopLevel class that enables caching of and direct access to ES built-ins\n\nThis patch adds a new TopLevel class that extends IDScriptableObject and is extended by ImporterTopLevel. TopLevel is meant to be used as top-level scope and allows to cache built-in ECMAScript objects such as Object, Array, Function, String etc. \n\nThe patch also adds two methods to ScriptRuntime called newBuiltinObject() and setBuiltinProtoAndParent() that work similar to newObject() and setObjectProtoAndParent() but directly access the cached built-ins in the TopLevel scope. \n\nIf the top-level scope is not an instance of TopLevel or does not have its built-in cache initialized, these methods will fall back to the old behaviour. \n\nThis patch also optimizes JS object creation and toObject() conversion of primitive values by directly using the Java constructor instead of invoking the JavaScript constructor. At the same time it makes Object and Array implementations overridable by making Context.newObject() and Context.newArray() non-final and including the changes proposed in bug #515419.",
            "date": "20110304T12:44:53",
            "id": 0
        },
        {
            "author": "hannesw@gmail.com",
            "body": "Committed the patch.\n\nChecking in src/org/mozilla/javascript/BaseFunction.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/BaseFunction.java,v  <--  BaseFunction.java\nnew revision: 1.76; previous revision: 1.75\ndone\nChecking in src/org/mozilla/javascript/Context.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/Context.java,v  <--  Context.java\nnew revision: 1.284; previous revision: 1.283\ndone\nChecking in src/org/mozilla/javascript/ImporterTopLevel.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/ImporterTopLevel.java,v  <--  ImporterTopLevel.java\nnew revision: 1.44; previous revision: 1.43\ndone\nChecking in src/org/mozilla/javascript/NativeArray.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeArray.java,v  <--  NativeArray.java\nnew revision: 1.112; previous revision: 1.111\ndone\nChecking in src/org/mozilla/javascript/NativeBoolean.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeBoolean.java,v  <--  NativeBoolean.java\nnew revision: 1.37; previous revision: 1.36\ndone\nChecking in src/org/mozilla/javascript/NativeJavaArray.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeJavaArray.java,v  <--  NativeJavaArray.java\nnew revision: 1.29; previous revision: 1.28\ndone\nChecking in src/org/mozilla/javascript/NativeJavaObject.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeJavaObject.java,v  <--  NativeJavaObject.java\nnew revision: 1.91; previous revision: 1.90\ndone\nChecking in src/org/mozilla/javascript/NativeNumber.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeNumber.java,v  <--  NativeNumber.java\nnew revision: 1.43; previous revision: 1.42\ndone\nChecking in src/org/mozilla/javascript/NativeString.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeString.java,v  <--  NativeString.java\nnew revision: 1.70; previous revision: 1.69\ndone\nChecking in src/org/mozilla/javascript/NativeWith.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeWith.java,v  <--  NativeWith.java\nnew revision: 1.31; previous revision: 1.30\ndone\nChecking in src/org/mozilla/javascript/ScriptableObject.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/ScriptableObject.java,v  <--  ScriptableObject.java\nnew revision: 1.167; previous revision: 1.166\ndone\nChecking in src/org/mozilla/javascript/ScriptRuntime.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/ScriptRuntime.java,v  <--  ScriptRuntime.java\nnew revision: 1.330; previous revision: 1.329\ndone\nRCS file: /cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/TopLevel.java,v\ndone\nChecking in src/org/mozilla/javascript/TopLevel.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/TopLevel.java,v  <--  TopLevel.java\ninitial revision: 1.1\ndone\nChecking in src/org/mozilla/javascript/regexp/NativeRegExp.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/regexp/NativeRegExp.java,v  <--  NativeRegExp.java\nnew revision: 1.114; previous revision: 1.113\ndone\nChecking in src/org/mozilla/javascript/regexp/NativeRegExpCtor.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/regexp/NativeRegExpCtor.java,v  <--  NativeRegExpCtor.java\nnew revision: 1.23; previous revision: 1.22\ndone\nChecking in src/org/mozilla/javascript/regexp/RegExpImpl.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/regexp/RegExpImpl.java,v  <--  RegExpImpl.java\nnew revision: 1.41; previous revision: 1.40",
            "date": "20110306T14:53:37",
            "id": 1
        }
    ],
    "component": "Core",
    "description": "Changing the global Object, Array, RegExp, String, Number, etc. properties breaks core functionality of Rhino, including creation of object and array, and regexp literals, and to-object conversion of primitive values.\n\nFor most of these internal uses of built-in constructors, ECMA 262 requires objects to be created with the original class prototype object as value of the [[Prototype]] internal property. Since global built-in constructors are defined as writable and deletable, this means we need to be preserved for internal use even if their properties are modified in the global object. \n\nAs far as I can tell this is implemented in all major JS engines (tested with Spidermonkey and V8), and we should do this in Rhino as well.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "637587",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Functionality of built-in classes is exposed to changes in global object",
    "systemSpecification": true,
    "version": "head"
}