{
    "comments": [
        {
            "author": "rade@lshift.net",
            "body": "Created attachment 13053\nfix for both problems - I haven't done any extensive testing on this, but it *does* fix the test case",
            "date": "20000817T16:32:28",
            "id": 0
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Created attachment 13057\nAnother proposed patch",
            "date": "20000817T18:04:10",
            "id": 1
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "I believe my changes to your patch handle the case where the function isn't \ndefined more rigorously. (Curse my initial laziness to not fix the TODO.)\n\nWhat do you think?",
            "date": "20000817T18:05:38",
            "id": 2
        },
        {
            "author": "rade@lshift.net",
            "body": "Norris, your fix looks good to me.\n",
            "date": "20000817T18:50:47",
            "id": 3
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Cool. Thanks for all your help with these. You're fast with the patches!\n\nI'll run regression tests on this change tonight and check it in tomorrow if all \ngoes well.",
            "date": "20000817T18:59:31",
            "id": 4
        },
        {
            "author": "norrisboyd@gmail.com",
            "body": "Sorry--a little slow on this.\n\nChecking in now.",
            "date": "20000821T15:56:05",
            "id": 5
        }
    ],
    "component": "Core",
    "description": "Define a simple Java interface as follows:\n\npublic interface Foo {\n    public int bar(int x);\n}\n\nand then run the following Javascript program:\n\nvar foo = {}\nfoo.__proto__.bar = function(x) { return x; }\nfoo.bar(10);\t//=> 10\nvar f = new JavaAdapter(Packages.Foo,foo);\nf.bar(10);\t//=> 0\n\nThe invocation of \"bar\" on \"f\" returns 0 instead of 10. That is because \nJavaAdapters do not follow the prototype chain on attribute/method lookup.\n\nbtw, we get \"0\" because of another problem - a failed method lookup results in \n\"undefined\" being returned, which gets converted to 0 by the JavaAdapter.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "49325",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "JavaAdapter method lookup does not follow prototype chain",
    "systemSpecification": false,
    "version": "other"
}