{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "I will look at it",
            "date": "20040105T15:43:28",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 138417\nLess calculations in inner loops in regexps\n\nIt looks like the optimization for regexps starting with literal character to\nlook first for that character actually made thinks worse probably due to too\noften recalculations of invariant conditions at the beginning of each\nNativeRegExp.executeREBytecode invocation. \n\nThe patch reorganize the code to move this recalculations outside the main loop\nin NativeRegExp.matchRegExp and this refactoring speedup matching by factor of\n10 for trivial regexps.",
            "date": "20040105T15:58:07",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 138472\nPatch update\n\nI added few more inlining/refactoring to gain in speed compared with the\nprevious patch.",
            "date": "20040106T11:49:45",
            "id": 2
        },
        {
            "author": "igor@mir2.org",
            "body": "I committed the last fix",
            "date": "20040106T13:36:21",
            "id": 3
        },
        {
            "author": "igor@mir2.org",
            "body": "With the last tip committed Rhino CVS is 2 times faster then 1.5R3 with the\noriginal test case.",
            "date": "20040106T13:40:05",
            "id": 4
        },
        {
            "author": "igor@mir2.org",
            "body": "Trageting as resolved against 1.5R5",
            "date": "20040213T11:35:58",
            "id": 5
        }
    ],
    "component": "Core",
    "description": "User-Agent:       Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\nBuild Identifier: Rhino v1.5.4.1\n\nExecuting s.replace(a, b) is ten times slower than in rhino 1.5.3.\n\nNote that when a is a match inside s, then execution time is the same. But if \na isn't there, then the performance is ten folds slower.\n\n\nReproducible: Always\n\nSteps to Reproduce:\nvar a = new Array();\nfor (var i=0; i<10000; i++)\n\ta[i] = 'A';\nvar s = a.join('');\n\nvar t = java.lang.System.currentTimeMillis();\n//the test:\ns = s.replace('BBB', 'AAA');\ns = s.replace('BBB', 'AAA');\ns = s.replace('BBB', 'AAA');\ns = s.replace('BBB', 'AAA');\ns = s.replace('BBB', 'AAA');\njava.lang.System.out.println('time: '+(java.lang.System.currentTimeMillis()-\nt));",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "229571",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "String.replace is much slower than in rhino 1.5.3",
    "systemSpecification": true,
    "version": "other"
}