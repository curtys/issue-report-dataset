{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 121265\nImplementation of the proposal",
            "date": "20030422T11:45:55",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "I commited the patch as is, if somebody uses findMethods, then \n\ncvs diff -r  1.52 -r  1.53 FunctionObject.java\n\ncan be used to put it back as a deprecated method.",
            "date": "20030424T12:10:30",
            "id": 1
        },
        {
            "author": "pschwartau@meer.net",
            "body": "Checkin verified -",
            "date": "20030424T19:48:25",
            "id": 2
        },
        {
            "author": "igor@mir2.org",
            "body": "Targeting as resolved against 1.5R5",
            "date": "20040213T11:42:40",
            "id": 3
        }
    ],
    "component": "Core",
    "description": "Currently FunctionObject.findMethods is used to search for all methods with the\nsame name in the given class and returns them as an array. But all places where\nthis method is used in Rhino expects explicitly or implicitly that there is only\none such method. So the idea is to replace \n\nstatic Method[] findMethods(Class clazz, String name)\n\nby \n\nstatic Method findSingleMethod(Class clazz, String name)\n\nwhich will throw an exception if the method is overloaded.\n\nBut then findMethods uses a static cache for a method list for the given class\nsince in few places  findMethods is called many times on the same class but that\nis also overkill since in all such places FunctionObject.getMethodList can be\nused to get the list and caching with all potential memory leaks can be removed\ncompletely. So the following patch replaces findMethods by\n\nstatic Method findSingleMethod(Class clazz, String name) ...\n\nThe patch removes FunctionObject.findMethods but since it contains comments\n \n // TODO: Make not public\n\nperhaps somebody used the method outside Rhino?\n\nIf this is an issue the method can be restored with explicit deprecation but I\nwould prefer to remove it explicitly if possible.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "202872",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "RFE",
    "priority": "-- enhancement",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Removal of FunctionObject.findMethods?",
    "systemSpecification": false,
    "version": "other"
}