{
    "comments": [
        {
            "author": "hannesw@gmail.com",
            "body": "Created attachment 339939\nfix\n\nUse Class.isInstance() instead of ==",
            "date": "20080923T09:15:05",
            "id": 0
        },
        {
            "author": "hannesw@gmail.com",
            "body": "Committing the patch.\n\nChecking in src/org/mozilla/javascript/NativeJavaObject.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeJavaObject.java,v  <--  NativeJavaObject.java\nnew revision: 1.86; previous revision: 1.85\ndone",
            "date": "20081030T12:38:23",
            "id": 1
        },
        {
            "author": "hannesw@gmail.com",
            "body": "Created attachment 368231\nPrevent previous patch from applying to java.lang.Object arguments\n\nThe previous patch causes passing a Scriptable arg to a java.lang.Object parameter to get a conversion weight 1:\n\njs> var sdf = new java.text.SimpleDateFormat();\njs> sdf.format(new Date());\njs: \"<stdin>\", line 3: The choice of Java constructor format matching\nJavaScript argument types (object) is ambiguous; candidate\nconstructors are:\n    class java.lang.String format(java.lang.Object)\n    class java.lang.String format(java.util.Date) \n\nThis patch additionally checks if the formal parameter is actually Scriptable or an class implementing Scriptable.",
            "date": "20090319T11:53:51",
            "id": 2
        },
        {
            "author": "hannesw@gmail.com",
            "body": "I committed the second patch to both Rhino1_7R2_BRANCH and HEAD.",
            "date": "20090319T13:21:46",
            "id": 3
        },
        {
            "author": "hannesw@gmail.com",
            "body": "Created attachment 397616\nAllow Scriptable objects to be used as Java method parameters of classes they implement\n\nThe second patch was too broad. It prevented objects implementing Scriptable to be used for parameters of any other interface or superclass they may implement/extend. \n\nFor example, org.mozilla.javascript.ScriptableObject now implements java.util.Map, but calling new java.util.HashMap({foo: \"bar\"}) fails because of this.\n\nWith the new patch, all formal parameter interfaces/classes that are directly implemented by the Scriptable instance produce a conversion weight of 1, except java.lang.Object, which produces a conversion weight of 2 (which is I think the intended behaviour).",
            "date": "20090831T14:02:01",
            "id": 4
        },
        {
            "author": "hannesw@gmail.com",
            "body": "I committed the new patch.\n\nChecking in src/org/mozilla/javascript/NativeJavaObject.java;\n/cvsroot/mozilla/js/rhino/src/org/mozilla/javascript/NativeJavaObject.java,v  <--  NativeJavaObject.java\nnew revision: 1.89; previous revision: 1.88\ndone",
            "date": "20090831T14:05:24",
            "id": 5
        }
    ],
    "component": "Core",
    "description": "User-Agent:       Mozilla/5.0 (X11; U; Linux i686; de; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1\nBuild Identifier: \n\nThe method lookup in NativeJavaObject fails if the target method takes a Scriptable argument and the actual argument is a subclass of the formal parameter.\n\njs> org.mozilla.javascript.Context.currentContext.initStandardObjects({})\njs: \"<stdin>\", line 3: Can't find method org.mozilla.javascript.Context.initStandardObjects(object).\n\tat <stdin>:3\n\nReproducible: Always",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "456546",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "-- normal",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "Java method lookup fails for methods with Scriptable argument if argument is a subclass",
    "systemSpecification": true,
    "version": "other"
}