{
    "comments": [
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 173524\nVMBridge implementation\n\nThe patch introduces the new abstract class, omj.VMBridge, with methods to\nimplement the following functionality:\n\n1. Context.(enter|exit|call)\n2. Access to thread-local classloader\n3. Access to java.lang.reflect.AccessibleObject API to mark method as\naccessible.\n\nThere are 2 implementations, omj.jdk11.VMBridge_jdk11 and\nomj.jdk13.VMBridge_jdk13. The code for jdk13 case can run under JDK 1.2 but\nsince support for JDK 1.2 is not on the agenda and in future features like\njava.lang.reflect.Proxy could be used by Rhino I explicitly referred to JDK 1.3\nin the class name.\n\nDuring initialization Rhino loads jdk11 case only if it failed to create an\ninstance of omj.jdk13.VMBridge_jdk13. In addition for additional Rhino also\ntries to load initially omj.VMBridge_custom class which Rhino embedding can\nprovide if necessary.",
            "date": "20050206T11:20:57",
            "id": 0
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 173550\nComments and cleanup\n\nChanges from the previous version:\n\n1. Comments including reference to the recent changes by Attila Szegedi in bug\n281067.\n\n2. VMBridge instance variable is moved from Context to the class itself since\nit is not only Context that uses it.",
            "date": "20050206T17:38:10",
            "id": 1
        },
        {
            "author": "igor@mir2.org",
            "body": "Created attachment 173593\nPatch to commit\n\nIn this version I removed no longer used Class constants in ScriptRuntime.",
            "date": "20050207T07:28:59",
            "id": 2
        },
        {
            "author": "igor@mir2.org",
            "body": "I committed the last version of the patch",
            "date": "20050207T07:34:52",
            "id": 3
        }
    ],
    "component": "Core",
    "description": "Rhino core supports JDK 1.1 compatibility to be able to run under MS JVM. To\ntake advantage of more recent JDK Rhino uses reflection. That introduce overhead\nin the vast majority of Rhino embeddings and clutter code with verbose\npreparations for reflection calls.\n\nI suggest to replace that by a special compatibility interfaces and use\nreflection only once to initialize it.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "281247",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "RFE",
    "priority": "-- enhancement",
    "product": "Rhino",
    "project": "RHINO",
    "summary": "JDK compatibility via special class",
    "systemSpecification": true,
    "version": "other"
}