{
    "comments": [
        {
            "author": "Oleg Kalnichevski",
            "body": "Mark,\n\nString#getBytes(Charset) method is available as of Java 1.6 and therefore cannot be used by HttpClient as long as we want to keep it 1.5 compatible.\n\nOleg ",
            "date": "2010-01-12T11:49:21.977+0000",
            "id": 0
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Oleg, the point is that text.getBytes(charset.name()) can never throw the UnsupportedEncodingException. Because it's not possible to obtain Charset instances of unsupported encodings. However due to API compatibility we have to leave the Exception declararion in place unfortunately anyway.",
            "date": "2010-01-12T12:00:14.213+0000",
            "id": 1
        },
        {
            "author": "Mark Sinke",
            "body": "Oleg, Ortwin, \n\nRemoving a throws specification would not break API compatability (not even binary compatability, since the JVM never checks the throws spec anyway; that's up to javac). So another option is to catch the exception and ignore it since it cannot happen anyway.\n\nLike this\n\ntry {\n    this.content = text.getBytes(charset.name());\n} catch (UnsupportedEncodingException e) {\n    // cannot happen since charset was known in the first place\n}\n\nMy calling code now essentially needs to do the code I just wrote, which is a nuisance and will proliferate to all users of the library.\n\n",
            "date": "2010-01-12T12:15:07.254+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Odi, I see your point. Actually HttpMime cannot be considered API stable as its underlying library - mime4j is not yet API stable. We could remove UnsupportedEncodingException if you think this issue is severe enough to warrant API breakage. \n\nOleg",
            "date": "2010-01-12T12:26:49.204+0000",
            "id": 3
        },
        {
            "author": "Sebb",
            "body": "Removing a checked exception does affect consumers of the library.\n\nIf the caller currently catches UCE, they would have to amend their code if the method no longer throws UCE.\n\nI just tried a test with the following code:\n\npublic class Test{\n    private static void xys() //throws java.io.UnsupportedEncodingException \n    {        \n    }\n    private static void call(){\n        try {\n            xys();\n        } catch (java.io.UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }        \n    }\n}\n\nand I get:\n\nTest.java:8: exception java.io.UnsupportedEncodingException is never thrown in body of corresponding try statement\n        } catch (java.io.UnsupportedEncodingException e) {\n\nIt may not affect the code at run-time, but the user will have to amend their code before recompiling it.",
            "date": "2010-01-12T12:33:32.650+0000",
            "id": 4
        },
        {
            "author": "Mark Sinke",
            "body": "Sebb,\n\nYou rightly point out that consumers *when they recompile* need to change their code - but the thing they need to do is to remove a catch block for an exception that is never thrown. If they go through the mechanics of upgrading the library beyond just a binary replace of the jar file, I'm sure they will be happy to remove the dead code.\n\nOleg,\n\nI'd be delighted to see the code fixed. The 4.0 HttpClient is so much better than 3.0. Fixing this issue would remove an unnecessary nuisance introduced with 4.0, which we can still fix at this stage.\n\nThanks,\n\nMark.",
            "date": "2010-01-12T12:44:04.954+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Folks,\n\nI do not want to take this decision by myself. As far as I am concerned it is not severe enough to warrant API breakage. If no one else votes in favour of making the change , the issue will remain WONTFIX\n\nOleg",
            "date": "2010-01-12T15:48:02.232+0000",
            "id": 6
        },
        {
            "author": "Sam Berlin",
            "body": "What about a compromise -- a factory method that doesn't throw:\n\n  /** An alternate to new StringBody(CharSet) that doesn't throw an exception. */\n  public static StringBody create(CharSet charSet) {\n     try {\n         return new StringBody(charSet);\n     } catch(UnsupportedEncodingException uee) {        \n         throw new RuntimeException(uee); // this should never happen\n     }\n }\n\nThere's precedent in the URI class.  The URI constructor throws, and there's a factory URI.create method that doesn't declare the throwable.",
            "date": "2010-01-12T16:14:19.155+0000",
            "id": 7
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I think this is a good idea. I would just throw IllegalArguementException instead of plain RuntimeException\n\nOleg",
            "date": "2010-01-12T18:01:05.581+0000",
            "id": 8
        },
        {
            "author": "Mark Sinke",
            "body": "I'd be ok with the static factory method. It'll clean up the client code and that is what counts.",
            "date": "2010-01-13T14:19:05.607+0000",
            "id": 9
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Fixed in SVN trunk.\n\nOleg",
            "date": "2010-04-08T17:33:37.068+0000",
            "id": 10
        }
    ],
    "component": "HttpClient (classic)",
    "description": "The string body constructors that take a charset unnecessarily throw UnsupportedEncodingException - if you have Charset, the encoding is by definition supported:\n\n    public StringBody(\n            final String text, \n            final String mimeType, \n            Charset charset) throws UnsupportedEncodingException {\n        super(mimeType);\n        if (text == null) {\n            throw new IllegalArgumentException(\"Text may not be null\");\n        }\n        if (charset == null) {\n            charset = Charset.defaultCharset();\n        }\n        this.content = text.getBytes(charset.name());\n        this.charset = charset;\n    }\n    \n    public StringBody(final String text, Charset charset) throws UnsupportedEncodingException {\n        this(text, \"text/plain\", charset);\n    }\n    \nI suggest to change this to\n\n    public StringBody(\n            final String text, \n            final String mimeType, \n            Charset charset)  {\n        super(mimeType);\n        if (text == null) {\n            throw new IllegalArgumentException(\"Text may not be null\");\n        }\n        if (charset == null) {\n            charset = Charset.defaultCharset();\n        }\n        this.content = text.getBytes(charset);\n        this.charset = charset;\n    }\n    \n    public StringBody(final String text, Charset charset) {\n        this(text, \"text/plain\", charset);\n    }\n\nThe important change is to change\n\n        this.content = text.getBytes(charset.name());\n\nto \n\n        this.content = text.getBytes(charset);\n\nwhich will not throw and hence the throws specifications can be removed.\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-904",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Trivial",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "HttpMime StringBody constructor throws specification unnecessarily declares UnsupportedEncodingException",
    "systemSpecification": true,
    "version": "4.0.1"
}