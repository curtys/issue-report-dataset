{
    "comments": [
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Philipe,\n\nAs you have already noticed, this is not a bug. The behaviour is caused by the\nnature of Basic authentication: preemptive authentication can be done if and\nonly if credentials for the null realm exist.\n\n> But, it should not be possible to set a realm when using preemptive mode, or at \n> least it should not be silently ignored.\n\nYou can use the same HttpState object to connect to different sites. It makes\nsense to both have credentials with and without realm and preemptive\nauthentication enabled.\n\nWhat we could do, is issue a warning if preemptive auth is enabled but no\ncredentials for the null realm are available. This could actually be an\nenhancement to 2.0 branch, which you are reporting the bug against.\n\nWould this approach help you?",
            "date": "2004-06-08T20:22:22.000+0000",
            "id": 0
        },
        {
            "author": "Philippe Van Dyck",
            "body": "Ortwin,\n\nAs long as preemptive auth is irrelevant without a null realm, a warning \nmessage is a solution.\nBut I don't personally think it is defensive enough since it disable preemptive \nauth and it could result in large performance degradation since you have to \nrepeat (multi-megabytes?) POST requests two times to get through. \n\nIt can even not work at all when you expect preemptive auth to work in a load \nbalanced web server environment (load balancing is not configured to maintain \nsessions). \n\nWhat happens is that the first request goes to server 1 and answer is 401 (with \na session id cookie) and then the second request goes to another server 2 who \naccepts the credentials BUT refuses the session id (answer is 401 invalid-\nsession id!).\n\nIt may sound tricky, but actually happens!\n\nSo, since preemptive auth without a null realm is useless, would it be possible \nto assume null realms if auth is preemtive in : Credentials creds = \n(Credentials) map.get(entry) ? Maybe using a Comparable interface on \nCredentials objects ?\n \nAnd BTW, thanks for you quick and efficient support,\n\nPhilippe\n",
            "date": "2004-06-09T16:18:40.000+0000",
            "id": 1
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Phillipe,\n\nno, we will not assume realm=null if preemptive auth is enabled, for security\nreasons. This could expose credentials to the wrong web application, possibly\nthe one of an attacker. If you enable preemptive auth you need to explicitly\nstate (by setting the realm to null) that you want specific credentials to be\nsent to any realm. So the responsibility is on the user side. I know this may\nsound paranoid. But security without paranoia is bad security in my opinion.\n\nThe load balancing issue is out of our scope. The load balancing must\nunconditionally support session hand-over in a world where cookies drive the\nweb. If you pretend to be one single machine but behave like n ones, problems\nare at hand. I do not know of any RFC covering load balanced HTTP servers. There\nis nothing that I want to do here.\n\nI am afraid all we can do is issue a warning or throw an exception.\n\nIf you are dealing with multi-MB requests, you should also consider other forms\nof authentication that suit your needs. Maybe BASIC is just too basic for you.\n\n",
            "date": "2004-06-09T16:37:20.000+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Philippe,\nJust recently we have had a quite few complaints regarding the way preemptive\nauthentication is handled. The official HttpClient authentication guide has been\nrevised to clarify the gray areas in the 2.0 API primarily concerning the\nprerequisites expected in order to make preemptive authentication functional.\nRather unfortunately the site has not been redeployed yet, so the updated\nauthentication guide is not available at the moment. You can see the xdoc source\n at the following location\n\nhttp://cvs.apache.org/viewcvs.cgi/jakarta-commons/httpclient/xdocs/authentication.xml?rev=1.5.2.4&only_with_tag=HTTPCLIENT_2_0_BRANCH&view=markup\n\n> But I don't personally think it is defensive enough since it disable \n> preemptive auth and it could result in large performance degradation \n> since you have to repeat (multi-megabytes?) POST requests two times \n> to get through.\n\nPreemptive authentication is not the best answer to this problem. The problem\ncan be much better addressed by using so called 'expect-continue' handshake. See\nExpectContinueMethod method's javadoc for details.\n\nThe entire authentication framework in HttpClient has been completely rewritten\nfor the 3.0 release. With HttpClient 3.0 one should already get a warning in\ncase of missing authentication credentials. Furthermore, it also provides a\nbetter API for credentials assignment and retrieval. I will also try to come up\nwith a better way to assign default credentials. So, stay tuned\n\nOleg",
            "date": "2004-06-09T16:59:59.000+0000",
            "id": 3
        },
        {
            "author": "Philippe Van Dyck",
            "body": "Ortwin,\n\n>no, we will not assume realm=null if preemptive auth is enabled, for security\n>reasons. This could expose credentials to the wrong web application, possibly\n>the one of an attacker. If you enable preemptive auth you need to explicitly\n>state (by setting the realm to null) that you want specific credentials to be\n>sent to any realm. So the responsibility is on the user side. I know this may\n>sound paranoid. But security without paranoia is bad security in my opinion.\n\nI definitely agree. \n\nMaybe the documentation should reflect this 'null' value for realms in the ' \nPreemptive Authentication' paragraph ?\n\n>The load balancing issue is out of our scope. The load balancing must\n>unconditionally support session hand-over in a world where cookies drive the\n>web. If you pretend to be one single machine but behave like n ones, problems\n>are at hand. I do not know of any RFC covering load balanced HTTP servers. \n>There is nothing that I want to do here.\n\nAgain I agree.\n\n>I am afraid all we can do is issue a warning or throw an exception.\n\nI propose the more defensive 'exception' approach, this way it is definitely no \nmore silent.\n\n>If you are dealing with multi-MB requests, you should also consider other forms\n>of authentication that suit your needs. Maybe BASIC is just too basic for you.\n\nIndeed, but I don't choose the authentication mechanism and people like adding \npasswords everywhere (it may be parano\u00efd but as you said \"security without \nparanoia is bad security\").\n\nThanks again for you quick answer and the level of support offered.\n\nPhilippe\n\nP.S. Proposition : maybe the next version (3?) should support a way to set \npreemptive credentials without specifying a 'null' value but a more explicit \nsentinel ?\n",
            "date": "2004-06-09T17:06:46.000+0000",
            "id": 4
        },
        {
            "author": "Philippe Van Dyck",
            "body": "Ortwin,\n\nSorry I did'nt see you answer before posting. \n\nEverything is ok and solved on my side. \n\nBest Regards\nPhilippe Van Dyck",
            "date": "2004-06-09T17:11:52.000+0000",
            "id": 5
        },
        {
            "author": "Adrian Sutton",
            "body": "Throwing an exception in the case that preemptive authentication is set but no default credentials are \nsupplied would seriously break our application and I would imagine a number of others.  If you use \nHttpClient to connect to user defined hosts and provide a mechanism whereby the user (or system \nadministrator) can specify login details (in our case through a configuration file) you should:\n\n1. Enable preemptive authentication so that it works whenever the credentials are available.\n2. Register whatever set of predefined credentials you are given.\n\nThe most common case for us is that preemptive authentication is enabled but no credentials are \nregistered with HttpClient.  A warning message is fine but an exception is definitely not a good thing.",
            "date": "2004-06-09T19:40:42.000+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=11826)\nPatch against 2.0 branch\n",
            "date": "2004-06-11T04:52:54.000+0000",
            "id": 7
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "The patch provides extra warning logs in case of preemptive authentication\nfailure due to missing default credentials\n\nOleg",
            "date": "2004-06-11T04:57:05.000+0000",
            "id": 8
        },
        {
            "author": "Michael Becke",
            "body": "Oleg,\n\nLooks good to me.\n\nMike",
            "date": "2004-06-11T10:06:31.000+0000",
            "id": 9
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Looks good.\n\nPhilippe, does the patch do what you want?\n\nOrtwin Gl\u00c3\u00bcck\n\n",
            "date": "2004-06-11T14:22:31.000+0000",
            "id": 10
        },
        {
            "author": "Philippe Van Dyck",
            "body": "Perfect. \nNo more silent preemptive failure.\n\nBTW, I am not a fan of null values, especially when they have a meaning. I took \na look at the HEAD of v3 and I propose to define a new Credential class that \ndoes not contain a realm, something like a DefaultCredentials class. I will \ntake a closer look at the source code in the next weeks and come back, if it \nsuits you, with an update to the v3 branch.\n\nPhilippe",
            "date": "2004-06-11T15:33:46.000+0000",
            "id": 11
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Ok, thanks. Please leave closing the bug to us developers. This ensures the\npatch will get checked in, actually.",
            "date": "2004-06-11T15:35:50.000+0000",
            "id": 12
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Philippe,\nI'll take care of that this weekend. I had my gripes with the way credentials\nare handled while rewriting the authentication framework for 3.0, but there have\nalways been more pressing issues till now\n\nOleg ",
            "date": "2004-06-11T15:47:47.000+0000",
            "id": 13
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch committed to 2.0 branch.\n\nOleg",
            "date": "2004-06-12T01:57:53.000+0000",
            "id": 14
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=11834)\nPatch against CVS HEAD (take 1)\n",
            "date": "2004-06-13T00:28:48.000+0000",
            "id": 15
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Here's my first stab at it\n\nChangelog:\n\n* HttpAuthRealm was a poor choice of a name. Renamed to AuthScope\n* ANY_HOST, ANY_PORT, ANY_REALM & ANY_SCHEME static variables can be used\ninstead of non-descriptive null, -1, null, null to assign and retrieve credentials\n* HttpState#setCredentials(String, String, Credentials)\n  HttpState#getCredentials(String, String)\n  HttpState#setProxyCredentials(String, String, Credentials)\n  HttpState#getProxyCredentials(String, String)\n* Extra warning logs in case of preemptive authentication failure due to missing\ndefault credentials\n* Extra test case\n\nLet me know what you think\n\nOleg",
            "date": "2004-06-13T00:36:40.000+0000",
            "id": 16
        },
        {
            "author": "Michael Becke",
            "body": "Hi Oleg,\n\nI like it.  It definitely cleans things up.  There are only two problems that I see:\n\n - The various static variables in AuthScope should be final I think\n - HttpState.matchCredentials() doesn't handle all combinations of AuthScopes.  This is not a new \nproblem I think.  For example the following assertion fails:\n\n        AuthScope scope = new AuthScope(\"host\", 80, \"Realm\", \"Scheme\");\n        Credentials creds = new UsernamePasswordCredentials(\"name\", \"password\");        \n        HttpState state = new HttpState();\n        state.setCredentials(new AuthScope(\"host\", 80, AuthScope.ANY_REALM, \"Scheme\"), creds);        \n        assertEquals(creds, state.getCredentials(scope));\n\nIt may be better to just iterate over the set of credentials and do a more manual match, instead of \nrelying on hashCode().\n\nMike\n",
            "date": "2004-06-13T01:22:40.000+0000",
            "id": 17
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "> - The various static variables in AuthScope should be final I think\n\nMy oversight. Will be corrected.\n\n> - HttpState.matchCredentials() doesn't handle all combinations of AuthScopes.\n\nHttpState.matchCredentials() is clearly broken as it is. Besides, it generates\nunnecessary garbage pretty much per every invocation. \n\nDo you mind if I submit the patch and deal with broken\nHttpState.matchCredentials() separately?\n\nOleg",
            "date": "2004-06-13T02:13:51.000+0000",
            "id": 18
        },
        {
            "author": "Michael Becke",
            "body": "> Do you mind if I submit the patch and deal with broken\n> HttpState.matchCredentials() separately?\n\nNot at all.  Sounds like a plan.\n\nMike",
            "date": "2004-06-13T04:13:35.000+0000",
            "id": 19
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch committed to CVS HEAD.\n\nOleg\n",
            "date": "2004-06-13T05:49:57.000+0000",
            "id": 20
        }
    ],
    "component": "HttpClient (classic)",
    "description": "When you specifiy credentials for a specific realm using preemptive \nauthentication, the credentials are ignored during the first try (error 401 \nback).\n\n...\nHttpClient client = new HttpClient(manager);\nclient.getState().setCredentials(\"myRealm\",\"myHost\",\n\t\t\tnew UsernamePasswordCredentials(\n\t\t\t\t\"user\",\"password\"));\nclient.getState().setAuthenticationPreemptive(true); \n...\n\n\"myRealm\" will be ignored in HttpState's matchCredentials() private method \nbecause during preemptive authentication, it is called with a null realm:\n\n private static Credentials matchCredentials(HashMap map, String realm, String \nhost) {\n        HttpAuthRealm entry = new HttpAuthRealm(host, realm);\n\t// no possible match here, map only contains the version with the realm\n        Credentials creds = (Credentials) map.get(entry);\n        if (creds == null && host != null && realm != null) {\n            entry = new HttpAuthRealm(host, null);\n            creds = (Credentials) map.get(entry);\n            if (creds == null) {\n                entry = new HttpAuthRealm(null, realm);\n                creds = (Credentials) map.get(entry);\n            }\n        }\n        if (creds == null) {\n            creds = (Credentials) map.get(DEFAULT_AUTH_REALM);\n        }\n        return creds;\n    } \n\nThis is quite logical since the realm comes from the server and you don't \ncontact the server first during preemptive authentication.\n\nBut, it should not be possible to set a realm when using preemptive mode, or at \nleast it should not be silently ignored.\n\nThe current workaround is to set the realm to null in setCredential(), no \nelegant but works.\n\nRegards,\n\nPhilippe",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-349",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Credentials ignored if realm specified in preemptive authentication",
    "systemSpecification": true,
    "version": "2.0 Final"
}