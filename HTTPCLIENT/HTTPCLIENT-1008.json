{
    "comments": [
        {
            "author": "Michajlo Matijkiw",
            "body": "This patch adds the functionality of negotiating responses with the server using variants.  When a request is made for a resource which has a cached copy with a different vary field value, all such entries' etags are sent to the server in a conditional request allowing the server to specify an entry already in the cache if it exits.  To accomplish this I needed to add HttpCache#getVariantCacheEntries(), since there was no way to retrieve variants from the cache.  The method negotiateResponseFromVariants was added to CachingHttpClient to handle the necessary logic.\n\nThis patch was developed in collaboration with Mohammed Azeem Uddin and is submitted with the permission of my employer.\n\nThanks,\nMichajlo",
            "date": "2010-10-13T20:14:21.531+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Michajlo,\n\nOne of the test cases fails for me. Could you please have a look?\n\nOleg\n\n-------------------------------------------------------------------------------\nTest set: org.apache.http.impl.client.cache.TestCachingHttpClient\n-------------------------------------------------------------------------------\nTests run: 56, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.235 sec <<< FAILURE!\ntestTreatsCacheIOExceptionsAsCacheMiss(org.apache.http.impl.client.cache.TestCachingHttpClient)  Time elapsed: 0.011 sec  <<< FAILURE!\njava.lang.AssertionError: \n  Unexpected method call getVariantCacheEntries(http://foo.example.com, GET /stuff [Via: 1.1 localhost (Apache-HttpClient/4.1-alpha3-SNAPSHOT (cache))]):\n",
            "date": "2010-10-15T15:45:09.143+0000",
            "id": 1
        },
        {
            "author": "Jonathan Moore",
            "body": "This was probably caused because Mishu and Mohammed's patch was created against a version of trunk that predated my patch you just committed with the IOExceptions. I suspect it can be fixed just by updating the test case to add:\n\nEasyMock.expect(mockCache.getVariantEntries(...)).andThrow(new IOException()).anyTimes();\n\nand then putting try...catch blocks in CachingHttpClient if they are missing.\n",
            "date": "2010-10-15T15:53:39.613+0000",
            "id": 2
        },
        {
            "author": "Michajlo Matijkiw",
            "body": "That was indeed the case, updated patch attached.",
            "date": "2010-10-15T16:29:43.119+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in. Many thanks, Michajlo\n\nOleg",
            "date": "2010-10-15T19:44:43.737+0000",
            "id": 4
        }
    ],
    "component": "HttpCache",
    "description": "From section 13.6 of RFC 2616:\n\nIf an entity tag was assigned to a cached representation, the forwarded request SHOULD be conditional and include the entity tags in an If-None-Match header field from all its cache entries for the resource. This conveys to the server the set of entities currently held by the cache, so that if any one of these entities matches the requested entity, the server can use the ETag header field in its 304 (Not Modified) response to tell the cache which entry is appropriate. If the entity-tag of the new response matches that of an existing entry, the new response SHOULD be used to update the header fields of the existing entry, and the result MUST be returned to the client.\n\nPresently, we simply forward the request to the request without the conditionals.  This improvement would consist of adding the conditionals to the request, and properly handling the response.  An example of such would be the following:\n\n - request resource with \"Accept-Encoding: gzip\", response has \"Etag: etag1\", \"Vary: Accept-Encoding\"\n - request resource with \"Accept-Encoding: deflate\", request is forwarded with \"If-None-Match: etag1\" added, response is 200, with \"ETag: etag2\"\n - request resource with \"Accept-Encoding: gzip, deflate\", request is forwarded with \"If-None-Match: etag1, etag2\" added, response is 304, with \"ETag: etag1\" indicating we should use the first response for this request",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-1008",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Send all variants' ETags on \"variant miss\"",
    "systemSpecification": true,
    "version": ""
}