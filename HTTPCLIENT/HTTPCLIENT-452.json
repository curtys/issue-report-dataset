{
    "comments": [
        {
            "author": "Fred Bierhaus",
            "body": "Created an attachment (id=14796)\nProposed  patch\n\nSimple one-liner patch.",
            "date": "2005-04-23T03:50:14.000+0000",
            "id": 0
        },
        {
            "author": "Michael Becke",
            "body": "Looks good to me.  Some test cases would be nice...\n\nMike",
            "date": "2005-04-23T23:56:54.000+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=14807)\nPatch (take 2)\n\nHow about this minor optimization? Anyone aware of any threading issues related\nto TimeZone class?\n\nOleg",
            "date": "2005-04-24T00:35:29.000+0000",
            "id": 2
        },
        {
            "author": "Michael Becke",
            "body": "Looks fine to me.  I'm not aware of any threading issues.  The Javadocs seem pretty silent on the issue.\n\nMike",
            "date": "2005-04-24T00:45:51.000+0000",
            "id": 3
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Looks good. I have used Date, Calendar and TimeZone extensively during the last\nhalf year while developing a calendaring webapp. The only thing to be careful\nabout is that a TimeZone is mutable. It seems completely read-only thread safe\nthough.",
            "date": "2005-04-25T17:58:06.000+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch committed.\n\nOleg",
            "date": "2005-05-03T04:53:13.000+0000",
            "id": 5
        }
    ],
    "component": "HttpClient (classic)",
    "description": "DateUtil.formatDate() uses default timezone instead of GMT.  In section 3.3.1,\nRFC 2616 states:  \"All HTTP date/time stamps MUST be represented in Greenwich\nMean Time (GMT), without exception.\"\n\nTo reproduce, run the following snippet:\n\n   public static void main(String[] args) {\n      TimeZone tz = TimeZone.getTimeZone(\"GMT\");\n      GregorianCalendar gc = new GregorianCalendar(tz);\n      gc.set(1900 + 104, GregorianCalendar.JANUARY, 1, 0, 0, 0);\n      System.out.println(DateUtil.formatDate(gc.getTime()));\n      \n   }\n\nExpected result:\nThu, 01 Jan 2004 00:00:00 GMT\n\nActual result (if your default timezone is PST):\nWed, 31 Dec 2003 16:00:00 PST",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-452",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "DateUtil.formatDate() uses default timezone instead of GMT",
    "systemSpecification": false,
    "version": "3.0 RC2"
}