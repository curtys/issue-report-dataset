{
    "comments": [
        {
            "author": "John Kristian",
            "body": "Here's a patch that works for me.",
            "date": "2007-02-17T13:00:31.401+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I believe it would be much cleaner to put a fix at this place: \n\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/HttpClient.html#389\n\nOleg\n",
            "date": "2007-02-17T13:29:41.754+0000",
            "id": 1
        },
        {
            "author": "Roland Weber",
            "body": "HttpClient has been working that way since the 2.0 days. It has been re-iterated time and again, even as recently as two weeks ago with Sebastian:\nhttp://mail-archives.apache.org/mod_mbox/jakarta-httpclient-user/200702.mbox/%3c25aac9fc0702030841q1d35fe41g50bb04fc11662e90@mail.gmail.com%3e\n\nI am not in favor of changing the behavior that late in the release cycle. Different SSL connection algorithms can be used by aliasing the protocol, or am I wrong there?\nWe could move the HostConfiguration update code of the HttpClient class to a dedicated protected method. That would make it easy to override without changing the default behavior.\n\ncheers,\n  Roland\n",
            "date": "2007-02-17T16:47:57.706+0000",
            "id": 2
        },
        {
            "author": "John Kristian",
            "body": "It seems better for users to subclass HostConfiguration, not subclass HttpClient.  It's less likely to lead to problems with two conflicting specializations of the same object.  Certainly I would prefer it.\n\nSpecifically, I mean change HttpClient.executeMethod to use 'hostconfig.clone()' instead of 'new HostConfiguration(hostconfig)'.  That's enough, I think.  I don't see any need to move code into a new protected method.  Users could subclass HostConfiguration, overriding clone() and setHost(String, int, String), and install the specialized object via HttpClient.setHostConfiguration.\n\nShall I submit a patch?",
            "date": "2007-02-17T18:17:57.081+0000",
            "id": 3
        },
        {
            "author": "Roland Weber",
            "body": "Hi John,\n\nthat's minimally intrusive. I like the idea. Yes, please submit a patch.\n\nI don't remember where, but I did once read that it is a bad idea to have public methods call other public methods in an API. Looking at HostConfiguration, it is obvious why. Without looking into the source, it is impossible to tell which of the setHost methods will be affected if one of them is overriden.\n\ncheers,\n  Roland\n",
            "date": "2007-02-17T18:46:51.535+0000",
            "id": 4
        },
        {
            "author": "John Kristian",
            "body": "Here's a patch.",
            "date": "2007-02-18T21:46:12.809+0000",
            "id": 5
        },
        {
            "author": "Roland Weber",
            "body": "I'm +1 on the one-line change in HttpClient. The HostProtocolConfiguration could go into contrib code, though we'd have to find a name that better indidcates the purpose.\nI'm -1 on putting HostProtocolConfiguration into the main code, even with a better name. If we start with that, next thing will be a subclass of HostConfiguration that overrides the host, and then one that overrides protocol and host,... It's good as an example, but not as code we have to maintain.\n\ncheers,\n  Roland\n",
            "date": "2007-02-19T15:21:01.751+0000",
            "id": 6
        },
        {
            "author": "Michael Becke",
            "body": "I'll second Roland's analysis.\n\n+ 1 for HttpClient change and putting HostProtocolConfiguration into contrib.  How about HostConfigurationWithStickyProtocol?  A little long but accurate.\n\nMike",
            "date": "2007-02-19T16:20:01.932+0000",
            "id": 7
        },
        {
            "author": "John Kristian",
            "body": "OK; here's a patch (StickyProtocol.patch) that fits your description.",
            "date": "2007-02-19T20:53:34.298+0000",
            "id": 8
        },
        {
            "author": "Roland Weber",
            "body": "Looks good. Thanks John!\n",
            "date": "2007-02-19T21:33:31.721+0000",
            "id": 9
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Looks good to me. +1 to check in\n\nOleg",
            "date": "2007-02-19T22:22:35.863+0000",
            "id": 10
        },
        {
            "author": "Roland Weber",
            "body": "Patch committed. Thanks John!",
            "date": "2007-02-20T14:32:35.737+0000",
            "id": 11
        }
    ],
    "component": "HttpClient (classic)",
    "description": "HostConfiguration doesn't use its host.protocol to execute an HttpMethod with an absolute URL.  It should, if the Protocol's scheme is the same as the method's URL scheme.\n\nThis bug makes it difficult to integrate a specialized SSL connection algorithm (in a SecureProtocolSocketFactory) with a module implemented on top of HttpClient.  The latter module must not execute methods with absolute URLs.  Of course, this is difficult when one doesn't control that module.  For example, I recently tried to integrate SSL certificate-based client authentication with XFire.  XFire provides a reasonable API for replacing its HttpClient, but one must hack its source code to prevent it from executing methods with absolute URLs.\n\nProtocol.registerProtocol is a possible answer, but it can't support two or more SSL connection algorithms for one HTTPS host and port.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-634",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "HostConfiguration socketFactory is ignored",
    "systemSpecification": true,
    "version": ""
}