{
    "comments": [
        {
            "author": "Adrian Sutton",
            "body": "My suggestion for this is to add the ability to get the original exception (if\navailable) from HttpException, similar to the way that Java 1.4 can wrap\nexceptions.  This way we:\n\na. maintain backwards compatibility\nb. make exception catching simple for the non-picky user (like it is currently)\nc. allow users with more complex requirements to find out the information they need.\n\nI'll do up an initial patch for this to show the changes to the exception\nclasses, but we'll have to go through HttpClient and find all the cases where we\ncreate a HttpException because of another exception and pass that through. \nSimple to do with a decent IDE, but my HttpClient code is only in a decent IDE\nwhen I'm at home so that step will have to wait.\n\nMy other query is whether or not this should go into 2.0 or leave it for 2.1 -\nshould it be before or after beta 1?  I think we need to do beta 1 before\nlooking at anything but total catastrophic failure at the moment.",
            "date": "2003-05-13T05:22:49.000+0000",
            "id": 0
        },
        {
            "author": "Adrian Sutton",
            "body": "Created an attachment (id=6332)\nInitial patch to add capabilities to exception classes.\n",
            "date": "2003-05-13T05:43:55.000+0000",
            "id": 1
        },
        {
            "author": "Michael Becke",
            "body": "Created an attachment (id=6336)\npatch 2\n",
            "date": "2003-05-13T10:38:12.000+0000",
            "id": 2
        },
        {
            "author": "Michael Becke",
            "body": "The patch above is an extension to Adrian's original patch.  I got a little carried away, but I think \nthe changes are all for the better.  What I've changed:\n\n - All subclasses of URIException have (Throwable) and (String, Throwable) constructors.\n - All exceptions created within HttpClient now use the Throwable constructors where appropriate.\n - A new test case has been created for these exceptions.\n - Basic Nestable support has been \"borrowed\" from commons-lang.  I moved a few classes over \nfrom Lang to better support printing nested exceptions.  These classes have default access and \ncan be removed with no API changes if they are not wanted.\n\nPlease take a look when you get a chance.\n\nThanks,\n\nMike\n",
            "date": "2003-05-13T10:46:01.000+0000",
            "id": 3
        },
        {
            "author": "Adrian Sutton",
            "body": "Gee, put something down for a moment and someone else goes and does all the hard\nwork. :)  Thanks for that Mike.\n\nYour patch looks good to me, my only question is whether or not it's overkill to\npull in a bunch of stuff from lang to print the stack traces etc.  The original\nuse case certainly doesn't require this but it is something that is nice when\ndebugging.  I would have left out the extra classes until there was a particular\nneed for them.  Maybe I've just been programming applets too long.  I'm\ncertainly not going to be upset either way.\n\nThanks for doing all the hard work on this one Mike.",
            "date": "2003-05-13T10:55:23.000+0000",
            "id": 4
        },
        {
            "author": "Michael Becke",
            "body": "Hi Adrian,\n\nI hope I didn't step on your toes with this one.\n\nYes, the classes from Lang may be a bit of overkill.  I'm happy to remove them if that's the \nconsensus.\n\nMike",
            "date": "2003-05-13T11:04:23.000+0000",
            "id": 5
        },
        {
            "author": "Adrian Sutton",
            "body": "Hi Mike,\nNo stepping on toes here - I wish more people would jump in and clean up things\non my todo list. :)\n\nLet's see what others have to say on the lang stuff, it is conceptually very\nnice, you've done well.\n\nAdrian.",
            "date": "2003-05-13T11:08:01.000+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I really like the patch and really like the concept of nestable exceptions. But \nsomehow it does not feel right \u0091borrowing\u0092 classes from another Commons \nproject. Can\u0092t we have something really lightweight for the time being and then \nprobably introduce commons-lang as a dependency as of 2.1 release and on?\n\npublic class ChainedException extends Exception {\nprivate Throwable cause = null;\n\n  public ChainedException() {\n    super();\n  }\n\n  public ChainedException(String message) {\n    super(message);\n  }\n\n  public ChainedException(String message, Throwable cause) {\n    super(message);\n    this.cause = cause;\n  }\n\n  public Throwable getCause() {\n    return cause;\n  }\n\n  public void printStackTrace() {\n    super.printStackTrace();\n    if (cause != null) {\n      System.err.println(\"Caused by:\");\n      cause.printStackTrace();\n    }\n  }\n\n  public void printStackTrace(java.io.PrintStream ps) {\n    super.printStackTrace(ps);\n    if (cause != null) {\n      ps.println(\"Caused by:\");\n      cause.printStackTrace(ps);\n    }\n  }\n\n  public void printStackTrace(java.io.PrintWriter pw) {\n    super.printStackTrace(pw);\n    if (cause != null) {\n      pw.println(\"Caused by:\");\n      cause.printStackTrace(pw);\n    }\n  }\n\nOleg",
            "date": "2003-05-13T22:03:03.000+0000",
            "id": 7
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Maybe you can just add a new Exception class that extends\nHttpRecoverableException. The user can then catch this particular type if he wants.",
            "date": "2003-05-13T22:07:09.000+0000",
            "id": 8
        },
        {
            "author": "Michael Becke",
            "body": "I agree, stealing and modifying some classes from Lang is a little nasty.  In\nthis case though I think it's a decent solution. My main rationale for this\nchoice was to avoid having to implement something from scratch.  I feel that we\nmight as well take advantage of something that already works.\n\nTo ensure that there are no long term side-effects these classes have been made\npackage-protected.  If we want to use Lang in 2.1 we could make the changes with\nno API modifications to URIException, other than the Nestable interface. The use\nof the Lang classes is not meant to be a replacement but just a behind the\nscenes fix until we can use the real deal.\n\nIf we want to keep this functionality, but without the other classes, we could\njust move the handling into URIException and delete Nestable, NestableDelegate\nand ExceptionUtils.\n\nI'm pretty flexible on this one.  If we like the changes made to URIException\nand the subclasses, changing or removing how it's implemented is pretty easy. \nWhat do you think?\n\nMike",
            "date": "2003-05-13T23:03:13.000+0000",
            "id": 9
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Mike,\nI personally can live with either. Let's hear what Jandalf has to say. If he \nconfirms that copying files from another project would not be considered bad \nmannered, I suggest we just keep the files as they are. If such an action would \nbe considered offensive, though, let's just keep stuff as simple as possible. \nThe ChainedException class I posted above has served me well in several \napplications. In most cases such a lightweight exception chaining mechanism is \nquite sufficient. \n\nOleg",
            "date": "2003-05-13T23:20:36.000+0000",
            "id": 10
        },
        {
            "author": "Jeff Dever",
            "body": "Lets try and clarify the purpose of all this.  The bug reporter either wants :\nA) programatic notification with access to the IIOE object, or\nB) a text output of the IIOE message\n\nI'm not sure what the reporter really wants, but with A) you can get B), plus\nyou can modify flow control and specificly act on the IIOE.  Even if the\nreporter only wants B), we should be programming to allow for A) for the most\nflexibility.\n\nThe posted patch and the exception chaining idea really does not help with A). \nIn particular the IIOE has a bytesTransferred field that the programmer may need\ndirect access to as part of their flow control and exception handling logic.\n\nI'm not against importing parts of Lang, or adding another package dependency,\nbut I don't feel that the proposed solution fully addresses the problem.\n\nThere are some other possibilities:\n1) As Odi suggested, we could extend HTTPRE.  This addresses A), and is\ninterface perserving.  Its a bit of a kludge because there may be many other\nexception that we may need to wrap, all which add more classes.\n2) We could just throw out the IIOE (which is trivial solution).  But this will\ncause users to modify code.  Its not too late for that, but if there are other\nexpcetions that need to be treated the same way in the future, then it means\nmore user code changes.  This would be a fragile approach.\n3) We could create a particular wrapper for the IIOE that extends\nRuntimeException.  This is similar to 1), but has semantic differences for flow\ncontrol, and requires that the user have a robust exception handling strategy.",
            "date": "2003-05-14T23:38:03.000+0000",
            "id": 11
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Jeff,\n\nI just want to make sure that we are talking about the same thing. \n\n1) I think the bug reporter clearly wants scenario A. \n\n2) The IIOE instance the user may want to act upon would be nested in the\nHTTPRE. All that the user would have to do is to get the original root exeption\nupon receiving HTTPRE and to test if it is an instance of IIOE class. I believe\nthat it the essense of the exception chaining\n\nI do not quite see why you think that the patch does not address the problem.\n\nOleg",
            "date": "2003-05-15T00:38:20.000+0000",
            "id": 12
        },
        {
            "author": "Jeff Dever",
            "body": "So (using Oleg's ChainedException class) you dont mind seeing user code that\nlooks like this:\n\ntry {\n    httpclient.execute(httpmethod);\n} catch (HttpRecoverableException e) {\n    Throwable cause = e.getCause();\n    if (cause instanceOf InterruptedIOException) {\n        InterruptedIOException iioe = (InterruptedIOException) cause;\n        //do somthing with iioe.bytesTransferred\n    } else if (cause instanceOf SomeOtherGawdAwefulException) {\n        SomeOtherGawdAwefulException sogae = \n            (SomeOtherGawdAwefulException) cause;\n        //do something with sogae\n    } else {\n        //do something by default\n    }\n}\n\nWhen it should look like this:\n\ntry {\n    httpclient.execute(httpmethod);\n} catch InterruptedIOException) {\n    //do somthing with iioe.bytesTransferred\n} catch (SomeOtherGawdAwefulException sogae) {\n    //do something with sogae\n} catch (HttpRecoverableException hre)\n    //do somthing by default\n}\n\n\nThere are some variations on this, but I don't see it getting a lot cleaner\n(unless I'm missing somthing again).",
            "date": "2003-05-15T02:03:36.000+0000",
            "id": 13
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Actually I do not. The problem is that HttpClient#executeMethod may not throw\nSomeOtherGawdAwefulException (unless it's a runtime exception or a sub class of\neither IOException or HttpException). The only way to get hold of the original\nexception along with all its properties is to chain it. The alternative would be\nto implement all the possible exception types as sub classes of HttpException,\nwhich is in my opinion is as ugly. Exception chaining is the most flexible way\nof dealing with heterogeneous exceptions, and flexibility usually carries a\nprice tag. \n\nOleg\n\n",
            "date": "2003-05-15T02:37:30.000+0000",
            "id": 14
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "HttpClient is in need of careful revision of the entire exception handling\nlogic. There has to be a clear distinction between protocol exceptions\n(malformed request, malformed response, unsupported protocol version, etc) and\ntransport exceptions (read/write failures, read/write timeouts). Likewise\ndistinction should be made between recoverable and non-recoverable transport\nexceptions.",
            "date": "2003-06-13T02:10:16.000+0000",
            "id": 15
        },
        {
            "author": "Laura Werner",
            "body": "I'm attaching a preliminary patch for this, following Oleg's proposal on the\nmailing list.  Here are some areas where I'd like feedback:\n\n- Is AuthenticationException too broad?  Should there be different exceptions for:\n  - Incorrect credentials / password / login / whatever, vs.\n  - Other problem: no such provider, unknown auth type, ..\n\n- I added an HttpInterruptedException for cases where client code tells us to\nabort a transaction.\n  - Should I leave this out until we actually add the abort code?\n  - Should it be called HttpAbortedException instead?  Or something else?\n\n- I'm starting to wonder if all these classes really need \"Http\" at the\nbeginning of their names.  HttpException definitely does, for compatibility\nreasons if nothing else.  But could the others just be ProtocolException,\nTransportException, etc?  There's a chance for a collision if a Java file uses\ntwo different network libraries that both have a ProtocolException, but it\ndoesn't seem to likely.\n\n- I added a primitive exception chaining mechanism to HttpTransportException. \nRight now it wraps any Throwable.  Oleg had suggested wrapping just IOException.\n Any preferences?  Also, how fancy does the chaining mechanism need to be?  I'm\nhappy with just \"getCause()\", but if people want me to I could add some of the\nother exception chain accessors that commons-lang uses in its classes.\n\n- I haven't yet gone through and wrapped all of the IOExceptions and\nSocketExceptions inside HttpTransportException.  I want to get the exception\nhierarchy right first.\n\n- I also haven't cleaned up \"throws\" and \"@throws\" declarations yet.\n\nHere's Oleg's proposal, from an email sent around July 6, 2003.  On 7/7/2003\nMike suggested having HttpException extend IOException, which is what I implemented.\n\nOleg wrote:\n2) Go elaborate\n-----------------\n org.apache.commons.lang.exception.NestableException (or equivalent)\n  |\n  +-- org.apache.commons.httpclient.HttpException (Root exception)\n    |\n    +-- ...httpclient.HttpProtocolException (Root protocol exception)\n    |  |\n    |  +-- ...httpclient.cookie.MalformedCookieException\n    |  |\n    |  +-- ...httpclient.auth.AuthenticationException\n    |  |\n    |  +-- ...\n    |\n    +-- ...httpclient.HttpTransportException        |   (should 'wrap'\njava.io.IOException)\n       |\n       +-- ...httpclient.RecoverableHttpException\n       |  |\n       |  +-- ...httpclient.TimeoutHttpException\n       |     |\n       |     +-- ...httpclient.ConnectTimeoutHttpException\n       |     |\n       |     +-- ...httpclient.IOTimeoutHttpException\n       |\n       +-- ...httpclient.InterruptedHttpException\n\nPros:\n - flexibility\n - clarity\nCons:\n - complexity\n - most likely requires an external dependency\nIn my opinion we MUST get exception handling right before we do anything\nelse. Exception handling is a foundation of any flexible architecture.\nI personally can live with either of these two approaches. If you see\nother alternatives, please share your ideas \n\nMike wrote:\nAs an addendum to my previous email, it would also be possible to use Oleg's #2\noption and just change HttpException to extend IOException. This would also\nallow us to keep API compatability.  If this was done we could remove the throws\nIOException from HttpClient.executeMethod(). \n\nOleg replied:\nMike's suggestion to extend IOException does seem to be the best option that we\nhave right now. It provides a (relatively) easy migration path for 2.0 users\n(API compatibility still does not save them from having to rethink their\nexception handling framework), while giving us enough flexibility to get things\ndone (more or less) right. ",
            "date": "2003-07-13T10:02:42.000+0000",
            "id": 16
        },
        {
            "author": "Laura Werner",
            "body": "Created an attachment (id=7276)\nInitial patch to rework exception hierarchy for HttpClient 2.1\n",
            "date": "2003-07-13T10:03:34.000+0000",
            "id": 17
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I believe Mike's response to Laura should be included into the bug report\n--------------------------------------------------------------------------\nMichael Becke Wrote:\n\nVery nice work Laura.  Thank you for taking the initiative on this one. \n  Please see the in-lined comments below.\n\n> I'm attaching a preliminary patch for this, following Oleg's proposal \n> on the\n> mailing list.  Here are some areas where I'd like feedback:\n>\n> - Is AuthenticationException too broad?  Should there be different \n> exceptions for:\n>   - Incorrect credentials / password / login / whatever, vs.\n>   - Other problem: no such provider, unknown auth type, ..\n\nPossibly.  I could see this extra information as quite useful.  My only \nworry would be that we have too many exception types.\n\n> - I added an HttpInterruptedException for cases where client code \n> tells us to\n> abort a transaction.\n>   - Should I leave this out until we actually add the abort code?\n>   - Should it be called HttpAbortedException instead?  Or something \n> else?\n\nI think we will probably need it but I would say to leave it out for \nnow.  We can always add it when the time comes.\n\nI think HttpAbortedException is better.\n\n> - I'm starting to wonder if all these classes really need \"Http\" at the\n> beginning of their names.  HttpException definitely does, for \n> compatibility\n> reasons if nothing else.  But could the others just be \n> ProtocolException,\n> TransportException, etc?  There's a chance for a collision if a Java \n> file uses\n> two different network libraries that both have a ProtocolException, \n> but it\n> doesn't seem to likely.\n\nI say lose the Http.  It seems a little redundant.  No worries about \nname collision.  That's the beauty of packages.\n\n> - I added a primitive exception chaining mechanism to \n> HttpTransportException.\n> Right now it wraps any Throwable.  Oleg had suggested wrapping just \n> IOException.\n>  Any preferences?  Also, how fancy does the chaining mechanism need to \n> be?  I'm\n> happy with just \"getCause()\", but if people want me to I could add \n> some of the\n> other exception chain accessors that commons-lang uses in its classes.\n\nI think we should push the cause all the way up to the HttpException \nlevel.  Nestable exceptions occur in other places than just IO.  Your \nTODO example of NTLM IllegalBlockSize is a good one.  I imagine there \nwill be a few involving URIExceptions as well.\n\nI think leaving just getCause() for now is fine.  The most important \npart is getting the hierarchy right.  We can add bells and whistles at \na later time.\n",
            "date": "2003-07-13T18:43:08.000+0000",
            "id": 18
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Laura, Mike,\nI just realized that HttpConnection#handleException(IOException) method should\nbe updated to take advantage of the new exception handling features, such as\nnested exceptions. Besides, do we really have to throw plain IOException there?\nI believe it should be rethrown at least as HttpTransportException.\n\nCheers\n\nOleg",
            "date": "2003-07-13T18:49:25.000+0000",
            "id": 19
        },
        {
            "author": "Laura Werner",
            "body": "> Besides, do we really have to throw plain IOException there?\n> I believe it should be rethrown at least as HttpTransportException.\n\nGood question.  Now that the easy part is (almost) done, I was starting to think\nabout what kinds of exceptions the HttpClient library should through.  Even\nthough it's a big change, I think we should probably thrown *only* HttpException\nand its subclasses (plus RuntimeException subclasses like\nIllegalStateException).  If some of the methods still throw raw IOExceptions, it\nkind of defeats the purpose of having HttpTransportException in the first place.\n\nThe spot where I have misgivings are the methods that currently throw only\nIOException.  All of these would have to be wrapped with TransportException. \n(We can probably add a utility method to do the wrapping.)  Even though this is\na pain, it makes the client usage simpler:\n\ntry {\n  HttpClient.executeMethod(...);\n} catch (HttpException ex) {\n  // It broke\n}\n\nIf someone wants to distinguish specific problems, they can do:\n\ntry {\n  HttpClient.executeMethod(...);\n} catch (HttpTransportException ex) {\n  // I/O problem.  Tell the sysadmin or whatever.\n} catch (HttpProtocolException ex) {\n  // Report this to the user\n} catch (HttpException ex) {\n  // It just plain broke\n}\n\nThere are a few caveats:\n- Existing code will have to be changed.  Most client code currently catches\nboth HttpException and IOException.  The compiler will now say \"IOException is\nnot thrown in try block\" and issue an error or warning (I forget which).  \n- The model is slightly complicated: you have to remember to catch HttpException\nlast, for example.  But I think compilers catch this too.\n- There are rather a lot of exception classes, which is both a plus and a minus.\n It's more for a client to learn.  But they're not forced to deal with all of\nthe exceptions; they can just catch the ones that need special treatment and\nthen treat all the others as generic HttpExceptions.\n\nDoes this all make sense?  I'm scared to make this big a change without lots of\nfeedback from other developers and from clients.\n",
            "date": "2003-07-14T03:04:51.000+0000",
            "id": 20
        },
        {
            "author": "Laura Werner",
            "body": "I'm attaching another patch.  The big changes are:\n- Renamed most classes to remove the initial \"Http\".  I still want more feedback\non this.  It's easy enough to change back.  (Gotta love the Eclipse refactoring\ntools!)\n\n- Moved wrapped exception \"cause\" from TransportException to HttpException\n\n- Provided more wrapping functionality to parallel the methods that were added\nto Throwable in JDK 1.4.  I haven't tested these yet, though.\n\n- Better JavaDoc for exception classes.\n\nOnce people have a chance to review this and give feedback on my last comment,\nI'll start changing all the places where the library throws exceptions.",
            "date": "2003-07-14T03:49:20.000+0000",
            "id": 21
        },
        {
            "author": "Laura Werner",
            "body": "Created an attachment (id=7277)\nHttpClient 2.1 exception refactoring, take 2\n",
            "date": "2003-07-14T03:50:12.000+0000",
            "id": 22
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Laura,\nI'll just throw some ideas at you, but I am not 100% sure that what I am about\nto suggest is feasible. So, take it with a grain of salt.\n\n> Good question.  Now that the easy part is (almost) done, I was starting to think\n> about what kinds of exceptions the HttpClient library should through.  Even\n> though it's a big change, I think we should probably thrown *only* HttpException\n> and its subclasses (plus RuntimeException subclasses like\n> IllegalStateException).  If some of the methods still throw raw IOExceptions, it\n> kind of defeats the purpose of having HttpTransportException in the first place.\n\nI whole-heartedly agree. All IOExceptions should be wrapped in\nHttpTransportException, otherwise the whole exercise does not make sense in the\nvery first place. In the future (3.0 release) we might even think about changing\nthe super class of HttpException from IOException to Exception and completely\ndoing away with IOExceptions in HttpClient#execute & HttpMethod#execute methods. \n\nThe overall philosophy should be as simple as that:\n\n* HttpProtocolException: Something is wrong on the server side. Contact\nadministrator of the target HTTP server.\n* HttpTransportException: If HttpRecoverableException, simply retry. If not,\ncontact network administrator.\n\n> The spot where I have misgivings are the methods that currently throw only\n> IOException.  All of these would have to be wrapped with TransportException. \n> (We can probably add a utility method to do the wrapping.)  Even though this is\n> a pain, it makes the client usage simpler:\n\nHere's my plan:\n\n* HttpMethodBase deals ONLY with HttpExceptions. All protected and private\nmethods that currently throw IOExceptions will have to be changed to throw\nHttpTransportException instead. All public methods that declare IOException in\ntheir 'throws' clause would remain unchanged BUT in fact would not throw\nIOException. That should take care of the API compatibility issue.\n* HttpConnection catches ALL IOExceptions and re-throws them as\nHttpTransportException\n\nThis approach is simple, and I personally like the beauty of simplicity (at\nleast when it comes to software engineering)\n\n> - There are rather a lot of exception classes, which is both a plus and a minus.\n>  It's more for a client to learn.  But they're not forced to deal with all of\n> the exceptions; they can just catch the ones that need special treatment and\n> then treat all the others as generic HttpExceptions.\n\nI am not concerned about it at all. They can still do it like that.\n\ntry {\n  HttpClient.executeMethod(...);\n} catch (IOException ex) {\n  System.out.println(\"Oopsie...\");\n  System.exit(1);\n}\n\n\n> Does this all make sense?  I'm scared to make this big a change without lots of\n> feedback from other developers and from clients.\n\nI suggest that we should not be doing it in one giant leap. Let's fix things in\na series of shorter dashes. Let's commit what you have got so far (once it is\napproved by Mike), and then we can move on to fixing the internals.\n\nI have got to hit the sack. It's Monday here already.\n\nOleg",
            "date": "2003-07-14T05:09:56.000+0000",
            "id": 23
        },
        {
            "author": "Adrian Sutton",
            "body": "Laura, Oleg, Mike, et al,\nGenerally I like the way things are sounding with this, but having had a recent experience trying to \ntrack down the cause of an exception in Xerces I'm really not so keen on ever seeing a nested \nexception again - particularly if it's only added for conceptual niceness.\n\nIn particular, I don't like the idea of wrapping every IOException in a HttpTransportException, \ninstead I would have dropped HttpTransportException and used IOException itself.  The few \nIOExceptions that are recoverable would have to be wrapped in a HttpRecoverableException but \nthe vast majority of exceptions that people would be trying to track down the source of, would be \nplain ol' unwrapped exceptions.\n\nIt also seems to fit better with my view on exception handling that you don't wrap exceptions when \npossible.  In essence, an exception is thrown and works its way back up the stack until someone is \nprepared to deal with it.  That doesn't work so well when you consider throwing a different \nexception as \"dealing with it\".\n\nI don't really mind either way, but I found it incredibly difficult to have to wade through long stack \ntraces *and* work out which exception actually occurred and which was just created because the \nAPI didn't allow the original exception to be thrown.  In fact, I wound up having to grab the source \nto Xerces and rewrite parts of it's exception handling to work out what was going on (for the \nrecord, it was my fault).\n\nSorry for coming to the party late, I'm happy to be ignored on this and I forfeit all rights to \ncomplain. :)",
            "date": "2003-07-14T05:47:13.000+0000",
            "id": 24
        },
        {
            "author": "Michael Becke",
            "body": ">I whole-heartedly agree. All IOExceptions should be wrapped in\n> HttpTransportException, otherwise the whole exercise does not make sense in the\n> very first place. In the future (3.0 release) we might even think about changing\n> the super class of HttpException from IOException to Exception and completely\n> doing away with IOExceptions in HttpClient#execute & HttpMethod#execute methods. \n>\n> The overall philosophy should be as simple as that:\n> \n> * HttpProtocolException: Something is wrong on the server side. Contact\n> administrator of the target HTTP server.\n> * HttpTransportException: If HttpRecoverableException, simply retry. If not,\n> contact network administrator.\n\nWrapping all exceptions certainly makes things cleaner.  Though, to echo Adrian's thoughts, I \nthink we should try to add value when we wrap exceptions.  For example I'm not sure wrapping \nan IOException at HttpConnection.write() adds any valuable information.  Also, the input/output \nstreams of HttpConnection will continue to throw \nIOExceptions.\n\nWe could certainly remove the subclassing of IOException for 3.0.  We should probably make \nsome note of it in the HttpException JavaDocs.\n\n> Here's my plan:\n> \n> * HttpMethodBase deals ONLY with HttpExceptions. All protected and private\n> methods that currently throw IOExceptions will have to be changed to throw\n> HttpTransportException instead. All public methods that declare IOException in\n> their 'throws' clause would remain unchanged BUT in fact would not throw\n> IOException. That should take care of the API compatibility issue.\n> * HttpConnection catches ALL IOExceptions and re-throws them as\n> HttpTransportException\n\nI think places where only IOExceptions are thrown can be replaced with HttpExceptions if \nnecessary.  This should not cause API problems.  The only issue would be if both an IOException \nand an HttpException were thrown.  This would cause problems, as Laura mentioned, if \nsomeone is catching both.\n\n> I suggest that we should not be doing it in one giant leap. Let's fix things in\n> a series of shorter dashes. Let's commit what you have got so far (once it is\n> approved by Mike), and then we can move on to fixing the internals.\n\nI think we're almost ready to go.  I would like to wait another day or so to see if others have any \ncomments.\n\nMike\n",
            "date": "2003-07-14T06:07:06.000+0000",
            "id": 25
        },
        {
            "author": "Laura Werner",
            "body": "Here's patch #3.  I added a test for the exception nesting and made the\nHttpException constructor and printStackTrace methods work correctly.  When\nrunning under JDK 1.4, it now passes the \"cause\" parameter via the new\nThrowable.initCause method and lets Throwable take care of printing stack\ntraces.  If on JDK 1.3 or earlier, the HttpException.printStackTrace methods\napproximate the JDK 1.4 behavior.\n\nAdrian: Does having printStackTrace also print out all of the nested exceptions\ntake care of some of your objections?  It seems to make the debugging quite a\nbit easier because you can see the whole exception trace all the way back to the\nroot cause.  Now I need to go do this to our big system at work. :-)",
            "date": "2003-07-14T06:21:26.000+0000",
            "id": 26
        },
        {
            "author": "Laura Werner",
            "body": "Created an attachment (id=7280)\nrefactoring, try #3\n",
            "date": "2003-07-14T06:22:15.000+0000",
            "id": 27
        },
        {
            "author": "Adrian Sutton",
            "body": "Printing out the cause stack trace is a bare minimum for being able to debug, but it is still really \ndifficult to sort through all that mess - particularly if you wind up with a couple of non-fatal \nexceptions that build up to a fatal one (for HttpClient that's likely to be connections to multiple \nservers or retrying the connection).  The output winds up being pages and pages of useless stack \ntraces.\n\nIn some cases of course wrapping exceptions makes a lot of sense, I'd just suggest using the \noriginal IOException instead of wrapping it in a TransportException.  If I were to propose a rule of \nthumb, I would imagine it would be:\n\nBAD:\ncatch (xxxException e) {\n throw new yyyException(e.getMessage(), e);\n}\n\nOKAY:\ncatch (xxxException e) {\n  throw new yyyException(\"Some informative error message that fits the situation better than the \noriginal message\", e);\n}\n\nSo essentially, if the most appropriate/useful exception message is the one that came with the \noriginal exception you should just throw the original exception, otherwise wrap the exception and \nprovide a more informative message.\n\nThere are obvious cases where that guideline falls down (like the exceptions that can be thrown by \nJCE in NTLM but the API requires them to be dealt with).\n\nAs I said though, it's not a huge issue for me, just something that should be considered when \nthinking about how userfriendly our exception policy is.\n\nThanks for the good work on this - I haven't had time to look into it much but it definitely feels \nlike a much better exception API already.",
            "date": "2003-07-14T06:54:36.000+0000",
            "id": 28
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Adrian,\nI do not why, but I LOVE nested exceptions. Probably it is due to the stigma of\nhaving dealt a lot with EJBs. I remember those days of misery when Websphere App\nServer 4.0.x used to print a completely useless stack trace of EJBException\nwithout giving me even a hint at what had caused the EJBException in the first\nplace. The day the problem was fixed with one of the WAS service releases was\none of the happiest days in my life.\n\nRegardless of what one may think of nestable exceptions, Laura's patch is a step\nin the right direction. I think we should apply the patch and address remaining\nconcerned through a series of incremental patches",
            "date": "2003-07-15T02:19:59.000+0000",
            "id": 29
        },
        {
            "author": "Adrian Sutton",
            "body": "Oleg,\nI'd have no objections to committing the patch it is a very definite improvement.\n\nAs for your EJB example - would it not have been better to just get the original exception in the \nfirst place instead of having to wade through the EJB exception as well?  The API wouldn't have \nallowed that so it's not really an option in this case, but it is an option in at least some of ours.\n\nLike I said, I'm happy either way.  Once the patch is committed I should be able to take a little time \nto create a proposal patch for which exceptions could be left unwrapped then we'll see just how \nfeasible it turns out (and quite possibly I'll change my mind. :)\n\nAgain, great work!",
            "date": "2003-07-15T04:33:04.000+0000",
            "id": 30
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Adrian,\nNot necessarily low level exceptions pushed up all the way to the presentation\nlayer are good\n\nConsider the following two scenarios\n\n-------------------------------------------------------------------------------------------------\nScenario 1:\n-------------------------------------------------------------------------------------------------\nvoid DataLayer.doThis() throws ThisDataException {\n}\n\nvoid DataLayer.doThat() throws ThatDataException {\n}\n\nvoid DataLayer.doWhatever() throws WhateverDataException {\n}\n\nvoid BusinessLayer1.doBusiness() \n  throws ThisDataException, ThatDataException, WhateverDataException\n{\n  dataLayer.doThis()\n  dataLayer.doThat()\n  dataLayer.doWhatever()\n}\n\n\nvoid PresentationLayer.showStuff() {\n  try {\n    businessLayer.doBusiness();\n  }\n  catch(ThisDataException e) {\n  }\n  catch(ThatDataException e) {\n  }\n  catch(WhateverDataException e) {\n  }\n\n}\n-------------------------------------------------------------------------------------------------\nScenario 2:\n-------------------------------------------------------------------------------------------------\nvoid DataLayer.doThis() throws ThisDataException {\n}\n\nvoid DataLayer.doThat() throws ThatDataException {\n}\n\nvoid DataLayer.doWhate() throws WhateverDataException {\n}\n\nvoid BusinessLayer1.doBusiness() throws BusinessLogicException {\n  try {\n    dataLayer.doThis()\n    dataLayer.doThat()\n    dataLayer.doWhatever()\n  } catch(Exception data_level_e) {\n    throw new BusinessLogicException(\"I was just trying to do my business\",\ndata_level_e);\n  }\n}\n\n\nvoid PresentationLayer.showStuff() {\n  try {\n    businessLayer.doBusiness();\n  }\n  catch(BusinessLogicException e) {\n  }\n}\n-------------------------------------------------------------------------------------------------\n\nIMHO, in massive and complex business applications nestable exceptions can be\nyour life saver. This said, I admin it may not be directly applicable to our\nproblem domain with HttpClient. However, I do see IOException pushed all the way\nup to the caller as nothing more that a way of saying \"Oopsie\"\n\nOleg",
            "date": "2003-07-15T04:58:54.000+0000",
            "id": 31
        },
        {
            "author": "Adrian Sutton",
            "body": "Oleg,\nAgreed there are definitely times where nested exceptions are better.\n\nI guess my main question has come down to: how is HttpTransportException() different and better \nthan IOException?  My understanding of IOException is that it's thrown when communication goes \nwrong, which is the same as my understanding of HttpTransportException.\n\nFor the record I definitely agree we should nest exceptions like JSSE and crypto exceptions as well \nas other exceptions that are very much internal to how HttpClient works.  I'm just not sure that \nTransportException either shields the user from the internals of HttpClient or provides additional \ninformation that may be useful.",
            "date": "2003-07-15T06:00:06.000+0000",
            "id": 32
        },
        {
            "author": "Michael Becke",
            "body": "Patch committed.  Nice work Laura.\n\nMike",
            "date": "2003-07-15T09:22:40.000+0000",
            "id": 33
        },
        {
            "author": "Laura Werner",
            "body": "I just noticed that my patch mangled some comments in HeadMethod.java.  They had\na long of row non-ASCII characters (a bullet, I think), which got messed up\nbecause I had Eclipse set to Cp1252 instead of Latin-1.  Here's a patch....",
            "date": "2003-07-15T11:06:14.000+0000",
            "id": 34
        },
        {
            "author": "Laura Werner",
            "body": "Created an attachment (id=7298)\nFix mangled comments in HeadMethod.java\n",
            "date": "2003-07-15T11:06:46.000+0000",
            "id": 35
        },
        {
            "author": "Michael Becke",
            "body": "Comments fixed.",
            "date": "2003-07-15T19:32:55.000+0000",
            "id": 36
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Folks, I am working on clean up of internal exception handling structure. \nThings look nasty. \n\nI have a few ideas I would like to try out before I get all desperate and stuff\n\nOleg ",
            "date": "2003-07-15T19:42:05.000+0000",
            "id": 37
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=7307)\nrefactoring, try #4\n",
            "date": "2003-07-15T21:24:06.000+0000",
            "id": 38
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "OK. Here's what I got.\n\nI played around with several approaches and realized that wrapping all\nIOExceptions into HttpTransportExceptions was not simply feasible, primarily\nbecause InputStream / OutputStream derived classes cannot throw\nnon-IOExceptions. I found no way to work that problem around in an acceptable manner\n\nThe patch basically implements the first scenario of my original proposal and\ngoes along the line suggested by Adrian: \n* IOException represents transport exceptions\n* HttpException represents protocol exceptions\n\nHere's the list of important points\n* TransportException no more\n* HttpException is no longer derived from IOException (which is good)\n* URIException is no longer derived from IOException (which is good)\n* I had to deprecate HttpConnectionManager#getConnection(HostConfiguration,\nlong) because of wrong exception type it throws.\n* In ChunkedInputStream I had to implement a pretty ugly hack to work around\nexception type mismatch\n* HttpConnection can now throw IOTimeoutException\n\nLet me know what you think\n\nOleg",
            "date": "2003-07-15T21:42:48.000+0000",
            "id": 39
        },
        {
            "author": "Michael Becke",
            "body": "> I played around with several approaches and realized that wrapping all\n> IOExceptions into HttpTransportExceptions was not simply feasible, primarily\n> because InputStream / OutputStream derived classes cannot throw\n> non-IOExceptions. I found no way to work that problem around in an acceptable\nmanner\n\nMakes sense.\n \n> The patch basically implements the first scenario of my original proposal and\n> goes along the line suggested by Adrian: \n> * IOException represents transport exceptions\n> * HttpException represents protocol exceptions\n> \n> Here's the list of important points\n> * TransportException no more\n\nAdrian wins:)\n\n> * HttpException is no longer derived from IOException (which is good)\n\nI'm not so sure this is a good thing. This adds up to a very large API change\nfor many users.  People who are wrapping HttpClient.executeMethod() in a try{\n}catch(IOException) are going to be in for some trouble.  I think we should\nleave the IOException inheritence of now (even though it is ugly).\n\n> * URIException is no longer derived from IOException (which is good)\n\nThis is only okay I think if we keep HttpException as an IOException for similar\nreasons as above.\n\n> * I had to deprecate HttpConnectionManager#getConnection(HostConfiguration,\n> long) because of wrong exception type it throws\n\nLooks good to me.  Adding the getConnectionWithTimeout() method breaks the API\nbut I do not think may people are creating their own connection mangers.\n\n> * In ChunkedInputStream I had to implement a pretty ugly hack to work around\n> exception type mismatc\n\nThat's not so bad.  I think we should add an error log since the original stack\ntrack will be lost.\n\n> * HttpConnection can now throw IOTimeoutException\n\nJolly good.\n\n\nOverall this patch is a good incremental change.  The notable exception being\nthe change to HttpException.  This is a pretty big change and I do not think it\nis appropriate for 2.1.  I suggest we keep HttpException as an IOException and\nmake it very clear (in JavaDocs, release notes, etc.) that it will not be that\nway for 3.0.\n\nMike",
            "date": "2003-07-16T03:06:10.000+0000",
            "id": 40
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Mike, believe it or not, it was not an attempt at sneaking in some controversial\nchanges while nobody was watching. I just got carried away. I agree we should\nkeep current HttpException inheritance. \n\nA new patch will follow soon\n\nOleg",
            "date": "2003-07-16T03:42:56.000+0000",
            "id": 41
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=7314)\nrefactoring, try #5\n",
            "date": "2003-07-16T04:12:30.000+0000",
            "id": 42
        },
        {
            "author": "Laura Werner",
            "body": "I like the way this is going.  Here are a couple of comments, though they may be\nthings you just haven't gotten to yet:\n\n- The \"ugly hack\" in ChunkedInputStream isn't strictly necessary anymore, since\nan HttpException is an IOException.  But if we're planning to remove the\nIOException inheritance in 3.0, it should probably stay the way it is.\n\n- If we keep the hack, the code that constructs the IOException should call its\ninitCause method when running on JDK 1.4+.  Maybe a package-access helper method\nin HttpException could take care of this, so we don't have the same ugly\nreflection code all over the place.",
            "date": "2003-07-16T11:48:29.000+0000",
            "id": 43
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "> - The \"ugly hack\" in ChunkedInputStream isn't strictly necessary anymore, since\n> an HttpException is an IOException.  But if we're planning to remove the\n> IOException inheritance in 3.0, it should probably stay the way it is.\n\nIt is not. But I really would like to keep it, as once 3.0 development starts,\nit would only take changing the super class of the HttpException \n\n\n> - If we keep the hack, the code that constructs the IOException should call its\n> initCause method when running on JDK 1.4+.  Maybe a package-access helper method\n> in HttpException could take care of this, so we don't have the same ugly\n> reflection code all over the place.\n\nQuite right. I would like to check in this patch first, though, (provided nobody\nobjects). ",
            "date": "2003-07-16T15:06:13.000+0000",
            "id": 44
        },
        {
            "author": "Michael Becke",
            "body": "Go for it.\n\nMike",
            "date": "2003-07-16T19:31:12.000+0000",
            "id": 45
        },
        {
            "author": "Laura Werner",
            "body": "Ditto.  Check it in.",
            "date": "2003-07-16T23:40:29.000+0000",
            "id": 46
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch (refactoring, try #5) committed.\n\nOleg",
            "date": "2003-07-17T03:53:15.000+0000",
            "id": 47
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=7442)\nRefactoring of authentication, try #1\n",
            "date": "2003-07-22T16:41:02.000+0000",
            "id": 48
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=7443)\nRefactoring of authentication, try #2\n",
            "date": "2003-07-22T17:09:56.000+0000",
            "id": 49
        },
        {
            "author": "Adrian Sutton",
            "body": "Oleg,\nThanks for looking into this.  The patch makes a big improvement to exception handling in \nauthentication.\n\nOnce question: does {@encrypt(byte[],byte[])} actually work or should it have been {@link \n#encrypt(byte[],byte[])}.  My JavaDoc skills are really poor but that looks odd to me.",
            "date": "2003-07-22T18:29:30.000+0000",
            "id": 50
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Thanks, Adrian. I can't claim to be very knowledgeable in Javadoc, but I think \n{@link #encrypt(byte[],byte[])} is surely better. \n\nOleg",
            "date": "2003-07-22T20:12:21.000+0000",
            "id": 51
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch 'Refactoring of authentication, try #2' committed\n\nOleg",
            "date": "2003-07-23T01:14:37.000+0000",
            "id": 52
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=7510)\n(Hopefully) the final exception handling clean-up (take 1)\n",
            "date": "2003-07-25T21:00:46.000+0000",
            "id": 53
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I cleaned up things somewhat and dealt with the remaining outstanding issues. \nPlease let me know what you think. \n\nOleg",
            "date": "2003-07-25T21:02:41.000+0000",
            "id": 54
        },
        {
            "author": "Laura Werner",
            "body": "This looks good!\n\nI'm attaching one minor improvement that I didn't get around to in my original\npatch: a slightly more efficient way of accessing initCause.  Since I can't\nfigure out a way to do a patch relative to your patch, I'll just paste in a new\ncopy of ExceptionUtils.java.",
            "date": "2003-07-30T11:56:16.000+0000",
            "id": 55
        },
        {
            "author": "Laura Werner",
            "body": "Created an attachment (id=7576)\nSlightly more efficient ExceptionUtils.java\n",
            "date": "2003-07-30T11:57:09.000+0000",
            "id": 56
        },
        {
            "author": "Laura Werner",
            "body": "Oops, here's one more thing.  When I added TestExceptions, I forgot to add it to\nthe TestNoHost TestSuite.  Could someone add it?",
            "date": "2003-07-30T12:09:23.000+0000",
            "id": 57
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=7580)\n(Hopefully) the final exception handling clean-up (take 1)\n",
            "date": "2003-07-30T19:06:37.000+0000",
            "id": 58
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Laura,\nMany thanks for your feedback. I patched ExceptionUtils and updated TestNoHost. \n\nOleg",
            "date": "2003-07-30T19:08:48.000+0000",
            "id": 59
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Folks,\nDo you think it is ok to commit the outstanding patch and close the bug report?\n\nOleg",
            "date": "2003-08-05T05:06:09.000+0000",
            "id": 60
        },
        {
            "author": "Michael Becke",
            "body": "Go for it.\n\nMike",
            "date": "2003-08-05T09:51:49.000+0000",
            "id": 61
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "The final patch committed.\n\nOleg",
            "date": "2003-08-06T02:36:07.000+0000",
            "id": 62
        }
    ],
    "component": "HttpClient (classic)",
    "description": "When I use httpclient2.0-alpha3 and setTimeout(60000), after the specified \ntime, I would like to see InterruptedIOException thrown, but I got \nHttpRecoverableException instead, which is pretty general. I would like to see \nthe original exception. Thanks",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-210",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Exception handling in HttpClient requires redesign",
    "systemSpecification": true,
    "version": "2.0 Beta 1"
}