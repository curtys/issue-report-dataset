{
    "comments": [
        {
            "author": "Jonathan Moore",
            "body": "I will upload a patch for this issue in a moment, then we should discuss. :)",
            "date": "2010-06-25T16:10:40.183+0000",
            "id": 0
        },
        {
            "author": "Jonathan Moore",
            "body": "The following patch is contributed to the ASF with the permission of my employer. This is a stopgap fix for the issue.",
            "date": "2010-06-25T16:11:50.674+0000",
            "id": 1
        },
        {
            "author": "Jonathan Moore",
            "body": "Ok, the stopgap fix is to detect this situation for 200 or 206 responses, and return a 502 (Bad Gateway) error instead. This is conditionally compliant cache behavior, although potentially not optimal. The RFC suggests that it would be permissible to convert these responses into properly-formatted 206 responses instead, although since the caching code does not currently have any support for partial responses or byte ranges, this seemed too complicated to undertake without further discussion.\n\nThe tricky thing would be if a 206 response arrived with:\n\nContent-Length: 100\nContent-Range: bytes 0-9,50-139/255\n\nbut only 50 bytes in the body; we'd have to parse the existing Content-Range to figure out which bytes we *did* get, and then produce the appropriate:\n\nContent-Range: bytes 0-9,50-89/255\n\nI can work on doing this, however, if the current stopgap solution isn't acceptible (I don't think this is a very likely case to arise in practice).\n",
            "date": "2010-06-25T16:16:36.180+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Hi Jon,\n\nIn my opinion it is perfectly fine if the cache does not handle partial responses and always returns 502 in case of a partial response. The support for partial responses can be added at a later point if there is popular demand for it. Presently there are more important things to be done such as file system bound backend.\n\nOleg   ",
            "date": "2010-06-28T12:59:19.655+0000",
            "id": 3
        },
        {
            "author": "Jonathan Moore",
            "body": "Oleg, sounds good. The patch I uploaded should provide that 502 funtionality -- let me know if you need any changes. -Jon\n",
            "date": "2010-06-28T16:13:36.254+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in.\n\nOleg",
            "date": "2010-07-02T10:36:49.597+0000",
            "id": 5
        }
    ],
    "component": "HttpCache",
    "description": "Per the HTTP/1.1 spec:\n\n\"A cache that receives an incomplete response (for example, with fewer bytes of data than specified in a Content-Length header) MAY store the response. However, the cache MUST treat this as a partial response. Partial responses MAY be combined as described in section 13.5.4; the result might be a full response or might still be partial. A cache MUST NOT return a partial response to a client without explicitly marking it as such, using the 206 (Partial Content) status code. A cache MUST NOT return a partial response using a status code of 200 (OK).\"\n\n(http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.8)\n\nFor example, if a 200 response shows up with 128 bytes in the body but a Content-Length header of 256, the cache MUST NOT pass this through unchanged.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-958",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "client cache currently allows incomplete responses to be passed on to the client",
    "systemSpecification": true,
    "version": "4.1 Alpha2"
}