{
    "comments": [
        {
            "author": "Michael Becke",
            "body": "Created an attachment (id=10752)\nTake 1\n",
            "date": "2004-03-11T11:34:49.000+0000",
            "id": 0
        },
        {
            "author": "Michael Becke",
            "body": "Hi Gael,\n\nHere's a quick stab at this one.  Please let me know if this is what you were looking for.  I do not know \nif this change will make it into the 2.0 code base.  It may have to wait until 3.0 for an official inclusion.  \nHow does everyone else feel about this?\n\nMike",
            "date": "2004-03-11T11:39:54.000+0000",
            "id": 1
        },
        {
            "author": "Dave Abrams",
            "body": "This is a MUST HAVE feature.  It is causing a resource leak in our\nserver software that is going to force us to not use this library.\n\nIf thread A makes a blocking IO HTTP request on a host,\nthen thread B needs to be able to call Socket.close(), \nforcing an IO Exception on thread A so it wakes up\nfrom a blocking Socket.read() call.\n\nIS there any workaround that would let us do it NOW?\n\nCould you suggest how I could modify my own version of\nthe code to do it?\n\nURGENTLY NEEDED.\n",
            "date": "2004-03-12T23:38:14.000+0000",
            "id": 2
        },
        {
            "author": "Michael Becke",
            "body": "Hi Dave,\n\nI think what you are looking for is slightly different.  It sounds like you want\nto abort a single HttpMethod.  This feature is covered in HTTPCLIENT-217.  \n\nYour options, until this gets solved officially, are to add an abort method that\ncloses the method's connection, or to use timeouts.  In particular setting the\nsocket read timeout, HttpClient.setTimeout(), should handle the case you mention.\n\nMike",
            "date": "2004-03-13T02:02:59.000+0000",
            "id": 3
        },
        {
            "author": "Gael Marziou",
            "body": "Hi Mike,\n\nThanks for this patch, I just reviewed the code and it does meet our \nrequirements, it would be great if it could be part of 2.0 code base \nespecially as your implementation is safe because it should have no side \neffect for applications not using this new feature.\n\nGael",
            "date": "2004-03-15T19:27:43.000+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Mike, the multithreaded connection manager of yours is still a sort of a black\nart to me ;-) But from what I can tell, the patch looks fine. The decision\nwhether the patch is safe to be included it into 2.0 branch can only rest with\nyou, as you are the one who knows the code best\n\nOleg",
            "date": "2004-03-18T06:51:53.000+0000",
            "id": 5
        },
        {
            "author": "Michael Becke",
            "body": "Yes, it has become pretty complicated.  These changes are pretty safe I think, and are needed to fix a \nhole in the current 2.0 distribution.  I will make a few more documentation enhancements and apply the \npatch, if there are no objections.\n\nMike",
            "date": "2004-03-18T12:23:11.000+0000",
            "id": 6
        },
        {
            "author": "Michael Becke",
            "body": "Created an attachment (id=10938)\nOne more try\n",
            "date": "2004-03-24T11:51:14.000+0000",
            "id": 7
        },
        {
            "author": "Michael Becke",
            "body": "Ok, I was just going to commit the last patch, but I thought of one more thing.  This patch now closes \nand releases all connections associated with the connection manager, including those that are checked \nout.  Please let me know if there are any comments/suggestions.  If there are no objections I will apply \ntomorrow.\n\nMike",
            "date": "2004-03-24T11:56:42.000+0000",
            "id": 8
        },
        {
            "author": "Gareth Davis",
            "body": "I've been following this with great interest as it is a feature that we really \nneed in our application.\n\nIf the closes the checked out connections then so be it. This is a lot better \nthan leaving a bunch of sockets open for GC to (maybe) collect up later.\n\nGareth Davis",
            "date": "2004-03-24T16:28:59.000+0000",
            "id": 9
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I believe this behavior is justified (after all, shutting down connection\nmanager is all about closing connections it manages, imo) as long as this fact\nis reflected in the javadocs and documentation.\n\nOleg",
            "date": "2004-03-24T18:55:02.000+0000",
            "id": 10
        },
        {
            "author": "Michael Becke",
            "body": "Patch applied to 2.0 and HEAD.\n\nMike",
            "date": "2004-03-29T05:27:43.000+0000",
            "id": 11
        },
        {
            "author": "Gael Marziou",
            "body": "Thanks.\n\nIt seems that the nightly builds are done on the HEAD only, so I guess I have \nto retrieve the source from CVS and build myself.\n\nOr is there any plan to have nightly builds for 2.0 support also?\n\n",
            "date": "2004-03-29T17:27:36.000+0000",
            "id": 12
        }
    ],
    "component": "HttpClient (classic)",
    "description": "MultiThreadedConnectionManager should provide a shutdown() method to release \nall its resources, it is currently using daemon threads that cannot be stopped \nand HTTP connections that cannot be released.\nThis is annoying when the pool of connection is created within a web \napplication that is undeployed and re-deployed (i.e. the JVM is not restarted) \nconsuming resources on local and remote servers.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-326",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "MultiThreadedConnectionManager should provide a shutdown",
    "systemSpecification": true,
    "version": "2.0 Final"
}