{
    "comments": [
        {
            "author": "Tony Poppleton",
            "body": "This patch's usage of LinkedHashMap means it requires Java 1.4+.  Is this the case for HttpClient?",
            "date": "2010-01-15T01:37:55.860+0000",
            "id": 0
        },
        {
            "author": "Tony Poppleton",
            "body": "Attached a second version of the patch (with suffix .patch2) without the whitespace and final changes.",
            "date": "2010-01-15T01:40:49.569+0000",
            "id": 1
        },
        {
            "author": "Sebb",
            "body": "Agree that using entry set is better if one wants both key and values.\nWhether LHM is faster overall is less immediately obvious, and will depend on how the map is used, not just how it is iterated.\n\nThe patch has spurious white-space changes as well as the final changes which make it very much harder to review.\nAlso, when patches are committed it is generally prefereable to fix one problem per commit.\nPlease provide patches that fix only the problem at hand.\n\nThe original code for which you have provided a patch includes generics, which require Java 1.5+, so LinkedHashMap must be OK",
            "date": "2010-01-15T01:48:00.704+0000",
            "id": 2
        },
        {
            "author": "Tony Poppleton",
            "body": "Attached .patch3 which uses spaces rather than tabs (as per conventions) and removed use of \"final\" keyword to be consistent with rest of file.",
            "date": "2010-01-15T23:55:36.934+0000",
            "id": 3
        },
        {
            "author": "Sebb",
            "body": "According to Java Generics and Collections (O'Reilly) Chapter 16, LinkedHashMap has slightly worse performance overall than HashMap, and should only be used if insertion or access order is important. That makes sense, because the LHM has to maintain its links.\n\nBTW, when providing updated patches, it may be clearer to replace the original file with a new one.\nIIf the old file is to be kept, please use a fixed type (e.g. .patch) and change the file stem (e.g. try3.patch), otherwise the attachment may be treated as binary.\n\nI've applied the patch without the change to use LHM.\n\nURL: http://svn.apache.org/viewvc?rev=899957&view=rev\nLog:\nHTTPCLIENT-906 Minor performance improvement to IdleConnectionHandler\nReplace keySet() + get() with entrySet()\n\nModified:\n   httpcomponents/httpclient/trunk/httpclient/src/main/java/org/apache/http/impl/conn/IdleConnectionHandler.java",
            "date": "2010-01-16T14:12:54.596+0000",
            "id": 4
        },
        {
            "author": "Tony Poppleton",
            "body": "Thanks.\n\nAgreed, LHM is slower for some operation, however it does have faster iteration performance (http://www.artima.com/weblogs/viewpost.jsp?thread=122295).  I guess I was optimizing for my particular use-case where I don't add new connections frequently, but do try and close idle ones every 5 seconds.\n\nAnyway, am happy either way.",
            "date": "2010-01-16T14:27:25.851+0000",
            "id": 5
        }
    ],
    "component": "",
    "description": "The attached patch does the following changes to IdleConnectionHandler\n - as it iterator over a map of connections, using a LinkedHashMap is a faster\n - rather than using an iterator over the keyset and subsequently getting the values, an iterator over the entry set is used instead for efficiency (at least according to FindBugs)\n\nNote that the patch contains other changes to make variables final where possible. This was done automatically by Eclipse, and can be removed if desired. However I see no harm in them, other than they affect more of the code than intended by the patch.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-906",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Minor performance improvement to IdleConnectionHandler",
    "systemSpecification": true,
    "version": ""
}