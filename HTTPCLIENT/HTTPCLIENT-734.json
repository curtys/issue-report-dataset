{
    "comments": [
        {
            "author": "Oleg Kalnichevski",
            "body": "My bad. I guess this patch should address the problem.\n\nOleg",
            "date": "2008-01-26T11:30:08.094+0000",
            "id": 0
        },
        {
            "author": "Roland Weber",
            "body": "Hi Oleg,\n\nthat takes care of opening the connection. But it does not address the interval that a thread spends in allocateConnection(). If we want to address that, we'll have to store a thread in the AbortableHttpRequest and interrupt the thread if there is no ConnectionReleaseTrigger. I'm not sure whether that is what we want, but it seems to be a sensible behavior from a user perspective.\n\nPlease go ahead and commit the patch, it already improves the behavior.\n\ncheers,\n  Roland\n",
            "date": "2008-01-26T18:52:07.427+0000",
            "id": 1
        },
        {
            "author": "Roland Weber",
            "body": "This is getting nastier the more I think about it. If abort() is called while waiting for a connection, the thread should be unblocked and an InterruptedException is thrown. If abort is called after the ConnectionReleaseTrigger (CRT) becomes available, the connection is released and the next IO operation will throw an IOException. So far, so good.\nIf abort() is called just after the connection is obtained and before the CRT has been set, things get tricky. The thread will be interrupted, but since it is not blocked it will not get an InterruptedException. We have to check and reset the interrupt status, release the connection and throw an InterruptedException. The latter two may happen in reverse order, if the connection is released in a finally{} block.\nWe'll need some synchonization and maybe a volatile declaration in HttpRequestBase, plus code for checking the interrupt status in ClientRequestDirector (CRD).\n\nThe alternative would be that applications have to do both, call abort() and interrupt the thread to make sure it isn't waiting for a connection. Ensuring proper connection release in the application would become really challenging if we require that.\n\ncheers,\n  Roland\n",
            "date": "2008-01-27T08:46:37.103+0000",
            "id": 2
        },
        {
            "author": "Sam Berlin",
            "body": "Attached is a patch + testcase (that previously failed, but now passes) for this.  Basically the idea is that DefaultClientRequestDirector installs its own ConnectionReleaseTrigger and then sets further triggers through that.  Its trigger will interrupt the thread if no trigger has been set by the time abort is called, and if a delegate trigger is set after abort was called, it immediately throws an IOX & clears the interrupted status.",
            "date": "2008-03-17T17:13:12.024+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Sam,\n\nThis is a tricky one. \n\nI kind of dislike the idea of having to interrupt the thread in order to unblock the connection manager. Besides, not all connection manager implementation would necessarily block on connection allocation.  So, I am thinking if a better solution could be to return an optional handle object, which could be used to unblock the connection manager without interrupting the thread. \n\nDoes this make any sense to you? If not, i'll commit your patch as is\n\nOleg   ",
            "date": "2008-03-17T22:02:11.579+0000",
            "id": 4
        },
        {
            "author": "Sam Berlin",
            "body": "That makes sense -- I agree that interrupting is a bad practice.  I'll take another stab at it tomorrow... (or feel free to do it in the meantime).",
            "date": "2008-03-17T22:07:16.712+0000",
            "id": 5
        },
        {
            "author": "Sam Berlin",
            "body": "This patch takes a different approach than the prior one.  Instead of requiring the user of the ClientConnectionManager to assume that it blocks, an AbortableHttpRequest is now passed into getConnection.  The ClientConnectionManager must set a ConnectionReleaseTrigger on the request to support aborting it.\n\nThe patch is a little more intrusive than the prior one (in that it touches more classes and changes some method signatures), but it could be worth it.\n\nThere's some more tests in TestTSCCMNoServer to make sure that ThreadSafeClientConnectionManager is doing the right thing.\n\n(Included in this patch is the small changes & tests for HTTPCLIENT-759, because it's hard to separate the environments.)",
            "date": "2008-03-18T17:57:03.331+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Sam,\nI'll review the patch in the coming days\n\nOleg",
            "date": "2008-03-18T19:56:54.175+0000",
            "id": 7
        },
        {
            "author": "Sam Berlin",
            "body": "Here's the exact same patch, just diffed against the most recent head (to avoid the conflicts from HTTPCLIENT-759's patch adding the same test file).",
            "date": "2008-03-18T21:09:14.741+0000",
            "id": 8
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Hi Sam\n\nThis looks much better. However, I do not quite like the fact that the proposed changes introduce a dependency between client protocol layer and the connection management layer\n\nI personally think it would be cleaner to give he control over the connection allocation back t to the client request director. Instead of connection manager injecting some code into the AbortableHttpRequest, how about the connection manager returning a handle object representing a pending request for a connection and letting the request director handle it? The request director in its turn could inject the handle object into the AbortableHttpRequest\n\npublic interface ClientConnectionManager {\n\n...\n\n    ClientConnectionRequest requestConnection(HttpRoute route,\n                                          long timeout,\n                                          TimeUnit tunit)\n        throws ConnectionPoolTimeoutException, InterruptedException;\n\n...\n\n}\n\n\npublic interface ClientConnectionRequest {\n\n    ManagedClientConnection getConnection() \n    \t\tthrows InterruptedException;\n    \n    void abort();\n\n    boolean isCompleted();\n    \n    boolean isTimedOut();\n    \n    boolean isAborted();\n    \n}\n\nDoes this make any sense to you?\n\nAnyways, let tackle problem in small incremental steps. First thing that we need, no matter what approach, we take is ability to abort WaitingThread. Then, we can think of a way to propagate access to that method to the AbortableHttpRequest.\n\nOleg",
            "date": "2008-03-19T10:19:31.599+0000",
            "id": 9
        },
        {
            "author": "Sam Berlin",
            "body": "Ya, it makes sense.  I took a swipe at using the ClientConnectionRequest approach, and this is the result.  IMO it's much cleaner than the prior one (which used AbortableHttpRequest) -- less method signatures changed and the code is simpler to understand.  It still is more complex than the very first approach, just due to the nature of having to touch more classes...  but it works very well.\n\nSorry also for throwing all these patches out so fast -- we're finalizing remaining bugs with LimeWire, and since we're using httpclient-4.0 now, we need to make sure it's doing what we expect.  (Don't worry, there's lots of other things to work on too, just not as time-critical.)",
            "date": "2008-03-19T17:02:10.884+0000",
            "id": 10
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in pretty much as is (barring the tabs, which I had to replace with spaces). Many thanks, Sam. I still would like to do some minor API refinements but otherwise look good. Great job! \n\nOleg",
            "date": "2008-03-19T19:38:35.159+0000",
            "id": 11
        },
        {
            "author": "Sam Berlin",
            "body": "Thanks for checking it in & fixing the tabs.  Any chance you could post a new snapshot to people.apache.org?  ... Makes maven dependencies much much easier. :)",
            "date": "2008-03-19T19:53:18.962+0000",
            "id": 12
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Done.\n\nOleg",
            "date": "2008-03-19T20:23:26.189+0000",
            "id": 13
        }
    ],
    "component": "HttpClient (classic)",
    "description": "Calls to HttpRequestBase.abort() will not unblock a thread that is still waiting for a connection and therefore has no ConnectionReleaseTrigger yet.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-734",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "request.abort() should interrupt thread waiting for a connection",
    "systemSpecification": true,
    "version": "4.0 Alpha 2"
}