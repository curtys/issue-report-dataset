{
    "comments": [
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "We could subclass java.net.ConnectException and add some fields like the HostConfiguration. Then catch, wrap, throw. If you're esoteric, you may argue that this change may break existing users that serialize the exception and lack the class on the deserializing side. Not sure if we should change that in 3.x.",
            "date": "2007-10-24T07:37:28.649+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Makes sense to me, Odi\n\nOleg",
            "date": "2007-10-24T08:12:09.110+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Here's the patch for the proposed change. Odi, please review.\n\nOleg",
            "date": "2007-10-25T14:53:20.169+0000",
            "id": 2
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Perfect.",
            "date": "2007-10-25T15:02:22.850+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in.\n\nOleg",
            "date": "2007-10-28T16:57:04.642+0000",
            "id": 4
        }
    ],
    "component": "HttpClient (classic)",
    "description": "Whether Http sever endpoint is down or the proxy server is down we get the same stack trace as:\n\njava.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)\n\tat java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)\n\tat java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)\n\tat java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)\n\tat java.net.Socket.connect(Socket.java:518)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.apache.commons.httpclient.protocol.ReflectionSocketFactory.createSocket(ReflectionSocketFactory.java:139)\n\tat org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:124)\n\tat org.apache.commons.httpclient.HttpConnection.open(HttpConnection.java:706)\n\tat org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter.open(MultiThreadedHttpConnectionManager.java:1321)\n\tat org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:386)\n\tat org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:170)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:396)\n\tat com.approuter.module.http.protocol.HttpTransportSender.perform(HttpTransportSender.java:214)\n\tat \n\n\nIt will be good if we can get information whether the proxy was down or the Http endpoint.\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-697",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Http Client give sme message when proxy/http endpoint is down",
    "systemSpecification": true,
    "version": "4.0 Alpha 1"
}