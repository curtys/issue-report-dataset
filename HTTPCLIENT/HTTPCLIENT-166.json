{
    "comments": [
        {
            "author": "Oleg Kalnichevski",
            "body": "waitForResponse should not block infinitely. It should be able to timeout after\ngiven number of ms if no response is forthcoming. If you see a more elegant Java\n1.2.2 compatible solution, please advise us\nOleg",
            "date": "2003-02-27T22:19:35.000+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Dan\nwaitForResponse at the moment is used for just one highly specific case, namely\nwaiting for 100-continue response. When communicating with compliant HTTP 1.1\nserver HttpClient does not spend much time polling at all. In 99% cases\nintensive CPU-bound polling does not take place. Therefore I am extremely\nreluctant to introduce an extra thread per request to cover only 1% of cases. Do\nyou think that putting the request thread to sleep for 10-25 ms prior to\nrepeating the data poll would be an acceptable solution? Should waitForResponse\never be used elsewhere, we would consider using a watcher thread  \n\nOleg",
            "date": "2003-02-27T23:06:36.000+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I just wanted to butt into this to point out that on some platforms, \nsuch as 2.2 linux, a thread equates to a process id, and you can quickly \nrun out of them. In these cases, a busy wait is far preferable to a new \nThread. Also firing off a Thread when things are slow can cause sudden \nspikes in Thread use. I've recently seen an analogous problem with an \nolder version of jboss when doing RMI connections <...>\n\nCommented by Mike Moran <mike_moran@mac.com>",
            "date": "2003-02-28T03:23:46.000+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch applied to make request thread pause for 50 ms when polling for incoming data",
            "date": "2003-02-28T04:02:33.000+0000",
            "id": 3
        },
        {
            "author": "Jeff Dever",
            "body": "Should not have been marked as WONTFIX.",
            "date": "2003-02-28T06:25:52.000+0000",
            "id": 4
        },
        {
            "author": "Jeff Dever",
            "body": "The patch applied is a good solution to the problem.  No extra threads are\ncreated and the polling loop is slowed down greatly by blocking the current\nthread in 50ms intervals.",
            "date": "2003-02-28T06:27:28.000+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "There's a more elegant soluton to the problem suggested by Simon Roberts\n<simon.roberts@fifthweb.net>. Fix pending\n\nOleg",
            "date": "2003-03-04T21:33:31.000+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "The problem has been resolved with the patch for the HTTPCLIENT-165\n\nOleg",
            "date": "2003-03-06T16:46:51.000+0000",
            "id": 7
        }
    ],
    "component": "HttpClient (classic)",
    "description": "In HttpConnection, the method waitForResponse is using busywait, instead of \nblocking until the response is arriving.\n\nIs this on purpose, or shouldn't it handle this by blocking instead ??",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-166",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "waitForResponse is using busy wait",
    "systemSpecification": false,
    "version": "2.0 Alpha 3"
}