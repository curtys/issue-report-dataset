{
    "comments": [
        {
            "author": "Roland Weber",
            "body": "Hi Julius,\n\nthrowing an exception is generally a very expensive operation. Code that throws and catches exceptions in the normal course of operations is _highly_ questionable. This is HttpClient 4.x, so the prerequisite is Java 1.4 which already supports regular expressions. If you have to check a string for a format as simple as this, please use a precompiled regular expression. If you're not familiar with the regexp format, I'll help you out.\n\ncheers,\n  Roland\n",
            "date": "2006-12-19T19:07:15.000+0000",
            "id": 0
        },
        {
            "author": "Julius Davies",
            "body": "good point\n\nI'll run Character.isDigit( ) against each character of that last sub-string, instead of Integer.parseInt().  That way even unicode digits in Arabic will be caught.  :-)\n\n",
            "date": "2006-12-19T19:14:41.000+0000",
            "id": 1
        },
        {
            "author": "Roland Weber",
            "body": "Hi Julius,\n\nI'm not sure that an IP address is allowed to have anything but US-ASCII digits 0-9. And instead of hand-parsing, you could just use a precompiled regular expression... ;-) The \"precompiled\" is important here. If it's not precompiled, hand-parsing will definitely be more efficient.\n\ncheers,\n  Roland\n",
            "date": "2006-12-19T19:33:03.000+0000",
            "id": 2
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "It would be good to have a couple of tool functions to check for these cases:\n\nisIPv4Address\nisIPv6Address\n\nPitty the InetAddress class doesn't provide this functionality in an inexpensive way.",
            "date": "2006-12-20T09:13:14.000+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Julius,\n\nI added a utility class InetAddressUtils which can be used to test if a string represents a valid IPv4 or IPv6 address.  \n\nhttp://svn.apache.org/repos/asf/jakarta/httpcomponents/httpclient/trunk/module-client/src/main/java/org/apache/http/conn/util/InetAddressUtils.java\n\nWhat else needs to be done to close this issue?\n\nOleg",
            "date": "2007-10-09T17:47:08.547+0000",
            "id": 4
        },
        {
            "author": "Julius Davies",
            "body": "Thanks, Oleg!  Here's what I had in mind (see attached patch).  I'll try and put together a junit test for this - hopefully soon (famous last  words).  Unfortunately I have to remember how to use openssl to generate an X509 cert with CN=*.1.2.3, but should hopefully find time this weekend.\n\nyours,\n\nJulius",
            "date": "2007-10-10T17:51:37.342+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in. Many thanks, Julius. \n\nTest cases would be very welcome, as always.\n\nOleg",
            "date": "2007-10-11T09:20:49.226+0000",
            "id": 6
        }
    ],
    "component": "HttpClient (classic)",
    "description": "Hostname verification:   turn off wildcards when CN is an IP address.  This is a further improvement on HTTPCLIENT-613 and HTTPCLIENT-614.\n\nExample - don't allow:\nCN=*.114.102.2\n\nI'm thinking of grabbing the substring following the final dot, and running it through \"Integer.parseInt()\".  If the NumberFormatException isn't thrown (so Integer.parseInt() actually worked!), then I'll turn off wildcard matching.  Notice that this won't be a problem with IP6 addresses, since they don't use dots.  It's only a problem with IP4, where the meaning of the dots clashes with dots in domain names.\n\nNote:  when I turn off wildcard matching, I still attempt an exact match with the hostname.  If through some weird mechanism the client is actually able to use a hostname such as \"https://*.114.102.2/\", then they will be okay if that's what the certificate on the server contains.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-617",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Hostname verification:  turn off wildcards when CN is an IP address",
    "systemSpecification": true,
    "version": ""
}