{
    "comments": [
        {
            "author": "Bin Chen",
            "body": "Created an attachment (id=5963)\nTemp fix for checking \"Connection aborted by peer: socket write error\" and throw exception\n",
            "date": "2003-04-23T03:05:28.000+0000",
            "id": 0
        },
        {
            "author": "Michael Becke",
            "body": "HttpClient does not support reusing tunneled HTTPS connections.  This is a known\nproblem.  This problem was \"fixed\" post alpha-3 so you will need to get a\nnightly build for this one.\n\nMike",
            "date": "2003-04-23T03:43:32.000+0000",
            "id": 1
        },
        {
            "author": "Bin Chen",
            "body": "Mike,\n\nI have the latest code from nightly build now.  It looks like that the \ntunnelled https connection is now being closed each time.  We definitely need \nkeep-alive in our application (connecting each time would be too slow for our \napp).  Will the final release of httpClient support tunnelling https connection?",
            "date": "2003-04-29T00:15:53.000+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Bin, the wire log would be very helpful\n\nOleg ",
            "date": "2003-04-29T00:41:39.000+0000",
            "id": 3
        },
        {
            "author": "Bin Chen",
            "body": "Created an attachment (id=6055)\nwire log showing each POST follows CONNECT\n",
            "date": "2003-04-29T00:54:15.000+0000",
            "id": 4
        },
        {
            "author": "Bin Chen",
            "body": "Oleg,\n\nThe wire log was chopped off from the top.  But it has enough transactions in \nit and it shows that each time, the complete \"CONNECT\"/\"POST\" sequence is \nperformed.  That is due to the httpClient code decides to close the tunnelled \nconnection each time.",
            "date": "2003-04-29T00:56:23.000+0000",
            "id": 5
        },
        {
            "author": "Michael Becke",
            "body": "Yes, as mentioned in some previous emails HttpClient does not support tunneled\nHTTPS presistence.  This is due to a design flaw that keeps HttpClient from\ncorrectly re-establishing a connection after timeout.\n\nMike",
            "date": "2003-04-29T01:00:11.000+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Mike,\nThis is not about connection timeout. According to the log tunneled connection\ngets closed after each request/response exchange. I am currently trying to\nreproduce the problem on my development system.\n\nOleg",
            "date": "2003-04-29T01:07:54.000+0000",
            "id": 7
        },
        {
            "author": "Michael Becke",
            "body": "Tunneled HTTPS connections are setup so that they only get used once.  This\nappears to be what is happening.  After the NTLM request/response exchange the\nmethod is executed and the response is read.  At this point\nHttpConnection.releaseConnection() is called and it explicitly closes itself\nbecause is tunneled HTTPS.\n\nMike",
            "date": "2003-04-29T01:28:10.000+0000",
            "id": 8
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I thought the only problem was that HttpClient due to the current design could\nnot properly retry requests over tunneled connection (as CONNECT can't be\ncleanly re-issued). But what's the reason for always closing tunneled connections?\n\nOleg ",
            "date": "2003-04-29T01:39:21.000+0000",
            "id": 9
        },
        {
            "author": "Michael Becke",
            "body": "This purpose was to \"fix\" this problem by not allowing these connections to be\nreused.  We decided \"I believe in the IRC meeting\" that this was the way to go.\n The reason being that since tunneled+HTTPS connections cannot be reused\nreliably they should not be reused.  \n\nThe main problem case WAS when a method got a previously used connection (that\nhad timed out) and tried to use it.  This would cause the method to fail, with\nthe only feasable solution being to retry in HttpClient.  Since we were waiting\nto push the retry logic into HttpClient this was also put off.  Thus the fairly\nlousy solution.\n\nThe reason I say \"WAS\" above is that I think we can fix this now.  I think, now\nthat we have the ability to test for stale connections, this can be handled by\nHttpClient.  HttpClient is currently calling HttpConnection.isOpen() in\nexecute(), which should preemptively take care of stale tunneled+HTTPS\nconnections.  I believe that if we remove the force close in\nHttpConnection.releaseConnection() we may have a viable solution.  At least for\npeople who are using HttpClient (not the connections directly) and also have JRE\n1.4 or better.\n\nMike",
            "date": "2003-04-29T02:01:17.000+0000",
            "id": 10
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Sorry, Mike. You are right. I guess I am getting old. \n\nIt's your call if it is safe to relax somewhat the restriction on tunnelled\nconnection pooling.\n\nOleg\nPS: We HAVE GOT to move past 2.0 as soon as possible.",
            "date": "2003-04-29T02:21:47.000+0000",
            "id": 11
        },
        {
            "author": "Michael Becke",
            "body": "No worries.  Things have been getting pretty complicated lately.  I am having\ntrouble keeping track of all of the various HttpClient nuances.  \n\nWe definitely need to push on past beta-1 very soon.  This interim period has\nbeen taking way too long.\n\nI will make a few tests without the force close just to make sure that it works.\n My only worry is for the people who are using connections directly.  It will\nwork for them, assuming that isOpen() is being called before the method is executed.\n\nLaura, do you have any thoughts?\n\nMike",
            "date": "2003-04-29T02:41:48.000+0000",
            "id": 12
        },
        {
            "author": "Michael Becke",
            "body": "Created an attachment (id=6061)\nremove force connection close patch\n",
            "date": "2003-04-29T03:01:26.000+0000",
            "id": 13
        },
        {
            "author": "Michael Becke",
            "body": "The above patch removes the force close in HttpConnection.releaseConnection()\nwhen using tunneled+HTTPS connections.  As expected, this correctly allows\npersistent connections when using JRE 1.4 or later.  As previously discovered\npre 1.4 implementations of JSSE do not correctly handle the isStale() read test.\n\nBin, I don't know how useful this will be for you as it appears you are using\n1.3.1.  Please give it a try though, just to be sure.\n\nLaura, I'm singling you out just because I know your app uses connections\ndirectly, I hope you don't mind:)  I would appreciate any feedback you might\nhave, assuming that you are using tunneled HTTPS.\n\nThanks,\n\nMike",
            "date": "2003-04-29T03:09:47.000+0000",
            "id": 14
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Mike,\nI tested the patch a bit. It works fine with JDK 1.4 for me (and does not with\n1.2 which is expected). Once we get Laura's consent I'd call it the end of the\nstory. This is as good as it gets for 2.0 release in my opinion.\n\nOleg",
            "date": "2003-04-29T03:18:52.000+0000",
            "id": 15
        },
        {
            "author": "Bin Chen",
            "body": "Releated issue with MethodRetryHandler:\n\nWe are trying to use the MethodRetryHandler to control when the httpClient \nshould retry after HttpRecoverableException.  We run into two issues:\n1. One of our criteria of retrying depends on if the connection is tunnelled.  \nWe will need to have access to the HttpConnection object to know that (using \nisSecure/isProxied combination).  Are there any other ways to get that \ninformation from HttpMethod?  If not, can httpClient code pass the data to \nretryMethod?\n2. It would be mroe convenient to have a base class implementing the \nMethodRetryHandler so app can call the super for cases it doe snto want to \noverride.",
            "date": "2003-04-30T20:48:10.000+0000",
            "id": 16
        },
        {
            "author": "Michael Becke",
            "body": "Sounds reasonable.  I will add this tonight.\n\nMike",
            "date": "2003-04-30T21:46:13.000+0000",
            "id": 17
        },
        {
            "author": "Michael Becke",
            "body": "Created an attachment (id=6113)\nretry handler patch\n",
            "date": "2003-05-01T07:03:13.000+0000",
            "id": 18
        },
        {
            "author": "Michael Becke",
            "body": "This patch extracts the default retry handler to a new class and adds the\nconnection as a new parameter.\n\nMike",
            "date": "2003-05-01T07:06:02.000+0000",
            "id": 19
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Looks good to me.\n\nOleg",
            "date": "2003-05-01T19:20:52.000+0000",
            "id": 20
        },
        {
            "author": "Michael Becke",
            "body": "Patch applied.",
            "date": "2003-05-01T19:30:08.000+0000",
            "id": 21
        }
    ],
    "component": "HttpClient (classic)",
    "description": "Description:\n\nWhen using httpClient with https tunnelling througha proxy server, after keep-\nalive connection timed out on server side.  The httpClient code was unable to \nestablish the connection again.\n\nCause:\n\nThe HttpMethodBase.processRequest's retry loop retries the connection without \ngoing through the \"CONNECT\" request to the proxy server.  Our proxy server \nreturns 407 error code.  In case of tunnelling connection, proper reconnect \nshould be done by first doing the \"CONNECT\" sequence to get authenticated \nthrought the proxy.\n\nTemp fix and Work around:\n\nWe implemented some work around to do the retry from the application layer.  In \norder to detect the situation, we have to rely on the error message contained \nin the HttpRecoverableException.  We are checking the text \"Connection aborted \nby peer: socket write error\".  We also have to modify the HttpMethodBase code \nto throw the HttpRecoverableException out to the application.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-196",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Critical",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "httpClient failed to reconnect after keep-alive connection timed out",
    "systemSpecification": true,
    "version": "2.0 Beta 1"
}