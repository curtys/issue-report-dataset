{
    "comments": [
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Harm,\n\nThat's interesting. I wasn't aware of the possibility to pass authentication\ninformation to the actual host this way. Is this a proxy standard or a\nproprietary extension? Does it only  work for FTP URLs? Even more interesting I\nfind the fact that you are using a proxy as a bridge between FTP and HTTP. As a\nwork-around, supply the authentication information as a HTTP header instead. But\nI am not sure if this works for your FTP URL.\n\n",
            "date": "2005-12-21T20:29:57.000+0000",
            "id": 0
        },
        {
            "author": "harm de laat",
            "body": "I'm not actually sure if this is a 'proxy standard'. However, I discovered that\n'Total commander' works in the exact same way, when configured a HTTP proxy server.\n",
            "date": "2005-12-21T21:12:41.000+0000",
            "id": 1
        },
        {
            "author": "harm de laat",
            "body": "Also see: http://www.cs.tut.fi/~jkorpela/ftpurl.html for more info on FTP URL's\n",
            "date": "2005-12-21T21:16:12.000+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=17254)\nPatch (take 1)\n\nPlease review and comment\n\nOleg",
            "date": "2005-12-22T02:05:33.000+0000",
            "id": 3
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "It duplicates some code, but I have no better idea.",
            "date": "2005-12-22T02:14:38.000+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #5)\n> It duplicates some code, but I have no better idea.\n\nAs I said before, given a choice, I would not touch the URI and related classes\nwith a barge pole. So, that was the least effort, quick hack I could come up with\n\nOleg",
            "date": "2005-12-22T03:35:56.000+0000",
            "id": 5
        },
        {
            "author": "harm de laat",
            "body": "(In reply to comment #4)\n> Created an attachment (id=17254) [edit]\n> Patch (take 1)\n> \n> Please review and comment\n> \n> Oleg\n\nI applied the patch and tested.\nNow everything works as expected.\n\nThanks for the quick fix!\n\n\n",
            "date": "2005-12-22T23:58:16.000+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Cool. I'll check the patch in tonight. \n\nOleg",
            "date": "2005-12-23T00:00:12.000+0000",
            "id": 7
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in\n\nOleg",
            "date": "2005-12-23T06:33:56.000+0000",
            "id": 8
        },
        {
            "author": "Tommy Menheere",
            "body": "The patches do not solve the problem. I tried with the most recent nightly build\nof HttpClient. No luck. The process of getting from an URI to a HttpHost loses\nthe credentials.\n\nI've tried patching it myself, but this patch has a lot of impact.",
            "date": "2006-03-21T21:39:45.000+0000",
            "id": 9
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I just reviewed the patch and as far as I can tell everything appears sane.\nMoreover, there is a unit test that tests the fix. The burden of producing a\nproof to the contrary rests with you. Please reopen the bug _only_ if you can\nprovide a test case that reliably reproduces the problem against SVN trunk\n\nOleg",
            "date": "2006-03-21T21:56:14.000+0000",
            "id": 10
        },
        {
            "author": "Tommy Menheere",
            "body": "Created an attachment (id=17935)\nTest classto show the problem still exists.\n",
            "date": "2006-03-22T17:26:24.000+0000",
            "id": 11
        },
        {
            "author": "Tommy Menheere",
            "body": "I've attached a test class to demonstrate the bug. You'd need a Isa proxy to\ntest it.",
            "date": "2006-03-22T17:27:12.000+0000",
            "id": 12
        },
        {
            "author": "Tommy Menheere",
            "body": "Oleg, I've created a patch using the code from svn. I can e-mail this to you, or\nattach this to this bug. ",
            "date": "2006-03-22T17:32:06.000+0000",
            "id": 13
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Tommy,\n\nThis is not a JUnit test. Plus it requires external servers. Please submit a\nJUnit test case that does not rely on external servers and does some proper\nassertions that show the problem.\n\nOrtwin Gl\u00fcck\n\nps. Yes, patches should always be attached to Buzilla issues and not be emailed\nto individual people.\n\n",
            "date": "2006-03-22T18:09:23.000+0000",
            "id": 14
        },
        {
            "author": "Tommy Menheere",
            "body": "Created an attachment (id=17936)\nTest to show the error\n\nThis is a junit test to demonstrate the problem. As you can see, the\ncredentials are lost when constructing a Method.",
            "date": "2006-03-22T18:27:16.000+0000",
            "id": 15
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #16)\n> Created an attachment (id=17936) [edit]\n> Test to show the error\n> \n> This is a junit test to demonstrate the problem. As you can see, the\n> credentials are lost when constructing a Method.\n\nThis is what I pretty much expected. HttpURL is a special case and is expected\nto discard username / password from the request URI because HTTP spec requires\nuser credentials to be passed in the HTTP message header. \n\nUse URI class instead.\n\nOleg",
            "date": "2006-03-22T18:40:13.000+0000",
            "id": 16
        },
        {
            "author": "Tommy Menheere",
            "body": "Created an attachment (id=17937)\njunit test\n\nUsing URI class does not fix the problem. The test still fails.\n\nThis test only tests a side effect, since the real problem lies with\nHttpHost.getHostName(). This method should return the authority in this\nsituation.",
            "date": "2006-03-22T18:49:49.000+0000",
            "id": 17
        },
        {
            "author": "Tommy Menheere",
            "body": "Created an attachment (id=17938)\nnew junit test to show the 'error' in HttpHost\n\nin reaction to myself...",
            "date": "2006-03-22T18:57:49.000+0000",
            "id": 18
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Tommy(In reply to comment #18)\n> Created an attachment (id=17937) [edit]\n> junit test\n> \n> Using URI class does not fix the problem. The test still fails.\n> \n> This test only tests a side effect, since the real problem lies with\n> HttpHost.getHostName(). This method should return the authority in this\n> situation.\n\nNo, it should not. HttpClient is not supposed to implement FTP specific concerns. \n\nFeel free to extend the standard GetMethod class and override the default\nbehaviour of the #writeRequestLine() method the way we deem appropriate for your\nspecific application.\n\nOleg\n\n",
            "date": "2006-03-22T21:11:27.000+0000",
            "id": 19
        },
        {
            "author": "Tommy Menheere",
            "body": "Created an attachment (id=17942)\npatch to add authority to httphost\n\n> No, it should not. HttpClient is not supposed to implement FTP specific\nconcerns. \n> \n> Feel free to extend the standard GetMethod class and override the default\n> behaviour of the #writeRequestLine() method the way we deem appropriate for\nyour\n> specific application.\n> \n> Oleg\n\nThanks for you reaction, but I tend to disagree. This is not ftp specific, but\nhost specific (i.e. the host to connect to). Besides, by registering another\nprotocol with Protocol.registerProtocol(...) it is already possible to use\nnon-http-like protocols.\n\nThe authority is a part of a host (in this case a httphost using the ftp\nprotocol), just the same as it is a part of the URL. This patch adds the\nauthority to the HttpHost.\n\nI think that the following HTTP requestline is valid:\nGET http://user:pass@host/file.html HTTP/1.1\n\nTherefore I think the following should be valid too:\nGET ftp://user:pass@host/file.html HTTP/1.1\n\nI hope you can see my point. If not, at least I have a patch locally.\n",
            "date": "2006-03-22T21:56:14.000+0000",
            "id": 20
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #21)\n\n Besides, by registering another\n> protocol with Protocol.registerProtocol(...) it is already possible to use\n> non-http-like protocols.\n> \n\nAbility to register a protocol socket factory does not in any way imply support\nfor that protocol.\n\n> The authority is a part of a host (in this case a httphost using the ftp\n> protocol), just the same as it is a part of the URL. This patch adds the\n> authority to the HttpHost.\n> \n> I think that the following HTTP requestline is valid:\n> GET http://user:pass@host/file.html HTTP/1.1\n>\n\nI do not think this is the case. RFC2617 clearly defines the way to transmit\nuser credentials with HTTP messages.\n\nOleg",
            "date": "2006-03-22T23:30:52.000+0000",
            "id": 21
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "GET http://user:pass@host/file.html HTTP/1.1\n\nprobably is a valid request (at least it works with Apache HTTPD and IIS 6) but\nI guess the server will just discard the credentials.\n\nAnyway, I don't think we should sent such request lines by default as it is\nlikely that simple servers will choke on them.\n\n\nI just tried:\n-----------\nGET http://user:pass@host/ HTTP/1.1\nHost: www.microsoft.com\n\nHTTP/1.1 200 OK\nDate: Wed, 22 Mar 2006 15:36:47 GMT\nServer: Microsoft-IIS/6.0\nP3P: CP=\"ALL IND DSP COR ADM CONo CUR CUSo IVAo IVDo PSA PSD TAINT COM INT NAV\nONL PHY PRE PUR UNI\"\nX-Powered-By: ASP.NET\nX-AspNet-Version: 2.0.50727\nCache-Control: private\nContent-Type: text/html; charset=utf-8\nContent-Length: 21907\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" >",
            "date": "2006-03-22T23:37:58.000+0000",
            "id": 22
        },
        {
            "author": "Tommy Menheere",
            "body": "> I do not think this is the case. RFC2617 clearly defines the way to transmit\n> user credentials with HTTP messages.\n> \n> Oleg\n\nI am aware of the fact taht this is a rare case where a http-proxy is used to\nexecute commands on an FTP server. There is a thread about this on the user-list\nwhere it is established that this is corretc use of http.\n\nhttp://mail-archives.apache.org/mod_mbox/jakarta-httpclient-user/200512.mbox/browser\n(ftp via http, 21 dec 2005).\n\nClients like Internet Explorer, Mozilla Firefox and even Total Commander support\nthis mechanism of accessing an FTP site via a HTTP proxy. The well-known proxy\nSquid also supports this type of FTP proxying, see\nhttp://www.squid-cache.org/Doc/FAQ/FAQ-5.html#ss5.9 .\n\nIt would be nice to see this sort of functionality in HttpClient.\n",
            "date": "2006-03-23T01:17:20.000+0000",
            "id": 23
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #23)\n> GET http://user:pass@host/file.html HTTP/1.1\n> \n> probably is a valid request (at least it works with Apache HTTPD and IIS 6) but\n\nThe fact that both Apache HTTPD and MS IIS do not choke on it does not make the\nrequest valid. See:\n\nRFC2616\n=======\n5.1.2 Request-URI\n...\n   The most common form of Request-URI is that used to identify a\n   resource on an origin server or gateway. In this case the absolute\n   path of the URI MUST be transmitted (see section 3.2.1, abs_path) as\n   the Request-URI, and the network location of the URI (authority) MUST\n   be transmitted in a Host header field. For example, a client wishing\n   to retrieve the resource above directly from the origin server would\n   create a TCP connection to port 80 of the host \"www.w3.org\" and send\n   the lines:\n\n       GET /pub/WWW/TheProject.html HTTP/1.1\n       Host: www.w3.org\n\nOleg\n",
            "date": "2006-03-23T01:27:55.000+0000",
            "id": 24
        },
        {
            "author": "Tommy Menheere",
            "body": "> The fact that both Apache HTTPD and MS IIS do not choke on it does not make the\n> request valid. See:\n> \n> RFC2616\n> =======\n> 5.1.2 Request-URI\n> ...\n>    The most common form of Request-URI is that used to identify a\n>    resource on an origin server or gateway. In this case the absolute\n>    path of the URI MUST be transmitted (see section 3.2.1, abs_path) as\n>    the Request-URI, and the network location of the URI (authority) MUST\n>    be transmitted in a Host header field. For example, a client wishing\n>    to retrieve the resource above directly from the origin server would\n>    create a TCP connection to port 80 of the host \"www.w3.org\" and send\n>    the lines:\n> \n>        GET /pub/WWW/TheProject.html HTTP/1.1\n>        Host: www.w3.org\n> \n> Oleg\n\nI see that it is not according to the RFC. However, since it is a common way to access, for instance, an \nFTP site ia a HTTP-proxy (such as Squid or ISA), I'd say that this is still inconvenient that this method is \nnot supported by httpclient.\n\nPerhaps it should not be default behaviour, but it would be nice to have an option to enable this \nfeature. Do you think that would be an option? I can make a patch for this, after we decide which \nmethod to use to activate this behaviour.\n\nWhat is your opinion on this approach?\n",
            "date": "2006-03-23T04:36:17.000+0000",
            "id": 25
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #26)\n... \n> What is your opinion on this approach?\n> \n\nTommy,\n\nUnfortunately I do not see even a half-decent solution to this problem and I do\nnot think this particular issue warrants an ugly hack. HttpClient 3.x code is\nalready full of all sorts of ugly hacks and I am sick and tired of maintaining\nthem. \n\nThe next version of HttpClient will be based on a completely new API and this\nparticular problem will no longer be relevant. \n\nOleg \n",
            "date": "2006-03-23T04:54:47.000+0000",
            "id": 26
        },
        {
            "author": "Tommy Menheere",
            "body": "> 5.1.2 Request-URI\n> ...\n>    The most common form of Request-URI is that used to identify a\n>    resource on an origin server or gateway. In this case the absolute\n>    path of the URI MUST be transmitted (see section 3.2.1, abs_path) as\n>    the Request-URI, and the network location of the URI (authority) MUST\n>    be transmitted in a Host header field. For example, a client wishing\n>    to retrieve the resource above directly from the origin server would\n>    create a TCP connection to port 80 of the host \"www.w3.org\" and send\n>    the lines:\n> \n>        GET /pub/WWW/TheProject.html HTTP/1.1\n>        Host: www.w3.org\n> \n> Oleg\n\n\nOleg,\n\nThis is not really the case here. The credentials in the URL are NOT for the proxy server, but for the FTP \nserver. The credentials for the proxy server are sent via HTTP-Headers. When requesting a document \non a site via a proxy, the absolute URI should be used, i.e. a URI WITH credentials. See 5.1.2 of \nRFC2616:\n\n5.1.2 Request-URI\n\n   The Request-URI is a Uniform Resource Identifier (section 3.2) and\n   identifies the resource upon which to apply the request.\n\n       Request-URI    = \"*\" | absoluteURI | abs_path | authority\n\n   The four options for Request-URI are dependent on the nature of the\n   request. The asterisk \"*\" means that the request does not apply to a\n   particular resource, but to the server itself, and is only allowed\n   when the method used does not necessarily apply to a resource. One\n   example would be\n\n       OPTIONS * HTTP/1.1\n\n   The absoluteURI form is REQUIRED when the request is being made to a\n   proxy. The proxy is requested to forward the request or service it\n   from a valid cache, and return the response. Note that the proxy MAY\n   forward the request on to another proxy or directly to the server\n\n\n   specified by the absoluteURI. In order to avoid request loops, a\n   proxy MUST be able to recognize all of its server names, including\n   any aliases, local variations, and the numeric IP address. An example\n   Request-Line would be:\n\n       GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1\n\n   To allow for transition to absoluteURIs in all requests in future\n   versions of HTTP, all HTTP/1.1 servers MUST accept the absoluteURI\n   form in requests, even though HTTP/1.1 clients will only generate\n   them in requests to proxies.\n\nThe absolute URI is defined in RFC 2369, see 3.2.1 in RFC2616:\n\n3.2.1 General Syntax\n\n   URIs in HTTP can be represented in absolute form or relative to some\n   known base URI [11], depending upon the context of their use. The two\n   forms are differentiated by the fact that absolute URIs always begin\n   with a scheme name followed by a colon. For definitive information on\n   URL syntax and semantics, see \"Uniform Resource Identifiers (URI):\n   Generic Syntax and Semantics,\" RFC 2396 [42] (which replaces RFCs\n   1738 [4] and RFC 1808 [11]). This specification adopts the\n   definitions of \"URI-reference\", \"absoluteURI\", \"relativeURI\", \"port\",\n   \"host\",\"abs_path\", \"rel_path\", and \"authority\" from that\n   specification.\n\n   The HTTP protocol does not place any a priori limit on the length of\n   a URI. Servers MUST be able to handle the URI of any resource they\n   serve, and SHOULD be able to handle URIs of unbounded length if they\n   provide GET-based forms that could generate such URIs. A server\n   SHOULD return 414 (Request-URI Too Long) status if a URI is longer\n   than the server can handle (see section 10.4.15).\n\n      Note: Servers ought to be cautious about depending on URI lengths\n      above 255 bytes, because some older client or proxy\n      implementations might not properly support these lengths.\n\nThe absoluteURI is defined in RFC 2396 as follows:\n\n3. URI Syntactic Components\n\n   The URI syntax is dependent upon the scheme.  In general, absolute\n   URI are written as follows:\n\n      <scheme>:<scheme-specific-part>\n\n   An absolute URI contains the name of the scheme being used (<scheme>)\n   followed by a colon (\":\") and then a string (the <scheme-specific-\n   part>) whose interpretation depends on the scheme.\n\n   The URI syntax does not require that the scheme-specific-part have\n   any general structure or set of semantics which is common among all\n   URI.  However, a subset of URI do share a common syntax for\n   representing hierarchical relationships within the namespace.  This\n   \"generic URI\" syntax consists of a sequence of four main components:\n\n      <scheme>://<authority><path>?<query>\n\n   each of which, except <scheme>, may be absent from a particular URI.\n   For example, some URI schemes do not allow an <authority> component,\n   and others do not use a <query> component.\n\n      absoluteURI   = scheme \":\" ( hier_part | opaque_part )\n\n   URI that are hierarchical in nature use the slash \"/\" character for\n   separating hierarchical components.  For some file systems, a \"/\"\n   character (used to denote the hierarchical structure of a URI) is the\n   delimiter used to construct a file name hierarchy, and thus the URI\n   path will look similar to a file pathname.  This does NOT imply that\n   the resource is a file or that the URI maps to an actual filesystem\n   pathname.\n\n      hier_part     = ( net_path | abs_path ) [ \"?\" query ]\n\n      net_path      = \"//\" authority [ abs_path ]\n\n      abs_path      = \"/\"  path_segments\n\nIn section 3.2 of RFC2396 teh athority compnent is specified. It's a bit too long to post now, ut you can \nfind it here: http://rfc.net/rfc2396.html#s3.2.\n\n***\n\nHowever, I do share your opinion that the whole HttpClient 3.0 code is quite old and full of hacks. I \nhope that this feature will be implemented in future versions using the new API of which you speak.\n\nTommy\n",
            "date": "2006-03-23T06:47:07.000+0000",
            "id": 27
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #28)\n...\n> Oleg,\n> \n> This is not really the case here. The credentials in the URL are NOT for the\nproxy server, but for the FTP \n> server. \n\nThat had nothing to do with FTP urls. My point is that contrary to your\ncontention the url below is invalid\n\nGET http://user:pass@host/file.html HTTP/1.1\n\n----------------------------\n3.2.2 http URL\n\n   The \"http\" scheme is used to locate network resources via the HTTP\n   protocol. This section defines the scheme-specific syntax and\n   semantics for http URLs.\n\n   http_URL = \"http:\" \"//\" host [ \":\" port ] [ abs_path [ \"?\" query ]]\n-----------------------------\n\nSupport for non-HTTP protocols in HttpClient is a whole different story\n\nOleg",
            "date": "2006-03-23T16:57:04.000+0000",
            "id": 28
        },
        {
            "author": "Tommy Menheere",
            "body": "> That had nothing to do with FTP urls. My point is that contrary to your\n> contention the url below is invalid\n> \n> GET http://user:pass@host/file.html HTTP/1.1\n> \n> ----------------------------\n> 3.2.2 http URL\n> \n>    The \"http\" scheme is used to locate network resources via the HTTP\n>    protocol. This section defines the scheme-specific syntax and\n>    semantics for http URLs.\n> \n>    http_URL = \"http:\" \"//\" host [ \":\" port ] [ abs_path [ \"?\" query ]]\n> -----------------------------\n> \n> Support for non-HTTP protocols in HttpClient is a whole different story\n> \n> Oleg\n\nHello Oleg,\n\nFirst thanks for your time to reply to my messages. I still believe that \"GET\nhttp://user:pass@host/file.html HTTP/1.1\" is a valid request line (according to\n5.1.2, since the URI is an absoluteURI). In this context it is not used to\ndirectly access a resource on the server, but on a resource behind the server.\n\nMy interpretation of the section you cite is for accessing http resources\nlocated on the server. Section 5.2.1, where I referred to, is a superset to be\nused to access any resource anywhere on the network, directly on the server OR\nbehind the server (with the server acting as a proxy).\n\nNonetheless, I had the impression that HttpClient 3.0 fully implemented RFC2616.\nIn this situation, we van conclude that this is not the case.\n\nHttpClient is not capable of issuing the following HTTP request \"GET\nftp://user:pass@host/ HTTP/1.1\" despite the fact that this is valid according to\nRFC2616.\n\nYou speak of different protocols, but the request \"GET\nftp://user:pass@host/file\" is valid HTTP. The FTP protocol is never used, this\nis left to the proxy accepting the request. This proxy should issue a FTP\nrequest to the FTP site. In our clinet, we do nothing with FTP directly, we only\nuse ftp:// in the request to the HTTP proxy.\n\nI hope you see my point.\n\nTommy\n",
            "date": "2006-03-23T18:32:09.000+0000",
            "id": 29
        },
        {
            "author": "Roland Weber",
            "body": "Hello Tommy,\n\n> HttpClient is not capable of issuing the following HTTP request \"GET\n> ftp://user:pass@host/ HTTP/1.1\" despite the fact that this is valid\n> according to RFC2616.\n\nThis bug was opened because a user could not send this kind of request.\nIt was closed because the same user confirmed that is is now possible,\nsee comment #7.\n\nYour test uses the String constructor of GetMethod from uri.toString().\nIf you pass your string directly into the constructor instead of first\nputting it into a URI and then creating a new string, it should work.\nIt should also work if you set the uri with the HttpMethod.setURI(...)\nmethod instead of calling uri.toString() for the String constructor.\nThat gives you at least two options to achieve the desired result.\n\ncheers,\n  Roland\n ",
            "date": "2006-03-23T19:02:08.000+0000",
            "id": 30
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #30)\n> > That had nothing to do with FTP urls. My point is that contrary to your\n> > contention the url below is invalid\n> > \n> > GET http://user:pass@host/file.html HTTP/1.1\n> > \n> > ----------------------------\n> > 3.2.2 http URL\n> > \n> >    The \"http\" scheme is used to locate network resources via the HTTP\n> >    protocol. This section defines the scheme-specific syntax and\n> >    semantics for http URLs.\n> > \n> >    http_URL = \"http:\" \"//\" host [ \":\" port ] [ abs_path [ \"?\" query ]]\n> > -----------------------------\n> > \n> > Support for non-HTTP protocols in HttpClient is a whole different story\n> > \n> > Oleg\n> \n> Hello Oleg,\n> \n> First thanks for your time to reply to my messages. I still believe that \"GET\n> http://user:pass@host/file.html HTTP/1.1\" is a valid request line (according to\n> 5.1.2, since the URI is an absoluteURI). \n\nTommy,\n\nYou are entitled to have a special opinion on the subject like anyone else. As\nfar as I am concerend the rules for valid HTTP urls are clearly laid out in the\nsection 3.2.2 of the spec and HttpClient is compliant with it. \n\n> Nonetheless, I had the impression that HttpClient 3.0 fully implemented RFC2616.\n> In this situation, we van conclude that this is not the case.\n>\n\nHttpClient is not a browser and it has never been meant to implement the full spec.\n \n>\n> HttpClient is not capable of issuing the following HTTP request \"GET\n> ftp://user:pass@host/ HTTP/1.1\" despite the fact that this is valid according to\n> RFC2616.\n> \n> You speak of different protocols, but the request \"GET\n> ftp://user:pass@host/file\" is valid HTTP. The FTP protocol is never used, this\n> is left to the proxy accepting the request. This proxy should issue a FTP\n> request to the FTP site. In our clinet, we do nothing with FTP directly, we only\n> use ftp:// in the request to the HTTP proxy.\n> \n> I hope you see my point.\n> \n\nFeel free to open a new feature request\n\nOleg",
            "date": "2006-03-23T19:13:07.000+0000",
            "id": 31
        },
        {
            "author": "Tommy Menheere",
            "body": "> Hello Tommy,\n> \n> > HttpClient is not capable of issuing the following HTTP request \"GET\n> > ftp://user:pass@host/ HTTP/1.1\" despite the fact that this is valid\n> > according to RFC2616.\n> \n> This bug was opened because a user could not send this kind of request.\n> It was closed because the same user confirmed that is is now possible,\n> see comment #7.\n> \n> Your test uses the String constructor of GetMethod from uri.toString().\n> If you pass your string directly into the constructor instead of first\n> putting it into a URI and then creating a new string, it should work.\n> It should also work if you set the uri with the HttpMethod.setURI(...)\n> method instead of calling uri.toString() for the String constructor.\n> That gives you at least two options to achieve the desired result.\n> \n> cheers,\n>   Roland\n\nHello Roland,\n\nThanks for your reply. Teh fact that the test is constructed this way is to show\nthat the credentials are really lost when converting to/from URI's. \n\nBesides, the real issue is the fact that HttpMethod#generateRequestLine()\ndoesn't place a complete absoluteURI as defined in RFC 2616 sec 5.1.2.  This in\nturn is because the HttpHost doesn't contain an authority, although it should\ncreate one, when an absloluteURI is requested via a Proxy.\n\nRegards,\n\nTommy\n\n\n",
            "date": "2006-03-23T19:22:50.000+0000",
            "id": 32
        }
    ],
    "component": "HttpClient (classic)",
    "description": "I tested this using firefox (Where I have configured our proxy server)\nI run the following URI: ftp://username:password@ftp.mytest.test/testdir/\n\nI use a sniffer to look at the GET commond send to the proxy server. It looks as\nfollows:\n\nGET ftp://username:password@ftp.mytest.test/testdir/ HTTP/1.1\nHost: ftp.mytest.test\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7.12)\nGecko/20050915 Firefox/1.0.7\nAccept:\ntext/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip,deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nKeep-Alive: 300\nProxy-Connection: keep-alive\n\nUsing this request we get access to the directory and see the contents displayed.\nHowever, when I try the same in Java (using HttpClient) I get the following GET\nrequest (Java code included below):\n\nGET ftp://ftp.mytest.test/testdir/ HTTP/1.1\nUser-Agent: Jakarta Commons-HttpClient/3.0-rc3\nHost: ftp.mytest.test\nProxy-Connection: Keep-Alive\n\nFinally I get a ACCESS DENIED error. \nThis seems to be because the GET request does not contain the USER / PASSWORD\ninfo in the URL.\n\n/// JAVA CODE:\n\npackage nl.essent.test.ftp.httptest;\n\nimport java.io.IOException;\n\nimport org.apache.commons.httpclient.Credentials;\nimport org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;\nimport org.apache.commons.httpclient.HostConfiguration;\nimport org.apache.commons.httpclient.HttpClient;\nimport org.apache.commons.httpclient.HttpException;\nimport org.apache.commons.httpclient.HttpMethod;\nimport org.apache.commons.httpclient.HttpStatus;\nimport org.apache.commons.httpclient.NTCredentials;\nimport org.apache.commons.httpclient.UsernamePasswordCredentials;\nimport org.apache.commons.httpclient.auth.AuthScope;\nimport org.apache.commons.httpclient.methods.GetMethod;\nimport org.apache.commons.httpclient.params.HttpMethodParams;\nimport org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory;\nimport org.apache.commons.httpclient.protocol.Protocol;\n\npublic class TestClient {\n\n    public static void main(String[] args) {\n        new TestClient().testFtpViaHttp();\n    }\n    \n    public void testFtpViaHttp() {\n        \n        HttpClient client = new HttpClient();\n        \n        HostConfiguration hostConfig = client.getHostConfiguration();\n        hostConfig.setProxy(\"proxy\", 8080);\n        client.setHostConfiguration(hostConfig);\n        \n        Protocol protol = new Protocol(\"ftp\", new\nDefaultProtocolSocketFactory(), 21);\n        Protocol.registerProtocol(\"ftp\", protol);\n        \n        Credentials proxyCreds = new NTCredentials(\"xxxx\", \"xxxxx\",\"\", \"xxxx\" );\n        client.getState().setProxyCredentials(AuthScope.ANY, proxyCreds);\n        \n        GetMethod gmethod = new\nGetMethod(\"ftp://username:password@ftp.mytest.test/testdir/\");\n        \n        gmethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, \n                new DefaultHttpMethodRetryHandler(3, false));\n       \n        try {\n            // Execute the method.\n            int statusCode = client.executeMethod(gmethod);\n\n            if (statusCode != HttpStatus.SC_OK) {\n              System.err.println(\"Method failed: \" + gmethod.getStatusLine());\n            }\n\n            // Read the response body.\n            byte[] responseBody = gmethod.getResponseBody();\n\n            // Deal with the response.\n            // Use caution: ensure correct character encoding and is not binary data\n            System.out.println(new String(responseBody));\n\n          } catch (HttpException e) {\n            System.err.println(\"Fatal protocol violation: \" + e.getMessage());\n            e.printStackTrace();\n          } catch (IOException e) {\n            System.err.println(\"Fatal transport error: \" + e.getMessage());\n            e.printStackTrace();\n          } finally {\n            // Release the connection.\n            gmethod.releaseConnection();\n          } \n\n    }\n\n}\n\n//// END JAVA CODE",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-539",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "UserInfo disapears after creating URI",
    "systemSpecification": true,
    "version": "3.0 Final"
}