{
    "comments": [
        {
            "author": "Michael Becke",
            "body": "Hi Gary,\n\nThe default timeout of zero does seem reasonable to me.  The MultiThreadedHttpConnectionManager \nmanages a pool of connections and requests that call getConnection() without a timeout wait until one is \navailable.  Threads will only block \"forever\"  if the acquired connections are never returned.  If \nHttpMethod.releaseConnection() is called for all requests this will never be an issue.\n\nI'm going to mark this one as invalid.  Please feel free to reopen it if you can make a strong case for \nchanging the default behavior.\n\nMike",
            "date": "2005-07-31T11:07:50.000+0000",
            "id": 0
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "I share Mike's oppinion. Moreover, every OS on this planet will eventually shut\ndown a connection that never ACKs a SYN. Just to save on resources. It may take\nquite long (platform dependent) though. But the socket will not hang forever.\n\nOrtwin Gl\u00fcck",
            "date": "2005-08-01T20:26:02.000+0000",
            "id": 1
        },
        {
            "author": "garry hill",
            "body": "\nhey there.\n\nok. i think i'm getting a handle on this and maybe there is a more serious problem lurking in the code... \ni might be wrong but bear with me.\n\nthe situation seems to be this:\n\ni'm repeatedly connecting to the same server using a multi threaded connection manager which, \nhowever, is only managing a single thread.\n\nbut, the server, or my connection, is unstable and goes down.\n\nhere's the tail of the log from the session in question:\n\n=====================\n...\n07/30 01:18:12 DEBUG HttpMethodBase [5948 http://humboldt.craigslist.org:80/sfo/eby/  3] - enter \nHttpMethodBase.readResponseBody(HttpConnection)\n07/30 01:18:12 DEBUG HttpConnection [5948 http://humboldt.craigslist.org:80/sfo/eby/  3] - enter \nHttpConnection.getResponseInputStream()\n07/30 01:18:12 DEBUG HttpMethodBase [5948 http://humboldt.craigslist.org:80/sfo/eby/  3] - enter \nHttpMethodBase.canResponseHaveBody(int)\n07/30 01:18:12 DEBUG HttpConnection [5948 http://humboldt.craigslist.org:80/sfo/eby/  3] - enter \nHttpConnection.close()\n07/30 01:18:12 DEBUG HttpConnection [5948 http://humboldt.craigslist.org:80/sfo/eby/  3] - enter \nHttpConnection.closeSockedAndStreams()\n07/30 01:18:12 DEBUG HttpMethodBase [5948 http://humboldt.craigslist.org:80/sfo/eby/  3] - \nResorting to protocol version default close connection policy\n07/30 01:18:12 DEBUG HttpMethodBase [5948 http://humboldt.craigslist.org:80/sfo/eby/  3] - Should \nNOT close connection, using HTTP/1.1\n07/30 01:18:12 DEBUG HttpConnection [5948 http://humboldt.craigslist.org:80/sfo/eby/  3] - enter \nHttpConnection.isResponseAvailable()\n07/30 01:18:14 DEBUG GetMethod [5948 http://humboldt.craigslist.org:80/sfo/eby/mis/  3] - enter \nGetMethod(String)\n07/30 01:18:14 DEBUG HttpMethodBase [5948 http://humboldt.craigslist.org:80/sfo/eby/mis/  3] - \nHttpMethodBase.addRequestHeader(Header)\n07/30 01:18:14 DEBUG HttpClient [5948 http://humboldt.craigslist.org:80/sfo/eby/mis/  3] - enter \nHttpClient.executeMethod(HttpMethod)\n07/30 01:18:14 DEBUG HttpClient [5948 http://humboldt.craigslist.org:80/sfo/eby/mis/  3] - enter \nHttpClient.executeMethod(HostConfiguration,HttpMethod,HttpState)\n07/30 01:18:14 DEBUG MultiThreadedHttpConnectionManager [5948 http://humboldt.craigslist.org:\n80/sfo/eby/mis/  3] - enter HttpConnectionManager.getConnectionWithTimeout(HostConfiguration, \nlong)\n07/30 01:18:14 DEBUG MultiThreadedHttpConnectionManager [5948 http://humboldt.craigslist.org:\n80/sfo/eby/mis/  3] - HttpConnectionManager.getConnection:  config = HostConfiguration\n[host=http://humboldt.craigslist.org], timeout = 0\n07/30 01:18:14 DEBUG MultiThreadedHttpConnectionManager [5948 http://humboldt.craigslist.org:\n80/sfo/eby/mis/  3] - enter HttpConnectionManager.ConnectionPool.getHostPool(HostConfiguration)\n07/30 01:18:14 DEBUG MultiThreadedHttpConnectionManager [5948 http://humboldt.craigslist.org:\n80/sfo/eby/mis/  3] - Unable to get a connection, waiting..., hostConfig=HostConfiguration\n[host=http://humboldt.craigslist.org]\n=========================\n(that's where it hung)\n\nI think the key is that the connection manager is only handing one thread. your assumption is that \neventually there'll be another open connection that closes and notifies() the connection manager so that \nit stops waiting. but what if there aren't any other running threads? there's nothing waiting for an ACK \nsince our only connecting thread is stopped in Thread.wait(0)... so what's going to pop us out of the \nwait?\n\nNow,  my understanding is fuzzy, especially the effect of the loss of internet connectivity on the \nconnection manager that's running as HTTP 1.1 and not closing connections, but i think there's a \ngenuine deadlock situation with this edge condition of a MultiThreaded...ConnectionManager that's \nonly running one thread.\n\nMaybe your answer will be simply \"don't use MultiThreaded...ConnectionManager if you only want to \nrun one thread\" ;)\n\nI'm tempted to REOPEN this but i think i'll leave that as your call... i feel like a salmon in a barrel.\n\ncheers,\ngarry",
            "date": "2005-08-01T23:13:57.000+0000",
            "id": 2
        },
        {
            "author": "garry hill",
            "body": "\nP.S. I should have added that this was consistently happening on two platforms, linux and mac. It wasn't \njust a one off, it was every time. It took varying amounts of time to happen, but it always happened and \nthe machine sat there for hours. I have a controller thread that asks for checkpoints every ten minutes and \nall my logs showed were about 20-30 of these checkpoint requests falling on deaf ears. If threads have \nears of course.\n\ng",
            "date": "2005-08-01T23:24:16.000+0000",
            "id": 3
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Garry,\n\nThe MTCM manages one connection pool per host config. There is a limit of\nsimultaneous connections to a certain host which by default is something like 2\n(as recommended by RFC-2616). So if the MTCM has handed out the 2 connections\nthe next call to getConnection will block until one of the connections is handed\nback to the connection manager. Of course this will never happen if you never\ncall releaseConnection on the method. So it is vitally important that the\nreleaseConnection call is in a finally clause. Please check your code for\nommissions of that.\n\nOrtwin Gl\u00fcck",
            "date": "2005-08-01T23:45:00.000+0000",
            "id": 4
        },
        {
            "author": "garry hill",
            "body": "(In reply to comment #5)\n\n> So it is vitally important that the\n> releaseConnection call is in a finally clause. Please check your code for\n> ommissions of that.\n\nYes, all method calls have their corresponding finally { method.releaseConnection(); } calls.\n\nI have my MTCM configured to just one connection per host, since that's all i need.\n\nWe're talking about code that runs fine for hours and hours but then, inevitably, hangs in that wait(0) \nmethod. Well, maybe not \"inevitably\", but certainly whenever there's any kind of instability in the \nconnection to the internet, which in my case seems to be inevitable.\n\nHmm, but looking at the trace, that last page <http://humboldt.craigslist.org:80/sfo/eby/> leads you \nto a infinite redirect (blinking '/' <-> '//'). Could that be affecting the way the connection is closed? \n\nI see your point, my trace shows no call to HttpConnection.releaseConnection() but i can promise you \nthat i've got a call to it (via the method) in my finally block.\n\n",
            "date": "2005-08-02T00:29:15.000+0000",
            "id": 5
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "An infinite redirect would certainly keep your only connection open forever and\nkeep it from being returned to the pool. There is an option to limit the maximum\nnumber of redirects and to allow circular redirects. Normally circular redirects\nare not allowed and lead to an exception. If you did not change any parameters\nthen a circular redirect should not happen. If you have used the finally clause\ncorrectly your connection will be returned to the pool and there is no problem.\nWithout seeing the code I can not tell more...\n\nThe two options are controlled like this:\n\nHttpClient client = new HttpClient(mtcm);\nclient.getParams().setParameter(\"http.protocol.max-redirects\", new Integer(10));\nclient.getParams().setParameter(\"http.protocol.allow-circular-redirects\",\nBoolean.FALSE);",
            "date": "2005-08-02T00:58:03.000+0000",
            "id": 6
        },
        {
            "author": "garry hill",
            "body": "(In reply to comment #7)\n> An infinite redirect would certainly keep your only connection open forever and\n> keep it from being returned to the pool. There is an option to limit the maximum\n> number of redirects and to allow circular redirects. \n\nthe default config limits you to 100 redirects in total, circular or not. i left it at this and the trace shows \nthat it does indeed give up after 100 - so no \"infinite loop\" that was stopping the connection being \nreleased.\n\nand my releaseConnections() ARE IN A FINALLY BLOCK, just in case that comes up again.",
            "date": "2005-08-05T04:35:34.000+0000",
            "id": 7
        },
        {
            "author": "garry hill",
            "body": "\nok, i have an update.\n\nthe problem seems to be that the method gets into an illegal state and instead of properly releasing the \nconnection back to the pool, throws this instead:\n\njava.lang.IllegalStateException: Connection is not open\n        at org.apache.commons.httpclient.HttpConnection.assertOpen(HttpConnection.java:1269)\n        at org.apache.commons.httpclient.HttpConnection.isResponseAvailable(HttpConnection.java:872)\n        at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager\n$HttpConnectionAdapter.isResponseAvailable(MultiThreadedHttpConnectionManager.java:1307)\n        at org.apache.commons.httpclient.HttpMethodBase.responseBodyConsumed(HttpMethodBase.java:\n2272)\n        at org.apache.commons.httpclient.HttpMethodBase$1.responseConsumed(HttpMethodBase.java:\n1755)\n        at org.apache.commons.httpclient.AutoCloseInputStream.notifyWatcher\n(AutoCloseInputStream.java:180)\n        at org.apache.commons.httpclient.AutoCloseInputStream.close(AutoCloseInputStream.java:140)\n        at org.apache.commons.httpclient.HttpMethodBase.releaseConnection(HttpMethodBase.java:1086)\n...\n\nthis i think, as i've said before, comes about as a result of an unstable connection - no idea if that's at \nmy end or the server end.\n\nthis is the situation that gives you the hang: the last method didn't close/release properly and so on the \nnext call to MTCM.getConnection() just wait()s forever. \n\nunfortunately i turned off the trace of the httpclient just hours before this happened, ain't that always \nthe way.\n\nhope this helps to clarify the issue.\n\ncheers,\n\ngarry",
            "date": "2005-08-05T04:40:36.000+0000",
            "id": 8
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Garry, I guess you dug up a dead body. Thanks a lot!",
            "date": "2005-08-05T06:51:21.000+0000",
            "id": 9
        },
        {
            "author": "garry hill",
            "body": "(In reply to comment #10)\n\n> Garry, I guess you dug up a dead body. \n\ni knew something smelled rotten.\n\n> Thanks a lot!\n\ni'm assuming you're not being sarcastic - in which case: a pleasure. good luck fixing it...\n\ncheers,\ng",
            "date": "2005-08-05T10:51:07.000+0000",
            "id": 10
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=15900)\nPatch (take1)\n\nFolks, please review and let me know what you think.\n\nOleg",
            "date": "2005-08-05T18:03:36.000+0000",
            "id": 11
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Oleg,\n\nYou have changed the contract of isResponseAvailable(): no exception thrown any\nmore. Is this change necessary? If yes, please change the Javadocs as well.\n\nOdi",
            "date": "2005-08-05T18:59:01.000+0000",
            "id": 12
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=15901)\nPatch (take2)\n\nAll right. How about this?\n\nOleg",
            "date": "2005-08-05T19:09:57.000+0000",
            "id": 13
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "I like this one better.",
            "date": "2005-08-05T19:22:19.000+0000",
            "id": 14
        },
        {
            "author": "Michael Becke",
            "body": "It looks pretty good.  My only concern is with the potential performance penalty\nof adding another call to isOpen().  Is there any way to do this without testing\nif the connection is open?\n\nMike",
            "date": "2005-08-05T22:24:16.000+0000",
            "id": 15
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "It's possible to catch the IllegalStateException instead. That would certainly\nbe faster:\n\nboolean avail;\ntry {\n  avail = responseConnection.isResponseAvailable();\n} catch(IllegalStateException e) {\n  avail = false;\n}\n\nif(avail) { ...",
            "date": "2005-08-05T22:34:17.000+0000",
            "id": 16
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #17)\n> It's possible to catch the IllegalStateException instead. That would certainly\n> be faster:\n> \n\nI seriuosly doubt that a boolean variable test would be slower than setting up a\ntry/catch/finally frame.\n\nSymantically (at least IMO) IllegalStateException should represent a fatal\nexception one should not attempt to recover from. I would rather not throw it\nall (see my original patch)\n\nOleg\n\n> boolean avail;\n> try {\n>   avail = responseConnection.isResponseAvailable();\n> } catch(IllegalStateException e) {\n>   avail = false;\n> }\n> \n> if(avail) { ...\n\n",
            "date": "2005-08-05T22:43:58.000+0000",
            "id": 17
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Oleg, \n\nright, I did not see isOpen was just a simple wrapped boolean check.\nI do not like the semantics of that exception either. Is it feasible to change\nthe contract that late in the release process? I mean, personally I'd say fix it\nrather earlier than later and go with patch 1. But I don't know about our\nusers... Maybe ask on the list?",
            "date": "2005-08-05T23:05:02.000+0000",
            "id": 18
        },
        {
            "author": "Peter Lynch",
            "body": "I just read this thread with interest as a simple junit test on my end\nreproduced this quite easily, although without all the waiting around - by using\na proxy server instead.\n\nHere is code that will reproduce this for me every time.\n\nHttpClient httpClient =\nnew HttpClient(new MultiThreadedHttpConnectionManager());\nfinal HttpConnectionManagerParams params =\n    httpClient.getHttpConnectionManager().getParams();\nparams.setMaxTotalConnections(20);\nparams.setDefaultMaxConnectionsPerHost(20);\nhttpClient.getParams().setCookiePolicy(CookiePolicy.IGNORE_COOKIES);\n\n// *this next line helps trigger IllegalStateException*\n// without a proxy , we get an UnknownHostException instead\n// the proxy server is running normally\nhttpClient.getHostConfiguration().setProxy(\"127.0.0.1\", 8222);\n// use a non-reachale url\nfinal PostMethod post = new PostMethod(\"http://foo/bar/baz\");\nfinal NameValuePair[] data ={new NameValuePair(\"name\", \"value\")};\npost.setRequestBody(data);\ntry\n{\n    //next line throws non-doc'd IllegalStateException\n    httpClient.executeMethod(post);\n    // print response to stdout\n    System.out.println(post.getResponseBodyAsStream());\n}\nfinally\n{\n    post.releaseConnection();\n}\n\nTrace this creates from the call to executeMethod()\n---------------------------------------------------\n\njava.lang.IllegalStateException: Connection is not open\n        at\norg.apache.commons.httpclient.HttpConnection.assertOpen(HttpConnection.java:1269)\n        at\norg.apache.commons.httpclient.HttpConnection.write(HttpConnection.java:968)\n        at\norg.apache.commons.httpclient.HttpConnection.write(HttpConnection.java:937)\n        at\norg.apache.commons.httpclient.HttpConnection.print(HttpConnection.java:1027)\n        at\norg.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter.print(MultiThreadedHttpConnectionManager.java:1622)\n        at\norg.apache.commons.httpclient.HttpMethodBase.writeRequestHeaders(HttpMethodBase.java:2046)\n        at\norg.apache.commons.httpclient.HttpMethodBase.writeRequest(HttpMethodBase.java:1919)\n        at\norg.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:993)\n        at\norg.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:393)\n        at\norg.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:168)\n        at\norg.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:396)\n        at\norg.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:324)\n\n",
            "date": "2005-08-05T23:16:42.000+0000",
            "id": 19
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #19)\n> Oleg, \n> \n> right, I did not see isOpen was just a simple wrapped boolean check.\n> I do not like the semantics of that exception either. Is it feasible to change\n> the contract that late in the release process? I mean, personally I'd say fix it\n> rather earlier than later and go with patch 1. But I don't know about our\n> users... Maybe ask on the list?\n\nFirstly, HttpConnection is not meant to be used directly. Effectively it is a\nprivate class. Secondly, IllegalStateException is an unchecked exception, so no\ncode should be broken if it is no longer thrown. This said, one meager boolean\ntest seems to solve the problem, so I think it is a rather modest price to pay\nfor keeping everyone content.\n\nOleg\n",
            "date": "2005-08-05T23:27:48.000+0000",
            "id": 20
        },
        {
            "author": "Michael Becke",
            "body": "Sorry, never mind.  I was confusing isOpen with isStale(). \n\nMy preference would be for the first patch.  It does introduce a small API\nchange, but HttpConnection is essentially only used by HttpClient classes.  A\nquick poll on the dev list would be good, but my guess is that virtualy no-one\nuses HttpConnection directly.\n\nMike",
            "date": "2005-08-05T23:29:34.000+0000",
            "id": 21
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #20)\n> I just read this thread with interest as a simple junit test on my end\n> reproduced this quite easily, although without all the waiting around - by using\n> a proxy server instead.\n> \n> Here is code that will reproduce this for me every time.\n> \n\nThat's pretty cool. I'll see if I reproduce the bug using our proxy mockup.\nShould I succeed, I'll incorporate your test case into the patch\n\nOleg",
            "date": "2005-08-05T23:31:49.000+0000",
            "id": 22
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Just being careful, Oleg. People writing their own connection mananagers might\nuse it (don't know what for...). Removing an unchecked exception is a subtle\nchange in that no IDE will signal the change in your code when you drop in the\nnew HttpClient jar. So if anyone is relying on the exception being thrown if the\nconnection is closed their code will break. I am sounding really academic now I\nmust say... Just go for patch 1 and cross fingers. .-)",
            "date": "2005-08-05T23:38:33.000+0000",
            "id": 23
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #23)\n> (In reply to comment #20)\n> > I just read this thread with interest as a simple junit test on my end\n> > reproduced this quite easily, although without all the waiting around - by using\n> > a proxy server instead.\n> > \n> > Here is code that will reproduce this for me every time.\n> > \n> \n> That's pretty cool. I'll see if I reproduce the bug using our proxy mockup.\n> Should I succeed, I'll incorporate your test case into the patch\n> \n> Oleg\n\nNope. No luck with the test case. I get a\norg.apache.commons.httpclient.NoHttpResponseException  from our proxy mockup,\nwhich seems quite reasonable to me.\n\nFolks, \n\nIf I get it right, the consensus is that we go with the patch (take 1). If I\nhear no complaints I'll commit the patch (take 1) in a few days\n\nOleg",
            "date": "2005-08-06T00:11:47.000+0000",
            "id": 24
        },
        {
            "author": "Peter Lynch",
            "body": "Is it acceptable that for the same code one could expect either\nUnknownHostException OR NoHttpResponseException?\n\nFWIW the proxy server I was using is here http://www.proxomitron.info/\n",
            "date": "2005-08-06T00:34:35.000+0000",
            "id": 25
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #26)\n> Is it acceptable that for the same code one could expect either\n> UnknownHostException OR NoHttpResponseException?\n> \n\nPeter,\nWhat we have is a rather simple proxy server mockup, which I think simply drops\nthe connection on unsuspecting HttpClient in case of DNS name resolution\nfailure, hence NoHttpResponseException thrown by HttpClient. This is not an\nissue with HttpClient or the test code but rather with the mockup proxy\n\nOleg\n\n> FWIW the proxy server I was using is here http://www.proxomitron.info/\n> \n\n",
            "date": "2005-08-06T00:49:42.000+0000",
            "id": 26
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch 1 committed.\n\nOleg",
            "date": "2005-08-09T05:33:58.000+0000",
            "id": 27
        }
    ],
    "component": "HttpClient (classic)",
    "description": "the default config of leaving the HttpClientParams.CONNECTION_MANAGER_TIMEOUT as zero means \nthat the first time the connection manager fails to immediately get a connection you application hangs. \n(at least using MultiThreadedHttpConnectionManager.)\n\nthis is because the zero gets passed onto a call to Object.wait(long timeout) and, from the docs, \"If \ntimeout is zero, however, then real time is not taken into consideration and the thread simply waits \nuntil notified.\". \n\nsince nothing ever \"notify()\"s the thread everything just stops...\n\nthe default behaviour of the client more should be more predictable. you don't expect it to hang your \nentire app if it can't get a connection, you expect it to timeout then throw an exception or give some \nother kind of feedback.\n\nit would make sense to give a default of, say, arbitrarily, 10 seconds or so. this would save every single \nuser of the classes having to dig around in the code/documentation and explictly set this param. they \nmight decide that the default value isn't right and hence change it, but that's tweaking behaviour, not \ncorrecting it. i certainly thought it was a bug in the code (yours or mine), not my config and have been \nfretting around it for a while.\n\nbest,\ngarry",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-485",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Connection is not released back to the pool if a runtime exception is thrown in HttpMethod#releaseConnection method",
    "systemSpecification": false,
    "version": "3.0 RC3"
}