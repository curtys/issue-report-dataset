{
    "comments": [
        {
            "author": "Mike Sample",
            "body": "Created an attachment (id=11098)\nSource code/mods implementing proxy tunneling/auth for non-HTTP\n",
            "date": "2004-04-02T12:27:47.000+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Mike,\nAre these changes against CVS HEAD or HTTPCLIENT_2_0_BRANCH? It would simplify\n(and speed up) the review process substantially if you submit the patch in diff\n-u format. \n\nhttp://www.apache.org/dev/contributors.html#patches\n\nAlso consider providing a sample application to demonstrate the use of this\nfeature. The demo should go into src/examples directory\n\nhttp://cvs.apache.org/viewcvs.cgi/jakarta-commons/httpclient/src/examples/?only_with_tag=HTTPCLIENT_2_0_BRANCH\n\nOleg",
            "date": "2004-04-03T05:22:32.000+0000",
            "id": 1
        },
        {
            "author": "Mike Sample",
            "body": "Created an attachment (id=11110)\nPatch to HEAD to provide access to the Socket after CONNECT. Must still manually add NullMethod.java from initial src zip\n",
            "date": "2004-04-03T06:56:11.000+0000",
            "id": 2
        },
        {
            "author": "Mike Sample",
            "body": "Created an attachment (id=11111)\nSrc files for an example of using HttpClient to tunnel non-HTTP. Warning compiled but not tested. Based on tested code tho.\n",
            "date": "2004-04-03T07:37:41.000+0000",
            "id": 3
        },
        {
            "author": "Mike Sample",
            "body": "Oleg, \n\nI based my changes/patch on the HEAD rev. Hope this isn't too big of an \ninconvenience to get this stuff into the next stable release.\n\nI don't think the rcs $ variables that have different values in the patch file \nwill cause any problems. They should be replaced upon checkin/checkout.\n\nAlso, the patch src files contain the obligatory 'this file is different from \nthe original Apache version' notice which should probably be nuked before \ncheckin.\n\nAs you will notice, the way the Socket is detached in not the most efficient \nin that HttpClient creates various input stream wrappers etc. that will be \ndiscarded.  Something to consider if re-factoring work goes on later. The goal \nof this change was to disturb as little as possible...\n\n/Mike",
            "date": "2004-04-03T07:46:44.000+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Mike,\nI believe I might have a different solution to this problem. It takes a little\nmore code but on the other hand it requires virtually no modifications to the\nexisting classes, primarily HttpConnection. There's also no need to \"detach\" the\nsocket potentially creating problems for the connection manager.\n\nLet me know what you think\n\nOleg\n\n ",
            "date": "2004-04-04T17:35:03.000+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=11121)\nPatch (a slightly different take on the problem)\n",
            "date": "2004-04-04T17:36:10.000+0000",
            "id": 6
        },
        {
            "author": "Mike Sample",
            "body": "Oleg,\n\nThat's a much nicer way of doing it.  In my original solution I was concerned \nabout detachSocket confusing the HttpConnection (in fact it took me a lot of \nfiddling around to make so HttpConnection didn't close the Socket on me).  Your \nsolution has more code but is much cleaner so maintenance shoud be easier than \nwith the few lines of my hack.\n\nIf I understand your new code and HttpClient correctly, because you use the \nconnect method directly, one should be able to control how the socket is \ncreated by using a non-secure ProtocolSocketFactory.  Is this correct? If so \nawesome!\n\nAny idea about which release these changes would go into and when that release \nmight occur?  \n\nThx, \n\n/Mike",
            "date": "2004-04-05T01:53:26.000+0000",
            "id": 7
        },
        {
            "author": "Michael Becke",
            "body": "Created an attachment (id=11131)\nAnother patch\n",
            "date": "2004-04-05T11:40:29.000+0000",
            "id": 8
        },
        {
            "author": "Michael Becke",
            "body": "Oleg,\n\nI agree, the ProxyClient is a much better way to handle this.  I have made just a few changes to your \npatch to simplify things a little.  In particular ProxyClient now makes use of the HttpMethodDirector \ninstead of handling authentication on its own. \n\nMike, in regard to your question, you are correct.  You will be able to have full control over how the \nsocket is created.  The only caveat is that if you want to tunnel SSL you will need to force the proxy to \nconnect to port 443.  For example:\n\n  proxyclient.getHostConfiguration().setHost(\"SSL-host\", 443);\n\nIf a port is not specified, the protocol default (usually 80) will be used.\n\nI imagine these changes will be part of the 3.0 release.  Pinning down an exact ETA for 3.0 may be a \nlittle difficult.  Does anyone have a particular schedule in mind?\n\nMike ",
            "date": "2004-04-05T12:04:36.000+0000",
            "id": 9
        },
        {
            "author": "Mike Sample",
            "body": "Mike B,\n\nThanks for the clarifications. \n\nOne question - you mentioned you must use port 443 in order to get http client \nto use SSL automatically.  Is this, more precisely, that if you use 443 as \nyour dst port, HttpClient will use the Protocol's SecureProtocolSocketFactory \nto add SSL to the underlying Socket created with the \nDefaultProtocolSocketFactory?   If so, then I can use port 443 without \nactually running SSL provided I specifiy my own No-op \nSecureProtocolSocketFactory.     \n\nThe reason this is important to me is that my goal is to tunnel jxta through \nweb proxies with hopefully not requiring any admin port opening etc., and many \nproxies only allow CONNECT to go to 443 or 8443.   However, if the above \nholds, it looks like if I use 443 with a No-op SPSF I still can't avoid the \nDefaultProtocolSocketFactory.\n\nPerhaps HttpConnection could create the initial socket for SSL via the \nSecureProtocolSocketFactory's non-wrapping create methods (since they do not \nappear to be used otherwise) - but may break old httpclient using code unless \nyou watched for null and even then some may just throw.   \n\nAlternatively, if the DefaultProtocolSocketFactory could allow pluggable \nimplementations, then no one's existing code would break.   The motivation for \nthis is that jxta for example tries to create Sockets with a timeout whereas \nthe use of the DefaultSocketFactory for 'secure' connections does not.\n\nThx,\n\n/Mike",
            "date": "2004-04-05T23:14:36.000+0000",
            "id": 10
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Mike (S)\nThe way things have been implemented the default socket factory is always the\none that is associated with the 'http' protocol:\n\n<code_snip>\n    public synchronized void setHost(String host, int port) {\n        setHost(host, null, port, Protocol.getProtocol(\"http\"));\n    }\n</code_snip>\n\nThere's absolutely nothing that presents you from registering any other socket\nfactory as 'http' protocol socket factory. Likewise, you can always register a\nProtocol of you own and always explicitly use that Protocol with the PtoxyClient. \n\nMike (B)\n\nI have clearly overlooked the possibility of simply (re)using\nHttpMethodDirector. Ironically enough it was me how introduced the safeguard\nagainst HttpMethodDirector's recursive execution of the ConnectMethod (which I\nhad though was the reason why HttpMethodDirector could not be used)\n\nI think the patch is good to be committed\n\nOleg",
            "date": "2004-04-06T02:55:33.000+0000",
            "id": 11
        },
        {
            "author": "Mike Sample",
            "body": "Oleg and Mike B,\n\nMany thanks for getting an idea and a hack to a proper patch.\n\nTo clarify all my ramblings about SocketFactories, here is line of code in \nHttpConnection.open() that concerned me:\n\n<code>\nfinal ProtocolSocketFactory socketFactory =\n                    (isSecure() && isProxied()\n                            ? new DefaultProtocolSocketFactory()\n                            : protocolInUse.getSocketFactory());\n\n</code>\n\nI just wanted to be sure I could avoid the DefaultSocketFactory even if I use \nport 443.  Looks like the solution is simply to always provide a non-Secure \nsocketfactory so isSecure() evalutates to false.  Then if I want SSL on top of \nthe tunneled socket (and to avoid DefaultSocketFactory) I can simply wrap the \nreturned socket myself in the same way as done in SSLProtocolSocketFactory. \n\nCheers,\n\n/Mike S.",
            "date": "2004-04-06T03:52:46.000+0000",
            "id": 12
        },
        {
            "author": "Michael Becke",
            "body": "Hi Mike,\n\nThe DefaultProtocolSocketFactory will only be used if the specified Protocol is an instance of \nSecureProtocolSocketFactory.  Since the SSL tunnel is never actually created by the ProxyClient there is \nno reason to use a secure factory.  Even if one wanted to create a SSL tunnel it would have to be done \nmanually as you mention.  So, you are correct.  You can use whichever socket factory you like and then \nmanually wrap the socket afterward, if necessary.\n\nMike",
            "date": "2004-04-06T09:14:49.000+0000",
            "id": 13
        },
        {
            "author": "Michael Becke",
            "body": "Hi Oleg,\n\nI agree the patch is pretty much ready to go.   The only things missing are some JavaDocs.  Do you want \nto finish this one up, or should I take care of it?  I don't want to steal this one from you :)\n\nMike",
            "date": "2004-04-06T09:19:16.000+0000",
            "id": 14
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Mike,\nIt's virtually all your code now, so if you feel like bringing this one to a\nlogical conclusion, please do so\n\nOleg",
            "date": "2004-04-06T15:36:55.000+0000",
            "id": 15
        },
        {
            "author": "Michael Becke",
            "body": "Created an attachment (id=11214)\nYet another patch\n",
            "date": "2004-04-12T09:38:31.000+0000",
            "id": 16
        },
        {
            "author": "Michael Becke",
            "body": "This patch adds some comments and a new inner class ConnectResponse.  This class is used to return \nboth the socket and connect method.  The method will be useful in cases when the CONNECT fails.  \n\nMike",
            "date": "2004-04-12T09:40:34.000+0000",
            "id": 17
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Cool. Looks good to me.\n\nOleg",
            "date": "2004-04-12T18:34:32.000+0000",
            "id": 18
        },
        {
            "author": "Michael Becke",
            "body": "Patch applied.  Many thanks to Mike Sample for the excellent idea.\n\nMike",
            "date": "2004-04-13T09:10:09.000+0000",
            "id": 19
        }
    ],
    "component": "HttpClient (classic)",
    "description": "HttpClient would be even more useful if it supported connections tunneled \nthrough proxies and proxy authentication for non-HTTP protocols. E.g. Binary \nprotocols such as SSH or JXTA-TCP could be tunneled through a web proxy if \nHttpClient provided access to the underlying Socket after the negotiations \n(auth, CONNECT) with the web proxy were complete.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-328",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Proxy tunneling/auth with CONNECT for non-HTTP protocols",
    "systemSpecification": false,
    "version": ""
}