{
    "comments": [
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Agreed, this needs documentation. And I vote for changing the class (for 3.1)\nsuch that the default platform encoding is never used and an encoding must\nalways be specified explicitely. The default platform encoding does not make the\nleast sense in a networked environment. Being unaware of char to byte\nconversions and thus ignoring the encoding always leads to problems. We should\nencourage our users to think about the encoding by removing silly defaults.\n\nfor 3.0: document behaviour correctly and deprecate the method\nfor 3.1: always require an encoding explicitely",
            "date": "2005-12-06T21:42:03.000+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #0)\n> \n> \t// Add the Content-type header.  This sets the charset to UTF-8.\n> \tmethod.setRequestHeader( \"Content-type\", \"text/xml; charset=UTF-8\" );\n> \t// The given string is converted internally by the post method into\n> \t// a UTF-8 encoded byte array.\n>         method.setRequestEntity( new StringRequestEntity( xmlstring ) );\n> \n\nThis should do the trick\n\nRequestEntity entity = StringRequestEntity(xmlstring, \"text/xml\", \"UTF-8\");\nmethod.setRequestEntity(entity);\n\n> Also, I didn't notice any \"upgrade to 3.x\" documentation which would\n> have helped me :/\n\nWell, since no one bothered to contribute one, it is not there. I can't do\neverything alone.\n\nWe happily accept contributions.\n\nOleg",
            "date": "2005-12-06T21:45:21.000+0000",
            "id": 1
        },
        {
            "author": "Guillaume Cottenceau",
            "body": "Ortwin: I agree more than 100% that default platform encoding should not be used.\n\nOleg: thanks for the suggestion; please don't take it as personal critics, I\nthink you're doing an incredible job with HttpClient, and we are already more\nthan very happy with the availability as open source of this very fine software.\nI do contribute myself to some free software projects, even in the documentation\nfield, however I don't have the necessary knowledge about HttpClient to\ncontribute the missing upgrade guide. Please excuse me if my message sounded\nrude to your much appreciated contributions.",
            "date": "2005-12-06T22:28:51.000+0000",
            "id": 2
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Created an attachment (id=17157)\nproposed patch\n\nThe patch deprecates the first constructor and removes its use from the test\ncases. It also checks for inconsistent definition of the charset in the second\nconstructor. So new StringRequestEntity(\"\", \"text/xml; charset=ISO-8859-1\",\n\"UTF-8\") will throw a runtime exception. The default platform encoding is still\nused when new StringRequestEntity(\"\", null, null) is called.",
            "date": "2005-12-06T22:39:39.000+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #3)\n> Oleg: thanks for the suggestion; please don't take it as personal critics,\n\nNo worries, nothing personal. To the contrary critique is very welcome. I simply\nenjoy working in HttpComponents/HttpClient and ask nothing in return. Writing\ngood documentation is unfortunately is not something I do well or enjoy doing\nfor that matter and therefore some help from the community at large would be\nquite appreciated\n\nOleg",
            "date": "2005-12-06T23:30:51.000+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=17159)\nPatch (a slightly different take)\n\nHow about a slightly less drastic solution?\n\nOleg",
            "date": "2005-12-06T23:32:04.000+0000",
            "id": 5
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Oleg,\n\nI thought about that as well, but it effectively changes the behaviour of the\nmethod. However the behaviour is now independent of the platform, which is\ncertainly a good thing. I'm not sure how useful this specific encoding is in the\ngeneral case. I still opt for letting the user set it explicitely.\n\nOdi",
            "date": "2005-12-07T01:10:19.000+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #7)\n> Oleg,\n> \n> I thought about that as well, but it effectively changes the behaviour of the\n> method. However the behaviour is now independent of the platform, which is\n> certainly a good thing. I'm not sure how useful this specific encoding is in the\n> general case. I still opt for letting the user set it explicitely.\n> \n> Odi\n\nI can't say I disagree. I personally do not have a very strong preference for\neither. \n\nWhat do others think?\n\nOleg\n\n",
            "date": "2005-12-07T05:07:40.000+0000",
            "id": 7
        },
        {
            "author": "Michael Becke",
            "body": "Another option would be to just leave the method alone for 3.0 (don't switch to\nISO-8859-1 or deprecate) and just make it clear via Javadocs what it does.  \n\nMike",
            "date": "2005-12-07T06:41:00.000+0000",
            "id": 8
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #9)\n> Another option would be to just leave the method alone for 3.0 (don't switch to\n> ISO-8859-1 or deprecate) and just make it clear via Javadocs what it does.  \n> \n> Mike\n\n+1\n\nI think this the best option. \n\nOleg",
            "date": "2005-12-07T21:40:12.000+0000",
            "id": 9
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=17214)\nJavadoc patch\n\nFolks, please review\n\nOleg",
            "date": "2005-12-14T07:36:17.000+0000",
            "id": 10
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "looks good",
            "date": "2005-12-14T19:20:00.000+0000",
            "id": 11
        },
        {
            "author": "Michael Becke",
            "body": "Yep.\n\nMike",
            "date": "2005-12-14T23:17:34.000+0000",
            "id": 12
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Javadoc patch checked in\n\nOleg",
            "date": "2005-12-15T03:10:17.000+0000",
            "id": 13
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch (take 1). Please review\n\nOleg",
            "date": "2006-06-06T02:38:07.000+0000",
            "id": 14
        },
        {
            "author": "Roland Weber",
            "body": "Hi Oleg,\n\nI think inline links need to be written as {@link #...}, not just #...\nOtherwise, the patch looks fine.\n\ncheers (and good night :-),\n  Roland\n",
            "date": "2006-06-06T02:54:30.000+0000",
            "id": 15
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in\n\nOleg",
            "date": "2006-06-06T15:53:53.000+0000",
            "id": 16
        }
    ],
    "component": "HttpClient (classic)",
    "description": "When using httpclient2, we were doing the following:\n\n\t// Add the Content-type header.  This sets the charset to UTF-8.\n\tmethod.setRequestHeader( \"Content-type\", \"text/xml; charset=UTF-8\" );\n\t// The given string is converted internally by the post method into\n\t// a UTF-8 encoded byte array.\n\tmethod.setRequestBody( xmlstring );\n\nThe comments show that this was the way we used to obtain a UTF-8 encoded XML\ndocument (if this was wrong, that may be the origin of the problem?).\n\n\nWhen upgrading to httpclient3 and killing deprecated code, this was converted to:\n\n\t// Add the Content-type header.  This sets the charset to UTF-8.\n\tmethod.setRequestHeader( \"Content-type\", \"text/xml; charset=UTF-8\" );\n\t// The given string is converted internally by the post method into\n\t// a UTF-8 encoded byte array.\n        method.setRequestEntity( new StringRequestEntity( xmlstring ) );\n\nwhich went without problem during the tests on my machine and on test production\nmachine.. because platforms charset were UTF-8, which is not the case for\nproduction machines :(\n\nI think the javadoc of the used StringRequestEntity constructor should strongly\nstate that it uses String#getBytes for the content, which uses the platform\ncharset. Also, I didn't notice any \"upgrade to 3.x\" documentation which would\nhave helped me :/",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-536",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "misleading lack of javadoc in StringRequestEntity",
    "systemSpecification": true,
    "version": "3.0 RC4"
}