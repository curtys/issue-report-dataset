{
    "comments": [
        {
            "author": "Oleg Kalnichevski",
            "body": "Eric,\nMy apologies, but I do not quite understand the nature of the problem. What do\nyou mean by 'cannot create a document'? What do you mean by a document in the\nfirst place? Request content body? Response content body?\n\nwhat version of HttpClient are you using and what is it you are trying to get done?\n\nAs to getAsciiBytes method, as its name implies it is supposed to return ASCII\ncharacters only. So, the behaviour of the method is correct.\n\nYou might want to have a look at the HttpClient character encoding guide for\nmore details:\n\nhttp://jakarta.apache.org/commons/httpclient/charencodings.html\n\nI'll have no choice but to mark the report as invalid unless more information is\ngiven\n\nOleg",
            "date": "2003-11-08T19:29:48.000+0000",
            "id": 0
        },
        {
            "author": "Eric Dofonsou",
            "body": "\nMy fault, by document I was refering to file (physical file onthe hard drive)\nie : c:\\work\\DocumentDeT\u00c3\u00a8st.txt  <-- This filename has an accent.\n\n\nI am using the latest version : 2.0 Rc2\n\nAs to getAsciiBytes method, as its name implies it is supposed to return ASCII\ncharacters only. So, the behaviour of the method is correct.\n\nPrecisly, but because of that the accent based charaters are converted to ?\nie : c:\\work\\DocumentDeT\u00c3\u00a8st.txt --> c:\\work\\DocumentDeT?st.txt",
            "date": "2003-11-14T08:36:57.000+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Eric,\nAre you using MultipartPostMethod by any chance? Please give me a bit more\ndetails about what your application is supposed to do and what you are trying to\naccomplish, so I would not have to play a private detective.\n\nOleg",
            "date": "2003-11-14T16:58:50.000+0000",
            "id": 2
        },
        {
            "author": "Eric Dofonsou",
            "body": "Hi Oleg.\n\nYes, I'am using a multipart post.\n\nIn our application we want to upload files to a file server from a java \napplication via HTTP.  We use multipart because we have to include extra \ninformation for the server application to be able to handle the data (ie : link \nthe file to a database object etc ...).  We also want to be able to upload \nmultiple files (wichi works well as long as we have no accent in the filenames)\n\n--\nHere is the code that buids the file parts\n\nHttpClient client = new HttpClient();\nMultipartPostMethod httpsPost = new MultipartPostMethod ( m_docServer );\n\n//Set header information\nhttpsPost.setRequestHeader(\"Content-Type\", \"multipart/form-data; \nboundary=\"+BOUNDS);\n\n//Adding the main parts.\nStringPart partToAdd = new StringPart(\"ClassUID\", classUID);\npartToAdd.setTransferEncoding(null);\npartToAdd.setContentType(null);\nhttpsPost.addPart( partToAdd );\n\npartToAdd = new StringPart(\"MethodName\", methodName);\npartToAdd.setTransferEncoding(null);\npartToAdd.setContentType(null);\nhttpsPost.addPart( partToAdd );\n\npartToAdd = new StringPart(\"Params\", params);\npartToAdd.setTransferEncoding(null);\npartToAdd.setContentType(null);\nhttpsPost.addPart( partToAdd );\n\n\n//Adding teh files parts.\nint i=0;\nIterator iterator = parts.keySet().iterator();\nAI_DOCPART part;\nString partID;\nString partFile;\nFilePart fPart;\n\n//loop until we have created all file parts.\nwhile(iterator.hasNext()){\n  part = (AI_DOCPART)(iterator.next());\n  partID \t= part.getIDAsString();\n  partFile = (String) parts.get(part);\n  try {\n    fPart = new FilePart(\"FILE\"+(i+1), new File(partFile));\n    //partToAdd.setContentType(null);\n    //partToAdd.setTransferEncoding( null );\n    httpsPost.addPart(fPart);\n  }\n  catch (FileNotFoundException e) {\n  throw new AIException(\"ERR_INVALIDE_FILENAME\",\"\",GUIMediator.getStringResource\n(\"Corporate\",\"ERR_INVALIDE_FILENAME\"),\"\");\n  }\n  partToAdd = new StringPart(\"PARTNUMBER\"+(i+1) , partID);\n  partToAdd.setContentType(null);\n  partToAdd.setTransferEncoding( null );\n  httpsPost.addPart( partToAdd );\t\n  i++;\t\t\t\n}\n\n//Set timeout in Milliseconds -> 30 secondes\nclient.setConnectionTimeout( 30000 );\n\n//Send the data\nint status=0;\ntry {\n\tstatus = client.executeMethod(httpsPost);\n}\n...",
            "date": "2003-11-19T00:34:14.000+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Form-based File Upload in HTML specification (RFC 1867)\n<http://www.ietf.org/rfc/rfc1867.txt> that HttpClient implements follows the\nrules of all multipart MIME data streams as outlined in RFC 1521 and RFC 1522.\nMIME specification requires all non-ASCII content to be represented using ASCII\ncharset only. Currently HttpClient does not perform such translation\nautomatically. You will have to take care of filename encoding prior to passing\nit to the FilePart as a parameter.\n\nI was going to contribute quote-printable encoder/decoder to the Commons Codec\nlibrary but never got a chance.\n\nTo sum things up: if the relevant RFCs are to be strictly adhered to, the\nbehaviour on the part of HttpClient is correct. However, I do agree that it\nwould be nice if HttpClient took care of non-ASCII charset translation\nautomatically. So, feel free to reopen this bug as a feature request.\n\nOleg",
            "date": "2003-11-19T01:30:28.000+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Re-opened as a feature request",
            "date": "2004-01-13T19:30:47.000+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "*** HTTPCLIENT-368 has been marked as a duplicate of this bug. ***",
            "date": "2004-08-08T20:06:08.000+0000",
            "id": 6
        },
        {
            "author": "Francis Labaere",
            "body": "I just wanted to add some interesting RFC for this feature request:\n\nRFC 2231\nRFC 2047\nRFC 2184",
            "date": "2006-10-30T12:37:34.000+0000",
            "id": 7
        },
        {
            "author": "Dolf Dijkstra",
            "body": "I have created a patch against revision 532277 for this problem. Although it is not according to the RFC it does do the job. For instance IE is doing the same for multi-part mime upload. Not that I am suggesting that IE is doing the right thing, but it does mean that probably many servers can deal with post.\n\nIndex: src/java/org/apache/commons/httpclient/methods/multipart/FilePart.java\n===================================================================\n--- src/java/org/apache/commons/httpclient/methods/multipart/FilePart.java\t(revision 532277)\n+++ src/java/org/apache/commons/httpclient/methods/multipart/FilePart.java\t(working copy)\n@@ -193,7 +193,11 @@\n         if (filename != null) {\n             out.write(FILE_NAME_BYTES);\n             out.write(QUOTE_BYTES);\n-            out.write(EncodingUtil.getAsciiBytes(filename));\n+            //still not the rigth thing according to RFC1522\n+            out.write( EncodingUtil.getBytes( filename, this.getCharSet() ) );\n+            /*TODO: the right thing would be to do this, but some MIMEDecoders can't handle it.\n+             String s = MimeUtility.encodeText(filename);\n+             */\n             out.write(QUOTE_BYTES);\n         }\n     }\n\n\n",
            "date": "2007-04-25T10:54:49.994+0000",
            "id": 8
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Dolf,\nWhat is MimeUtility and what package does it come from?\n\nOleg",
            "date": "2007-04-27T13:48:36.312+0000",
            "id": 9
        },
        {
            "author": "Dolf Dijkstra",
            "body": "Hi Oleg,\n\nThanks for looking into this and sorry for not making clear where MimeUtility originates from.\n\nMimeUtility is from javax.mail (for instance http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/mail/internet/MimeUtility.html).\n\nDolf \n\n",
            "date": "2007-04-27T15:40:15.872+0000",
            "id": 10
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Dolf,\n\nWe simply cannot not introduce a new dependency for HttpClient 3.x code line. This will have to wait until 4.0\n\nOleg ",
            "date": "2007-04-27T15:55:19.293+0000",
            "id": 11
        },
        {
            "author": "Dolf Dijkstra",
            "body": "Hi Oleg,\n\nMaybe the report is not clear.\n\nAccording to the mult-part mime spec the correct behaviour would be to use a construct is via the MimeUtility. The problem with that is that the mime-parsers that I have tested with don't handle this correctly.\nWhen just encoding the filename with the charset of the request, it works but it is not according to the spec.\n\nThe patch I handed in, works on most mime parsers (as IE is doing this too) but is not according to the spec. \n\nI understand that you don't want to introduce a new dependancy, but maybe you don't need to as the patch works without the MimeUtility. The line containing the MimeUtility is commented.\n\n\nDolf\n\n",
            "date": "2007-04-27T16:31:15.570+0000",
            "id": 12
        },
        {
            "author": "Sebb",
            "body": "Might even be a problem for 4.0 - the license for the JavaMail jar is such that it cannot be distributed by the ASF, as far as I am aware.\n\nMight be worth checking if Commons-Lang has anything suitable, e.g. in StringEscapeUtils.",
            "date": "2007-04-27T16:35:41.069+0000",
            "id": 13
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Dolf,\nMy bad. I overlooked that fact that the reference to MimeUtility was inside a comment block. \n\nSebastian,\nI believe we can depend on JavaMail, as long as we do not have it in the repository and do not ship it with the release packages. Since we do not bundle dependencies with HttpClient anyways, this should not be a problem for us. Having said all that, I think Commons Codec HttpClient is already dependent upon provides all the necessary codecs (BASE64 and quote-printable). It is just a matter of someone taking up this job.\n\nFolks,\nAny objections to relaxing the compliance with the spec and applying the patch submitted by Dolf?\n\nOleg",
            "date": "2007-04-27T21:52:13.455+0000",
            "id": 14
        },
        {
            "author": "Ahmed Ashour",
            "body": "One of HtmlUnit users came across this bug while trying to upload a file with non-ASCII name.\n\nBy sniffing the traffic generated by IE7, \"filename\" is encoded with page charset as Dolf has kindly suggested.\n\nHowever, IE7 does not send the charset after the 'Content-Type':\n\n---------------------------\nContent-Disposition: form-data; name=\"field_name\"; filename=\"C:\\non_ascii.txt\"\nContent-Type: text/plain\n---------------------------\n\nSo, to exactly mimic this behaviour, appreciate if part charset is separated from the \"Content-Disposition\" charset.\n\nMany thanks.",
            "date": "2007-10-24T06:27:30.045+0000",
            "id": 15
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "We should be spec compliant and not \"compatible with most\" implementations - I don't care how wrong IE7 implements this. RFC 2183, Section 2.3 clearly states the limitation to ASCII. People should just accept this limitation instead of trying to bend the standard to their needs. Standards are made to ensure interoperability, for $DIETY's sake. If you need to pass a non-ASCII filename, this is simply not the place for it. You could add another text/plain MIME part with a well-defined charset and pass the file name there for instance.",
            "date": "2007-10-24T09:38:34.720+0000",
            "id": 16
        },
        {
            "author": "Mohammad Rezaei",
            "body": "Ortwin, I think the RFC is worded strangely. It is certainly true that Section 2.3 says US-ASCII only, but it seems like that section is outdated. \n\nIn Section 2, there is a very large note that reads:\n\nNOTE ON PARAMETER VALUE LENGHTS: A short (length <= 78 characters)\n   parameter value containing only non-`tspecials' characters SHOULD be\n   represented as a single `token'.  A short parameter value containing\n   only ASCII characters, but including `tspecials' characters, SHOULD\n   be represented as `quoted-string'.  Parameter values longer than 78\n   characters, or which contain non-ASCII characters, MUST be encoded as\n   specified in [RFC 2184].\n\nLooking at the types of parameters, 4 of them are dates and one is an integer. The only one that's a string is the filename, so the note above must refer to it. RFC 2184 describes how to encode the non-ASCII case. Interestingly, it looks IE does not follow RFC 2184. \n\nSection 2.3 refers to RFC 2045, which is older than RFC 2184.\n\nOverall, I'd say the RFC is unclear on this issue.\n\nThanks\nMoh\n\n",
            "date": "2007-10-24T14:39:56.829+0000",
            "id": 17
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Interesting, although I have never seen it being used in the wild. By the way, RFC 2184 is obsoleted by RFC 2231.",
            "date": "2007-10-24T14:52:20.297+0000",
            "id": 18
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "MultipartEntity now encodes non-ASCII characters in the disposition-content header using content charset when used in the browser compatibility mode and replaces non-ASCII characters with ? when used in the strict mode. One always has an option to encode the file name using one of the standard encoding mechanisms as described in RFC2231 and RFC2047. \n\nClosing this issue as resolved.\n\nOleg",
            "date": "2008-12-02T12:50:02.817+0000",
            "id": 19
        },
        {
            "author": "Ioannis Sermetziadis",
            "body": "I believe that the HttpClient should implement RFC2231 by using asterisks (*) to support use of header parameter values in character sets other than US-ASCII, like in the Content-Disposition header.\n\nSo, when a file is uploaded using MultipartEntity, the FormBodyPart should include a Content-Disposition header that follows the specification, in order to correctly encode the file name, in case it uses a character set other than US-ASCII.\n\nAn example of such a header is:\nContent-Disposition=form-data; name=file; filename*=utf-8''test\n\nIf you agree, I could submit a patch on this.",
            "date": "2017-09-25T00:17:25.484+0000",
            "id": 20
        },
        {
            "author": "Julian Reschke",
            "body": "Do you have evidence of anybody using RFC 2231 here?\n\nSee <https://www.greenbytes.de/tech/webdav/rfc7578.html#form-charset> and <https://www.greenbytes.de/tech/webdav/rfc7578.html#rfc.section.4.2.p.5>.",
            "date": "2017-09-25T04:16:08.543+0000",
            "id": 21
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "@[~sermojohn] [~julian.reschke@gmx.de] HttpClient presently supports three MIME multipart modes: strict (RFC 822, RFC 2045, RFC 2046), browser compatible, RFC 6532 compatible. Even if RFC 2231 is not known to be widely used if someone is willing to contribute support for it with proper test coverage I see no reason why we should not take it.\n\nOleg   ",
            "date": "2017-09-25T14:00:34.238+0000",
            "id": 22
        },
        {
            "author": "Julian Reschke",
            "body": "What's the point in implementing something that the applicable spec says \"MUST NOT\"? As far as I can tell, that spec defines a different approach which is supposed to be what at least some user agents already do.\n\n(And yes, it's entirely possible that the spec is incorrect, in which case proper tests and reporting the problem to the IETF would be the right answer)\n\n(Also, RFC 6532 seems to be entirely irrelevant in this context)",
            "date": "2017-09-25T14:12:48.263+0000",
            "id": 23
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "@[~julian.reschke@gmx.de] Julian, from your previous statement I understood RFC 2231 had not been not in widespread use but not that it had been superseded by another spec. What applicable spec are you referring to? I am also fine with dropping RFC 6532 if there is a superseding spec.\n\nOleg ",
            "date": "2017-09-25T14:22:26.122+0000",
            "id": 24
        },
        {
            "author": "Julian Reschke",
            "body": "Trying to clarify:\n\na) AFAIU, RFC 2231 encoding is not used in multipart payloads.\n\nb) RFC 6532 is irrelevant (being about header fields in email).\n\nc) The current spec about multipart/form-data is RFC 7578 (<https://www.greenbytes.de/tech/webdav/rfc7578.html>) which I already quoted above (see <https://www.iana.org/assignments/media-types/media-types.xhtml#multipart>).",
            "date": "2017-09-25T14:33:20.698+0000",
            "id": 25
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "@[~reschke] \n\nbq. b) RFC 6532 is irrelevant (being about header fields in email).\n\nI fail to see why this makes it irrelevant but I see no problem dropping RFC 6532 support in favor of RFC 7578 conformant implementation.\n\n@[~sermojohn]\n\nWould you be interested in working on RFC 7578 compliance instead?\n\nOleg",
            "date": "2017-09-25T15:05:46.762+0000",
            "id": 26
        },
        {
            "author": "Ioannis Sermetziadis",
            "body": "I see how RFC 7578 (in section 2 and 4.2) handles the non-ASCII character usage in the multipart part's content-disposition header. \n\nBoth RFC 7578 and RFC 2231 seem to provide a solution to the problem but I do not know which approach is the currently dominant. Based on the big difference in their release date, I would assume that RFC 2231 was in wide use before RFC 7578 was released, so providing support for that would be a benefit. Additionally, supporting RFC 7578 would be valuable, as it seems simple and efficient.\n\nSure, I would be interested to work on both or one of the options. Not sure, however, how the implementation might conflict with the existing HttpMultipartModes. For example, it is not clear to me which specifications the browser_compatible mode follows. Also, should the HttpClient be backwards compatible with the currently defined modes? ",
            "date": "2017-09-25T21:57:57.472+0000",
            "id": 27
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "bq. For example, it is not clear to me which specifications the browser_compatible mode follows.\n\nThere is no specification to speak of. It just represents an attempt at simulating the behavior of commons browsers.\n\nbq. Also, should the HttpClient be backwards compatible with the currently defined modes\n\nDepends on what branch you decide to contribute to. It is certainly the case for 4.5.x but we can be more flexible in 5.x.\n\nOleg",
            "date": "2017-09-25T22:10:06.993+0000",
            "id": 28
        },
        {
            "author": "ASF GitHub Bot",
            "body": "GitHub user sermojohn opened a pull request:\n\n    https://github.com/apache/httpcomponents-client/pull/85\n\n    HTTPCLIENT-293 Fix proposal based on RFC 7578\n\n    I implemented the fix in two commits, because I believe that some refactoring was required in order to handle the part header field parameters (name, filename) properly in the Content-Disposition part header field. Also a unit test was implemented that fails on the first commit but succeeds on the second that includes the actual patch.\n    \n    I did some research about the percent encoding, which as I can understand is quite loose concerning the characters that it should always encode depending on the context. The actual percent character encoding implementation was copied from the common-codecs' URLCodec but it could not be reused as it was implemented, because that class includes URL specific encoding (e.g. ' ' -> '+')\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/sermojohn/httpcomponents-client 4.6.x\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/httpcomponents-client/pull/85.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #85\n    \n----\ncommit 4fbaa720ab2ee35f3281d193ce735d1f689dd175\nAuthor: Ioannis Sermetziadis <sermojohn@gmail.com>\nDate:   2017-09-28T20:56:49Z\n\n    HTTPCLIENT-293 Refactored code in order to support multipart header field parameters in the data model and postpone the formatting and encoding of the parameters until the moment written into a stream, which is essential in order to avoid multiple encodings of the same value. Also provided a test case that fails due to incorrectly handling non US-ASCII characters in the filename field of the Content-Disposition header.\n\ncommit 1882a011ea49ea9c824fbea22a2905eb09bbe9ef\nAuthor: Ioannis Sermetziadis <sermojohn@gmail.com>\nDate:   2017-09-28T21:12:13Z\n\n    HTTPCLIENT-293 Implemented the percent encoding of the filename parameter of the Content-Disposition header based on RFC7578 sections 2 and 4.2. Unit test is updated to use the new HttpMultipartMode successfully. In the new MultipartForm implementation I included a PercentCodec that performs encoding/decoding to/from the percent encoding as described in RFC7578 and RFC3986. The PercentCodec class as well as some inner classes should be proposed to the commons-codec project, which apparently does not provide a generic (URLCodec is not).\n\n----\n",
            "date": "2017-09-28T21:26:09.851+0000",
            "id": 29
        },
        {
            "author": "Ioannis Sermetziadis",
            "body": "I submitted a PR that includes an implementation of RFC 7578 as [~reschke] suggested.\nhttps://github.com/apache/httpcomponents-client/pull/85\n\nI would appreciate your feedback!\n\nIoannis",
            "date": "2017-09-28T21:29:46.143+0000",
            "id": 30
        },
        {
            "author": "ASF GitHub Bot",
            "body": "Github user ok2c commented on the issue:\n\n    https://github.com/apache/httpcomponents-client/pull/85\n  \n    @sermojohn Do you mind making a few relatively minor changes to your patch? \n    1. Could you please keep `MinimalField` immutable and move all construction logic to `FormBodyPartBuilder`?\n    2. `FormBodyPartBuildeencodeForHeader` appears to be no longer needed. It should probably be removed.\n    3. Could you please avoid different formatting of imports? You might need to tweak your IDE settings for that.\n",
            "date": "2017-09-29T11:25:10.595+0000",
            "id": 31
        },
        {
            "author": "ASF GitHub Bot",
            "body": "Github user sermojohn commented on the issue:\n\n    https://github.com/apache/httpcomponents-client/pull/85\n  \n    @ok2c pushed the suggested changes. Thank you for the feedback.\n    \n    Removed both FormBodyPartBuilder.encodeForHeader and the corresponding unit test, as I did not find anywhere in the spec this encoding rule.\n    \n    Fyi, I could not build the 4.6.x branch with java 1.6 version, as it is reported by animal-sniffer-maven-plugin that undefined references are used (AuthSchemeRegistry.java:127, SchemeRegistry.java:151,  CookieSpecRegistry.java:139). It worked when I switched to java 1.8 source compilation and target.\n",
            "date": "2017-09-29T19:01:47.995+0000",
            "id": 32
        },
        {
            "author": "ASF GitHub Bot",
            "body": "Github user ok2c commented on the issue:\n\n    https://github.com/apache/httpcomponents-client/pull/85\n  \n    @sermojohn Is there any reason why you encode parameters of the CONTENT_DISPOSITION field only? Why not all fields?\n",
            "date": "2017-09-30T10:48:40.358+0000",
            "id": 33
        },
        {
            "author": "ASF GitHub Bot",
            "body": "Github user sermojohn commented on the issue:\n\n    https://github.com/apache/httpcomponents-client/pull/85\n  \n    Only the filename parameter of the Content-Disposition field is currently encoded, because it is defined by the specification (RFC 7578) that should support non US-ASCII characters. The other parameters, \"name\" (in Content-Disposition) and \"charset\" (in Content-Type) should only contain US-ASCII characters.\n    \n    I could modify the code that creates the \"charset\" parameter of Content-Type field, but I noticed that this field always appears without quotes around the value, which makes it a bit incompatible with the handling of the Content-Disposition parameters that always appear quoted. So, I believe I should avoid changing that code, as it also seems irrelevant with the current fix. Hope you agree.\n",
            "date": "2017-09-30T18:51:22.647+0000",
            "id": 34
        },
        {
            "author": "ASF subversion and git services",
            "body": "Commit 582b28060335c443f971b7fe02bbfc9f3d44bf44 in httpcomponents-client's branch refs/heads/4.6.x from [~sermojohn]\n[ https://git-wip-us.apache.org/repos/asf?p=httpcomponents-client.git;h=582b280 ]\n\nHTTPCLIENT-293 Refactored code in order to support multipart header field parameters in the data model and postpone the formatting and encoding of the parameters until the moment written into a stream, which is essential in order to avoid multiple encodings of the same value.\n",
            "date": "2017-09-30T21:24:20.212+0000",
            "id": 35
        },
        {
            "author": "ASF subversion and git services",
            "body": "Commit 278e47d277568045ab8ff3c42677c791f0227d03 in httpcomponents-client's branch refs/heads/4.6.x from [~sermojohn]\n[ https://git-wip-us.apache.org/repos/asf?p=httpcomponents-client.git;h=278e47d ]\n\nHTTPCLIENT-293 Implemented the percent encoding of the filename parameter of the Content-Disposition header based on RFC7578 sections 2 and 4.2. In the new MultipartForm implementation I included a PercentCodec that performs encoding/decoding to/from the percent encoding as described in RFC7578 and RFC3986.\n\nCloses #85\n",
            "date": "2017-09-30T21:24:21.835+0000",
            "id": 36
        },
        {
            "author": "ASF subversion and git services",
            "body": "Commit 7aef825326a9accca5b1fb8c0ee82597ac7105d6 in httpcomponents-client's branch refs/heads/master from [~sermojohn]\n[ https://git-wip-us.apache.org/repos/asf?p=httpcomponents-client.git;h=7aef825 ]\n\nHTTPCLIENT-293 Refactored code in order to support multipart header field parameters in the data model and postpone the formatting and encoding of the parameters until the moment written into a stream, which is essential in order to avoid multiple encodings of the same value.\n",
            "date": "2017-09-30T21:24:38.867+0000",
            "id": 37
        },
        {
            "author": "ASF subversion and git services",
            "body": "Commit b017a1f2b9b8e12f913843f58137962502d343a8 in httpcomponents-client's branch refs/heads/master from [~sermojohn]\n[ https://git-wip-us.apache.org/repos/asf?p=httpcomponents-client.git;h=b017a1f ]\n\nHTTPCLIENT-293 Implemented the percent encoding of the filename parameter of the Content-Disposition header based on RFC7578 sections 2 and 4.2. In the new MultipartForm implementation I included a PercentCodec that performs encoding/decoding to/from the percent encoding as described in RFC7578 and RFC3986.\n",
            "date": "2017-09-30T21:24:40.583+0000",
            "id": 38
        },
        {
            "author": "ASF GitHub Bot",
            "body": "Github user ok2c commented on the issue:\n\n    https://github.com/apache/httpcomponents-client/pull/85\n  \n    @sermojohn\n    I committed your changes with some modifications. I fixed multiple style check violations, escaped non Latin chars in test cases, and redesigned your code to generate fewer intermediate objects / garbage on the heap.\n    \n    Please review and close this PR. Feel free to raise another PR with follow-up changes.\n",
            "date": "2017-09-30T21:27:13.533+0000",
            "id": 39
        },
        {
            "author": "ASF subversion and git services",
            "body": "Commit 9560aef4765ec7c50d29cd7ca7ee735bf3a6c3b6 in httpcomponents-client's branch refs/heads/master from [~sermojohn]\n[ https://git-wip-us.apache.org/repos/asf?p=httpcomponents-client.git;h=9560aef ]\n\nHTTPCLIENT-293 Refactored code in order to support multipart header field parameters in the data model and postpone the formatting and encoding of the parameters until the moment written into a stream, which is essential in order to avoid multiple encodings of the same value.\n",
            "date": "2017-09-30T21:54:06.460+0000",
            "id": 40
        },
        {
            "author": "ASF subversion and git services",
            "body": "Commit a424709d89504aadd7b3d59129902666d79d0c15 in httpcomponents-client's branch refs/heads/master from [~sermojohn]\n[ https://git-wip-us.apache.org/repos/asf?p=httpcomponents-client.git;h=a424709 ]\n\nHTTPCLIENT-293 Implemented the percent encoding of the filename parameter of the Content-Disposition header based on RFC7578 sections 2 and 4.2. In the new MultipartForm implementation I included a PercentCodec that performs encoding/decoding to/from the percent encoding as described in RFC7578 and RFC3986.\n",
            "date": "2017-09-30T21:54:08.125+0000",
            "id": 41
        },
        {
            "author": "ASF GitHub Bot",
            "body": "Github user ok2c commented on the issue:\n\n    https://github.com/apache/httpcomponents-client/pull/85\n  \n    @sermojohn Please close this PR.\n",
            "date": "2017-10-08T11:00:24.157+0000",
            "id": 42
        },
        {
            "author": "ASF GitHub Bot",
            "body": "Github user sermojohn closed the pull request at:\n\n    https://github.com/apache/httpcomponents-client/pull/85\n",
            "date": "2017-10-08T18:40:49.237+0000",
            "id": 43
        }
    ],
    "component": "HttpClient (classic)",
    "description": "Because of the the following line in getAsciiBytes \n data.getBytes(\"US-ASCII\");\n\nThe returned string is modified if has Latin Characters.\n\nEx : Document non-control\u00c3\u00a9 -> Document non-control?",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-293",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Provide support for non-ASCII charsets in the multipart disposition-content header",
    "systemSpecification": false,
    "version": "1.0 Alpha"
}