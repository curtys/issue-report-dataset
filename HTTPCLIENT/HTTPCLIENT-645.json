{
    "comments": [
        {
            "author": "Oleg Kalnichevski",
            "body": "I suspect that creating an instance of RuleBasedCollator may be not particularly cheap either. \n\nThe use of RuleBasedCollator to compare cookie paths is simply unjustified. I think we should remove RuleBasedCollator altogether.\n\nOleg",
            "date": "2007-04-16T20:15:45.681+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Folks, any objections to this patch?\n\nOleg",
            "date": "2007-04-16T20:16:48.535+0000",
            "id": 1
        },
        {
            "author": "Roland Weber",
            "body": "looks good",
            "date": "2007-04-22T06:39:42.119+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in\n\nOleg",
            "date": "2007-04-23T07:00:33.159+0000",
            "id": 3
        }
    ],
    "component": "HttpClient (classic)",
    "description": "I am using a MultiThreadedHttpConnectionManager with a single HttpClient instance and multiple GetMethod objects.  I have a 500 thread max.  I recently noticed that all 500 threads are in the same place and seem to be blocking each other - the stack trace is below.  I dug into the Cookie.compare(...) method and saw that it is using STRING_COLLARTOR.compare(c1.getPath(), c2.getPath()).  STRING_COLLATOR is defined as a single instance object, 'private static final RuleBasedCollator STRING_COLLATOR = (RuleBasedCollator) RuleBasedCollator.getInstance(new Locale(\"en\", \"US\", \"\"));'.  I also saw that RuleBasedCollator.compare is synchronized.  That means that every thread that is trying to make a request is getting blocked while it tries to add cookies to the request method.  I do not see a workaround because this is the same static final object in every Cookie instance.  So, the more threads, the more synchronized comparisons.  At times I am fetching URLs all from the same site so I am going through this code a lot.  I need it to be much faster than it currently is because all of my threads are getting eaten up on this call and backlogging my system.  Can a different RuleBasedCollator be used for each compare (use the RuleBasedCollator.getInstance() for every compare?  I think that would solve things.\n\nName: pool-1-thread-1443: 72.21.206.5\nState: BLOCKED on java.text.RuleBasedCollator@190330a owned by: pool-1-thread-1867: 72.21.206.5\nTotal blocked: 9,598  Total waited: 381\n\nStack trace: \njava.text.RuleBasedCollator.compare(RuleBasedCollator.java:396)\norg.apache.commons.httpclient.Cookie.compare(Cookie.java:484)\norg.apache.commons.httpclient.cookie.CookieSpecBase.addInPathOrder(CookieSpecBase.java:578)\norg.apache.commons.httpclient.cookie.CookieSpecBase.match(CookieSpecBase.java:557)\norg.apache.commons.httpclient.HttpMethodBase.addCookieRequestHeader(HttpMethodBase.java:1179)\norg.apache.commons.httpclient.HttpMethodBase.addRequestHeaders(HttpMethodBase.java:1305)\norg.apache.commons.httpclient.HttpMethodBase.writeRequestHeaders(HttpMethodBase.java:2036)\norg.apache.commons.httpclient.HttpMethodBase.writeRequest(HttpMethodBase.java:1919)\norg.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:993)\norg.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:397)\norg.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:170)\norg.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:396)\norg.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:324)",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-645",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Cookie.compare(...) uses single instance STRING_COLLATOR to do blocking compares",
    "systemSpecification": true,
    "version": ""
}