{
    "comments": [
        {
            "author": "David Smiley",
            "body": "By the way, I was looking at this simple class a bit more and I think it could be made even simpler.  The code shows that the cookies are treated like a Set, yet strangely it doesn't use a Set internally.  Use a TreeSet wrapped in Collections.synchronizedSet() and then you don't need to mark each method as synchronized.  Perhaps in a couple places you'll need to synchronize on the set.  You still need the defensive copy for getCookies().  If you want to avoid that defensive copy, you can use a ConcurrentSkipListSet instead of the synchronized TreeSet.",
            "date": "2010-07-21T02:06:25.910+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "TreeSet might indeed be a better underlying data structure for this class. I do not see much of a problem with synchronisation on class methods, though. \n\nAnyway, we happily accept patches.\n\nOleg",
            "date": "2010-07-21T09:37:04.671+0000",
            "id": 1
        },
        {
            "author": "David Smiley",
            "body": "Attached is the patch addressing my comments.  There's no longer a need for an instance of the CookieComparator to be a field value so I removed it.  I also saw that toString() should be synchronized.  I also removed the simplistic no-arg constructor since Java will generate the same thing from field initializers.  I hate needlessly verbose Java code -- it gives the language a bad reputation.",
            "date": "2010-07-23T04:35:57.280+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch committed to SVN trunk with some minor tweaks. The problem also fixed in 4.0.x branch.\n\nMany thanks, David, for contributing the patch.\n\nOleg",
            "date": "2010-07-23T20:02:18.875+0000",
            "id": 3
        }
    ],
    "component": "HttpClient (classic)",
    "description": "BasicCookieStore.getCookies() is a simple method.  It's synchronized, and it returns an unmodifiable wrapper around the underlying cookie list.  If the caller were to then iterate over it as another thread were to manipulate the cookie list via BasicCookieStore, this would create a thread un-safe situation because both threads aren't doing their reading/writing with the same lock (the reader doesn't even have a lock).\n\nI suggest fixing this by using CopyOnWriteArrayList, or by making a defensive copy in getCookies()\n\nThis issue might apply to some of the other basic implementations of some of the interfaces but I haven't checked.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-969",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "BasicCookieStore.getCookies() returns non-threadsafe collection",
    "systemSpecification": true,
    "version": ""
}