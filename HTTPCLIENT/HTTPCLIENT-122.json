{
    "comments": [
        {
            "author": "Adrian Sutton",
            "body": "Created an attachment (id=3623)\nCloses the connection if an exception occurs while executing a method.\n",
            "date": "2002-10-28T14:21:08.000+0000",
            "id": 0
        },
        {
            "author": "Adrian Sutton",
            "body": "At the HttpMultiClient level, it is not possible to retry the connection \nbecause the method would have to be recycled which would loose all it's \ninternal settings.  As such the attached patch only closes the connection when \nan exception occurs, ensuring that the client is left in a stable state.\n\nThe user of HttpClient still needs to catch the exception and try again which \nis unfortunate.",
            "date": "2002-10-28T14:23:01.000+0000",
            "id": 1
        },
        {
            "author": "Aurelien Pernoud",
            "body": "I found that the cocoon project encountered this bug too, when their portal \nisn't refreshed for a while, they have the broken pipe exception...\n\nhttp://nagoya.apache.org/bugzilla/show_bug.cgi?id=12216\n\nThey may be interested to know that solving the bug here will solve them too ?",
            "date": "2002-11-28T17:29:25.000+0000",
            "id": 2
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "The bug is not appropriate any longer as HttpMultiClient has been removed and\nissues with reused connections have been solved.",
            "date": "2002-12-17T18:59:50.000+0000",
            "id": 3
        }
    ],
    "component": "HttpClient (classic)",
    "description": "If a socket times out while sitting in the connection pool, \nHttpConnectionManager still attempts to reuse it resulting in an IOException \nbeing thrown when writing to the socket.  I believe this is a problem with both \nserver side and client side timeouts (ie: we try to reuse a connection that we \ntimed out) though am not certain of that.  At the very least server side \ntimeouts cause the issue.\n\nAs yet I can't see how to fix this.  With the current code there doesn't even \nappear to be a suitable workaround because when the exception is thrown, the \nconnection is added back into the pool to be reused (even though it is closed) \nwhich causes the next attempt to fail as well.\n\nI can't see any reliable way to tell whether or not a connection is open, so \nwould suggest the following as a fix:\n\n1. In HttpMultiClient.executeMethod, close the connection if an exception is \nthrown (optionally, only if an IOException is thrown instead of an \nHttpException, but generally exceptions tend to leave things in an unknown \nstate).\n\n2. (optional) Add a retry loop to executeMethod to retry if an exception occurs \n(possibly only if an IOException is thrown, depending on exactly when a \nHttpException is thrown).\n\nI'll attach a patch which does both of this to help clarify.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-122",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "HttpMultiClient reuses closed connections",
    "systemSpecification": true,
    "version": ""
}