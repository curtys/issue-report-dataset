{
    "comments": [
        {
            "author": "Adrian Sutton",
            "body": "My previous observation that MultipartPost doesn't abort sending\nthe body when a response is received is still valid, but turns out to not be\nthe cause of my problems.  From what I understand of rfc2616, HTTPCLIENT-123 is\ntherefore an enhancement not a bug because this behaviour \"SHOULD\" be\npresent in the client but does not have to be.  As such, I'm changing this \nbug's severity from \"Major\" to \"Enhancement\".\n\nOne of the committers may wish to change the target milestone for this bug as \nthis new feature is not planned for the 2.0 release.",
            "date": "2002-10-30T14:03:17.000+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "MultipartPost class method has been updated to support \"expect: 100-continue\"\nhandshake",
            "date": "2003-02-14T05:37:52.000+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=12868)\nPatch (take 1)\n",
            "date": "2004-09-26T22:24:24.000+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Folks, here's the first stab at it. I am not entirely sure it is actually worth\nthe trouble. Please let me know how you feel about it. Should we decide to go\nahead with this patch, I'll happily provide all the missing bits (test cases,\njavadocs, etc).\n\nOleg",
            "date": "2004-09-26T22:28:17.000+0000",
            "id": 3
        },
        {
            "author": "Michael Becke",
            "body": "Hi Oleg,\n\nI would have to agree, I'm not sure it's worth the effort.  In particular this change makes writing directly \nto the output stream significantly more complicated.  My feeling is that Expect: 100-continue is a good \nenough solution to this problem.  Do we still have any real-world requests for this enhancement?\n\nMike",
            "date": "2004-09-27T08:29:49.000+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Mike,\n\nThere are certainly real-life cases when this might be quite useful. Consider\nthe following situation: the user executes a POST or a PUT with a large request\nentity against a protected URL providing no or invalid credentials. The target\nserver reads the request headers, fails to authenticate the user, and\nimmediately drops the connection without reading the request body. HttpClient\nhappily goes on writing the request body until it gets IOExcpetion \"socket\nclosed\". The server response never gets parsed. Instead of expected status code\nSC_UNAUTHORIZED the user gets a misleading IOException. Even the most Httpclient\nsavvy users may be left wondering as to what is the cause of the problem. To\nmake matters worse, HttpClient will attempt to retry the method a few times\nbefore giving up\n\nThis said, there are better ways to deal with the problem. Expect-Continue is\none. Executing a test GET or HEAD against the target URL to ensure authorization\nis another. Since we are both in agreement that the extra complexity does not\nappear to buy a lot I suggest the issue be marked as WORNTFIX. If there are\nstrong objections or additional input in favor of the patch, the bug report can\nalways be reopened.\n\nWhat do you think?\n\nOleg",
            "date": "2004-09-28T01:44:19.000+0000",
            "id": 5
        },
        {
            "author": "Michael Becke",
            "body": "WONTFIX is the right choice in my opinion.  Though I understand the desire for this feature I think the \nalternatives(100-continue and HEAD/GET test) are better than the fix.  \n\nMike",
            "date": "2004-09-28T09:22:22.000+0000",
            "id": 6
        }
    ],
    "component": "HttpClient (classic)",
    "description": "If a MultipartPost request is sent to a server which requires authentication, \nthe server may respond to the request with an unauthorized header and close the \nconnection before all of the data is sent.  HttpClient should monitor the \nincoming stream and cease transmitting the body if an error message is received \n(section 8.2.2 of rfc2616, see below).\n\nAt the very least HttpClient should check for a response when catching the \nHttpRecoverableException and retrying.  This probably should be done in \nHttpMethodBase so that we are in a known state when starting to retry the \nconnection (ie: there isn't an existing response in the socket buffer to cause \nproblems).\n\nIdeally, HttpClient should also implement the 100 (Continue) status as \nspecified in section 8.2.3 of rfc2616.\n\nFinally, PostMethod should be tested to ensure that it does not exhibit this \nbug as well.\n\n-------------\n8.2.2 Monitoring Connections for Error Status Messages\n\n   An HTTP/1.1 (or later) client sending a message-body SHOULD monitor\n   the network connection for an error status while it is transmitting\n   the request. If the client sees an error status, it SHOULD\n   immediately cease transmitting the body. If the body is being sent\n   using a \"chunked\" encoding (section 3.6), a zero length chunk and\n   empty trailer MAY be used to prematurely mark the end of the message.\n   If the body was preceded by a Content-Length header, the client MUST\n   close the connection.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-123",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "MultipartPostMethod does not check for error messages",
    "systemSpecification": true,
    "version": ""
}