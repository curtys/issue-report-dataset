{
    "comments": [
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=12015)\nPatch (take 1)\n",
            "date": "2004-07-02T23:13:21.000+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Changelog:\n\n* fixes broken 'request sent' code, albeit at the expense of adding (yet\nanother) method to the HttpMethod interface\n* removes requestSent argument from the MethodRetryHandler#retryMethod method\nwhich is now available as a method of the HttpMethod interface\n* eliminates superfluous HttpTimeoutException & IOTimeoutException classes.\nRethrowing  InterruptedIOException as IOTimeoutException made sense under\nassumption that timeout exceptions represented a subclass of recoverable\nexceptions, which turned out to be wrong\n* ConnectTimeoutException now subclasses the standard InterruptedIOException,\nwhich is more consistent with the overall Java exception handling framework\n* HttpConnectionManager classes now throw a more specific\nConnectionPoolTimeoutException derived from ConnectTimeoutException. There can\nbe cases when socket connect timeout needs to be differentiated from that of the\nconnection pool\n\nLet me know what you think\n\nOleg",
            "date": "2004-07-02T23:32:20.000+0000",
            "id": 1
        },
        {
            "author": "Michael Becke",
            "body": "Hi Oleg,\n\nIn regard to making timeout exceptions non-recoverable,  I'm not sure this is right for all cases.  In the \nexample you site I agree that the read timeout should not have caused a retry.  The problem here was \nnot that the Exception was recoverable, but that the requestSent variable was not being set correctly.  If \nrequestSent had been true (which it should have and is now with your patch) the method would not \nhave been retried using the DefaultMethodRetryHandler.  Also, in cases where there is connect timeout \nit might be nice to have the method retried (configurable).\n\nI would suggest keeping the timeout exceptions recoverable and then adding method params to \nconfigure how the DefaultMethodRetryHandler determines what exceptions to retry on.\n\nAlso, in regard to the MethodRetryHandler,  I'm not sure it's worthwhile deprecating retryMethod().  \nAdding a new method already breaks the API.  We might as well just change the original method.\n\nMike",
            "date": "2004-07-04T01:17:34.000+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Mike,\nWhat irks me a little is that socket read timeouts on non-idempotent methods\nmust be considered fatal, as an attempt to automatically retry an non-idempotent\nmethod may leave the application in an inconsistent state. As HttpClient can't\nknow whether a method or a sequence of methods are idempotent, it should\nprobably assume they are not. In this case rethrowing socket timeout as a\nrecoverable exception sounds wrong, at least from the conceptual standpoint.\n\nI do agree that it might make sense to have connect timeouts treated as\nrecoverable exceptions. The trouble is that currently only method execution can\nbe retried automatically, and connection cannot.\n\nMucking around with MethodRetryHandler was a mistake. Its argument sequence is\nugly, but not uglier than many other things. It makes sense to defer any changes\nto it until 4.0\n\nOleg",
            "date": "2004-07-04T04:28:41.000+0000",
            "id": 3
        },
        {
            "author": "Michael Becke",
            "body": "    What irks me a little is that socket read timeouts on non-idempotent methods\n    must be considered fatal, as an attempt to automatically retry an non-idempotent\n    method may leave the application in an inconsistent state. As HttpClient can't\n    know whether a method or a sequence of methods are idempotent, it should\n    probably assume they are not. \n\nTrue.  Technically we can probably retry all methods except POST and PUT, but I think in practice this \nwould be dangerous.\n\n    In this case rethrowing socket timeout as a recoverable exception sounds wrong, \n    at least from the conceptual standpoint.\n\nI agree.  I think the problem lies in the whole concept of recoverable exceptions.  We are attempting to \ndetermine recoverability at the point the exception is thrown, but this decision should really be made \nby the code that catches the exception.  Perhaps we should ditch the whole concept of recoverable \nexceptions and just base it on other factors.\n\n    I do agree that it might make sense to have connect timeouts treated as\n    recoverable exceptions. The trouble is that currently only method execution can\n    be retried automatically, and connection cannot.\n\nYes, this would be an enhancement.\n\nMike",
            "date": "2004-07-04T04:57:01.000+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I tend to agree that the whole auto-recovery mechanism the way it is\nimplementent now is flawed. Simply put, any IOException can potentially be\ntreated as recoverable provided the application layer ensures methods'\nidempotentcy. \n\nAll it basically takes is this\n\n    boolean retryMethod(\n        HttpMethod method, \n        IOException exception,\n        int executionCount);\n\nThe question is do we want to fix it now or do we want to fix it later?\n\nThis is what I can live with for now (the patch coming shortly). Let me know\nwhat you think\n\nOleg",
            "date": "2004-07-04T05:08:45.000+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=12021)\nPatch (take 2)\n",
            "date": "2004-07-04T05:09:56.000+0000",
            "id": 6
        },
        {
            "author": "Michael Becke",
            "body": "Hi Oleg,\n\nThat's pretty good.  I think we should also consider making the change to the MethodRetryHandler and \ndeprecating the recoverable exception.  The question I guess is how many people have implemented a \ncustom MethodRetryHandler.\n\nMike",
            "date": "2004-07-04T05:34:30.000+0000",
            "id": 7
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=12025)\nPatch (take 3)\n",
            "date": "2004-07-05T01:11:28.000+0000",
            "id": 8
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Here's my previous patch + pesky HttpRecoverableException no more. The patch\nretains full API compatibility with the 2.0-style method retry handlers. The old\nhandlers should remain fully functional. \n\nLet me know what you think\n\nOleg",
            "date": "2004-07-05T01:17:39.000+0000",
            "id": 9
        },
        {
            "author": "Michael Becke",
            "body": "Looks good.  +1 for me.\n\nMike",
            "date": "2004-07-06T04:30:19.000+0000",
            "id": 10
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch committed.\n\nOleg",
            "date": "2004-07-06T05:51:16.000+0000",
            "id": 11
        }
    ],
    "component": "HttpClient (classic)",
    "description": "Folks,\nWhile working on the exception handling guide for the 3.0-alpha2 release I\nstumbled upon a problem with HttpTimeoutException and its subclasses. In 3.0a1\nHttpTimeoutException subclasses HttpRecoverableException which causes HTTP\nmethods failed due to a connect or socket timeout to be automatically retried. \n\n[INFO] HttpMethodDirector - -Recoverable exception caught when processing request\n[INFO] HttpMethodDirector - -Recoverable exception caught when processing request\n[INFO] HttpMethodDirector - -Recoverable exception caught when processing request\n[INFO] HttpMethodDirector - -Recoverable exception caught when processing request\n[WARN] HttpMethodDirector - -Recoverable exception caught but\nMethodRetryHandler.retryMethod() returned false, rethrowing exception\norg.apache.commons.httpclient.IOTimeoutException: Read timed out\n\tat\norg.apache.commons.httpclient.HttpConnection$WrappedInputStream.handleException(HttpConnection.java:1350)\n\tat\norg.apache.commons.httpclient.HttpConnection$WrappedInputStream.read(HttpConnection.java:1360)\n\tat java.io.FilterInputStream.read(FilterInputStream.java:66)\n\tat java.io.PushbackInputStream.read(PushbackInputStream.java:120)\n\tat org.apache.commons.httpclient.HttpParser.readRawLine(HttpParser.java:76)\n\tat org.apache.commons.httpclient.HttpParser.readLine(HttpParser.java:104)\n\tat org.apache.commons.httpclient.HttpConnection.readLine(HttpConnection.java:1054)\n\tat\norg.apache.commons.httpclient.HttpMethodBase.readStatusLine(HttpMethodBase.java:1785)\n\tat\norg.apache.commons.httpclient.HttpMethodBase.readResponse(HttpMethodBase.java:1546)\n\tat org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:977)\n\tat\norg.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:383)\n\tat\norg.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:164)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:437)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:324)\n\tat Test.main(Test.java:13)\nCaused by: java.net.SocketTimeoutException: Read timed out\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:129)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:182)\n\tat\norg.apache.commons.httpclient.HttpConnection$WrappedInputStream.read(HttpConnection.java:1358)\n\t... 13 more\nException in thread \"main\" \n\nThis probably is not what we want. Besides, for non-idempotent methods this may\nsimply be fatal and result in all sorts of unpleasant side-effects.\n\nOne possibilty that I personally favour is to make HttpTimeoutException class\nextend IOException instead of HttpRecoverableException. There are others. The\nquestion is whether timeout exceptions should be considered recoverable from the\nconseptual standpoint. What do you think?\n\nOleg",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-358",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Auto method retrial broken",
    "systemSpecification": true,
    "version": "3.0 Alpha 1"
}