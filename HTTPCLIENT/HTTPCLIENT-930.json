{
    "comments": [
        {
            "author": "Oleg Kalnichevski",
            "body": "We had similar reports in the past and they all were rejected as invalid, see HTTPCLIENT-778 for example.\n\nI am also not sure the way browsers handle this kind of problems can be defined as graceful. I _suspect_ that browsers simply use the good ol' principle of garbage in - garbage out and do not even attempt to escape redirect urls.  \n\nWhat theoretically can be done about is the following: the abs_path and query parts of the redirect URI are scanned for illegal characters and if any is found the entire URI is considered un-escaped. This of course does not help if you have situations like that:\n\n /garbage%20in%20garbage%20?param={screw you all}.\n\nBottom line: malformed request URIs are inherently ambiguous and there is nothing that can be done about it.\n\nOleg\n ",
            "date": "2010-04-02T19:32:00.365+0000",
            "id": 0
        },
        {
            "author": "Ryan Stewart",
            "body": "Yeah, I can't disagree with any of that. For my application, at least, I'll have to try the \"escape if it looks unescaped\" thing. If you don't want to add support for that in HttpClient, can I get a new method in DefaultRedirectHandler that I can override and add this behavior to? Either:\nprotected String getLocation(HttpResponse response) { ... }\nor\nprotected URI createLocationUri(String location) { ... }\n\nExtract one (or both) of these methods from the getLocationURI method, and then I could encode the string either after it gets extracted from the response or before the URI is built.",
            "date": "2010-04-03T04:29:01.268+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Implemented in SVN trunk:\n\nhttp://svn.apache.org/viewvc?rev=930560&view=rev\n\nPlease note HttpClient 4.1 uses newer interface RedirectStrategy instead of deprecated RedirectHandler\n\nOleg ",
            "date": "2010-04-03T18:39:47.802+0000",
            "id": 2
        }
    ],
    "component": "HttpClient (classic)",
    "description": "When HttpClient is set to follow redirects, the DefaultRedirectHandler gets the redirect location from the appropriate request header and attempts to create a new java.net.URI from it. If the location contains an invalid URI character, creating the URI fails. For example, if the redirect location were \"/foo?bar=<baz/>\", it would fail because the '<' and '>' are not legal in a URI.\n\nI'm not sure if this should actually be considered a bug in HttpClient, since the website in question should probably be responsible for encoding the URI appropriately; however, browsers handle the situation gracefully, and it would be nice if this excellent library would do so as well.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-930",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Unencoded redirect URI causes exception when following redirects",
    "systemSpecification": true,
    "version": "4.0.1"
}