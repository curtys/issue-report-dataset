{
    "comments": [
        {
            "author": "Oleg Kalnichevski",
            "body": "Subba,\n\nIn both HttpClient 2.0.2 and 3.0-rc2 releases if (inputStream.available() == 0)\n check is executed inside a try/catch block. See for yourself:\n\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/HttpConnection.html#497\n\nAre you sure you are using the correct source code snapshot?\n\nOleg",
            "date": "2005-06-12T02:12:15.000+0000",
            "id": 0
        },
        {
            "author": "Subba Ayyagari",
            "body": "Oleg,\n\nI apologize for not posting the full contents of the updated isStale() method.\nHere is the full implementation of the method.\n\nIf you walk through the code for the situation where inputStream.isAvailable()\nreturns -1 (which is the case with IBM JRE 1.4.1), the new code forces the\nfinally block to execute setSoTimeout which will fail thus returning \"true\" from\nthe isStale method.\n\nWith the old code, it never throws exception thus returning \"false\" from the\nisStale method. This leaves a closed connection to sit in the pool, which later\ncauses the executeMethod to fail (as shown in the stack trace in the logs\nattached with the original post).\n\nYou can simulate the failure by enabling connection pooling, and submitting two\nrequests with a think time of 60sec between them using IBM JRE. That 60sec (may\nvary with WebServer configuration I guess) will force the connection to go stale.\n\n\nPlease let me know if I explained the situation properly or not.\n\nThanks\n\n=============================\n    protected boolean isStale() {\n        boolean isStale = true;\n        if (isOpen) {\n            // the connection is open, but now we have to see if we can read it\n            // assume the connection is not stale.\n            isStale = false;\n            try {\n                try {            \t\n                \tif (inputStream.available() == 0) {\n                        socket.setSoTimeout(1);\n                        inputStream.mark(1);\n                        int byteRead = inputStream.read();\n                        if (byteRead == -1) {\n                            // again - if the socket is reporting all data read,\n                            // probably stale\n                            isStale = true;\n                        } else {\n                            inputStream.reset();\n                        }\n                    }                        \n                } finally {\n                    socket.setSoTimeout(soTimeout);\n                }\n            } catch (InterruptedIOException e) {\n                // aha - the connection is NOT stale - continue on!\n            } catch (IOException e) {\n                // oops - the connection is stale, the read or soTimeout failed.\n                LOG.debug(\n                    \"An error occurred while reading from the socket, is appears\nto be stale\",\n                    e\n                );\n                isStale = true;\n            }\n        }\n\n        return isStale;\n    }\n=======================================",
            "date": "2005-06-13T23:06:58.000+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Subba,\nWouldn't this be a better fix?\n\nIndex: src/java/org/apache/commons/httpclient/HttpConnection.java\n===================================================================\n--- src/java/org/apache/commons/httpclient/HttpConnection.java\t(revision 190386)\n+++ src/java/org/apache/commons/httpclient/HttpConnection.java\t(working copy)\n@@ -499,7 +499,7 @@\n             // assume the connection is not stale.\n             isStale = false;\n             try {\n-                if (inputStream.available() == 0) {\n+                if (inputStream.available() <= 0) {\n                     try {\n                         socket.setSoTimeout(1);\n                         inputStream.mark(1);\n\n\nPS: if you know your way around SVN please submit your patch in diff -u format\n",
            "date": "2005-06-14T01:09:05.000+0000",
            "id": 2
        },
        {
            "author": "Subba Ayyagari",
            "body": "Oleg,\n\nPerfect. Works for me.\n\nThanks\nSubba.",
            "date": "2005-06-14T01:40:15.000+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=15389)\nPatch\n\nIf hear no complaints i'll commit the patch in a few days\n\nOleg",
            "date": "2005-06-14T01:49:17.000+0000",
            "id": 4
        },
        {
            "author": "Michael Becke",
            "body": "Looks good.\n\nMike",
            "date": "2005-06-14T12:11:24.000+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch committed.\n\nOleg",
            "date": "2005-06-15T03:44:45.000+0000",
            "id": 6
        }
    ],
    "component": "HttpClient (classic)",
    "description": "OS: Windows/AIX\nJRE: IBM JRE 1.4.1\nJSSE: IBM's implementation (SSLite?)\nHttpClient Library: 2.0.2 release\n\nMy code enabled connection pooling feature to gain performance improvement in \nthe SSL Handshake area. The code works perfectly on Sun JRE 1.4.2 with a think \ntime of 60seconds between requests, but the same code fails on IBM JRE. On IBM \nJRE, the code fails to detech stale connections, thus causing down the stream \nsetSoTimeout() call to fail.\n\nFurther debugging into the library code revealed difference in the way the \nHTTPConnection.isStale() behaves. With in that method, particularly, the \ninputStream.isAvailable() method returns 0 with Sun JRE but -1 with IBM JRE.\n\nI made a small code change to HttpConnection.isStale() method by moving the try\n{}finally{} block outside of the if(inputStream.isAvailable()==0) check in the \nfollowing code and BINGO, everything started working on IBM JVM\u0092s. It did not \nbreak anything on Sun\u0092s JVM.\n\n============== CODE BEGIN\n    protected boolean isStale() {\n    \tLOG.debug(\"##SUBBA## HttpConnection.isStale() got called. soTimeout=\" \n+ soTimeout);\n        boolean isStale = true;\n        if (isOpen) {\n        \tLOG.debug(\"##SUBBA## HttpConnection.isStale() got called. \nisOpen=\" + isOpen);        \t\n            // the connection is open, but now we have to see if we can read it\n            // assume the connection is not stale.\n            isStale = false;\n\n                try {         \n                    if (inputStream.available() == 0) {\t\t// ALWAYS \nRETURNS -1 on IBM JVM \u0085 0 on SUN\n                    \t\n\t\t  // try {\t\t// SUBBA \u0096 MOVED OUTSIDE IF\n\t                \tsocket.setSoTimeout(1);\n\t                  \tLOG.debug(\"##SUBBA## HttpConnection.isStale() \ngot called. setSoTimeout(1)\");                    \t\n\t                    \n\t                    inputStream.mark(1);\n\t                    int byteRead = inputStream.read();\n\t                \tLOG.debug(\"##SUBBA## HttpConnection.isStale() \ngot called. bytesRead=\" + byteRead);                    \t\n\t                    \n\t                    if (byteRead == -1) {\n\t                    \tLOG.debug(\"##SUBBA## HttpConnection.isStale() \ngot called. SETTING isStale to TRUE HERE\");                    \t\n\t                    \t\n\t                        // again - if the socket is reporting all data \nread,\n\t                        // probably stale\n\t                        isStale = true;\n\t                    } else {\n\t                        inputStream.reset();\n\t                    }\n\t\t    // SUBBA \u0096 MOVED OUTSIDE IF\n                //} finally {\n                //\tLOG.debug(\"##SUBBA## HttpConnection.isStale() got \ncalled. finally block - BEGIN \" + soTimeout);                    \t\n                //    socket.setSoTimeout(soTimeout);\n                //\tLOG.debug(\"##SUBBA## HttpConnection.isStale() got \ncalled. finally block - DONE\");                        \n               // }\n\n\t\n                    }                        \n                } finally {\n                \tLOG.debug(\"##SUBBA## HttpConnection.isStale() got \ncalled. finally block - BEGIN \" + soTimeout);                    \t\n                    socket.setSoTimeout(soTimeout);\n                \tLOG.debug(\"##SUBBA## HttpConnection.isStale() got \ncalled. finally block - DONE\");                        \n                }\n.....\n.....\n.....\n========================== CODE END\n\n\nI've attached logs captured before and after the change on both the JRE's for \nyour review:\n\n==================================\nIBM\u0092s LOG (after change):\n==================================\n<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> \n<apache.commons.httpclient.MultiThreadedHttpConnectionManager:700> <Getting \nfree connection, hostConfig=HostConfiguration\n[host=uatservices30.ilab.fnfismd.com, protocol=https:443, port=443]>\n<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:492> <##SUBBA## \nHttpConnection.isStale() got called. soTimeout=0>\n<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:495> <##SUBBA## \nHttpConnection.isStale() got called. isOpen=true>\n<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:500> <##SUBBA## \nHttpConnection.isStale() got called. [class \njava.io.BufferedInputStream].available=-1>\n<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:523> <##SUBBA## \nHttpConnection.isStale() got called. finally block - BEGIN 0>\n<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:532> <An error occurred while \nreading from the socket, is appears to be stale>\njava.net.SocketException: Socket is closed\n\tat java.net.Socket.setSoTimeout(Socket.java:927)\n\tat com.ibm.sslite.bf.setSoTimeout(Unknown Source)\n\tat com.ibm.jsse.bg.setSoTimeout(Unknown Source)\n\tat org.apache.commons.httpclient.HttpConnection.isStale\n(HttpConnection.java:524)\n\tat org.apache.commons.httpclient.HttpConnection.isOpen\n(HttpConnection.java:436)\n\tat \norg.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection\nAdapter.isOpen(MultiThreadedHttpConnectionManager.java:1122)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:626)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:497)\n\tat \ncom.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest\n(ApacheHttpClient.java:69)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest\n(MsWSManager.java:86)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo\nad(MsWSManager.java:114)\n\tat com.touchpoint.pia.services.transactions.msp.MsWSManager.main\n(MsWSManager.java:179)\n<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:540> <##SUBBA## \nHttpConnection.isStale() return=true>\n<Jun 10, 2005 1:26:55 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:437> <Connection is stale, \nclosing...>\n\n==================================\nIBM\u0092s LOG (before change):\n==================================\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.MultiThreadedHttpConnectionManager:666> <enter \nHttpConnectionManager.ConnectionPool.getHostPool(HostConfiguration)>\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.MultiThreadedHttpConnectionManager:700> <Getting \nfree connection, hostConfig=HostConfiguration\n[host=uatservices30.ilab.fnfismd.com, protocol=https:443, port=443]>\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:492> <##SUBBA## \nHttpConnection.isStale() got called.>\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:495> <##SUBBA## \nHttpConnection.isStale() got called. isOpen=true>\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:500> <##SUBBA## \nHttpConnection.isStale() got called. [class \njava.io.BufferedInputStream].available=-1>\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:538> <##SUBBA## \nHttpConnection.isStale() return=false>\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:599> <HttpConnection.setSoTimeout(0)>\n<Jun 10, 2005 1:07:29 PM EDT> <WARN> \n<apache.commons.httpclient.HttpConnection:607> <##SUBBA## Socket Exception>\njava.net.SocketException: Socket is closed\n\tat java.net.Socket.setSoTimeout(Socket.java:927)\n\tat com.ibm.sslite.bf.setSoTimeout(Unknown Source)\n\tat com.ibm.jsse.bg.setSoTimeout(Unknown Source)\n\tat org.apache.commons.httpclient.HttpConnection.setSoTimeout\n(HttpConnection.java:603)\n\tat \norg.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection\nAdapter.setSoTimeout(MultiThreadedHttpConnectionManager.java:1296)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:633)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:497)\n\tat \ncom.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest\n(ApacheHttpClient.java:69)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest\n(MsWSManager.java:86)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo\nad(MsWSManager.java:114)\n\tat com.touchpoint.pia.services.transactions.msp.MsWSManager.main\n(MsWSManager.java:179)\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:1151> <enter \nHttpConnection.releaseConnection()>\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.MultiThreadedHttpConnectionManager:513> <enter \nHttpConnectionManager.releaseConnection(HttpConnection)>\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.MultiThreadedHttpConnectionManager:791> <Freeing \nconnection, hostConfig=HostConfiguration[host=uatservices30.ilab.fnfismd.com, \nprotocol=https:443, port=443]>\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.MultiThreadedHttpConnectionManager:666> <enter \nHttpConnectionManager.ConnectionPool.getHostPool(HostConfiguration)>\n<Jun 10, 2005 1:07:29 PM EDT> <DEBUG> \n<apache.commons.httpclient.MultiThreadedHttpConnectionManager:774> <Notifying \nno-one, there are no waiting threads>\njava.net.SocketException: Socket is closed\n\tat java.net.Socket.setSoTimeout(Socket.java:927)\n\tat com.ibm.sslite.bf.setSoTimeout(Unknown Source)\n\tat com.ibm.jsse.bg.setSoTimeout(Unknown Source)\n\tat org.apache.commons.httpclient.HttpConnection.setSoTimeout\n(HttpConnection.java:603)\n\tat \norg.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection\nAdapter.setSoTimeout(MultiThreadedHttpConnectionManager.java:1296)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:633)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:497)\n\tat \ncom.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest\n(ApacheHttpClient.java:69)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest\n(MsWSManager.java:86)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo\nad(MsWSManager.java:114)\n\tat com.touchpoint.pia.services.transactions.msp.MsWSManager.main\n(MsWSManager.java:179)\njava.net.SocketException: Socket is closed\n\tat java.net.Socket.setSoTimeout(Socket.java:927)\n\tat com.ibm.sslite.bf.setSoTimeout(Unknown Source)\n\tat com.ibm.jsse.bg.setSoTimeout(Unknown Source)\n\tat org.apache.commons.httpclient.HttpConnection.setSoTimeout\n(HttpConnection.java:603)\n\tat \norg.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection\nAdapter.setSoTimeout(MultiThreadedHttpConnectionManager.java:1296)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:633)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:497)\n\tat \ncom.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest\n(ApacheHttpClient.java:69)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest\n(MsWSManager.java:86)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo\nad(MsWSManager.java:114)\n\tat com.touchpoint.pia.services.transactions.msp.MsWSManager.main\n(MsWSManager.java:179)\nException in thread \"main\" java.net.SocketException: Socket is closed\n\tat java.net.Socket.setSoTimeout(Socket.java:927)\n\tat com.ibm.sslite.bf.setSoTimeout(Unknown Source)\n\tat com.ibm.jsse.bg.setSoTimeout(Unknown Source)\n\tat org.apache.commons.httpclient.HttpConnection.setSoTimeout\n(HttpConnection.java:603)\n\tat \norg.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection\nAdapter.setSoTimeout(MultiThreadedHttpConnectionManager.java:1296)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:633)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:497)\n\tat \ncom.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest\n(ApacheHttpClient.java:69)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest\n(MsWSManager.java:86)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo\nad(MsWSManager.java:114)\n\tat com.touchpoint.pia.services.transactions.msp.MsWSManager.main\n(MsWSManager.java:179)\n\n\n============================================\n**SUN\u0092s LOG (after change = before change):\n============================================\n<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> \n<apache.commons.httpclient.MultiThreadedHttpConnectionManager:700> <Getting \nfree connection, hostConfig=HostConfiguration\n[host=uatservices30.ilab.fnfismd.com, protocol=https:443, port=443]>\n<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:492> <##SUBBA## \nHttpConnection.isStale() got called. soTimeout=0>\n<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:495> <##SUBBA## \nHttpConnection.isStale() got called. isOpen=true>\n<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:500> <##SUBBA## \nHttpConnection.isStale() got called. [class \njava.io.BufferedInputStream].available=0>\n<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:506> <##SUBBA## \nHttpConnection.isStale() got called. setSoTimeout(1)>\n<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:510> <##SUBBA## \nHttpConnection.isStale() got called. bytesRead=-1>\n<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:513> <##SUBBA## \nHttpConnection.isStale() got called. SETTING isStale to TRUE HERE>\n<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:523> <##SUBBA## \nHttpConnection.isStale() got called. finally block - BEGIN 0>\n<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:532> <An error occurred while \nreading from the socket, is appears to be stale>\njava.net.SocketException: Socket Closed\n\tat java.net.PlainSocketImpl.setOption(PlainSocketImpl.java:177)\n\tat java.net.Socket.setSoTimeout(Socket.java:924)\n\tat com.sun.net.ssl.internal.ssl.SSLSocketImpl.setSoTimeout(DashoA12275)\n\tat org.apache.commons.httpclient.HttpConnection.isStale\n(HttpConnection.java:524)\n\tat org.apache.commons.httpclient.HttpConnection.isOpen\n(HttpConnection.java:436)\n\tat \norg.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnection\nAdapter.isOpen(MultiThreadedHttpConnectionManager.java:1122)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:626)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod\n(HttpClient.java:497)\n\tat \ncom.touchpoint.pia.services.transactions.msp.ApacheHttpClient.invokeRequest\n(ApacheHttpClient.java:69)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequest\n(MsWSManager.java:86)\n\tat \ncom.touchpoint.pia.services.transactions.msp.MsWSManager.invokeRequestWithPaylo\nad(MsWSManager.java:114)\n\tat com.touchpoint.pia.services.transactions.msp.MsWSManager.main\n(MsWSManager.java:179)\n<Jun 10, 2005 1:25:12 PM EDT> <DEBUG> \n<apache.commons.httpclient.HttpConnection:540> <##SUBBA## \nHttpConnection.isStale() return=true>",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-469",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Stale connection check does not work with IBM JSSE/JRE",
    "systemSpecification": true,
    "version": "2.0.2"
}