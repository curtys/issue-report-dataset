{
    "comments": [
        {
            "author": "Jonathan Moore",
            "body": "The CachedHttpResponseGenerator sets an Age header and a Via header. Is that sufficient, or would you like to see something more explicit? For example, we could add an extension header:\n\nX-HttpClient-Cache: HIT\nX-HttpClient-Cache: HIT, VALIDATED\nX-HttpClient-Cache: HIT, REFRESHED\nX-HttpClient-Cache: MISS\nX-HttpClient-Cache: UNCACHEABLE\n\netc. \n\nSquid does something similar to this.",
            "date": "2010-08-20T14:53:11.633+0000",
            "id": 0
        },
        {
            "author": "Vianney Carel",
            "body": "I didn't integrate the latest snapshot (i'm still on alpha-2), so I cannot see the Age & Via headers. I'm afraid anyway that it's not enough to know if the response has been cached or not [by the client]. Because those headers could come from the back-end server without beeing overwritten by the client, if it doesn't cache the response. Right ?\n\nAbout adding other headers to the response, I wouldn't recommand it. Actually, there wouldn't be the RFC, I wouldn't recommand adding headers at all, because one of the basics thing I expect from a cache is to keep data unchanged. Besides, it would be very confusing if a server would produce the same headers that the caching client uses.\n\nTherefore I believe that cache-related information would better be in the request's HttpContext rather than in the response's headers.\nWhat do you think ?\n\nNB: having the same kind of headers as Squid produces would be perfect for my use... but not in the response ;-)",
            "date": "2010-08-24T11:16:42.927+0000",
            "id": 1
        },
        {
            "author": "Jonathan Moore",
            "body": "Can I ask what the use case is for specifically knowing whether a response was served from the (local) cache or not? The HTTP caching mechanism has been defined to maintain semantic transparency, with the notion that a client perhaps can tell whether a response case straight from an origin server or whether it was returned by a cache, and Age headers are the existing protocol mechanism for this:\n\n\"The presence of an Age header field in a response implies that a response is not first-hand.\"\n\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.2.3\n\nNote that there may be other (proxy) caches in between the client and the origin server that may be returning a cached response as well, not just the local cache.\n\nThe HTTP RFC has a very explicit definition of semantic transparency for a proxy, and we actually have unit tests that verify this behavior with the CachingHttpClient. Note that adding additional end-to-end headers (where extension headers are end-to-end headers) does not break semantic transparency, and, as above, various intermediate proxies may well have done that to the original response sent from the origin.\n\nI'm really just bringing this up to make sure you're not expecting behavior from the local cache that may not be supported by compliant HTTP/1.1 caches in general.\n\nOk, all that being said, let's get down to use cases: why do you need to know if a *specific* response was returned by the cache or not? I think the answer to this can help us understand where the best place to deliver this would be.\n",
            "date": "2010-08-24T14:00:19.965+0000",
            "id": 2
        },
        {
            "author": "Vianney Carel",
            "body": "I only need from my end to generate a log containing the time, URL, user-agent, etc. of the request, plus the response code of the server and a flag telling if it was served from the local cache or not. That log will be used to monitor the I/O of the application using the HttpClient.\n\nI don't mind much if the caching client adds specific headers for caching. Nevertheless, from a general perspective, I would expect it to not change anything in the response except the headers mentioned in the HTTP RFC. I believe the idea of caching a response including all its headers on one hand, and returning the cached response with some headers modified on the other hand is somehow disturbing. So the less the client would do that, the happier I would be.\n\nBut... the client does cache the responses headers, doesn't it  ? (I confess I didn't check that point...)",
            "date": "2010-08-24T15:21:30.697+0000",
            "id": 3
        },
        {
            "author": "Jonathan Moore",
            "body": "Hi Vianney,\n\nYes, the cache retains the response headers it receives, and doesn't *modify* any of them except as required by the RFC (e.g. Age, Via, Warning). Any extension headers it added would be strictly additions (and thus retain the semantic meaning of the origin response).\n\nNow that I understand more of what you're asking, perhaps we could just do the following (and Oleg, perhaps you could chime in on the usual way this is done).\n\nDefine an enum which is something like CachedResponseContext with values of:\n\n* CACHE_HIT : response was generated from cache with no backend I/O\n* CACHE_MISS: no appropriate cache entry was found\n* VALIDATED: response was generated from cache after validation with origin\n\nWe could then pick a key for the HttpContext and store the result there (not sure what the proper naming convention would be here).\n\nJon",
            "date": "2010-08-24T15:51:58.035+0000",
            "id": 4
        },
        {
            "author": "Vianney Carel",
            "body": "Hi Jon,\nThat would be very fine for me. :-)",
            "date": "2010-08-24T16:56:28.246+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "A context attribute settable by CachingHttpClient sounds reasonable. Alternatively we could use a special subclass of BasicHttpResponse for responses generated from cached content, something along the line:\n\nCachedHttpResponse extends BasicHttpResponse {\n  \n  // additional attributes\n  Date requestDate;\n  Date responseDate\n  boolean validated;\n  <what not>\n\n}\n\nOleg",
            "date": "2010-08-25T12:42:33.373+0000",
            "id": 6
        },
        {
            "author": "Jonathan Moore",
            "body": "Ok, I am working on a patch for this, and would like to solicit some opinions. Current enum has:\n\nCACHE_MODULE_RESPONSE : if the response was generated directly by the caching module itself (neither pulled from the cache nor taken from an upstream response)\nCACHE_HIT : response generated from cache with no upstream request\nCACHE_MISS : response came from upstream request\nVALIDATED : response generated from cache after upstream validation\n\nIn the case where a cache entry is stale, and validation fails due to an IOException, the CachingHttpClient currently either:\n(a) generates a 502 (Gateway Timeout) for must-revalidate and proxy-revalidate responses. I'm guessing this should be CACHE_MODULE_RESPONSE.\n(b) generates a stale cache entry and attaches a Warning header. Should this be CACHE_HIT?\n\nOr do we need new enum values to cover these cases?\n",
            "date": "2010-08-25T14:36:02.195+0000",
            "id": 7
        },
        {
            "author": "Jonathan Moore",
            "body": "I've attached a patch to set an attribute on an incoming HttpContext detailing how a request got handled by CachingHttpClient.\n\nI selected a key of \"http.cache.response.context\" (this is a public constant on CachingHttpClient), although I'm not familiar with the usual conventions for this. The attribute values are members of the CacheResponseContext enum.\n\nThis patch is contributed with the permission of my employer.\n",
            "date": "2010-08-25T14:45:25.408+0000",
            "id": 8
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in. I made one change, though. I renamed CacheResponseContext to CacheResponseStatus, as the term 'context' bears a different connotation in the HttpClient API. I hope this is okay with. If not, let us think of a better term / enum name.\n\nOleg",
            "date": "2010-08-27T19:41:53.941+0000",
            "id": 9
        },
        {
            "author": "Jonathan Moore",
            "body": "I'm fine with the \"Status\" naming--I wasn't really happy with the \"Context\" naming either. Thanks!",
            "date": "2010-08-27T20:56:25.362+0000",
            "id": 10
        }
    ],
    "component": "HttpCache",
    "description": "Is there a way to know if the response has been served from the cache or not ?\nThat's an information which might be useful for monitoring the activity of the cache.\n\nIf there's no current way, maybe a flag could be added in the request context whenever the response comes from the cache ... ?\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-982",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Trivial",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Could we get a way to know if the response has been served from the cache or not ?",
    "systemSpecification": true,
    "version": "4.1 Alpha2"
}