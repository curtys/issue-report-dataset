{
    "comments": [
        {
            "author": "Oleg Kalnichevski",
            "body": "I fixed NPE in ClientGZipContentCompression in SVN trunk. Many thanks for reporting the problem.\n\nOleg",
            "date": "2012-04-10T19:37:55.509+0000",
            "id": 0
        }
    ],
    "component": "HttpClient (classic)",
    "description": "When you try to execute a HttpHead object instead of a HttpGet object while using the add request/response interceptors, you get a nullpointerexception.\n\nI can replicate the exception when using the ClientGZipContentCompression example that can be found at the HttpClient examples. But instead of using the HttpGet object I execute a HttpHead object. When I comment the interceptor parts out, I don't get the exception. \n\nThis is the error stack trace I get when executing the code in netbeans:\n\nException in thread \"main\" java.lang.NullPointerException\n\tat testhttphead.ClientGZipContentCompression$2.process(ClientGZipContentCompression.java:74)\n\tat org.apache.http.protocol.ImmutableHttpProcessor.process(ImmutableHttpProcessor.java:116)\n\tat org.apache.http.protocol.HttpRequestExecutor.postProcess(HttpRequestExecutor.java:342)\n\tat org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:472)\n\tat org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:820)\n\tat org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:754)\n\tat org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:732)\n\tat testhttphead.ClientGZipContentCompression.main(ClientGZipContentCompression.java:92)\nJava Result: 1\n\nHere is the code that gives me the error:\n\npackage testhttphead;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.zip.GZIPInputStream;\nimport org.apache.http.*;\nimport org.apache.http.client.methods.HttpHead;\nimport org.apache.http.entity.HttpEntityWrapper;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.protocol.HttpContext;\nimport org.apache.http.util.EntityUtils;\n\n/**\n * Demonstration of the use of protocol interceptors to transparently modify\n * properties of HTTP messages sent / received by the HTTP client.\n * <p/>\n * In this particular case HTTP client is made capable of transparent content\n * GZIP compression by adding two protocol interceptors: a request interceptor\n * that adds 'Accept-Encoding: gzip' header to all outgoing requests and a\n * response interceptor that automatically expands compressed response entities\n * by wrapping them with a uncompressing decorator class. The use of protocol\n * interceptors makes content compression completely transparent to the consumer\n * of the {@link org.apache.http.client.HttpClient HttpClient} interface.\n */\npublic class ClientGZipContentCompression {\n\n    public final static void main(String[] args) throws Exception {\n        DefaultHttpClient httpclient = new DefaultHttpClient();\n\n        try {\n            httpclient.addRequestInterceptor(new HttpRequestInterceptor() {\n\n                public void process(\n                        final HttpRequest request,\n                        final HttpContext context) throws HttpException, IOException {\n                    if (!request.containsHeader(\"Accept-Encoding\")) {\n                        request.addHeader(\"Accept-Encoding\", \"gzip\");\n                    }\n                }\n            });\n\n            httpclient.addResponseInterceptor(new HttpResponseInterceptor() {\n\n                public void process(\n                        final HttpResponse response,\n                        final HttpContext context) throws HttpException, IOException {\n                    HttpEntity entity = response.getEntity();\n                    Header ceheader = entity.getContentEncoding();\n                    if (ceheader != null) {\n                        HeaderElement[] codecs = ceheader.getElements();\n                        for (int i = 0; i < codecs.length; i++) {\n                            if (codecs[i].getName().equalsIgnoreCase(\"gzip\")) {\n                                response.setEntity(\n                                        new GzipDecompressingEntity(response.getEntity()));\n                                return;\n                            }\n                        }\n                    }\n                }\n            });\n\n            HttpHead httpHead = new HttpHead(\"http://www.howest.be\");\n\n            // Execute HTTP request\n            System.out.println(\"executing request \" + httpHead.getURI());\n            HttpResponse response = httpclient.execute(httpHead);\n\n            System.out.println(\"----------------------------------------\");\n            System.out.println(response.getStatusLine());\n            System.out.println(response.getLastHeader(\"Content-Encoding\"));\n            System.out.println(response.getLastHeader(\"Content-Length\"));\n            System.out.println(\"----------------------------------------\");\n\n            HttpEntity entity = response.getEntity();\n\n            if (entity != null) {\n                String content = EntityUtils.toString(entity);\n                System.out.println(content);\n                System.out.println(\"----------------------------------------\");\n                System.out.println(\"Uncompressed size: \" + content.length());\n            }\n\n        } finally {\n            // When HttpClient instance is no longer needed,\n            // shut down the connection manager to ensure\n            // immediate deallocation of all system resources\n            httpclient.getConnectionManager().shutdown();\n        }\n    }\n\n    static class GzipDecompressingEntity extends HttpEntityWrapper {\n\n        public GzipDecompressingEntity(final HttpEntity entity) {\n            super(entity);\n        }\n\n        @Override\n        public InputStream getContent()\n                throws IOException, IllegalStateException {\n\n            // the wrapped entity's getContent() decides about repeatability\n            InputStream wrappedin = wrappedEntity.getContent();\n\n            return new GZIPInputStream(wrappedin);\n        }\n\n        @Override\n        public long getContentLength() {\n            // length of ungzipped content is not known\n            return -1;\n        }\n    }\n}\n\nWith kind regards,\n\nPeter",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-1180",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "NullPointerException when using HttpHead and Request/Response interceptors",
    "systemSpecification": true,
    "version": "4.1.3"
}