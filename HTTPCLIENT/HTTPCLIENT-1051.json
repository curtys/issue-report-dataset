{
    "comments": [
        {
            "author": "Oleg Kalnichevski",
            "body": "I am not able to reproduce the problem. SSL connections to remote peers pass the default host name verification.\n\n---\nexecuting requestGET https://www.verisign.com/ HTTP/1.1\n[DEBUG] SingleClientConnManager - Get connection for route HttpRoute[{s}->https://www.verisign.com]\n[DEBUG] DefaultClientConnectionOperator - Connecting to www.verisign.com/69.58.181.89:443\n[DEBUG] RequestAddCookies - CookieSpec selected: best-match\n[DEBUG] DefaultHttpClient - Attempt 1 to execute request\n[DEBUG] DefaultClientConnection - Sending request: GET / HTTP/1.1\n[DEBUG] headers - >> GET / HTTP/1.1\n[DEBUG] headers - >> Host: www.verisign.com\n[DEBUG] headers - >> Connection: Keep-Alive\n[DEBUG] headers - >> User-Agent: Apache-HttpClient/4.1 (java 1.5)\n[DEBUG] DefaultClientConnection - Receiving response: HTTP/1.1 200 OK\n[DEBUG] headers - << HTTP/1.1 200 OK\n[DEBUG] headers - << Date: Thu, 03 Feb 2011 20:14:35 GMT\n[DEBUG] headers - << Server: Apache\n[DEBUG] headers - << Set-Cookie: v1st=D732270AE4FC9F76; path=/; expires=Wed, 19 Feb 2020 14:28:00 GMT; domain=.verisign.com\n[DEBUG] headers - << Set-Cookie: v1st=D732270AE4FC9F76; path=/; expires=Wed, 19 Feb 2020 14:28:00 GMT; domain=.verisign.com\n[DEBUG] headers - << X-Powered-By: PHP/5.2.13\n[DEBUG] headers - << Keep-Alive: timeout=5, max=100\n[DEBUG] headers - << Connection: Keep-Alive\n[DEBUG] headers - << Transfer-Encoding: chunked\n[DEBUG] headers - << Content-Type: text/html\n[DEBUG] ResponseProcessCookies - Cookie accepted: \"[version: 0][name: v1st][value: D732270AE4FC9F76][domain: .verisign.com][path: /][expiry: Wed Feb 19 15:28:00 GMT+01:00 2020]\". \n[DEBUG] ResponseProcessCookies - Cookie accepted: \"[version: 0][name: v1st][value: D732270AE4FC9F76][domain: .verisign.com][path: /][expiry: Wed Feb 19 15:28:00 GMT+01:00 2020]\". \n[DEBUG] DefaultHttpClient - Connection can be kept alive for 5000 MILLISECONDS\n----------------------------------------\nHTTP/1.1 200 OK\nResponse content length: -1\n[DEBUG] SingleClientConnManager - Releasing connection org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter@15ad5c6\n[DEBUG] DefaultClientConnection - Connection shut down\n---\n\nAre you using a custom SSL socket factory by any chance? Does it implement the LayeredSchemeSocketFactory interface?\n\nOleg",
            "date": "2011-02-03T20:18:21.480+0000",
            "id": 0
        },
        {
            "author": "Alex Dupre",
            "body": "Wrong test. Try to connect to https://93.62.162.60:8443/. The certificate has CN=93.62.162.60, but the check is done for 93-62-162-60.ip23.fastwebnet.it",
            "date": "2011-02-03T20:23:41.938+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I had to resort to a fairly ugly hack in order to fix the problem. A better solution would require changes to the X509HostnameVerifier API. I felt that deprecation of the X509HostnameVerifier interface was not warranted, as the use of an IP address for CN in a certificate was a hack by itself.\n\nPlease review.\n\nOleg ",
            "date": "2011-03-07T14:53:28.877+0000",
            "id": 2
        },
        {
            "author": "Alex Dupre",
            "body": "Well, I looked at the patch. It should fix the issue (though not completely, since the reverse lookup could give a wrong/unresolvable hostname), but as you said it's a crude hack, and this opens to other security issues. Unfortunately the clean fix requires API modification.\n\nYou say using an IP address as CN is a hack, but actually using it as an ipAddress SubjectAlternativeName is perfectly valid.\n\nThe security issues arise from the fact that httpclient tries to match dns generated data (reverse lookups and now also resolved hostnames) instead of what the user actually typed, opening to DNS poisoning or connection redirect attacks.\n\nFirst scenario:\n- user wants to connect to 1.2.3.4\n- DNS reverse lookup is xxx.yyy.zzz\n- a malicious proxy redirects the connection to server 4.3.2.1\n- server certificate contains CN or SAN set to xxx.yyy.zzz\n- All OK (but shouldn't)\n\nSecond scenario:\n- user wants to connect to xxx.yyy.zzz\n- hacked DNS incorrectly resolve it to 1.2.3.4\n- server certificate has CN or SAN set to 1.2.3.4\n- The connection is established OK (but clearly shouldn't)\n\n",
            "date": "2011-03-07T16:08:48.752+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Fair enough. I'll revert the patch and close the issue as WONTFIX\n\nOleg",
            "date": "2011-03-07T16:45:01.329+0000",
            "id": 4
        },
        {
            "author": "Alex Dupre",
            "body": "Hmm, my comment was not meant to revert the patch. The first scenario was already exploitable and still is. Your patch is the \"correct\" solution without breaking the API.\n\nBut to avoid any security issue (including the ones already present) the API have to be changed.",
            "date": "2011-03-07T18:15:53.210+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "The first scenario you are describing would also require involvement of green men from Mars and the malicious 4.3.2.1 server sending a certificate trusted by the client to be practical. \n\nOleg",
            "date": "2011-03-07T20:09:09.916+0000",
            "id": 6
        },
        {
            "author": "Alex Dupre",
            "body": "Even the second one requires the server presenting a trusted certificate. I don't see much difference beetween the two cases.",
            "date": "2011-03-08T06:42:50.997+0000",
            "id": 7
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I committed a slightly better workaround for the problem that does not require reverse DNS lookups.\n\nOleg",
            "date": "2011-03-09T13:11:47.001+0000",
            "id": 8
        },
        {
            "author": "Alex Dupre",
            "body": "Great work, good patch, thanks!",
            "date": "2011-03-09T14:09:37.069+0000",
            "id": 9
        }
    ],
    "component": "HttpClient (classic)",
    "description": "HttpClient 4.1 introduced a regression in establishing SSL connections to remote peers (it seems this is a common regression for major httpclient updates, see HTTPCLIENT-803).\nThe new SSLSocketFactory.connectSocket method calls the X509HostnameVerifier with InetSocketAddress.getHostName() parameter. When the selected IP address has a reverse lookup name, the verifier is called with the resolved name, and so the IP check fails.\n4.0 release checked for original ip/hostname, but this cannot be done with the new connectSocket() method. \nThe TestHostnameVerifier.java only checks 127.0.0.1/.2 and so masked the issue, because the matching certificate has both \"localhost\" and \"127.0.0.1\", but actually only \"localhost\" is matched. A test case with 8.8.8.8 would be better.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-1051",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "SSL connections cannot be established using resolvable IP address",
    "systemSpecification": true,
    "version": "4.1 Final"
}