{
    "comments": [
        {
            "author": "Jeff Dever",
            "body": "Some suggestions to be applied across the package:\n\n1) log.trace(\"enter SomeClass.SomeMethod(Object, Object)\") on every method entry\n2) Only log exception stack traces at the debug level\n3) Any swallowed exceptions should log the exception at the debug level\n4) Info messages should be suitable for users to view",
            "date": "2002-07-16T11:44:52.000+0000",
            "id": 0
        },
        {
            "author": "Jeff Dever",
            "body": "More refined:\n\n1) Log the entry to every method at the trace level.  (exits not required\ndue to difficulty in determing exit points)\n        log.trace(\"enter SomeClass.SomeMethod(Class, Class)\");\n\n2) Only/always log exception stack traces at the debug level\n        } catch (Exception ex) {\n            log.debug\n\n3) Any swallowed exceptions should log the exception at the debug level\n        try {\n            thread.sleep();\n        } catch (InterruptedException ie) {\n            //expected\n            log.debug(\"Caught interrupted exception\");\n        }\n\n4) Error,Warn,Info messages should be suitable for users to view.  Code\nspecific details should be kept to Debug and Trace. \n\n5) instantiate one static logger per class like this:\n        private static final Log log = LogFactory.getLog(CLASS.class);\n\n6) Any messages that are passed over an open network connection should be\nlogged on the wirelog:\n        private static final Log wireLog =\nLogFactory.getLog(\"httpclient.wire\");\n\n7) Any logging statement that causes other method calls in the construction\nof its arguments must be protected by a isXXXEnabled() conditional (except\nwhen already protected by a try/catch block):\n        if (log.isDebugEnabled() {\n            log.debug(\"some text\" + someVar + \"some more text\");\n        }\n        try {\n            //some code\n        } catch (Exception ex) {\n            log.warn(\"Failed to execute some code: \" + ex.getMessage());\n            log.debug(\"Unexpected exception caught\", ex);\n        }\n\n8) At this point there will be no internationalization of logging messages,\nbut it may be added in the future.",
            "date": "2002-07-29T01:00:16.000+0000",
            "id": 1
        },
        {
            "author": "Jeff Dever",
            "body": "Created an attachment (id=2510)\nFirst pass through all classes for logging policy changes.\n",
            "date": "2002-07-29T01:03:18.000+0000",
            "id": 2
        },
        {
            "author": "Jeff Dever",
            "body": "*** HTTPCLIENT-93 has been marked as a duplicate of this bug. ***",
            "date": "2002-07-30T07:17:26.000+0000",
            "id": 3
        },
        {
            "author": "Jeff Dever",
            "body": "Created an attachment (id=2522)\nMake all wireLog output be at debug level.\n",
            "date": "2002-07-30T09:58:52.000+0000",
            "id": 4
        },
        {
            "author": "Jeff Dever",
            "body": "Complete.",
            "date": "2002-12-17T08:27:33.000+0000",
            "id": 5
        }
    ],
    "component": "HttpClient (classic)",
    "description": "When to use info vs debug vs warning?  \nWhen to log exceptions?\nenter() and exit() messages on a per method basis?\nAlways log debug when swallowing an exception?",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-57",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Define and implement Logging policy",
    "systemSpecification": false,
    "version": "2.0 Alpha 1"
}