{
    "comments": [
        {
            "author": "Alin Vasile",
            "body": "Proof of concept work. If this is OK I can add a set of unit tests and put the ASF headers to the source files.",
            "date": "2011-09-02T20:03:30.007+0000",
            "id": 0
        },
        {
            "author": "Alin Vasile",
            "body": "Updated patch with examples for custom DNS resolving on auto-redirects. Please review ...",
            "date": "2011-09-03T07:14:13.992+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Looks good to me. However, I think it would be slightly cleaner to provide an additional constructor to DefaultClientConnectionOperator and PoolingClientConnectionManager that takes DnsOverrider as an optional (nullable) parameter. I also think DnsResolver might be a better name for that interface that DnsOverrider. Otherwise, all is good. Please go ahead and add ASL headers and test cases. Please make sure to use spaces instead of tabs for indentation.\n\nOleg",
            "date": "2011-09-03T15:31:30.868+0000",
            "id": 2
        },
        {
            "author": "Alin Vasile",
            "body": "Thanks for the review. In the initial proof-of-concept I didn't wanted to touch the existing API, so I extended the classes where I plugged in the new functionality.\n\nI attached a new patch incorporating all your comments.",
            "date": "2011-09-04T17:57:10.073+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "The patch is too 'noisy' (a lot of changes are due to different formatting, line wrapping, etc), which makes it difficult to review. Could you please create a new patch with the least amount of non-functional changes?\n\nOleg ",
            "date": "2011-09-04T19:41:36.087+0000",
            "id": 4
        },
        {
            "author": "Alin Vasile",
            "body": "Sorry about the noise. Attached a (hopefully) much cleaner version. Also I moved the DnsResolver interface from the package org.apache.http.impl.conn to org.apache.http.conn.",
            "date": "2011-09-05T08:14:43.717+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Almost there. I think it would be better if the DnsResolver was always to resolve hostname to an address or throw an UnknownHostException if the address could not be resolved instead of returning null. Individual implementations may choose to fall back onto InetAddress#getAllByName when appropriate or signal failure to resolve the hostname by throwing UnknownHostException.\n---\npublic interface DnsResolver {\n\n    InetAddress[] resolve(String host) throws UnknownHostException;\n\n}\n---\nWhat do you think?\n\nOleg",
            "date": "2011-09-05T19:01:05.885+0000",
            "id": 6
        },
        {
            "author": "Alin Vasile",
            "body": "This is a good idea; in this way we favour exceptions instead of custom\nreturns such as null.",
            "date": "2011-09-05T19:41:47.335+0000",
            "id": 7
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in with some minor tweaks.\n\nOleg",
            "date": "2011-09-06T12:24:06.519+0000",
            "id": 8
        },
        {
            "author": "Alin Vasile",
            "body": "Default DNS resolver that will translate the host names to IP addresses using the OS configuration.",
            "date": "2011-09-06T19:37:50.902+0000",
            "id": 9
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in.\n\nOleg",
            "date": "2011-09-06T21:29:44.603+0000",
            "id": 10
        },
        {
            "author": "Alin Vasile",
            "body": "\nPoolingClientConnectionManager constructor doesn't pick the provided dns resolver, but instead always goes with SystemDefaultDnsResolver:\n\npublic PoolingClientConnectionManager(final SchemeRegistry schemeRegistry,\n                final long timeToLive, final TimeUnit tunit,\n                final DnsResolver dnsResolver) {\n        super();\n        if (schemeRegistry == null) {\n            throw new IllegalArgumentException(\"Scheme registry may not be null\");\n        }\n        this.schemeRegistry = schemeRegistry;\n        this.dnsResolver  = new SystemDefaultDnsResolver();\n        this.operator = createConnectionOperator(schemeRegistry);\n        this.pool = new HttpConnPool(this.log, 2, 20, timeToLive, tunit);\n    }",
            "date": "2011-10-10T20:04:59.790+0000",
            "id": 11
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Fixed.\n\nOleg",
            "date": "2011-10-10T20:19:05.660+0000",
            "id": 12
        }
    ],
    "component": "HttpClient (classic)",
    "description": "When working with HttpClient in restrictive environments, where the user doesn't have the permissisions to edit the local /etc/hosts file or the DNS configuration, can be eased with an DNS Overrider capability. \n\nThis can be useful with JMeter which can follow redirects automatically and resolve some of the redirected hosts against its configuration. Another example is a custom forward proxy, written in Java and based on httpclient, which can be deployed is such a restricted environment that would ease the development of various web solutions for some developers. ",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-1123",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Implement a way to override or resolve DNS entries defined in the OS",
    "systemSpecification": true,
    "version": ""
}