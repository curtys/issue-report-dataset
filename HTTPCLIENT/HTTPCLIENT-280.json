{
    "comments": [
        {
            "author": "Adam Jack",
            "body": "Created an attachment (id=8513)\ntrace log\n",
            "date": "2003-10-10T00:14:22.000+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Can it be that your code does not execute HttpMethod#releaseConnection under \nsome circumstances?\n\nUsual method execution pattern should look something like that:\n\nHttpClient httpclient = new HttpClient();\nHttpMethod httpget = new GetMethod(\"http://www.whatever.com/\");\ntry {\n  httpclient.executeMethod(httpget);\n} finally {\n  httpget.releaseConnection();\n}\n",
            "date": "2003-10-10T00:16:39.000+0000",
            "id": 1
        },
        {
            "author": "Adam Jack",
            "body": "Unfortunately VFS is the user, I can dig into it and look, but I'm no expert on \ntheir code. Could you tell from the run log?\n\nFWIIW: Simple loops [based of the test code Mike wrote for the last bug I \nsubmit] do not seem to reproduce it. It can do it 100 time w/ problem. Somehow \nthere must be an issue w/ the sequence of calls made by me/VFS, or something.\n\nAs such, I've attached the run log of a program the reproduces the problem. \nHopefully that'll give some pointers.",
            "date": "2003-10-10T00:20:16.000+0000",
            "id": 2
        },
        {
            "author": "Adam Jack",
            "body": "Created an attachment (id=8514)\nThis is the VFS source code. There are two other files, but this is the key one, I beleive.\n",
            "date": "2003-10-10T00:22:46.000+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Adam,\nPlease check if your code _always_ closes the input stream obtained with\nHttpFileObject#doGetInputStream(). If it does not, the connection used by the \nHttpFileObject instance is not correctly released.\n\nOleg\n",
            "date": "2003-10-10T00:29:21.000+0000",
            "id": 4
        },
        {
            "author": "Adam Jack",
            "body": "I suspect this code below could lead to such a leak, but I only see one 404 in \nthe log I sent. Also, that 404 was the response to a HEAD not a GET because I \ntest existence  before I try to read it.\n\nI do see some 301's, but it uses 'follow redirects' so I doubt that is the \nissue up in VFS user code.\n\n protected InputStream doGetInputStream()\n        throws Exception\n    {\n        final GetMethod getMethod = new GetMethod();\n        setupMethod( getMethod );\n        final int status = fileSystem.getClient().executeMethod( getMethod );\n        if ( status != HttpURLConnection.HTTP_OK )\n        {\n            throw new FileSystemException( \"vfs.provider.http/get.error\", \ngetName() );\n        }\n\n        return new HttpInputStream( getMethod );\n    }",
            "date": "2003-10-10T00:51:43.000+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Adam,\nAccording to the log you posted HttpMethod#releaseConnection method does not\nseem to be ever called at all. I beleive the connection leak is caused by either\nVFS or your own code. The VFS has a simple but effective safe-guard to guarantee\n the release of connections. It wraps the input stream returned by the GetMethod\nwith a MonitorInputStream that _should_ automatically release the connection\nwhen the InputStream#close method is called. \n\nI have to ask you the same question again: are you sure the your code _always_\ncloses the input stream obtained with HttpFileObject#doGetInputStream()? If it\ndoes not, that call well be the cause of the leak\n\nOleg",
            "date": "2003-10-10T04:33:11.000+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "And there's surely a bug in VFS code. Basically every non-HTTP_OK response\n_always_ results in a connection leak.\n\nif ( status != HttpURLConnection.HTTP_OK )\n{\n  // !!!!!!!!\n  getMethod.releaseConnection();\n  // !!!!!!!!\n  throw new FileSystemException( \"vfs.provider.http/get.error\", getName() );\n}\n\n",
            "date": "2003-10-10T04:44:58.000+0000",
            "id": 7
        },
        {
            "author": "Adam Jack",
            "body": "1) FWIIW: I suspect the VFS guy(s) would say they do a HEAD before they do any \nGET (so ought not get that excpetion). Still, yeah, I agree, it'd be nicer if \nthey release the connection.\n\n2) On closer inspection of the code on top of VFS, yeah, I do see some \nweakness -- and some (long shot) leaks. I've patched those now. That said, \nkinda like (1) above I don't see how those circumstances could occur in the \nscenarion/log given.\n\nOk, so I've patched both those -- and I can still make this beastie lock up...\n\nBTW: This only started happening recently, i.e when the redirected HEAD (using \nMultithreadedConnMgr) fix was added. I think the fix locked the \nconnection 'temporarily' or something. Any chance that could be a factor? I \nthink I am locking up after only a couple of GETs [w/ now patched potential \nleaks], but potentially more HEADs w/ redirects...",
            "date": "2003-10-10T05:26:10.000+0000",
            "id": 8
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Adam,\nThere are two layers of code on top of the HttpClient (both I know very little \nof), so it is really difficult for me to make any soft of informed guesses \nabout a possible cause of the problem. But what I can see from the logs and the \ncode snippets makes me fairly confident about a few things:\n\n* I do not see connection being released in the log. I do not why this happens \nbut this is what I see.\n* In VFS the connection release is supposed to be triggered by closing the \ninput stream. The consumer of the VFS code must ensure that the input stream is \nclosed under all circumstances (including abnormal circumstances).\n* Please consider downgrading to HttpClient 2.0. CVS HEAD is currently in a \nstate of flux and should be considered experimental. \n* I can well imagine that there is a bug in the multi-threaded connection \nmanager code that is triggered by some sort of less usual combination of an \nHTTP HEAD followed by 301, or probably non-compliant HTTP HEAD (that returns a \nbody) followed by 301. But unless the issue is isolated and is reproduceable \nwith a smaller, more manageable test case, it is really hard to tell\n\nOleg",
            "date": "2003-10-10T14:39:45.000+0000",
            "id": 9
        },
        {
            "author": "Adam Jack",
            "body": "I have 'longstanding issues' w/ this stack also, having VFS between my code and \nyours causes me grief (since sadly VFS isn't too active these days.) Ruper2 \nstarted in part to make VFS 'optional' (which was not possible in Ruper1). \nYesterday I completed that endeavor, and now I have a direct interface to \nHttpClient for what I need. \n\nI followed your samples, and advice, and it is solid ... no connection leaks in \nuser code. I will post the code, so you can see it, there is very little code.\n\nIn short, I get the same problem w/ no possible confusion. It isn't a \"simple \ntest harness\" (sorry) but it is a clean user -- and it demonstrates the problem \nin even during a \"clean run\" -- i.e. no server/network errors, against normal \nservers, etc. If I make my code avoid the multi threaded connection manager it \nworks correctly. \n\nI want to stick against HEAD in part so I help you guys test this, in part 'cos \nRuper is about keeping up w/ latest Jars, and in part 'cos I ahbor Jar Hell \n(http://www.krysalis.org/version/jar-hell.html)\n\nI am game to work w/ you guys to fix this, if you are. I fear that multi-\nthreaded connection pool management it tricky (at best), especially when users \ncan mess up the pool. So (if you have time) maybe this is worth exploring. \nPerhaps we could add some better debug/trace & keep trying?  Perhaps I could \nget you hooked up w/ Ruper2 code, for you to run in a debugger. Your call.\n\nregards\n\nAdam",
            "date": "2003-10-10T23:33:21.000+0000",
            "id": 10
        },
        {
            "author": "Adam Jack",
            "body": "Created an attachment (id=8527)\nThis is the only Ruper2 code to touch HttpClient, no VFS/other...\n",
            "date": "2003-10-10T23:46:37.000+0000",
            "id": 11
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "I agree the code looks solid. Thanks for having narrowed the problem down.\n\nI am going to reopen the bug report and try to reproduce the problem in my\ndevelopment environment. It would be an enormous and much appreciated help if\nyou gave me the sequence of URLS you had been hitting that led to the connection\npool lock.\n\nOleg",
            "date": "2003-10-11T05:19:46.000+0000",
            "id": 12
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "It turned out that the problem is REALLY easy to reproduce. The following code\nreliably locks the multi-threaded connection manager:\n\nimport org.apache.commons.httpclient.HttpClient;\nimport org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;\nimport org.apache.commons.httpclient.methods.HeadMethod;\n\npublic class Test {\n\n    public static void main(String args[]) throws Exception {\n\n        MultiThreadedHttpConnectionManager manager = \n          new MultiThreadedHttpConnectionManager();\n        manager.setMaxTotalConnections(5);\n        HttpClient agent = new HttpClient(manager);\n        agent.getHostConfiguration().setHost(\"news.com\");\n        for (int i = 0; i < 6; i++) {\n            HeadMethod httphead = new HeadMethod(\"/\");\n            httphead.setFollowRedirects(true);\n            try {\n                agent.executeMethod(httphead);   \n            } finally {\n                httphead.releaseConnection();\n            }\n        }\n    }\n}\n\nOleg",
            "date": "2003-10-11T06:07:33.000+0000",
            "id": 13
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Fortunately 2.0 branch does not seem to be affected by the bug. \n\n============================================================================\nHttpClient HEAD:\n============================================================================\n[DEBUG] HttpClient - -Java version: 1.2.2\n[DEBUG] HttpClient - -Java vendor: Sun Microsystems Inc.\n[DEBUG] HttpClient - -Java class path: /home/oleg/workspace/Jakarta Commons HTTP\nclient\ntest/bin:/opt/eclipse/plugins/org.junit_3.8.1/junit.jar:/opt/javalib/jakarta-commons/lib/commons-logging.jar:/home/oleg/src/jakarta/httpclient/bin\n[DEBUG] HttpClient - -Operating system name: Linux\n[DEBUG] HttpClient - -Operating system architecture: i386\n[DEBUG] HttpClient - -Operating system version: 2.4.20-20.9custom\n[DEBUG] HttpClient - -SUN 1.2: SUN (DSA key/parameter generation; DSA signing;\nSHA-1, MD5 digests; SecureRandom; X.509 certificates; JKS keystore)\n[DEBUG] HttpClient - -SunJSSE 1.0301: Sun JSSE provider(implements RSA\nSignatures, PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)\n[DEBUG] DefaultHttpParams - -Set parameter http.useragent = Jakarta\nCommons-HttpClient/2.1m1\n[DEBUG] DefaultHttpParams - -Set parameter http.protocol.version = HTTP/1.1\n[DEBUG] DefaultHttpParams - -Set parameter http.connection-manager.class = class\norg.apache.commons.httpclient.SimpleHttpConnectionManager\n[DEBUG] DefaultHttpParams - -Set parameter http.dateParser.patterns = [EEE, dd\nMMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy HH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy,\nEEE, dd-MMM-yyyy HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy\nHH:mm:ss z, EEE dd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE\ndd-MMM-yyyy HH-mm-ss z, EEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:ss z,\nEEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy HH:mm:ss z]\n[DEBUG] HttpMethodDirector - -Execute loop try 1\n[DEBUG] MultiThreadedHttpConnectionManager -\n-HttpConnectionManager.getConnection:  config =\nHostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80], timeout = 0\n[DEBUG] MultiThreadedHttpConnectionManager - -Allocating new connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] HttpConnection - -HttpConnection.setSoTimeout(0)\n[DEBUG] HttpMethodBase - -Adding Host request header\n[DEBUG] DefaultHttpParams - -Set parameter http.protocol.version = HTTP/1.1\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1\n[DEBUG] HttpMethodDirector - -Redirect required\n[DEBUG] HttpMethodDirector - -Redirect requested to location\n'http://www.ibiblio.org/maven/'\n[DEBUG] HttpMethodDirector - -Redirecting from 'http://www.ibiblio.org:80/maven'\nto 'http://www.ibiblio.org/maven/\n[DEBUG] HttpMethodDirector - -Execute loop try 2\n[DEBUG] HttpMethodBase - -Adding Host request header\n[DEBUG] DefaultHttpParams - -Set parameter http.protocol.version = HTTP/1.1\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1\n[DEBUG] HttpMethodDirector - -Execute loop try 1\n[DEBUG] MultiThreadedHttpConnectionManager -\n-HttpConnectionManager.getConnection:  config =\nHostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80], timeout = 0\n[DEBUG] MultiThreadedHttpConnectionManager - -Allocating new connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] HttpConnection - -HttpConnection.setSoTimeout(0)\n[DEBUG] HttpMethodBase - -Adding Host request header\n[DEBUG] DefaultHttpParams - -Set parameter http.protocol.version = HTTP/1.1\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1\n[DEBUG] HttpMethodDirector - -Redirect required\n[DEBUG] HttpMethodDirector - -Redirect requested to location\n'http://www.ibiblio.org/maven/'\n[DEBUG] HttpMethodDirector - -Redirecting from 'http://www.ibiblio.org:80/maven'\nto 'http://www.ibiblio.org/maven/\n[DEBUG] HttpMethodDirector - -Execute loop try 2\n[DEBUG] HttpMethodBase - -Adding Host request header\n[DEBUG] DefaultHttpParams - -Set parameter http.protocol.version = HTTP/1.1\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1\n[DEBUG] HttpMethodDirector - -Execute loop try 1\n[DEBUG] MultiThreadedHttpConnectionManager -\n-HttpConnectionManager.getConnection:  config =\nHostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80], timeout = 0\n[DEBUG] MultiThreadedHttpConnectionManager - -Unable to get a connection,\nwaiting..., hostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80,\nport=80]\n\n============================================================================\nHttpClient 2.0 pre-rc2:\n============================================================================\nDEBUG] HttpClient - -Java version: 1.2.2\n[DEBUG] HttpClient - -Java vendor: Sun Microsystems Inc.\n[DEBUG] HttpClient - -Java class path: /home/oleg/workspace/Jakarta Commons HTTP\nclient\ntest/bin:/opt/eclipse/plugins/org.junit_3.8.1/junit.jar:/opt/javalib/jakarta-commons/lib/commons-logging.jar:/home/oleg/src/jakarta/httpclient-2.0/bin\n[DEBUG] HttpClient - -Operating system name: Linux\n[DEBUG] HttpClient - -Operating system architecture: i386\n[DEBUG] HttpClient - -Operating system version: 2.4.20-20.9custom\n[DEBUG] HttpClient - -SUN 1.2: SUN (DSA key/parameter generation; DSA signing;\nSHA-1, MD5 digests; SecureRandom; X.509 certificates; JKS keystore)\n[DEBUG] HttpClient - -SunJSSE 1.0301: Sun JSSE provider(implements RSA\nSignatures, PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)\n[DEBUG] MultiThreadedHttpConnectionManager -\n-HttpConnectionManager.getConnection:  config =\nHostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80], timeout = 0\n[DEBUG] MultiThreadedHttpConnectionManager - -Allocating new connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] HttpConnection - -HttpConnection.setSoTimeout(0)\n[DEBUG] HttpMethodBase - -Execute loop try 1\n[DEBUG] HttpMethodBase - -Adding Host request header\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] HttpMethodBase - -Redirect required\n[DEBUG] HttpMethodBase - -Redirect requested to location\n'http://www.ibiblio.org/maven/'\n[DEBUG] HttpMethodBase - -Redirecting from 'http://www.ibiblio.org:80/maven' to\n'http://www.ibiblio.org/maven/\n[DEBUG] HttpMethodBase - -Execute loop try 2\n[DEBUG] HttpMethodBase - -Request to add Host header ignored: header already added\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] MultiThreadedHttpConnectionManager - -Freeing connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] MultiThreadedHttpConnectionManager - -Notifying no-one, there are no\nwaiting threads\n[DEBUG] MultiThreadedHttpConnectionManager -\n-HttpConnectionManager.getConnection:  config =\nHostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80], timeout = 0\n[DEBUG] MultiThreadedHttpConnectionManager - -Getting free connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] HttpMethodBase - -Execute loop try 1\n[DEBUG] HttpMethodBase - -Adding Host request header\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] HttpMethodBase - -Redirect required\n[DEBUG] HttpMethodBase - -Redirect requested to location\n'http://www.ibiblio.org/maven/'\n[DEBUG] HttpMethodBase - -Redirecting from 'http://www.ibiblio.org:80/maven' to\n'http://www.ibiblio.org/maven/\n[DEBUG] HttpMethodBase - -Execute loop try 2\n[DEBUG] HttpMethodBase - -Request to add Host header ignored: header already added\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] MultiThreadedHttpConnectionManager - -Freeing connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] MultiThreadedHttpConnectionManager - -Notifying no-one, there are no\nwaiting threads\n[DEBUG] MultiThreadedHttpConnectionManager -\n-HttpConnectionManager.getConnection:  config =\nHostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80], timeout = 0\n[DEBUG] MultiThreadedHttpConnectionManager - -Getting free connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] HttpMethodBase - -Execute loop try 1\n[DEBUG] HttpMethodBase - -Adding Host request header\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] HttpMethodBase - -Redirect required\n[DEBUG] HttpMethodBase - -Redirect requested to location\n'http://www.ibiblio.org/maven/'\n[DEBUG] HttpMethodBase - -Redirecting from 'http://www.ibiblio.org:80/maven' to\n'http://www.ibiblio.org/maven/\n[DEBUG] HttpMethodBase - -Execute loop try 2\n[DEBUG] HttpMethodBase - -Request to add Host header ignored: header already added\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] MultiThreadedHttpConnectionManager - -Freeing connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] MultiThreadedHttpConnectionManager - -Notifying no-one, there are no\nwaiting threads\n[DEBUG] MultiThreadedHttpConnectionManager -\n-HttpConnectionManager.getConnection:  config =\nHostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80], timeout = 0\n[DEBUG] MultiThreadedHttpConnectionManager - -Getting free connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] HttpMethodBase - -Execute loop try 1\n[DEBUG] HttpMethodBase - -Adding Host request header\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] HttpMethodBase - -Redirect required\n[DEBUG] HttpMethodBase - -Redirect requested to location\n'http://www.ibiblio.org/maven/'\n[DEBUG] HttpMethodBase - -Redirecting from 'http://www.ibiblio.org:80/maven' to\n'http://www.ibiblio.org/maven/\n[DEBUG] HttpMethodBase - -Execute loop try 2\n[DEBUG] HttpMethodBase - -Request to add Host header ignored: header already added\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] MultiThreadedHttpConnectionManager - -Freeing connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] MultiThreadedHttpConnectionManager - -Notifying no-one, there are no\nwaiting threads\n[DEBUG] MultiThreadedHttpConnectionManager -\n-HttpConnectionManager.getConnection:  config =\nHostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80], timeout = 0\n[DEBUG] MultiThreadedHttpConnectionManager - -Getting free connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] HttpMethodBase - -Execute loop try 1\n[DEBUG] HttpMethodBase - -Adding Host request header\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] HttpMethodBase - -Redirect required\n[DEBUG] HttpMethodBase - -Redirect requested to location\n'http://www.ibiblio.org/maven/'\n[DEBUG] HttpMethodBase - -Redirecting from 'http://www.ibiblio.org:80/maven' to\n'http://www.ibiblio.org/maven/\n[DEBUG] HttpMethodBase - -Execute loop try 2\n[DEBUG] HttpMethodBase - -Request to add Host header ignored: header already added\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] MultiThreadedHttpConnectionManager - -Freeing connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] MultiThreadedHttpConnectionManager - -Notifying no-one, there are no\nwaiting threads\n[DEBUG] MultiThreadedHttpConnectionManager -\n-HttpConnectionManager.getConnection:  config =\nHostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80], timeout = 0\n[DEBUG] MultiThreadedHttpConnectionManager - -Getting free connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] HttpMethodBase - -Execute loop try 1\n[DEBUG] HttpMethodBase - -Adding Host request header\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] HttpMethodBase - -Redirect required\n[DEBUG] HttpMethodBase - -Redirect requested to location\n'http://www.ibiblio.org/maven/'\n[DEBUG] HttpMethodBase - -Redirecting from 'http://www.ibiblio.org:80/maven' to\n'http://www.ibiblio.org/maven/\n[DEBUG] HttpMethodBase - -Execute loop try 2\n[DEBUG] HttpMethodBase - -Request to add Host header ignored: header already added\n[DEBUG] HttpMethodBase - -Resorting to protocol version default close connection\npolicy\n[DEBUG] HttpMethodBase - -Should NOT close connection, using HTTP/1.1.\n[DEBUG] MultiThreadedHttpConnectionManager - -Freeing connection,\nhostConfig=HostConfiguration[host=www.ibiblio.org, protocol=http:80, port=80]\n[DEBUG] MultiThreadedHttpConnectionManager - -Notifying no-one, there are no\nwaiting threads\n",
            "date": "2003-10-11T06:14:03.000+0000",
            "id": 14
        },
        {
            "author": "Michael Becke",
            "body": "Created an attachment (id=8531)\npossible fix\n",
            "date": "2003-10-11T10:19:07.000+0000",
            "id": 15
        },
        {
            "author": "Michael Becke",
            "body": "Attached is a quick fix for this.  I haven't had the chance to test this thoroughly but this fixes the \nHeadMethod case and passes all tests.  The problem was that Head was releasing the connection \nwhile it was still locked, and HttpMethodDirector wasn't compensating for this case.\n\nMike",
            "date": "2003-10-11T10:22:11.000+0000",
            "id": 16
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "The patch appears to have done the trick. I think it is good to be committed. \n\nOleg",
            "date": "2003-10-12T15:59:31.000+0000",
            "id": 17
        },
        {
            "author": "Michael Becke",
            "body": "Patch applied.",
            "date": "2003-10-15T09:15:39.000+0000",
            "id": 18
        }
    ],
    "component": "HttpClient (classic)",
    "description": "My single threaded user of VFS (an HttpClient user, that uses\nMultiThreadedHttpConnectionManager) hangs [I suspect indefinitely] on minor\nactivity.\n\nI've turned on HttpClient debug and I see this, the last line\nbeing the last thing I get...\n\n2003/10/09 09:34:26:482 MDT [DEBUG] wire - -<< \"Content-Type:\ntext/html[\\r][\\n]\"\n2003/10/09 09:34:26:482 MDT [DEBUG] HttpMethodBase - -Resorting to protocol\nversion default close co\nnnection policy\n2003/10/09 09:34:26:492 MDT [DEBUG] HttpMethodBase - -Should NOT close\nconnection, using HTTP/1.1\n2003/10/09 09:34:26:502 MDT [DEBUG] HttpMethodDirector - -Execute loop try 1\n2003/10/09 09:34:26:512 MDT [DEBUG]\nMultiThreadedHttpConnectionManager - -HttpConnectionManager.getC\nonnection:  config = HostConfiguration[host=www.ibiblio.org,\nprotocol=http:80, port=80], timeout = 0\n\n2003/10/09 09:34:26:522 MDT [DEBUG]\nMultiThreadedHttpConnectionManager - -Unable to get a connection\n, waiting..., hostConfig=HostConfiguration[host=www.ibiblio.org,\nprotocol=http:80, port=80]\n\nThis is pretty reproducible. When I hack VFS not to use the\nMultiThreadedHttpConnectionManager I don't get the problem.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-280",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Freezes w/ MultiThreadedHttpConnectionManager",
    "systemSpecification": true,
    "version": ""
}