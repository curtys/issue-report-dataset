{
    "comments": [
        {
            "author": "Roland Weber",
            "body": "This is a nasty one. Currently, all synchronization is done on the pool level to protect access to the various queues. Threads wait() on the pool, thereby releasing the lock while they wait. There are no notifications, instead the chosen threads are interrupted.\n\nTo avoid the interrupt, threads have to wait on distinct objects, at least one per route queue, better one per thread. To wait on those objects, a thread needs to synchronize on the object. During the wait, only the lock on the extra object will be released, but not the lock on the pool. The following sequence is necessary to make this work:\n- create thread specific object\n- acquire lock on the pool\n- update queues\n- release lock on the pool (*)\n- acquire lock on the object (*)\n- call wait() on the object (*)\n- release lock on the object (?)\n- acquire a new lock on the pool (?)\n- update queues\n- release lock on the pool\nThe obvious weak spot (*) is the time between releasing the first lock on the queue and calling wait() on the object. The wakeup notification from another thread may be triggered inbetween and must not be lost. Therefore, the object needs to remember a notification until a thread comes to wait.\nA second potential weak spot (?) is the time from wakeup until the lock on the pool is re-acquired. A thread might be chosen for notification a second time in this timeframe. Either the object must carry an indicator that it has already been chosen, or the first notifier must remove the object from the queues before notification. In the second case, the thread has to reacquire the pool lock and to update the queues only if it is interrupted externally rather than being notified. Which still leaves a window for notification to the interrupted thread. \n\nI know how to deal with (*), but I need a bit more time to think about (?).\n\nyuck.\n",
            "date": "2007-12-17T13:20:27.311+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "> - release lock on the object (?)\n> - acquire a new lock on the pool (?) \n\nI think granular lock management should be relatively simple since we have an option of using java.util.concurrent. CountDownLatch may be the right thing to use in this situation.\n\nhttp://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/CountDownLatch.html\n\nAlternatively, this may be the right moment to evaluate Commons Pool or some other external pooling library and see if that would make our life somewhat simpler.\n\nOleg",
            "date": "2007-12-17T15:37:36.370+0000",
            "id": 1
        },
        {
            "author": "Roland Weber",
            "body": "Yes, I was hoping for java.util.concurrent too. Lock and Condition seem to fit the problem:\nhttp://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/locks/Condition.html\nhttp://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/locks/Lock.html\n\nOne lock for the pool, one condition for each thread. I'll have to dig through the JavaDocs.\n\ncheers,\n  Roland\n",
            "date": "2007-12-17T16:40:08.678+0000",
            "id": 2
        },
        {
            "author": "Roland Weber",
            "body": "Done. Thread.interrupt() is now used only during shutdown.\nThe code didn't get prettier though. Plenty of cleanup pending.\n",
            "date": "2007-12-28T17:27:38.310+0000",
            "id": 3
        },
        {
            "author": "Roland Weber",
            "body": "Thread.interrupt() shouldn't be used during shutdown either.\nLocks are not guaranteed to implement interrupts.\n\nUse regular signal plus a shutdown flag to detect that case,\nthrow dedicated shutdown exception instead of InterruptedException.\n",
            "date": "2007-12-28T17:40:04.650+0000",
            "id": 4
        },
        {
            "author": "Roland Weber",
            "body": "Done.",
            "date": "2007-12-29T14:41:04.555+0000",
            "id": 5
        }
    ],
    "component": "HttpClient (classic)",
    "description": "The connection pool for TSCCM uses Thread.interrupt() to wake up waiting threads.\nThis interferes with application interrupts.\n\n- expose InterruptedException in interface\n- change pool implementation to use wait/notify\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-677",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Connection pool uses Thread.interrupt()",
    "systemSpecification": true,
    "version": "4.0 Alpha 1, 4.0 Alpha 2"
}