{
    "comments": [
        {
            "author": "Stojce Dimski",
            "body": "There is also streamlined 'FormEntity' which uses those utils",
            "date": "2008-02-29T11:44:04.384+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Stojce,\n\nWould you mind using maps of objects (Map<String, Object>) instead of maps of lists of strings (Map<String, List<String>>)? In my opinion this would make the API somewhat less cumbersome, especially for simple cases. If an object is an instance of Collection, you could still treat it as such, whereas non-collection objects would be simply converted to their textual representation with Object#toString? Could you live with that?\n\nCould please also update the ClientFormLogin sample?\n\nOleg",
            "date": "2008-02-29T13:45:25.384+0000",
            "id": 1
        },
        {
            "author": "Stojce Dimski",
            "body": "I understand your concerns regarding the user-friendly api, but I insist that 'Map<String, List<String>>' is crystal clear and more consistent/explicit, also implementation is more simple. For easier use we can make some static utility methods...",
            "date": "2008-02-29T16:02:00.416+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Could you then please keep the original UrlEncodedFormEntity(final NameValuePair[] fields) constructor for people like me?\n\nOleg",
            "date": "2008-02-29T17:44:50.922+0000",
            "id": 3
        },
        {
            "author": "Stojce Dimski",
            "body": "In this context (request parameters) I would strongly advise against the use of 'NameValuePair' for the same above-mentioned reasons... But, if you have fall in love ;-) for 'NameValuePair' it could be done, with maybe @Deprecated annotation ? WDYT ?",
            "date": "2008-03-03T09:30:34.132+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Stojce,\nI do not have a particular affection for NameValuePair' class, but I do find the new API horribly cumbersome and memory inefficient for simple cases, and would like to have an option of a less cumbersome API.\n\nOleg",
            "date": "2008-03-04T08:30:41.381+0000",
            "id": 5
        },
        {
            "author": "Stojce Dimski",
            "body": "Oleg,\n\n1. Map<String, List<String>> in very clean, concise, elegant way shows to the user the very nature of request params...\n2. Parameter maps can and will be mainly instanced and 'injected' by the frameworks like spring/guice in 'singleton/thread/session' manner which means not so frequently and we always speak of java.util.collections objects...\n3. Searching the keys and values is a non-problem, what about NameValuePair's ?\n\nReagrding the cumbersome use I played with the 'ClientFormLogin' and\n\nNameValuePair[] nvps = new NameValuePair[] {\n\tnew BasicNameValuePair(\"IDToken1\", \"username\"),\n\tnew BasicNameValuePair(\"IDToken2\", \"password\")\n};\n\nbecomes\n\nfinal Map <String, List <String>> formParams = new TreeMap <String, List <String>>();\nformParams.put(\"IDToken1\", Arrays.asList(new String[] { \"username\" }));\nformParams.put(\"IDToken2\", Arrays.asList(new String[] { \"password\" }));\n\nbut I insist those are just 'ValueObject's and in this form are totaly decoupled from httpCore and can be easily exchanged with other parts of the application... for example same above mentioned parameter map can be injected by spring like this\n\n<util:map id=\"params1\">\n\t<entry key=\"IDToken1\">\n\t\t<util:list>\n\t\t\t<value>username</value>\n\t\t</util:list>\n\t</entry>\n\t<entry key=\"IDToken2\">\n\t\t<util:list>\n\t\t\t<value>password</value>\n\t\t</util:list>\n\t</entry>\n</util:map>\n\nCheers,\nStojce\n",
            "date": "2008-03-04T10:46:12.216+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Checked in the patch with some changes. (1) Moved all new URL coding methods to URLUtils class (2) Kept original NameValuePair[] based constructors for UrlEncodedFormEntity\n\nOleg ",
            "date": "2008-03-08T23:23:42.055+0000",
            "id": 7
        },
        {
            "author": "Stojce Dimski",
            "body": "My choice of words for naming this issue was wrong.\nMy intention was to refactor URLUtils as 'URLEncodingUtils' and 'URIUtils', where later would contain 'createURI/rewriteURI' and others and former would contain all utility methods for url-form-(de/en)coding.\nWDYT ?",
            "date": "2008-03-28T11:57:01.443+0000",
            "id": 8
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Stojce,\n\nFeel free to submit a patch.\n\nOleg",
            "date": "2008-03-29T23:06:03.801+0000",
            "id": 9
        },
        {
            "author": "Stojce Dimski",
            "body": "I took a step back end refactored URLEncodingUtils in a separated module using a NameValuePair instead of Map<String, List<String>> for the sake of consistency... In alleged patch you will find also a unit tests for all those methods...\nCleaned up URLUtils contains just a methods for URI manipulation and I would propose rename in URIUtils, at this moment URIUtils methods are used in just 2 classes in total of 5 points of code so the change would be very easy...\nI also adjusted UrlEncodedFormEntity, and would like to propose a move of this class together with 'mime brother' into a package o.a.h.client.entity instead of leaving it in non intuitive package 'methods'...\n",
            "date": "2008-04-04T12:46:58.328+0000",
            "id": 10
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in. Renamed URLUtils to URIUtils. Moved UrlEncodedFormEntity to o.a.h.client.entity package\n\nMany thanks, Stojce\n\nOleg",
            "date": "2008-04-05T11:00:20.979+0000",
            "id": 11
        }
    ],
    "component": "HttpClient (classic)",
    "description": "I would like to contribute a substitute for existing URLUtils.java... UrlEncodedUtils.java offer utility methods for dealing with 'urlencoded' data. Main difference with existing class is that parameters are Map <String, List <String>> instead of NameValue pairs and lack of third party dependencies...  It's partially covered with tests which I will further extend to cover all methods of this utility class.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-746",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "substitute for URLUtils.java",
    "systemSpecification": true,
    "version": ""
}