{
    "comments": [
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Michele, please post a code snippet that exhibits the problem.",
            "date": "2006-01-26T08:20:30.000+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Odi,\nIt is quite obvious that null fragment parameter will cause an NPE in the\nconstructor. We should just fix it in HttpClient 3.0 and completely remove all\nthis horrible code in HttpClient 4.0\n\nOleg",
            "date": "2006-01-26T08:50:54.000+0000",
            "id": 1
        },
        {
            "author": "Michele Vivoda",
            "body": "(In reply to comment #2)\n> Odi,\n> It is quite obvious that null fragment parameter will cause an NPE in the\n> constructor. We should just fix it in HttpClient 3.0 and completely remove all\n> this horrible code in HttpClient 4.0\n> Oleg\n\nDo you mean the remove the deprecated constructors etc or the whole URI class \nimplementation ? I was using this constructor because I was not able to obtain \nan uri whose isOpaquePart returned true using the URI(String, boolean) \nconstructor, for example from <mailto:pop@pop.org> What I get is an absolute \nuri with relative path [pop@pop.org] ?? I am asking because I am doing some \ntesting following RFC3986 and using httpclient.URI class and JDK1.4 \njava.net.URI.\n\n\n",
            "date": "2006-01-26T09:38:45.000+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #3)\n> (In reply to comment #2)\n...\n> \n> Do you mean the remove the deprecated constructors etc or the whole URI class \n> implementation ? I was using this constructor because I was not able to obtain \n> an uri whose isOpaquePart returned true using the URI(String, boolean) \n> constructor, for example from <mailto:pop@pop.org> What I get is an absolute \n> uri with relative path [pop@pop.org] ?? I am asking because I am doing some \n> testing following RFC3986 and using httpclient.URI class and JDK1.4 \n> java.net.URI.\n\nMichele,\nI meant the whole class (URI). This is my personal opinion that the URI class\nheeds to go, and not that of the HttpClient committers. This issue will be\nsubject to open discussion on the dev list and eventually to a formal vote. I\nwill be pressing for deprecation (removal) of this class in favor of JDK14 URI\nclass, unless someone will step in to maintain and seriously refactor the URI\nand related classes. The person who originally wrote the code left the project\nabout two years ago. The code has been effectively unmaintained ever since.\n\nOleg",
            "date": "2006-01-26T19:29:27.000+0000",
            "id": 3
        },
        {
            "author": "Michele Vivoda",
            "body": "(In reply to comment #4)\n> (In reply to comment #3)\n> > (In reply to comment #2)\n> ...\n> > \n> > Do you mean the remove the deprecated constructors etc or the whole URI \nclass \n> > implementation ? I was using this constructor because I was not able to \nobtain \n> > an uri whose isOpaquePart returned true using the URI(String, boolean) \n> > constructor, for example from <mailto:pop@pop.org> What I get is an \nabsolute \n> > uri with relative path [pop@pop.org] ?? I am asking because I am doing some \n> > testing following RFC3986 and using httpclient.URI class and JDK1.4 \n> > java.net.URI.\n> Michele,\n> I meant the whole class (URI). This is my personal opinion that the URI class\n> heeds to go, and not that of the HttpClient committers. This issue will be\n> subject to open discussion on the dev list and eventually to a formal vote. I\n> will be pressing for deprecation (removal) of this class in favor of JDK14 URI\n> class, unless someone will step in to maintain and seriously refactor the URI\n> and related classes. The person who originally wrote the code left the project\n> about two years ago. The code has been effectively unmaintained ever since.\n> Oleg\n\nOleg,\nI am doing these tests with junit on one side and rfc 3986 in the other and I \nfound that java4.net.URI has also some problems. An other thing is that if you \nhave a problem with java.net.URI is not possible to change the code. I would \nleave at least a  wrapper around so that someone can still intervene in case of \nproblems. An other difference is that java.net.URI is unmodificable, while \nhttpclient.URI is modificable, do you think is really needed for it to be \nmodificable ? The code is perhaps in some parts \"ugly\" but I cannot say too bad \nthings on it since I was using it since when I found it in package \norg.apache.util that was included in Slide in 2001/2 and also thanks to it and \neven thanks to its errors I started to become interested in the concept. Its \nuniqueness is in being quite forgiving in parsing\nMy aim is to make a java4-independent URI only package (may be some URI \ncomparators for different scopes [like network]). I already fit java4 URI into \nthis framework and passed almost all but 3 of the (188) tests, now I am trying \nwith httpclient.URI and I am around 20 failures. I must say that I found a \nlittle bit heavy the fact of needing httpclient, codec and  even logging for \nusing a URI class. JUnit made me crazy with the class loaded wrong hierarchy \nfor logging...\nLast thing...does httpclient need java 1.4 ?\nCiao\nMichele\n\n",
            "date": "2006-01-26T20:00:52.000+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #5)\n> (In reply to comment #4)\n> > (In reply to comment #3)\n> > > (In reply to comment #2)\n> > ...\n...\n> Oleg,\n> I am doing these tests with junit on one side and rfc 3986 in the other and I \n> found that java4.net.URI has also some problems. An other thing is that if you \n> have a problem with java.net.URI is not possible to change the code. I would \n> leave at least a  wrapper around so that someone can still intervene in case of \n> problems. An other difference is that java.net.URI is unmodificable, while \n> httpclient.URI is modificable, do you think is really needed for it to be \n> modificable ? The code is perhaps in some parts \"ugly\" but I cannot say too bad \n> things on it since I was using it since when I found it in package \n> org.apache.util that was included in Slide in 2001/2 and also thanks to it and \n> even thanks to its errors I started to become interested in the concept. Its \n> uniqueness is in being quite forgiving in parsing\n> My aim is to make a java4-independent URI only package (may be some URI \n> comparators for different scopes [like network]). I already fit java4 URI into \n> this framework and passed almost all but 3 of the (188) tests, now I am trying \n> with httpclient.URI and I am around 20 failures. I must say that I found a \n> little bit heavy the fact of needing httpclient, codec and  even logging for \n> using a URI class. JUnit made me crazy with the class loaded wrong hierarchy \n> for logging...\n> Last thing...does httpclient need java 1.4 ?\n> Ciao\n> Michele\n\nWe may consider migrating this code to a module of its own, _provided_ someone\nsteps in to maintain it. Otherwise, I would very much rather prefer to use\nsomething which is a part of standard JDK and is maintained (however badly)\n\nHttpClient 2.0.x and HttpClient 3.x require JDK 1.2.2 only. HttpClient 4.0 is\nvery likely to require JDK 1.4\n\nOleg  \n\n",
            "date": "2006-01-26T20:13:41.000+0000",
            "id": 5
        },
        {
            "author": "Michele Vivoda",
            "body": "> We may consider migrating this code to a module of its own, _provided_ someone\n> steps in to maintain it. Otherwise, I would very much rather prefer to use\n> something which is a part of standard JDK and is maintained (however badly)\n> HttpClient 2.0.x and HttpClient 3.x require JDK 1.2.2 only. HttpClient 4.0 is\n> very likely to require JDK 1.4\n> Oleg  \n\nOleg\nI will give a look if I can refactor the code and if I do I let you know.\nCan you tell me if you have know if it is required for it to be modificable and \nnot readonly ? I am going for a non modificable interface, like io.File or \nnet.URI \nMichele",
            "date": "2006-01-26T22:30:18.000+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #7)\n...\n> Oleg\n> I will give a look if I can refactor the code and if I do I let you know.\n> Can you tell me if you have know if it is required for it to be modificable and \n> not readonly ? I am going for a non modificable interface, like io.File or \n> net.URI \n\nMichele\nSuch contribution would be much appreciated. I personally think URI objects\nshould be immutable but will not insist on a particular design choice.\n\nOleg\n\n> Michele\n\n",
            "date": "2006-01-27T00:48:08.000+0000",
            "id": 7
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in\n\nOleg",
            "date": "2006-01-27T01:07:47.000+0000",
            "id": 8
        }
    ],
    "component": "HttpClient (classic)",
    "description": "in org.apache.commons.httpclient.URI class constructor:\n\npublic URI(String scheme, String schemeSpecificPart, String fragment)\n        throws URIException {\n....\n_fragment = fragment.toCharArray(); \n\nshould be \n\n_fragment = fragment==null ? null : fragment.toCharArray();",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-557",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Nullpointer when creating URI from scheme specific part with null fragment",
    "systemSpecification": false,
    "version": "3.0 Final"
}