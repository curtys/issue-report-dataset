{
    "comments": [
        {
            "author": "Jonathan Moore",
            "body": "The attached patch makes a number of significant cleanup steps.\n* What was previously the HttpCache interface and implementations is now the HttpCacheStorage interface.\n* A new class (BasicHttpCache) and higher-level interface (HttpCache) were introduced to encapsulate both resource management and cache entry storage.\n* As a result, a lot of dependencies could be removed from CachingHttpClient, making it much easier to understand.\n* In turn, many of the mock-driven unit tests previously in TestCachingHttpClient were able to be turned into non-mock unit tests when they moved.\n* Finally, added the MAX_CACHE_ENTRIES notion into CacheConfig, which can be passed as a constructor to all existing HttpCache and HttpCacheStorage implementations in addition to the CachingHttpClient itself.\n\nOne follow up is that there is a Javadoc cleanup/addition pass that will be needed, which I would be happy to do as a subsequent patch (because this was a largish change I wanted to try to get the code changes into trunk first).\n\nThis patch is contributed to the ASF with the permission of my employer.",
            "date": "2010-08-17T21:29:11.641+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in. Many thanks for contributing it, Jon.\n\nHow certain are you about stability of HttpCache interface, though? Once 4.1 beta1 is released we will no longer be able to change it. Would it be worthwhile to consider making an abstract class out of it and making those methods that are unlikely to very in different implementations non-abstract?\n\nOleg",
            "date": "2010-08-18T19:43:32.581+0000",
            "id": 1
        },
        {
            "author": "Jonathan Moore",
            "body": "I think the easiest way to answer this will be to get the following cache implementations sanity-checked:\n\n1. your \"store the bodies on the filesystem\" cache\n2. the memcached cache\n3. the ehcache cache\n\nThe one other suspicion I have is that the HttpCache#cacheEntry method might want to return an HttpResponse instead of an HttpCacheEntry. This would move revalidation into the BasicHttpCache, leaving the CachingHttpClient very simple indeed. I think let's get #1-#3 shorn up and then see where we are.\n\nWhat is the target release date for 4.1-beta1?\n",
            "date": "2010-08-18T20:48:21.753+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "We do not have to rush it, but would be nice to have beta1 released by the end of the year and 4.1 GA sometime in Q1 2011.\n\nI am going to cross-check ManagedHttpCacheStorage and related classes and probably add an option to save cache entries to disk, so that ManagedHttpCacheStorage can be fully persistent. \n\nAnyway, I really like the way things have been shaping up.\n\nOleg",
            "date": "2010-08-19T08:41:15.978+0000",
            "id": 3
        }
    ],
    "component": "HttpCache",
    "description": "As we have built in support for stream-based management of cached response bodies, the CachingHttpClient class has its fingers in too many pies and is involved in resource management but not storage of the actual HttpCacheEntries.\n\nI have a patch forthcoming. :)\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-979",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "cache entry resource management should be extracted from CachingHttpClient",
    "systemSpecification": true,
    "version": "4.1 Alpha2"
}