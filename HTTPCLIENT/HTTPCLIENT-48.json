{
    "comments": [
        {
            "author": "Roland Weber",
            "body": "snippet of David Hay's posting to the HTTP client mailing list:\n\nI would suspect that\nany authorization callback handler would need to pass along the host, port,\nrealm, authorization scheme and possibly the status code (so we'd know if\nthis was a proxy authorization or not).\n\nJust to give an implementation idea, what I currently have is an iterface\ncalled AuthorizationPrompter that has a single method:\n\n    public Credentials getCredentials( String realm, String host );\n\nI can then register implementations of this with my custom HttpState\nsubclass.  Then, my HttpState subclass I have the following code:\n\n    public synchronized Credentials getCredentials( String realm, String\nhost )\n    {\n        Credentials credentials = super.getCredentials( realm, host );\n        if ( credentials == null ) {\n            credentials = promptForCredentials( realm, host );\n            if ( credentials != null ) {\n                setCredentials( realm, host, credentials );\n            }\n        }\n        return credentials;\n    }\n\nthere's a similar method for getProxyCredentials.  Of course, the \"if\n(credentials == null)\" should probably live in the calling method, but\nthat's the idea.\n",
            "date": "2003-10-01T15:12:57.000+0000",
            "id": 0
        },
        {
            "author": "Roland Weber",
            "body": "Hello David,\n\ndon't try to guess what the handler will need to know. That's what we\ndid in OpenCard and failed with. It wasn't long until someone required\nsomething we hadn't thought of, but the interface was already defined\nand could not be changed anymore. Your suggestion:\n\n    public Credentials getCredentials( String realm, String host );\n\nlooks pretty much that way too. Even if you add port and authorization\nscheme and possibly the status code as additional arguments. Rather,\ndefine a class that holds such information and can be subclassed for\nnew authorization schemes, should someone choose to invent one. Like:\n\nclass AuthSpec { attributes: type / host / port / realm / HttpMethod }\n\npublic Credentials getCredentials(AuthSpec authspec) {\n  if (type unknown) throw UnknownAuthenticationTypeException\n}\n\nI wonder whether host vs. proxy authentication should be distinguished\nwithin the AuthSpec object, as a separate boolean flag, or by using two\ndifferent methods to get credentials for the host or proxy, respectively.\nThe existing class HttpAuthenticator uses distinct methods, and so does\nHttpState. It's probably best to stick with that decision.\n\nregards,\n  Roland\n",
            "date": "2003-10-01T15:26:56.000+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch for the HTTPCLIENT-306 should provide adequate infrastructure to make\ninteractive authentication possible.\n\nOleg",
            "date": "2003-12-15T19:52:42.000+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=10054)\nPatch (take 1)\n",
            "date": "2004-01-22T21:46:37.000+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Changelog:\n* interactive authentication support\n* another bug fix in NTLMScheme class\n* InteractiveAuthenticationExample demo app\n\nAt the moment I opted for keeping credentials callbacks in a static (global)\nclass. I am not sure that this is the best solution, but at the moment I lack\nbetter ideas. Do authentication callbacks make sense on per HttpState basis?\nHttpClient? HttpClientParams? I felt that credentials callbacks should be global\nin order to avoid multiple authentication dialogs  popping up in multithreaded\napplications, which, in my opinion, would be a bit confusing. At the same time I\ncan well imagine that some may feel differently. \n\nPlease let me know what you think.\n\nOleg\n",
            "date": "2004-01-22T21:48:55.000+0000",
            "id": 4
        },
        {
            "author": "Roland Weber",
            "body": "Hi Oleg,\n\nI would leave it to the implementor of the callbacks to make sure there\nis only one dialog on the screen. What about a multiuser-browser that is\nrunning multiple browser windows for different users on different X Servers?\nI guess there would be an instance of HTTP Client for each user, but we\ncannot know for sure.\nAlso, one might have some default GUI handlers installed but want to\nexecute individual methods with other, non-GUI callbacks in place.\n\nHttpState sounds like a good place to me. Especially if the callbacks are\npart of the hierarchical parameters, as you suggested. Is it possible to\nmodify the global defaults parameters via API? I don't remember.\n\ncheers,\n  Roland\n\n",
            "date": "2004-01-26T22:02:54.000+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Roland,\nI agree with you that the current design may be too contraining. I just thought\ncredential callbacks had in fact nothing to do with HTTP state. I also did not\nfeel like making HttpState class coupled with AuthScheme interface. \n\nFolks, please speak out: what should it be the home for the credential\ncallbacks: HttpState or HttpClientParams?\n\nCheers,\nOleg",
            "date": "2004-01-27T02:08:27.000+0000",
            "id": 6
        },
        {
            "author": "Eric Johnson",
            "body": "A subtle distinction, argh!  I think it breaks down like this:\n* HttpState - properties of the HTTP communication (cookies, authentication info)\n* HttpClientParams - behavioral characteristics desired by the client -\ntimeouts, spec conformance, resource usage)\n\nBased on those criteria, I think I would choose HttpClientParams.  How\nauthentication is handled would seem to be a behavioral characteristic desired\nby the client.  But perhaps my categorizations are not correct?",
            "date": "2004-01-27T05:09:49.000+0000",
            "id": 7
        },
        {
            "author": "Roland Weber",
            "body": "I'd consider the callbacks a part of the\n\"authentication info\", hence HttpState... :-)\n\nMay I throw in the HttpMethod level as another choice?\n",
            "date": "2004-01-27T14:13:19.000+0000",
            "id": 8
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "I think this patch goes to far. Currently credentials are stored inside\nHttpState. This makes it very flexible to use HttpClient either from stock or\ncreate your own methods or even replace the HttpClient completely. So I would\nrather keep HttpState the place where to ask for credentials from within HttpClient.\n\nWhat we need and what the patch already contains is a callback to retrieve\ncredentials. But the CredentialsPrompter beeing a monostate limits the\nflexibility of the credentials retrieval. Whether the prompter is a single\ninstance for multiple HttpClients or if there are multiple instances should be a\ndecision of the user.\n\nI suggest not to implement the CredentialsPrompter. Instead just provide\nHttpState::setCredentialsCallback(CredentialsCallback) and change the\nget[Proxy]Credentials methods to use the callback. We can still leave the\ncredential setters in for convenience and handle them through a default\nimplementation of the callback.\n\nThe advantages are:\n * user can easily choose which callback to use for which HttpClient instance\n * preemptive auth does not break\n * simpler code\n * less API change\n\nI will provide a patch in a minute to explain my ideas.",
            "date": "2004-01-29T17:16:06.000+0000",
            "id": 9
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Odi, \nCredentialsPrompter has been ruled out already. But I just have some\nreservations about HttpState being the best place for this kind of stuff. From\nthe conceptual standpoint credentials callbacks do not seem to have much to do\nwith the HTTP state. Besides, I am kind of hesitant to make HttpState coupled\nwith AuthScheme interface. But since the majority seems to be leaning towards\nHttpState solution, I do not really mind. We can revisit this problem as a part\nof 4.0 API (re)design.\n\nDo you want to take this patch over or shall I continue working on it?\n\nOleg",
            "date": "2004-01-29T17:37:18.000+0000",
            "id": 10
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Created an attachment (id=10141)\ntake2\n",
            "date": "2004-01-29T18:25:35.000+0000",
            "id": 11
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Just added the patch against CVS HEAD.\nWhen you look at it you can see that it makes code much cleaner. The inner class\ncould actually be extracted as well to make HttpState even lighter. The patch\ncause surprisingly few changes in the rest of the code.",
            "date": "2004-01-29T18:28:14.000+0000",
            "id": 12
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Odi, I think it is a better approach. I especially like the idea to abstract \naway all the credentials persistence/retrieval logic. There's one catch, \nthough. The patch in its current form simply does not attempt to provide any \nrecovery mechanism for authentication failures, leaving the user without any \npossibility to re-authenticate if given credentials are invalid. I believe \nthere has to be a way to discard the existing credentials and prompt the user \nfor new ones, which basically brings us back to my patch, albeit without global \nCredentialsPrompter. \n\nIf you like I can take your patch as a starting point and add missing \nfunctionality from mine.\n",
            "date": "2004-01-29T20:54:04.000+0000",
            "id": 13
        },
        {
            "author": "Michael Becke",
            "body": "Oleg, Odi, Roland, et al.,\n\nHere are a few quick thoughts..\n\nIn regard to the credentials, I think they should remain in the HttpState.  In some sense it is acting \nas a cache for known credentials.  I agree with Oleg and I think we should move towards a single \nset of credentials based upon host, port, and perhaps scheme.  I see no need to keep host/proxy \ncredentials separate.\n\nAs far as the location for the CredentialsProvider/CredentialsCallback I prefer the params.  While I \nsee the logic of keeping it with the credentials in the HttpState, I still think the credentials are really \njust held there as a cache.  In general I imagine someone would just want to set the credentials \nprovider globally, either to one that prompts the user, or one (the default) that does nothing. Once \ncredentials have been provided and successfully used they can be added to the HttpState and \nreused later.  The params also provide more flexibility in that they can be configured globally, and \nwhere needed they can also be used on a more fine grained level.\n\nWhat do you think?\n\nMike",
            "date": "2004-01-29T23:42:43.000+0000",
            "id": 14
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Darn. It looks like we all agree to disagree. \n\nLet me try to find a common ground, unless we want to find ourselves in a\nclassical design impasse.\n\n(1) Odi, your idea to abstract away the credentials persistence stuff is great,\nbut possibly it is too radical for the 3.0. Let us revisit this problem in the\ncourse of 4.0 API redesign. Can we stick to the concept of HttpState being a\ncache of objects representing HTTP session state for the 3.x release? Let's face\nit there are uglier things in HttpClient 2.0 than HttpState class\n\n(2) HttpState (as a cache) in its present form does not seem to be the ideal\nplaceholder for the credential callbacks. Can we all live with HttpParams as an\nalternative for the 3.x release. Again, it may change in the 4.0\n\n(3) Reasons for keeping proxy and host credentials distinct are purely emotional\n/ perceptional. Usually users could not care less if they are authenticating\nagainst a proxy or target host as long as they are presented with a sane name\nfor the authentication realm. For instance, IE 5.x does not differentiate\nbetween proxy & host authentication. \n\nGetting rid of separate repository for proxy credentials will GREATLY simplify\nauthentication code in HttpMethodDirector. I think this is well worth it.\nBesides, may I suggest to have a boolean flag (proxy yes|no) added to\nCredentialsCallback interface to keep everyone happy?\n\nOleg\n\n",
            "date": "2004-01-30T01:03:44.000+0000",
            "id": 15
        },
        {
            "author": "Roland Weber",
            "body": "Hi Oleg,\n\nthe boolean flag should indeed be sufficient. Is there still\na way to set default credentials for both proxy and host if\nboth are kept in the same namespace?\n\nI can very well live with the callbacks in the HttpParams. My\nmistake here, I thought the discussion was about whether to put\nthem in params for the state or for the client. Obviously, there\nare no params for the state - stupid me. In that case, let me\nsuggest again to add them at the method level, with a fallback\nto the client and global settings.\n\ncheers,\n  Roland",
            "date": "2004-01-30T16:37:09.000+0000",
            "id": 16
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=10158)\nPatch (take 3)\n",
            "date": "2004-01-30T23:55:30.000+0000",
            "id": 17
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Folks,\nThis patch is based on the patch (take 1) with the following changes:\n* Global CredentialsPrompter class has been removed\n* Authentication callbacks moved to HttpMethodParams class\n* Authentication realm key is now comprised of host name, port, realm name and\nauthentication type\n\nPlease let me know what you think. I know that test cases are lacking. As soon\nas the API stabilize a little, I'll provide test cases  for new functionality\nusing Odi's shiny new simple HTTP server / simple proxy framework\n",
            "date": "2004-01-31T00:33:45.000+0000",
            "id": 18
        },
        {
            "author": "Michael Becke",
            "body": "Oleg,\n\nOverall I think the design is good now.  I have just a few comments on some of the specifics.\n\n - I would prefer the name CredentialsProvider to CredentialsCallback.  Though callback works, I \nthink provider is a little more standard.\n - Also, I am wondering if the CredentialsCallback.getCredentials() method should be changed to \naccept an instance of HttpAuthRealm instead of the scheme, host, and port.\n - The callback param is currently assumed to be a Collection, but I wonder if this is really \nnecessary.  It seems like just a CredentialsCallback should be sufficient, especially since it can be \nconfigured on a per method basic.\n\nI haven't had time to look closely at the HttpMethodDirector authentication logic but I think some \ntest cases will take care of that.\n\nMike",
            "date": "2004-01-31T02:48:54.000+0000",
            "id": 19
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Created an attachment (id=10165)\nPatch (take 3)\n",
            "date": "2004-01-31T03:55:04.000+0000",
            "id": 20
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Oopsie. The patch is in fact the 'take 4'. \n\nMike, I agree with all your points. However, I feel that \nCredentialsCallback#getCredentials() taking AuthScheme as a parameter buys us a \nlittle more flexibility. For some authentication schemes parameters other than \nhost, port, realm and auth type _may_ be of some use (like domain for NTLM \nscheme).\n\nOleg ",
            "date": "2004-01-31T04:03:04.000+0000",
            "id": 21
        },
        {
            "author": "Michael Becke",
            "body": "Oleg,\n\nGood point.  Code-wise everything looks good to me now.  With a little CredentialsProvider \nJavadocs it is good to commit.\n\nMike ",
            "date": "2004-01-31T05:09:07.000+0000",
            "id": 22
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "CredentialsProvider javadocs added. Patch committed.\n\nOleg",
            "date": "2004-02-05T04:55:36.000+0000",
            "id": 23
        }
    ],
    "component": "HttpClient (classic)",
    "description": "Some actions require user input.  Like forwarding to another host or retrieveing\nauthentication credentials.  Should have some way for clients to setup listeners\nfor such events so that they can be handled on the fly.  No gui, programatic\nonly.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-48",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "User interaction for authentication",
    "systemSpecification": true,
    "version": "2.0 Alpha 1"
}