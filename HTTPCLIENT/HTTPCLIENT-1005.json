{
    "comments": [
        {
            "author": "Jonathan Moore",
            "body": "The attached patch reduces the surface of the exposed API, so that the only publicly-available classes are:\n\nCacheConfig\nCacheResponseStatus\nDefaultCachingHttpClient\nEhcacheCachingHttpClient\nMemcachedCachingHttpClient\n\nThis allows a client currently to instantiate but not extend the current implementation. One side effect is that most classes are now in the org.apache.http.impl.client.cache package except for CacheConfig and CacheResponseStatus. \n\nThis patch is contributed to the ASF with the permission of my employer.",
            "date": "2010-09-30T17:40:30.165+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Jon\n\nI am feeling really bad about having to lump all classes into one package. \n\nWhat is your feeling about stability of the API at this point? How likely is it that you may want to make sweeping changes to the classes and interfaces that currently reside in o.a.h.client.cache? If you anticipate major changes , I'll apply the patch and start working on the first BETA release. However, If you feel that a few more months should be enough to finalize the API, we could probably delay the BETA phase a little and do one more ALPHA meanwhile.\n\nWhat do you think?\n\nOleg",
            "date": "2010-10-12T13:10:12.742+0000",
            "id": 1
        },
        {
            "author": "Jonathan Moore",
            "body": "Oleg,\n\nI'm also somewhat torn. I believe that the current set of functionality is a \"minimum viable product\" (probably more than minimum) and would like to get a GA release including it out as soon as possible. On the other hand, at least some of the upcoming anticipated changes (particularly, request collapsing and asynchronous validation) are likely to involve structural changes; or at least they are different enough that there is a nontrivial risk that they would break the current binary API. At the same time, while I do think we'll get to those new features, it may well take a couple of months for us, and I'm not really crazy about holding up the GA release for those.\n\nAs this is the first GA release of the caching module, I'd say we actually don't really know how people are going to want to extend it (or even if they will want to extend it at all). If we want to strive for binary backwards-compatibility, then I'd say we should conservatively err on the side of closing down the interface. We can always expose more of the interface in a later release if folks want it, and I'd rather be in that position than trying to put toothpaste back into the tube (possibly compromising the design of the code in order to retain backwards compatibility).\n\nJon",
            "date": "2010-10-12T14:17:52.983+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Jon\n\nHow about trying to find the middle ground? \n\nI made HttpCache and BasicHttpCache package private as these classes are more likely to require major changes than any other. I left HttpCacheEntry and HttpCacheStorage related classes public for the time being. HttpCacheEntry is a concrete class and it is final. HttpCacheStorage and friends are relatively simple and straight-forward and we already have a number of diverse implementations so they seem flexible enough. I am quite confident we can maintain full API compatibility with these classes in the future. \n\nPlease review and let me know if I should make above mentioned classes package private as well.\n\nOleg",
            "date": "2010-10-16T12:17:51.436+0000",
            "id": 3
        },
        {
            "author": "Jonathan Moore",
            "body": "Hi Oleg,\n\nI think exposing those is fine, although if HttpCache (and BasicHttpCache) are package-private, then no one will be able to actually instantiate one of those classes to pass to CachingHttpClient's constructor.\n\nSo I think we can leave HttpCacheStorage and HttpCacheEntry public (although, again, my preference would be NOT to do this until someone requested it) but we then need to provide a way for someone to actually instantiate a CachingHttpClient just from something implementing HttpCacheStorage. This probably consists of additional constructors on CachingHttpClient that take HttpCacheStorage in place of HttpCache (where the implementation just wraps those in a BasicHttpCache).\n\nJon\n",
            "date": "2010-10-18T15:44:23.110+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "> This probably consists of additional constructors on CachingHttpClient that take HttpCacheStorage in place of HttpCache \n> (where the implementation just wraps those in a BasicHttpCache).\n\nYep. I added two new constructors that take a HttpCacheStorage and optionally a ResourceFactory. This, at the very least, enables the users to customise the way cache entries are persisted, which is pretty essential in my opinion (consider this a request ;-)). As a small bonus we can keep Ehcache and memcached related stuff in separate packages.\n\nOleg  \n",
            "date": "2010-10-18T16:04:50.555+0000",
            "id": 5
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Closing as FIXED. Please re-open if you want more classes made package private.\n\nOleg",
            "date": "2010-10-18T19:24:07.360+0000",
            "id": 6
        }
    ],
    "component": "HttpCache",
    "description": "While the caching module can currently be considered functional and useful for folks as-is, there are several near-term enhancements planned that could change the exposed binary API of the caching module (although it is not yet clear whether they would or not). In an effort to allow the 4.1 GA release to go forward while hedging bets against future development, we should consider drastically reducing the exposed binary API of the caching module, and not exposing extension points until someone explicitly asks for them.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-1005",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "API surface of caching module can be reduced",
    "systemSpecification": true,
    "version": "4.1 Alpha2"
}