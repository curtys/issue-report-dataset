{
    "comments": [
        {
            "author": "Jonathan Moore",
            "body": "Again, we have some code we are dusting off to solidify (and adhere to the updated HttpCache interface) and contribute.\n\nMajor question to answer is how the contribution should be structured:\n(a) new top-level module in httpcomponents-client (e.g. httpclient-cache-ehcache)?\n(b) new sub-package as part of httpclient-cache?\n",
            "date": "2010-08-11T17:34:01.538+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Both options are possible. If we are talking just two to three impl classes a whole new module might be on overkill, so option B would be preferred.\n\nOleg",
            "date": "2010-08-11T18:49:24.752+0000",
            "id": 1
        },
        {
            "author": "Michajlo Matijkiw",
            "body": "This patch adds the package org.apache.http.impl.client.cache.ehcache, and a few tests for it.  The package contains a single class, EhcacheHttpCache, which is a simple HttpCache implementation build around ehcache.  The pom.xml was also updated to add the ehcache java interface and its dependency, slf4j.  There are a total of 2 new files, and one modified.\n\nThis patch is contributed with the permission of my employer.",
            "date": "2010-08-12T16:11:15.195+0000",
            "id": 2
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Michajlo \n\nThere has been a number of changes to the caching API. Could you please rebuild your patch based the latest code snapshot from SVN trunk?\n\nOleg",
            "date": "2010-08-12T22:10:02.972+0000",
            "id": 3
        },
        {
            "author": "Michajlo Matijkiw",
            "body": "Sorry about that, I have attached the updated patch against the trunk.\n\nMost remains the same from the last cache, I have made all of EhcacheHttpCache's operations synchronized.  I have also added another test which runs the protocol requirement tests against a CachingHttpClientCache using the Ehcache backend.\n\nSomething that should be discussed is behavior on a failed update.  In the event of multiple EhcacheHttpCache instances updating the same cache they may trample eachothers' data on update.  For now we do a compare and swap update, and throw an IOException on failure.  This might be a good case to reintroduce the HttpCacheOperationException.  Having a configurable number of retries before throwing an exception is another option to explore.",
            "date": "2010-08-13T18:41:03.949+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in with some very minor tweaks to the test cases and dependency definitions. \n\nThrowing plain IOException definitely does not sound right. Feel free to introduce a specific exception class for failed updates.\n\nOleg",
            "date": "2010-08-15T19:11:20.322+0000",
            "id": 5
        },
        {
            "author": "Michajlo Matijkiw",
            "body": "We have updated the ehcache implementation to support a disk based ehcache.  Since some members of HttpCacheEntry are not Serializable, they could only be stored in memory, and would not be able to be written to disk.\n\nWe reintroduced the HttpCacheEntrySerializer interface and added an implementation, JSONCacheEntrySerializer.  The HttpCacheEntrySerializer interfaced is used by ehcache to serialize HttpCacheEntrys to be stored in the cache.  This interface will also be used by the memcached interface we are working on bringing to date.",
            "date": "2010-08-18T17:41:55.058+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Michajlo,\n\nI am fine with reintroducing HttpCacheEntrySerializer but I am somewhat reluctant to introduce a dependency on jettison if it can be avoided. I think we should provide a very simple serializer based on standard java object serialization code. We should also fix HttpCacheEntry. I guess HttpCacheEntry serialization breaks due to BasicStatusLine being non-serializable. I am going to fix in HttpCore.\n\nOleg",
            "date": "2010-08-18T19:57:57.510+0000",
            "id": 7
        },
        {
            "author": "Michajlo Matijkiw",
            "body": "Would it also be possible to make BasicHeader serializable?\n\nThank you,\nMichajlo",
            "date": "2010-08-18T21:25:29.777+0000",
            "id": 8
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Already done. I'll try to cut a new release of HttpCore in the coming days / weeks\n\nOleg",
            "date": "2010-08-19T08:48:52.796+0000",
            "id": 9
        },
        {
            "author": "Michajlo Matijkiw",
            "body": "This patch includes the following changes:\n  - Bought up to date to reflect Jonathan Moore's recent reorganization patch\n  - Reintroduction of HttpCacheEntrySerializer interface, and reintroduction/reworking of DefaultCacheEntrySerializer \n  - Fixed TestEhcacheProtocolRequirements name Protcol/Protocol typo, the mispelled version should be deleted if it still exists\n  - Updated TestEhcacheHttpCache tests- added testCacheGetNullEntry, testCacheUpdateNullEntry, and testCacheUpdate \n  - Fixed update bug\n\nSome notes:\n  - DefaultCacheEntrySerializer makes the assumption that the underlying Set implementation used to hold variants is serializable, I feel like this is a pretty safe assumption\n  - It might be better practice to create a wrapper object as in intermediary for serialization in DefaultCacheEntrySerializer, but the current version should only be a temporary fix until the new httpcore is released, then we will be able to serialize HttpCacheEntry directly\n  - Should TestEhcacheHttpCache be renamed to TestEhcacheHttpCacheStorage?  I can update the patch to include this, but I thought it might be easier to do on your end after the problems with the Protcol/Protocol typo.\n\nAdding HttpCacheOperationException for failed updates is turning out to be a little more involved than I had expected, so I was planning on adding this in a later patch.\n\nPlease let me know if there's anything else you would like me to include or change.\n\nThis patch is submitted with the permission of my employer.\n\nThank you,\nMichajlo",
            "date": "2010-08-19T20:17:22.194+0000",
            "id": 10
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in with some changes to the exception handling code. Please review.\n\nFor the time being I added a sub-class of IOException called HttpCacheOperationException, which can be used to signal cache operation failures. While strictly speaking HttpCacheOperationException does not represent an I/O error, I am not sure if such distinction is worth the trouble of having to propagate HttpCacheOperationException in each and every method of HttpCacheStorage and HttpCache. Feel free to suggest a more elegant solution.\n\nTestEhcacheHttpCache renamed to TestEhcacheHttpCacheStorage. \n\nMichajlo, many thanks for contributing the patch.\n\nOleg",
            "date": "2010-08-21T20:32:49.480+0000",
            "id": 11
        },
        {
            "author": "Michajlo Matijkiw",
            "body": "I agree, I think extending IOException is fine for now.  I believe the eventual goal is to use the HttpCacheOperationException to trigger a configurable number of retries on update failure, so the current implementation can be reevaluated at that point if necessary.\n\nA quick fix, my coworker pointed out a small bug in TestHttpCacheEntrySerializers, line 86, \"one.getAllHeaders()\" should be \"two.getAllHeaders()\".  I looked over the rest of the file and all seems good.\n\nThanks,\nMichajlo",
            "date": "2010-08-23T13:31:45.567+0000",
            "id": 12
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "> I believe the eventual goal is to use the HttpCacheOperationException to trigger a configurable number of retries on update failure, \n> so the current implementation can be reevaluated at that point if necessary.\n\nCould HttpCacheUpdateException be a better name for such exception? It could also contain a piece of information (just a Boolean attribute) indicating whether or not the failure is fatal. The consumer of HttpCacheStorage implementation could choose to catch the exception and retry the operation, if the failure is non fatal. HttpCacheUpdateException may still extend IOException for the sake of simplicity. \n\n> A quick fix, my coworker pointed out a small bug in TestHttpCacheEntrySerializers, line 86, \"one.getAllHeaders()\" should be \"two.getAllHeaders()\". \n\nFixed.\n\nCheers\n\nOleg\n",
            "date": "2010-08-25T11:58:47.711+0000",
            "id": 13
        },
        {
            "author": "Michajlo Matijkiw",
            "body": "I have renamed HttpCacheOperationException to HttpCacheUpdateException, and it no longer extends IOException (you will probably have to delete HttpCacheOperationException.java after applying the patch, it should be empty).  I spoke with Jonathan Moore and it was decided that this is best since the exception should never make it outside of the cache module, and without extending IOException the compiler will guarantee it.\n\nCacheConfig now has a field for maximum number of update retries, and after that many failed update retries, EhcacheHttpCacheStorage will throw the exception.  The exception is caught by BasicHttpCache and a warning is logged.  While a failed update is not ideal, subsequent accesses will re-validate the entry.\n\nThe tests were also updated to verify the behavior with failed updates.\n\nThis patch was submitted with the permission of my employer.\n\nThanks,\nMichajlo",
            "date": "2010-08-27T14:48:10.874+0000",
            "id": 14
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch checked in. Many thanks, Michajlo\n\nOleg",
            "date": "2010-08-27T20:00:30.735+0000",
            "id": 15
        }
    ],
    "component": "HttpCache",
    "description": "Provide an implementation of the HttpCache interface that stores cache entries in ehcache.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-978",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "provide an ehcache implementation for HttpCache",
    "systemSpecification": true,
    "version": ""
}