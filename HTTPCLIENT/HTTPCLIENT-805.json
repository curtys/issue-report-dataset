{
    "comments": [
        {
            "author": "Sean Sullivan",
            "body": "\nAre there any plans to resolve this in HttpClient 4.0?    (This issue has been open for 3 months and HttpClient 4.0 is still in beta)\n\n",
            "date": "2009-02-01T18:48:26.209+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "No, no such plans, unless we are willing to sacrifice complete binary compatibility with the version shipped with Google Android.\n\nOleg",
            "date": "2009-02-01T19:50:30.211+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Kenny, Sean\n\nHttpClient 4.1-snapshot now has a much simpler API for creating and configuring connection managers. HTTP parameters are no longer required when creating standard connection managers and the whole initialization process has become simpler:\n---\nThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(schemeRegistry);\n// Increase max total connection to 200\ncm.setMaxTotalConnections(200);\n// Increase default max connection per route to 20\ncm.setDefaultMaxPerRoute(20);\n// Increase max connections for localhost:80 to 50\nHttpHost localhost = new HttpHost(\"locahost\", 80);\ncm.setMaxForRoute(new HttpRoute(localhost), 50);\n \nHttpClient httpClient = new DefaultHttpClient(cm);\n---\n\nOne would still need to create an instance of SchemeRegistry in order to create a connection manager. Could you leave with the new approach?\n\nI can also provide a constructor that takes ThreadSafeClientConnManagerFactory, if necessary, but that would lead to a certain ugliness in code mainly because damn Java insists on super constructor being the first call in an overloaded constructor.\n\nPlease take a look at the new API and let me know if it is okay to close the issue as FIXED.\n\nOleg",
            "date": "2009-10-02T15:30:24.355+0000",
            "id": 2
        },
        {
            "author": "Ismael Juma",
            "body": "I think this would be better if one could get a default scheme registry from somewhere. By default I mean one like the one created in DefaultHttpClient.createClientConnectionManager:\n\n        SchemeRegistry registry = new SchemeRegistry();\n        registry.register(\n                new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n        registry.register(\n                new Scheme(\"https\", SSLSocketFactory.getSocketFactory(), 443));",
            "date": "2009-11-12T12:45:03.389+0000",
            "id": 3
        }
    ],
    "component": "HttpClient (classic)",
    "description": "Copied from my mailing list post, Oleg suggested I post it to JIRA for 4.1 fix.\n\nI'm trying to find the least verbose way of configuring a DefaultHttpClient with a ThreadSafeClientConnManager.\n\nThe example code given for this goes through a manual process of configuring HttpParams and SchemeRegistry objects, which is more or less copied from the DefaultHttpClient.createHttpParams() and createClientConnectionManager() methods.\n\nIt's a bit of a chicken and egg situation - DefaultHttpClient can create its own HttpParams and SchemeRegistry, which are themselves fine, but only once its been constructed, and the constructor requires the ThreadSafeClientConnManager, but that in turn requires the HttpParams and SchemeRegistry objects.  The only way out is to manually construct the HttpParams and SchemeRegistry, which is a waste.\n\nIt seems to me that DefaultHttpClient's constructor should take a ClientConnectionManagerFactory instead of a ClientConnectionManager. That way, the createClientConnectionManager() method already has the factory reference, and doesn't have to grub around in the HttpParams object to find it.\n\nThe code would then become:\n\nnew DefaultHttpClient(new ThreadSafeClientConnManagerFactory(), null);\n\nwhere ThreadSafeClientConnManagerFactory.newInstance() just constructs ThreadSafeClientConnManager.  There's no manual construction of HttpParams and SchemeRegistry, you just leave it up to DefaultHttpClient.\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-805",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Pass ClientConnectionManager to DefaultHttpClient constructor",
    "systemSpecification": true,
    "version": "4.0 Beta 1"
}