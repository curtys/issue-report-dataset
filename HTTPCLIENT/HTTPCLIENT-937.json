{
    "comments": [
        {
            "author": "David Mays",
            "body": "Unless someone else on the project has the intent of working on this, we will most likely add it to our backlog here at Comcast.\n\nThoughts?",
            "date": "2010-05-19T17:52:12.892+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "It is all yours.\n\nOleg",
            "date": "2010-05-19T18:36:03.790+0000",
            "id": 1
        },
        {
            "author": "David Mays",
            "body": "Ok, this work is now \"in progress\" here.\n\nThanks,\n\nDave",
            "date": "2010-05-20T18:10:27.517+0000",
            "id": 2
        },
        {
            "author": "David Mays",
            "body": "Oleg,\n\nHere is a patch that I believe accomplishes the desired effect.\n\nWe are still carrying a byte[] privately inside the CacheEntry, which makes for easy serialization.\n\nBut now, getBody() returns an HttpEntity which uses the ByteArrayEntity implementation, and is \"new\" for every call to getBody().\n\nBecause the byte[] that gets passed into the CacheEntryGenerator is itself a local variable within a method of CachingHttpClient, I do not believe there are any opportunities for external mutation of the content of that byte[]. However, because someone *could* create a CacheEntry in some other piece of code, and keep a reference to the byte[] that was used, I am not sure this meets the @Immutable requirement.\n\nAll, please feel free to comment and suggest alternatives.\n\nThanks,\n\nDave Mays",
            "date": "2010-05-21T18:39:20.957+0000",
            "id": 3
        },
        {
            "author": "Sebb",
            "body": "Thanks, but it's quite difficult to follow the patch, as there are a lot of irrelevant changes - reordering of imports, field renames etc.\n\nBTW, we never use imports like: import org.apache.http.*;\n\nWould it be possible to provide a minimal patch that includes only the *essential* differences? Thanks!\nAny renaming can be done later, if necessary.",
            "date": "2010-05-21T19:01:50.605+0000",
            "id": 4
        },
        {
            "author": "David Mays",
            "body": "No problem. Something weird happened when I updated from SVN, I think because of all the shuffling of package names. This clearly had an impact on the level of confusion in this patch.\n\nDave",
            "date": "2010-05-21T19:05:01.423+0000",
            "id": 5
        },
        {
            "author": "David Mays",
            "body": "Here is a simpler patch. This does not include the necessary changes to the unit tests, so the project will not compile fully with this. But if all you want to do is read the patch to get the gist of the changes, I think this one is OK.\n\nI also included, for completeness, the patch for the tests.\n\nDave",
            "date": "2010-05-21T19:24:55.414+0000",
            "id": 6
        },
        {
            "author": "Sebb",
            "body": "Thanks, that's a lot better, but there are still some spurious import changes.\n\nI've now had a more detailed look at the proposed changes.\n\nI'm not sure that using ByteArrayEntity helps - the class is not immutable, as it exposes the byte array to subclasses. Furthermore its constructor does not copy the input array, so the caller can change the array after construction. AFAICT, this just moves the mutable items to a different class, but perhaps I'm missing something here.",
            "date": "2010-05-21T19:47:15.124+0000",
            "id": 7
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "@Sebastian\n\nThe entity will be exposed to the consumer as immutable HttpEntity. The consumer would be able to muck around with the underlying byte array only having explicitly cast the entity to ByteArrayEntity. ",
            "date": "2010-05-21T20:05:36.824+0000",
            "id": 8
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "@David\n\nWe could take this one step further and let the HttpCache decide what kind of HttpEntity implementation to use as a cache entry. Ultimately I would like to make it possible to use FileEntity for storing cached content. However, there is one important aspect to be taken into consideration. When backed by the file system a cache must be able to dispose of expired cache entries in such a way that no files would be left lying around or other system resources unreleased. The cache should also be able to keep track of references to cache entries to ensure they could be disposed of only when not referenced.\n\nOleg    ",
            "date": "2010-05-21T20:15:06.385+0000",
            "id": 9
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "David, Sebastian\n\nI committed the patch with some (fairly minor) changes. CacheEntry now uses an immutable HttpEntity to store cached content instead of a byte array. Please review.\n\nNext step should be persistent cache implementation that makes use of the file system to store cached entities.\n\nOleg ",
            "date": "2010-05-23T21:58:55.296+0000",
            "id": 10
        }
    ],
    "component": "HttpCache",
    "description": "Make CacheEntry use an immutable object to represent cache content similar to HttpEntity",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-937",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Make CacheEntry use an immutable object to represent cache content ",
    "systemSpecification": true,
    "version": ""
}