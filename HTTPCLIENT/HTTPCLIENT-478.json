{
    "comments": [
        {
            "author": "Benjamin Chevillon",
            "body": "Did you try with\nhttpClient.getHttpConnectionManager().getParams().setSoTimeout(5000) ?\nSince the url does not exist, the client cannot create a socket to the url.\nAFAIK setConnectionTimeout is for Http timeout (the server exists but takes too\nmuch time to respond).\n\nBenjamin",
            "date": "2005-07-07T22:19:41.000+0000",
            "id": 0
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Created an attachment (id=15609)\nPatch\n\nThe reason for this behaviour is the implementation of the\nDefaultHttpMethodRetryHandler. The attached patch solves the problem for me.\nPlease give it a try and give feedback.",
            "date": "2005-07-07T22:51:02.000+0000",
            "id": 1
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "The behaviour is actually a bit platform and network specific because of the\ntime it takes the OS to report a no route to host exception. On Linux 2.6.12 I\nget the no route to host exception within 4 seconds already.",
            "date": "2005-07-07T22:53:04.000+0000",
            "id": 2
        },
        {
            "author": "Horia Muntean",
            "body": "(In reply to comment #1)\n> Did you try with\n> httpClient.getHttpConnectionManager().getParams().setSoTimeout(5000) ?\n> Since the url does not exist, the client cannot create a socket to the url.\n> AFAIK setConnectionTimeout is for Http timeout (the server exists but takes too\n> much time to respond).\n> \n> Benjamin\nLOL. \nIt's exactly the other way around.\n\nRegards,\nHoria\n",
            "date": "2005-07-08T00:33:20.000+0000",
            "id": 3
        },
        {
            "author": "Horia Muntean",
            "body": "(In reply to comment #2)\n> Created an attachment (id=15609) [edit]\n> Patch\n> \n> The reason for this behaviour is the implementation of the\n> DefaultHttpMethodRetryHandler. The attached patch solves the problem for me.\n> Please give it a try and give feedback.\n\nNope, does not work for me. This is what I did:\nhttpClient.getHttpConnectionManager().getParams().setParameter(HttpMethodParams.RETRY_HANDLER,\nnew RetryHandler());\n\nwhere \n\nclass RetryHandler extends DefaultHttpMethodRetryHandler {\n    \n    public RetryHandler(){\n        super();\n    }\n    \n    public boolean retryMethod(HttpMethod method, IOException exception, int\nexecutionCount) {\n        if(method == null)\n            throw new IllegalArgumentException(\"HTTP method may not be null\");\n        if(exception == null)\n            throw new IllegalArgumentException(\"Exception parameter may not be\nnull\");\n        System.out.println(exception);\n        if(executionCount > getRetryCount())\n            return false;\n        if(exception instanceof NoHttpResponseException)\n            return true;\n        if(exception instanceof InterruptedIOException)\n            return false;\n        if(exception instanceof UnknownHostException)\n            return false;\n        \n        if (exception instanceof NoRouteToHostException) {\n            // Host unreachable\n            return false;\n        }\n        \n        if(exception instanceof javax.net.ssl.SSLHandshakeException)\n            return false;\n        return !method.isRequestSent() || isRequestSentRetryEnabled();\n    }    \n}\n\nwitch does the same thing as your patch I guess.\n\nI observed some other thing. When running with the DefaultHttpMethodRetryHandler\n(first setup) against a machine from internet that has the web server down (not\nreachable even with tracert from a certain route point forward), the connect\ntimeout fires as expected. As far as I tested, only when targeting blind hosts I\nhave this broken behaviour.\n\nHttpClient is not based on java network libs? How come a raw connection attempt\ntimes out corectly even against a blind host?\n\nRegards,\nHoria",
            "date": "2005-07-08T01:02:49.000+0000",
            "id": 4
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Created an attachment (id=15612)\nmore verbous patch\n\nHoria,\n\nWould you please try your tests with the (patched) default retry manager if\npossible? I can send you a compiled HttpClient jar if necessary.\n\nThe 20 seconds you are seeing are 4 times 5 seconds. That is once for the\noriginal request plus three retries. So the whole issue is about the retries.\nTurn off retry completely if you do not believe it.\n\nRetry behaviour is dependent of the type of exception being thrown:\n * UnknownHostException: the hostname can not be resolved e.g. this is an error\non DNS level\n * NoRouteToHostException: if there is no computer at this IP e.g. this is an\nerror on IP level\n * ConnectException: if the port is not open e.g. this is an error on TCP level\n\n\nWhen you turn on logging you will see that the HttpMethodDirector logs a\nwarning about this. The modified patch makes the log message a little more\nverbouse so you can actually see the class of the exception thrown.\n\nYes HttpClient uses java.net. No, HttpClient does not use SocketChannel (nio)\nnor Socket.connect with a timeout since those APIs appeared in JDK 1.4.\nHttpClient is however compatible with JDK 1.3.1.",
            "date": "2005-07-08T01:43:33.000+0000",
            "id": 5
        },
        {
            "author": "Horia Muntean",
            "body": "I have tried with your pathed jar (commons-httpclient-3.0-rc3-r1.jar) and here\nare the results with 3 timeout values (enabled full logging):\n-------------------------------\n2005/07/08 16:27:58:453 EEST [DEBUG] HttpClient - Java version: 1.5.0_04\n2005/07/08 16:27:58:453 EEST [DEBUG] HttpClient - Java vendor: Sun Microsystems Inc.\n2005/07/08 16:27:58:453 EEST [DEBUG] HttpClient - Java class path:\nclasses;lib/commons-httpclient-3.0-rc3-r1.jar;lib/commons-logging.jar;lib/commons-codec-1.3.jar\n2005/07/08 16:27:58:453 EEST [DEBUG] HttpClient - Operating system name: Windows XP\n2005/07/08 16:27:58:453 EEST [DEBUG] HttpClient - Operating system architecture: x86\n2005/07/08 16:27:58:453 EEST [DEBUG] HttpClient - Operating system version: 5.1\n2005/07/08 16:27:58:593 EEST [DEBUG] HttpClient - SUN 1.5: SUN (DSA\nkey/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509\ncertificates; JKS keystore; PKIX CertPathValidator; P\nKIX CertPathBuilder; LDAP, Collection CertStores)\n2005/07/08 16:27:58:593 EEST [DEBUG] HttpClient - SunRsaSign 1.5: Sun RSA\nsignature provider\n2005/07/08 16:27:58:593 EEST [DEBUG] HttpClient - SunJSSE 1.5: Sun JSSE\nprovider(PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)\n2005/07/08 16:27:58:593 EEST [DEBUG] HttpClient - SunJCE 1.5: SunJCE Provider\n(implements RSA, DES, Triple DES, AES, Blowfish, ARCFOUR, RC2, PBE,\nDiffie-Hellman, HMAC)\n2005/07/08 16:27:58:593 EEST [DEBUG] HttpClient - SunJGSS 1.0: Sun (Kerberos v5)\n2005/07/08 16:27:58:593 EEST [DEBUG] HttpClient - SunSASL 1.5: Sun SASL\nprovider(implements client mechanisms for: DIGEST-MD5, GSSAPI, EXTERNAL, PLAIN,\nCRAM-MD5; server mechanisms for: DIGEST-MD5, GSS\nAPI, CRAM-MD5)\n2005/07/08 16:27:58:609 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.useragent = Jakarta Commons-HttpClient/3.0-rc3\n2005/07/08 16:27:58:625 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.version = HTTP/1.1\n2005/07/08 16:27:58:625 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.connection-manager.class = class\norg.apache.commons.httpclient.SimpleHttpConnectionManager\n2005/07/08 16:27:58:625 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.cookie-policy = rfc2109\n2005/07/08 16:27:58:625 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.element-charset = US-ASCII\n2005/07/08 16:27:58:625 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.content-charset = ISO-8859-1\n2005/07/08 16:27:58:625 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.method.retry-handler =\norg.apache.commons.httpclient.DefaultHttpMethodRetryHandler@52fe85\n2005/07/08 16:27:58:625 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.dateparser.patterns = [EEE, dd MMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy\nHH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy, EEE, dd-MMM-yyy\ny HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy HH:mm:ss z, EEE\ndd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE dd-MMM-yyyy HH-mm-ss z,\nEEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:\nss z, EEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy\nHH:mm:ss z]\n2005/07/08 16:27:58:640 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.connection.timeout = 1000\n1 [Fri Jul 08 16:27:58 EEST 2005] - about to get something from\nhttp://192.168.201.14/\n2005/07/08 16:27:58:703 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nHttpConnectionManager.getConnection:  config =\nHostConfiguration[host=http://192.168.201.14], timeout = 0\n2005/07/08 16:27:58:703 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nAllocating new connection, hostConfig=HostConfiguration[host=http://192.168.201.14]\n2005/07/08 16:27:58:718 EEST [DEBUG] HttpConnection - Open connection to\n192.168.201.14:80\n2005/07/08 16:28:04:250 EEST [DEBUG] HttpMethodDirector - Closing the connection.\n2005/07/08 16:28:04:250 EEST [DEBUG] HttpMethodDirector - Method retry handler\nreturned false. Automatic recovery will not be attempted\n2005/07/08 16:28:04:250 EEST [DEBUG] HttpConnection - Releasing connection back\nto connection manager.\n2005/07/08 16:28:04:250 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nFreeing connection, hostConfig=HostConfiguration[host=http://192.168.201.14]\n2005/07/08 16:28:04:250 EEST [DEBUG] IdleConnectionHandler - Adding connection\nat: 1120829284250\n2005/07/08 16:28:04:250 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nNotifying no-one, there are no waiting threads\n1 [Fri Jul 08 16:28:04 EEST 2005] - error:\norg.apache.commons.httpclient.ConnectTimeoutException: The host did not accept\nthe connection within timeout of 1000 ms\n1 [Fri Jul 08 16:28:04 EEST 2005] - connection released\n-------------------------------\n2005/07/08 16:28:45:984 EEST [DEBUG] HttpClient - Java version: 1.5.0_04\n2005/07/08 16:28:45:984 EEST [DEBUG] HttpClient - Java vendor: Sun Microsystems Inc.\n2005/07/08 16:28:46:000 EEST [DEBUG] HttpClient - Java class path:\nclasses;lib/commons-httpclient-3.0-rc3-r1.jar;lib/commons-logging.jar;lib/commons-codec-1.3.jar\n2005/07/08 16:28:46:000 EEST [DEBUG] HttpClient - Operating system name: Windows XP\n2005/07/08 16:28:46:000 EEST [DEBUG] HttpClient - Operating system architecture: x86\n2005/07/08 16:28:46:000 EEST [DEBUG] HttpClient - Operating system version: 5.1\n2005/07/08 16:28:46:140 EEST [DEBUG] HttpClient - SUN 1.5: SUN (DSA\nkey/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509\ncertificates; JKS keystore; PKIX CertPathValidator; P\nKIX CertPathBuilder; LDAP, Collection CertStores)\n2005/07/08 16:28:46:140 EEST [DEBUG] HttpClient - SunRsaSign 1.5: Sun RSA\nsignature provider\n2005/07/08 16:28:46:140 EEST [DEBUG] HttpClient - SunJSSE 1.5: Sun JSSE\nprovider(PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)\n2005/07/08 16:28:46:140 EEST [DEBUG] HttpClient - SunJCE 1.5: SunJCE Provider\n(implements RSA, DES, Triple DES, AES, Blowfish, ARCFOUR, RC2, PBE,\nDiffie-Hellman, HMAC)\n2005/07/08 16:28:46:140 EEST [DEBUG] HttpClient - SunJGSS 1.0: Sun (Kerberos v5)\n2005/07/08 16:28:46:140 EEST [DEBUG] HttpClient - SunSASL 1.5: Sun SASL\nprovider(implements client mechanisms for: DIGEST-MD5, GSSAPI, EXTERNAL, PLAIN,\nCRAM-MD5; server mechanisms for: DIGEST-MD5, GSS\nAPI, CRAM-MD5)\n2005/07/08 16:28:46:156 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.useragent = Jakarta Commons-HttpClient/3.0-rc3\n2005/07/08 16:28:46:171 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.version = HTTP/1.1\n2005/07/08 16:28:46:171 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.connection-manager.class = class\norg.apache.commons.httpclient.SimpleHttpConnectionManager\n2005/07/08 16:28:46:171 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.cookie-policy = rfc2109\n2005/07/08 16:28:46:171 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.element-charset = US-ASCII\n2005/07/08 16:28:46:171 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.content-charset = ISO-8859-1\n2005/07/08 16:28:46:171 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.method.retry-handler =\norg.apache.commons.httpclient.DefaultHttpMethodRetryHandler@52fe85\n2005/07/08 16:28:46:171 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.dateparser.patterns = [EEE, dd MMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy\nHH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy, EEE, dd-MMM-yyy\ny HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy HH:mm:ss z, EEE\ndd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE dd-MMM-yyyy HH-mm-ss z,\nEEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:\nss z, EEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy\nHH:mm:ss z]\n2005/07/08 16:28:46:187 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.connection.timeout = 3000\n1 [Fri Jul 08 16:28:46 EEST 2005] - about to get something from\nhttp://192.168.201.14/\n2005/07/08 16:28:46:250 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nHttpConnectionManager.getConnection:  config =\nHostConfiguration[host=http://192.168.201.14], timeout = 0\n2005/07/08 16:28:46:250 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nAllocating new connection, hostConfig=HostConfiguration[host=http://192.168.201.14]\n2005/07/08 16:28:46:265 EEST [DEBUG] HttpConnection - Open connection to\n192.168.201.14:80\n2005/07/08 16:28:53:781 EEST [DEBUG] HttpMethodDirector - Closing the connection.\n2005/07/08 16:28:53:781 EEST [DEBUG] HttpMethodDirector - Method retry handler\nreturned false. Automatic recovery will not be attempted\n2005/07/08 16:28:53:781 EEST [DEBUG] HttpConnection - Releasing connection back\nto connection manager.\n2005/07/08 16:28:53:781 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nFreeing connection, hostConfig=HostConfiguration[host=http://192.168.201.14]\n2005/07/08 16:28:53:781 EEST [DEBUG] IdleConnectionHandler - Adding connection\nat: 1120829333781\n2005/07/08 16:28:53:781 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nNotifying no-one, there are no waiting threads\n1 [Fri Jul 08 16:28:53 EEST 2005] - error:\norg.apache.commons.httpclient.ConnectTimeoutException: The host did not accept\nthe connection within timeout of 3000 ms\n1 [Fri Jul 08 16:28:53 EEST 2005] - connection released\n-------------------------------\n2005/07/08 16:29:31:140 EEST [DEBUG] HttpClient - Java version: 1.5.0_04\n2005/07/08 16:29:31:140 EEST [DEBUG] HttpClient - Java vendor: Sun Microsystems Inc.\n2005/07/08 16:29:31:140 EEST [DEBUG] HttpClient - Java class path:\nclasses;lib/commons-httpclient-3.0-rc3-r1.jar;lib/commons-logging.jar;lib/commons-codec-1.3.jar\n2005/07/08 16:29:31:140 EEST [DEBUG] HttpClient - Operating system name: Windows XP\n2005/07/08 16:29:31:140 EEST [DEBUG] HttpClient - Operating system architecture: x86\n2005/07/08 16:29:31:140 EEST [DEBUG] HttpClient - Operating system version: 5.1\n2005/07/08 16:29:31:281 EEST [DEBUG] HttpClient - SUN 1.5: SUN (DSA\nkey/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509\ncertificates; JKS keystore; PKIX CertPathValidator; P\nKIX CertPathBuilder; LDAP, Collection CertStores)\n2005/07/08 16:29:31:281 EEST [DEBUG] HttpClient - SunRsaSign 1.5: Sun RSA\nsignature provider\n2005/07/08 16:29:31:281 EEST [DEBUG] HttpClient - SunJSSE 1.5: Sun JSSE\nprovider(PKCS12, SunX509 key/trust factories, SSLv3, TLSv1)\n2005/07/08 16:29:31:281 EEST [DEBUG] HttpClient - SunJCE 1.5: SunJCE Provider\n(implements RSA, DES, Triple DES, AES, Blowfish, ARCFOUR, RC2, PBE,\nDiffie-Hellman, HMAC)\n2005/07/08 16:29:31:281 EEST [DEBUG] HttpClient - SunJGSS 1.0: Sun (Kerberos v5)\n2005/07/08 16:29:31:281 EEST [DEBUG] HttpClient - SunSASL 1.5: Sun SASL\nprovider(implements client mechanisms for: DIGEST-MD5, GSSAPI, EXTERNAL, PLAIN,\nCRAM-MD5; server mechanisms for: DIGEST-MD5, GSS\nAPI, CRAM-MD5)\n2005/07/08 16:29:31:312 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.useragent = Jakarta Commons-HttpClient/3.0-rc3\n2005/07/08 16:29:31:312 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.version = HTTP/1.1\n2005/07/08 16:29:31:312 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.connection-manager.class = class\norg.apache.commons.httpclient.SimpleHttpConnectionManager\n2005/07/08 16:29:31:312 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.cookie-policy = rfc2109\n2005/07/08 16:29:31:312 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.element-charset = US-ASCII\n2005/07/08 16:29:31:312 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.protocol.content-charset = ISO-8859-1\n2005/07/08 16:29:31:312 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.method.retry-handler =\norg.apache.commons.httpclient.DefaultHttpMethodRetryHandler@52fe85\n2005/07/08 16:29:31:312 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.dateparser.patterns = [EEE, dd MMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy\nHH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy, EEE, dd-MMM-yyy\ny HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy HH:mm:ss z, EEE\ndd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE dd-MMM-yyyy HH-mm-ss z,\nEEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:\nss z, EEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy\nHH:mm:ss z]\n2005/07/08 16:29:31:328 EEST [DEBUG] DefaultHttpParams - Set parameter\nhttp.connection.timeout = 5000\n1 [Fri Jul 08 16:29:31 EEST 2005] - about to get something from\nhttp://192.168.201.14/\n2005/07/08 16:29:31:390 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nHttpConnectionManager.getConnection:  config =\nHostConfiguration[host=http://192.168.201.14], timeout = 0\n2005/07/08 16:29:31:406 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nAllocating new connection, hostConfig=HostConfiguration[host=http://192.168.201.14]\n2005/07/08 16:29:31:406 EEST [DEBUG] HttpConnection - Open connection to\n192.168.201.14:80\n2005/07/08 16:29:40:937 EEST [DEBUG] HttpMethodDirector - Closing the connection.\n2005/07/08 16:29:40:937 EEST [DEBUG] HttpMethodDirector - Method retry handler\nreturned false. Automatic recovery will not be attempted\n2005/07/08 16:29:40:937 EEST [DEBUG] HttpConnection - Releasing connection back\nto connection manager.\n2005/07/08 16:29:40:937 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nFreeing connection, hostConfig=HostConfiguration[host=http://192.168.201.14]\n2005/07/08 16:29:40:937 EEST [DEBUG] IdleConnectionHandler - Adding connection\nat: 1120829380937\n2005/07/08 16:29:40:937 EEST [DEBUG] MultiThreadedHttpConnectionManager -\nNotifying no-one, there are no waiting threads\n1 [Fri Jul 08 16:29:40 EEST 2005] - error:\norg.apache.commons.httpclient.ConnectTimeoutException: The host did not accept\nthe connection within timeout of 5000 ms\n1 [Fri Jul 08 16:29:40 EEST 2005] - connection released\n-------------------------------\n\nSo as you can see, an 1000 timeout fires after 6 seconds, an 3000 timeout fires\nafter 7 seconds, a 5000 timeout fires after 9 seconds. Go figure !?\n\nRegards,\nHoria\n",
            "date": "2005-07-08T22:30:56.000+0000",
            "id": 6
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #6)\n> Created an attachment (id=15612) [edit]\n> more verbous patch\n> \n\nOdi, \n\n+1 to commit the patch\n\n> Yes HttpClient uses java.net. No, HttpClient does not use SocketChannel (nio)\n> nor Socket.connect with a timeout since those APIs appeared in JDK 1.4.\n> HttpClient is however compatible with JDK 1.3.1.\n\nActually HttpClient does use Socket.connect through reflection when running in\nJRE >= 1.4\n\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/protocol/ReflectionSocketFactory.html#85\n\nOleg",
            "date": "2005-07-17T02:04:52.000+0000",
            "id": 7
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Horia,\n\nI was unable to reproduce the problem with JRE 1.4.2.8 & 1.5.0.4 on Linux FC4\nand on WinXP with JRE 1.4.2.4. I always get a reasonable connect timeout against\na non-existent IP. The problem appears to be specific to your environment, LAN,\nTCP/IP setup, JRE or something else. \n\nFundamentally HttpClient does not do anything tricky. It just employs reflection\nto execute 1.4 specific methods:\n\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/protocol/ReflectionSocketFactory.html#85\n\nIf you do not care about Java 1.2 compatibility, consider implementing a simpler\nProtocolSocketFactory that directly calls 1.4 specific Socket methods and see if\nthat makes any difference. \n\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/protocol/DefaultProtocolSocketFactory.html#48\n\nOnce Odi's patch is committed we will not have much choice but to mark this bug\nas WORKSFORME unless we get more info how to reproduce the problem.\n\nOleg",
            "date": "2005-07-17T05:22:03.000+0000",
            "id": 8
        },
        {
            "author": "Ortwin Gl\u00fcck",
            "body": "Patch committed.",
            "date": "2005-07-19T19:16:31.000+0000",
            "id": 9
        },
        {
            "author": "Ivan Bojer",
            "body": "Just so you know we are having the exact same problem. The workarround is to use\ndeprecated HttpClient.setConnectionTimeout(5000); method.\n\n(In reply to comment #9)\n> Horia,\n> \n> I was unable to reproduce the problem with JRE 1.4.2.8 & 1.5.0.4 on Linux FC4\n> and on WinXP with JRE 1.4.2.4. I always get a reasonable connect timeout against\n> a non-existent IP. The problem appears to be specific to your environment, LAN,\n> TCP/IP setup, JRE or something else. \n> \n> Fundamentally HttpClient does not do anything tricky. It just employs reflection\n> to execute 1.4 specific methods:\n> \n>\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/protocol/ReflectionSocketFactory.html#85\n> \n> If you do not care about Java 1.2 compatibility, consider implementing a simpler\n> ProtocolSocketFactory that directly calls 1.4 specific Socket methods and see if\n> that makes any difference. \n> \n>\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/protocol/DefaultProtocolSocketFactory.html#48\n> \n> Once Odi's patch is committed we will not have much choice but to mark this bug\n> as WORKSFORME unless we get more info how to reproduce the problem.\n> \n> Oleg\n\n(In reply to comment #9)\n> Horia,\n> \n> I was unable to reproduce the problem with JRE 1.4.2.8 & 1.5.0.4 on Linux FC4\n> and on WinXP with JRE 1.4.2.4. I always get a reasonable connect timeout against\n> a non-existent IP. The problem appears to be specific to your environment, LAN,\n> TCP/IP setup, JRE or something else. \n> \n> Fundamentally HttpClient does not do anything tricky. It just employs reflection\n> to execute 1.4 specific methods:\n> \n>\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/protocol/ReflectionSocketFactory.html#85\n> \n> If you do not care about Java 1.2 compatibility, consider implementing a simpler\n> ProtocolSocketFactory that directly calls 1.4 specific Socket methods and see if\n> that makes any difference. \n> \n>\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/protocol/DefaultProtocolSocketFactory.html#48\n> \n> Once Odi's patch is committed we will not have much choice but to mark this bug\n> as WORKSFORME unless we get more info how to reproduce the problem.\n> \n> Oleg\n\n(In reply to comment #9)\n> Horia,\n> \n> I was unable to reproduce the problem with JRE 1.4.2.8 & 1.5.0.4 on Linux FC4\n> and on WinXP with JRE 1.4.2.4. I always get a reasonable connect timeout against\n> a non-existent IP. The problem appears to be specific to your environment, LAN,\n> TCP/IP setup, JRE or something else. \n> \n> Fundamentally HttpClient does not do anything tricky. It just employs reflection\n> to execute 1.4 specific methods:\n> \n>\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/protocol/ReflectionSocketFactory.html#85\n> \n> If you do not care about Java 1.2 compatibility, consider implementing a simpler\n> ProtocolSocketFactory that directly calls 1.4 specific Socket methods and see if\n> that makes any difference. \n> \n>\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/protocol/DefaultProtocolSocketFactory.html#48\n> \n> Once Odi's patch is committed we will not have much choice but to mark this bug\n> as WORKSFORME unless we get more info how to reproduce the problem.\n> \n> Oleg",
            "date": "2005-08-09T06:58:35.000+0000",
            "id": 10
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "(In reply to comment #11)\n> Just so you know we are having the exact same problem. The workarround is to use\n> deprecated HttpClient.setConnectionTimeout(5000); method.\n\nThis is what this meathod does:\nhttp://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/HttpClient.html#302\nI really do not see how this could possibly be of any relevance for the problem\nwith connection to unreachable hosts\nOleg",
            "date": "2005-08-09T16:45:13.000+0000",
            "id": 11
        }
    ],
    "component": "HttpClient (classic)",
    "description": "I have just modified MultiThreadedExample.java by adding\nhttpClient.getHttpConnectionManager().getParams().setConnectionTimeout(5000); in\norder to set a connection timeout on the client side. Then I have added a LAN\nurl to urisToGet array. The ip of this url (\"http://192.168.254.1/\") is not\nassigned to any computer.\n\nAfter running the client, I get the expected message ( error:\norg.apache.commons.httpclient.ConnectTimeoutException: The host did not accept\nthe connection within timeout of 5000 ms) but only after 20 seconds.\n\nI use java version \"1.5.0_04\". This is not a JVM bug since normal connection\nprocedure times out after 5 seconds as expected:\n        SocketAddress addr = new InetSocketAddress(\"192.168.254.1\", 80);\n        try {\n            \n            SocketChannel channel = SocketChannel.open();\n            channel.socket().connect(addr, 5000);            \n            System.out.println(\"connected\");\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-478",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "HttpConnectionParams.setConnectionTimeout(int) has no effect if host unreachable",
    "systemSpecification": true,
    "version": "3.0 RC3"
}