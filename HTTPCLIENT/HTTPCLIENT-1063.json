{
    "comments": [
        {
            "author": "Oleg Kalnichevski",
            "body": "Martin,\nI made changes to ResponseContentEncoding to ensure that 'x-gzip' is treated as a synonym for 'gzip'.\n\nPresently HttpClient does not support the 'compress' coding, but you are very welcome to contribute it.\n\nOleg",
            "date": "2011-02-25T11:56:04.153+0000",
            "id": 0
        },
        {
            "author": "Martin Zdila",
            "body": "Thanks.\n\nNote: compress can be implemented in the future by LZW algorithm (some example I found: http://algs4.cs.princeton.edu/55compression/LZW.java.html)\n",
            "date": "2011-02-25T12:25:35.095+0000",
            "id": 1
        },
        {
            "author": "James Abley",
            "body": "I'm curious as to which servers use compress. Do you have a real-world example, or is this just a request for completeness in the library?",
            "date": "2011-02-26T13:31:45.108+0000",
            "id": 2
        },
        {
            "author": "Martin Zdila",
            "body": "Interesting for me was only x-gzip because Opera for Windows Mobile requests with that. Other formats are just for completeness, nohing more.",
            "date": "2011-02-26T18:25:18.908+0000",
            "id": 3
        },
        {
            "author": "Alin Vasile",
            "body": "Compress and x-compress seems to use LZA - a variant of LZW. I tested some implementation in java found on internet (http://www.aprogrammersblog.co.uk/tutorials/java-uncompressing-z-unix-compress-files/) with the latest version of http-client and it decodes correctly  a .Z file archived in solaris with 'compress' and put on an httpd server on windows. Not sure how licensed is that code so you can use it.",
            "date": "2011-03-04T20:46:46.393+0000",
            "id": 4
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "We cannot simply take that bit of code as its licensing terms are unclear. However, if someone were to write a clean room implementation of that same algorithm and to contribute it under ASLv2 licence it would probably be safe to include into HttpClient.\n\nOleg",
            "date": "2011-03-05T10:23:50.100+0000",
            "id": 5
        }
    ],
    "component": "HttpClient (classic)",
    "description": "ResponseContentEncoding should also handle x-gzip, compress and x-compress encodings according to specs (http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html, 3.5 Content Codings).\n\nAlso RequestAcceptEncoding should set Accept-Encoding to \"gzip,deflate,identity\". I am not sure about x-gzip, compress and x-compress here though.\n\nThanks",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-1063",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Trivial",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "ResponseContentEncoding should also handle x-gzip, compress and x-compress",
    "systemSpecification": true,
    "version": "4.1 Final"
}