{
    "comments": [
        {
            "author": "Jonathan Moore",
            "body": "The attached patch does the bare minimum to bring the implementation into conditional compliance. Basically:\n\n* added a new method isSharedCache to CachingHttpClient. Currently this is hardcoded to return true. Eventually it would be good to have this be configurable on instantiation.\n* updated the ResponseCachingPolicy to not cache responses to requests with Authorization headers\n* added a set of protocol compliance tests to TestProtocolRequirements that are conditional based on whether the cache indicates it is shared or not via isSharedCache().\n\nFurther work probably includes:\n* allowing caching of responses that are allowed even for shared caches (s-maxage, must-revalidate, public).\n* allowing caching of all authorized responses by a non-shared cache\n\nThis patch is contributed to the ASF with the permission of my employer.\n",
            "date": "2010-06-30T19:44:19.366+0000",
            "id": 0
        },
        {
            "author": "Jonathan Moore",
            "body": "Ok, this patch does the work to allow caching of authorized responses that have s-maxage, must-revalidate, or public parameters in their Cache-Control headers. If the CachingHttpClient is a shared cache, this is the best we can do for this.\n\nStill open: allowing the CachingHttpClient to be configured as a non-shared cache.\n\nThis patch is contributed to the ASF with the permission of my employer.\n",
            "date": "2010-06-30T20:04:31.809+0000",
            "id": 1
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Patch authorized-responses-2.patch checked in. Please let me know if I should keep the issue open for now, close it as FIXED or re-assign to FUTURE.\n\nOleg   ",
            "date": "2010-07-04T14:00:36.848+0000",
            "id": 2
        },
        {
            "author": "Jonathan Moore",
            "body": "Ok, I think we can close this issue, as the current behavior is conditionally compliant (just non-optimal, since we could cache some more responses if we knew we were a non-shared cache).\n\nI would vote for opening a new issue as an improvement (\"allow configuration of a non-shared cache\").\n",
            "date": "2010-07-12T14:00:53.900+0000",
            "id": 3
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Closing as FIXED. \n\nPlease do feel free to raise a new improvement request as a follow-up to this issue.\n\nOleg ",
            "date": "2010-07-12T19:40:57.481+0000",
            "id": 4
        }
    ],
    "component": "HttpCache",
    "description": "\"      When a shared cache (see section 13.7) receives a request\n      containing an Authorization field, it MUST NOT return the\n      corresponding response as a reply to any other request, unless one\n      of the following specific exceptions holds:\n\n      1. If the response includes the \"s-maxage\" cache-control\n         directive, the cache MAY use that response in replying to a\n         subsequent request. But (if the specified maximum age has\n         passed) a proxy cache MUST first revalidate it with the origin\n         server, using the request-headers from the new request to allow\n         the origin server to authenticate the new request. (This is the\n         defined behavior for s-maxage.) If the response includes \"s-\n         maxage=0\", the proxy MUST always revalidate it before re-using\n         it.\n\n      2. If the response includes the \"must-revalidate\" cache-control\n         directive, the cache MAY use that response in replying to a\n         subsequent request. But if the response is stale, all caches\n         MUST first revalidate it with the origin server, using the\n         request-headers from the new request to allow the origin server\n         to authenticate the new request.\n\n      3. If the response includes the \"public\" cache-control directive,\n         it MAY be returned in reply to any subsequent request.\"\n\nhttp://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.8\n\nIt isn't clear whether the CachingHttpClient is a shared cache or not (it depends on where it gets used), so the conservative compliant behavior is to assume we are a shared cache. The current implementation is caching responses regardless of whether the original requests had Authorization headers or not.\n\nPatch and discussion forthcoming.\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-962",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "client cache may be a shared cache but is caching responses to requests with Authorization headers",
    "systemSpecification": true,
    "version": "4.1 Alpha2"
}