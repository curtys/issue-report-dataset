{
    "comments": [
        {
            "author": "Jeff Dever",
            "body": "Created an attachment (id=2303)\nPatch to replace HashMap with Vector in PostMethod plus cleanups and tests\n",
            "date": "2002-07-10T17:13:08.000+0000",
            "id": 0
        },
        {
            "author": "dion gillard",
            "body": "Fix committed today",
            "date": "2002-07-10T18:34:23.000+0000",
            "id": 1
        }
    ],
    "component": "HttpClient (classic)",
    "description": "Propose to change the parameters datastructure in PostMethod from its\ncurrent HashMap to an ArrayList (or Vector) of NameValuePair objects. \nThis change would lead to simpler and more robust code in the PostMethod\nwith more deterministic behaviour for the following reasons:\n\n1) HashMap looses any insertion order.  If the client wants to have the\nencoded parameters to show up in a particular order, they are unable.\n\n2) Hash map requres unique keys where there is no reason that multiple\nparameters with the same name cannot be POSTed.  The current\nimplementation replaces the string value with a List if there is a\naddParameter with a repeated name key.  Every get from the HashMap then\nhas to do an instanceOf to see if the value is a String or a List.\n\n3) Hash maps are no faster than a Vector for typical operations.  They\nboth have O(1) insertions and both do O(n) removal operations to\ngenPropose to change the parameters datastructure in PostMethod from its\ncurrent HashMap to an ArrayList (or Vector) of NameValuePair objects. \nThis change would lead to simpler and more robust code in the PostMethod\nwith more deterministic behaviour for the following reasons:\n\n1) HashMap looses any insertion order.  If the client wants to have the\nencoded parameters to show up in a particular order, they are unable.\n\n2) Hash map requres unique keys where there is no reason that multiple\nparameters with the same name cannot be POSTed.  The current\nimplementation replaces the string value with a List if there is a\naddParameter with a repeated name key.  Every get from the HashMap then\nhas to do an instanceOf to see if the value is a String or a List.\n\n3) Hash maps are no faster than a Vector for typical operations.  They\nboth have O(1) insertions and both do O(n) removal operations to\ngenerate the body.  HashMap is only faster when a search is required,\nsuch as for getParameter(String), setParameter(String, String) and\nremoveParameter(String) which should rarely be called.\n\nI would also move to depricate setParameter(String, String) as it is\nconfusing in the API.  (setParameter overwrites any existing parameter\nof the same name where addParameter accumulates to the list of\nparameters).  The setParameter functionality can also be effected by\ncalling removeParameter then addParameter already.\n\nerate the body.  HashMap is only faster when a search is required,\nsuch as for getParameter(String), setParameter(String, String) and\nremoveParameter(String) which should rarely be called.\n\nI would also move to depricate setParameter(String, String) as it is\nconfusing in the API.  (setParameter overwrites any existing parameter\nof the same name where addParameter accumulates to the list of\nparameters).  The setParameter functionality can also be effected by\ncalling removeParameter then addParameter already.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-43",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "replace the PostMethod parameters HashMap with a List",
    "systemSpecification": false,
    "version": ""
}