{
    "comments": [
        {
            "author": "Roland Weber",
            "body": "I don't think ExpectContinueMethod is the place to add this, from a design\npoint of view. EntityEnclosingMethod sounds more appropriate, except that\nMultiPartPostMethod is not derived from it. There's probably an implementation\nspecific reason for that. However, both would affect PutMethod, which does not\nallow parameters to be set at all.\nI guess the best approach would be to define an interface, something like\nParameterCarryingMethod, which could be implemented by PostMethod as well\nas MultipartPostMethod. That's for the 3.0 API of course, since the 2.0 API\nhas already been finalized.\n\ncheers,\n  Roland",
            "date": "2004-06-16T13:52:22.000+0000",
            "id": 0
        },
        {
            "author": "Oleg Kalnichevski",
            "body": "Sounds reasonable. I am afraid this will have to wait until the complete\nredesign targeted for the release 4.0, though\n\nOleg ",
            "date": "2004-06-22T01:43:21.000+0000",
            "id": 1
        },
        {
            "author": "Roland Weber",
            "body": "With the new API, this issue is no longer relevant. You add parameters to UrlEncodedFormEntity (currently in package o.a.h.client.methods) and set that entity on the request you want to execute, no matter what method.\n\ncheers,\n  Roland",
            "date": "2008-02-07T20:33:05.613+0000",
            "id": 2
        }
    ],
    "component": "HttpClient (classic)",
    "description": "I have some common code (in a reverse proxy server) that uses addParameter on \ninstances of both PostMethod and MultipartPostMethod\n\nIt would be great if either addParameter were made an abstract method on \nExpectContinueMethod or both were made to implement a common base class. Here's \nmy workaround:\n\n    private void addPostParameter(ExpectContinueMethod method, String name, \nString value) {\n        if (method instanceof PostMethod) {\n            ((PostMethod)method).addParameter(name, value);\n        } else if (method instanceof MultipartPostMethod) {\n            ((MultipartPostMethod)method).addParameter(name, value);\n        } else {\n            throw new IllegalArgumentException(\"addPostParameter is only \ndefined for PostMethod and MultipartPostMethod\");\n        }\n        \n    }\n    // whoa - smells pretty bad",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "HTTPCLIENT-352",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "HTTPCLIENT",
    "project": "HTTPCLIENT",
    "summary": "Allow polymorphic use of addParameter",
    "systemSpecification": true,
    "version": "2.0 Final"
}