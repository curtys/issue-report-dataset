{
    "comments": [
        {
            "author": "Paul Elschot",
            "body": "Could you put this in a subclass of Spans?\n\nA little while ago I suggested to add a score() method to Spans to summarize the influence of subspans on the span score, and that would be another direction for a subclass.\n",
            "date": "2007-09-16T08:49:45.200+0000",
            "id": 0
        },
        {
            "author": "Grant Ingersoll",
            "body": "Do you mean in a separate interface?  I suppose I should for backward compatibility so that people with existing Span implementations outside of Lucene aren't broken.",
            "date": "2007-09-16T12:07:03.982+0000",
            "id": 1
        },
        {
            "author": "Grant Ingersoll",
            "body": "This also blurs the line more between payloads and Spans, I suggest we drop the payloads package and move the BoostingTermQuery into the Spans package.  I originally thought there would be more distinction between the two packages, but that seems less likely now.\n\nSince payloads are still marked as experimental, does anyone see a problem with moving it?  I suppose it could be deprecated and copied since it has been released.",
            "date": "2007-09-16T12:11:15.726+0000",
            "id": 2
        },
        {
            "author": "Paul Elschot",
            "body": "My mistake, I thought Spans was an abstract class, but it is an interface.\nThat also means that Spans should not be changed at all, interfaces are forever.\n\nSomething like this could do nicely:\n\npublic interface PayloadSpans extends Spans {\n// as above\n}\n\nI'd prefer the payload \"core\" classes to stay in their own package search/payload\nbecause they may well turn out to be useful in other circumstances, for example\nas a way to avoid disjunctions with many terms.\nAt the moment I have no preference for a package for the PayloadSpans above,\nit could be search.spans or search.payloads.\n",
            "date": "2007-09-16T14:03:56.144+0000",
            "id": 3
        },
        {
            "author": "Grant Ingersoll",
            "body": "{quote}\npublic interface PayloadSpans extends Spans { // as above }\n{quote}\n\nI think this is problematic too, unfortunately, since many spans actually contain other spans, so there is no way to safely cast even in the internal implementations.\n\nAlternative might be to add SpanQuery.getPayloadSpans() but that is ugly, too.\n\nI wish there was an equivalent way to deprecated that allowed one to tell people new methods are coming, but that won't break the existing interface.  Semantics of it would need to be figured out, but it would be useful here to just be able to let people know that we want to add to the Spans interface, but they just get a warning when compiling until we make it official.\n\nI suppose the right thing to do if we really want this to work is to deprecate Spans and SpanQuery.getSpans() and introduce a new form of Spans (maybe as an abstract class this time?)\n\nOr am I missing something that provides a clearer way of doing this?",
            "date": "2007-10-23T00:29:29.335+0000",
            "id": 4
        },
        {
            "author": "Paul Elschot",
            "body": "I think I would just go ahead and create a parallel class hierarchy starting from class PayloadSpanQuery with a getPayloadSpans() method, and try and use delegation to the various SpanQueries and their Spans as much as possible.\nThat means you would end up with this a few times:\n\nreturn new PayLoadSpans () {\n   Spans delegatedTo = aFinalSpans;\n   .... some Spans methods directly delegated...\n};\n\nWhen this delegation happens too often, it  could even be factored out into its own superclass.\nIf the delegation turns out to be a performance problem it might be inlined, but that would mean code duplication.\n\nFor the rest, in case you need some existing SpanQuery private methods you could change them to package private, and move your classes to the search.spans package for that reason.",
            "date": "2007-10-23T17:17:56.600+0000",
            "id": 5
        },
        {
            "author": "Grant Ingersoll",
            "body": "Paul,\n\nI think I have this implemented for the most part, but am having trouble with the NearSpansUnordered.  Can you enlighten me to the use of the PriorityQueue in the file?  Not saying its wrong, just saying I don't understand what's going on.  Also wondering about how it relates to the ordered member and the first and last SpansCell.\n\nThanks,\nGrant",
            "date": "2007-11-19T19:10:25.624+0000",
            "id": 6
        },
        {
            "author": "Paul Elschot",
            "body": "I only wrote NearSpansOrdered. NearSpansOrdered is what is left of the original NearSpans after the ordered case was taken out, and after I specialized NearSpans the unordered case. That means I only simplified the original NearSpans.\n\nOff the top of my head: the priority queue is used to make sure that the Spans are processed by increasing doc numbers and increasing token positions; the first and the last Spans determine whether there is a match, and all other Spans (in the queue) are \"in between\".\n\nI think you'll only need to implement the Spans interface to use the same priority queue,\nand you'll have to come up with a way to collect all the payloads from your payload spans on a match.\nProbably fairly straightforward, but with Spans there is always unexpected fun waiting around the next corner :)\n\n",
            "date": "2007-11-19T21:08:15.088+0000",
            "id": 7
        },
        {
            "author": "Grant Ingersoll",
            "body": "I have it implemented for the Ordered case (and all other Spans) but will need to dig in deeper for the unordered case.  Worst case, I can pop the queue from min() to max, but I then have to reconstruct the queue and that doesn't seem good.  Hopefully, I can dig in soon, as I would like to get this in 2.3 along with the other Payload stuff we are discussing since it sounds like that API is firming up.",
            "date": "2007-11-19T21:16:19.842+0000",
            "id": 8
        },
        {
            "author": "Paul Elschot",
            "body": "So far, it's easier than that: when they match, they all match, so you only need to keep the input Spans around in List or whatever. Then use them all as a source for your payloads.\n",
            "date": "2007-11-19T22:54:24.324+0000",
            "id": 9
        },
        {
            "author": "Grant Ingersoll",
            "body": "{quote}\nOff the top of my head: the priority queue is used to make sure that the Spans are processed by increasing doc numbers and increasing token positions; the first and the last Spans determine whether there is a match, and all other Spans (in the queue) are \"in between\".\n{quote}\nWould it be simpler to just use a SortedSet?  Then we could iterate w/o losing the sort, right?  Would this be faster since we wouldn't have to do the heap operations?",
            "date": "2007-11-20T15:03:55.436+0000",
            "id": 10
        },
        {
            "author": "Doug Cutting",
            "body": "> Would it be simpler to just use a SortedSet?\n\nTreeMap is slower than a PriorityQueue for this.  With PriorityQueue, insertions and deletions do not allocate new objects.  And, if some items are much more frequent than others, using adjustTop() instead of inserting and deleting makes merges run much faster, since most updates are then considerably faster than log(n).",
            "date": "2007-11-20T19:50:54.705+0000",
            "id": 11
        },
        {
            "author": "Grant Ingersoll",
            "body": "Sure, but how do I get access to the position payloads in the order that they occur in the PQ?  I have to go and pop them all of the PQ or I need to maintain a separate PQ for the Payloads so that when I go to get a payload for a span, I can iterate over all the items by calling PQ.pop() but then I have to rebuild it again if getPayload is called again, right?\n\nI think I need to take a break and come back to this after some Turkey...  :-)",
            "date": "2007-11-20T22:46:57.923+0000",
            "id": 12
        },
        {
            "author": "Doug Cutting",
            "body": "> how do I get access to the position payloads in the order that they occur in the PQ?\n\nWhy do you need them in that order?  In the API you propose in the description of this issue, there's no clear association between the payloads returned  and the query terms.  So I don't yet see how the order of the payloads is useful.\n\nYou could pretty easily return the list of payloads along with their positions by iterating through the list of sub-queries.  The problem is that providing that sorted by position is expensive.  Perhaps you could leave any such sorting, if required, to the application?\n",
            "date": "2007-11-21T17:37:59.542+0000",
            "id": 13
        },
        {
            "author": "Grant Ingersoll",
            "body": "Yeah, I was thinking this as a possibility, but thought people may want to rely on the ordering, even if they mark it as unordered.  I guess I will just have to properly document it, b/c I agree it is expensive to sort.\n\nI will submit a patch shortly.",
            "date": "2007-11-25T14:20:29.325+0000",
            "id": 14
        },
        {
            "author": "Grant Ingersoll",
            "body": "First draft of a patch for this issue.  Need to expand/double check the tests and cleanup a few things before committing, but wanted to get opinion on the API.\n\nAlso, would like to see if NearSpansOrdered can be optimized a bit to not load the payloads in the case where the user doesn't ask for PayloadSpans.  The other implementations shouldn't have this issue.",
            "date": "2007-11-25T17:52:40.725+0000",
            "id": 15
        },
        {
            "author": "Grant Ingersoll",
            "body": "There is an issue w/ this patch related to unordered, overlapping spans that still needs to be fixed.  Will try to get an updated patch out soon.",
            "date": "2007-11-26T12:06:59.639+0000",
            "id": 16
        },
        {
            "author": "Grant Ingersoll",
            "body": "Fixes the unordered problem.  Still needs more testing, but I believe it is working",
            "date": "2007-11-26T14:26:22.068+0000",
            "id": 17
        },
        {
            "author": "Grant Ingersoll",
            "body": "I don't think that patch is compatible w/ anything :-)   It was a  \nrough sketch that never properly worked.  I put it up there in the  \nhopes that maybe someone would have some more insight to offer.\n\n\n\n\n--------------------------\nGrant Ingersoll\n\nLucene Helpful Hints:\nhttp://wiki.apache.org/lucene-java/BasicsOfPerformance\nhttp://wiki.apache.org/lucene-java/LuceneFAQ\n\n\n\n\n\n\n",
            "date": "2008-04-30T16:32:57.090+0000",
            "id": 18
        },
        {
            "author": "Mark Miller",
            "body": "Anyone still have a use case for this issue?\n\nHere is a patch that I think fixes the orderedspans problem - need to test further, but that may be the last piece on those parts.\n\nBeyond that, I think that a span uses only one clause to determine if a payload is available for the whole span - it seems to me we have to ask every clause.\n\nAs far as the ordering of returned payloads, I don't see how they can be ordered by the user without having some info in the payload itself - I mean its just going to be a collection of byte arrays right? How could you order them? Seems at most you can say those payloads came from the given span and use them all.\n\nThe more I look at spans the less I understand them I think <g> Its like repeating certain words over and over.",
            "date": "2008-08-09T16:57:40.554+0000",
            "id": 19
        },
        {
            "author": "Mark Miller",
            "body": "Without the absolute paths in the patch this time (get it together eclipse)",
            "date": "2008-08-09T17:02:27.728+0000",
            "id": 20
        },
        {
            "author": "Mark Miller",
            "body": "Fixes the unorderedspan ispostionavailable issue for good measure.\n\nI think we have to give the payloads back unsorted - there are probably cases where you could just use all the payloads for a span rather than per term, so we might as well not incur a penalty there. If you need per term, you can put the position into the payload (pretty simple) and then just sort yourself.",
            "date": "2008-08-10T03:47:11.986+0000",
            "id": 21
        },
        {
            "author": "Mark Miller",
            "body": "I'll correct it if I have anything to add later, but the new isPayloadAvailable on the unordered spans should start at min(), not first.",
            "date": "2008-08-10T23:46:24.917+0000",
            "id": 22
        },
        {
            "author": "Mark Miller",
            "body": "Might as well keep striking while the iron's hot. This fixes the first to min() issue, I think it adds an isSpansAvailable call that had been commented out, adds a couple tests, tightens a test, and adds a new class that takes a single document and returns all of payloads from the terms that match a given Query object (so you could do a mix of span/query) - may or may not be useful someday.",
            "date": "2008-08-11T01:22:27.345+0000",
            "id": 23
        },
        {
            "author": "Grant Ingersoll",
            "body": "TestBoostingTermQuery.testNoPayload now fails for me.\n\nAlso noticed some extraneous System.out.println.",
            "date": "2008-08-11T20:22:26.210+0000",
            "id": 24
        },
        {
            "author": "Mark Miller",
            "body": "I see what happened with the boosting test - the old patch didn't apply cleanly for me to the trunk for that test class - I looked for the issue but it looked clean so I left it to deal with later - turns out one or two lines were mangled. New patch that fixes that.\n\nAlso turned off DEBUG for the payloads test class so that will drop the System.outs.\n\nPretty clean now.",
            "date": "2008-08-11T20:56:03.166+0000",
            "id": 25
        },
        {
            "author": "Grant Ingersoll",
            "body": "Added to CHANGES.txt\n\nMade the SpanQuery.getPayloadSpans() method an empty implementation that returns null instead of being abstract, so as not to break anyone that extends SpanQuery.   All Lucene span implementations override it.\n\nAlso added in license headers.\n\nPlan to commit in a day or two",
            "date": "2008-08-19T14:39:30.501+0000",
            "id": 26
        },
        {
            "author": "Mark Miller",
            "body": "Took one last look through for final cleanup - removed an unused import and some unneeded commented code.",
            "date": "2008-08-19T21:43:58.510+0000",
            "id": 27
        },
        {
            "author": "Grant Ingersoll",
            "body": "Committed revision 687379.",
            "date": "2008-08-20T16:07:15.496+0000",
            "id": 28
        },
        {
            "author": "Jonathan Mamou",
            "body": "Hi,\n\nI use getPayloadSpans to get the spans (PayloadSpans spans = sq.getPayloadSpans(this.getIndexReader());) and for each span I extract the relevant payload using spans.getPayload() (after calling spans.next()).\n \nI have tested it for a SpanNearQuery, I have stored the offset in the payload (for testing). \n\nIt seems to me that the payloads returned for the span (spans.getPayload()) does not match the current span (given by span.next()). In fact, the offset returned by the payload are different from the offset returned by span.start().\nIt occurs when they are multiple occurrences of the terms. \n\nAre you aware of this bug?\n\nThanks,\n\nJonathan ",
            "date": "2008-11-16T13:15:25.182+0000",
            "id": 29
        },
        {
            "author": "Mark Miller",
            "body": "So are you finding the payloads not at the right term if the terms match ie\n\nterm1 term2 term1\n\nYou might get the second term1's offsets for the first term1 and vice versa?",
            "date": "2008-11-16T13:29:13.152+0000",
            "id": 30
        },
        {
            "author": "Jonathan Mamou",
            "body": "In my document, I have \".... term1 ... term1 term2 ...\"\noffset of term1: 10, 20\noffset of term2: 21\n\nWhen running the query SpanNearQuery(term1 term2), \naccording to span.start, I get 20  \nwhile I get 10 and 21 when reading the payloads of the span.\nI would expect to get 20 and 21when reading the payloads of the span.\n",
            "date": "2008-11-16T14:12:26.434+0000",
            "id": 31
        },
        {
            "author": "Jonathan Mamou",
            "body": "Hi,\n\nHere is the relevant code. \n\nI would expect to obtain\n10\npos: 10\npos: 11\n\nwhile I obtain\n10\npos: 0\npos: 11\n\n\n\n\nimport java.io.StringReader;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.TopDocs;\nimport org.apache.lucene.search.spans.PayloadSpans;\nimport org.apache.lucene.search.spans.SpanNearQuery;\nimport org.apache.lucene.search.spans.SpanQuery;\nimport org.apache.lucene.search.spans.SpanTermQuery;\n\n\npublic class Test {\n\npublic static void main (String args[]) throws Exception{\nIndexWriter writer = new IndexWriter(args[0], new\nTestPayloadAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\nDocument doc = new Document();\ndoc.add();new Field(\"content\", new StringReader(\"a b c d e f g\nh i j a k\")));\nwriter.addDocument(doc);\nwriter.close();\n\nIndexSearcher is = new IndexSearcher(args[0]););\nSpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"\n));\nSpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"\n));\nSpanQuery[] sqs = {stq1,stq2};\nSpanNearQuery snq = new SpanNearQuery(sqs,1,true);\nPayloadSpans spans = snq.getPayloadSpans(is.getIndexReader());\n\nTopDocs topDocs = is.search(snq,1);\n\nfor (int i = 0; i < topDocs.scoreDocs.length; i++) {\nwhile) (spans.next()) {\nSystem.out.println(spans.start());\nCollection<byte[]> payloads = spans.getPayload();\nfor (Iterator<byte[]> it = payloads.iterator();\nit.hasNext();) {\nSystem.out.println(new String(it.next()));\n}\n}}\n}\n}\n}}\n\n-------------------------------------------------------------------------------------------------------------------------------------\nimport java.io.IOException;\nimport java.io.Reader;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.LowerCaseTokenizer;\nimport org.apache.lucene.analysis.Token;\nimport org.apache.lucene.analysis.TokenFilter;\nimport org.apache.lucene.analysis.TokenStream;\nimport org.apache.lucene.index.Payload;\n\n\npublic class TestPayloadAnalyzer extends Analyzer {\n\npublic TokenStream tokenStream(String fieldName, Reader reader) {\nTokenStream result = new LowerCaseTokenizer(reader);\nresult = new PayloadFilter(result, fieldName);\nreturn result;\n}\n}\n\nclass PayloadFilter extends TokenFilter {\nString fieldName;\nint pos;\n\npublic PayloadFilter(TokenStream input, String fieldName) {\nsuper(input);\nthis.fieldName = fieldName;\npos = 0;\n\n}\n\npublic Token next() throws IOException {\nToken result = input.next();\nif (result != null) {\nString token = new String(result.termBuffer(), 0, result.termLength\n());\nresult.setPayload(),new Payload((\"pos: \" + pos).getBytes()));\npos += result.getPositionIncrement();\n}\nreturn} result;\n}\n}\n\n\nJonathan ",
            "date": "2008-11-17T19:11:55.103+0000",
            "id": 32
        },
        {
            "author": "Mark Miller",
            "body": "Okay, I still understand like 2% of spans, but I think I have fixed the bug.\n\nAfter finding a match, but before finding a min match, we were pulling the payload - works fine when the match is the min match, but otherwise we actually have to wait to get the payload until we have crunched in on the min match. I had an idea of this before, and the code before I touched it tried to grab the payloads at this point - the problem is, in finding the min match, you've often advanced passed the term position of interest to find out there was no such min match. So you have to save the possible payload ahead of time, and either find a new one or use the possible saved one. Sucks to have to add extra loading, but at the moment I don't see how to do it differently (I admittedly can't see much in spans). Thats all partly a guess, partly probably true.\n\nNon the less, this patch handles the previous test cases, plus the bug case reported above. I have also added a modified version of the given test for the bug to the span battery of tests.\n\nThanks Jonathan!",
            "date": "2008-11-21T02:37:51.677+0000",
            "id": 33
        },
        {
            "author": "Mark Miller",
            "body": "Whats the best procedure JIRA wise on this? Reopen this issue or start a new issue? If we reopen this issue, how is the bug fix tracked in changes?",
            "date": "2008-11-21T11:48:50.981+0000",
            "id": 34
        },
        {
            "author": "Grant Ingersoll",
            "body": "Open a new one.\n\n\n\n",
            "date": "2008-11-21T14:04:45.447+0000",
            "id": 35
        }
    ],
    "component": "core/search",
    "description": "It will be nice to have access to payloads when doing SpanQuerys.\n\nSee http://www.gossamer-threads.com/lists/lucene/java-dev/52270 and http://www.gossamer-threads.com/lists/lucene/java-dev/51134\n\nCurrent API, added to Spans.java is below.  I will try to post a patch as soon as I can figure out how to make it work for unordered spans (I believe I have all the other cases working).\n\n{noformat}\n /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons.<br>\n   * <br>\n   * <p><font color=\"#FF0000\">\n   * WARNING: The status of the <b>Payloads</b> feature is experimental.\n   * The APIs introduced here might change in the future and will not be\n   * supported anymore in such a case.</font>\n   *\n   * @return a List of byte arrays containing the data of this payload\n   * @throws IOException\n   */\n  // TODO: Remove warning after API has been finalized\n  List/*<byte[]>*/ getPayload() throws IOException;\n\n  /**\n   * Checks if a payload can be loaded at this position.\n   * <p/>\n   * Payloads can only be loaded once per call to\n   * {@link #next()}.\n   * <p/>\n   * <p><font color=\"#FF0000\">\n   * WARNING: The status of the <b>Payloads</b> feature is experimental.\n   * The APIs introduced here might change in the future and will not be\n   * supported anymore in such a case.</font>\n   *\n   * @return true if there is a payload available at this position that can be loaded\n   */\n  // TODO: Remove warning after API has been finalized\n  public boolean isPayloadAvailable();\n{noformat}",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1001",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add Payload retrieval to Spans",
    "systemSpecification": true,
    "version": ""
}