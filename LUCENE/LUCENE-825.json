{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Whoa, thanks for catching this!\n\nI would rather leave FSDirectory.list() returning null when the\ndirectory does not exist because that would be an API change that\nmakes me a little nervous.\n\nI'll instead fix it in SegmentInfos and add a unit test showing the\nbug.\n\nIndex: src/java/org/apache/lucene/index/SegmentInfos.java\n===================================================================\n--- src/java/org/apache/lucene/index/SegmentInfos.java\t(revision 515317)\n+++ src/java/org/apache/lucene/index/SegmentInfos.java\t(working copy)\n@@ -481,6 +481,10 @@\n             files = fileDirectory.list();\n           }\n \n+          if (files == null) {\n+            throw new FileNotFoundException(\"no segments* file found in directory \" + directory + \": list() returned null\");\n+          }\n+\n           gen = getCurrentSegmentGeneration(files);\n \n           if (gen == -1) {\n",
            "date": "2007-03-07T08:22:16.895+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Tim.  Keep the patches coming!",
            "date": "2007-03-07T08:46:47.118+0000",
            "id": 1
        },
        {
            "author": "Tim Brennan",
            "body": "The reason I suggested changing FSDirectory is that a quick look through the callers of Directory.list() show that pretty much none of the callsites expect a null return from this function. \n\n Check out:\n\n1) SegmentInfos.java - boolean hasSeparateNorms():\n        String[] result = dir.list();\n        String pattern;\n        pattern = name + \".s\";\n        int patternLength = pattern.length();\n        for(int i = 0; i < result.length; i++){\n          if(result[i].startsWith(pattern) && Character.isDigit(result[i].charAt(patternLength)))\n(accesses result.length w/o null check on result)\n\n\n2) IndexFileDeleter.java - void findDeletableFiles():\n    String[] files = directory.list();\n\n    for (int i = 0; i < files.length; i++) {\n(access to files.length w/o null check)\n\n3) Directory.java - static void copy(...)\n....same thing...\n\n\nShould probably fix all those callsites as well, if we really expect Directory.list() to return null...\n\n\n",
            "date": "2007-03-07T10:19:22.951+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Excellent point.  I will do that.",
            "date": "2007-03-07T10:32:05.618+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch to check all places internal to Lucene where we call Directory.list().  I also updated the javadoc of that method to state that it may return null.",
            "date": "2007-03-07T11:16:41.194+0000",
            "id": 4
        }
    ],
    "component": "",
    "description": "Found this bug while running unit tests to verify an upgrade of our system from 1.4.3 to 2.1.0.  This bug did *not* occur during 1.4.3, it is new to 2.x (I'm pretty sure it's 2.1-only)\n\nIf the index directory gets deleted out from under Lucene after the FSDirectory has been created, then attempts to open an IndexWriter or IndexReader will result in an NPE.  Lucene should be throwing an IOException in this case.\n\nRepro:\n    1) Create an FSDirectory pointing somewhere in the filesystem (e.g. /foo/index/1)\n    2) rm -rf the parent dir (rm -rf /foo/index)\n    3) Try to open an IndexReader\n\nResult: NullPointerException on line \"for(int i=0;i<files.length;i++) { \" -- 'files' is NULL.\n \nExpect: IOException\n\n\n....  \n\nThis is happening because of a missing NULL check in SegmentInfos$FindSegmentsFile.run():\n\n        if (0 == method) {\n          if (directory != null) {\n            files = directory.list();\n          } else {\n            files = fileDirectory.list();\n          }\n\n          gen = getCurrentSegmentGeneration(files);\n\n          if (gen == -1) {\n            String s = \"\";\n            for(int i=0;i<files.length;i++) { \n              s += \" \" + files[i];\n            }\n            throw new FileNotFoundException(\"no segments* file found: files:\" + s);\n          }\n        }\n\n\nThe FSDirectory constructor will make sure the index dir exists, but if it is for some reason deleted out from underneath Lucene after the FSDirectory is instantiated, then java.io.File.list() will return NULL.  Probably better to fix FSDirectory.list() to just check for null and return a 0-length array:\n\n(in org/apache/lucene/store/FSDirectory.java)\n314c314,317\n<         return directory.list(IndexFileNameFilter.getFilter());\n---\n>     String[] toRet = directory.list(IndexFileNameFilter.getFilter());\n>     if (toRet == null)\n>         return new String[]{};\n>     return toRet;\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-825",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "NullPointerException from SegmentInfos.FindSegmentsFile.run() if FSDirectory.list() returns NULL ",
    "systemSpecification": true,
    "version": "2.1"
}