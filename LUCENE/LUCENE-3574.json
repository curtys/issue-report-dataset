{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "Patch for Lucene 3.x\n\nwill remove deprecations in trunk and make JRE_IS_MINIMUM_JRE6 = true (+ deprecate it there)",
            "date": "2011-11-14T15:01:07.772+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed 3.x revision: 1201739",
            "date": "2011-11-14T15:03:50.858+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 1201741",
            "date": "2011-11-14T15:09:18.873+0000",
            "id": 2
        },
        {
            "author": "Shai Erera",
            "body": "One typo: \"nsme\" -> \"name\"\n\nAlso, not sure if it's worth it, but perhaps instead of constants like MIMINUM_JAVA_X we can have a class JavaVersion that follows the same logic we have in Version and can compare itself to other JavaVersions? Then we can have constants for JAVA_6 = new JavaVersion(6) and similar for JAVA_7, and another CURRENT_JAVA_VER that is initialized with the code you wrote. And you can then compare CURRENT to JAVA_6/7?\n\nJust an idea.",
            "date": "2011-11-14T15:10:31.638+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nAlso, not sure if it's worth it, but perhaps instead of constants like MIMINUM_JAVA_X we can have a class JavaVersion that follows the same logic we have in Version\n{quote}\n\nI think the problem here would be that say we release 3.5 in a week.\n\nThen two years later Java 8 comes out... we can't know today how to detect it. So all we can do is say that we are 'at least' java 7 because we have XYZ.",
            "date": "2011-11-14T15:15:26.685+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. One typo: \"nsme\" -> \"name\"\n\nnsme -> NoSuchMethodException",
            "date": "2011-11-14T15:19:26.569+0000",
            "id": 5
        },
        {
            "author": "Shai Erera",
            "body": "Exactly (I think that's what I meant) -- we detect the Java version as best we can and store it in a constant JAVA_VERSION. It can be compared to JAVA_6/7 thru an atLeast() API, like JAVA_VERSION.atLeast(JAVA_7).\n\nThe code in 3.5 will only know to detect up to Java 7, while the code in 5.2 will know to detect Java 8.\n\nWouldn't that work?",
            "date": "2011-11-14T15:21:08.619+0000",
            "id": 6
        },
        {
            "author": "Shai Erera",
            "body": "bq. nsme -> NoSuchMethodException\n\nah, ok :).",
            "date": "2011-11-14T15:22:38.852+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nThe code in 3.5 will only know to detect up to Java 7, while the code in 5.2 will know to detect Java 8.\n\nWouldn't that work?\n{quote}\n\nI would prefer not to, because it opens up the opportunity to wrongly record this somewhere (e.g. diagnostics map)\nor even just System.out.println or checkindex or something... it would be misleading.",
            "date": "2011-11-14T15:26:56.324+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "One example where it might be bad: If it's an enum, you can also do if (JAVA_VERSION==JAVA_7, so the enum constants are not named like the fact they represent.\n\nI think thats all too much logic for something simple. For one major version we will have mostly 2 or 3 constants. In trunk we currently only have Java7 and a deprecated one which is always true. New constants are only added on request, when we want to test for features/bugs.",
            "date": "2011-11-14T15:47:16.005+0000",
            "id": 9
        },
        {
            "author": "Shai Erera",
            "body": "Ok I'm convinced :). Was just a thought",
            "date": "2011-11-14T16:42:21.642+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "Bulk close after release of 3.5",
            "date": "2011-11-27T12:29:22.702+0000",
            "id": 11
        }
    ],
    "component": "core/other",
    "description": "Preparation for LUCENE-3235:\nThis adds constants to quickly detect Java6 and Java7 to Constants.java. It also deprecated and removes the outdated historical Java versions.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3574",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add some more constants for newer Java versions to Constants.class, remove outdated ones.",
    "systemSpecification": true,
    "version": ""
}