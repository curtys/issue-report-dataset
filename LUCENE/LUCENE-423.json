{
    "comments": [
        {
            "author": "Randy Puttick",
            "body": "Created an attachment (id=16054)\nConcurrentMultiSearcher.java\n\nThe implementation (which still lacks a solution for the method that accepts a\nHitCollector).\tIt seems likely that HitCollectors wouldn't expect concurrent\ncalls and would end up breaking.  It might be an idea to add a extension\ninterface to imply the thread awareness then test for the extension in the\nmethod.",
            "date": "2005-08-16T02:52:38.000+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "You can provide an ExecutorService now, so I think this one is resolved.\n",
            "date": "2011-01-25T13:19:28.382+0000",
            "id": 1
        }
    ],
    "component": "core/search",
    "description": "This component is a replacement for ParallelMultiQuery that runs a thread pool\nwith queue instead of starting threads for every query execution (so its\nperformance is better).",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-423",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "thread pool implementation of parallel queries",
    "systemSpecification": true,
    "version": "1.4"
}