{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "Technically, SpanQuery should have an abstract clone so that SpanQuerys are required to implement cloneable.",
            "date": "2009-08-21T15:20:43.665+0000",
            "id": 0
        },
        {
            "author": "Mark Miller",
            "body": "I'm also going to add an optional (default to true) q1.class == q2.class test to the QueryUtils hashCode/equals/clone check. ",
            "date": "2009-08-21T15:55:33.015+0000",
            "id": 1
        },
        {
            "author": "Mark Miller",
            "body": "It looks like its very easy to get into trouble with Querys and cloning. BooleanQuery, DisjunctionQuery have quite a reliance on it - as do the SpanQueries (all in rewrite). Improperly cloning can sometimes have extra special effects with MultiSearcher : LUCENE-1599\n\n\n\n",
            "date": "2009-08-21T16:20:13.586+0000",
            "id": 2
        },
        {
            "author": "Michael Busch",
            "body": "I just updated to current trunk and TestBoostingNearQuery is failing for me now:\n\n\n{noformat}\njunit.framework.AssertionFailedError: expected:<spanNear([field:twenty, field:two], 0, true)> but was:<spanNear([field:twenty, field:two], 0, true)>\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat junit.framework.Assert.failNotEquals(Assert.java:280)\n\tat junit.framework.Assert.assertEquals(Assert.java:64)\n\tat junit.framework.Assert.assertEquals(Assert.java:71)\n\tat org.apache.lucene.search.QueryUtils.checkEqual(QueryUtils.java:68)\n\tat org.apache.lucene.search.QueryUtils.checkHashEquals(QueryUtils.java:50)\n\tat org.apache.lucene.search.QueryUtils.check(QueryUtils.java:44)\n\tat org.apache.lucene.search.payloads.TestBoostingNearQuery.test(TestBoostingNearQuery.java:124)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:164)\n\tat org.apache.lucene.util.LuceneTestCase.runTest(LuceneTestCase.java:201)\n\tat junit.framework.TestCase.runBare(TestCase.java:130)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:120)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:230)\n\tat junit.framework.TestSuite.run(TestSuite.java:225)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n{noformat}",
            "date": "2009-08-21T16:29:07.996+0000",
            "id": 3
        },
        {
            "author": "Mark Miller",
            "body": "hmmm - tests passed here so I must have screwed something up ... I'll fix it.",
            "date": "2009-08-21T16:51:06.125+0000",
            "id": 4
        },
        {
            "author": "Mark Miller",
            "body": "adds clone - made SpanNearQuery internals protected.\n\n*edit*\n\nAdds QueryUtils.check back too, it will pass now with the clone.",
            "date": "2009-08-21T18:25:10.237+0000",
            "id": 5
        },
        {
            "author": "Mark Miller",
            "body": "Grrr ... another one - looking at Michaels fail stack trace I see that these payload queries should also implement toString(). I'll roll into this patch.",
            "date": "2009-08-21T18:27:56.364+0000",
            "id": 6
        },
        {
            "author": "Mark Miller",
            "body": "r806885",
            "date": "2009-08-22T20:28:54.371+0000",
            "id": 7
        }
    ],
    "component": "",
    "description": null,
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1838",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "BoostingNearQuery must implement clone - now it clones to a NearSpanQuery - cloning is required for Span container classes",
    "systemSpecification": true,
    "version": ""
}