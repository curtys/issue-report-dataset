{
    "comments": [
        {
            "author": "Patrick Jungermann",
            "body": "patch",
            "date": "2009-10-02T10:49:01.638+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Is this caused by the rewrite because of the new TokenStream API?",
            "date": "2009-10-02T13:49:38.165+0000",
            "id": 1
        },
        {
            "author": "Karl Wettin",
            "body": "bq. Is this caused by the rewrite because of the new TokenStream API?\n\nNah, I think it's just a miss in the code never cought before. Not sure though so I'll write a test or two this weekend.",
            "date": "2009-10-02T20:31:57.588+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "I also think so, because the above stack dump seems to be from 2.4.1 (in 2.9 there should be incrementToken() instead of next() for all filters listed there).",
            "date": "2009-10-02T20:36:21.649+0000",
            "id": 3
        },
        {
            "author": "Karl Wettin",
            "body": "bq. I also think so, because the above stack dump seems to be from 2.4.1 (in 2.9 there should be incrementToken() instead of next() for all filters listed there).\n\nAh, I missunderstood your comment. The thing is that ShingleMatrixFilter was left using the old API because of its complexity. I told whoever it was that gave it a shot that I'd look in to upgrading it, just haven't had time to do so yet. There will be a new generified and updated version of the filter any year now. At least before 3.0.",
            "date": "2009-10-02T20:40:47.014+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Michael Busch and me updated it :-) It is now even more optimized and clones more seldom.\n\n*edit*\n\nSorry the more optimized one is the NGram filter. This one is still not the best, because it still uses Token and is not aware of custom attributes, that may also need to be shingled. We left this in because of compatibility (lots of public API using Token instead of raw attribute interfaces).",
            "date": "2009-10-02T21:02:32.774+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "bq. Michael Busch and me updated it  It is now even more optimized and clones more seldom. \n\nUwe, are you sure you do not refer to ShingleFilter (versus ShingleMatrixFilter)? I think things are different for this one. ",
            "date": "2009-10-02T21:09:01.472+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Yes you are right, I updated/fixed ShingleFilter and Michael updated ShingleMatrix. But the NGram is also more optimized...",
            "date": "2009-10-02T21:12:16.676+0000",
            "id": 7
        },
        {
            "author": "Karl Wettin",
            "body": "Patrick,\n\nI can't manage to reproduce this error. Uwe is right though, you are getting this error using 2.4.1 or earlier, not by using 2.9.\n\nbq. \tat org.apache.lucene.analysis.shingle.ShingleMatrixFilter$Matrix$1.hasNext(ShingleMatrixFilter.java:729)\n\nCan you please try with 2.9? It would also be very helpful if you could list the applicable Solr configurations and some example data you are passing to the filter when it's thrown.\n\nThanks in advance.\n",
            "date": "2009-10-03T12:44:49.704+0000",
            "id": 8
        },
        {
            "author": "Patrick Jungermann",
            "body": "Karl, your right, sorry. I used the current release of Solr, version 1.3.0, that's using Lucene 2.4.1. Solr 1.4 that will be released soon is using Lucene 2.9. For me, it seems that filter did not changed at the causing code lines. But I don't know, if this is the real root cause.\n\nNow, I have tested this also with the current trunk of Solr that is already using Lucene 2.9. At first I tried a simple example with an analyzing workflow based on the WhitespaceTokenizer followed by the ShingleMatrixFilter and no problem occured.\n\nThen, I tried the other field type configuration, that I had used at the former test and the exception was thrown.\n\n{code}\nCaused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n\tat java.util.ArrayList.RangeCheck(Unknown Source)\n\tat java.util.ArrayList.get(Unknown Source)\n\tat org.apache.lucene.analysis.shingle.ShingleMatrixFilter$Matrix$1.hasNext(ShingleMatrixFilter.java:841)\n\tat org.apache.lucene.analysis.shingle.ShingleMatrixFilter.produceNextToken(ShingleMatrixFilter.java:485)\n\tat org.apache.lucene.analysis.shingle.ShingleMatrixFilter.incrementToken(ShingleMatrixFilter.java:372)\n\tat org.apache.lucene.analysis.TokenStream.next(TokenStream.java:401)\n\tat org.apache.lucene.analysis.shingle.ShingleMatrixFilter.next(ShingleMatrixFilter.java:405)\n\t...\n{code}\n\nTo find the reason of it, I removed filter by filter. After a lot of tests, I found out that the problem was caused by the use of\n# WhitespaceTokenizer\n# ShingleMatrixFilter\n# RemoveDuplicatesTokenFilter\nthat were used in that order. If I changed the positions of both filters, all seems to work okay.\n\nThis time, I tested this only with the field analysis view with different data\n\nAlso, it was really strange, that the exception only occured at the first analysis request, and extremely rarly a second time. But it was thrown at every first request.",
            "date": "2009-10-03T16:25:23.546+0000",
            "id": 9
        },
        {
            "author": "Karl Wettin",
            "body": "The exception is thrown when ts#next (incrementToken) is called again after already having returned null (false) once. So this is a nice catch!\n\nBut this means that RemoveDuplicatesTokenFilter in Solr calls incrementToken one extra time for some reason. Can you please post the complete stacktrace so I can take a look in there too? \n\nI suppose the expected behaviour would be that a token stream keep returning false when incrementToken is called upon after returning false already, but the javadocs doesn't  really say anything about this, nor is there a generic test case that ensure this for all filters. Thus this error might be available in other filters. I'll see if I can do something about that before committing.\n\nThanks for the report Patrick!",
            "date": "2009-10-03T17:41:20.130+0000",
            "id": 10
        },
        {
            "author": "Patrick Jungermann",
            "body": "Here is the complete stacktrace:\n\n{code}\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n\norg.apache.jasper.JasperException: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:402)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:464)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:358)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:820)\n\tat org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:367)\n\tat org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n\tat org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)\n\tat org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)\n\tat org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)\n\tat org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:268)\n\tat org.mortbay.jetty.servlet.Dispatcher.forward(Dispatcher.java:126)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:264)\n\tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1089)\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:365)\n\tat org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n\tat org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)\n\tat org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)\n\tat org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)\n\tat org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)\n\tat org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)\n\tat org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)\n\tat org.mortbay.jetty.Server.handle(Server.java:285)\n\tat org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:502)\n\tat org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:835)\n\tat org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:641)\n\tat org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:208)\n\tat org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:378)\n\tat org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:226)\n\tat org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)\nCaused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n\tat java.util.ArrayList.RangeCheck(Unknown Source)\n\tat java.util.ArrayList.get(Unknown Source)\n\tat org.apache.lucene.analysis.shingle.ShingleMatrixFilter$Matrix$1.hasNext(ShingleMatrixFilter.java:841)\n\tat org.apache.lucene.analysis.shingle.ShingleMatrixFilter.produceNextToken(ShingleMatrixFilter.java:485)\n\tat org.apache.lucene.analysis.shingle.ShingleMatrixFilter.incrementToken(ShingleMatrixFilter.java:372)\n\tat org.apache.lucene.analysis.TokenStream.next(TokenStream.java:401)\n\tat org.apache.lucene.analysis.shingle.ShingleMatrixFilter.next(ShingleMatrixFilter.java:405)\n\tat org.apache.solr.analysis.BufferedTokenStream.read(BufferedTokenStream.java:94)\n\tat org.apache.solr.analysis.BufferedTokenStream.next(BufferedTokenStream.java:80)\n\tat org.apache.jsp.admin.analysis_jsp.getTokens(org.apache.jsp.admin.analysis_jsp:104)\n\tat org.apache.jsp.admin.analysis_jsp._jspService(org.apache.jsp.admin.analysis_jsp:681)\n\tat org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:80)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:820)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:373)\n\t... 29 more\n\nRequestURI=/solr/admin/analysis.jsp\n{code}",
            "date": "2009-10-03T20:07:40.510+0000",
            "id": 11
        },
        {
            "author": "Karl Wettin",
            "body": "Committed in 821888.\n\nThanks Patrick!\n\n(I'll consider the other stuff mentioned in the issue later this week, and if managable then as a new issue.)",
            "date": "2009-10-05T16:04:53.864+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed into 2.9 branch revision: 899681",
            "date": "2010-01-15T16:15:42.011+0000",
            "id": 13
        }
    ],
    "component": "modules/analysis",
    "description": "I tried to use the ShingleMatrixFilter within Solr. To test the functionality etc., I first used the built-in field analysis view.The filter was configured to be used only at query time analysis with \"_\" as spacer character and a min. and max. shingle size of 2. The generation of the shingles for query strings with this filter seems to work at this view, but by turn on the highlighting of indexed terms that will match the query terms, the exception was thrown. Also, each time I tried to query the index the exception was immediately thrown.\n\nStacktrace:\n{code}\njava.lang.IndexOutOfBoundsException: Index: 1, Size: 1\n\tat java.util.ArrayList.RangeCheck(Unknown Source)\n\tat java.util.ArrayList.get(Unknown Source)\n\tat org.apache.lucene.analysis.shingle.ShingleMatrixFilter$Matrix$1.hasNext(ShingleMatrixFilter.java:729)\n\tat org.apache.lucene.analysis.shingle.ShingleMatrixFilter.next(ShingleMatrixFilter.java:380)\n\tat org.apache.lucene.analysis.StopFilter.next(StopFilter.java:120)\n\tat org.apache.lucene.analysis.TokenStream.next(TokenStream.java:47)\n\t...\n{code}\n\nWithin the hasNext method, there is the {{s-1}}-th Column from the ArrayList {{columns}} requested, but there isn't this entry within columns.\n\nI created a patch that checks, if {{columns}} contains enough entries.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1939",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "IndexOutOfBoundsException at ShingleMatrixFilter's Iterator#hasNext method",
    "systemSpecification": true,
    "version": "2.9"
}