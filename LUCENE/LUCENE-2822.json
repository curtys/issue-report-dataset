{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "Same issue. LUCENE-2237 includes a patch we can apply to allow shutting down the thread.",
            "date": "2011-01-28T13:48:41.492+0000",
            "id": 0
        },
        {
            "author": "Shai Erera",
            "body": "For reference, TimeLimitedCollector was added in LUCENE-997, where TimerThread's functionality is discussed.\n\nWhen we resolve this one, I think SOLR-1735 can be resolved as well.\n\nFrom LUCENE-997:\n{noformat}\nTimerThread provides a pseudo-clock service to all searching threads, so that they can count elapsed time with less overhead than repeatedly calling System.currentTimeMillis. A single thread should be created to be used for all searches.\n{noformat}\n\nThe opinions about the effectiveness of TimerThread went both ways. For example, in LUCENE-1720, the timeout mechanism works differently, and I wonder if we can apply the same logic here, or something very similar.\n\nInstead of having a static TimerThread, we can have start()/finish() API on TimeLimitingCollector(). start() will start a Thread that will sleep in nanosecs granularity until timeout exceeds. When it exceeds, it raises a flag. In collect() (and in setNextReader/Scorer too, to increase accuracy) all we do is check the flag and if it's on, we fail, just like collect() is impled today. App can call finish() that will signal the thread to stop.\n\nI think it's simple and shouldn't reduce accuracy of current impl (maybe only improve it). Assuming apps don't set timeout to 20 msec, Thread.sleep w/ nanosec granularity should be very accurate. Also, today timeout is counted from the moment you create TLC, but the app may do few more things before IndexSearcher.search() is actually called. start/finish will allow the app to time the search() method (or whatever it wants).\n\nAlso, TimerThread was intended to serve all search requests, hence why it is static, but TLC itself cannot be shared across searches at all ...\n\nThis will solve this issue, as well as simplify TLC IMO.",
            "date": "2011-01-28T14:11:45.532+0000",
            "id": 1
        },
        {
            "author": "Hoss Man",
            "body": "linking related issues",
            "date": "2011-03-03T06:03:21.842+0000",
            "id": 2
        },
        {
            "author": "Hoss Man",
            "body": "\nHaving read through all of the comments in LUCENE-997 I fail to see why any Threads are needed in TimeLimitedCollector at all -- repeatedly folks mention that the use of a Timer thread is purely because System.currentTimeMillis isn't reliable enough and/or not efficient enough, but if we could use Java 1.5, System.nanoTime would be exactly what we need.\n\nIt's 2011. \nWe can use Java 1.5 now in core Lucene. \nso why don't we just rip out the TimerThread and use System.nanoTime() ?\n",
            "date": "2011-03-03T06:12:19.987+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "{quote}\nIt's 2011. \nWe can use Java 1.5 now in core Lucene. \nso why don't we just rip out the TimerThread and use System.nanoTime() ?\n{quote}\n\nOne of our large customers used System.currentTimeMillies() in their own TLC collector implementation, which led to a immense slowdown as then on every hit you get a quite expensive system call to the kernel. This would not be more efficient with nanoTime, as its still a system call (at least on lot's of JVMs like on Windows).\n\nSo the thread is much more effective (its only reading a volatile field), so we need some shutdown. Another idea is to change this collector to not call nanoTime or currentTimeMillies on every hit (as hit collection should be fast), to maybe do this only every 1000 hit. The granularity could be a ctor param. This saves the thread and its still controlable how exact the measurement should be. A default of 1000 or maybe 10000 should be fine. Of course on the first collect hit (modulo 0) it should already check the timeout (because lots of queries do most work before the collection of hits).",
            "date": "2011-03-03T06:34:41.152+0000",
            "id": 4
        },
        {
            "author": "Shai Erera",
            "body": "I don't think we should check for time every N hits -- finding the next hit can take some time, and currently TimeLimitingCollector is not accurate b/c of that. I.e., it guarantees that when the time threshold has elapsed, it will stop the query processing, but it doesn't guarantee how accurate it is.\n\nThe TimerThread was indeed included because a system call on every hit was too expensive. I think that my proposal above, introducing start/finish API on TLC will solve the thread kept alive issue, won't affect performance, and keep TLC's accuracy as it is today (not perfect, but better than 'check every N hits').",
            "date": "2011-03-03T07:24:06.001+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "I think we should stick with our private timer thread (and we should definitely make it stop-able).\n\nI've seen too many problems associated with relying on the system's time for \"important\" things like timing out queries, eg when daylight savings time strikes, or the clock is being \"aggressively corrected\", and suddenly a bunch of queries are truncated.  In theory System.nanoTime should be immune to this (it's the system's timer and not any notion of \"wall clock time\"), but in practice, I don't think we should risk it.",
            "date": "2011-03-03T11:58:28.292+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "bq. I think we should stick with our private timer thread (and we should definitely make it stop-able).\n\nAnd no private thread should start in the static initializer... its fine for all instances to share a single private timer thread but this should be lazy-loaded.\n",
            "date": "2011-03-03T14:31:41.871+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. I think we should stick with our private timer thread (and we should definitely make it stop-able).\n\nI think this is still the best variant, as both System.nanoTime() and currentTimeMillies use system calls that are really expensive. nanoTime() has no wallclock problems, thats true, but is still a no-go for every collected hit!",
            "date": "2011-03-03T17:01:11.261+0000",
            "id": 8
        },
        {
            "author": "Mark Harwood",
            "body": "FYI - I visited a site today using Lucene 1720 live on a large index (>2 billion docs, sharded with 5 minute update intervals). They haven't noticed any significant degrading of search performance as a result of using this approach.\n",
            "date": "2011-03-03T18:07:58.036+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Mark: But LUCENE-1720 does not use a System.nanoTime()/System.currentTimeMillis(), so what is your comment about?",
            "date": "2011-03-03T18:30:30.297+0000",
            "id": 10
        },
        {
            "author": "Mark Harwood",
            "body": "bq. does not use a System.nanoTime()/System.currentTimeMillis(), so what is your comment about?\n\nThere's already a solution that was designed to avoid any overhead related to making either of these calls.",
            "date": "2011-03-03T19:04:47.592+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "bq. I think this is still the best variant, as both System.nanoTime() and currentTimeMillies use system calls that are really expensive. \n\nSorry its too funny, playing with LUCENE-2948 I saw a big slowdown on windows that mike didn't see on linux... finally tracked it down to an uncommented nanoTime :)",
            "date": "2011-03-03T21:47:40.302+0000",
            "id": 12
        },
        {
            "author": "Robert Muir",
            "body": "bulk move 3.2 -> 3.3",
            "date": "2011-06-03T16:40:38.449+0000",
            "id": 13
        },
        {
            "author": "Torsten Krah",
            "body": "Some workaround - until this one is resolved - to stop the thread (e.g. in a container shutdown callback) may be this one using reflection:\n\nThread t = (Thread) FieldUtils.readDeclaredStaticField(TimeLimitingCollector.class, \"TIMER_THREAD\", true);\n      if (t != null && t.isAlive()) {\n        t.interrupt();\n        t.join(1000);\n      }\n\nLittle bit ugly but theres no other way yet.\n",
            "date": "2011-10-26T06:35:11.154+0000",
            "id": 14
        },
        {
            "author": "Simon Willnauer",
            "body": "catching up here... I wonder if we can make this TLC simply use a o.a.l.utils.Counter so people can implement this on to of TLC. there could be a ThreadedCounter in TLC people can pull and use their own static variable?",
            "date": "2011-11-10T19:39:19.352+0000",
            "id": 15
        },
        {
            "author": "Simon Willnauer",
            "body": "here is a first version of what I have in mind. I'd like completely divorce the thread from the collector eventually and let the application create the thread. Solr should take care of this stuff itself. For now I used a little workaround for this.  ",
            "date": "2011-11-11T00:10:54.713+0000",
            "id": 16
        },
        {
            "author": "Simon Willnauer",
            "body": "next iteration ",
            "date": "2011-11-11T02:54:23.119+0000",
            "id": 17
        },
        {
            "author": "Simon Willnauer",
            "body": "I added a changes entry and opened up setting a baseline for the collector manually. Now by default we set the baseline once the first reader is set instead of during construction time. I think we are close here?!",
            "date": "2011-11-11T18:42:37.524+0000",
            "id": 18
        },
        {
            "author": "Simon Willnauer",
            "body": "If nobody objects I am going to commit this later today and backport to 3.x - this will break bw compat for time limiting collector but I think we should do that in this particular case",
            "date": "2011-11-11T19:30:52.411+0000",
            "id": 19
        },
        {
            "author": "Simon Willnauer",
            "body": "update patch to trunk",
            "date": "2011-11-11T23:03:23.760+0000",
            "id": 20
        },
        {
            "author": "Simon Willnauer",
            "body": "committed to trunk & backported to 3.x",
            "date": "2011-11-12T18:02:14.288+0000",
            "id": 21
        },
        {
            "author": "Uwe Schindler",
            "body": "Bulk close after release of 3.5",
            "date": "2011-11-27T12:29:33.119+0000",
            "id": 22
        }
    ],
    "component": "",
    "description": "See the comment in LuceneTestCase.\n\nIf you even do Class.forName(\"TimeLimitingCollector\") it starts up a thread in a static method, and there isn't a way to kill it.\n\nThis is broken.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2822",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "TimeLimitingCollector starts thread in static {} with no way to stop them",
    "systemSpecification": true,
    "version": ""
}