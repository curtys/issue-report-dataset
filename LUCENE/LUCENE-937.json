{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "Actually, I think the starting size should probably be upped as well. I will do some tests.\n\n- Mark",
            "date": "2007-06-21T21:25:58.931+0000",
            "id": 0
        },
        {
            "author": "Doron Cohen",
            "body": "Good catch, patch look good to me.\nIt makes sense to modify anyhow, but just wondering, - what is the performance difference?\n\nWhile we're looking at this, I noticed three other uses of LinkedList that can be changed to ArrayList: \n  - DocumentWriter\n  - CompoundFileWriter\n  - MultipleTermPositions\n",
            "date": "2007-06-21T21:58:29.700+0000",
            "id": 1
        },
        {
            "author": "Michael Busch",
            "body": "> While we're looking at this, I noticed three other uses of LinkedList \n> that can be changed to ArrayList: \n\nWell, an ArrayList is not always faster than a LinkedList, is it? \nA LinkedList should be faster for insertions and removals in the middle \nof the list compared to an ArrayList. So I think we have to understand \nhow the lists are used in the different spots before we replace them.\n\nTo this patch: I actually chose LinkedList here intentionally because\nrandom-access to the list is not needed here. We only iterate over the\nlist and I expected the performance to be comparable to the ArrayList.\nBut inconsequently I used the get() method instead of a list iterator,\nwhich is for sure slower compared to the ArrayList. I wonder how the \nLinkedList would perform if we changed this class to use an iterator?\n\nThanks Mark your efforts here!",
            "date": "2007-06-21T23:37:39.614+0000",
            "id": 2
        },
        {
            "author": "Mark Miller",
            "body": "My tests early must have gotten out of whack. I was measuring a much bigger difference than I see now.\n\nAs a result, I started from scratch, carefully creating and lableing a new Lucene core jar for each case and averaging the performance over 15,000 calls creating and reading TokenStreams off the Reuters data.\n\nAfter very thorough testing (I was in quite a hurry this morning), I have come up with the following:\n\nLinkedList() using get, LinkedList() using iterator, and ArrayList() are practically identical in speed.\n\nArrayList(30) gave a 47% increase in speed. Above 30-60 gave no more returns.\n\nThis patch should not go through as is. What do you think given these results? I assumed that an ArrayList would be faster as all of the data is guaranteed contiguous, but it surprised me that the resizing was not enough to slow things down to LinkedList speed (unless you start with too low an initial size -- default is 10).\n\n- Mark",
            "date": "2007-06-22T01:03:19.961+0000",
            "id": 3
        },
        {
            "author": "Doron Cohen",
            "body": "> Mark: I assumed that an AL would be faster as all of the data is guaranteed contiguous\n\nOnly the pointers to the objects are contiguous, right? The tokens themselves are, well, where they are. But with LinkedList there are new objects created, containing the tokens and the pointers to the other list members. So it may be safe to say that if you can estimate the list size (avoiding array grow), AL is preferable if there's no add/remove not at the end. \n\n> Michael: (~)  LL iterator comparable to AL\n\nThat's a good point. I had the impression that AL is always simpler than LL and unless removing or adding not at the end, it is preferable. (that's why I excluded the NgramTokenFiltrers that use LL.removeFirst()).  Now you're saying that with iteration (instead of direct access) LinkedList is supposed to be faster - could be, since then there's no need to grow the array. (however you have more \"pointers\"). \n\nWith this reasoning - \n  - CompoundFileWriter - using iterator, no direct access.\n  - MultipleTermPositions -  same.\n  - DocumentWRiter - same.\nSo I am not so sure anymore about needing to change in these classes.\n\n---------------\n\nIn summary since we can't assume estimating the size in advance, I think the best change would be as Michael suggested to use Iterator in CachingTokenFilter. ",
            "date": "2007-06-22T01:31:22.595+0000",
            "id": 4
        },
        {
            "author": "Michael Busch",
            "body": "> This patch should not go through as is. What do you think given these \n> results? I assumed that an ArrayList would be faster as all of the data \n> is guaranteed contiguous, but it surprised me that the resizing was not \n> enough to slow things down to LinkedList speed (unless you start with \n> too low an initial size -- default is 10).\n\nI think an ArrayList also has higher initialization costs. Your test\nactually tests the performance for a single document. It would be \ninteresting to know how the different implementations perform when you \nrun the tests with more than one document. I would think that LinkedList() \nis probably better if you have lots of very small documents, whereas\nArrayList(30) is faster if you have bigger docs with lots of Tokens.\n\n",
            "date": "2007-06-22T01:40:49.234+0000",
            "id": 5
        },
        {
            "author": "Mark Miller",
            "body": "The 15,000 calls are each on a separate document. The documents are reletivley small...newspapers articles from Reuters. Anything smaller would have to be very small.\n\nI have again carefully tested LinkedList get VS LinkedList iterator and the performance is identical as far as I can tell.\n\nI'll do more work to prove my case when I get a free moment, but just to be clear:\n\nI am using small documents (15,000 different varying sized docs), measuring the total time and dividing by 15,000. The results show a 43% improvement using ArrayList(30). I will run a test will even smaller docs when I get a chance. In my work with a new Span based Highlighter, I need this speed or my implementation is slower than the old Highlighter. With this boost, my Span based Highlighter is actually (very)slightly faster. If you decide to keep things as they are I will have to roll an alternate CachingTokenFilter for my Highlighter (no problem of course <g>).\n\nPerhaps it is best to just leave things as they are and if you need more performance on docs with more than a handful of tokens, make your own Caching Filter. If the common case is closer to docs the size of newspaper articles or larger, a 43% gain is hard to ignore. \n\nI will get back about the speed when using very short documents.\n\n>>Only the pointers to the objects are contiguous, right? \nOne of these days I will actually make that transition from C++ to Java <g> I don't know where the speed is coming from then...but its a heck of a difference.\n\n- Mark\n",
            "date": "2007-06-22T02:01:55.033+0000",
            "id": 6
        },
        {
            "author": "Michael Busch",
            "body": "> If you decide to keep things as they are I will have to roll an \n> alternate CachingTokenFilter for my Highlighter (no problem of \n> course <g>).\n\nI'm certainly up to make a change here if it improves performance\nsignificantly (and yes, 43% is significant). I just want to be \nsure that we don't optimize a special case. So yes, it would be \ngreat if you could vary the parameters in your tests. \n\nBtw. which JVM version are you using? ",
            "date": "2007-06-22T02:15:37.222+0000",
            "id": 7
        },
        {
            "author": "Mark Miller",
            "body": "> So it may be safe to say that if you can estimate the list size (avoiding array grow), AL is preferable if there's no add/remove not at the end.\n\nIn the CachingTokenFilter case I don't even believe it is really necessary to estimate the list size. Many of the documents I used had way more than 30 tokens, but initializing the Array larger gave no benefits. I believe this is because the ArrayList doubles each time it grows (not guaranteed, but how it is implemented), and so a small increase in size can dramatically lower the number of resizes needed even when the List must grow *much* bigger than the init size. 10 just doesn't cut it, but 30 works great. A LinkedList (iterator or get()) seems to perform no better than an ArrayList(10).\n\n- Mark",
            "date": "2007-06-22T02:19:27.188+0000",
            "id": 8
        },
        {
            "author": "Mark Miller",
            "body": "I am testing on Java 1.5\n\nI tested with LinkedList using get, LinkedList using iterator, ArrayList() (defaults to 10), ArrayList(16), ArrayList(30), ArrayList(60)\n\nFor a handful of tokens, all methods are about the same speed. (3-10 tokens) LinkedList, ArrayList(16) and ArrayList are a smidgen faster than ArrayList(30-60) though.\n\nAt 15-40 tokens all of the methods are still about the same speed, though ArrayList(30) may be a hair faster (than even ArrayList(10))\n\nAt 50-300 tokens (weighted towards 50), you see a 47% increase in speed using ArrayList(16 or 30) and ArrayList(60), the other methods are about the same speed.\n\nAt 150-900 tokens (weighted towards 150), you see a 100% increase in speed using ArrayList(30) -- ArrayList(60) is no better,\nthe other methods take twice as long (even ArrayList(10)).\n\n\nI used Reuters data, shortening it and stiching it together for the various sizes.\n\nThe first test was the average speed of about 21,000 runs on 21,000 different docs.\n\nThe second test was the average speed of about 21,000 runs on 21,000 different docs.\n\nThe third test was the average speed of about 15,000 runs on 15,000 different docs.\n\nThe fourth test was the average speed of about 5,000 runs on 5,000 different docs.\n\n\nI don't completely understand why, but ArrayList(30) or ArrayList(16) blow everything else out of the water. ArrayList(16) is a smidgen faster at very low\ntoken counts, while ArrayList(30) is a smidgen faster above 50 or so tokens. The differences are almost negligible though.\n\nArrayList(30) or ArrayList(16) are approx the same speed as LinkedList (get and iterator are always approx the same speed)\n at low numbers and get better and better VERY quickly as the number of tokens goes up.\n\nI'd recommend ArrayList(16) as the best choice for this class. It is no worse than LinkedList on very small documents, and much better than LinkedList on small to large documents.\n\nA friend was recently telling me that ArrayList defaulted to 16, but it does not -- it defaults to 10. He must have been confused and known that it *should* default to 16. 16 is a much better default number than 10 due to the exponential growth when doubling the array on resize. It may take a bit more memory, but it gets a LOT more speed.\n\n- Mark",
            "date": "2007-06-22T12:50:12.694+0000",
            "id": 9
        },
        {
            "author": "Mark Miller",
            "body": "Well this is embarrassing. I messed up the implementation of the iterator approach. Egg on my face moment. At least now things make more sense. LinkedList using an iterator is as fast as ArrayList(16). It does not appear to be any faster, but it is more memory efficient. Michael was absolutely right and the mistake is the direct access over the iterator.\n\nSorry about the major misdirection on this...youthful exuberance always gets the best of me...<g>\n\nI suggest the change is just to change from get() to Iterator usage.\n",
            "date": "2007-06-22T14:12:23.551+0000",
            "id": 10
        },
        {
            "author": "Mark Miller",
            "body": "I have the reset method check if the cache is null before creating a new Iterator because it would not throw an exception before if you called reset before calling next. I don't know how you feel about this.",
            "date": "2007-06-22T14:49:37.100+0000",
            "id": 11
        },
        {
            "author": "Michael Busch",
            "body": "Mark,\n\nthe new patch looks good to me! I'm going to commit this soon.\n\nAnd you certainly don't have to apologize - thanks to your efforts \nI feel that I understand these data structures better now...\n\nThank you very much for investigating this so thoroughly!\n\n",
            "date": "2007-06-23T04:17:31.030+0000",
            "id": 12
        },
        {
            "author": "Michael Busch",
            "body": "Committed. Thanks, Mark.",
            "date": "2007-06-23T15:57:21.448+0000",
            "id": 13
        },
        {
            "author": "David Smiley",
            "body": "In LUCENE-6033 I swapped LL for ArrayList purely for reduced memory usage (fewer objects).",
            "date": "2014-12-18T03:21:12.045+0000",
            "id": 14
        }
    ],
    "component": "",
    "description": "The LinkedList used by CachingTokenFilter is accessed using the get() method. Direct access on a LinkedList is slow and an Iterator should be used instead. For more than a handful of tokens, the difference in speed grows exponentially.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-937",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Make CachingTokenFilter faster",
    "systemSpecification": true,
    "version": ""
}