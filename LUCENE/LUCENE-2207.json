{
    "comments": [
        {
            "author": "Koji Sekiguchi",
            "body": "Attached the program that reproduces the problem. In the program, I didn't use FastVectorHighlighter, instead, I printed out offsets from TermVectorOffsetInfo. You'll see the following results:\n\n{code}\n=== WhitespaceAnalyzer ===\n\u3042\u3044(0,2)\n\u3046\u3048\u304a(3,6)\n=== CJKAnalyzer ===\n\u3042\u3044(0,2)\n\u3046\u3048(4,6)\n\u3048\u304a(5,7)\n=== BasicNGramAnalyzer ===\n\u3042\u3044(0,2)\n\u3046\u3048(3,5)\n\u3048\u304a(4,6)\n{code}\n\nFor people who are seeing garbage characters, I want to rephrase using 'Cn' symbols as follows:\n\n{code}\n=== WhitespaceAnalyzer ===\nC1C2(0,2)\nC3C4C5(3,6)\n=== CJKAnalyzer ===\nC1C2(0,2)\nC3C4(4,6)\nC4C5(5,7)\n=== BasicNGramAnalyzer ===\nC1C2(0,2)\nC3C4(3,5)\nC4C5(4,6)\n{code}\n\nAs you can see, the start offset of 'C3' is 3 in WhitespaceAnalyzer and BasicNGramAnalyzer (an analyzer which uses BasicNGramTokenizer. BasicNGramTokenizer is used in FastVectorHighlighter test code. It works as a 2-gram tokenizer for not only CJK but also ASCII), but is 4 in CJKAnalyzer -- incorrect!\n\nI'll look into it tomorrow or after, but volunteers are welcome!",
            "date": "2010-01-13T16:57:36.245+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "Hi Koji, this looks like a bug in CJK offset calculations, probably involving end()\n\nPersonally i find the offset logic a little complex. It currently does both additions and subtractions to the offset and I think there is an off-by-one error in this.\n\nI will play around and see if I can simplify this logic, but please don't wait on me, if you have an idea already how to fix it!\n",
            "date": "2010-01-13T17:09:10.002+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "ok i found the bug. the problem is incrementToken() unconditionally increments the offset before it starts its main loop:\n\nline 165:\n{code}\noffset++;\n{code}\n\nso, when incrementToken() has no more text to return and returns false, it needs to subtract from this.\n\nagain i think in the future we try to refactor this offset logic to be simpler, but for the short term, this fixes the bug and all tests pass.\n\nKoji, can you review?",
            "date": "2010-01-13T17:48:19.174+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "i added a testcase for end() to my patch that fails on trunk, but passes with the fix.",
            "date": "2010-01-13T17:59:46.696+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "hello, this tokenizer has more serious offset/end problems than I originally thought.\n\nattached is my previous patch and testcase but with 3 more testcases, one still fails. ",
            "date": "2010-01-13T18:16:02.398+0000",
            "id": 4
        },
        {
            "author": "Koji Sekiguchi",
            "body": "Hi Robert, thank you for looking this so quickly!\n\n{quote}\nok i found the bug. the problem is incrementToken() unconditionally increments the offset before it starts its main loop:\n\nline 165:\n\noffset++;\n{quote}\n\nIndeed.\n\nIn attached patch, I added one more offset-- line and two more testcases. All tests pass and this patch fixes the original problem that was found in Solr with FastVectorHighlighter.",
            "date": "2010-01-17T03:51:27.592+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "bq. In attached patch, I added one more offset-- line and two more testcases. All tests pass and this patch fixes the original problem that was found in Solr with FastVectorHighlighter.\n\nnice, fix looks good to me.",
            "date": "2010-01-17T07:25:15.571+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "Koji, I am testing other end() offsets with all other tokenizers, I noticed that CJKTokenizer does not call correctOffset() in end:\n\n{code}\nfinal int finalOffset = offset;\n{code}\n\nI think instead this should be\n{code}\nfinal int finalOffset = correctOffset(offset);\n{code}\n\nin case there is a CharFilter present.\n",
            "date": "2010-01-17T08:50:41.490+0000",
            "id": 7
        },
        {
            "author": "Koji Sekiguchi",
            "body": "{quote}\nI think instead this should be\n\nfinal int finalOffset = correctOffset(offset);\n{quote}\n\nAgreed, thank you for pointing this!\nI think this is ready to commit. Robert, can you do it? And it'd be great if it could go 2.9 branch so that Solr can use the fix.",
            "date": "2010-01-17T10:27:24.769+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "Koji, sure I can take care of it.\n\nAlso i added LUCENE-2219 to find these bugs in other tokenizers.\n\nIn the future I also want to explore if we can somehow use a fake CharFilter in BaseTokenStreamTest to also ensure that correctOffset() is called when setting offsets in both incrementToken() and end(), don't yet know how it would work yet.\n",
            "date": "2010-01-17T10:31:08.743+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "thanks Koji!",
            "date": "2010-01-17T21:45:27.196+0000",
            "id": 10
        }
    ],
    "component": "modules/analysis",
    "description": "If I index a Japanese *multi-valued* document with CJKTokenizer and highlight a term with FastVectorHighlighter, the output snippets have incorrect highlighted string. I'll attach a program that reproduces the problem soon.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2207",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "CJKTokenizer generates tokens with incorrect offsets",
    "systemSpecification": true,
    "version": "2.9.1, 3.0"
}