{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "Ah, I didn't catch that one - we did reduce the previously opened visibility here.\n\nShai, Mike? We should open the visibility on this back up? I'm not familiar with the issue that made it public.",
            "date": "2009-08-14T17:50:02.736+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "I don't remember why we had decided (when adding QueryWeight) to open it up, but, I think opening it up makes sense for advanced use cases?",
            "date": "2009-08-14T17:59:56.055+0000",
            "id": 1
        },
        {
            "author": "Tim Smith",
            "body": "Right now, i have to use the following class in org.apache.lucene.search package in order to work around this:\n{code}\n/**\n * Static utility class for exposing some otherwise protected stuff.\n */\npublic final class SearchUtils {\n  /**\n   * Expose protected Query.createWeight(Searcher) method.\n   */\n  public static Weight createWeight(Searcher searcher, Query query) throws IOException {\n    return query.createWeight(searcher);\n  }\n}\n{code}\n\n\nideally, i wouldn't need this class",
            "date": "2009-08-14T18:02:58.395+0000",
            "id": 2
        },
        {
            "author": "Shai Erera",
            "body": "Query always had a public weight() method, and protected createWeight method. I don't remember that I touched it in LUCENE-1630. I created createQueryWeight as a replacement to createWeight.\n\nBTW, I completely missed LUCENE-1771. I wish we had decided that when I was working on 1630 - it could have saved me a lot of time creating this QueryWeight replacement :).",
            "date": "2009-08-14T19:59:03.797+0000",
            "id": 3
        },
        {
            "author": "Mark Miller",
            "body": "bq. I created createQueryWeight as a replacement to createWeight\n\ncreateWeight was protected - when you made createQueryWeight, you made it public - so that was the change I think.",
            "date": "2009-08-14T20:23:22.995+0000",
            "id": 4
        },
        {
            "author": "Mark Miller",
            "body": "bq. it could have saved me a lot of time creating this QueryWeight replacement \n\nAnd it would have saved me time reverting and making it an abstract class - what can you do though? If we could have kept back compat here, I think we would have - but we didn't find a good way that avoided the issues we faced.\n\nI think there was a user that picked up a back compat break with QueryWeight anyway - a method he could override wasn't being called anymore? So its prob for the best - things are always changing, and new info / tradeoffs always come up.",
            "date": "2009-08-14T20:25:59.195+0000",
            "id": 5
        },
        {
            "author": "Shai Erera",
            "body": "bq. when you made createQueryWeight, you made it public\n\nFound it - https://issues.apache.org/jira/browse/LUCENE-1630?focusedCommentId=12719992&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12719992 - I originally created it protected, only later made it public, following Yonik's proposal from here - http://osdir.com/ml/java-dev.lucene.apache.org/2009-06/msg00803.html.\n\nbq. things are always changing, and new info / tradeoffs always come up.\n\nOf course, that was just a comment. :)",
            "date": "2009-08-14T20:40:38.612+0000",
            "id": 6
        },
        {
            "author": "Mark Miller",
            "body": "bq. Of course, that was just a comment.  :)\n\nI never leave a comment alone ;) Gotto inflate my JIRA stats somehow.\n\n",
            "date": "2009-08-14T20:43:21.166+0000",
            "id": 7
        },
        {
            "author": "Mark Miller",
            "body": "I havn't yet figured out how to do this without breaking back compat  - I think this was an issue before as well. I'd have to dig it up, but some user complained about a similar issue when QueryWeight was put in.\n\nIf you add createQueryWeight as a public method, then all of the Lucene classes have to be changed to call it - otherwise, if you override it in a user Query, it won't be called on that Query.\n\nBut anyone with an external Query class that overrode createWeight will not call createQueryWeight, and won't work correctly with classes that override it. I guess if we make it final it would close that loop hole, but then thats a loss from createWeight where you could override, and is still a back compat break?",
            "date": "2009-08-15T19:50:20.717+0000",
            "id": 8
        },
        {
            "author": "Mark Miller",
            "body": "1. make createWeight() public on Query (breaks back compat)\n\nhmmm - I took that as fact, but is that true? Can't you open up visibility without breaking back compat? Time to look this stuff up again ...",
            "date": "2009-08-15T19:52:30.494+0000",
            "id": 9
        },
        {
            "author": "Shai Erera",
            "body": "bq. Can't you open up visibility without breaking back compat?\n\nI don't see why this would break back-compat. I can always extend a class and make a package-private or protected method public. I cannot reduce visibility, but can always increase it.\n\nAbout the issues w/ createQueryWeight, I think you're referring to the chain of comments that started here: https://issues.apache.org/jira/browse/LUCENE-1630?focusedCommentId=12723976&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12723976. Is that what you were talking about?",
            "date": "2009-08-15T20:01:27.305+0000",
            "id": 10
        },
        {
            "author": "Shai Erera",
            "body": "bq. I can always extend a class and make a package-private or protected method public. I cannot reduce visibility, but can always increase it.\n\nOhh ... after hitting Submit I understood why it would break back-compat - if I extend Query and override createWeight, and leave it 'protected' I won't compile if we make it public, since I'll be reducing visibility.",
            "date": "2009-08-15T20:06:40.603+0000",
            "id": 11
        },
        {
            "author": "Mark Miller",
            "body": "Ahh - nice catch. I'm not sure what to do here then...\n\nThe previous possible break (I didn't actually look into it so I dunno) was referenced here:\n\nhttp://search.lucidimagination.com/search/document/41004a9436799675/spanquery_and_boostingtermquery_oddities",
            "date": "2009-08-15T20:11:18.931+0000",
            "id": 12
        },
        {
            "author": "Shai Erera",
            "body": "When I changed createQueryWeight from protected to public, it was because we introduced it in 2.9 only, so it was possible. Perhaps we should deprecate createWeight, and add back createQueryWeight as public?",
            "date": "2009-08-15T20:37:09.473+0000",
            "id": 13
        },
        {
            "author": "Mark Miller",
            "body": "Done you have the above problem though:\n{quote}\nIf you add createQueryWeight as a public method, then all of the Lucene classes have to be changed to call it - otherwise, if you override it in a user Query, it won't be called on that Query.\n\nBut anyone with an external Query class that calls [<-FIXED] createWeight will not call createQueryWeight, and won't work correctly with classes that override it. I guess if we make it final it would close that loop hole, but then thats a loss from createWeight where you could override, and is still a back compat break?\n{quote}\n",
            "date": "2009-08-15T20:43:11.645+0000",
            "id": 14
        },
        {
            "author": "Shai Erera",
            "body": "I thought that's partly we took care of here: https://issues.apache.org/jira/browse/LUCENE-1630?focusedCommentId=12723996&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12723996\n\nTrue, if someone overrides createWeight (he ought to) and call it specifically, createQueryWeight won't be called. But then, all of our code will call createQueryWeight. And if we deprecate createWeight, those who call it directly will need to move to createQueryWeight, so I think we should be fine?\n\nAnyway, I may not think too clear at this hour (1 AM), so if I misunderstood something, I'll read it again in the morning.",
            "date": "2009-08-15T22:09:40.305+0000",
            "id": 15
        },
        {
            "author": "Tim Smith",
            "body": "Here's an option\n\njust make createWeight() public\n\nthis will require anyone who used it to have their subclass of query open it up public and recompile\n\nhowever, if someone implemented createWeight() in <=2.4 and are going to 2.9, they already have to do this (because Weight was changed from an interface to an abstract class, so they have to do a similar change already:\n{code}\nprivate class *Weight implements Weight {\n{code}\nalready has to be changed to\n{code}\nprivate class *Weight extends Weight {\n{code}\n\nAnyone (almost anyone) who implements createWeight() will already be hit by this back compat break, so why not just make createWeight() public at the same time Weight was changed from an interface to an abstract class\n",
            "date": "2009-08-16T11:51:40.776+0000",
            "id": 16
        },
        {
            "author": "Shai Erera",
            "body": "Nice catch. I forgot Weight was changed to abstract class. +1 from me.",
            "date": "2009-08-16T11:55:12.039+0000",
            "id": 17
        },
        {
            "author": "Mark Miller",
            "body": "Okay, thats a good argument - no objection from me. I'll open it unless anyone objects.",
            "date": "2009-08-16T20:38:33.991+0000",
            "id": 18
        },
        {
            "author": "Mark Miller",
            "body": "If no one objects, I will make this change in a day or two.",
            "date": "2009-08-16T21:27:57.060+0000",
            "id": 19
        },
        {
            "author": "Mark Miller",
            "body": "patch with change + Changes entries\n\nnot sure if we want to add an expert warning as well or not ...",
            "date": "2009-08-16T23:18:42.773+0000",
            "id": 20
        },
        {
            "author": "Mark Miller",
            "body": "Thanks all!\n\nr805189",
            "date": "2009-08-17T22:29:41.923+0000",
            "id": 21
        }
    ],
    "component": "core/query/scoring",
    "description": "Now that the QueryWeight class has been removed, the public QueryWeight createQueryWeight() method on Query was also removed\n\ni have cases where i want to create a weight for a sub query (outside of the org.apache.lucene.search package) and i don't want the weight normalized (think BooleanQuery outside of the o.a.l.search package)\n\nin order to do this, i have to create a static Utils class inside o.a.l.search, pass in the Query and searcher, and have the static method call the protected createWeight method\nthis should not be necessary\n\nThis could be fixed in one of 2 ways:\n1. make createWeight() public on Query (breaks back compat)\n2. add the following method:\n{code}\npublic Weight createQueryWeight(Searcher searcher) throws IOException {\n  return createWeight(searcher);\n}\n{code}\n\ncreateWeight(Searcher) should then be deprectated in favor of the publicly accessible method\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1808",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "make Query.createWeight public (or add back Query.createQueryWeight())",
    "systemSpecification": true,
    "version": ""
}