{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "really quick hacked-up patch for the core o.a.l.search tests.\n\nsome tests fail.\n",
            "date": "2010-11-10T15:08:21.357+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "As mentioned on the user list, we can do something like this here, \nand fix all the bugs and corner cases (probably with a lot of hairiness)...\n\nor we could deprecate and remove MultiSearcher.\n",
            "date": "2010-11-10T16:26:02.600+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "I think the attached patch fixes the thread safety issue w/ FieldCacheImpl.get -- I just made the non-noop validate methods of the *ValuesCreator sync'd.",
            "date": "2011-01-05T00:03:10.908+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "Hmmm, it looks like the committed patch serializes loading of caches of multiple segments (for the same field?)\nI had thought that the root of the problem was only when \"parser\" wasn't specified and the creator attempted to guess?  If so, it seems we could synchronize only when the parser was not originally specified.",
            "date": "2011-01-12T01:22:34.850+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Hmmm, it looks like the committed patch serializes loading of caches of multiple segments (for the same field?)\n\nUgh, you're right.  I had thought validate was \"only\" used after initial creation (eg, \"typically\" to add valid bits in), but in fact, create() calls validate().\n\nYonik do you have a patch in mind to fix the root cause correctly?\n\nI have to say... the new FieldCache code is rather hairy.",
            "date": "2011-01-12T11:32:45.632+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "We should be able to actually implement this issue now right?\n\nImplement LuceneTestCase.newSearcher(), and like the previous patch, sometimes use parallel in tests.\nI think this would be preferred before we go optimizing synchronization, because otherwise how do we know if its correct?\n",
            "date": "2011-01-12T14:50:05.793+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I think this would be preferred before we go optimizing synchronization, because otherwise how do we know if its correct?\n\n+1",
            "date": "2011-01-12T15:48:00.722+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "There is a downside to this whole issue of course... i think its going to be harder to reproduce test fails since we will be using more multithreading.\n\nBut I think its a worthwhile tradeoff in being able to detect more thread-safety bugs.\nIf it becomes a huge hassle, we could always disable it by default or enable only with a flag or something like that.\n",
            "date": "2011-01-12T17:11:25.793+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "bq. There is a downside to this whole issue of course... i think its going to be harder to reproduce test fails since we will be using more multithreading.\n\nRight.\n\nBut I think this (losing reproducibility sometimes) is the lesser evil?  Ie, making sure we tease out thread safety bugs trumps reproducibility...",
            "date": "2011-01-13T11:28:29.167+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "I'd like to push this out from 3.1 also.\n\nOf the two problems i found, the concurrency issue only affected 4.0's fieldcache.\nAdditionally the combine() is now fixed and has an explicit test.\n",
            "date": "2011-01-16T16:15:07.329+0000",
            "id": 9
        },
        {
            "author": "Yonik Seeley",
            "body": "Whew, this code is complex, and I don't really have a solution I like.\n\nHere's a patch to IntValuesCreator that's only for brainstorming purposes...\n- synchronize on the entry instead of the creator so more than one segment may be loaded concurrently.  This is needed to publish objects safely.\n- when guessing the parser, don't set it until it succeeds - basically split up setParserAndResetCounts() to set the counts first, but the parser last.\n- when setting/checking the parser, we need to synchronize on the creator\n\nI also just realized that the mere act of checking the cache creates objects (see the base getCacheKey() ).\n",
            "date": "2011-01-29T21:57:30.182+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "updated newSearcher tests pass for trunk.\n\nnote, lots of tests will warn about leftover threads, because they still need to be fixed to close their IndexSearchers (i fixed a few, but not all yet)",
            "date": "2011-01-31T17:04:59.366+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "updated patch with more tests fixed to close their searchers, some additional debugging, and a big nasty warning instead of 1 second join if you forget to close your searcher.",
            "date": "2011-01-31T18:04:20.833+0000",
            "id": 12
        },
        {
            "author": "Robert Muir",
            "body": "patch, with all tests fixed to close their searchers. tests are passing but there are two problems:\n# see the nocommit in IndexSearcher, when it sets itself as its own child, this crazy recursive thing happens. I don't understand why this code is needed, it shouldn't set itself as its own child?\n# some tests in spans fail when they are run with multiple threads. don't know whats going on here:\n\n{noformat}\njunit-sequential:\n    [junit] Testsuite: org.apache.lucene.search.spans.TestSpansAdvanced2\n    [junit] Tests run: 4, Failures: 2, Errors: 0, Time elapsed: 0.833 sec\n    [junit]\n    [junit] ------------- Standard Output ---------------\n    [junit] 0 warning, expected score: 0.625, actual 0.23211958\n    [junit] 0.23211958 = (MATCH) fieldWeight(TEXT:should in 1), product of:\n    [junit]   1.0 = tf(phraseFreq=1.0)\n    [junit]   0.37139133 = idf(TEXT:  should=14)\n    [junit]   0.625 = fieldNorm(field=TEXT, doc=1)\n    [junit]\n    [junit] 0 warning, expected score: 1.0191123, actual 0.69635624\n    [junit] 0.69635624 = (MATCH) sum of:\n    [junit]   0.041781675 = (MATCH) weight(TEXT:should in 3), product of:\n    [junit]     0.24494985 = queryWeight(TEXT:should), product of:\n    [junit]       0.37139133 = idf(TEXT:  should=14)\n    [junit]       0.6595465 = queryNorm\n    [junit]     0.17057237 = (MATCH) fieldWeight(TEXT:should in 3), product of:\n    [junit]       1.2247449 = tf(phraseFreq=1.5)\n    [junit]       0.37139133 = idf(TEXT:  should=14)\n    [junit]       0.375 = fieldNorm(field=TEXT, doc=3)\n    [junit]   0.6545746 = (MATCH) weight(TEXT:we in 3), product of:\n    [junit]     0.9695357 = queryWeight(TEXT:we), product of:\n    [junit]       1.4700036 = idf(TEXT:  we=4)\n    [junit]       0.6595465 = queryNorm\n    [junit]     0.6751423 = (MATCH) fieldWeight(TEXT:we in 3), product of:\n    [junit]       1.2247449 = tf(phraseFreq=1.5)\n    [junit]       1.4700036 = idf(TEXT:  we=4)\n    [junit]       0.375 = fieldNorm(field=TEXT, doc=3)\n    [junit]\n    [junit] ------------- ---------------- ---------------\n    [junit] ------------- Standard Error -----------------\n    [junit] NOTE: reproduce with: ant test -Dtestcase=TestSpansAdvanced2 -Dtestmethod=testSingleSpanQuery -Dtests.seed=5923986663359901096:-8292211890903536598\n    [junit] NOTE: reproduce with: ant test -Dtestcase=TestSpansAdvanced2 -Dtestmethod=testMultipleDifferentSpanQueries -Dtests.seed=5923986663359901096:-2877104144909248514\n    [junit] NOTE: test params are: codec=RandomCodecProvider: {TEXT=MockVariableIntBlock(baseBlockSize=59), ID=Pulsing(freqCutoff=12)}, locale=pl, timezone=Africa/Lubumbashi\n    [junit] NOTE: all tests run in this JVM:\n    [junit] [TestSpansAdvanced2]\n    [junit] NOTE: Windows Vista 6.0 x86/Sun Microsystems Inc. 1.6.0_23 (32-bit)/cpus=4,threads=1,free=6497408,total=28114944\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testSingleSpanQuery(org.apache.lucene.search.spans.TestSpansAdvanced2):   FAILED\n    [junit] expected:<0.625> but was:<0.2321195751428604>\n    [junit] junit.framework.AssertionFailedError: expected:<0.625> but was:<0.2321195751428604>\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1183)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1115)\n    [junit]     at org.apache.lucene.search.spans.TestSpansAdvanced.assertHits(TestSpansAdvanced.java:172)\n    [junit]     at org.apache.lucene.search.spans.TestSpansAdvanced2.testSingleSpanQuery(TestSpansAdvanced2.java:93)\n    [junit]\n    [junit]\n    [junit] Testcase: testMultipleDifferentSpanQueries(org.apache.lucene.search.spans.TestSpansAdvanced2):      FAILED\n    [junit] expected:<1.0191123485565186> but was:<0.6963562369346619>\n    [junit] junit.framework.AssertionFailedError: expected:<1.0191123485565186> but was:<0.6963562369346619>\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1183)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1115)\n    [junit]     at org.apache.lucene.search.spans.TestSpansAdvanced.assertHits(TestSpansAdvanced.java:172)\n    [junit]     at org.apache.lucene.search.spans.TestSpansAdvanced2.testMultipleDifferentSpanQueries(TestSpansAdvanced2.java:113)\n    [junit]\n    [junit]\n    [junit] Test org.apache.lucene.search.spans.TestSpansAdvanced2 FAILED\n{noformat}\n",
            "date": "2011-01-31T19:14:40.685+0000",
            "id": 13
        },
        {
            "author": "Robert Muir",
            "body": "adding 3.1, given the issues we found in trunk, i think we want to know this stuff works.",
            "date": "2011-01-31T23:42:10.869+0000",
            "id": 14
        },
        {
            "author": "Simon Willnauer",
            "body": "I just fixed the issues you have seen here on LUCENE-2831 all tests pass with that latest patch here.",
            "date": "2011-02-02T22:35:36.762+0000",
            "id": 15
        },
        {
            "author": "Robert Muir",
            "body": "Thanks Simon! I'll commit this and take a look at backporting this monster to 3.x\n",
            "date": "2011-02-02T22:52:00.939+0000",
            "id": 16
        },
        {
            "author": "Robert Muir",
            "body": "It seems this uncovered some monsters in branch_3x (unless i severely screwed things up).\n\nAttached is a patch of my merge... there are problems: some tests totally hang (e.g. TestLazyProxSkipping), and if TestSort gets a parallel executor, testNormalizedScores fails:\n{noformat}\n    [junit] ------------- Standard Error -----------------\n    [junit] NOTE: reproduce with: ant test -Dtestcase=TestSort -Dtestmethod=testNormalizedScores -Dtests.seed=367124575585283127:1927326607030239825\n    [junit] NOTE: test params are: locale=zh_SG, timezone=America/Tijuana\n    [junit] NOTE: all tests run in this JVM:\n    [junit] [TestSort]\n    [junit] NOTE: Windows Vista 6.0 x86/Sun Microsystems Inc. 1.6.0_23 (32-bit)/cpus=4,threads=1,free=12557672,total=16252928\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testNormalizedScores(org.apache.lucene.search.TestSort):  FAILED\n    [junit] expected:<1.6163856983184814> but was:<NaN>\n    [junit] junit.framework.AssertionFailedError: expected:<1.6163856983184814> but was:<NaN>\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1045)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:977)\n    [junit]     at org.apache.lucene.search.TestSort.assertSameValues(TestSort.java:1094)\n    [junit]     at org.apache.lucene.search.TestSort.testNormalizedScores(TestSort.java:668)\n    [junit]\n    [junit]\n    [junit] Test org.apache.lucene.search.TestSort FAILED\n{noformat}\n\nPosting the patch of the merge so we can hopefully debug through these.\n",
            "date": "2011-02-03T01:51:51.140+0000",
            "id": 17
        },
        {
            "author": "Robert Muir",
            "body": "I fixed the hangs, it was due to a similar recursion bug that trunk had (IndexSearcher\nsetting itself as a sub).\n\nI committed the patch, but i added an @Ignore to the testNormalizeScores:\n{noformat}\n[junit] Testsuite: org.apache.lucene.search.TestSort\n[junit] Tests run: 26, Failures: 0, Errors: 0, Time elapsed: 2.471 sec\n[junit]\n[junit] ------------- Standard Error -----------------\n[junit] NOTE: Ignoring test method 'testNormalizedScores': Fix me! Fails if one of the subs is a threaded indexsearcher\n[junit] ------------- ---------------- ---------------\n{noformat}\n\nI think we should get to the bottom of why this one fails... I'll keep the issue open.\n\n",
            "date": "2011-02-03T02:28:55.936+0000",
            "id": 18
        },
        {
            "author": "Simon Willnauer",
            "body": "Robert, I committed a fix with revision 1066904 on 3x I think we should wait a bit and close this issue.\n\nsimon",
            "date": "2011-02-03T18:31:36.424+0000",
            "id": 19
        },
        {
            "author": "Robert Muir",
            "body": "I think we are good to resolve this? I expect/hope for random\nfails in the future that we will content with on a case by case basis!\n\nThanks for fixing it!",
            "date": "2011-02-03T21:29:34.562+0000",
            "id": 20
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. I think we are good to resolve this?\nyeah - no failure during the night! Nice!",
            "date": "2011-02-04T12:47:05.328+0000",
            "id": 21
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:01.221+0000",
            "id": 22
        }
    ],
    "component": "general/build",
    "description": "Most tests in the search package don't care about what kind of searcher they use.\n\nwe should randomly use MultiSearcher or ParallelMultiSearcher sometimes in tests.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2751",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "OTHER",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "add LuceneTestCase.newSearcher()",
    "systemSpecification": true,
    "version": ""
}