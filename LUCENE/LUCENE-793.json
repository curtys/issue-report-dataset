{
    "comments": [
        {
            "author": "Doug Cutting",
            "body": "Should we add more precise exceptions for these cases, and add them to the 'throws' for these methods?  If we make these subclasses of IOException then this would be back-compatible.",
            "date": "2007-02-02T18:03:22.164+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Good idea!  I will take that approach.",
            "date": "2007-02-02T19:06:19.305+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "\nOK I created 3 subclasses of IOException:\n\n  org.apache.lucene.store.LockObtainFailedException\n  org.apache.lucene.index.CorruptIndexException\n  org.apache.lucene.index.StaleReaderException\n\nand then changed most places where we throw a newly created\nIOException to instead throw one of these.  We still throw an\nIOException for low-level errors (eg \"can't read directory\" or \"can't\nfind segments_N file\").\n\nI updated javadocs to reflect these changes.\n\nOther small changes:\n\n  * Fixed IndexReader to throw IOException if you try to\n    delete/setNorm/undeleteAll after the reader is closed (it wasn't\n    previously).  Added unit test for this.\n\n  * Fixed one respelling in private method (aquireWriteLock ->\n    acquireWriteLock)\n\n  * Changed some places where we were throwing IllegalStateException\n    to throw CorruptIndexException instead\n\n  * Fixed some javadoc warnings\n\n",
            "date": "2007-02-16T18:59:21.005+0000",
            "id": 2
        },
        {
            "author": "Hoss Man",
            "body": "\n>  * Changed some places where we were throwing IllegalStateException\n>    to throw CorruptIndexException instead\n\nshouldn't this be considered a major API change? people previously catching IllegalStateException to try and deal with this differently from an IOException will now be caching the \"CorruptIndexException\" as a subclass of IOException.\n\nI haven't read the details of the patch, but perhaps CorruptIndexException should be a subclass of IllegalStateException to be backwards compatible?",
            "date": "2007-02-16T19:31:14.300+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "\nYou're right, technically this is an API change.\n\nThe only cases I changed were the ones stemming from LUCENE-140: the\noriginal \"docs out of order\" corruption plus 2 other consisteny checks\nI had added as part of the fix for LUCENE-140.\n\n(There are other places where Lucene throws a IllegalStateException\nthat I did not change.)\n\nI think it's extremely unlikely users are relying on the\nIllegalStateException specifically (ie catching it explicitly and\ndoing something about it)?\n\nEG these particular cases were never listed in the \"throws\"\n(IllegalStateException is unchecked).  And if you hit this exception\nyour index truly is corrupt.\n\nSince these really are cases of severe index corruption I thought it\nbest to throw CorruptIndexException instead?\n",
            "date": "2007-02-16T20:06:54.183+0000",
            "id": 4
        },
        {
            "author": "Hoss Man",
            "body": "> Since these really are cases of severe index corruption I thought it\n> best to throw CorruptIndexException instead? \n\nno disagreement, i'm just not clear on why \"CorruptIndexException\" (which is a completley new Exception type created by your patch correct?) should be a subclass of IOException instead of IllegalStateException.\n\n",
            "date": "2007-02-16T22:58:27.289+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Ahh, OK, good question.  Yes this a new exception created by this patch.\n\nThere are quite a few places (8 actually) where we previously threw an\nIOException and I've now changed to a CorruptIndexException.  Also\nsince IOException is checked, there are presumably many catch clauses\nout there that would at least catch (yet probably not handle) these\ncorruption cases now.\n\nAll of these cases, plus the IllegalStateException cases, *should* be\nexceptionally rare, but I think it's \"more\" backwards compatible to\nleave the base class of the new CorruptIndexException as IOException?\n",
            "date": "2007-02-16T23:53:59.135+0000",
            "id": 6
        },
        {
            "author": "Hoss Man",
            "body": "Hmmm... well my paranoia says that if we are trying to make the Exceptions more explicit, then any place we currently \"throw Foo\" we should \"throw Bar\" where \"Foo.class.isAssignable(Bar.class)\" ... but if we currently mix/match IOException/IllegalStateException in cases of corruption then I guess it makes sense to use  CorruptIndexException extends IOException.\n\n(the only alternative i can think of would be a CorruptIndexIOException and a CorruptIndexStateException .. but you're probably right .. i don't very many people are worried about catching the IllegalStateException and doing anyhitng special that they aren't already doing when they catch the IOException.",
            "date": "2007-02-17T07:55:28.530+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "OK, I just committed this.   I stuck with the original approach (basing CorruptIndexException on IOException).",
            "date": "2007-02-21T20:02:57.793+0000",
            "id": 8
        }
    ],
    "component": "general/javadocs",
    "description": "\nMost methods in Lucene reserve the right to throw an IOException.  This can occur for nearly all methods from low level problems like wrong permissions, transient IO errors, bad hard drive or corrupted file system, corrupted index, etc, but for some methods there are also more interesting causes that we should try to document.\n\nSpinoff of this thread:\n\n    http://www.gossamer-threads.com/lists/lucene/java-user/44929",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-793",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Javadocs should explain possible causes for IOExceptions",
    "systemSpecification": true,
    "version": ""
}