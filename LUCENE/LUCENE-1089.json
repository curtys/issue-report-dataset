{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "The fixes done are:\nTopDocCollector:\n1. Use insertWithOverflow instead of insert.\n2. Get rid of unnecessary member variables (numHits and minScore).\n\nTestPriorityQueue:\n1. Add testInsertWithOverflow.\n\nPriorityQueue:\n1. Add insertWithOverflow\n2. Change heap to protected.\n3. user heap[1] in insert and insertWithOverflow instead of calling top().",
            "date": "2007-12-12T11:11:33.956+0000",
            "id": 0
        },
        {
            "author": "Shai Erera",
            "body": "This one modifies other classes that called insert() with calls to insertWithOverflow():\nTopFieldDocCollector\nQualityQueriesFinder\nFuzzyQuery",
            "date": "2007-12-12T12:28:09.719+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good; I made a few changes (attached take3):\n\n  * Put back the minScore optimization in TopDocCollector.collect &\n    FuzzyQuery, but, using reusableSD.score as the bar.  This saves\n    changing reusableSD & calling insertWithOverflow for every\n    candidate.  Then I put back TopFieldDocCollector.collect since it\n    can't make that same optimization.\n\n  * I implemented PriorityQueue.insert by calling insertWithOverflow\n    (so we keep the tricky insert logic as single source).\n\n  * I changed reusableSD in TopDocCollector to private (it was\n    protected -- was there a reason?).\n\n  * Made another small optimization to PriorityQueue that saves the if\n    statement in top() (this was #2 in Nadav's additional suggestions).\n\n  * Small javadoc fixes.\n\n",
            "date": "2007-12-12T22:26:16.199+0000",
            "id": 2
        },
        {
            "author": "Shai Erera",
            "body": "1. Actually there was why I removed the minScore. There's no point in evaluating minScore with current score because it's been evaluated again in insertWithOverflow. You don't lose anything by just populating reusableSD and calling insertWithOverflow. For that reason I removed collect() from TopFieldDocCollector. To me it looks like a cleaner code, and gain, performance wise, you only make the same comparison twice.\n\n2. That's a good one.\n\n3. Initially I thought TopFieldDocCollector would use it as FieldDoc (which extends ScoreDoc) and using TopDocCollector's collect() method. Then I implemented a protected newScoreDoc(doc, score) which was overidden by TopFieldDocCollector. That way, if TFDC uses TDC's collect() method, all it needs to do is override newScoreDoc(doc, score) to return a FieldDoc.\n\n4. Initially I implemented top() the same as you did, but then there were tests that created a PQ of size 0. However, with the change to initialize, it is safe to do it.\n\nI think that TDC and TFDC as I put them in the patch are extended cleaner and that way we don't do any extra logic (that's the reason why you would have needed to write the comment in TFDC's collect() method about simply comparing the score. Please re-consider my changes.",
            "date": "2007-12-13T06:05:25.752+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\n1. Actually there was why I removed the minScore. There's no point in evaluating minScore with current score because it's been evaluated again in insertWithOverflow. You don't lose anything by just populating reusableSD and calling insertWithOverflow. For that reason I removed collect() from TopFieldDocCollector. To me it looks like a cleaner code, and gain, performance wise, you only make the same comparison twice.\n{quote}\n\nBut, imagine a query that has 55K hits to be collected (the avg. from\nyour tests).\n\nWith the original patch, you saved a tiny number of allocations (~70\nin your tests) yet added 55K inits of recycledSD and 55K additional\nmethod calls, which is surely a net loss of performance for the\n\"typical\" query.  We set out here to improve performance of searching,\nbut I think the original patch does the reverse.\n\nThe proposed (modified) patch, puts back the original optimization\n(well, close to it: the original \"minScore\" is actually the minScore\nin the PQ) so we don't have the extra 55K MM inits+method call.\n\nI suppose we could also just make the API addition to PriorityQueue,\nbut not change how TDC and TFDC and FQ call PriorityQueue.\n",
            "date": "2007-12-13T10:42:56.209+0000",
            "id": 4
        },
        {
            "author": "Shai Erera",
            "body": "You're right, I wasn't thinking in those terms. Your changes should remain.",
            "date": "2007-12-13T13:32:09.594+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "OK, thanks.  I plan to commit in a day or two.",
            "date": "2007-12-13T14:20:01.221+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "I just committed this.  Thanks Shai!",
            "date": "2007-12-17T18:08:20.184+0000",
            "id": 7
        }
    ],
    "component": "",
    "description": "This feature proposes to add an insertWithOverflow to PriorityQueue so that callers can reuse the objects that are being dropped off the queue. Also, it changes heap to protected for easier extensibility of PQ",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1089",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add insertWithOverflow to PriorityQueue",
    "systemSpecification": true,
    "version": "2.3"
}