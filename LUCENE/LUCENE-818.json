{
    "comments": [
        {
            "author": "Doron Cohen",
            "body": "I looked at Java IO as a reference for acceptable behavior in this regard. \n\nIf you close a file system object and try to use it, \n- RandomAccessFile will throw IOException with: \"No such file or directory\"\n- FileWriter will throw IOException with \"Stream closed\"\n- FileOutputStream will throw IOException with \"Stream closed\"\n\nSo you could say that Java did not go all the way with a well defined illegalState exception. \nDatabases on the other hand would give you a well definied error code.\n\nI don't have a strong opinion if this is a must for Lucene or not. \n\nBut if this is to be added, one way to do it is to define a Closable interface { close(); isOpen() }, implement this interface in all public classes that need to check open state (IndexWriter, IndexReader, etc.), add a single static ensureOpen(Closable) method in a utils class that would throw the IllegalState exception, and just call this method from every (public?) open-state open dependent method. I think this would keep the 'noise' in the code to minimum.\n\n",
            "date": "2007-02-26T20:20:58.264+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "\nThat approach seems a little overkill to me.\n\nI would need to create a new Closeable interface, and then a static\n\"ensureOpen\" method somewhere else.  These would probably live in\nutil, so then this is all public: users see that these classes\nimplement Closeable, yet, it's not really a publicly useful feature,\nso it adds noise to the javadocs.\n\nI was planning instead on just adding a private \"ensureOpen()\" to\nIndexWriter (and I agree I should do IndexReader as well) that throws\nIllegalStateException if it's closed.  I think noise is kept to the\nsame minimum (?) because all public methods that require this just have an\nadded ensureOpen() call at the top.  This is how IndexModifier works\ntoday.\n\nHmm, IndexReader already throws IOException in certain cases if it's\nalready closed.  So I think I will make a new exception\n(AlreadyClosedException?) that subclasses IOException and throw that.",
            "date": "2007-02-26T23:54:40.372+0000",
            "id": 1
        },
        {
            "author": "Grant Ingersoll",
            "body": "FWIW: Some of the other Readers (actually, IndexInput) are undefined when invoking after close.  I ran into this w/ the FieldsReader when working on lazy loading.  See http://www.gossamer-threads.com/lists/lucene/java-dev/34109?search_string=lazy%20field%20loading;#34109\nfor reference.",
            "date": "2007-02-27T17:36:50.076+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "I see, so IndexInput indeed does not track isClosed.  It's not easy to\nfix that since IndexInput is public and non-final?\n\nThough I'm actually less concerned about this one because it's very\n\"internal\" to Lucene.\n\nI'm more concerned about the public paths (IndexWriter, IndexReader).\nUsers seem to accidentally close these classes fairly often.  I think\nIndexSearcher is OK because on close it at worst closes the underlying\nIndexReader, and then any call to that IndexReader will catch that\nit's closed.\n\nOh, I see: this public path will indeed access IndexInput after it's\nbeen closed:\n\n  Open reader\n  Get a doc w/ lazy field(s)\n  Close reader\n  Try to get the lazy field's value\n\nThat last step will clone the cloneableFieldsStream after it had been\nclosed.  Hmmm.  Though I think we could just fix this path in\nFieldsReader by having it record when it's closed & throw an\nAlreadyClosedException if the LazyField class is used after that?\nThat seems like the simplest fix.\n",
            "date": "2007-02-27T20:19:57.044+0000",
            "id": 3
        },
        {
            "author": "Steven Parkes",
            "body": "Shades of LUCENE-686. It'd be nice to agree on that one, too (though it's internal, not external).",
            "date": "2007-02-27T20:42:34.574+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "\nI'm planning on adding o.a.l.store.AlreadyClosedException.\n\nBut, I'm back to subclassing this from IllegalStateException (not\nIOException).  There are a fair number of methods where we should\nthrow this exception but IOException was not already in the throws\nclause.  Also, since it's rather rare, I think subclassing an\nunchecked Exception is appropriate.\n\nThe only counter argument is IndexReader which currently throws\nIOException if it has been closed but then acquireWriteLock is called\n(for one of the \"writer\" methods).  So this would technically be an\nAPI change for this particular case in IndexReader.  But I think it's\na tiny API change especially because it does not affect user's code\nsince they already must catch the existing IOException (vs the other\nmethods where adding checked \"throws IOException\" would be a major API\nchange).\n",
            "date": "2007-02-27T21:04:13.097+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch.\n\nI added checks to all public methods in IndexReader (and its\nsubclasses in Lucene's sources: SegmentReader, MultiReader,\nFilteredIndexReader, ParallelReader), IndexWriter and FieldsReader\nthat throw AlreadyClosedException if they are used after being closed.\n\nI then hit a few tests that were incorrectly closing\nreader/searcher/writer and then continuing to use them (or double\nclosing them), so I fixed those.\n",
            "date": "2007-03-02T18:18:11.669+0000",
            "id": 6
        },
        {
            "author": "Doron Cohen",
            "body": "Throwing that exception for close() seems a bit too restrictive...\nPerhaps for close() of an already closed object just do nothing?\nThis would be more forgiving/friendly to \"over protecting\" (possibly existing) applications.\n\n",
            "date": "2007-03-02T18:30:27.910+0000",
            "id": 7
        },
        {
            "author": "Doug Cutting",
            "body": "> Perhaps for close() of an already closed object just do nothing? \n\n+1 Double-closing is sometimes hard to avoid.  I'd rather have it ignored than force folks to, e.g., write more complicated exception handlers.\n",
            "date": "2007-03-02T18:35:50.351+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "Excellent point.  OK I fixed the patch to silently ignore close() when\nthe IndexReader, IndexWriter, FieldsReader was already closed.",
            "date": "2007-03-02T18:51:50.071+0000",
            "id": 9
        },
        {
            "author": "Yonik Seeley",
            "body": "I think that accessing a closed reader should continue to be undefined.\nIf we define it to throw an exception, then we have thread safety issues which would be too costly (IMO) to fix.\n\nIf we are to add checks for a closed reader, it seems like they should only be put on methods where an additional method call would be negligible.  Hand-holding that decreases performance for everyone isn't something I like.  Sun often goes too far in this regard, and as a consequence, people end up rewriting their own version of classes to get better performance.\n\nAfter all, this is really just making nicer error messages for incorrect programs, right?  Everyone shouldn't have to pay for that.  I guess I'm a minimalist :-)",
            "date": "2007-03-02T19:15:59.136+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "Yes, this is about giving a clear (and prompt) error message when\nLucene is used incorrectly.\n\nLUCENE-140 was also a similar situation.  In that case incorrect usage\ncould lead to index corruption much later.\n\nI feel like that is important because it affects the perceived quality\nof Lucene.  Enough users seem to hit this (especially common seems to\nbe iterating through Hits after the reader is closed).  As Lucene\nadoption grows, more users will hit it.\n\nBecause detection of this now is so \"intermittant\" (undefined), a\ndeveloper could think everything is OK in testing, push things into\ntheir production world, only to suddenly see an error.  Then, the\nerror is something strange (eg confusing NullPointerException) which\ndoesn't make it clear what's happened.\n\nIn the IndexWriter case it's potentially devastating because (I\nthink?) if you keep using your closed IndexWriter, then, it's\noperating on the index without holding the write lock (this was pre\n2.1).\n\nI do agree we shouldn't go overboard with this (eg I certainly think\nwe should not add checks inside things like TermDocs/TermPositions).\n\nAnd I agree this is in general a difficult tradeoff.\n\nBut I think in this case the performance impact is likely very small; I could\nwork out a test to be sure.\n\nMaybe we could remove checking for clearly frequently called methods\n(eg isDeleted)?\n",
            "date": "2007-03-02T20:53:10.135+0000",
            "id": 11
        },
        {
            "author": "Yonik Seeley",
            "body": "\n> Then, the error is something strange (eg confusing NullPointerException) which doesn't make it clear what's happened. \n\nI think that depends on context.  Many cases of NPEs are perfectly clear when you look at the stack trace.\n\n> In the IndexWriter case it's potentially devastating\n\nAgreed... when it affects correctness, we should fix.\n\nAdding ensureOpen() to something like maxDoc() does not ensure correctness though - an exception may or may not be thrown in the reader is already closed (because of those thread-safety issues).  It actually increases the variability of behavior.  We need to be careful not to guarantee the throwing of the exception.\n\n> especially common seems to be iterating through Hits after the reader is closed\n\nGood point, for document() esp.  I'm OK with the heavyweight methods.\n\n> Maybe we could remove checking for clearly frequently called methods (eg isDeleted)?\n\nThat's one of the ones I had in mind... isDeleted() can be called millions of times for a single query.  Probably numDoc(), maxDoc(), etc, are also candidates.\n\nEarlier detection of bugs when the cost is nil is good though...\nwhat about setting more things to null when a reader is closed?",
            "date": "2007-03-02T21:35:22.089+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": ">> Then, the error is something strange (eg confusing NullPointerException) which doesn't make it clear what's happened.\n>\n> I think that depends on context.  Many cases of NPEs are perfectly clear when you look at the stack trace.\n\nWell for people familiar with Lucene's sources, yes.  But most of our\nusers are not and so seeing an \"AlreadyClosedException\" can make a big\ndifference over [possibly rather nested, and, rather delayed] NPE or\nsomething else.\n\nEG look at the poor user that led to my opening this issue (link in\nopening comment).  The user was understandably confused by the NPE\ninside the RAMDirectory.\n\n> Adding ensureOpen() to something like maxDoc() does not ensure\n> correctness though - an exception may or may not be thrown in the\n> reader is already closed (because of those thread-safety issues). It\n> actually increases the variability of behavior. We need to be\n> careful not to guarantee the throwing of the exception.\n\nOn the thread safety issue: are you saying if one thread closes the\nreader while another thread is using it, there is uncertainty excactly\nwhen the 2nd thread will hit the AlreadyClosedException (because of\nhow the JVM schedules the threads)?  I think this kind of thread\nbehavior is normal/expected?\n\nOr is the thread safety issue something else?\n\n>> especially common seems to be iterating through Hits after the reader is closed\n> \n> Good point, for document() esp. I'm OK with the heavyweight methods.\n>\n>> Maybe we could remove checking for clearly frequently called methods (eg isDeleted)?\n>\n> That's one of the ones I had in mind... isDeleted() can be called millions of times for a single query. Probably numDoc(), maxDoc(), etc, are also candidates.\n\nOK how about we do not call ensureOpen() in these IndexReader methods?:\n\n  numDoc()\n  maxDoc()\n  isDeleted()\n\nI think even without checking in those methods we still catch a number\nof common cases:\n\n  * Close reader then try to run a search (termDocs()/termPositions()\n    catch the close)\n\n  * Run a search, close reader, then try to iterate through Hits\n    (document() catches the close)\n\n  * Close a reader then try to delete docs or setNorms\n    (deleteDocument()/setNorm() catch the close)\n\n> Earlier detection of bugs when the cost is nil is good though...\n\nYes I think we in general want \"fail-fast\" here.\n\n> what about setting more things to null when a reader is closed?\n\nWell ... I would prefer not to increase the frequency of getting\n\"undefined\" NPEs out of the reader.  If we are going to cause\nadditional exceptions here, I'd like to make them intelligible to the\nuser (ie, AlreadyClosedException).  EG, take SegmentReader's \"si\"\n(SegmentInfo).  If we set this to null on close, then numDoc() and\nmaxDoc() would hit NPE instead of just returning the correct answer.\nI think I'd prefer returning the correct answer for such cases.\n",
            "date": "2007-03-03T10:31:06.027+0000",
            "id": 13
        },
        {
            "author": "Yonik Seeley",
            "body": "> On the thread safety issue: are you saying if one thread closes the\n> reader while another thread is using it, there is uncertainty excactly\n> when the 2nd thread will hit the AlreadyClosedException (because of\n> how the JVM schedules the threads)?\n\nYes, but it's not just thread scheduling, it's also lack of memory barriers.  The 2nd thread may *never* see the close(), depending on the exact architecture of machine and the JVM.\n\n> I think this kind of thread behavior is normal/expected? \n\nFor a class that isn't thread safe, yes.  IndexReader is advertised as being thread safe though.  If we guarantee an exception accessing a closed reader, then that should work 100% of the time. I don't think we should make that guarantee. \n\nWe can still throw meaningful errors in more cases and make it easier for the user to debug that, but it should not be deemed an error if we don't throw an exception.  Users should never rely on getting this exception for flow-control purposes anyway.\n\n> OK how about we do not call ensureOpen() in these IndexReader methods?:\n>  numDoc()\n>  maxDoc()\n>  isDeleted() \n\n+1\n\nhasDeletions() too?\n\n> > what about setting more things to null when a reader is closed?\n> Well ... I would prefer not to increase the frequency of getting \"undefined\" NPEs out of the reader\n\nYes, but not all bugs will be user bugs.  Some will be internal Lucene stuff that bypass public methods.\nIt's still better that these fail quicker too.  Anyway, that can be handled on a case-by-case basis later.\n\n",
            "date": "2007-03-03T19:50:02.048+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": ">> On the thread safety issue: are you saying if one thread closes the\n>> reader while another thread is using it, there is uncertainty excactly\n>> when the 2nd thread will hit the AlreadyClosedException (because of\n>> how the JVM schedules the threads)?\n>\n> Yes, but it's not just thread scheduling, it's also lack of memory\n> barriers. The 2nd thread may *never* see the close(), depending on\n> the exact architecture of machine and the JVM.\n\nYikes.  Is this the Java memory model issue?  Ie, there is no hard\nguarantee on when a \"write\" from one thread will be visible to other\nthreads, unless you use \"volatile\"?\n\n>> I think this kind of thread behavior is normal/expected?\n>\n> For a class that isn't thread safe, yes. IndexReader is advertised\n> as being thread safe though. If we guarantee an exception accessing\n> a closed reader, then that should work 100% of the time. I don't\n> think we should make that guarantee.\n\nOK I think we shouldn't \"guarantee\" it.  I think listing as \"@throws\nAlreadyClosedException if this IndexReader is closed\" is OK?\n\n> We can still throw meaningful errors in more cases and make it\n> easier for the user to debug that, but it should not be deemed an\n> error if we don't throw an exception. Users should never rely on\n> getting this exception for flow-control purposes anyway.\n\nAgreed.\n\n>> OK how about we do not call ensureOpen() in these IndexReader methods?:\n>> numDoc()\n>> maxDoc()\n>> isDeleted()\n>\n> +1\n> \n> hasDeletions() too?\n\nOK I will change to not call ensureOpen() for hasDeletions too.  I\nwill roll a new patch with this.\n\n>> > what about setting more things to null when a reader is closed?\n>> Well ... I would prefer not to increase the frequency of getting \"undefined\" NPEs out of the reader\n>\n> Yes, but not all bugs will be user bugs. Some will be internal\n> Lucene stuff that bypass public methods.  It's still better that\n> these fail quicker too. Anyway, that can be handled on a\n> case-by-case basis later.\n\nOK, I agree.  Better to throw a \"fail-fast\" NPE than do something\nstrange later.",
            "date": "2007-03-03T23:57:00.755+0000",
            "id": 15
        },
        {
            "author": "Daniel John Debrunner",
            "body": ">> Yes, but it's not just thread scheduling, it's also lack of memory\n>> barriers. The 2nd thread may *never* see the close(), depending on\n>> the exact architecture of machine and the JVM.\n\n>Yikes. Is this the Java memory model issue? Ie, there is no hard\n>guarantee on when a \"write\" from one thread will be visible to other\n>threads, unless you use \"volatile\"? \n\nDoesn't crossing a synchronization barrier ensure that all threads will seem the same value of a field?",
            "date": "2007-03-04T00:46:06.628+0000",
            "id": 16
        },
        {
            "author": "Yonik Seeley",
            "body": "> Doesn't crossing a synchronization barrier ensure that all threads will seem the same value of a field?\n\nYes, if the changing thread crosses a write barrier and the reading  thread crosses a read barrier.\n\nThe obvious implication that you need to synchronize the sets/gets of isClosed.  That's not a big deal in some cases, but in anything that could be in an inner loop, it is a big deal.  We already have reports of simple things like isDeleted() being a bottleneck on servers with many CPUs and concurrent threads because of the synchronization.  That particular sync point is something that I've planned to get rid of at some point in the future by having a \"read only\" IndexReader.\n",
            "date": "2007-03-04T01:35:23.694+0000",
            "id": 17
        },
        {
            "author": "Yonik Seeley",
            "body": "> Yikes. Is this the Java memory model issue?\n\nYes, but it's not a problem with the Java memory model, it's more of a feature.  Threads in general have this problem (or perform very poorly if they don't).  It's also very much about compiler optimizations as well.  The optimizer may stuff a value in a register, and never check it's location in main-memory, and never see the changes.  Even if it doesn't then you drop down to problems with the CPU and cache + memory architectue in SMP systems.  Some systems require explicit memory barriers or cache flushes to see memory changes from another CPU.  One CPU writes to a spot in memory, and absent any special instructions, another CPU reading from that spot in memory may not see the change.\n",
            "date": "2007-03-04T01:43:39.310+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "Attached take3, which just removes ensureOpen() checks for IndexReader's maxDoc(), numDoc(), hasDeletions(), isDeleted(...).",
            "date": "2007-03-04T09:44:05.714+0000",
            "id": 19
        },
        {
            "author": "Hoss Man",
            "body": "I havne't been following this issue that closely, and i haven't read any of the patches, but if the goal is:\n\n  \"reduce situations where novice users get confusing exceptions when using IndexWriter after closing it\"\n\n...and the concern is that calling a new \"ensureOpen()\" method at the begining of every public method may be a performacne issue, then perhaps an alternative would be to catch all exceptions inside public methods and wrap them if not closed, ie...\n\n   public Foo somePublicMethod() throws IOException {\n       try {\n          // current method body\n       } catch (Exception e) {\n          if (isOpen()) {\n             throw e;\n          } else {\n             throw new AllreadyClosedException(e);\n          }\n       }\n    }\n\n...that way any performance cost of ensureOpen/isOpen is only payed on an existing Exception.  the down side i see to this approach is that since it only explains exceptions hte caller would get anyway, it doesn't give any feedback about using a closed writer in cases where the current code returns cleanly (but may not function properly) ... we might be able to solve that by adding better error checking in those specific cases (if we know of any) and throwing explicit exceptions.",
            "date": "2007-03-04T23:15:29.845+0000",
            "id": 20
        },
        {
            "author": "Michael McCandless",
            "body": "To make that work, I think we'd have to convert the Exception into\neither IOException or RuntimeException before throwing it (so we don't\nhave to change method signature).\n\nBut, I think this approach adds more noise to the source code.  Also\nbecause it's \"after the fact\" then damage could have been done (I\n*think* IndexWriter before 2.1 would gleefully keep writing, but\nwithout holding the write lock!).  It would only catch cases where an\nexception was thrown (many times there is none) whereas I prefer \"fail\nfast\".\n",
            "date": "2007-03-05T09:44:01.575+0000",
            "id": 21
        },
        {
            "author": "Hoss Man",
            "body": "1) my example attempted to be concise ... ideally we would be explicit in our catches.\n\n2) the body of the catch clauses could be put into a helper method just like ensureOpen to help reduce code noise\n\n3) if there are situations where damage will be done by not testing that we are open before taking some action, that would fall under my \"adding better error checking in those specific cases (if we know of any) and throwing explicit exceptions.\" ... a lot of this could be achieved (as Yonik suggested) by nulling out more things in close so that the first attempt to do something dangerous after the close triggered a NullPointerException.\n\n4) \"fail fast\" is always good ... except when it makes the non-failure case slow ... i was merely suggesting an alternative that would achieve the same results without penalizing performance of people obeying the rules.\n\nas an added bonus, both methodologies could be used... \n\nif numDoc(), maxDoc(), isDeleted(), and hasDeletions() are the only mehtods were people are concerned about the performance impacts of calling ensureOpen() everytime, then those methods could be the ones where isOpen could be checked in any exception handling block, and all of the other mehtods could use ensureOpen as orriginal described.\n",
            "date": "2007-03-05T21:32:40.855+0000",
            "id": 22
        },
        {
            "author": "Michael McCandless",
            "body": "\n> 2) the body of the catch clauses could be put into a helper method just like ensureOpen to help reduce code noise\n\nTrue, but I think it's still more code noise to have\ntry/catch/call-helper-method than ensureOpen() call?  Esp. since you'd\nhave to handle IOException and RuntimeException as 2 separate catch\nclauses (I think?), each of which calls a separate helper.  Ie instead\nof:\n\n  ensureOpen();\n  ...do stuff...\n\nwe would need something like:\n\n  try {\n    ...do stuff...\n  } catch (IOException exc) {\n    throw ensureOpenAfterIOException(exc);\n  } catch (RuntimeException exc) {\n    throw ensureOpenAfterRuntimeException(exc);\n  }\n\nI think?\n\n> 3) if there are situations where damage will be done by not testing that we are open before taking some action, that would fall under my \"adding better error checking in those specific cases (if we know of any) and throwing explicit exceptions.\" ... a lot of this could be achieved (as Yonik suggested) by nulling out more things in close so that the first attempt to do something dangerous after the close triggered a NullPointerException.\n\nThe thing is we may not know all such cases (yet)?  I prefer taking a\ndefensive approach here.  I don't really like the null-out solution\nbecause I think getting an AlreadyClosedException is clearer to the\nuser than a NPE's.\n\n> 4) \"fail fast\" is always good ... except when it makes the non-failure case slow ... i was merely suggesting an alternative that would achieve the same results without penalizing performance of people obeying the rules.\n>\n> if numDoc(), maxDoc(), isDeleted(), and hasDeletions() are the only mehtods were people are concerned about the performance impacts of calling ensureOpen() everytime, then those methods could be the ones where isOpen could be checked in any exception handling block, and all of the other mehtods could use ensureOpen as orriginal described.\n\nGood idea!  An added bonus is that these methods do not throw\nIOException so the exception handling would just have the one\nRuntimeException catch clause above.  OK I will rework patch with this\napproach and see how it looks...\n",
            "date": "2007-03-06T09:47:49.614+0000",
            "id": 23
        },
        {
            "author": "Hoss Man",
            "body": "i would make sure to *heavily* document each and every use of isOpen/ensureOpen to make it clear why they are being used when they are from a performance concern case ... otherwise people will be very confused down the road (\"why the hell isn't this being checked until the catch block?!?!?!\")",
            "date": "2007-03-06T19:55:29.283+0000",
            "id": 24
        },
        {
            "author": "Michael McCandless",
            "body": "\n> i would make sure to *heavily* document each and every use of isOpen/ensureOpen to make it clear why they are being used when they are from a performance concern case ... otherwise people will be very confused down the road (\"why the hell isn't this being checked until the catch block?!?!?!\")\n\nOK I changed my mind.\n\nI don't think we should add the \"check if closed after the fact\"\nlogic.  I reviewed the 4 methods in question (maxDoc, numDocs,\nhasDeletions, isDeleted) and for all subclasses of IndexReader these\nare very trivial methods that won't throw exceptions.\n\nSo I'm back to thinking this added complexity (and future confusion to\npeople looking @ Lucene source code) isn't worthwhile and we should\nleave these methods with no checking for whether they are already\nclosed.\n\nBut I will document why ensureOpen is *not* being called in each of\nthese methods.",
            "date": "2007-03-06T21:20:51.618+0000",
            "id": 25
        },
        {
            "author": "Michael McCandless",
            "body": "New patch based on above discussion: just re-based to the current trunk, and, added comments on why ensureOpen is not called in the 4 methods.",
            "date": "2007-03-07T09:08:18.933+0000",
            "id": 26
        },
        {
            "author": "Yonik Seeley",
            "body": "If we aren't guaranteeing an exception be thrown after a close, why are we bothering to put the exception in the method signature?\n\nIt's already apparent to everyone that using something after it's closed isn't good, so we were just cleaning up the  error messages and making it easier to debug.  People shouldn't have specific application logic for this exception... it should be treated as a program error.\n\nIMO, listing the exception encourages people to catch it, suggests that they can depend on the exception being thrown, and also makes it more difficult to remove it from certain methods in the future.",
            "date": "2007-03-08T00:42:54.229+0000",
            "id": 27
        },
        {
            "author": "Doron Cohen",
            "body": "> People shouldn't have specific application logic for this exception... it should be treated as a program error. \n+1 \n\nAlso, another candidate for AlreadyClosedException upon using an already closed (RAM)Directory - came up in http://www.nabble.com/sharing-my-experience-for-upgrading-from-Lucene-1.9-to-Lucene-2.2-dev-tf3366948.html \n\n",
            "date": "2007-03-08T03:25:19.168+0000",
            "id": 28
        },
        {
            "author": "Michael McCandless",
            "body": ">> People shouldn't have specific application logic for this exception... it should be treated as a program error.\n> +1\n\nOK, agreed.  I will remove AlreadyClosedException from all @throws\nmethod signatures.\n\n> Also, another candidate for AlreadyClosedException upon using an already closed (RAM)Directory - came up in http://www.nabble.com/sharing-my-experience-for-upgrading-from-Lucene-1.9-to-Lucene-2.2-dev-tf3366948.html\n\nYeah I saw this too.  Here's the relevant excerpt:\n\n> 3. RAMDirectory related changes\n>   It took me something to find this out. Previously, after\n>     ramDirectory = new RAMDirectory(file)\n>   I could ramDirectory.close() to release the resources. And later, I\n> could do a check for IndexReader.indexExists(ramDirectory) to see if\n> there is an index in the directory. FSDirectory behaves this way also.\n>   But with lucene 2.2, NullPointerExceptions came out. It turns out\n> when ramDirectory.close(), the instance variable fileMap is set to\n> null. And IndexReader.indexExists(ramDirectory) is reading fileMap to\n> look for indexes, causing the NPE.\n\nIn fact the original user's list email that started this bug was also\ndue to RAMDirectory setting its fileMap to null, but in that case, it\nwas via IndexWriter so detecting that IndexWriter is closed would\nprevent that one.\n\nIn this case the developer is using a RAMDirectory directly.\n\nI think this is an example where \"nulling things out on close\" leads\nto developer confusion.  Previously RAMDirectory functioned fine after\nbeing closed(); now, it throws a hard to understand (unless you are\nfamiliar w/ Lucene's sources & what specifically we changed in 2.1)\nNPE.\n\nI think we should fix this?\n\nSince RAMDir's public methods are fairly hot (eg heavily used building\nsingle-doc RAM segment), we can use Hoss's neat approach and\nspecifically catch the NPE and rethrow as an AlreadyClosedException?\n\nI don't mind if the \"after close semantics\" is \"it works just like it\ndid when it was open\" (ie, close is a no-op).  I also don't mind if\nyou get a \"fail-fast\" quick AlreadyClosedException.  But I think\nanything in between (NPE or other undefined, intermittant exceptions)\nonly confuses our developers.\n\nLooking at FSDirectory, it continues to work fine after close with the\none spooky exception that it may have been removed from the\nDIRECTORIES hashtable, which means if you then open the same canonical\npath again you get a different FSDirectory instance.  The comment\nstates \"this permits synchronization on directories\", but I don't see\nwhere in Lucene we are relying on this?  Ie, what could break if a\nuser keeps using a closed FSDirectory thus possibly having more than\none FSDirectory instance for a given canonical path?\n",
            "date": "2007-03-08T09:27:03.155+0000",
            "id": 29
        },
        {
            "author": "Yonik Seeley",
            "body": "> we can use Hoss's neat approach and\n> specifically catch the NPE and rethrow as an AlreadyClosedException? \n\nI'm not enough of an expert to know if this would be faster or slower than a simple fileMap==null check.\nI would guess it depends on what needs to be set up in the stack frame to potentially catch an exception, and if the try/catch/throw code prevents any optimizations (such as inlining).\n\nAlso, catching a NPE seems a little icky to me... so w/o more info I'd lean toward a fileMap==null check (if anything).\n\n",
            "date": "2007-03-08T16:56:38.818+0000",
            "id": 30
        },
        {
            "author": "Michael McCandless",
            "body": "> I'm not enough of an expert to know if this would be faster or slower than a simple fileMap==null check.\n> I would guess it depends on what needs to be set up in the stack frame to potentially catch an exception, and if the try/catch/throw code prevents any optimizations (such as inlining).\n> \n> Also, catching a NPE seems a little icky to me... so w/o more info I'd lean toward a fileMap==null check (if anything).\n\nOK, good points.  It is not in fact clear that a try/catch solution is\nless costly, so, let's keep it simple.  I will just add ensureOpen().\n",
            "date": "2007-03-08T18:06:52.748+0000",
            "id": 31
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch: removed AlreadyClosedException from throws clauses & javadocs; added ensureOpen calls inside RAMDirectory as well.",
            "date": "2007-03-12T17:52:07.183+0000",
            "id": 32
        }
    ],
    "component": "core/index",
    "description": "Spinoff from this thread on java-user:\n\n    http://www.gossamer-threads.com/lists/lucene/java-user/45986\n\nIf you call addDocument on IndexWriter after it's closed you'll hit a\nhard-to-explain NullPointerException (because the RAMDirectory was\nclosed).  Before 2.1, apparently you won't hit any exception and the\nIndexWrite will keep running but will have released it's write lock (I\nthink).\n\nI plan to fix IndexWriter methods to throw an IllegalStateException if\nit has been closed.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-818",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "IndexWriter should detect when it's used after being closed",
    "systemSpecification": true,
    "version": "2.1"
}