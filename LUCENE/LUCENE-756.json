{
    "comments": [
        {
            "author": "Doron Cohen",
            "body": "Attached patch - nrm.patch.txt - modifies field norms maintenance to a single .nrm file.\n\nModification is backwards compatible - existing indexes with norms in a file per norm are read. - the first merge would create a single .nrm file.\n\nAll tests pass.\n\nNo performance degtadations were observed as result of this change, but my tests so far were not very extensive.\n",
            "date": "2006-12-21T02:15:03.000+0000",
            "id": 0
        },
        {
            "author": "Doron Cohen",
            "body": "Replacing the patch file (prev file was garbage - \"svn stat\" instead of \"svn diff\").\n\nFew words on how this patch works: \n- <segment>.nrm file was added.\n- addDocument  (DocumentWriter) still writes each norm to a separate file - but that's in memory, \n- at merge, all norms are written to a single file.\n- CFS now also maintains all norms in a single file.\n- IndexWriter merge-decision now considers hasSeparateNorms() not only for CFS but also for non compound.\n- SegmentReader.openNorms() still creates ready-to-use/load Norm objects (which would read the norms only when needed). But the Norm object is now assigned a normSeek value, which is nonzero if the norm file is <segment>.nrm.\n- existing indexes, prior to this change, are managed the same way that segments resulted of addDocument are managed.\n\nTests:\n- I verified that also the (contrib) tests for FieldNormModifier and LengthNormModofier are working.\n\nRemaining:\n- I might add a test.\n- more benchmarking?\n- update fileFormat document.",
            "date": "2006-12-21T04:26:54.000+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "Seems like a good idea... given that norms are read once on-demand, I wouldn't expect anything search related to be slower with this.  Opening a new reader should actually be slightly faster due to fewer files to open.\n",
            "date": "2006-12-21T15:03:37.000+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "> - CFS now also maintains all norms in a single file. \n\nDoes this mean a separate file outside the final .cfs files?",
            "date": "2006-12-21T15:18:12.000+0000",
            "id": 3
        },
        {
            "author": "Doron Cohen",
            "body": "> Does this mean a separate file outside the final .cfs files? \n\nOh no - there's a single .nrm file in the .cfs file (instead of multiple .fN files in the .cfs file). \nAs before, only .sN files (separated norm files) are outside of .cfs file.\n",
            "date": "2006-12-21T15:53:12.000+0000",
            "id": 4
        },
        {
            "author": "Doug Cutting",
            "body": "Since we're adding a new file, shouldn't we give it a header, so that it's format can be revised?  Something like:\n  new byte[] {'N','R','M',VERSION}\nas the first four bytes.  We might someday decide to change the representation used, e.g., a different one-byte-float format, or permit higher resolution, or compression, or somesuch.\n\nAlso, should we use a constant for \".nrm\" extension, so that it's checked at compile-time?",
            "date": "2006-12-21T18:47:01.000+0000",
            "id": 5
        },
        {
            "author": "Doron Cohen",
            "body": "Thanks for the comments, Doug. \nYou're right of course, I will add both the header and the constant.\n(that would be either today or only in a week from now.)",
            "date": "2006-12-21T19:00:57.000+0000",
            "id": 6
        },
        {
            "author": "Doron Cohen",
            "body": "nrm.patch.2.txt:\n\nUpdated as Doug suggested: \n- \".nrm\" extension now maintained in a constant .\n- .nrm file now has a 4 bytes header.\n\nAnd, fileFormat document is updated.\n\nAlso, I checked again that the seeks for the various field norms are lazy - performed only when bytes are actually read with refill().\n\n\n",
            "date": "2006-12-22T08:51:01.000+0000",
            "id": 7
        },
        {
            "author": "Doron Cohen",
            "body": "I am updating the patch (nrm.patch.3.txt): \n\n- using a single constant for the norms file extension:\n  static final String NORMS_EXTENSION = \"nrm\";\n(This is more in line with existing extension constants in the code.)\n(As a side comment, there are various extension names (e.g. \".cfs\") in the code that are also candidate for factoring as a constant, but this is a separate issue.)\n\n- adding a test - TestNorms\nThis test verifies that norm values assigned with field.setBoost() are preserved during the life cycle of an index, including adding documents, updating norms values (separate norms), addIndexes(), and optimize.\n\nAll tests pass.\nOn my side this is ready to go in.\n",
            "date": "2007-01-03T22:47:12.098+0000",
            "id": 8
        },
        {
            "author": "Yonik Seeley",
            "body": "Committed.  Thanks Doron!",
            "date": "2007-01-07T04:20:31.804+0000",
            "id": 9
        },
        {
            "author": "Doron Cohen",
            "body": "Thanks for commiting this Yonik!\n\nSeems the added test TestNorms was not commited..?",
            "date": "2007-01-07T05:59:16.667+0000",
            "id": 10
        },
        {
            "author": "Yonik Seeley",
            "body": "Hmmm, I actually did an \"svn status\" to see if there was anything to add too.\nProblem is, my current tree is too messy and I missed it.\nThanks for the double-check.",
            "date": "2007-01-08T01:07:46.859+0000",
            "id": 11
        },
        {
            "author": "Michael McCandless",
            "body": "I would like to propose some small improvements to this nice feature.\n\nI've worked out a patch (will attach shortly).  Doron if you agree /\nor we can iterate then I'll commit it!  Thanks.\n\nProposed changes:\n\n  * Renamed \"withNrm()\" to \"getHasMergedNorms\" to be more\n    descriptive.  Also changed the field to \"hasMergedNorms\".\n\n  * Explicitly store \"hasMergedNorms\" in the segments_N file.\n\n    I think in general we should favor storing things like this\n    explicitly instead of relying on IO operations (fileExists).\n    We've made great progress lately in reducing such IO operations so\n    I'd like to keep that up when possible :)\n\n    I created a new FORMAT_MERGED_NORMS in SegmentInfos for this.  The\n    change is fully backwards compatible (old indices work fine).  I\n    extended TestBackwardsCompatibility to test this.\n\n    This then has the nice side effect of not having to create the\n    fleeting CompoundFileReader in \"SegmentInfo.getHasMergedNorms\"\n    (which was somewhat spooky to me) for indices written to after\n    this is committed.  For indices written to before this gets\n    committed but after the first version was committed (10 days ago),\n    the check is still needed so I've left it in there with a comment.\n\n  * Fixed the TestDoc unit test to actually create & return\n    SegmentInfo's vs recreating a new SegmentInfo every time (which\n    causes problems whenever we add something to SegmentInfo).  This\n    is still a correct test but more scalable with time as we make\n    changes to SegmentInfo.\n",
            "date": "2007-01-16T16:35:30.931+0000",
            "id": 12
        },
        {
            "author": "Yonik Seeley",
            "body": "I agree that reducing the IO operations on an index open is a good thing.\n\n> For indices written to before this gets\n> committed but after the first version was committed (10 days ago),\n\nNo hard rule on this, but IMO that may be a small enough window that compatibility is not needed.",
            "date": "2007-01-16T16:49:23.818+0000",
            "id": 13
        },
        {
            "author": "Michael McCandless",
            "body": "> No hard rule on this, but IMO that may be a small enough window that compatibility is not needed.\n\nThis is a good question.  I had flip/flop'd on it.  It would be nice\nto not have to support reading indices that were written to based on\nthe past 10 days of Lucene trunk builds.  Then we could greatly\nsimplify the \"SegmentInfo.getHasMergedNorms\" to not create then\ndestroy the CompoundFileReader.\n\nAny objections to this?\n\nIf not I will re-work the patch (it makes things a fair bit cleaner).",
            "date": "2007-01-16T17:04:19.013+0000",
            "id": 14
        },
        {
            "author": "Yonik Seeley",
            "body": "As an aside, I think we need to start making more frequent releases... then \"trunk\" could be designated as a work-in-progress and unstable, and hence compatibility concerns could be limited to those releases.",
            "date": "2007-01-16T17:08:44.796+0000",
            "id": 15
        },
        {
            "author": "Michael McCandless",
            "body": "OK, take two!  I attached LUCENE-756-Jan16.Take2.patch\n\nI removed backwards compatibility for the past 10 days of Lucene\nnightly trunk builds.  I also fixed fileformats.xml to describe the\nnew \"HasMergedNorms\" entry in the segments_N file.\n",
            "date": "2007-01-16T17:50:39.727+0000",
            "id": 16
        },
        {
            "author": "Chuck Williams",
            "body": "I may have the only app that will be broken by the 10-day backwards incompatibility, but the change seems worth it.  I need to create some large indexes to take on the road for demos.  Is the index format in the latest patch final?\n",
            "date": "2007-01-16T18:11:50.249+0000",
            "id": 17
        },
        {
            "author": "Michael McCandless",
            "body": "Actually, if you apply my first change above, regen your index, then the format will be readable to the 2nd patch.\n\nChuck, I think this latest patch would likely be the \"final\" index file format for this issue, pending any more feedback on it though!",
            "date": "2007-01-16T18:34:03.531+0000",
            "id": 18
        },
        {
            "author": "Doron Cohen",
            "body": "Michael, I like this improvement!\n\n(At first I considered adding such FORMAT level but decided that it is not worth it, - aiming backwards compatibility with pre-lockless indexes. Then I had to add that file check - wrong trade-off indeed.)\n\nTwo minor comments:\n- getHasMergedNorms() is private and now the method has no logic - I would remove that method and refer to hasMergedNorms instead.\n- the term \"merged\" (in hasMergedNorms) is a little overloaded with other semantics (in Lucene), though I cannot think of other matching descriptive (short) term.\n\nThanks for improving this,\nDoron",
            "date": "2007-01-16T19:33:05.243+0000",
            "id": 19
        },
        {
            "author": "Doug Cutting",
            "body": "> the term \"merged\" (in hasMergedNorms) is a little overloaded with other semantics (in Lucene)\n\nUnified?  Single?",
            "date": "2007-01-16T19:42:51.392+0000",
            "id": 20
        },
        {
            "author": "Doron Cohen",
            "body": "Catenated?",
            "date": "2007-01-16T19:53:57.728+0000",
            "id": 21
        },
        {
            "author": "Doron Cohen",
            "body": "Just to let you know - I checked this with recent patch for Lucene-741 (Field norm modifier) --> working as is with this improvement.",
            "date": "2007-01-16T19:55:17.077+0000",
            "id": 22
        },
        {
            "author": "Michael McCandless",
            "body": "OK thanks Doron.  I will make the fixes you suggested!\n\nI like \"single\" -- I will redo the \"non backwards compatible for past 10 days\" patch with these fixes!",
            "date": "2007-01-16T19:57:48.219+0000",
            "id": 23
        },
        {
            "author": "Michael McCandless",
            "body": "OK I committed the fix (changed the name to \"singleNormFile\").  Thanks\neveryone!",
            "date": "2007-01-16T20:28:17.902+0000",
            "id": 24
        },
        {
            "author": "Michael McCandless",
            "body": "Closing all issues that were resolved for 2.1.",
            "date": "2007-02-27T18:10:39.068+0000",
            "id": 25
        }
    ],
    "component": "core/index",
    "description": "Non-compound indexes are ~10% faster at indexing, and perform 50% IO activity comparing to compound indexes. But their file descriptors foot print is much higher. \n\nBy maintaining all field norms in a single .nrm file, we can bound the number of files used by non compound indexes, and possibly allow more applications to use this format.\n\nMore details on the motivation for this in: http://www.nabble.com/potential-indexing-perormance-improvement-for-compound-index---cut-IO---have-more-files-though-tf2826909.html (in particular http://www.nabble.com/Re%3A-potential-indexing-perormance-improvement-for-compound-index---cut-IO---have-more-files-though-p7910403.html).\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-756",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Maintain norms in a single file .nrm",
    "systemSpecification": true,
    "version": ""
}