{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "I think we should add real checks here, w/ volatile isOpen/isClosed bool, up and down the stack, to those methods where the volatile read cost will be tiny compared to the cost of the method or of the app using the returned result.\n\nIR/IW already try to do this (hmm: though not volatile for IW) but it sounds like we are missing checks inside the codecs?",
            "date": "2011-09-15T20:25:59.692+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nIR/IW already try to do this\n{quote}\n\nI don't think so? I'll attach a patch with a trivial test basically demonstrating what I was seeing.\n\nIt sometimes passes!!!!!\n\n{noformat}\n  public void test() throws Exception {\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    searcher.close();\n    reader.close();\n    searcher.search(query, 5); // are you serious? \n  }\n{noformat}",
            "date": "2011-09-15T20:28:52.574+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "I think the open/closed checks should still be non-volatile.\nWhile a volatile read on (current) x86 is a no-op, it still imposes a happens-before/after restriction via the memory model and hence prevents optimizations across that volatile read.  Volatile reads may not always be a no-op on x86 either (and they already aren't on other CPUs).\n\nUsing a volatile also doesn't buy us much either - it's still best-effort (the close could come after we have checked the volatile, but before we have done the read).  We have enough volatile/synchronized reads in other places that a non-volatile check will suffice to catch bugs (and we shouldn't penalize correct programs).",
            "date": "2011-09-15T21:06:53.436+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "\nbq. and we shouldn't penalize correct programs\n\nI agree we should keep the added cost for correct programs to a\nminimum, but there are many good reasons why we should try to throw\nAlreadyClosedException instead of something scary like NPE or\nEOFException, etc.:\n\n  * Better usability -- when you make a simple mistake (IW/IR.close in\n    the wrong place) you get a clear indication what's wrong, and that\n    saves you time/frustration/hair/iterations.\n\n  * Earlier error detection: lower risk that an app will push to\n    production without catching that IW/IR.close is wrong.\n\n  * Save Lucene devs time: when users come to the list w/ a cryptic\n    exception that after a few back & forths we discover was an errant\n    IW/IR.close, that uses up lots of people's time, time that instead\n    could be spent towards improving Lucene/Solr instead.\n\n  * Protect Lucene's perceived quality: like it or not, Lucene (not\n    the app) will sometimes be blamed when a user hits a cryptic\n    exception because of an errant IW/IR.close.  Blog posts will go\n    up, tweets will get tweeted, emails to list or to other lists will\n    go unanswered, people doing future Googling will hit these and\n    see Lucene as buggy.\n\n  * We can find our own bugs -- in adding some missing ensureOpens to\n    IW, here, I discovered a case where DirectoryReader.close calls\n    IW.deleteUnusedFiles after IW was closed, and this invokes the\n    DelPolicy, which is definitely dangerous.\n\nNet/net I think it's important that we try, when possible/reasonable,\nto have clear error detection and reporting, making it as easy as we\ncan for the user to understand what's wrong.  And if that means a\nminiscule extra cost to \"correct\" users, that's a fair tradeoff.\n\nbq. While a volatile read on (current) x86 is a no-op, it still imposes a happens-before/after restriction via the memory model and hence prevents optimizations across that volatile read. Volatile reads may not always be a no-op on x86 either (and they already aren't on other CPUs).\n\nThe thing is, we already call ensureOpen only in places where the\nadded cost should be vanishingly small compared to what will follow;\nit'll still be vanishingly small as a volatile.\n\nActually, IR's ensureOpen checks the refCount (AtomicLong)\nso we are already \"effectively\" volatile for IR, just not for IW.\n\nbq. Using a volatile also doesn't buy us much either - it's still best-effort (the close could come after we have checked the volatile, but before we have done the read).\n\nRight this will always be a best effort check, but if we can do a\n\"better\" best effort, while still having no real added cost, I think\nwe should improve.\n\nI'm not saying we should add ensureOpen() in hotspots.  But I do think\nwe should make IW's closed boolean volatile.  The added cost will\nstill be tiny, since we only call ensureOpen where it shouldn't\nmatter, and it may allow us to throw ACE instead of a cryptic\nexception in some cases.\n",
            "date": "2011-09-16T19:24:17.659+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Patch, adding missing ensureOpens, adding volatile to IW's close/closing bools, and fixing the scary bug where we invoke del policy (and possibly delete file) on a closed writer.",
            "date": "2011-09-19T15:16:22.695+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Bulk close after release of 3.5",
            "date": "2011-11-27T12:29:26.359+0000",
            "id": 5
        }
    ],
    "component": "",
    "description": "if you try to search across a closed reader (and/or searcher too),\nthere are no checks, not even assertions statements.\n\nthis results in crazy scary stacktraces deep inside places like FSTs/various term dictionary implementations etc.\n\nIn some situations, depending on codec, you wont even get an error (i'm sure its fun when you try to retrieve the stored fields!)\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3439",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "add checks/asserts if you search across a closed reader",
    "systemSpecification": true,
    "version": ""
}