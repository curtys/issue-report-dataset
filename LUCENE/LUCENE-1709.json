{
    "comments": [
        {
            "author": "Jason Rutherglen",
            "body": "Given my limited understanding of ANT, it seems like it would be\nideal long term to be able to set a the numThreads on JUnitTask\nwhich underneath executes the tests in BatchTest in parallel.\n\nI'm not sure how to hack Parallel and JUnitTask together in the\nANT XML. \n\nIf it's possible for JUnit to somehow return Tasks up the chain\nto Parallel, that might work?",
            "date": "2009-06-24T23:55:27.387+0000",
            "id": 0
        },
        {
            "author": "Jason Rutherglen",
            "body": "So am thinking we'd create a ParallelJUnitTask that extends JUnitTask and accepts a threadCount property.  We can reuse code from the threading code from Parallel.  ",
            "date": "2009-06-25T00:10:44.466+0000",
            "id": 1
        },
        {
            "author": "Hoss Man",
            "body": "if you're looking to extend ant it might be better to tackle that on the dev@ant list ... there's only two or three ant hackers i can think of in the lucene community (and a lot in the ant community)\n\nI would also suggest becoming familiar with these two links...\nhttp://www.nabble.com/1.7.1---Beta-Vote-to16148645.html#a15698118\nhttps://parallel-junit.dev.java.net/\n\n\nAs mentioned in the \"Previous discussion\" link: a simple way for lucene to get *some* paralllelization using existing ant functionality would be to extend (or make a variant) of our contrib-crawl so it could run the contrib tests in parallel (contrib crawl can't be parallelized in the general case because some contribs have dependencies on other contribs and build them if they aren't already built)\n\n",
            "date": "2009-06-25T01:24:13.239+0000",
            "id": 2
        },
        {
            "author": "Jason Rutherglen",
            "body": "Thanks for the links!",
            "date": "2009-06-25T01:49:23.161+0000",
            "id": 3
        },
        {
            "author": "Jason Rutherglen",
            "body": "{quote} As mentioned in the \"Previous discussion\" link: a simple\nway for lucene to get some paralllelization using existing ant\nfunctionality would be to extend (or make a variant) of our\ncontrib-crawl so it could run the contrib tests in parallel\n(contrib crawl can't be parallelized in the general case because\nsome contribs have dependencies on other contribs and build them\nif they aren't already built) {quote}\n\nI'd like to get test-core multithreaded. In looking at the\nant-junit code, it's unfortunately not easy (as noted in the\nlinks) to execute the batchtest(s) in parallel. So agreed that\nthe most obvious solution belongs in the the ant world. However\nI still hold out some hope for a custom interim solution.",
            "date": "2009-06-25T20:45:39.412+0000",
            "id": 4
        },
        {
            "author": "Johan Kindgren",
            "body": "Just a thought from an outsider...\nDo you mean that you would implement your own task? In which module would you put this custom ant task? This would mean that you need a module in Lucene just to be able to build Lucene?\n\nCan't help keep on pointing to maven which has already solved this problem...\nhttp://maven.apache.org/plugins/maven-surefire-plugin/examples/testng.html\nLook at running tests in parallel.\nI havent tried this yet, but why spend time reinventing the wheel?",
            "date": "2009-06-25T22:00:26.516+0000",
            "id": 5
        },
        {
            "author": "Jason Rutherglen",
            "body": "{quote} Do you mean that you would implement your own task? In\nwhich module would you put this custom ant task? {quote}\n\nYes, seems creating a custom task should work? In contrib/ant? \n\nLast time I tried to use Maven I couldn't get it to work (was\nrunning into a bug) so my knowledge isn't very good. We're using\nant and ivy for our webapp dev. I don't know what Lucene's\nposition is on Maven, but am interested pursuing whatever makes\nsense.",
            "date": "2009-06-25T22:30:19.737+0000",
            "id": 6
        },
        {
            "author": "Johan Kindgren",
            "body": "I did a quick maven setup just to see the effects of running tests in parallel, and the result was a bit surprising. When running in parallel, it took about 30-40 seconds less (~7.40minutes) than running in sequence (~8.10minutes).\nDon't know if there would be a significant boost on a quad-core, my dual core had some idle time left when running with five threads.\nIs it worth the development time and the complexity increase of the build?",
            "date": "2009-06-26T21:21:41.997+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "Actually I see decent gains from concurrency: when I run tests with 6\nthreads my tests run a little over 3X faster (12:59 with 1 thread and\n4:15 with 6 threads).\n\nI'm using a Python script that launches the threads, each specifying\n-Dtestpackage to run a certain subset of Lucene's tests.\n\nThis is on an OpenSolaris (2009.06) machine, with a Core i7 920 CPU\n(= 8 cores presented to the OS) and an Intel X25M SSD, 12 GB RAM.  The\nhardware has quite a bit of concurrency.\n",
            "date": "2009-06-27T07:41:41.798+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "I'm attaching the scary python script that I use to use multiple\nthreads when running the tests.\n\nIt's not really generic at all.  It's got hardwired paths to my home\ndir, it symlinks build/test to /tmp (= tmpfs on my solaris box), it\napplies a scary patch to the build xml files (and that patch is\ndepending on the branch -- only works on 2.9, 3.0, trunk, flex now).\n\nOften the patch fails to apply (as we change the build xml files) so I\nhave to go and redo them.\n\nSometimes tests have false positive failure because they temporarily\nfill up the tmpfs; if you ctrl+C the test it may leave turd processes\nrunning; etc.\n\nSo I wouldn't recommend using this as is.... but maybe someone who is\ngood-with-the-ant can take the general idea here and make it work more\ngenerally with only ant.\n\nRoughly all that I do is have each thread run its own -Dtestpackage.\nThe existing search & index packages are too big, so I split them into\n2.  I also roughly ordered the tests so that they are \"balanced\", so\nthat as each thread pulls from the work queue, the \"roughly\" fininish\nat the same time.  The test-contrib is run by a single thread.\n\nWith all the speedups, this is what the output looks like:\n{noformat}\n[TRUNK]\n0 [0:00:00.310867]: run \"ant compile-backwards compile-core compile-demo jar-core compile-test build-contrib\"...\n0 [0:00:30.612062]: run \"ant test-contrib\"...\n1 [0:00:30.617522]: run \"ant test-core -Dtestpackagea=index\"...\n2 [0:00:30.623840]: run \"ant test-core -Dtestpackageb=index\"...\n3 [0:00:30.630072]: run \"ant test-backwards -Dtestpackagea=index\"...\n4 [0:00:30.637612]: run \"ant test-backwards -Dtestpackageb=index\"...\n5 [0:00:30.645334]: run \"ant test-core -Dtestpackagea=search\"...\n4 [0:00:58.937803]: run \"ant test-core -Dtestpackageb=search\"...\n2 [0:00:59.052593]: run \"ant test-backwards -Dtestpackagea=search\"...\n5 [0:01:31.313156]: run \"ant test-backwards -Dtestpackageb=search\"...\n2 [0:01:52.617814]: run \"ant test-core -Dtestpackage=store\"...\n4 [0:02:01.698477]: run \"ant test-backwards -Dtestpackage=store\"...\n2 [0:02:10.818047]: run \"ant test-core -Dtestpackage=analysis\"...\n3 [0:02:14.808217]: run \"ant test-backwards -Dtestpackage=analysis\"...\n1 [0:02:15.786972]: run \"ant test-core -Dtestpackageroot=lucene\"...\n4 [0:02:21.937936]: run \"ant test-backwards -Dtestpackageroot=lucene\"...\n1 [0:02:25.898000]: run \"ant test-core -Dtestpackage=util\"...\n2 [0:02:31.037923]: run \"ant test-backwards -Dtestpackage=util\"...\n4 [0:02:31.038090]: run \"ant test-core -Dtestpackage=document\"...\n3 [0:02:32.007975]: run \"ant test-backwards -Dtestpackage=document\"...\n5 [0:02:38.017968]: run \"ant test-core -Dtestpackage=queryParser\"...\n3 [0:02:40.097929]: run \"ant test-backwards -Dtestpackage=queryParser\"...\n4 [0:02:40.151166]: DONE\n0 [0:02:41.927786]: DONE\n1 [0:02:43.077980]: DONE\n2 [0:02:46.198287]: DONE\n5 [0:02:49.168172]: DONE\n3 [0:02:50.197936]: DONE\n\nDONE: took 0:02:51.046643 [528 tests]\n{noformat}\n",
            "date": "2010-02-21T13:45:48.810+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "Here is a in-progress patch to build.xml/common-build.xml\nIt runs tests in parallel (2 jvms per cpu)\nOn my computer, 'test-core' is 1:02 and 'test' is 3:29 with the patch.\n\nNot ready for committing yet, and needs some improvements and fixes.",
            "date": "2010-03-07T17:32:57.707+0000",
            "id": 10
        },
        {
            "author": "Jason Rutherglen",
            "body": "Robert, very nice!  ",
            "date": "2010-03-10T00:49:52.289+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "Thanks Jason.\n\nSo for newtrunk I applied a similar patch to speed up Solr's tests.\nYou can see it here: http://svn.apache.org/viewvc?rev=926470&view=rev\n\nIn this case the output is not interleaved because it uses a special formatter.\nSo it basically looks just like you are not using parallel at all.\nAdditionally -Dtestpackage, -Dtestpackageroot, -Dtestcase all work, the former two are also parallelized.\n\nSo, I propose we do the same thing for Lucene tests.\nSolr was simple because it does not have these junit failed flag files.\nI propose we just remove these, like how Solr does contrib.\nHudson hasn't failed in over a month by the way.\n",
            "date": "2010-03-23T13:45:50.138+0000",
            "id": 12
        },
        {
            "author": "Mark Miller",
            "body": "+1 on removing those flags - personally I find them unnecessary - and they complicate the build.\n\nAnd I would love to Lucene parallel like Solr now.",
            "date": "2010-03-23T13:58:41.339+0000",
            "id": 13
        },
        {
            "author": "Michael McCandless",
            "body": "+1 for removing the flags and committing parallel tests for Lucene too.",
            "date": "2010-03-23T14:05:22.986+0000",
            "id": 14
        },
        {
            "author": "Robert Muir",
            "body": "attached is a patch, before applying it you must do this:\n{noformat}\nsvn move solr/src/test/org/apache/solr/SolrJUnitResultFormatter.java lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java\n{noformat}\n\nThe formatter itself is really broken, the sync only makes the output work within a single TestSuite.\nWe need some file-locking or similar to ensure it is really correct.\n\nThe patch does not do backwards in parallel (only core/contrib)\nAlso, there is the TEMP_DIR problem i mentioned, which i haven't addressed here.",
            "date": "2010-03-26T14:12:27.979+0000",
            "id": 15
        },
        {
            "author": "Robert Muir",
            "body": "attached is an updated patch, addressing some of the problems of the previous one:\n\nRemaining \"bugs\":\n* Solr's build.xml still doesnt yet detect that lucene's tests have changed, \nso you need to do 'ant clean' after this patch, so it will pick up the fact that \nthe formatter was moved to Lucene's tests. This is a more general problem\nwe need to fix, so that updates to Lucene's test code reflect in Solr without cleaning.\n* The output is still interleaved at times, we need the file locking to fix this.\n\nbefore applying the patch, do this:\n{noformat}\nsvn move solr/src/test/org/apache/solr/SolrJUnitResultFormatter.java lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java\nsvn copy lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java lucene/backwards/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java\n{noformat}\n\nThis is because the backwards tests need the formatter too, as they are now also run in parallel.",
            "date": "2010-03-26T17:06:49.823+0000",
            "id": 16
        },
        {
            "author": "Robert Muir",
            "body": "attached is an updated patch, run the same commands before applying the patch:\n{noformat}\nsvn move solr/src/test/org/apache/solr/SolrJUnitResultFormatter.java lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java\nsvn copy lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java lucene/backwards/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java\n{noformat}\n\nMark fixed the interleaved output here, so this is good.\nBut, there is a problem in that we change java.io.tmpdir in tests, so we cannot use it\nfor the lock file. So if we fix tests to only use \"tempDir\", then we are ok with the formatter,\nas it can just use java.io.tmpdir for its lock file.\n\n\n",
            "date": "2010-03-26T17:49:13.150+0000",
            "id": 17
        },
        {
            "author": "Robert Muir",
            "body": "attached is an updated patch, as Uwe has fixed the previous tempDir issue in the backwards tests.\n\nI think we are close, there are only two issues I want to address first:\n* Solr tests should do some uptodate check on lucene's test code\n* Benchmark's work directory for tests should be under tempDir\n",
            "date": "2010-03-26T18:32:59.657+0000",
            "id": 18
        },
        {
            "author": "Robert Muir",
            "body": "attached is a patch that sets the benchmark.work.dir for benchmark *tests* to tempDir.\nThis way these tests do not step on each other.\nAdditionally some minor cleanup in the quality test was needed (e.g. use getClass().getResourceAsStream for input files)\n\nThe only thing left now, is to make sure that solr tests detect when lucene core test code is out of date,\nas solr tests use this code... really outside the scope of this issue, but it will cause confusion if\npeople have to 'ant clean' after the commit.",
            "date": "2010-03-26T19:25:17.316+0000",
            "id": 19
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. The only thing left now, is to make sure that solr tests detect when lucene core test code is out of date, as solr tests use this code... really outside the scope of this issue, but it will cause confusion if people have to 'ant clean' after the commit.\n\nThe ANT <uptodate/> specialist will look into this!",
            "date": "2010-03-26T21:12:09.389+0000",
            "id": 20
        },
        {
            "author": "Robert Muir",
            "body": "bq. The ANT <uptodate/> specialist will look into this!\n\nOk, thanks uwe.\n\nI will commit this shortly, and send a note to both dev lists mentioning to run ant clean for the time being for any old checkouts.\n\nI think most people will prefer shaving minutes off their test time for a one time-clean... unless anyone objects!\n",
            "date": "2010-03-26T21:32:42.795+0000",
            "id": 21
        },
        {
            "author": "Robert Muir",
            "body": "Committed revision 928069.",
            "date": "2010-03-26T21:59:32.955+0000",
            "id": 22
        },
        {
            "author": "Robert Muir",
            "body": "I would like to reopen this issue to address some minor things.\n* junit should not create temp files in the src directory, like junitvmwatcher* etc.\n* we should somehow include ant.jar and ant-junit.jar in such a way its easy for\nIDE's to be configured, yet at the same time, ant doesn't give a warning. This\nwas already a pre-existing condition for contrib/ant!\n* we should tone down the default threads-per-cpu to 1 by default, and allow\nit to be configurable via sysprop.\n\ni think these apply to solr too, so i'm proposing fixing both the build.xml's",
            "date": "2010-03-31T21:11:16.517+0000",
            "id": 23
        },
        {
            "author": "Shai Erera",
            "body": "One more thing - change benchmark tests to run sequentially (by adding the property).\nRobert, are you going to tackle that soon?",
            "date": "2010-04-07T05:08:15.579+0000",
            "id": 24
        },
        {
            "author": "Shai Erera",
            "body": "Since I had the changes on my local env. I thought it's best to generate a patch out of them, so they don't get lost. The patch doesn't cover the ant .jars, only the changes to common-build.xml as well as benchmark/build.xml",
            "date": "2010-04-07T08:25:16.263+0000",
            "id": 25
        },
        {
            "author": "Tom Burton-West",
            "body": "I am having the same issue Shai reported in LUCENE-2353 with the parallel tests apparently causing the tests to hang on my Windows box with both Revision 931573 and Revision   931304 when running the tests from root.\n\nTests  hang in WriteLineDocTaskTest, on this line:\n[junit] ------------> config properties:\n[junit] directory = RAMDirectory\n[junit] doc.maker = org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest$JustDateDocMaker\n[junit] line.file.out = D:\\dev\\lucene\\lucene-trunk\\build\\contrib\\benchmark\\test\\W\\one-line\n[junit] ------------------------------- \n\n\nI just ran the test last night with Revision  931708 and had no problem.   Ran it again this morning and got the hanging behavior.  The difference is that last night the only thing running on my computer besides a couple of ssh terminal windows was the  tests.  Today when I ran the tests and got the hanging behavior, I have firefox, outlook, exceed, wordpad open.  The tests are taking 98-99.9% of my cpu while hanging.  I suspect there is some kind of resource issue when running the tests in parallel.\n\nTom Burton-West",
            "date": "2010-04-08T15:42:25.073+0000",
            "id": 26
        },
        {
            "author": "Robert Muir",
            "body": "Thanks Tom and Shai... sorry I haven't gotten to fix this yet.\n\nShai, would you mind committing your patch? we can keep the issue open to add the sysprop and fix the ant jar thing, and apply the same fixes to Solr's build.xml\n",
            "date": "2010-04-08T15:45:30.383+0000",
            "id": 27
        },
        {
            "author": "Tom Burton-West",
            "body": "This may or may not be a clue to the problem in benchmark.  When I control-C'd the hung test, I got the error reported below.\nTom.\n\n\n    [junit] directory = RAMDirectory\n    [junit] doc.maker = org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest$JustDateDocMaker\n    [junit] line.file.out = C:\\cygwin\\home\\tburtonw\\lucene\\april07_good\\build\\contrib\\benchmark\\test\\W\\one-line\n    [junit] -------------------------------\n    [junit] ------------- ---------------- ---------------\n    [junit] java.io.FileNotFoundException: C:\\cygwin\\home\\tburtonw\\lucene\\april07_good\\contrib\\benchmark\\junitvmwatcher203463231158436475.properties (The process cannot access the file because it is being used by another process)\n    [junit] \tat java.io.FileInputStream.open(Native Method)\n    [junit] \tat java.io.FileInputStream.<init>(FileInputStream.java:106)\n    [junit] \tat java.io.FileReader.<init>(FileReader.java:55)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeAsForked(JUnitTask.java:1025)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:876)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:803)\n    [junit] \tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n    [junit] \tat sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)\n    [junit] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    [junit] \tat java.lang.reflect.Method.invoke(Method.java:597)\n    [junit] \tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n    [junit] \tat org.apache.tools.ant.Task.perform(Task.java:348)\n    [junit] \tat org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:62)\n    [junit] \tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n    [junit] \tat sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)\n    [junit] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    [junit] \tat java.lang.reflect.Method.invoke(Method.java:597)\n    [junit] \tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n    [junit] \tat org.apache.tools.ant.Task.perform(Task.java:348)\n    [junit] \tat org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:394)\n    [junit] \tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)\n    [junit] \tat sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)\n    [junit] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    [junit] \tat java.lang.reflect.Method.invoke(Method.java:597)\n    [junit] \tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n    [junit] \tat org.apache.tools.ant.Task.perform(Task.java:348)\n    [junit] \tat org.apache.tools.ant.taskdefs.Parallel$TaskRunnable.run(Parallel.java:428)\n    [junit] \tat java.lang.Thread.run(Thread.java:619)\n",
            "date": "2010-04-08T15:48:02.835+0000",
            "id": 28
        },
        {
            "author": "Robert Muir",
            "body": "Thanks Tom, this is exactly what happened to Shai.\n\nCan you try his patch and see if it fixed the problem for you?",
            "date": "2010-04-08T16:02:04.928+0000",
            "id": 29
        },
        {
            "author": "Shai Erera",
            "body": "Robert, I will commit the patch, seems good to do anyway. We can handle the ant jars separately later.\n\nAnd ths hang behavior is exactly what I experience, including the FileInputStream thing. Only on my machine, when I took a thread dump, it showed that Ant waits on FIS.read() ...\n\nRobert - to remind you that even with the patch which forces junit to use a separate temp folder per thread, it still hung ... ",
            "date": "2010-04-08T17:16:37.297+0000",
            "id": 30
        },
        {
            "author": "Tom Burton-West",
            "body": "Hi Robert,\n\nI patched Revision 931708 and ran \"ant clean test-contribute\" and the tests ran just fine.  The patch seems to have solved the problem.\n\nTom",
            "date": "2010-04-08T17:17:59.128+0000",
            "id": 31
        },
        {
            "author": "Robert Muir",
            "body": "I committed the junit tempdir fix in revision 932857... will handle these one at a time.",
            "date": "2010-04-11T10:24:09.097+0000",
            "id": 32
        },
        {
            "author": "Shai Erera",
            "body": "Committed revision 932878 with the following:\n# benchmark tests force sequential run\n# threadsPerProcessor defaults to 1 and can be overridden by -DthreadsPerProcessor=<value>\n# A CHANGES entry",
            "date": "2010-04-11T12:13:35.435+0000",
            "id": 33
        },
        {
            "author": "Robert Muir",
            "body": "I've propagated Shai's improvements to Solr.\nAdditionally, I added the ant lib as a convenience for IDE users (revision 933575.)\nIt doesn't cause ant classpath warnings when running from the commandline. if you experience this, please let me know!\nIt only means its easier for IDE users to work on lucene/solr and not see compile errors from contrib/ant and src/test.",
            "date": "2010-04-13T12:14:18.589+0000",
            "id": 34
        },
        {
            "author": "Robert Muir",
            "body": "backported to 3.x, rev 941663",
            "date": "2010-05-06T11:20:59.284+0000",
            "id": 35
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:11.857+0000",
            "id": 36
        }
    ],
    "component": "core/index",
    "description": "The Lucene tests can be parallelized to make for a faster testing system.  \n\nThis task from ANT can be used: http://ant.apache.org/manual/CoreTasks/parallel.html\n\nPrevious discussion: http://www.gossamer-threads.com/lists/lucene/java-dev/69669\n\nNotes from Mike M.:\n{quote}\nI'd love to see a clean solution here (the tests are embarrassingly\nparallelizable, and we all have machines with good concurrency these\ndays)... I have a rather hacked up solution now, that uses\n\"-Dtestpackage=XXX\" to split the tests up.\n\nIdeally I would be able to say \"use N threads\" and it'd do the right\nthing... like the -j flag to make.\n{quote}",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1709",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Parallelize Tests",
    "systemSpecification": true,
    "version": "2.4.1"
}