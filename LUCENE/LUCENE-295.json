{
    "comments": [
        {
            "author": "Chuck Williams",
            "body": "Created an attachment (id=13175)\nModified files for MultiSearcher / Similarity incompatibility\n",
            "date": "2004-10-22T08:15:01.000+0000",
            "id": 0
        },
        {
            "author": "Daniel Naber",
            "body": "Created an attachment (id=13194)\nChuck's changes as a diff\n",
            "date": "2004-10-23T01:58:40.000+0000",
            "id": 1
        },
        {
            "author": "Daniel Naber",
            "body": "Chuck, thanks for the files. I cannot judge if that's the correct/best way to \nfix the problem. I've attached a diff built from your new files so that \nsomeone will hopefully review your changes. ",
            "date": "2004-10-23T02:00:22.000+0000",
            "id": 2
        },
        {
            "author": "Wolf Siberski",
            "body": "Created an attachment (id=13413)\nPatch to MultiSearcher.java to correct idf calculation\n",
            "date": "2004-11-12T17:39:11.000+0000",
            "id": 3
        },
        {
            "author": "Wolf Siberski",
            "body": "Here is another patch to correct the idf calculation. This patch currently is\nkind of proof of concept (fixes Daniel Nabers test case), but not ready for\ncommitment, as it breaks ParallelMultiSearcher.java and several test cases. \n\nInstead of Chucks Williams patch, this one relies on a specialized Similarity\nobject which is passed to the searchers. This causes less changes (only\nMultiSearcher is affected), and IMHO fits better into Lucene's design, because\nSimilarity is responsible for idf calculation anyway, but the Searchers aren't.\n\nProblems:\n- The Similarity object can't be passed to RemoteSearchables, so the patch works\nonly for Searchers.\n- MultiSearcher.search() methods aren't thread-safe anymore. The only way to\nprovide the Searches with the new Similarity object is to use setSimilarity().\nThis causes *all* searches to use it, not only the search which is currently\nrunning.\n\nA better solution would be to add the Similarity object to the Query. While ther\ne is already a similarity attribute in the Query, there is no Method to set it,\nand also interaction with subqueries is unclear. Such a change would therefore\nrequire a major redesign of similarity handling. If we make Similarity\nserializable, then we could pass the object to RemoteSearchers too, as part of\nthe query. If I find time, I'll submit a complete patch in the future.\n",
            "date": "2004-11-12T17:55:04.000+0000",
            "id": 4
        },
        {
            "author": "Wolf Siberski",
            "body": "Created an attachment (id=13464)\nComplete patch to allow specification the Similarity on a query-by-query case\n\nThis is a followup on my patch/comment from 2004-11-12. The patch attached now\nis complete, i.e. everything compiles and no test case is broken by it.\nThe main idea is that a setSimilarity() method and a similarity attributed is\nadded to Query. If the similarity is not set, the query uses the Searcher's\nsimilarity as before. However, if one sets the Similarity on the query, this\none takes precedence.\nTo solve the MultiSearcher issue, I have provided two different Similarities:\n- MultiSimilarity delegates the docFreq() and maxDoc() calls to the\nMultiSearcher, thus retrieving the sum over all registered searchers.\nThis Similarity always 'gets it right', but obviously doesn't work with\nRemoteSearchables.\n- DfMapSimilarity analyses a query and caches all necessary docFreq values.\nThis Similarity is Serializable and therefore works with RemoteSearchables,\ntoo. However, it is not able to handle queries where the term set is not known\nbeforehand, e.g. wildcard queries.\n\nBoth problems mentioned in my previous comment (thread-safety and remote\nsearcher compatibility) are solved by this patch. All test cases work\nunchanged with the exception of one test case which had been tweaked\npreviously due to the incorrect MultiSearcher and now works as expected\n(TestSort.testNormalizedScores()).\n\nProblems:\n- DfMapSimilarity.collectDfs() contains a lot of ugly casts to Query\nsubclasses.\n  This could be avoided by adding another abstract method to Query, but it is\n  unclear if this is really the better solution.\n- In this patch the choice for DfMapSimilarity is hard-coded into\nMultiSearcher. This should be made configurable.\n",
            "date": "2004-11-15T21:24:32.000+0000",
            "id": 5
        },
        {
            "author": "Daniel Naber",
            "body": "*** Bug 32053 has been marked as a duplicate of this bug. ***",
            "date": "2005-01-05T07:49:23.000+0000",
            "id": 6
        },
        {
            "author": "Wolf Siberski",
            "body": "Created an attachment (id=14242)\nNew patch based on the discussion on lucene-dev (intermediate version)\n\nAccording to my understanding of our dev-lucene discussion Multisearcher should\nevaluate queries in the following way:\n1. rewrite queries using the Multisearch Similarity\n2. extract necessary terms\n3. collect idfs for these terms from the Searchables\n4. adjust query boosts according to collected idfs\n5. distribute re-written and re-boosted query to Searchables\n6. merge results\n\nThis patch implements all steps except 4, where it uses a modified Similarity\nclass instead. Thus it is fully functional, but not yet ready for commit.",
            "date": "2005-02-10T19:33:34.000+0000",
            "id": 7
        },
        {
            "author": "Wolf Siberski",
            "body": "Created an attachment (id=14312)\nNew patch based on the discussion on lucene-dev (complete)\n\nThis is a complete version, from my point of view ready for prime time.\n\nNow a query can be 'frozen'. A frozen query always returns the most\nrecently created Weight when calling Query.weight().\n\nMultiSearcher query processing is now done in the following steps:\n   1. rewrite query\n   2. extract necessary terms\n   3. collect dfs for these terms from the Searchables\n   4. create query weights using aggregate dfs and *freeze query*.\n   5. distribute weighted and frozen query to Searchables\n   6. merge results\n",
            "date": "2005-02-18T20:33:09.000+0000",
            "id": 8
        },
        {
            "author": "cutting@apache.org",
            "body": "This looks good.  Thanks!\n\nA few comments:\n\nOrignally there was no Weight in Lucene, only Query and Scorer.  Weight was\nadded in order to make it so that searching did not modify a Query, so that a\nQuery instance could be reused.  Searcher-dependent state of the query is meant\nto reside in the Weight.  IndexReader dependent state resides in the Scorer. \nYour \"freezing\" a query violates this.  Can't we create the weight once in\nSearcher.search?\n\nCachedDfSource does not need to be public does it?\n\nWe need to think about back-compatibliity.  Folks have implementations of Query,\nWeight, Similarity and Scorer.  So, when a public API changes we need to\ndeprecate, not remove, old methods, and try hard to make the old version still\nwork.  So, for example, we need to figure out how to handle the case where folks\nhave implemented the old Similarity.idf() methods.\n\nYou no longer call Query.getSimilarity(Searcher).  That method permits queries\nto override the Searcher's Similarity implementation.  Is there a reason you do\nthis?  We should be computing DFs once for the whole query tree, but it should\nstill be possible to compute, e.g., IDFs independently per node, no?\n\nI also wonder if, instead of adding DocFreqSource we could instead still use the\nSearcher.  MultiSearcher could keep an LRU cache of total doc freqs, implemented\nwith LinkedHashMap, for the last few thousand search terms.  That would be a far\nless invasive change, and hence less likely to break folks.  Or am I missing\nsomething?\n\nSorry if I seem picky, but this is core stuff in Lucene and affects a lot of people.",
            "date": "2005-02-22T02:49:14.000+0000",
            "id": 9
        },
        {
            "author": "Wolf Siberski",
            "body": "Created an attachment (id=14344)\nNext version - sends weights instead of queries\n\nThanks for the valuable feedback which has resulted in this new version. Now\nthe query freezing approach is avoided by sending weights to the searchables\ninstead of queries. Thus queries are still resusable, but the Searchable\ninterface had to be extended. Also, previous API and behavior modifications\nhave been reverted as far as possible.",
            "date": "2005-02-23T00:33:00.000+0000",
            "id": 10
        },
        {
            "author": "cutting@apache.org",
            "body": "This looks great to me!\n\n+1\n\nThanks again for patiently working through this rather extensive change.",
            "date": "2005-02-23T03:17:20.000+0000",
            "id": 11
        },
        {
            "author": "Otis Gospodnetic",
            "body": "I applied this patch (2005-02-22 version) locally, but it doesn't compile as is.\n It looks like I need to add \"throws IOException\" to\nBooleanQuery.BooleanWeight2.createWeight(Searcher) methods, and also to\nMultiPhraseQuery.createWeight(Searcher) method.\n\nIt looks like I also need to modify TermQuery.TermWeight and add a searcher\ndeclaration (private Searcher searcher;), plus the searcher assignment to the\nconstructor (this.searcher = searcher).\n\nAfter these 2-3 changes Lucene compile.  Are my changes OK?\n\nUnfortunately, unit tests fail in a few places, and it looks like all failures\nhave to do with RemoteSearchable.  Re-reading the comments in this bug entry, it\nlooks like this was a known issue at one point, but Wolf noted the following on\n2004-11-15:\n\n\"Both problems mentioned in my previous comment (thread-safety and remote\nsearcher compatibility) are solved by this patch. All test cases work\nunchanged with the exception of one test case which had been tweaked\npreviously due to the incorrect MultiSearcher and now works as expected\n(TestSort.testNormalizedScores()).\"\n\nThis sounds like tests involving RemoteSearchable should pass now.",
            "date": "2005-04-05T11:31:57.000+0000",
            "id": 12
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Changing MultiSearcher to implement Serializable makes all unit tests pass again.\n\nI'll wait a bit more before committing this in order to give people time to comment.",
            "date": "2005-04-05T11:50:20.000+0000",
            "id": 13
        },
        {
            "author": "Paul Elschot",
            "body": "(In reply to comment #13) \n> I applied this patch (2005-02-22 version) locally, but it doesn't compile as \nis. \n>  It looks like I need to add \"throws IOException\" to \n> BooleanQuery.BooleanWeight2.createWeight(Searcher) methods, and also to \n> MultiPhraseQuery.createWeight(Searcher) method. \n \nThat should be no problem for BooleanWeight2.createWeight(Searcher). \n \n> It looks like I also need to modify TermQuery.TermWeight and add a searcher \n> declaration (private Searcher searcher;), plus the searcher assignment to the \n> constructor (this.searcher = searcher). \n>  \n> After these 2-3 changes Lucene compile.  Are my changes OK? \n \nI think so. \n \nRegards, \nPaul Elschot \n \n ",
            "date": "2005-04-06T01:03:34.000+0000",
            "id": 14
        },
        {
            "author": "Chuck Williams",
            "body": "I made these comments last night, but somehow they aren't here.  Sorry if a\nduplicate pops up in the wrong place somewhere...\n\nI don't think all of the changes are correct and feel we need Wolf to comment on\nthis as his message states that he ran the unit tests successfully on his code\nas submitted.  Specifically, it looks to me like:\n  1.  The additions of throws IOException to Weights are correct, and due to new\nWeights added in parallel to Wolf's work.\n  2.  I do not believe adding the searcher field back to TermWeight is correct.\n Wolf explicitly pulled this field out and replaced all references to it with\nreferences to similarity or idf.  What caused the field to be added back?\n  3.  Making MultiSearcher implement Serializable seems strange -- I don't\nunderstand why in the protocol this would be requried.  It does not seem right.\n\nChuck",
            "date": "2005-04-06T01:16:45.000+0000",
            "id": 15
        },
        {
            "author": "Chuck Williams",
            "body": "Here is what I think happened and, if so, the correct fix:\n  1.  MultiPhraseQuery and the new BooleanQuery were both added in parallel to\nWolf's work.  We now have a merge conflict.\n  2.  The addition of the throws IOException to these two classes is now\nrequired for Weights, and so the change is correct.\n  3.  The new protocol for Weight's is to NOT have a searcher field.  Instead,\nthey should keep a Similarity field.  Just like the other Weight's that Wolf's\npatch addresses, these two classes only use the searcher field to access the\nSimilarity and/or the idf.  MultiPhraseQuery, which needs the idf, already has\nan idf field.  So, identical to Wolf's other changes it is straightforward to\nmodify these two classes to eliminate the searcher field.\n  4.  Eliminating the searcher field will elimninate the need for MultiSearcher\nto be Serializable, therefore retracting that change.\n\nI think that's right, and that the best fix is too conform the new Weights to\nthe new protocol for MultiSearcher compatibility.  I've also sent a message\ndirectly to Wolf asking him to review this.\n\nChuck\n",
            "date": "2005-04-06T03:34:13.000+0000",
            "id": 16
        },
        {
            "author": "Chuck Williams",
            "body": "One more note on this.  I think conforming to the new Weight protocol, i.e.\neliminating the searcher field from BooleanWeight, BooleanWeight2, and\nMultiPhraseWeight, is quite important.  This is because the Weight is now sent\nto RemoteSearchables instead of the Query.  If Weights have a searcher field,\nthen this could be quite expensive.\n\nChuck\n",
            "date": "2005-04-06T04:09:02.000+0000",
            "id": 17
        },
        {
            "author": "Paul Elschot",
            "body": "(In reply to comment #17) \n> Here is what I think happened and, if so, the correct fix: \n>   1.  MultiPhraseQuery and the new BooleanQuery were both added in parallel \nto \n> Wolf's work.  We now have a merge conflict. \n>   2.  The addition of the throws IOException to these two classes is now \n> required for Weights, and so the change is correct. \n \nIt could well be that there is a conflict with the new BooleanQuery and \nBooleanScorer. Given the backward compatibility goal of this new code, I'd be \nhappy to resolve that possible conflict. \n \nOver the last months, I have kept all the changes to BooleanQuery/BooleanScorer \nin a local working copy, and I had only one or two conflicts. These were \nvery easy to resolve. Bugzilla works well in this respect: all changes have \nsome comments associated with them, and, from what I have read so far, \nthere are no conflicting intentions for the functionality of this code. \nSo, please go ahead as you see fit for the MultiSearcher. I think you  \ncan safely ignore evt. conflicts with new code for BooleanQuery/BooleanScorer. \n \nRegards, \nPaul Elschot ",
            "date": "2005-04-06T06:49:00.000+0000",
            "id": 18
        },
        {
            "author": "Wolf Siberski",
            "body": "Sorry for the late reply; I'm currently traveling and had no Internet access.\nChucks analysis is completely correct. Serializing a (Multi-)Searcher doesn't\nmake sense, instead the Similarity has to be passed with the weight.\n\nWhat I don't understand is why the patch failed. I checked the diff file again,\nand the necessary changes appear to be in it. For example, line 89 of the diff\ncontains the addition of 'throws IOException' to BooleanWeight2.createWeight(),\nand the corresponding change for MultiPhraseQueryWeight is on line 346. The\nchanges required for TermWeight are at starting at line 1187. Could you please\ncheck if everything went ok when applying the patch, by comparing manually to\nthe diff file when errors occur somewhere?",
            "date": "2005-04-07T01:41:26.000+0000",
            "id": 19
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Created an attachment (id=14767)\nlocal diffs that I'll apply\n\nThis is what the final diff is like.  I'll apply it shortly.",
            "date": "2005-04-20T12:13:46.000+0000",
            "id": 20
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Committed, unit tests pass.",
            "date": "2005-04-20T13:01:45.000+0000",
            "id": 21
        },
        {
            "author": "Wolf Siberski",
            "body": "Created an attachment (id=14784)\nAdditional patch for deprecation issue\n\nThis patch removes all references to deprecated methods in Searchable,\nand fixes some other minor issues.",
            "date": "2005-04-22T17:08:05.000+0000",
            "id": 22
        },
        {
            "author": "cutting@apache.org",
            "body": "I am now confused by the changes in Searcher.java.  Why is sometimes\nquery.weight(Searcher) called and other times query.createWeight()?  The latter\nis meant only to only construct a Weight, and the former to construct and\ninitialize it.  Shouldn't it always be initialized?\n\nAlso, it was difficult to apply your patch.  It uses CRLF instead of LF, which\nconfuses patch on Linux.",
            "date": "2005-04-26T05:06:47.000+0000",
            "id": 23
        },
        {
            "author": "Wolf Siberski",
            "body": "Created an attachment (id=14841)\nAdditional patch for deprecation issue - corrected\n\nThis was just an oversight. I've replaced the remaining calls to query.weight()\nin Searcher with Searcher.createWeight() and corrected that method so that it\ncalls query.weight() now.",
            "date": "2005-04-26T16:34:50.000+0000",
            "id": 24
        },
        {
            "author": "cutting@apache.org",
            "body": "I have applied the deprecation patch.\n\nThe solution to my patch difficulties was to use 'patch -l -F 4'.  This gets\naround the end-of-line issues.\n\nThanks again, Wolf!\n",
            "date": "2005-04-27T04:30:32.000+0000",
            "id": 25
        },
        {
            "author": "Chuck Williams",
            "body": "Created an attachment (id=14846)\n[PATCH] Fix to Query.combine() method and all specializations\n\nThis fixes the bugs in Query.combine() that were uncovered by the failing test\nin the Highlighter.  Only Query.combine() remains -- all overrides in\nBooleanQuery, RangeQuery, MultiTermQuery and PrefixQuery are deleted.  I\nbelieve this fix is correct, robust realtive to possible user Query\nimplementations, and generates optimal queries for at least the cases that are\nbuilt-in to Lucene (query rewriting of MultTermQuery's and RangeQuery's).  This\nis more robust relative to possible user Query implementations and covers more\noptimizations cases than the version I sent via email last night.  With this\npatch, all Lucene and Highlighter tests pass (with the exception of the buggy\nTestSort.testNormalizedScores() which should be fixed by Wolf's patch).\n",
            "date": "2005-04-27T05:51:02.000+0000",
            "id": 26
        },
        {
            "author": "Wolf Siberski",
            "body": "Created an attachment (id=14854)\nSlightly extended Fix to Query.combine()\n\nThis is an extension/modification of Chucks patch.\nBesides his changes, it contains more test cases (in TestMultiSearcherRanking)\nand minor additional modifications to make these tests work:\n- if the resulting query consists of only one clause, return that clause\n  directly instead of wrapping it into a BooleanQuery.\n- BooleanQuery.equals doesn't take clause order into account anymore \nI also have rewritten the loop logic of Query.combine to use a flag instead \nof a labeled break, but this is more a matter of taste.",
            "date": "2005-04-27T19:03:13.000+0000",
            "id": 27
        },
        {
            "author": "Chuck Williams",
            "body": "Wolf's revisions to my changes to Query.combine() look fine.  The single-query\noptimization is good -- my oversight to have not included it originally.  I\ndon't believe either of the other two changes is necessary, but they are correct:\n  1.  Using a flag instead of the labelled loop is a matter of style as Wolf\nsays, and it's a little less efficent (the biggest effect could be remedied by\none more if (splittable) to avoid unnecessarily copying the clauses of a\nBooleanQuery where coord is not disabled).\n  2.  Changing BooleanQuery equality to be independent of clause order is\nsemantically correct, although again it is a little less efficient.  It's only\npurpose is to stop a false-negative in the new tests.\n\nRegarding additional test cases, it would be helpful to add the cases I was\nconcerned about, which are situations where a query can rewrite into different\nkinds of fundamental queries depending on the reader.  I believe the only case\nwhere this occurs with the built-in queries is with MultiTermQuery's and\nRangeQuery's (where the rewrite depends on how many query clauses are generated\nby each reader), and we have covered those cases.  The coord testing in\nQuery.combine() is designed to handle the case where some query rewrites into a\ndifferent kind of BooleanQuery (e.g., an AND), in some readers and not others. \nNothing tests this at present.  A single-term BooleanQuery OR could rewrite into\na BooleanQuery AND, but this would be independent of reader.\n\nMany additional optimizations could be added.  It seems redundant to have\noptimizations here and in the rewrite mechanism.  Since we are down to just\nQuery.combine(), only called from one place, I think a better fix is to change\nMultiSearcher to pass the reader as well.  Then Query.combine() could construct\nthe straightforward BooleanQuery and rewrite it.  All the optimizations would\nthen go into a single place, the rewrite methods.  Wolf, what do you think of\nthat approach?\n",
            "date": "2005-04-28T00:15:53.000+0000",
            "id": 28
        },
        {
            "author": "Wolf Siberski",
            "body": "Created an attachment (id=15481)\nUpdated fix to Query.combine()\n\nThis is a slightly updated version of my previous patch, taking Chucks comments\ninto account and based on the current HEAD.",
            "date": "2005-06-21T16:44:30.000+0000",
            "id": 29
        },
        {
            "author": "Wolf Siberski",
            "body": "*** Bug 35241 has been marked as a duplicate of this bug. ***",
            "date": "2005-06-21T16:46:12.000+0000",
            "id": 30
        },
        {
            "author": "Daniel Naber",
            "body": "There might be one corner case that your change in equals doesn't get right \n(not tested): a query \"a b a\" (i.e. one clause occuring twice -- doesn't make \nmuch sense, but has an influence on the result order) would equal \"a b b\", \nwouldn't it? Is that a problem? \n ",
            "date": "2005-06-22T06:08:33.000+0000",
            "id": 31
        },
        {
            "author": "Wolf Siberski",
            "body": "I've started a separate thread on BooleanQuery semantics on the dev mailing\nlist. You could still apply the patch and omit the change to\nBooleanQuery.equals(). This just leads to warning outputs in\nTestMultiSearcherRanking.checkQuery(), and if you want to avoid these, simply\ndelete the last 10 lines of TestMultiSearcherRanking.checkQuery(). They contain\nan additional, not really necessary test.",
            "date": "2005-06-22T18:12:00.000+0000",
            "id": 32
        },
        {
            "author": "Daniel Naber",
            "body": "Thanks, I've committed your patch, leaving out the change to equals() and not \nremoving mergeBooleanQueries() as that is a public method which someone might \nbe using. Also, could you please check if the test case is correct now? I \ncouldn't apply that part of your patch cleanly and something might have been \nbroken. \n ",
            "date": "2005-06-24T05:57:02.000+0000",
            "id": 33
        },
        {
            "author": "Wolf Siberski",
            "body": "Thanks for applying the patch. Everything is fine from my point of view, except\none minor issue: You are right that Query.mergeBooleanQueries() can't just be\nremoved, as it is public. However, I doubt if it is still useful. Could we mark\nit as deprecated, and suggest a call to super.combine() as replacement?",
            "date": "2005-06-24T16:37:45.000+0000",
            "id": 34
        },
        {
            "author": "Daniel Naber",
            "body": "Should combine() maybe be static? Then deprecating mergeBooleanQueries() seems \nto be the obvious way to go. ",
            "date": "2005-06-25T07:23:34.000+0000",
            "id": 35
        },
        {
            "author": "Daniel Naber",
            "body": "Okay, I see that there are errors in the test cases if one makes \nQuery.combine() static. But does it have to be public? ",
            "date": "2005-07-05T03:10:49.000+0000",
            "id": 36
        },
        {
            "author": "Wolf Siberski",
            "body": "Currently, Query.combine() is only called by MultiSearcher and a Highlighter\ntest case. If I understand it correctly, the intent of this method was to give\nQuery subclasses a hook to modify the combination algorithm. This hook is not\nused by Query subclasses which are part of the Lucene distribution, and I would\nbe very astonished if someone used it outside of Lucene. Such an implementation\nwould break now anyway, because BooleanQueries are only handled correctly in the\nnew Query.combine[] method, but not in mergeBooleanQueries() (which\nreimplementations are supposed to call as helper method).\n\nIMHO the cleanest solution would be to remove combine() and\nmergeBooleanQueries() from Query and move the query combination logic to\nMultiSearcher. Of course, that would be an incompatible API change, and we can't\nbe 100% sure that no one needs the combine() hook. On the other hand, we now\nhave useless code in mergeBooleanQueries() and code which is only used by\nMultiSearcher in combine(), and that also isn't a desirable situation.",
            "date": "2005-07-05T18:19:43.000+0000",
            "id": 37
        }
    ],
    "component": "core/search",
    "description": "When MultiSearcher invokes its subsearchers, it is the subsearchers' docFreq()\nthat is accessed by Similarity.docFreq().  This causes idf's to be computed\nlocal to each index rather than globally, which causes ranking across multiple\nindices to not be equivalent to ranking across the entire global collection.\n\nThe attached files (if I can figure out how to attach them) provide a potential\npartial solution for this.  They properly fix a simple test case, RankingTest,\nthat was provided by Daniel Naber.\n\nThe changes are:\n  1.  Searcher:  Add topmostSearcher() field with getter and setter to record\nthe outermost Searcher.  Default to this.\n  2.  MultiSearcher:  Pass down the topmostSearcher when creating the subsearchers.\n  3.  IndexSearcher:  Call Query.weight() everywhere with the topmostSearcher\ninstead of this.\n  4.  Query:  Provide a default implementation of Query.combine() so that\nMultiSearcher works with all queries.\n\nProblems or possible problems I see:\n  1.  This does not address the same issue with RemoteSearchable. \nRemoteSearchable is not a Searcher, nor can it be due to lack of multiple\ninheritance in Java, but Query.weight() requires a Searcher.  Perhaps\nQuery.weight() should be changed to take a Searchable, but this requires\nchanging many places and I suspect would break apps.\n  2.  There may be other places that topmostSearcher should be used instead of this.\n  3.  The default implementation for Query.combine() is a guess on my part - it\nworks for TermQuery.  It's fragile in that the default implementation will hide\nbugs caused by queries that inadvertently omit a more precise Query.combine()\nmethod.\n  4.  The prior comment on Query.combine() indicates that whoever wrote it was\nfully aware of this problem and so probably had another usage in mind, so the\nwhole issue may just be Daniel's usage in the test case.  It's not apparent to\nme, so I probably don't understand something.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-295",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "[PATCH] MultiSearcher problems with Similarity.docFreq()",
    "systemSpecification": true,
    "version": "1.4"
}