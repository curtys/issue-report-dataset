{
    "comments": [
        {
            "author": "Hoss Man",
            "body": "This sounds like a very similar issue to some past discussion about the path specified when opening a directory, and what to do if it doesn't exist (ie: create it, or throw an error) ... in general i think it would be unadvisable to assume that if java.io.tmpdir refers to a bogus directory that we should use the index directory, because that could lead to situations were typo result in errors silently being ignored to the possible extend of index corruption.\n\n(consider for a moment: two lucene based apps running in two seperate JVM instances on the same machine, attempting to use hte same index directory; one with a properly set java.io.tmpdir and one without -- they will most likely crash hard because they would wilently use completley differnet directories for managing locks).\n\nAs with the discussion about index directories that don't exist, applications that *want* to silenetly assume that a bogus java.io.tmpdir property should result in using the index directory for lock files can get that behavior if they want (by testing java.io.tmpdir themselves, and explicitly constructing a SimpleFSLockFactory() on the directory they want to use) but Lucene should not make any assumptions about what the client application wants in the case of garbage input.",
            "date": "2006-09-20T21:19:43.000+0000",
            "id": 0
        },
        {
            "author": "Ryan Holliday",
            "body": "I'm not sure if \"the user specified the wrong directory\" is necessarily the correct situation here.  Unless a user specifically sets the org.apache.lucene.lockDir property, they aren't really choosing the lock directory location - Lucene uses the java.io.tmpdir property as a default, without any input from the user.  A user who runs into this problem will see only something like \"Cannot create directory: /temp\" in their logs, and then has to go through the source code to figure out why anything is trying to create that directory.\n\nThe code already defaults to using the index directory for lock files (which the user DID specify) if the org.apache.lucene.lockDir property and the java.io.tmpdir properties are not set - it doesn't seem like much of a stretch to just modify the code to also use the index directory if at least the java.io.tmpdir property is invalid.",
            "date": "2006-09-20T22:43:09.000+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Newer versions of Lucene (since 2.1) now store the lock file in the index directory by default.",
            "date": "2008-09-22T18:02:54.605+0000",
            "id": 2
        }
    ],
    "component": "core/store",
    "description": "A user of the JAMWiki project (http://jamwiki.org/) reported an error with the following stack trace:\n\nSEVERE: Unable to create search instance /usr/share/tomcat5/webapps/jamwiki-0.3.4-beta7/test/base/search/indexen\njava.io.IOException: Cannot create directory: /temp\n        at org.apache.lucene.store.FSDirectory.init(FSDirectory.java:171)\n        at org.apache.lucene.store.FSDirectory.getDirectory(FSDirectory.java:141)\n        at org.apache.lucene.store.FSDirectory.getDirectory(FSDirectory.java:117)\n        at org.jamwiki.search.LuceneSearchEngine.getSearchIndexPath(LuceneSearchEngine.java:318)\n\nThe culprit is that the java.io.tmpdir property was incorrectly specified on the user's system.  Lucene could easily handle this issue by modifying the FSDirectory.init() method.  Currently the code uses the index directory if java.io.tmpdir and org.apache.lucene.lockDir are unspecified, but it could use that directory if those values are unspecified OR if they are invalid.  Doing so would make Lucene a bit more robust without breaking any existing installations.\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-674",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Error in FSDirectory if java.io.tmpdir incorrectly specified",
    "systemSpecification": true,
    "version": "2.0.0"
}