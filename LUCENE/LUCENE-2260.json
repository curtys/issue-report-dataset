{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "Attached patch. I will commit this in a day and also merge to 2.9 and 3.0 (without VirtualMethod) as this is a resource leak. This problem is similar to LUCENE-2182.",
            "date": "2010-02-11T13:31:05.678+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Improved patch, now all class references are weak. The assumption on the WeakReference inside addAttributeImpl is always != null is true because the code has a strong reference on the implementing class.",
            "date": "2010-02-11T14:23:09.910+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Patch for 2.9 branch (without Java 5 generics)",
            "date": "2010-02-11T15:04:37.669+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "I'll commit this soon!",
            "date": "2010-02-12T11:14:32.747+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 909360\nCommitted 2.9 revision: 909361\nCommitted 3.0 revision: 909365",
            "date": "2010-02-12T11:29:51.502+0000",
            "id": 4
        }
    ],
    "component": "",
    "description": "When working on the dynmaic proxy classes using cglib/javaassist i recognized a problem in the caching code inside AttributeSource:\n- AttributeSource has a static (!) cache map that holds implementation classes for attributes to be faster on creating new attributes (reflection cost)\n- AttributeSource has a static (!) cache map that holds a list of all interfaces implemented by a specific AttributeImpl\n\nAlso:\n- VirtualMethod in 3.1 hold a map of implementation distances keyed by subclasses of the deprecated API\n\nBoth have the problem that this strong reference is inside Lucene's classloader and so persists as long as lucene lives. The classes referenced can never be unloaded therefore, which would be fine if all live in the same classloader. As soon as the Attribute or implementation class or the subclass of the deprecated API are loaded by a different classloder (e.g. Lucene lives in bootclasspath of tomcat, but lucene-consumer with custom attributes lives in a webapp), they can never be unloaded, because a reference exists.\n\nLibs like CGLIB or JavaAssist or JDK's reflect.Proxy have a similar cache for generated class files. They also manage this by a WeakHashMap. The cache will always work perfect and no class will be evicted without reason, as classes are only unloaded when the classloader goes and this will only happen on request (e.g. by Tomcat).",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2260",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "AttributeSource holds strong reference to class instances and prevents unloading e.g. in Solr if webapplication reload and custom attributes in separate classloaders are used (e.g. in the Solr plugins classloader)",
    "systemSpecification": true,
    "version": "2.9.1, 3.0"
}