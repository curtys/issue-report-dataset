{
    "comments": [
        {
            "author": "Karl Wettin",
            "body": "I think you use it the wrong way.\n\nPlease post some code showing what you do.",
            "date": "2006-07-24T19:12:43.000+0000",
            "id": 0
        },
        {
            "author": "Karsten Dello",
            "body": "Here is the code.\nIt is copied from \nhttp://today.java.net/pub/a/today/2005/08/09/didyoumean.html?page=2#generating_spell_index\n\nI am pretty sure this code worked with 1.4.3?\n\n\n\npackage de.kobv.lucene.spellcheck;\n\nimport java.io.File;\nimport java.io.IOException;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.search.spell.Dictionary;\nimport org.apache.lucene.search.spell.LuceneDictionary;\nimport org.apache.lucene.search.spell.SpellChecker;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\n\n\npublic class SpellCheckIndexer {\n\n\tpublic final static String LUCENEFIELD=\"AlleFelder\";\n\n    public static void main(String [] args) {\n    \t\n    \tif (args.length!=2) {\n    \t\tSystem.out.println(\"usage: java de.kobv.lucene.spellcheck.SpellCheckIndexer <sourceIndexDirectory> <spellCheckIndexDirectory>\");\n    \t\treturn;\n    \t}\n    \tString indexDir=args[0];\n    \tString spellcheckpath=args[1];\n    \t\n    \ttry {\n    \t\n    \tSpellCheckIndexer sci= new SpellCheckIndexer();\n    \t\n    \tSystem.out.println(\"creating spell check index at \"+new java.util.Date(System.currentTimeMillis()));\n    \tSystem.out.println(\"indexDir:\"+indexDir+\" spellcheckdir:\"+spellcheckpath);\n    \t\n    \tDirectory d1 = FSDirectory.getDirectory(indexDir,false);\n\n    \t// make sure the directory exists\n    \tFile f= new File(spellcheckpath);\n    \tf.mkdir();\n\n    \tDirectory d2= FSDirectory.getDirectory(spellcheckpath,true);\n\n    \tsci.createSpellIndex(LUCENEFIELD,d1,d2);\n    \t\n    \tSystem.out.println(\"finished at\"+new java.util.Date(System.currentTimeMillis()));\n    \t\n    \t\n    \t\n    \t}\n    \tcatch(Exception e) {e.printStackTrace(System.out);}\n    }\n\n    \n    public void createSpellIndex(String field,\n            Directory originalIndexDirectory,\n            Directory spellIndexDirectory) throws IOException {\n\n    \tSystem.out.println(\"\"+field+\" - \"+originalIndexDirectory+\" - \"+spellIndexDirectory);\n    \t\n        IndexReader indexReader = null;\n        try {\n            indexReader = IndexReader.open(originalIndexDirectory);\n            System.out.println(\"Index mit \"+indexReader.numDocs()+\" docs in \"+originalIndexDirectory+\" geoeffnet.\");\n        \n            Dictionary dictionary = new LuceneDictionary(indexReader, field);\n            \n            SpellChecker spellChecker = new SpellChecker(spellIndexDirectory);\n            spellChecker.indexDictionary(dictionary);\n            \n        } \n        catch (Exception e) {\n        \te.printStackTrace();\n        }\n        \n        finally {\n            if (indexReader != null) {\n                indexReader.close();\n            }\n        }\n    }\n\n\n}\n",
            "date": "2006-07-24T19:36:44.000+0000",
            "id": 1
        },
        {
            "author": "Karl Wettin",
            "body": "Had no problems running the code on 2.0.0, but on the SVN version. Didn't look that close to why. I have always passed an existing index to the SpellChecker, and would say that the implemention you pasted is corrupt, not the API.\n\n    Directory d2= FSDirectory.getDirectory(spellcheckpath,true); \n+    new IndexWriter(d2, null, true).close();\n\nAnd when the index has been created you have to:\n\n    spellChecker.setSpellIndex(d2);\n\nTo ensure a new Searcher is created.\n\nOr use this patch that handle the searcher lazy. And then there is no need for you to make any changes to your code.",
            "date": "2006-07-24T23:12:46.000+0000",
            "id": 2
        },
        {
            "author": "Otis Gospodnetic",
            "body": "I put the new IndexSearcher call to the setSpellIndex(Dictionary) method, which is called from the SpellChecker constructor.  I did that the other day, so maybe I broke something, although everything worked for me and I didn't get any NPEs.\n\nI use code that looks like this:\n\n    public void createDictionary(String field, Directory sourceIndex, Directory spellIndex) throws IOException {\n        IndexReader reader = null;\n        try {\n            reader = IndexReader.open(sourceIndex);\n            Dictionary dictionary = new LuceneDictionary(reader, field);\n            SpellChecker spellChecker = new SpellChecker(spellIndex);\n            spellChecker.indexDictionary(dictionary);\n        } finally {\n            if (reader != null) {\n                reader.close();\n            }\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        if (args.length < 3) {\n            System.err.println(\"Usage: java \" + SpellerIndexer.class\n                    + \" <source field> <source index> <spell index>\");\n            System.exit(1);\n        }\n\n        System.out.print(\"\\nCreating spell checker index in \" + args[2] + \" ... \");\n        SpellerIndexer indexer = new SpellerIndexer();\n        Directory sourceIndex = FSDirectory.getDirectory(args[1], false);\n        Directory spellIndex = FSDirectory.getDirectory(args[2], IndexReader.indexExists(args[2]));\n        indexer.createDictionary(args[0], sourceIndex, spellIndex);\n        System.out.println(\"done\\n\");\n    }\n\nKarsten:\nIf you still think there is a bug in the SVN version, please comment here.\nI can apply the lazy searcher patch from Karl (see Karl, you don't always get ignored! :)), but I'm not sure that it will make a difference.  If you apply it and it makes a difference for you, please follow up here.\n",
            "date": "2006-07-26T20:41:40.000+0000",
            "id": 3
        },
        {
            "author": "Miles Barr",
            "body": "I've checked svn and it's not an issue in trunk, but it's definitely a bug in the version that's distributed with Lucene 1.9.1\n\nThe reader is only opened in the 'exist' method, but at the end of the 'indexDictionary' method it tries to close the reader, then sets it to null. I think the intent of the code is to make sure we don't have an old reader after we update the dictionary, but if we're creating the dictionary for the first time we get a NPE.\n\nThe simple fix is to check if reader is null before trying to close it.",
            "date": "2006-08-25T10:03:36.000+0000",
            "id": 4
        },
        {
            "author": "Karsten Dello",
            "body": "Sorry for not responding for such a long time, I have been out of the office.\n\nOtis:\nThe current SVN version (as of today)  works fine for me, though the spellIndex has to be created manually before using the SpellChecker constructor. As Karl pointed out a simple \nnew IndexWriter(d2, null, true).close();\ndoes the job.\n\nMiles:\nI think you are right, had the same problem. I worked around that problem by calling exist(\"foo\") before indexDictionary , but that is not a bugfix  (which is, as you said, that the method should check if reader is null)\n",
            "date": "2006-09-04T14:13:34.000+0000",
            "id": 5
        },
        {
            "author": "Otis Gospodnetic",
            "body": "If I understood all the comments correctly, there is no bug in HEAD.  If I misunderstood, feel free to re-open.",
            "date": "2006-09-18T21:46:30.000+0000",
            "id": 6
        },
        {
            "author": "f",
            "body": "i still have the problem with null pointer exceptions on creating a spell index ... first i thought its a problem with the php jni bridge i use. But after i created a java example it didnt work either. For preventing parametre missspellings or something like this i hardcoded the values in the example.\n\nimport java.io.IOException;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.search.spell.Dictionary;\nimport org.apache.lucene.search.spell.LuceneDictionary;\nimport org.apache.lucene.search.spell.SpellChecker;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\n\npublic class DidYouMeanIndexer {\n\n    private static final String DEFAULT_FIELD = \"txt_name\";\n    public void createSpellIndex() throws IOException\n    {\n        IndexReader indexReader = null;\n        try\n        {   boolean create = false;\n            Directory orgindex = FSDirectory.getDirectory(\"/var/www/localhost/htdocs/lib/suche/data/index/\", create);\n            Directory spellindex = FSDirectory.getDirectory(\"/var/www/localhost/htdocs/lib/suche/data/didyoumean/\", create);\n            indexReader = IndexReader.open(orgindex);\n            new IndexWriter(orgindex, null, true).close();\n            Dictionary dictionary = new LuceneDictionary(indexReader, \"txt_name\");\n            SpellChecker spellChecker = new SpellChecker(spellindex);\n            spellChecker.indexDictionary(dictionary);\n        }\n        finally\n        {   if (indexReader != null)\n            {   indexReader.close();\n            }\n        }\n    }\n\n    public static void main(String[] args)\n    {\n        DidYouMeanIndexer obj = new DidYouMeanIndexer();\n        try\n        {     obj.createSpellIndex();\n        }\n        catch(IOException exception)\n        {\n        }\n    }\n}\n\nThe next step i did was debugging the behaviour of the worditerator which i got from the LuceneDictionary. But it didnt get a word. The index is well set up with one document in it with two fields. The txt_name field is tokened indexed and has a termvector. The solution of Karl Wettin didnt the job for me ;)                                                                                   \n\nThis problem exists on my system with lucene 1.9.1 and with 2.0.1-dev\n\nI hope you have some ideas ;)\nscnr",
            "date": "2006-12-27T13:10:00.000+0000",
            "id": 7
        },
        {
            "author": "f",
            "body": "i solved the problem too with commenting the reader.close(). And the second problem was that in the LuceneDictionary the comparison between tfield and field didnt match. by rewriting that part all seems to do its job.\n\n",
            "date": "2006-12-29T11:16:20.000+0000",
            "id": 8
        }
    ],
    "component": "core/other",
    "description": "Two different errors in 1.9.1/2.0.0 and current svn version.\n\n1.9.1/2.0.0:\nat the end of indexDictionary (Dictionary dict) \nthe IndexReader-instance reader is closed.\nThis causes a NullpointerException because reader has not been initialized before (neither in that method nor in the constructor).\nUncommenting this line (reader.close()) seems to resolve that issue.\n\ncurrent svn:\nthe constructor tries to create an IndexSearcher-instance for the specified path;\nas there is no index in that path - it is not created yet -  an exception is thrown.\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-632",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "The creation of a spell index from a LuceneDictionary via SpellChecker.indexDictionary (Dictionary dict) fails starting with 1.9.1 (up to current svn version)",
    "systemSpecification": true,
    "version": "1.9, 2.0.0"
}