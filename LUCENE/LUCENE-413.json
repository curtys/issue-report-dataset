{
    "comments": [
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=15737)\nPatch for BooleanScorer2\n\nDo not increase nrMatchers more than once for each scored doc.",
            "date": "2005-07-22T04:19:48.000+0000",
            "id": 0
        },
        {
            "author": "Erik Hatcher",
            "body": "Committed, thanks.  All test cases still pass.",
            "date": "2005-07-22T10:51:39.000+0000",
            "id": 1
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=15759)\nTest version of BooleanScorer2\n\nSince the last patch did not fix the reported bug,\nthis test version of BooleanScorer2.java can be useful\nin getting more information when the array index out of\nbounds exception is thrown.\nIt throws the exception earlier (when the index is incremented)\nand provides more state of the BooleanScorer2, ao. the document number.\n\nThis version includes the previous patch, and it applies\nthe test of the previous patch also in\nthe BooleanScorer2.score() method.\n\nRegards,\nPaul Elschot",
            "date": "2005-07-25T03:37:15.000+0000",
            "id": 2
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=15787)\nTest patch for DisjunctionSumScorer.java\n\nFrom the discussion on java-dev a possible source\nof this problem is that DisjunctionSumScorer provides a\nnrMatchers that is bigger than its number of scorers.\nThis patches DisjunctionSumScorer to throw an AssertionError\nwith extra state info as soon as that happens.\n\nUnfortunately I still have no idea what the problem is.\n\nErik, could you run your test again with this patch?\n\nRegards,\nPaul Elschot",
            "date": "2005-07-27T05:41:40.000+0000",
            "id": 3
        },
        {
            "author": "Erik Hatcher",
            "body": "I applied the DisjunctionSumScorer patch, and got this output:\n\njava.lang.AssertionError: nrMatchers: 4 bigger than nrScorers: 3\nminimumNrMatchers: 1, currentDoc: 789, currentScore: 0.08528499\ntop: org.apache.lucene.search.spans.SpanScorer@18f51f\nscorerQueue.size(): 3\n\tat org.apache.lucene.search.DisjunctionSumScorer.advanceAfterCurrent\n(DisjunctionSumScorer.java:171)\n\tat org.apache.lucene.search.DisjunctionSumScorer.skipTo(DisjunctionSumScorer.java:224)\n\tat org.apache.lucene.search.BooleanScorer2.skipTo(BooleanScorer2.java:345)\n\tat org.apache.lucene.search.ConjunctionScorer.doNext(ConjunctionScorer.java:56)\n\tat org.apache.lucene.search.ConjunctionScorer.next(ConjunctionScorer.java:51)\n\tat org.apache.lucene.search.BooleanScorer2.score(BooleanScorer2.java:288)",
            "date": "2005-07-27T09:57:16.000+0000",
            "id": 4
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=15800)\nSecond test patch for DisjunctionSumScorer.java\n\nIn case a scorer does not advance its doc number after next()\nreturns true, the originally reported exception can occur.\n\nThis patch throws an AssertionError for the first scorer that\nbehaves that way, and shows the scorer and the document numbers.\n\nScorers should advance their document number after next() returns true.\n\nIf this exception does not happen, the bug is probably in\nDisjunctionSumScorer.java.\n\nErik, could you run your test once more with this patch applied\nagainst the trunk?\n\nRegards,\nPaul Elschot\n",
            "date": "2005-07-28T02:49:42.000+0000",
            "id": 5
        },
        {
            "author": "Erik Hatcher",
            "body": "I don't see a difference in the output:\n\njava.lang.AssertionError: nrMatchers: 4 bigger than nrScorers: 3\nminimumNrMatchers: 1, currentDoc: 789, currentScore: 0.08528499\ntop: org.apache.lucene.search.spans.SpanScorer@18f51f\nscorerQueue.size(): 3\n\tat org.apache.lucene.search.DisjunctionSumScorer.advanceAfterCurrent\n(DisjunctionSumScorer.java:171)\n\tat org.apache.lucene.search.DisjunctionSumScorer.skipTo(DisjunctionSumScorer.java:224)\n\tat org.apache.lucene.search.BooleanScorer2.skipTo(BooleanScorer2.java:345)\n\tat org.apache.lucene.search.ConjunctionScorer.doNext(ConjunctionScorer.java:56)\n\tat org.apache.lucene.search.ConjunctionScorer.next(ConjunctionScorer.java:51)\n\tat org.apache.lucene.search.BooleanScorer2.score(BooleanScorer2.java:288)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:102)\n\tat org.apache.lucene.search.Hits.getMoreDocs(Hits.java:65)\n\tat org.apache.lucene.search.Hits.<init>(Hits.java:44)\n\tat org.apache.lucene.search.Searcher.search(Searcher.java:40)\n\tat org.apache.lucene.search.Searcher.search(Searcher.java:32)",
            "date": "2005-07-28T04:19:24.000+0000",
            "id": 6
        },
        {
            "author": "Paul Elschot",
            "body": "Since there is no difference in output, the bug must be \nin DisjunctionSumScorer.advanceAfterCurrent(). \n \nI had a good look at that code (the test version after the \nsecond patch), and I really can't see a way of \nincreasing nrMatchers beyond the number of scorers in \nthe scorer queue: in the test version, each scorer is \nverified to advance to a higher document number, and \nnrMatchers is only increased when the document number \nof a scorer is the same. \n \nI'm overlooking something, or at least one scorer \ndoes not return the same document number on successive \ncalls of doc() without a next() in between. \n \nRegards, \nPaul Elschot \n ",
            "date": "2005-07-28T05:48:28.000+0000",
            "id": 7
        },
        {
            "author": "Erik Hatcher",
            "body": "My apologies - I apparently was not running your patch (my environment did not recompile it even \nthough I had patched it).  The output is now this:\n\njava.lang.AssertionError: Scorer: org.apache.lucene.search.spans.SpanScorer@ed9f47\n advanced from doc 112 to doc 112 after next() returned true.\n\tat org.apache.lucene.search.DisjunctionSumScorer.advanceAfterCurrent\n(DisjunctionSumScorer.java:153)\n\tat org.apache.lucene.search.DisjunctionSumScorer.skipTo(DisjunctionSumScorer.java:232)\n\tat org.apache.lucene.search.BooleanScorer2.skipTo(BooleanScorer2.java:345)\n\tat org.apache.lucene.search.ConjunctionScorer.doNext(ConjunctionScorer.java:56)\n\tat org.apache.lucene.search.ConjunctionScorer.next(ConjunctionScorer.java:51)\n\tat org.apache.lucene.search.BooleanScorer2.score(BooleanScorer2.java:288)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:102)\n\tat org.apache.lucene.search.Hits.getMoreDocs(Hits.java:65)\n\tat org.apache.lucene.search.Hits.<init>(Hits.java:44)\n\tat org.apache.lucene.search.Searcher.search(Searcher.java:40)\n\tat org.apache.lucene.search.Searcher.search(Searcher.java:32)\n\nSo SpanScorer appears to be the culprit.  ",
            "date": "2005-07-28T09:25:45.000+0000",
            "id": 8
        },
        {
            "author": "Paul Elschot",
            "body": "Thanks for retesting. \nIt appears worthwhile to have that last check (producing \nthe last output) built into DisjunctionSumScorer.java as an assert. \n \nPerhaps the author of SpanScorer.java could take a further look \ninto this. \n \nRegards, \nPaul Elschot \n ",
            "date": "2005-07-29T01:43:39.000+0000",
            "id": 9
        },
        {
            "author": "Paul Elschot",
            "body": "I had another look at SpanScorer.next(), and it seems to me it \nis not the source of the problem. \nSo I had another look at the query (see java-dev messages of 26 July): \n \nReformatted to show the structure: \n+(spanNear([FULLTEXT:cat, FULLTEXT:dog, FULLTEXT:bird], 1, true) \u00a0 \n\u00a0 spanNear([FULLTEXT:horse, FULLTEXT:cow, FULLTEXT:pig], 1, true) \u00a0 \n\u00a0 spanNear([FULLTEXT:snake, FULLTEXT:camel], 0, true) \n) \n+(FULLTEXT:zebra \n\u00a0 FULLTEXT:insect \n\u00a0 spanNear([FULLTEXT:feline, FULLTEXT:goat], 0, true) \n) \n \nThis means that the NearSpans provided by a spanNear subquery \nprobably is the source of the problem. \n \nRegards, \nPaul Elschot \n ",
            "date": "2005-07-29T05:13:21.000+0000",
            "id": 10
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=16069)\nPatch to add an assert to DisjunctionSumScorer.java\n\nThis patch reimplements only the most critical test of the second test patch\n(15800) in the form of an assert.\n\nI'm using this in common-build.xml for the assert:\n\n  <property name=\"javac.source\" value=\"1.4\"/>\n  <property name=\"javac.target\" value=\"1.4\"/>\n\nand this in the test target:\n\n      <assertions>\n\t<enable package=\"org.apache.lucene\"/>\n      </assertions>\n",
            "date": "2005-08-17T05:42:55.000+0000",
            "id": 11
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=16070)\nNearSpansOrdered.java\n\nAnother implementation of ordered NearSpans.\nThis uses only arrays of scorers and no PriorityQueue at all.\n",
            "date": "2005-08-17T05:48:04.000+0000",
            "id": 12
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=16071)\nPatch SpanNearQuery to use NearSpansOrdered\n\nWith this patch, all tests pass here.",
            "date": "2005-08-17T05:53:42.000+0000",
            "id": 13
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=16072)\nPatch TestSpans.java to include more tests\n\nThis also obsoletes TestSpans.java and NearSpans.java in bug 35664.",
            "date": "2005-08-17T05:57:56.000+0000",
            "id": 14
        },
        {
            "author": "Paul Elschot",
            "body": "Erik, could you run your test once more with the patch to SpanNearQuery \napplied and NearSpansOrdered.java added? \n \nIn case this NearSpansOrdered works also for your test case \nit would probably be a good idea to simplify the current NearSpans \nto handle only the unordered case. \n \nRegards, \nPaul Elschot \n ",
            "date": "2005-08-17T06:08:33.000+0000",
            "id": 15
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=16104)\nNearSpansUnordered.java\n\nThis is NearSpans.java specialised for the unordered case, using\nvery much the same data structures.\n\nIt needs the patch of attachment 16071 + a rename of NearSpans to\nNearSpansUnordered in the patched SpanNearQuery.java\n\nRegards,\nPaul Elschot\n",
            "date": "2005-08-19T04:42:41.000+0000",
            "id": 16
        },
        {
            "author": "Erik Hatcher",
            "body": "Paul - thanks for your continued efforts with this issue.  I have, I believe, patched everything to match \nall the attachments to this issue and am getting errors on all the new TestSpans.java tests like this:\n\n    [junit] Testcase: testSpanNearOrdered01(org.apache.lucene.search.spans.TestSpans):  Caused an \nERROR\n    [junit] subSpans1: 2 after 2\n    [junit] java.lang.AssertionError: subSpans1: 2 after 2\n    [junit]     at org.apache.lucene.search.spans.NearSpansOrdered.advanceAfterOrdered\n(NearSpansOrdered.java:159)\n    [junit]     at org.apache.lucene.search.spans.NearSpansOrdered.next(NearSpansOrdered.java:95)\n    [junit]     at org.apache.lucene.search.spans.SpanScorer.next(SpanScorer.java:50)\n    [junit]     at org.apache.lucene.search.Scorer.score(Scorer.java:47)\n    [junit]     at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:102)\n\nRe: the use of \"assert\" - I'm not sure we want to require JDK 1.4 just yet.  We should discuss this on the \ndev list to be sure.  I simply changed to AssertionError instead.\n\nPerhaps I've mispatched something?   If you think that is the case, could you roll up all your changes \ninto a single patch that I can apply to a clean trunk checkout of Lucene?   Thanks!",
            "date": "2005-08-22T00:13:45.000+0000",
            "id": 17
        },
        {
            "author": "Paul Elschot",
            "body": "Did you perhaps forget to invert the condition of the assert? \n \n:) \nPaul Elschot \n ",
            "date": "2005-08-22T02:50:44.000+0000",
            "id": 18
        },
        {
            "author": "Erik Hatcher",
            "body": "Darn - I wish there was an \"undo\" on here!  :)  Sorry about that.  Sure enough, I had messed up the \nconversion from assert to AssertionError.  The conversion now is this in DisjunctionSumScorer:\n\n          if (top.doc() <= currentDoc)\n                throw new AssertionError(\"Scorer: \" + top\n                   + \"\\n advanced from doc \" + currentDoc\n                   + \" to doc \" + top.doc()\n                   + \" after next() returned true.\");\n\nThe patched TestSpans passes.  However with my test case I'm getting this:\n\njava.lang.AssertionError: Scorer: org.apache.lucene.search.spans.SpanScorer@73305c\n advanced from doc 112 to doc 112 after next() returned true.\n\tat org.apache.lucene.search.DisjunctionSumScorer.advanceAfterCurrent\n(DisjunctionSumScorer.java:153)\n\tat org.apache.lucene.search.DisjunctionSumScorer.skipTo(DisjunctionSumScorer.java:220)\n\tat org.apache.lucene.search.BooleanScorer2.skipTo(BooleanScorer2.java:345)\n\tat org.apache.lucene.search.ConjunctionScorer.doNext(ConjunctionScorer.java:56)\n\tat org.apache.lucene.search.ConjunctionScorer.next(ConjunctionScorer.java:51)\n\tat org.apache.lucene.search.BooleanScorer2.score(BooleanScorer2.java:288)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:102)\n",
            "date": "2005-08-22T04:50:00.000+0000",
            "id": 19
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=16138)\nBug hunt patch for SpanScorer.java\n\nSince the output is the same as the output of 28 July,\nI'm going back to untargeted bug hunting.\n\nHopefully the state of the spans dumped in this traceback\nwill help us to progress...\n\nRegards,\nPaul Elschot\n",
            "date": "2005-08-22T05:31:49.000+0000",
            "id": 20
        },
        {
            "author": "Erik Hatcher",
            "body": "With the SpanScorer patch applied for additional output, I get this:\n\nSpanScorer.next() A: spans org.apache.lucene.search.spans.NearSpansOrdered@222b9a advanced from \n112 to 112\n\njava.lang.AssertionError: SpanScorer.next() A: spans \norg.apache.lucene.search.spans.NearSpansOrdered@222b9aadvanced from 112 to 112 at \norg.apache.lucene.search.spans.SpanScorer.next(SpanScorer.java:60) at \norg.apache.lucene.search.DisjunctionSumScorer.advanceAfterCurrent(DisjunctionSumScorer.java:151) at \norg.apache.lucene.search.DisjunctionSumScorer.skipTo(DisjunctionSumScorer.java:220) at \norg.apache.lucene.search.BooleanScorer2.skipTo(BooleanScorer2.java:345) at \norg.apache.lucene.search.ConjunctionScorer.doNext(ConjunctionScorer.java:56) at \norg.apache.lucene.search.ConjunctionScorer.next(ConjunctionScorer.java:51) at \norg.apache.lucene.search.BooleanScorer2.score(BooleanScorer2.java:288) at \norg.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:102) at \norg.apache.lucene.search.Hits.getMoreDocs(Hits.java:65) at org.apache.lucene.search.Hits.<init>\n(Hits.java:44) at org.apache.lucene.search.Searcher.search(Searcher.java:40) at \norg.apache.lucene.search.Searcher.search(Searcher.java:32)",
            "date": "2005-08-23T18:18:57.000+0000",
            "id": 21
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=16167)\nBug hunt patch for NearSpansOrdered.java\n\nIt's strange that the previous output is the same as the earlier one from\nJuly, because the previous one uses NearSpansOrdered and the one from\nJuly used NearSpans from svn.\nSo I'm beginning to suspect that the bug is even further away, perhaps\nin SpanTermQuery.\n\nHappy hunting,\nPaul Elschot",
            "date": "2005-08-24T02:37:22.000+0000",
            "id": 22
        },
        {
            "author": "Erik Hatcher",
            "body": "I have removed a few of the attachments to this issue, as they have already been applied to the latest codebase.  This will hopefully make it easier for us to work with the attachments, with less confusion.",
            "date": "2006-01-28T01:37:44.000+0000",
            "id": 23
        },
        {
            "author": "Paul Elschot",
            "body": "Patch for org.apache.lucene.search.DisjunctionSumScorer.java .\n\nThis query was reported by Ramana Jelda on java-user to have the same problem:\n+(\n\u00a0 +(\n\u00a0 \u00a0 spanNear([productName:mp, productName:3], 3, true) \n\u00a0 \u00a0 spanNear([subName:mp, subName:3], 3, true)\n\u00a0 \u00a0) \n\u00a0+(productName:player subName:player)\n)\n\nLooking at the query structure and the one reported earlier, I realized the bug\ncould also be in DisjunctionSumScorer.skipTo(), and not in the span query code.\n\nNow let's hope this does it...\n",
            "date": "2006-03-30T03:55:57.000+0000",
            "id": 24
        },
        {
            "author": "Paul Elschot",
            "body": "The date doesn't show up in the list of the attachments until clicking the \"manage\" link.\nToday's patch is called DisjunctionSumScorerPatch5.txt .",
            "date": "2006-03-30T04:32:58.000+0000",
            "id": 25
        },
        {
            "author": "Dallan Quass",
            "body": "I'm seeing this issue as well, but very rarely.  It happens when DisjunctionSumScorer.advanceAfterCurrent comes out of the do..while loop with nrMatchers == nrScorers+1.  This doesn't happens until about the 85'th document that gets scored for a particular query.  I added a hack to set nrMatchers = nrScorers in this case, which fixed the problem for me, but I'd be happy to help you track down the issue since I have a particular database and query that seems to elicit it.  Is there something you'd like me to do?  (I see the same problem on 1_9_final and 1_9_1.)\n",
            "date": "2006-03-31T04:32:54.000+0000",
            "id": 26
        },
        {
            "author": "Dallan Quass",
            "body": "The hack I added didn't work.  Although it fixed the problem for one query, I'm now seeing a different query that's giving an array out of bounds exception: this time from SpanScorer.score() (line 72), which is called near the top of DisjunctionSumScorer.advanceAfterCurrent.  What's odd is that the array index is MAX_INT (2147483648).  Any ideas?",
            "date": "2006-03-31T10:20:05.000+0000",
            "id": 27
        },
        {
            "author": "Dallan Quass",
            "body": "Sorry for cluttering up the comments here.  I wanted to add that the part of the query exhibiting the error in the second case is a boolean query with three SpanTermQuery clauses, all \"Occur.SHOULD.\"  If I change the SpanTermQuery clauses to just TermQuery clauses, the problem goes away.",
            "date": "2006-03-31T10:41:46.000+0000",
            "id": 28
        },
        {
            "author": "Paul Elschot",
            "body": "Dallan, could you try this patch: DisjunctionSumScorerPatch5.txt ?\n\nAn index at MAX_INT in SpanScorer.score() is an indication that the\nunderlying spans returned MAX_INT from spans.doc(), which should mean\nthat spans.doc() was called after spans.next() or spans.skipTo(...) returned\nfalse.\nThat means that either SpanScorer.java is incorrect, or that the Spans used\nby it is incorrect, or that SpanScorer is used incorrectly, eg. by having score()\ncalled on it after next() or skipTo(...) returned false.\n",
            "date": "2006-03-31T16:16:18.000+0000",
            "id": 29
        },
        {
            "author": "Paul Elschot",
            "body": "I think I found a bug in SpanScorer.java.\n\nThe problem is that SpanScorer.skipTo() and SpanScorer.next() are not\ndesigned to be used both in the same search.\nAs the doc of the scored Spans is normally ahead, the attached version of\nSpanScorer adds a check in skipTo() for the scored spans not being ahead\nof the target of skipTo().\nThe attached version of SpanScorer is also refactored to remove double code.\n\nThis new SpanScorer changes the behaviour of SpanQueries and it leaves\nTestSpansAdvanced and TestSpansAdvanced2 failing. I attached a passing version for both of these tests, but they still contain some System.out.println()'s,\nand the test for the score value is changed to a warning. The same documents\nstill match in the tests, only some score values change.\n\nI don't know whether DisjunctionSumScorerPatch5.txt is still needed, but it should not hurt.\n\nI didn't change the copyright year in the sources, in case they make it\nto the trunk, the year could be updated.\n\n",
            "date": "2006-04-03T04:56:32.000+0000",
            "id": 30
        },
        {
            "author": "Yonik Seeley",
            "body": "> The same documents still match in the tests, only some score values change.\n\nCould you elaborate on this point?  Are the old or new scores correct?\n\n> I don't know whether DisjunctionSumScorerPatch5.txt is still needed, but it should not hurt.\n\nI was going to commit that one anyway... it looks like a bug if skipTo(target) is called with target<= currentDoc.  Most scorers wouldn't do that, so I don't know if it's ever manifested as an error.",
            "date": "2006-04-03T23:53:40.000+0000",
            "id": 31
        },
        {
            "author": "Paul Elschot",
            "body": ">> The same documents still match in the tests, only some score values change. \n> Could you elaborate on this point? Are the old or new scores correct? \n\nFrom a quick look the new scorer look better than the old ones. In one of the test\ndocs the test query matches 3 times, and it now scores higher than the doc with the single match\n(the one in which only docs D and A match).\n \n> > I don't know whether DisjunctionSumScorerPatch5.txt is still needed, but it should not hurt. \n> I was going to commit that one anyway... it looks like a bug if skipTo(target) is called with target<= currentDoc.\n> Most scorers wouldn't do that, so I don't know if it's ever manifested as an error.\n\nThe two changes (in DisjunctionSumScorerPatch5.txt and in the posted SpanScorer) are different in that\nfor DisjunctionSumScorer the test is against the current doc of the scorer and in\nSpanScorer the test is against the current doc of the subscorer.\nSo I think in DisjunctionSumScorer  the test may not be needed, but in SpanScorer it should be there.\n\nHowever, I don't have a test case showing the out of bounds problem, so I'd like to know\nwhether this problem persists with the posted SpanScorer.\n\n",
            "date": "2006-04-04T01:49:06.000+0000",
            "id": 32
        },
        {
            "author": "Dallan Quass",
            "body": "That fixed it!  I made the patch in DisjunctionSumScorerPath5.txt and used the posted SpanScorer, and I'm no longer experiencing the array index out of bounds problem.   Thank-you Paul!",
            "date": "2006-04-04T02:59:01.000+0000",
            "id": 33
        },
        {
            "author": "Yonik Seeley",
            "body": "Excellent news!\n\nI'll do a quick review of the changes to SpanScorer, clean up the tests, and commit (just so no one is duplicating the effort).\n\nThanks Paul!",
            "date": "2006-04-04T03:15:12.000+0000",
            "id": 34
        },
        {
            "author": "Yonik Seeley",
            "body": "Committed!\nI also did some changing & refactoring on TestSpansAdvanced/TestSpansAdvanced2, added checking of explain() value, etc.  All the tests now pass w/o warnings.",
            "date": "2006-04-04T23:33:05.000+0000",
            "id": 35
        }
    ],
    "component": "core/search",
    "description": "From Erik's post at java-dev: \n \n> \u00a0 \u00a0 \u00a0[java] Caused by: java.lang.ArrayIndexOutOfBoundsException: 4 \n> \u00a0 \u00a0 \u00a0[java] \u00a0 \u00a0 at org.apache.lucene.search.BooleanScorer2  \n> $Coordinator.coordFactor(BooleanScorer2.java:54) \n> \u00a0 \u00a0 \u00a0[java] \u00a0 \u00a0 at org.apache.lucene.search.BooleanScorer2.score  \n> (BooleanScorer2.java:292) \n... \n \nand my answer: \n \nProbably nrMatchers is increased too often in score() by calling score() \nmore than once.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-413",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "[PATCH] BooleanScorer2 ArrayIndexOutOfBoundsException + alternative NearSpans",
    "systemSpecification": true,
    "version": ""
}