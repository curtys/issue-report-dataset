{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Patch looks good.  I will commit shortly.  Thanks Eks Dev.\n\n{quote}\nWould it not make sense to maintain type with some integer/byte\"poor man's enum\" (Interface with a couple of constants)\n{quote}\n\nOr we could wait until Java 5 (3.0) and use real enums?\n\nOr ... maybe we should have subclasses of Field (TextField, BinaryField,\nReaderField, TokenStreamField) which override the corresponding method\n(and the base Field.java would still implement these methods but\nreturn null)?  Though this would be a rather large change...",
            "date": "2008-03-11T18:26:37.181+0000",
            "id": 0
        },
        {
            "author": "Eks Dev",
            "body": "thanks fof looking into it!\nSubclassing now with backwards compatibility would be clumsy, I was thinking about it but could not find clean way to make it.\n\n>>Or we could wait until Java 5 (3.0) and use real enums?\nyes, that is ultimate solution, but my line of thoughts was that \"poor man's enum\"->java 5 enum migration would be trivial later... but do not change working code kicks-in here :)  ",
            "date": "2008-03-11T20:35:13.074+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Actually seeing a test failure with this:\n\n    [junit] Testcase: testLazyFields(org.apache.lucene.index.TestFieldsReader): FAILED\n    [junit] bytes is null and it shouldn't be\n    [junit] junit.framework.AssertionFailedError: bytes is null and it shouldn't be\n    [junit]     at org.apache.lucene.index.TestFieldsReader.testLazyFields(TestFieldsReader.java:132)\n\n",
            "date": "2008-03-11T20:48:33.502+0000",
            "id": 2
        },
        {
            "author": "Eks Dev",
            "body": "hah, this bug just  justified this patch :) \nsorry,  I should have run tests before... nothing is trivial enough.   \n The problem was indeed isBinary that went out of sync in LazyField, new patch follows ",
            "date": "2008-03-11T21:08:35.286+0000",
            "id": 3
        },
        {
            "author": "Eks Dev",
            "body": "new patch, fixes isBinary status in LazyField",
            "date": "2008-03-11T21:09:40.290+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "OK the new patch passes all tests -- thanks!\n\nOne unrelated thing I noticed: it looks like you can get a binary LazyField and then ask for its stringValue(), and vice-versa.  Ie we are failing to check in binaryValue() that the field is in fact binary even though when we create the LazyField we know whether it is.  I'll open a separate issue for this.",
            "date": "2008-03-11T22:49:00.994+0000",
            "id": 5
        },
        {
            "author": "Doug Cutting",
            "body": "fix typo that's been bugging me",
            "date": "2008-03-12T16:57:16.562+0000",
            "id": 6
        }
    ],
    "component": "core/other",
    "description": "Field class can hold three types of values, \nSee: AbstractField.java  protected Object fieldsData = null; \n\ncurrently, mainly RTTI (instanceof) is used to determine the type of the value stored in particular instance of the Field, but for binary value we have mixed RTTI and cached variable \"boolean isBinary\" \n\nThis patch makes consistent use of cached variable isBinary.\n\nBenefit: consistent usage of method to determine run-time type for binary case  (reduces chance to get out of sync on cached variable). It should be slightly faster as well.\n\nThinking aloud: \nWould it not make sense to maintain type with some integer/byte\"poor man's enum\" (Interface with a couple of constants)\ncode:java{\npublic static final interface Type{\npublic static final byte BOOLEAN = 0;\npublic static final byte STRING = 1;\npublic static final byte READER = 2;\n....\n}\n}\n\nand use that instead of isBinary + instanceof? ",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1217",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Trivial",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "use isBinary cached variable instead of instanceof in Field",
    "systemSpecification": true,
    "version": ""
}