{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "and its even crazier because compareTo() uses generation.\n\nif we move hashCode() and equals() to generation too, and completely remove IndexCommit.getVersion(), all tests pass in Lucene,\nbut Solr replication is using IndexCommit.getVersion() for some reason (is it a good reason?)",
            "date": "2012-01-03T22:24:39.364+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. This bug leads to an unexpected behavior when the only change to be committed is in userData - we get two commits then that are declared equal, they have the same version but they have different generation numbers.\n\nHmmm, why is the version not bumped?  That seems like the bug here (the index changed but the version didn't).",
            "date": "2012-01-03T22:30:21.215+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "its also not ideal and that equals() is inconsistent with compareTo() even if we fixed it this way, because compareTo() doesn't consider Directory.",
            "date": "2012-01-03T22:31:02.494+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nHmmm, why is the version not bumped? That seems like the bug here (the index changed but the version didn't).\n{quote}\n\nSeems like version is pretty redundant here though, why not just get rid of it. the only thing using it is Solr, if it wants an additional integer here it could do this in the commit user data instead.",
            "date": "2012-01-03T22:39:10.125+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "+1 to nuking version, and fixing equals/compareTo/hashCode to only use generation; I think version is redundant w/ the generation.\n",
            "date": "2012-01-04T13:46:53.338+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "Generation isn't as good as version for telling if something has changed - it's much easier (probably trivial) to get a false match under real usage scenarios.",
            "date": "2012-01-04T14:15:16.505+0000",
            "id": 5
        },
        {
            "author": "Yonik Seeley",
            "body": "Since bumping version and generation on changes is redundant, what if we replaced version with a creation timestamp?",
            "date": "2012-01-04T14:21:08.811+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "i don't think we need any more timestamps. \n\nAlso the existing IndexCommit getTimeStamp should be removed.\n\nWe currently don't fsync the directory file itself and this is totally wrong on e.g. NFS",
            "date": "2012-01-04T14:24:43.646+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "Patch.\n\nI removed Directory.fileModified, and\nIndexCommit.getVersion/getTimestamp.  I changed Solr to take its own\ntimestamp (System.currentTimeMillis) and store into the commit's\nuserData, and fixed the places that needed it to look it up from\nthere.  I also throw an exception if ever IndexCommit.compareTo is\npassed an IndexCommit with a different Directory.\n",
            "date": "2012-01-27T00:52:46.292+0000",
            "id": 8
        }
    ],
    "component": "core/index",
    "description": "IndexCommit.equals() checks for equality of Directories and versions, but it doesn't check IMHO the more important generation numbers. It looks like commits are really identified by a combination of directory and segments_XXX, which means the generation number, because that's what the DirectoryReader.open() checks for.\n\nThis bug leads to an unexpected behavior when the only change to be committed is in userData - we get two commits then that are declared equal, they have the same version but they have different generation numbers. I have no idea how this situation is treated in a few dozen references to IndexCommit.equals() across Lucene...\n\nOn the surface the fix is trivial - either add the gen number to equals(), or use gen number instead of version. However, it's puzzling why these two would ever get out of sync??? and if they are always supposed to be in sync then maybe we don't need both of them at all, maybe just generation or version is sufficient?",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3672",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "IndexCommit.equals() bug",
    "systemSpecification": true,
    "version": "4.0-ALPHA"
}