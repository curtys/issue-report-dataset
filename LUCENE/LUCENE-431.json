{
    "comments": [
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=16372)\nRAMInputStream subclassing IndexInput directly\n",
            "date": "2005-09-13T04:09:39.000+0000",
            "id": 0
        },
        {
            "author": "cutting@apache.org",
            "body": "This readByte() implementation will probably be slower than\nBufferedIndexInput's.  In particular, the call to buffers.elementAt() is not\ncheap.  It would be faster to cache the current buffer in a field.  Fastest\nwould be to also cache the position in the buffer, something like the following\n(untested):\n\nprivate static final EMPTY_BUFFER = new byte[0];\nprivate byte[] buffer = EMPTY_BUFFER;\nprivate int bufferPosition;\n\npublic byte readByte() {\n  if (bufferPosition == buffer.length) {\n    pointer += buffer.length;\n    updateBuffer();\n  }\n  return buffer[bufferPosition++];\n}\n\npublic byte readBytes(byte[] dest, int destOffset, int len) {\n  int start = pointer + bufferPosition;\n  ... your code ...\n  updateBuffer();\n}\n\npublic void seek(long pos) {\n  pointer = (int)pos;\n  updateBuffer();\n}\n\npublic long getFilePointer() {\n  return pointer + bufferPosition;\n}\n\nprivate void updateBuffer() {\n  if (pointer < length) {\n    buffer = file.buffers.elementAt(pointer/BUFFER_SIZE));\n    bufferPosition = pointer%BUFFER_SIZE;\n  } else {\n    buffer = EMPTY_BUFFER;\n    bufferPosition = 0;\n  }\n}",
            "date": "2005-09-13T05:11:48.000+0000",
            "id": 1
        },
        {
            "author": "Michael Busch",
            "body": "We should fix both, RAMInputStream and RAMOutputStream to subclass IndexInput and IndexOutput directly. That saves a lot of unnecessary array copies.\n\nI'm attaching a new patch that changes both classes. Unlike Paul's patch this one keeps the current buffer in a local variable (as Doug suggested). \n\nAll unit tests pass including TestTermVectorsReader. The reason why this test failes in Paul's patch is that RAMInputStream does not throw an IOException in case EOF is reached.\n\nI did some quick tests in which I used a RAMDirectory to build an index. With this patch the test runs 170 secs, the old version takes 236 secs, which is an improvement of about 28%.\n\n",
            "date": "2007-03-27T02:32:43.226+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Michael, I wasn't able to cleanly apply this patch on the current trunk.  I get this:\n\npatch -p0 < lucene-431.patch\npatching file src/java/org/apache/lucene/store/RAMInputStream.java\nHunk #2 FAILED at 21.\n1 out of 2 hunks FAILED -- saving rejects to file src/java/org/apache/lucene/store/RAMInputStream.java.rej\npatching file src/java/org/apache/lucene/store/RAMOutputStream.java\nHunk #1 FAILED at 21.\n1 out of 3 hunks FAILED -- saving rejects to file src/java/org/apache/lucene/store/RAMOutputStream.java.rej\npatching file src/test/org/apache/lucene/store/MockRAMOutputStream.java\n\nI'd like to test this net performance gain with LUCENE-843.  I think fixing this plus doing LUCENE-843 should make indexing into a RAMDirectory quite a bit faster.",
            "date": "2007-03-27T09:48:21.143+0000",
            "id": 3
        },
        {
            "author": "Michael Busch",
            "body": "Mike,\n\nthat's strange.... for me the patch applies cleanly on the current trunk. I just tried it again.\n\nAnyways, I'm attaching a zip containing the patched files. Now you should be able to test 843 with this one. Let me know if it doesn't work...\n\n- Michael",
            "date": "2007-03-27T17:38:04.789+0000",
            "id": 4
        },
        {
            "author": "Doug Cutting",
            "body": "> I'd like to test this net performance gain with LUCENE-843.\n\nYes, it would be great to see how much each improves things individually as well as combined.",
            "date": "2007-03-27T18:35:16.303+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": ">> I'd like to test this net performance gain with LUCENE-843.\n>\n> Yes, it would be great to see how much each improves things individually as well as combined.\n\nWill do!",
            "date": "2007-03-27T18:54:14.617+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Michael, the patch problem seems to be something on my end, which I can't yet explain.\n\nWhen I take your zip (thanks!), unzip into a fresh trunk checkout, run 'svn diff', take the output to another fresh trunk checkout, and try to apply that patch, I get the same error.  Somehow my version of patch (2.5.4 on Debian) cannot handle the output of 'svn diff'.  Spooky!",
            "date": "2007-03-27T18:56:16.485+0000",
            "id": 7
        },
        {
            "author": "Joe Shaw",
            "body": "Michael: mysterious patch failures like that are usually caused by problems with line endings.  Try running dos2unix on the patch and then apply it.",
            "date": "2007-03-27T22:41:05.621+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks for the advice :)  Alas, I had already tried that on the original patch and it gives the same error.  I remain baffled!",
            "date": "2007-03-27T22:45:02.798+0000",
            "id": 9
        },
        {
            "author": "Michael Busch",
            "body": "Hello Mike,\n\ndid you get a chance to try this patch out? I'm planning to commit it soon...",
            "date": "2007-04-17T19:33:15.742+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "Yes, I did and it looks good.  I would say commit it!",
            "date": "2007-04-17T19:40:31.975+0000",
            "id": 11
        },
        {
            "author": "Michael Busch",
            "body": "Thanks for the quick (7 mins!) response, Mike :-).\n\nI just committed it.",
            "date": "2007-04-17T20:13:04.533+0000",
            "id": 12
        }
    ],
    "component": "core/store",
    "description": "From java-dev, Doug's reply of 12 Sep 2005 \non Delaying buffer allocation in BufferedIndexInput: \n \nPaul Elschot wrote: \n... \n> I noticed that RAMIndexInput extends BufferedIndexInput. \n> It has all data in buffers already, so why is there another \n> layer of buffering? \n \nNo good reason: it's historical. \n \nTo avoid this either: (a) the BufferedIndexInput API would need to be  \nmodified to permit subclasses to supply the buffer; or (b)  \nRAMInputStream could subclass IndexInput directly, using its own  \nbuffers.  The latter would probably be simpler. \n \nEnd of quote. \n \nI made version (b) of RAMInputStream. \nUsing this RAMInputStream, TestTermVectorsReader failed as the only \nfailing test.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-431",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "RAMInputStream and RAMOutputStream without further buffering",
    "systemSpecification": true,
    "version": ""
}