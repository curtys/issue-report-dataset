{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "+1, though really this should be a Lucene issue (FieldCache is in Lucene).\n\nWe actually have a start at this: the core part of UnInvertedField was factored into Lucene as oal.index.DocTermOrds.  I think all we need to do is make this accessible through FieldCache.",
            "date": "2011-08-01T12:41:40.689+0000",
            "id": 0
        },
        {
            "author": "Martijn van Groningen",
            "body": "+1. If DocTermOrds is available in FieldCache, then Grouping (Term based impl) can also use DocTermOrds.",
            "date": "2011-08-01T12:58:34.765+0000",
            "id": 1
        },
        {
            "author": "Ryan McKinley",
            "body": "What are thoughts on using DocValues rather then FieldCache?\n\nIf we do choose to extend the FieldCache architecture, it would be so much cleaner if it were a simple Map<K,V> directly on the Reader rather then a static thing holding a WeakHashMap<Reader,Cache>\n",
            "date": "2011-08-01T13:07:16.154+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "In general the FieldCache should come from the reader (and non-atomic readers should throw UOE) and not from a static method of a random abstract class somewhere in the search package. The orginal FieldCache design was broken and there are many issues around this. This would also remove the insanity issues. We can of course make SlowMultiReaderWrapper behave correct, but then all users know that they do something wrong (icluding the broken Solr parts still using TopLevel FieldCache entries).\n\nWe should start with this in 4.0! For backwards compatibility we could still have the FieldCache class, but just delegating.",
            "date": "2011-08-01T13:20:41.097+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "+1, die insanity, die.",
            "date": "2011-08-01T13:25:21.497+0000",
            "id": 4
        },
        {
            "author": "Martijn van Groningen",
            "body": "bq. What are thoughts on using DocValues rather then FieldCache?\nMaybe both should be available. Not all fields have indexed docvalues.\n\nbq. We should start with this in 4.0! For backwards compatibility we could still have the FieldCache class, but just delegating.\nChanging the architecture seems like a big task to me. Maybe that should be done in a different issue. This issue will then depend on it.",
            "date": "2011-08-01T13:39:09.046+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "+1 to moving FC to atomic readers only, and let SlowMultiReaderWrapper absorb the insanity.",
            "date": "2011-08-01T13:39:42.573+0000",
            "id": 6
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. (icluding the broken Solr parts still using TopLevel FieldCache entries).\n\nSome top-level field cache uses are very much by design in Solr.\nIf that ability is removed from Lucene, I guess we could always move some of the old FieldCache logic to Solr though.",
            "date": "2011-08-01T13:49:05.972+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. If that ability is removed from Lucene, I guess we could always move some of the old FieldCache logic to Solr though.\n\nSolr can always use SlowMultiReaderWrapper (see above)",
            "date": "2011-08-01T13:52:05.244+0000",
            "id": 8
        },
        {
            "author": "Hoss Man",
            "body": "bq. This would also remove the insanity issues. \n\nFWIW: the WeakHashMap isn't the sole source of \"insanity\" - that can also come about from inconsistent usage for a single field (ie: asking for string and int caches for the same field)",
            "date": "2011-08-01T22:19:28.637+0000",
            "id": 9
        },
        {
            "author": "Bill Bell",
            "body": "Lots of activity... Can someone lead this?\n\nBill\n",
            "date": "2011-08-04T04:02:26.365+0000",
            "id": 10
        },
        {
            "author": "Martijn van Groningen",
            "body": "I opened LUCENE-3360 for moving FieldCache to IndexReader. This issue should be concerned with adding getDocTermOrds() to FieldCache.",
            "date": "2011-08-04T08:58:02.262+0000",
            "id": 11
        },
        {
            "author": "Martijn van Groningen",
            "body": "Attached initial patch.\nFieldCache has a new method:\n{code}\nFieldCache#getDocTermOrds(reader, field)\n{code}\n\nThe DocTermOrdsCreator currently doesn't validate any thing. I'm not sure what it should validate (DocTermsIndex doesn't validate either...). \n\nThis patch does *not* rely on the patch in LUCENE-3360. Implement LUCENE-3360 properly might take some time. I think issue can be implemented much quicker.",
            "date": "2011-08-10T21:42:36.426+0000",
            "id": 12
        },
        {
            "author": "Martijn van Groningen",
            "body": "Oops, uploaded the wrong patch.",
            "date": "2011-08-10T21:45:01.508+0000",
            "id": 13
        },
        {
            "author": "Martijn van Groningen",
            "body": "Updated the patch. Added a test to TestFieldCache. I think this is ready to be committed. New issues should be concerned with integrating DocTermOrds into function queries, sorting, grouping and more.",
            "date": "2011-08-13T18:10:30.667+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good Martijn!",
            "date": "2011-08-15T11:08:35.721+0000",
            "id": 15
        },
        {
            "author": "Martijn van Groningen",
            "body": "Committed in revision 1158393 (trunk).",
            "date": "2011-08-16T17:46:02.209+0000",
            "id": 16
        },
        {
            "author": "Robert Muir",
            "body": "reopening: there is a problem in the test",
            "date": "2011-08-17T02:27:32.524+0000",
            "id": 17
        },
        {
            "author": "Robert Muir",
            "body": "The new multivalued test in TestFieldCache exhibits some problems if NUM_ORD > 2.\n\nThis is the case if you e.g. use -Dtests.multiplier=3 (like hudson does)... I temporarily disabled it and put in a loud system.out.println\n{noformat}\n-    NUM_ORDS = atLeast(2);\n+    System.out.println(\"WARNING: NUM_ORDS is wired to 2, test fails otherwise!!!!!!!!!!!!!!!!!!!!!\");\n+    NUM_ORDS = 2; //atLeast(2);\n{noformat}",
            "date": "2011-08-17T02:29:07.662+0000",
            "id": 18
        },
        {
            "author": "Martijn van Groningen",
            "body": "I committed a fix. Test pass now on my local box with -Dtests.multiplier=3.\nIf build is successful on Jenkins we can close this issue.",
            "date": "2011-08-17T08:34:54.665+0000",
            "id": 19
        },
        {
            "author": "Robert Muir",
            "body": "Thanks Martijn: any idea how we can speed this test up? for our 'ant test' runs with multiplier=3, this takes a significant amount of time (over 15 minutes!), more than all the other tests combined.\n\nBefore the commit my builds were taking about 9 minutes, log here: http://sierranevada.servebeer.com/\n\n{noformat}\n    [junit] Testsuite: org.apache.lucene.search.TestFieldCache\n    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 1,062.362 sec\n{noformat}",
            "date": "2011-08-17T11:46:25.873+0000",
            "id": 20
        },
        {
            "author": "Robert Muir",
            "body": "attached is a patch that seems to help  for me, it doesn't create such long unicode strings in the test.\n\nIs there some reason why the test would want very long strings?",
            "date": "2011-08-17T11:54:40.570+0000",
            "id": 21
        },
        {
            "author": "Martijn van Groningen",
            "body": "I don't think there is any reason for generating long unicode strings. Only the cache behavior needs to be tested.",
            "date": "2011-08-17T12:32:28.645+0000",
            "id": 22
        },
        {
            "author": "Robert Muir",
            "body": "OK, thanks. I bet this was probably slowing things down for simpletext or something stupid :)",
            "date": "2011-08-17T12:39:37.468+0000",
            "id": 23
        },
        {
            "author": "Martijn van Groningen",
            "body": "Test passes on Jenkins.",
            "date": "2011-08-19T15:50:35.763+0000",
            "id": 24
        },
        {
            "author": "Varun Thacker",
            "body": "Hi,\n\nI have a doubt on FieldCache supporting MultiValued fields in general. So FieldCache on a multiValued field works by consuming it from FieldCache.DocTermOrds but,\n\n* I was trying out FunctionQuery in Solr and still got a \"cannot FieldCache on multiValued field\" error. This is because any impl. of FieldCacheSource for example StrFieldSource#getValues() returns DocTermsIndexDocValues where FieldCache.DocTermsIndex instance loads up. Is this supposed to be consumed like this? \n\n* Secondly slightly off topic but I went through the lucene4547 branch where there was a discussion on how to consume DocValues. I'm still trying to figure a lot of stuff around DocValues, FieldCache etc. but do we need to discuss all these issues and it's impact on Solr and ES as a whole?",
            "date": "2013-01-10T13:59:37.522+0000",
            "id": 25
        }
    ],
    "component": "",
    "description": "I would consider this a bug. It appears lots of people are working around this limitation, \nwhy don't we just change the underlying data structures to natively support multiValued fields in the FieldCache architecture?\n\nThen functions() will work properly, and we can do things like easily geodist() on a multiValued field.\n\nThoughts?",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3354",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Extend FieldCache architecture to multiple Values",
    "systemSpecification": true,
    "version": ""
}