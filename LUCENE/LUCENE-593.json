{
    "comments": [
        {
            "author": "Karl Wettin",
            "body": "> 1) If hasNext is called more than once, items are skipped \n\nWhy do you call this method manually?\n\n> 2) Much more seriously, when comparing fieldnames it is done with != rather than .equals() with the potential result that nothing is indexed\n\nTrue, but also false. The field passed on to the constructor should be internald. And then all is good.\n\n  public LuceneDictionary(IndexReader reader, String field) {\n    this.reader = reader;\n    this.field = field;\n    this.field.intern();\n  }",
            "date": "2006-06-08T18:53:28.000+0000",
            "id": 0
        },
        {
            "author": "Karl Wettin",
            "body": "Oups, I ment:\n\n  public LuceneDictionary(IndexReader reader, String field) {\n    this.reader = reader;\n    this.field = field.intern();\n  }\n",
            "date": "2006-06-08T18:55:40.000+0000",
            "id": 1
        },
        {
            "author": "Karl Wettin",
            "body": "patch for the internaling of field name passed to constructor",
            "date": "2006-06-08T19:04:21.000+0000",
            "id": 2
        },
        {
            "author": "K\u00e5re Fiedler Christiansen",
            "body": "Ad 1)\n- I don't. I just noticed it when looking at the code. However, if the iterator is only supposed to be used internally by the spell-checking code, why is it public at all?\nAd 2)\n- GREAT! That also provides the workaround until this patch can be applied: simply call the constructor with an interned string.",
            "date": "2006-06-08T19:41:48.000+0000",
            "id": 3
        },
        {
            "author": "Otis Gospodnetic",
            "body": "K\u00e5re & Karl - thanks, good catch, the field is interned in the ctor now.\nIf you have a patch for hasNext() problem, please attach it.\n",
            "date": "2006-06-18T12:47:54.000+0000",
            "id": 4
        },
        {
            "author": "K\u00e5re Fiedler Christiansen",
            "body": "Patch to make LuceneDictionery's Iterator conform with the Iterator contract",
            "date": "2006-06-30T17:12:14.000+0000",
            "id": 5
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Patch applied, thanks K\u00e5re.",
            "date": "2006-07-01T03:13:58.000+0000",
            "id": 6
        }
    ],
    "component": "core/search",
    "description": "In LuceneDictionary, the LuceneIterator.hasNext() method has two issues that makes it misbehave:\n\n1) If hasNext is called more than once, items are skipped\n2) Much more seriously, when comparing fieldnames it is done with != rather than .equals() with the potential result that nothing is indexed\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-593",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Spellchecker's dictionary iterator misbehaves",
    "systemSpecification": true,
    "version": "2.0.0"
}