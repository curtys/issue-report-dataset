{
    "comments": [
        {
            "author": "Grant Ingersoll",
            "body": "Here's a first draft of this.  See the test case for an example.",
            "date": "2009-06-02T22:36:04.511+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Shouldn't the CHANGES entry in this patch go into contrib/CHANGES?",
            "date": "2009-06-11T12:50:24.132+0000",
            "id": 1
        },
        {
            "author": "Mark Miller",
            "body": "That has been minorly inconsistent in the past. I have seen an occasion or two where contrib changes have made core changes. I think its inconsistent, and we should keep those changes in their respective changes.txt or make one for them, but it has happened.",
            "date": "2009-06-11T13:01:12.516+0000",
            "id": 2
        },
        {
            "author": "Grant Ingersoll",
            "body": "bq. Shouldn't the CHANGES entry in this patch go into contrib/CHANGES?\n\nIt can, I've never quite been sure.  I think more people read the top-level CHANGES, thus it is more likely to be noticed, but I'm fine either way.",
            "date": "2009-06-11T13:13:23.811+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Yeah we have not been consistent about it in the past... it's very much a chicken/egg thing, though.  If we consistently use contrib's CHANGES then presumably it'd get more visibility.  But I really don't feel strongly one way or another...",
            "date": "2009-06-11T18:35:08.872+0000",
            "id": 4
        },
        {
            "author": "Mark Miller",
            "body": "I think we should decide on one way or another though. Information gets lost and scattered arbitrarily otherwise. The position sensitive hit highlighting patch (spanscorer) didnt make any changes file. I don't feel its a real big deal either, but I favor consistency over scattered and somewhat arbitrary.",
            "date": "2009-06-11T18:43:09.142+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "I agree we should decide.\n\nI would lean towards always using contrib/CHANGES.  And then we should double-check all core CHANGES entries in 2.9 and move them to contrib if needed.",
            "date": "2009-06-11T20:16:03.016+0000",
            "id": 6
        },
        {
            "author": "Grant Ingersoll",
            "body": "OK, I moved to contrib/CHANGES.  I'm going to commit this today.\n",
            "date": "2009-06-12T12:18:26.925+0000",
            "id": 7
        },
        {
            "author": "Grant Ingersoll",
            "body": "BTW, I'm curious if people have a better way to convert from char[] to byte[] for encoding the payloads (see FloatEncoder), other than going through Strings.",
            "date": "2009-06-12T12:33:57.264+0000",
            "id": 8
        },
        {
            "author": "Grant Ingersoll",
            "body": "I grabbed Apache Harmony's Integer.parseInt() code and converted it to take in a char array, which should speed up the IntegerEncoder.  However, the Float.parseInt implementation relies on some constructs that are not available in JDK 1.4, so that one is going to have to stay as it is.\n\nThe main problem lies in the reliance on the HexStringParser (https://svn.apache.org/repos/asf/harmony/enhanced/classlib/archive/java6/modules/luni/src/main/java/org/apache/harmony/luni/util/HexStringParser.java) which is in need of some Long specific attributes that are either >JDK1.4 or are Harmony specific attributes of Long (I didn't take the time to investigate)\n\nAt any rate, I added the Integer stuff to ArrayUtils and also added some tests.\n\nFor reference, see: \nhttps://svn.apache.org/repos/asf/harmony/enhanced/classlib/archive/java6/modules/luni/src/main/java/org/apache/harmony/luni/util/FloatingPointParser.java\n\nhttps://svn.apache.org/repos/asf/harmony/enhanced/classlib/archive/java6/modules/luni/src/main/java/java/lang/Integer.java\n\n",
            "date": "2009-06-12T19:07:59.056+0000",
            "id": 9
        },
        {
            "author": "Grant Ingersoll",
            "body": "Committed revision 784297.",
            "date": "2009-06-13T02:17:09.849+0000",
            "id": 10
        }
    ],
    "component": "modules/analysis",
    "description": "This TokenFilter is able to split a token based on a delimiter and use one part as the token and the other part as a payload.  This allows someone to include payloads inline with tokens (presumably setup by a pipeline ahead of time).  An example is apropos.  Given a | delimiter, we could have a stream that looks like:\n{quote}The quick|JJ red|JJ fox|NN jumped|VB over the lazy|JJ brown|JJ dogs|NN{quote}\n\nIn this case, this would produce tokens and payloads (assuming whitespace tokenization):\nToken: the\nPayload: null\n\nToken: quick\nPayload: JJ\n\nToken: red\nPay: JJ.\n\nand so on.\n\nThis patch will also support pluggable encoders for the payloads, so it can convert from the character array to byte arrays as appropriate.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1676",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "New Token filter for adding payloads \"in-stream\"",
    "systemSpecification": true,
    "version": ""
}