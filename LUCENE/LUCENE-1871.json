{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "Allows you to take ownership of providing an efficiently resettable TokenStream for highlighting",
            "date": "2009-08-28T16:38:07.921+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Are we also in feature freeze for contrib? As this solution does not affect anything in Token, only the highlighter, we might commit this?",
            "date": "2009-08-28T16:43:06.700+0000",
            "id": 1
        },
        {
            "author": "Mark Miller",
            "body": "With consensus on my side, I have no problem putting this in.",
            "date": "2009-08-28T16:45:14.367+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "I would like to have this in, because there are other use-cases of this. Maybe one TokenStream chain is not caching on the top filter, but maybe directly after the tokenizer and before the lowercase filter (or something like that). In this case you would also add an additional caching to the top of the stream without really needing it.\nBecause of this, the marker-interface method would not do it, too, only something like isRewindable() or isCachingTokens would do it (if Filters pass it up to their input). So as far as one filter would cache tokens, you could detect it even on the top stream.\nThis is the same like the well-known InputStream usage: {code}if (!stream.markSupported) stream=new BufferedInputStream(stream);{code}. markSupported of Filter streams also pass to their input.\n\nI have other places, where it would be good to know if one stream supports reset() for rewinding (or rewind(), which I would prefer). We had this discussion on java-dev some time ago, about decoupling rewinding from resetting a stream.",
            "date": "2009-08-28T16:58:44.849+0000",
            "id": 3
        }
    ],
    "component": "modules/highlighter",
    "description": "I figured this was fine and a rare case that you would have another caching tokenstream to feed the highlighter with - but I guess if its happening to you, especially depending on what you are doing - its not an ideal situation.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1871",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Highlighter wraps caching token filters that are not CachingTokenFilter in CachingTokenFilter",
    "systemSpecification": true,
    "version": "2.9"
}