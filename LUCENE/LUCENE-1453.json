{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "Test exposing the problem and one possible fix for it.",
            "date": "2008-11-15T21:33:03.928+0000",
            "id": 0
        },
        {
            "author": "Mark Miller",
            "body": "So this is a bit of an ugly way to do this. Whats the best way? Some kind of clone support on Directory?",
            "date": "2008-11-17T11:31:41.906+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Hmm good catch Mark!  With LUCENE-1451 we are moving away from sharing instances of FSDir, which will fix this problem in 3.0.  But in the meantime I think this approach is good.  Though, maybe conditionalize it on whether closeDirectory is true?  We should add a comment explaining why are re-getting the FSDir in that case, also explaining that this logic can be removed in 3.0.\n\nI'll make those changes & commit.",
            "date": "2008-11-17T11:45:24.929+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "New patch attached.  If this looks OK to you Mark, I'll commit.  Thanks!",
            "date": "2008-11-17T11:56:14.154+0000",
            "id": 3
        },
        {
            "author": "Mark Miller",
            "body": "Looks great to me. The only nitpick thing I'd change (its a left over from my first patch) is dropping mabyeCopy in SegmentReader into the else clause. Don't think its necessary, but I want to OCD it down.",
            "date": "2008-11-17T12:40:05.710+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Hmm actually it's not so simple, because we also need the directory to be cloned if you reopen the segment or get a whole new SegmentReader.  Also, the case that LUCENE-1430 fixed (in IndexReader.open) also must be guarded against in reopen.  I'll work out a new patch...",
            "date": "2008-11-17T13:51:21.120+0000",
            "id": 5
        },
        {
            "author": "Mark Miller",
            "body": "Ahh, I see. The newReader variable name should have tipped me off <g> I had it in my mind that there could be more but obviously didn't retain the idea (that test actually only breaks on one of the two originals).",
            "date": "2008-11-17T14:06:30.884+0000",
            "id": 6
        },
        {
            "author": "Mark Miller",
            "body": "Goes deeper than I would have guessed (not that I know reopen at all). Still have a test failing...",
            "date": "2008-11-17T16:23:27.100+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "Attached another iteration...\n\nI moved the logic into DirectoryIndexReader's reopen method, and fixed the case where an exception his hit during reopen (eg if a writer is committing, that's expected) to not incorrectly close the directory.\n\nI also strengthened the test cases to verify we are not over-incRef'ing the FSDir.",
            "date": "2008-11-17T18:23:10.594+0000",
            "id": 8
        },
        {
            "author": "Mark Miller",
            "body": "Hmm...I've still got a test that fails. I'll post it tonight or in the morning after a triple check. \n\n...trying to check my shoot from the hip modus operandi for a moment <g>...\n\n*edit*\n\nAh, was optimizing without changing so getting back the same indexreader. Bad test. Patch holding up good so far...",
            "date": "2008-11-18T01:12:16.303+0000",
            "id": 9
        },
        {
            "author": "Mark Miller",
            "body": "Okay, I've banged on it and I can't break it. Thats a brilliant way to do it by the way - not nearly as ugly (and is much shorter and actually works, so thats nice).",
            "date": "2008-11-18T03:20:21.866+0000",
            "id": 10
        },
        {
            "author": "Michael Busch",
            "body": "Patch looks good... I guess this was my bug, so thanks for finding and fixing it Mark and Mike!",
            "date": "2008-11-18T05:06:54.848+0000",
            "id": 11
        },
        {
            "author": "Michael McCandless",
            "body": "OK thanks for the review guys!   I'll commit soon.",
            "date": "2008-11-18T09:46:55.989+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "Committed revision 718540.  Thanks Mark!",
            "date": "2008-11-18T09:58:12.181+0000",
            "id": 13
        },
        {
            "author": "Mark Miller",
            "body": "I think this bug should be called out in changes. Disagree? I've seen 2 to 3 people that have seen it, and it seems we should document that its fixed in this version. I'll add it before the next release if nobody disagrees.",
            "date": "2008-11-25T23:49:24.767+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "I agree -- I just committed an entry to CHANGES.txt.",
            "date": "2008-11-26T10:07:19.384+0000",
            "id": 15
        },
        {
            "author": "Michael McCandless",
            "body": "Reopening for backport to 2.4.1.",
            "date": "2009-02-19T01:37:22.393+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "Committed revision 745797 on 2.4 branch.",
            "date": "2009-02-19T09:54:58.410+0000",
            "id": 17
        },
        {
            "author": "Uwe Schindler",
            "body": "Is this patch obsolete, if LUCENE-1658 is correctly resolved and the whole caching from FSDir is removed?",
            "date": "2009-05-30T22:23:07.294+0000",
            "id": 18
        },
        {
            "author": "Uwe Schindler",
            "body": "It was too late in the night yesterday: I think this is not really related to LUCENE-1658, but this case showed possibly a problem in my code.\nAs this issue is only interesting for IndexReaders opened without \"Directory\" but witch FS path, it was a problem with incomplete removal of the reference counting of FSDirs in an early test.\nIf the problem occurs again, I will reopen this issue.",
            "date": "2009-05-31T07:26:11.478+0000",
            "id": 19
        },
        {
            "author": "Uwe Schindler",
            "body": "After some testing, I found out, that this issue is not fixed. The test \"TestIndexReaderReopen\" fails very often, if all occurences of FSDirectory.getDirectory() are replaced by FSDirectory.open() in IndexReader/IndexWriter and DirectoryReader.\nopen() returns non refcounting single-use directorys that can be closed only one time. If readers on top of this (using the now-deprecated File/String IndexReader.open()) are reopened the directories are sometimes closed false.\nI was hoping, LUCENE-1651 fixes this, but this is not so.\n\nThere are two possibilities to fix this:\nFor both, the first step is to remove the whole closeDir stuff from all IndexReaders and do not close it from within indexReader.\nThen there are two solutions:\n- As FSDir.open() only returns subclasses of FSDir that have a no-op close() method, no closing is required. So we can just leave them open\n- Another possibility is to wrap all readers opened by IR.open() with File/String param by an (deprecated, package private) FilterIndexReader that handles closing the directory in close() and reopen() in a proper way. This is much simplier than doing it inside the DirectoryReader reopen stuff. The small overhead in passing through FilterIndexReader only affects people using the deprecated File/String open() methods. Users, directly using FSDir & Co. have no slowdown.",
            "date": "2009-06-07T22:27:01.417+0000",
            "id": 20
        },
        {
            "author": "Uwe Schindler",
            "body": "Attached is the patch, that replaces all occurences of FSDir.openDirectory() by open(). The test \"TestIndexReaderReopen\" fails almost every time with an AlreadyClosedException.",
            "date": "2009-06-07T22:30:38.436+0000",
            "id": 21
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. There are two possibilities to fix this:\nVote for \"leave them open\". Yes, it breaches the contract, but the breach is controlled (and thus harmless) and we get rid of some weird code (=possible point of failure) without introducing new.\nThere is a way to notice change in DirectoryReader behaviour, but it is too unrealistic:\n{code}\nIndexReader r = IndexReader.open(\"/path/to/index\");\n.....\nDirectory d = r.directory(); // you have to get directory reference as you're not the one who created it\n.....\nr.close();\n.....\nd.doSomething(); // and EXPECT this call to fail with exception\n{code}",
            "date": "2009-06-07T22:44:25.074+0000",
            "id": 22
        },
        {
            "author": "Michael McCandless",
            "body": "Since we've deprecated all methods that are using FSDirectory.getDirectory under-the-hood, why do we even need to fix this?  Ie why replace all these with the new FSDir.open, now, when we're just going to remove them in 3.0 anyway?\n",
            "date": "2009-06-08T11:33:24.568+0000",
            "id": 23
        },
        {
            "author": "Uwe Schindler",
            "body": "Because the error sometimes also occurs with the refcounting directories, but more seldom (because of the refcounting helps to keep the directory open, even when it is closed one time too much).\nAnd our problem: we want to really remove this ugly closeDir stuff from IndexReaders, the code is sometimes unreadable and its hard to find out whats going on.",
            "date": "2009-06-08T12:21:02.664+0000",
            "id": 24
        },
        {
            "author": "Michael McCandless",
            "body": "But the refcounting is also deprecated?  And, IndexReader will no longer track closeDir in 3.0, since that's only set to true in the deprecated methods?\n\nbq. Because the error sometimes also occurs with the refcounting directories,\n\nOh, you mean there is an intermittent failure on the current trunk?  (Ie, when using FSDir.getDirectory under the hood).",
            "date": "2009-06-08T12:48:03.818+0000",
            "id": 25
        },
        {
            "author": "Uwe Schindler",
            "body": "This is the solution using the FilterIndexReader, all tests now pass (with refcounting deprectated dirs as well as FSDir.open-dirs, see next Patch).\nThe solution consists of two parts:\n- All closeDirectory stuff is removed from DirectoryIndexReader (even the ugly FSDir cloning) and from ReadOnlyDirectoryIndexReader; the code is now simplier to understand. It is now on the status for 3.0, no deprecated helper stuff anymore in these internal classes. So they can be used in 3.0 without modifications.\n- As the DirectoryIndexReader is not closing the directory anymore, the deprectated IndexReader.open methods taking String/File would not work anymore correctly (because they miss to close the dir on closing). To fix this easily, a deprectated private class extends FIlterIndexReader was added, that wraps around the DirectoryIndexReader, when File/String opens are used. This class keeps a refcounter that is incremented on reopen/clone and decremented on doClose(). The last doClose, closes the directory. In 3.0 this class can be removed easily with all File/String open() methods. I could remove this class from IndexReader.java and put in a separate package-private file, if you like.\n\nI would like to have this in 2.9, to get rid of these ugly closeDirectory hacks! All tests pass (I retried TestIndexReaderReopen about hundred times and no variant fails anymore). It also works, when replacing the refcounting FSDir.getDirectory by FSDir.open() calls (see next patch).",
            "date": "2009-06-08T21:28:41.892+0000",
            "id": 26
        },
        {
            "author": "Uwe Schindler",
            "body": "This is a variant for testing the same with FSDir.open(). As you see, the reopening now also works correctly here and the underlying directory is not closed too often.\n\nThis patch is for demonstration only.",
            "date": "2009-06-08T21:30:10.070+0000",
            "id": 27
        },
        {
            "author": "Uwe Schindler",
            "body": "I forgot to mention:\n\nbq. Oh, you mean there is an intermittent failure on the current trunk? (Ie, when using FSDir.getDirectory under the hood).\n\nYes, for example, if you clone() and index that owns a directory. In this case the directory was not cloned using the ugly hack currently in trunk (see patches before, which is also removed again by my patch) and was then not correctly refcounted. During reopen(), sometimes DirectoryReader uses clone() to create a new instance, when the readonly flag changed, but the index was not modified. The testcase leads sometimes to exactly this behaviour and fails then.\n\nMy patch now also handles clone correctly, so it fixes all these problems by just factoring out the deprecated Directory management to a FilterIndexReader. DirectoryReader just sees the directory and will never try to close it.",
            "date": "2009-06-09T11:50:44.699+0000",
            "id": 28
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Patch looks fine. I read the last one, LUCENE-1453-with-FSDir-open.patch.",
            "date": "2009-06-09T12:00:51.710+0000",
            "id": 29
        },
        {
            "author": "Uwe Schindler",
            "body": "Both patches are the same, the second one is just using FSDir.open() instead of FSDir.getDirectory. For committing, I would use getDirectory(), the first patch. FSDir.open() would change behaviour for uses relying on the System property to specify the directory impl.",
            "date": "2009-06-09T12:11:33.367+0000",
            "id": 30
        },
        {
            "author": "Michael McCandless",
            "body": "OK patch looks good Uwe!  This is much cleaner, and it's great to be able to get the scary closeDirectory logic entirely out of DirectoryReader.",
            "date": "2009-06-09T15:31:46.438+0000",
            "id": 31
        },
        {
            "author": "Uwe Schindler",
            "body": "Only two discussion points (the first one came up during an IRC chat with Earwin):\n- If DirectoryReader.close() throws an Exception, should the directory still be closed for cleanup? This is implemented exactly that way using a try...finally block in DirectoryOwningIndexReader.doClose(). The old DirectoryReader was different, with all its bugs.\n- Should I factor out DirectoryOwningIndexReader (any better name?) into a separate java file to not overload the already very big IndexReader.java? With 3.0, we could simply remove this class file (because already deprecated)  together with String/File open() .",
            "date": "2009-06-09T17:30:49.135+0000",
            "id": 32
        },
        {
            "author": "Michael McCandless",
            "body": "bq. If DirectoryReader.close() throws an Exception, should the directory still be closed for cleanup? This is implemented exactly that way using a try...finally block in DirectoryOwningIndexReader.doClose(). \n\nI think it should (be closed in a finally clause).\n\nbq. Should I factor out DirectoryOwningIndexReader (any better name?) into a separate java file to not overload the already very big IndexReader.java?\n\nThat sounds good.",
            "date": "2009-06-09T17:48:21.482+0000",
            "id": 33
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. I think it should (be closed in a finally clause).\n\nThen there's the next question of the same sort, but probably belonging in a separate issue. If we close a DR and one of SR throws an exception - should we close the others (currently we don't)? What is the right way, in general, of handling IOExceptions on IR close? Can we retry the close? What does this exception mean?",
            "date": "2009-06-09T18:02:51.726+0000",
            "id": 34
        },
        {
            "author": "Michael McCandless",
            "body": "Good question :)  Exceptions in close are tricky...\n\nIn some places we try hard to keep closing stuff, and then throw the\nfirst exception we hit.  Probably that should be our preferred\napproach, in general, for readers?  (My guess is most apps simply\ncatch & log the IOException, so, we should try hard to close all that\nwe can on the first go.)\n\nIn other places (SR, DR) we don't.\n\nIn general you can retry a close -- calling close more than once on\nLucene classes is allowed (or, we aim for that, but likely not all\nclasses achieve it).\n\nFor writers (IndexWriter, and DR with pending changes) we try hard not\nto lose state on hitting an exception during close.  Meaning, on\nhitting an exception in close, either 1) your state already made it\ninto the index, or 2) if you fix the root cause (free up disk space,\nfix permisisions, whatever, which of course hardly any app is going to\nbe doing) and retry the close, it would succeed, and your index would\nbe fine and your changes are committed.\n",
            "date": "2009-06-09T18:41:09.772+0000",
            "id": 35
        },
        {
            "author": "Uwe Schindler",
            "body": "Here is an updated patch:\n- Factored out the FilterIndexReader\n- Rewrite doClose() in both readers to record the first exception, but still try to close cleanup everything.\n- Some more code cleanup, CHANGES.txt\n\nIt is ready to commit. Mike will you do this, or should I assign myself to this issue?",
            "date": "2009-06-09T21:36:24.840+0000",
            "id": 36
        },
        {
            "author": "Uwe Schindler",
            "body": "Do we need to backport to 2.4.2? It's not so easy, because DirectoryReader does not yet exist there (so you cannot simply apply the patch)...\nWithout backporting, clone() would not work correctly with shared FSDir IndexReaders.\n\nAnd: Backporting would hurt performance, because 2.4 does not use per-segment search, so each call from the searcher is passed through the FilterIndexReader...",
            "date": "2009-06-09T21:40:26.512+0000",
            "id": 37
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Two suggestions:\n\nFactor out RefCount class and use it everywhere through Lucene. I see at least one identical to yours in SegmentReader. Would be easier to replace all these uses with AtomicInteger later.\n\nLooking at the new unsightly loop in doClose(), what if we change all Lucene closeable classes to implement java.io.Closeable and create a static utility method(-s) that receives a bunch of Closeables (an array, iterable, vararg in 1.5) and tries to close them all?\nThe method should be nullsafe (so you can skip != null checks) and will handle/rethrow exceptions. The most proper way to handle exceptions is probably this - rethrow original exception if it is the only one (be it Runtime or IO), if there's more - gather all exceptions and wrap them into a special IOException subclass that concatenates their messages and keeps them around, so they are inspectable at debug-time or if you implement special treatment for that exception in your code.\nThis method can be reused in a heap of places later, SR.doClose() comes first to mind.\n\nI can do the latter one in a separate patch to close this issue faster.",
            "date": "2009-06-09T23:37:59.727+0000",
            "id": 38
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi Earwin,\nattached is a patch, that simply reuses SegmentReader.Ref. Factoring it out to o.a.l.util would be harder to do at the moment (some test-cases rely on this class). And SegmentReader seems to be the only class, that uses such a Ref construct. Other classes have their refCounter as Field.\nAs the Filter is just a deprecated wrapper, that is removed in 3.0, I think reusing SegmentReader.Ref for that is ok.\n\nThis patch also contains a new test for clone(), that does the same like the reopen test (checking the refcounts).\n\nCloseable is a Java 1.5 interface only, so this refactoring must wait until 3.0, but the idea is good!",
            "date": "2009-06-10T09:39:19.381+0000",
            "id": 39
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Mike will you do this, or should I assign myself to this issue?\n\nGo ahead & assign to yourself!",
            "date": "2009-06-10T09:47:32.546+0000",
            "id": 40
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. As the Filter is just a deprecated wrapper, that is removed in 3.0, I think reusing SegmentReader.Ref for that is ok. \nOk. Maybe you are right.\n\nbq. Closeable is a Java 1.5 interface only, so this refactoring must wait until 3.0, but the idea is good!\nWe can introduce our own Closeable, and replace it with java native in 3.0, thank gods the interface is simple :)",
            "date": "2009-06-10T09:48:24.847+0000",
            "id": 41
        },
        {
            "author": "Uwe Schindler",
            "body": "Mike: OK, I commit the latest patch soon!\n\nEarwin:\n{quote}\nbq. Closeable is a Java 1.5 interface only, so this refactoring must wait until 3.0, but the idea is good!\n\nWe can introduce our own Closeable, and replace it with java native in 3.0, thank gods the interface is simple \n{quote}\nI think you should open an issue about that. But the own closeable should be declared as deprecated from the beginning with the note \"will be replaced by java.io.Closeable\" in 3.0.",
            "date": "2009-06-10T10:01:04.854+0000",
            "id": 42
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision 783280.\n\n2.4 branch is untouched, if backporting is needed (because somebody has problems with reopen/clone), reopen this issue!",
            "date": "2009-06-10T10:11:10.992+0000",
            "id": 43
        },
        {
            "author": "Michael McCandless",
            "body": "I'm seeing a failure in back-compat tests (\"and test-tag -Dtestcase=TestIndexReader\"):\n\n{code}\n    [junit] Testcase: testFalseDirectoryAlreadyClosed(org.apache.lucene.index.TestIndexReader):\tFAILED\n    [junit] did not hit expected exception\n    [junit] junit.framework.AssertionFailedError: did not hit expected exception\n    [junit] \tat org.apache.lucene.index.TestIndexReader.testFalseDirectoryAlreadyClosed(TestIndexReader.java:1514)\n{code}\n\n(I assume, but I'm not certain, it's from this fix...).",
            "date": "2009-06-10T10:54:28.655+0000",
            "id": 44
        },
        {
            "author": "Uwe Schindler",
            "body": "Thanks Mike,\nit is from this fix. The test should normally also fail with trunk, but it doesn't because we are using FSDir.open() in the trunk test. This is another test that relies on the refcounting of FSDir.getDirectory.\n\nThe problem:\nIf you do IndexReader.open() on a invalid index and IndexReader.open fails with an Exception, the Directory keeps open (because the wrapper has no chance to close it). I'll fix this and also enable FSDir.getDirectory for this test in trunk.",
            "date": "2009-06-10T11:45:40.864+0000",
            "id": 45
        },
        {
            "author": "Uwe Schindler",
            "body": "This fixes this special case and the test on trunk to also hit this, I commit soon!",
            "date": "2009-06-10T12:00:29.299+0000",
            "id": 46
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision 783314. Thanks Mike! Next time I will also test-tag, sorry.\n\nI will go through all other tests using FSDir.open() in trunk now and check, if there are more cases, that rely on refcounting. They can be found easily, because they catch AlreadyClosedException.",
            "date": "2009-06-10T12:26:37.317+0000",
            "id": 47
        },
        {
            "author": "Michael McCandless",
            "body": "OK thanks Uwe!",
            "date": "2009-06-10T12:48:29.532+0000",
            "id": 48
        }
    ],
    "component": "",
    "description": "Rough summary. Basically, FSDirectory tracks references to FSDirectory and when IndexReader.reopen shares a Directory with a created IndexReader and closeDirectory is true, FSDirectory's ref management will see two decrements for one increment. You can end up getting an AlreadyClosed exception on the Directory when the IndexReader is open.\n\nI have a test I'll put up. A solution seems fairly straightforward (at least in what needs to be accomplished).",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1453",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "When reopen returns a new IndexReader, both IndexReaders may now control the lifecycle of the underlying Directory which is managed by reference counting",
    "systemSpecification": true,
    "version": "2.4"
}