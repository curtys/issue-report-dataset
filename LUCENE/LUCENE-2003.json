{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "Umm - its hard to emulate the positions stuff from phrasequery with a SpanQuery. A limitation I hadn't really though much of. Should be doc'd.\n\nOne - uh - sloppy fix - is to count up all of the extra positions and add that to the slop.\n\nie if the positions for a phrasequery are 0, 1, 3 (stop word removed at 2), you would add 1 to the slop. 0,1,3,5 - add 2 to the slop.\n\nI think that keeps a fairly good approximation.\n\nHavn't thought about how that would work with MultiPhraseQuery yet.",
            "date": "2009-10-22T19:27:05.076+0000",
            "id": 0
        },
        {
            "author": "Mark Miller",
            "body": "Well no crap - MultiPhraseQuery already does that. Someone else contrib'd that. Guess they are ahead of me - would have saved some thought to look at it :)",
            "date": "2009-10-22T19:31:13.569+0000",
            "id": 1
        },
        {
            "author": "Mark Miller",
            "body": "Here is a patch showing essentially what I mean",
            "date": "2009-10-22T19:40:12.899+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "Could you explain this part?\n{code}\n+          if (inc > lastInc) {\n+            slop += inc;\n+          }\n{code}\n\nSeems like that would cause \"A ??? B ??? C ??? D\" to only have a slop of 3 (? represents a gap of 1).\n\nCouldn't slop just be maxPos-minPos+1-numTokens?\n",
            "date": "2009-10-22T19:53:11.913+0000",
            "id": 3
        },
        {
            "author": "Mark Miller",
            "body": "Hmm - well now you have me worried - never seen you be wrong.\n\nI just tried a test like that and it appeared to work though.\n\nAh - I should have looked closer at the MultiPhraseQuery code - it is wrong - just happens to work.\n\nYou only need to add to the slop the largest inc, because the SpanQuery slop is the dist allowed between *each* span.\n\nSo thats why it works - it finds 3 the first time, doesn't add any more for the rest, but 3 is enough. I'll fix.",
            "date": "2009-10-22T20:10:51.024+0000",
            "id": 4
        },
        {
            "author": "Mark Miller",
            "body": "This should be more correct - add the largest inc to the slop if its great than 1.\n\nGotto consider this against your suggestion.",
            "date": "2009-10-22T20:16:08.425+0000",
            "id": 5
        },
        {
            "author": "Mark Miller",
            "body": "Okay - I think this is the way to go -  maxPos-minPos+1-numTokens is too much slop because it just has to be the largest posInc - forgot thats how SpanQueries work when I did the orig patch.",
            "date": "2009-10-22T20:20:29.944+0000",
            "id": 6
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. You only need to add to the slop the largest inc, because the SpanQuery slop is the dist allowed between each span.\n\nLearn something new every day :-)\n\nIs this javadoc incorrect, or simply ambiguous, or am I reading it wrong:\n{code}\n  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n{code}\n\nThe \"total\" would almost seem to tip the ambiguity toward meaning that it's the total slop between all clauses.",
            "date": "2009-10-22T20:22:35.141+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "OK Mark you get this one :)",
            "date": "2009-10-22T20:27:51.898+0000",
            "id": 8
        },
        {
            "author": "Mark Miller",
            "body": "bq. The \"total\" would almost seem to tip the ambiguity toward meaning that it's the total slop between all clauses.\n\nYeah, I think it needs to be changed. Total appears just wrong. Perhaps something more along the lines of:\n\nMatches spans matching a span from each clause, with up to <code>slop</code> unmatched positions between each of them",
            "date": "2009-10-22T20:29:48.858+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "Mark is this one done?",
            "date": "2009-10-23T21:09:02.044+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "Bulk close all 2.9.1 issues.",
            "date": "2009-11-07T14:57:30.953+0000",
            "id": 11
        }
    ],
    "component": "",
    "description": "This is a followup on LUCENE-1987:\n\nIf you set in HighligterTest the constant static final Version TEST_VERSION = Version.LUCENE_24 to LUCENE_29 or LUCENE_CURRENT, the test testSimpleQueryScorerPhraseHighlighting fails. Please note, that currently (before LUCENE-2002 is fixed), you must also set the QueryParser to respect posIncr.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2003",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Highlighter has problems when you use StandardAnalyzer with LUCENE_29 or simplier StopFilter with stopWordsPosIncr mode switched on",
    "systemSpecification": true,
    "version": "2.9, 3.0"
}