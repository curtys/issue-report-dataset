{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "Why not simply use floatToIntBits without the raw? This one normalized NaN.\nWe used the raw methods for speed reasons as we assumed that NaN sorting makes no sense and NumericRangeQuery cannot usefully select those values. E.g. half open ranges will select NaN values incorrectly, so an index containing NaN values is not useable with NRQ where the upper bound is null.\n\nThe same applies to Doubles, you patch is missing them.",
            "date": "2011-11-18T21:25:06.485+0000",
            "id": 0
        },
        {
            "author": "Dawid Weiss",
            "body": "bq. Why not simply use floatToIntBits without the raw?\n\nThere is no specific reason -- I wrote a similar routine using floatToIntBits, actually, but Robert pointed out that using raw bits may be faster and that NumericUtils already has a method for doing float sorting using fixed precision arithmetic. I checked the source (it's not suitable for my needs because I need unsigned order) but noticed the code is incorrect. That's pretty much it ;)\n\nI admit I thought floatToIntBits normalizes the representation (mantissa) but it doesn't -- in fact, the implementation in OpenJDK is indeed identical to what I suggested.\n\nFeel free to commit and correct for doubles.",
            "date": "2011-11-18T21:52:12.703+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "So you agree if we exchange with flotToIntBits the bug is fixed. I would prefer to use the native JDK implementation, maybe it will get replaced by an intrisic :-)\n\nFor NumericRangeQuery any change in this method has no real effect, as its broken/not working for NaN at all. To fix this, NumericRangeQurey.newFloatRange(.., f, null,...) should be explicitely use Float.POSITIVE_INFINITY instead of null, otherwise some NaNs could be selected, too (with your normalization all NaNs would be inside that range).\n\nWhat should we do here?\n",
            "date": "2011-11-18T22:10:41.988+0000",
            "id": 2
        },
        {
            "author": "Dawid Weiss",
            "body": "bq. So you agree if we exchange with flotToIntBits the bug is fixed.\n\nYes, as far as I can see the implementation of floatToIntBits is exactly floatToRawIntBits + normalization of NaN. I doubt there'll be intrinsics for that -- the code is short and simple enough that it will probably inline and jit into a few assembly instructions anyway.\n\nI don't quite understand the other part of your question... the code in my patch is virtually the same as floatToIntBits:\n\n\n        int result = floatToRawIntBits(value);\n        // Check for NaN based on values of bit fields, maximum\n        // exponent and nonzero significand.\n        if ( ((result & FloatConsts.EXP_BIT_MASK) ==\n              FloatConsts.EXP_BIT_MASK) &&\n             (result & FloatConsts.SIGNIF_BIT_MASK) != 0)\n            result = 0x7fc00000;\n        return result;\n\nThe only difference is that this doesn't normalize \"significant\" NaNs (failing), but I don't know if they're even used in jvm code anywhere.",
            "date": "2011-11-18T22:31:19.285+0000",
            "id": 3
        },
        {
            "author": "Yonik Seeley",
            "body": "We don't really support NaN as a value in Lucene in general I think.  I know that our sorting (priority queue) methods don't support NaN, and this is why FunctionQuery has the following code:\n\n{code}\n      // Current Lucene priority queues can't handle NaN and -Infinity, so\n      // map to -Float.MAX_VALUE. This conditional handles both -infinity\n      // and NaN since comparisons with NaN are always false.\n      return score>Float.NEGATIVE_INFINITY ? score : -Float.MAX_VALUE;\n{code}",
            "date": "2011-11-18T22:43:43.456+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "I have no preference to floatToIntBits or floatToRawIntBits. I just copied the code from Yoniks method from Solr, my original NumericRangeQuery code donation back in the past used floatToIntBits. I just said, the behaviour of NaN in NumericRangeQuery is undefined so there was no reason to support NaN with NRQ at all. So I dont care. It does affect NRQ, but to fix NRQ correctly, half open ranges must be modified to end at Positive_infnity, but then NRQ can never match NaN.\n\nIn my opinion, NumericUtils is made for NumericRangeQuery and the raw method is an intrinsic, we should use it. I would simply not like to fix this.\n\nIf we fix it, i have to add some checks in NRQ's ctor, too. So it supports NaN.",
            "date": "2011-11-18T22:47:18.450+0000",
            "id": 5
        },
        {
            "author": "Dawid Weiss",
            "body": "Ok, don't fix it then, no problem from me -- like I said, I only found out because I looked inside. It's not a bug, it's a feature ;)\n\nI personally think utility methods should work correctly for all kinds of input -- that utility method in NumericUtils should at least say it doesn't support NaN (or better: assert so).",
            "date": "2011-11-18T22:49:44.591+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "I agree that normalizing Nan would be goof for NRQ, because this way you can search for NaN using:\nNumericRangeQuery.newFloatRange(...., Float.NaN, Float.NaN, true, true);\n\nOtherwise the bits produced for the bounds may not be the same bits like indexed and thats the main problem. This  would fix this issue. Another thing to maybe fix would be the half-open ranges to correctly handle infinity. In that case a NRQ would never hit NaN (even when half open) but with the above query you could still search for NaN (as a \"point value\"). ",
            "date": "2011-11-18T23:00:06.985+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "Here a patch that fixes NumericRangeQuery to correctly handle NaN. If the upper/lower bounds == null, it will replace that by infinity and will never match NaN (this was a bug before). If you want to hit NaN with NRQ, you can do that only by directly hitting it using NumericRangeQuery.newFloatRange(\"float\", Float.NaN, Float.NaN, true, true)\n\nThis patch also handles doubles in addition to floats and uses the native Java method without raw. Tests were modified to check for NaN, too.\n\nThe use of floatToIntBits instead of floatToRawIntBits has no real performance impact, as this method is only used during indexing. Population of FieldCache is unaffected. It just ensures that indexes are built with normalized NaN values, so NRQ can work correctly.\n\nStored fields were already stored using the non-raw method, so this is now consistent.",
            "date": "2011-11-19T00:39:09.413+0000",
            "id": 8
        },
        {
            "author": "Dawid Weiss",
            "body": "Looks good to me. Thanks Uwe.",
            "date": "2011-11-19T08:17:04.651+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Improved tests for NRQ. Ready to commit.",
            "date": "2011-11-19T10:54:49.169+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. I assume this check will be faster here than (v != v)\n\nThis is the in my opinion the funniest thing you can show your students about floats. Everybody will tell you this can never be true :-)\n\nIndeed OpenJDKs isNaN() is implemented exactly like that, it returns (v != v).",
            "date": "2011-11-19T11:20:24.974+0000",
            "id": 11
        },
        {
            "author": "Dawid Weiss",
            "body": "Isn't that a shocking experience? :)\n",
            "date": "2011-11-19T12:05:13.150+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 1203966\nCommitted 3.x revision: 1203967",
            "date": "2011-11-19T12:08:32.597+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "Bulk close after release of 3.5",
            "date": "2011-11-27T12:29:32.069+0000",
            "id": 14
        }
    ],
    "component": "",
    "description": "The current implementation of floatToSortableInt does not account for different NaN ranges which may result in NaNs sorted before -Infinity and after +Infinity. The default Java ordering is: all NaNs after Infinity.\n\nA possible fix is to make all NaNs canonic \"quiet NaN\" as in:\n{code}\n// Canonicalize NaN ranges. I assume this check will be faster here than \n// (v == v) == false on the FPU? We don't distinguish between different\n// flavors of NaNs here (see http://en.wikipedia.org/wiki/NaN). I guess\n// in Java this doesn't matter much anyway.\nif ((v & 0x7fffffff) > 0x7f800000) {\n  // Apply the logic below to a canonical \"quiet NaN\"\n  return 0x7fc00000 ^ 0x80000000;\n}\n{code}\n\nI don't commit because I don't know how much of the existing stuff relies on this (nobody should be keeping different NaNs  in their indexes, but who knows...).",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3582",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Trivial",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "NumericUtils.floatToSortableInt/doubleToSortableLong does not sort certain NaN ranges correctly and NumericRangeQuery produces wrong results for NaNs with half-open ranges",
    "systemSpecification": true,
    "version": ""
}