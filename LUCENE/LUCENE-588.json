{
    "comments": [
        {
            "author": "Daniel Naber",
            "body": "The problem is that the WildcardQuery itself doesn't have a concept of escaped characters. The escape characters are removed in QueryParser. This mean \"t?\\?t\" will arrive as \"t??t\" in WildcardQuery and the second question mark is also interpreted as a wildcard.\n",
            "date": "2007-11-28T23:26:29.796+0000",
            "id": 0
        },
        {
            "author": "Daniel Naber",
            "body": "Also, the original report and my comment look confusing because Jira removes the backslash. Imagine a backslash in front of *one* of the question marks.",
            "date": "2007-11-28T23:28:52.077+0000",
            "id": 1
        },
        {
            "author": "Michael Busch",
            "body": "True... a solution might be to have the queryparser map escaped chars to some\nunused unicode codepoints. Then the WildcardQuery could distinguish escaped\nchars. I'd guess that other classes, like FuzzyQuery might have the same problem?\n\nThe advantage of such a char mapping is that we can keep the String API and\ndon't have to add special APIs to the Query objects for the queryparser.",
            "date": "2007-11-28T23:38:25.166+0000",
            "id": 2
        },
        {
            "author": "Sunil Kamath",
            "body": "The documentation does state that escaping of the \"?\" character by prepending a \"\\\" character is supported.",
            "date": "2007-11-29T14:28:22.168+0000",
            "id": 3
        },
        {
            "author": "Hoss Man",
            "body": "you're refering to the documentation for the querysyntax, used by the QueryParser ... which is in fact true: you can \\ escape both * and ? as far as the QueryParser goes -- but the WildcardQuery class doesn't support (nor does it's documentation advertise) any escape characters.\n\nIn a nut shell: you can escape the characters so QueryParser doesn't consider them wildcards -- which will influence whether or not QP builds a WIldcardQuery or a TermQuery, but WildcardQuery doesn't know or care about escape characters.\n\nConsider these examples, and assume a whitespace analyzer....\n{code}\nparse(\"lucene\") -> new TermQuery(\"lucene\")\nparse(\"lu?ene\") -> new WIldcardQuery(\"lu?ene\")\nparse(\"lu\\?ene\") -> new TermQuery(\"lu?ene\")\nparse(\"lu\\?e?e\") -> new WIldcardQuery(\"lu?e?e\")\nparse(\"lu\\?e\\?e\") -> new TermQuery(\"lu?e?e\")\n{code}\nthat's why it works the way it does.\n\nas for how to improve it: It seems reasonable for WildcardQuery to have a boolean constructor arg indicating whether or not it should respect \"standard\" backslash escape sequences ... and then QueryParser could have an option to pass the \"raw\" string (with escapes) to this new constructor.\n",
            "date": "2007-11-30T02:30:14.298+0000",
            "id": 4
        },
        {
            "author": "Terry Yang",
            "body": "I wrote my first patch to this issue. if QueryParser knows the query is wildcard, it will directly pass the original query string to WildcardQuery which knows exactly which character is wildcard or not. i copied part of discardEscapeChar method from QueryParser because discardEscapeChar will throw ParseException which will causes WildcardQuery changed much. i am looking for a help/idea about what is the better way to process this exception?",
            "date": "2007-12-17T15:11:00.314+0000",
            "id": 5
        },
        {
            "author": "Michael Busch",
            "body": "I think we should add a new constructor to WildcardQuery like this:\n\n{code:java}\n  public WildcardQuery(Term term) {\n    this(term, WildcardTermEnum.WILDCARD_CHAR, WildcardTermEnum.WILDCARD_STRING);\n  }\n  \n  public WildcardQuery(Term term, char wildcardChar, char wildcardString) {\n    super(term);\n    this.wildcardChar = wildcardChar;\n    this.wildcardString = wildcardString;\n    \n    this.termContainsWildcard = (term.text().indexOf(wildcardChar) != -1) \n                                || (term.text().indexOf(wildcardString) != -1);\n  }\n{code}\n\nThen the WildcardQuery doesn't need to know anything about escaping and the QueryParser\ncan just map wildcard characters that weren't escaped to some other unused chars and can\nunescape * and ? chars.\n\nThe only disadvantage of this design would be that the WildcardQuery.toString() would not\nproduce a String anymore that the QueryParser could parse. However, I think the requirement\nof Query.toString() to produce a parseable String is not very good anyways, because it adds\na dependency between the Query classes and the QueryParser. I'd prefer to add a method\nlike:\n{code:java}\nString toQueryString(Query);\n{code}\nto the QueryParser. Then Query.toString() wouldn't be tied anymore to a specific QueryParser\nimplementation and syntax. Thoughts?\n\nTerry are you still around? Would you like to work on a new patch here?",
            "date": "2008-05-24T22:29:57.638+0000",
            "id": 6
        },
        {
            "author": "Luis Alves",
            "body": "The new QP has built in support for this.\n\nIf someone has time to test it or write some testcases I can help fix any problems that might appear.\nThe new query parser is in contrib/queryparser. See for more details LUCENE-1567.",
            "date": "2009-08-18T09:02:15.298+0000",
            "id": 7
        },
        {
            "author": "Michael Busch",
            "body": "We'll try to fix this in combination with LUCENE-1823.",
            "date": "2009-08-19T05:30:48.123+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "In the flex branch, WildcardQuery (like RegexpQuery) is just a parser for AutomatonQuery.\n\nits pretty easy to add support for things like this if we still want it. Attached is a patch.",
            "date": "2010-04-02T03:07:23.667+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "This one came up recently on the mailing list: see http://www.lucidimagination.com/search/document/637848ac365edda6/problem_escaping_question_marks\n\nAgain its technically easy to fix in 4.0, but we just need to decide if WildcardQuery/QueryParser should just \nsupport escaped terms, instead of backwards compatibility stuff/Version/etc?\n\nEven if we make it \"fully backwards compatible\" some things will need to change, \nfor instance Solr's \"reverse wildcard\" support should instead reverse the actual Automaton\ninstead of the query string, this way it won't screw up the escapes... but this is\nreally cleaner anyway.\n",
            "date": "2010-11-04T13:35:57.534+0000",
            "id": 10
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. Again its technically easy to fix in 4.0, but we just need to decide if WildcardQuery/QueryParser should just support escaped terms, instead of backwards compatibility stuff/Version/etc?\n\nPeople wouldn't be escaping wildcards and expecting them to still be treated as wildcards, so IMO back compat has no value here.",
            "date": "2010-11-04T14:22:41.444+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "bq. People wouldn't be escaping wildcards and expecting them to still be treated as wildcards, so IMO back compat has no value here.\n\nOk, i would prefer to not create a mess and just change the behavior: add support for this to WildcardQuery and \nthe QP (it is a trivial change there), and fix the reversing in Solr.\n\nI'll make a patch.\n",
            "date": "2010-11-04T14:28:02.711+0000",
            "id": 12
        },
        {
            "author": "Robert Muir",
            "body": "here's a patch: i also fixed SolrQueryParser not to reverse the query string, but instead the actual automaton.\nThis way, it has no problems with what is escaped and what isn't.\n\nadditionally its ReverseWildcard tests needed some revamping... they were using Query.toString to check\nif a term was reversed or not... but with this approach its transparent and we don't work on Strings.\n\nBut i couldn't figure out the contrib/queryparser... i left a test with @Ignore for now that fails.\n",
            "date": "2010-11-04T16:13:53.501+0000",
            "id": 13
        },
        {
            "author": "Robert Muir",
            "body": "Committed revision 1031765",
            "date": "2010-11-05T20:08:29.133+0000",
            "id": 14
        }
    ],
    "component": "core/queryparser",
    "description": "If an escaped wildcard character is specified in a wildcard query, it is treated as a wildcard instead of a literal.\ne.g., t\\??t is converted by the QueryParser to t??t - the escape character is discarded.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-588",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Escaped wildcard character in wildcard term not handled correctly",
    "systemSpecification": true,
    "version": "2.0.0"
}