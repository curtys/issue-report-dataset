{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "here's my patch, again for what its worth.",
            "date": "2012-02-19T20:35:31.979+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "looking at the benchmarks again: I think there is an \"off-by-a-factor-of-one-thousand\" on the benchmark.\n\nI could not for the life of me figure out why these suggesters would have e.g. 220QPS, but I think instead\nthat the benchmark is wrong. So 200,000-210,000QPS compared to 220,000QPS really cannot matter!\n\nIf the benchmark can really satisfy 50000 queries in 220 ms, thats no 226QPS!\n \nI'll come back with a PairOutputs test in a bit to confirm the functionality but I'm not going to worry\nabout 5%/10% performance here, thats crazy.",
            "date": "2012-03-01T06:50:56.658+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "updated patch with tests (which exposes a real problem!).\n\nI created \"paired\" versions (Pair<Long,Long> where its weight,output) of the two existing shortestPath tests: the simple one, and the random one. The simple one passes (somehow), but the random one triggers an assertion in shortestPaths\n\nBasically the issue is that the original impl has an optimization: when you pick some minimum path (say 5), you know there is sequence of all zeros leading to some final state, otherwise its not actually the minimum :)\n\nThe code takes advantage of this and (fortunately) asserts that it finds this path of all NO_OUTPUTs. \n\nThe problem is if you have a PairOutputs(weight,output), its only NO_OUTPUT if *both* weight and output are also NO_OUTPUT, but this only holds true for the weight... the output has its own separately pushed minimums that don't necessarily correspond...\n\n",
            "date": "2012-03-02T12:21:47.196+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "I think this might not be hard to fix, consider my comparator:\n{code}\n// compares just the weight side of the pair\nstatic final Comparator<Pair<Long,Long>> minPairWeightComparator = new Comparator<Pair<Long,Long>> () {\n  public int compare(Pair<Long,Long> left, Pair<Long,Long> right) {\n    return left.output1.compareTo(right.output1);\n  }  \n};\n{code}\n\nInstead of looking for a NO_OUTPUT path, I think we should instead express \"output == NO_OUTPUT\" as \"comparator.compare(previousOutput, outputs.add(previousOutput, output)) == 0\",\nIll rerun benchmarks but i don't think this will hurt.",
            "date": "2012-03-02T12:29:10.221+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "updated patch, instead of looking for 'output == 0' using the 'previousOutput + output == previousOutput' via the comparator.\n\nrandom test passes now",
            "date": "2012-03-02T12:45:49.933+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "I think this patch is ready to commit, but the tricky FST math there (compare + add) does add some additional cost.\n\nStill, I think 180,000QPS versus 210,000QPS or whatever, who cares. Being able to separately have weights and outputs and\ndo shortest path operations on just the weight side (with any Outputs representation) is really powerful and I think we can\nuse it to improve our suggesters.\n\nBenchmarks are all in QPS with a top-N of 7 suggestions (50,000 inputs)\n\n||impl||prefixes 2-4||prefixes 6-9||prefixes 100-200||\n|Jaspell|129,000|330,000|436,000|\n|TST|31,000|258,000|820,000|\n|FST|330,000|263,000|269,000|\n|WFST|209,000|606,000|781,000|\n|WFST-Generic|179,000|521,000|708,000|\n\nI'll wait a bit in case someone wants to review or knows of ways to speed up the patch :)\n",
            "date": "2012-03-02T13:10:18.826+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "Hmm actually, i think we can speed this up a little bit if we re-arrange stuff in the addIfCompetitive?\nCurrently this patch causes us to 'add twice' (once for the A + B = A stuff, and then again in addIfCompetitive!)\n",
            "date": "2012-03-02T13:14:48.459+0000",
            "id": 6
        },
        {
            "author": "Christian Moen",
            "body": "If it's possible to speed things up, that's great.  Regardless, I think the flexibility vs. speed trade-off you are proposing here is a very good idea.  Powerful stuff, indeed.  +1.",
            "date": "2012-03-02T13:21:43.797+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "yeah as an example use case we could use Pair<weight,originalText> as an 'output' but \nstore the kuromoji-generated readings as the input side for japanese text, we would\njust analyze the japanese input to a reading at query-time too and I think it would work...\n",
            "date": "2012-03-02T13:33:27.834+0000",
            "id": 8
        },
        {
            "author": "Christian Moen",
            "body": "Exactly.  If we match on normalized forms that also deal with the combined scripts users would use when they type in Japanese queries, i.e. \u307b\u3063k to get \u5317\u6d77\u9053 (Hokkaido) suggested, I think we have a good starting point to build a Japanese query suggester/autocompleter.",
            "date": "2012-03-02T13:45:15.719+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "I think instead of per-arc add (to find the NO_OUTPUT arc) you can just do comparator.compare(arc.output, NO_OUTPUT) == 0.\n\nOtherwise patch looks great!  I think the perf loss if acceptable...\n\nVery exciting!",
            "date": "2012-03-02T13:47:51.498+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nI think instead of per-arc add (to find the NO_OUTPUT arc) you can just do comparator.compare(arc.output, NO_OUTPUT) == 0.\n{quote}\n\nI have no idea what I was thinking... this is why we have code reviews i guess :)\n\nIll upload a new patch with new benchmarks.",
            "date": "2012-03-02T13:53:08.578+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "updated patch with mike's idea.\n\nthis wins some perf back:\n\n||impl||prefixes 2-4||prefixes 6-9||prefixes 100-200||\n|Jaspell|129,000|330,000|436,000|\n|TST|31,000|258,000|820,000|\n|FST|330,000|263,000|269,000|\n|WFST|209,000|606,000|781,000|\n|WFST-Generic|190,000|550,000|765,000|\n\nI think this is ok... I'll commit soon.",
            "date": "2012-03-02T14:47:06.365+0000",
            "id": 12
        }
    ],
    "component": "core/FSTs",
    "description": "Not sure we should do this, it costs 5-10% performance for WFSTSuggester.\nBut maybe we can optimize something here, or maybe its just no big deal to us.\n\nBecause in general, this could be pretty powerful, e.g. if you needed to store \nsome custom stuff in the suggester, you could use pairoutputs, or whatever.\n\nAnd the possibility we might need shortestPaths for other cool things... at the\nleast I just wanted to have the patch up here.\n\nI haven't tested this on pairoutputs... but i've tested it with e.g. FloatOutputs\nand other things and it works fine.\n\nI tried to minimize the generics violations, there is only 1 (cannot create generic array).\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3801",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Generify FST shortestPaths() to take a comparator",
    "systemSpecification": true,
    "version": "3.6, 4.0-ALPHA"
}