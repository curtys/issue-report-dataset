{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "I will work on this tomorrow and provide a patch. I will also update the patch in LUCENE-1606 to move the initial seek out of ctor (its easy, see below).\n\nThe setEnum method should be renamed in something like setInitialTermRef(). So the default impl of next() will seek to the correct term and do not seek by default (iterate all terms of field).",
            "date": "2009-12-03T23:46:07.073+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Here my patch for this.\n\nI rewrote the whole FilteredTermsEnum and made it natively support seeking needed for NRQ and Automaton.\n\nThis initial patch is for review only, but all tests pass. I will try to modify Robert's patch, as soon as he provided me an updated Patch for Automaton flex branch.\n\nThe enum works different than before:\nIt is positioned before the first term (like it should), seeking is no longer supported (as not needed for MTQ) and not implementable for seeking enums like NRQ or Automaton.\n\nIn the constructor you give index reader and field name, as TermsEnum can only iterate one field in flex, this is no limitation.\n\nFor non-seeking enums you can set the initial term to seek to with setInitialSeekTerm(TermRef) in the ctor. The rest of the enum then behaves as before.\n\nFor seeking enums like Automaton/NRQ you override a secondary iterator method nextSeekTerm() that returns the next TermRef the underlying iterator should seek to. This method is called, when accept() returns END (and also on the first next() call, of course). The default impl of this method just returns the initial seek term as explained above one time and then null.\n\nEverything else stands in the javadocs.",
            "date": "2009-12-04T16:18:52.850+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, I will look at re-porting automaton to flex so you can test this. (now it has good tests and sort order/unicode crap is fixed and they should all pass).\n",
            "date": "2009-12-04T16:32:14.655+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "This is a great improvement Uwe... I like it.\n\nIs an MTQ allowed to return nextSeekTerm's out of order?  (I know NRQ/automaton don't need to do so, but, if it's fine we should maybe call that out in the javadocs...).  Though, FilteredTermsEnum, being a \"TermsEnum\", is \"supposed\" to return terms in getTermComparator() order... however its consumers (the rewrite methods for MTQ) usually don't in fact care.  Hmm I wonder if it should even subclass TermsEnum?  It doesn't seek and it's free to return terms in a different order...",
            "date": "2009-12-04T16:50:05.315+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "Updated patch also incorporating the needed changes for SingleTermsEnum to make it work with new API. Now it is at least a 5-code-liner :-)\n\nI also fixed a method call instead of parameter usage in TermRangeTermsEnum. Also added Mike's comment In my opinion, we should keep it as TermsEnum, even when seeking does not work, which is documented. In my code I often use PrefixTerm(s)Enum for autocomplete cases - works good - and for that it is only handles as a Term(s)Enum for iterating making it simplier to reuse code working on Term(s)Enums. Also made some mebers final, I forgot this during restructuring the code.\n\nWhat I forgot to mention: I made the abstract methods in FilteredTermsEnum also throw IOException, so maybe subclasses, doing strange things, would compile.",
            "date": "2009-12-04T18:25:33.557+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "bq. In my opinion, we should keep it as TermsEnum, even when seeking does not work, which is documented\n\nOK, let's keep it as subclassing TermsEnum.  Maybe we should relax the docs for TermsEnum to state that each subclass determines order.  Nothing in TermsEnum itself requires a particular order.",
            "date": "2009-12-04T18:54:43.810+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "New patch with the attribute support of LUCENE-2109.\n\n- Also fixes a bug in the BW compatibility layer of MTQ (if clause wrong).\n- Some code cleanup in FilteredTermsEnum (now easier to read, as next() and seekNextTerm is complicated).\n- Added EmptyTermsEnum for shortcuts (used by NRQ and TRQ on inverse ranges). This enum never does any disk I/O to terms dict, it is just empty. EmptyTermsEnum again supports seeking (although subclass of FilteredTermsEnum), but it is simple there, it returns just END :-)\n\nI will now port Automaton and apply will provide a combined patch there.",
            "date": "2009-12-05T09:22:08.170+0000",
            "id": 6
        },
        {
            "author": "Mark Miller",
            "body": "Hey Uwe, since your editing this code anyway, wanna add a comment fix for the ref of TermInfo here?\n\n{code}\n+          // Loading the TermInfo from the terms dict here\n+          // should not be costly, because 1) the\n+          // query/filter will load the TermInfo when it\n+          // runs, and 2) the terms dict has a cache:\n{code}",
            "date": "2009-12-05T14:21:38.654+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "After porting Automaton, I realized, that the seeking code should be changed and made a little bit more flexible.\n\nAcceptStatus can now return 5 stati:\n- YES, NO: Accept / not accept the term and go forward, the simple linear case that iterates until the end and filters terms (FuzzyQuery case, linear Automaton)\n- YES_AND_SEEK, NO_AND_SEEK: the same like above, but instead of simply going forward, nextSeekTerm() is called to retrieve a new term to seek to. This method is now supposed to always return a greater term than before, if not, the enumeration can end too early (see below).\n- END: end the enumeration, so seeking. This status is used by TermRangeQuery and PrefixQuery as before.\n\nnextSeekTerm() should always return a greater term that the last one before seeking. This is asserted by NRQ. It is not bad to do this, but after that the enum is no longer correctly sorted. Also, if the consumer reaches the last term of the underlying enum, call next() will end enumeration and so further terms in the nextSeekTerm() interation will not consulted (the same happens when END is returned in accept, of course).\n\nIf nextSeekTerm() returns null, the enumeration is also ended, so it is not required to return AcceptStatus.END instead of X_AND_SEEK.",
            "date": "2009-12-05T15:02:13.498+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "Mark: I do not know about what you are talking about (sorry, my brain is fuming after automaton).",
            "date": "2009-12-05T15:04:04.677+0000",
            "id": 9
        },
        {
            "author": "Mark Miller",
            "body": "No problem, we can get it after - its not really related, just figured since you were patching here anyway and I happened to notice it will taking a look at the patch:\n\nTermInfo is no longer used in flex, but its referenced in the above comment, in MTQ.\n\n",
            "date": "2009-12-05T15:21:01.218+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, I really like what you have done here (as commented on LUCENE-1606)\n\nSeeking around in a filteredtermsenum is even simpler here. (in my opinion, this thing is very tricky with trunk and it is good to simplify)\n",
            "date": "2009-12-05T16:21:23.575+0000",
            "id": 11
        },
        {
            "author": "Michael McCandless",
            "body": "bq. nextSeekTerm() should always return a greater term that the last one before seeking. \n\nUwe, why was this constraint needed?  What goes wrong if we allow terms to be returned out of order?  The consumers of this (MTQ's rewrite methods) don't mind if terms are out of order, right?",
            "date": "2009-12-05T17:20:51.470+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "It will work (theoretically) but can fail:\nif you seek to the last term and accept it, the next call to next() will end the enum, even if there may be more positions to seek. You cannot rely on the fact that all seek terms are visited. Because of that it *should* be foreward only, if other, you must know what you do",
            "date": "2009-12-05T17:27:05.837+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "I have a solution for this problem: If the end of the enum is reached i just asks for a new term is seek==true (that is what iwas before). But nextPrefixTerm() gets the information that the end was already finished and *could* return null then. This is important for automaton, because it would loop endless else (because it would produce terms and terms and terms... in nextSeekTerm).",
            "date": "2009-12-05T18:10:35.336+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "Attached is patch that allows the TermsEnum to go backwards and not break if end of underlying TermsEnum is reached after next() or seek().\n\nThe method nextSeekTerm() gets a boolean if the underlying TermsEnum is exhausted. Enums that work in order can the simply return null to break iteration. But they are free to reposition to a term before.",
            "date": "2009-12-05T19:50:47.470+0000",
            "id": 15
        },
        {
            "author": "Uwe Schindler",
            "body": "fixed patch - i have to stop for today.",
            "date": "2009-12-05T20:01:16.126+0000",
            "id": 16
        },
        {
            "author": "Uwe Schindler",
            "body": "Stop everything I get a collaps!!!!! Again wrong patch.",
            "date": "2009-12-05T20:07:32.452+0000",
            "id": 17
        },
        {
            "author": "Uwe Schindler",
            "body": "Now the final one.\n\nI somehow need a test enum which does very strange things like seeking forward and backwards and returning all strange stati.\n\nWill think about one tomorrow.",
            "date": "2009-12-05T20:19:22.318+0000",
            "id": 18
        },
        {
            "author": "Uwe Schindler",
            "body": "Robert and me analyzed the latest change. It is so complex and I am really not sure, if we should do this. It is impossible to maintain this.\n\nWe should enforce only seeking forwards (even if MTQ could accept terms out of order). Violating TermsEnums order stupid, so we should use the patch before. NRQ and also Automaton enforce stepping forwards only.\n\nMike?",
            "date": "2009-12-05T20:35:28.787+0000",
            "id": 19
        },
        {
            "author": "Robert Muir",
            "body": "yeah compared to the last patch, the backwards seeking makes the code more complex in my opinion.\n\ni do not understand why a MTQ would need to backwards seek? Can we say instead if you want to do such a thing with flexible indexing, that the way is to instead define custom sort order in your codec?\n\n",
            "date": "2009-12-05T20:38:51.059+0000",
            "id": 20
        },
        {
            "author": "Uwe Schindler",
            "body": "+1, I reverted it here completely. It is not senseful to support unordered filtered enums. If somebody wants to implement that he should do it otherwise by overriding next() himself and not use nextSeekTerm() and accept().",
            "date": "2009-12-05T20:48:50.194+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "bq. We should enforce only seeking forwards (even if MTQ could accept terms out of order). Violating TermsEnums order stupid, so we should use the patch before. NRQ and also Automaton enforce stepping forwards only.\n\nOK, I hadn't realized this was adding so much complexity to the code, so I agree let's revert it and require FTE to always move forward according to getTermComparator its actualEnum.  We don't have a need for this today, anyway.  Design for today ;)",
            "date": "2009-12-06T09:40:49.252+0000",
            "id": 22
        },
        {
            "author": "Uwe Schindler",
            "body": "From our IRC chat between Mike and me:\n{quote}\n[10:19] ThetaPhi_: mike: any further comments for 2110?\n[10:19] mikemccand: am just trying to look at it -- waiting on a sloooooow svn up.\n[10:19] ThetaPhi_: this out of order is not trivial and makes code for automaton and NRQ more complicated\n[10:19] mikemccand: the change is a great step forward\n[10:19] mikemccand: yeah forget it \n[10:19] ThetaPhi_: yes\n[10:19] ThetaPhi_: you understood the problem\n[10:19] mikemccand: i had thought it was nearly free\n[10:19] mikemccand: i don't fully understand the problem\n[10:19] mikemccand: impossible to keep up with you!!\n[10:20] ThetaPhi_: when the underlying enum is exhausted (I was exhausted yesterday, too), it stops processing, even if there are more nextSeelkTerms\n[10:20] mikemccand: yes I saw your exhausted pun ;)\n[10:20] mikemccand: wait -- if a TermsEnum becomes exhaused, you're unable to seek it again?  is that the issue?\n[10:20] ThetaPhi_: waht you could do is, that after the underlying enum is exhausted, that you call nextSeekTerm and reposition\n[10:21] ThetaPhi_: yes\n[10:21] ThetaPhi_: you could seek it\n[10:21] ThetaPhi_: and this worked at the beginning (first patch without the additional enum constants)\n[10:21] ThetaPhi_: what it did was: when the underlying enum was exhausted it simply called nextSeekTerm and seeked\n[10:22] mikemccand: so TermsEnum API allows seeks after next()'ing to exhaustion, right?  (I think it should but maybe it' doesn't somewhere?)\n[10:22] ThetaPhi_: which was ok\n[10:22] ThetaPhi_: mikemccand: your enums works perfect\n[10:22] ThetaPhi_: they can be seeked everytime even when exhausted\n[10:22] mikemccand: ok\n[10:23] ThetaPhi_: the problem is logic in filteredtermsenum\n[10:23] mikemccand: ok\n[10:23] ThetaPhi_: it gets very complicated when you want to support two things:\n[10:23] ThetaPhi_: a) seeking on request (NO_AND_SEEK, YES_AND_SEEK)\n[10:24] ThetaPhi_: b) and want to consume all nextSeekTerms()\n[10:24] ThetaPhi_: if somebody seeks after _AND_SEEK to e.g. the last term of the enum\n[10:24] ThetaPhi_: in the current impl it will read that term\n[10:25] ThetaPhi_: call termCompare and so on\n[10:25] ThetaPhi_: if this accepts the term or not accepts the term\n[10:25] ThetaPhi_: it will call next() on the underlying enum again\n[10:25] ThetaPhi_: which then returns null\n[10:26] ThetaPhi_: with the current patch it will then also end the filteredtermsenum\n[10:26] mikemccand: ok -- so the termination logic inside FTE.next() got really hairy if on getting null from the actualEnum you had to consider going back for another seek term?\n[10:26] ThetaPhi_: yes\n[10:26] ThetaPhi_: i tried it yesterday\n[10:26] mikemccand: we certainly don't need to support thist oday\n[10:26] ThetaPhi_: and I had no good test\n[10:27] ThetaPhi_: yes exactly\n[10:27] mikemccand: if somehow this ever becomes needed then we add it then\n[10:27] mikemccand: the new FTE looks great\n[10:27] ThetaPhi_: the idea was to provide a param to nextSeekTerm which denotes if the underlying enum ended\n[10:27] mikemccand: NRQ is soooo much simpler :)\n[10:28] ThetaPhi_: the idea was to call even on exit nextSeekTerm(true), where triue meant exhausted\n[10:28] mikemccand: i see -- so it involved different API\n[10:28] ThetaPhi_: TEnums like NRQ or automaton only going forward then know, not to provide seek terms again\n[10:28] ThetaPhi_: this was important for Automaton not to fall into endless loops\n[10:29] mikemccand: this is hairy stuff :)\n[10:29] ThetaPhi_: and good for NRQ to not provide any further terms\n[10:30] ThetaPhi_: when I tried to implement there was always a problem and you were not able to correctly define waht should happen then\n[10:30] mikemccand: how come the switch in FTE.next doesn't have \"case NO\" on the return from accept(term)?\n[10:31] ThetaPhi_: thats not needed it just falls through and loops to next term\n[10:31] ThetaPhi_: you could add it as NO: break;\n[10:31] * mikemccand ahh got it -- maybe just add comment saying so\n[10:31] ThetaPhi_: good idea, will do\n[10:32] ThetaPhi_: the NO_AND_seek case is the same it just says doSeek = true\n[10:32] ThetaPhi_: and for yes it returns the term in both cases, but records doSeek for the next time next() is called\n[10:32] mikemccand: i wonder if we could simply add a seek term to AcceptStatus?\n[10:33] mikemccand: vs calling the separate nextSeekTerm method\n[10:33] ThetaPhi_: enum's contents are final\n[10:33] mikemccand: not sure it'd be better... just wondering\n[10:33] ThetaPhi_: because each constant is a singleton, they should be unmodifiable\n[10:34] mikemccand: ie, fix AcceptStatus to be like TermsEnum.SeekResult\n[10:34] mikemccand: so it returns status, but also an optional seekTerm which if null means no seeking\n[10:34] ThetaPhi_: and how to do this, not with an enum constant\n[10:34] ThetaPhi_: because they are constants\n[10:35] ThetaPhi_: and createing a new object on each accept call seems not ideal\n[10:35] mikemccand: sorry, i was confused -- SeekStatus used to be a class that had two attrs -- a TermRef, and the enum; i simplified that a while ago\n[10:36] ThetaPhi_: aaaah\n[10:36] ThetaPhi_: now its an enum\n[10:36] ThetaPhi_: i do not think its a ood idea to return new objects\n[10:36] mikemccand: right.  for a while I had no TermsEnum.term()\n[10:36] mikemccand: the enums would reuse their status object\n[10:36] mikemccand: ie API would require that this is fine\n[10:37] ThetaPhi_: but enums are singleton\n[10:37] ThetaPhi_: for the whole JVM\n[10:37] mikemccand: if we did that... then we could go back to YES/NO/END, and, and seekTerm is then orthogonal\n[10:37] ThetaPhi_: ok\n[10:37] ThetaPhi_: so a protected setSeekTerm\n[10:38] mikemccand: we'd make a new \"AcceptResult\" class.  has \"AcceptStatus status\" member, and also \"TermRef seekTerm\"\n[10:38] ThetaPhi_: then we are back at the state before, we should ask robert\n[10:38] mikemccand: ok\n[10:38] ThetaPhi_: for him the separation of accept and nextSeekTerm was good\n[10:38] mikemccand: ahh i see\n[10:39] ThetaPhi_: but he could do the calculation of the next sring in accept, too\n[10:39] mikemccand: though, can't he simply emulate?  ie, internally call a private nextSeekTerm, stick it on the returned AcceptResult, and return that?\n[10:39] mikemccand: right\n[10:39] ThetaPhi_: telephone...\n[10:39] mikemccand: do we ever call nextSeekTerm, unless AcceptStatus was XXX_AND_SEEK?\n[10:39] mikemccand: hah real world interrupts\n[10:40] ThetaPhi_: thats what is done currentl\n[10:40] ThetaPhi_: brb\n[10:41] mikemccand: man all of infra seems slow right now... jira giving me intermittent Internal Server Error... svn really slow\n[10:41] mikemccand: git is tempting\n[11:04] *** jwtoddii has joined #lucene.\n[11:15] *** jwtoddii has signed off IRC ().\n[11:15] ThetaPhi_: re\n[11:15] mikemccand: hello\n[11:15] ThetaPhi_: for me infra works normal\n[11:16] mikemccand: hmmm\n[11:16] ThetaPhi_: but maybe because i am on the euorpe svn\n[11:16] mikemccand: you use the eu mirrors?\n[11:16] mikemccand: ok\n[11:16] ThetaPhi_: but for jira i do not know\n[11:16] mikemccand: jira is on/off for me now\n[11:16] ThetaPhi_: do not think there is a mirror\n[11:17] ThetaPhi_: [10:39] mikemccand: do we ever call nextSeekTerm, unless AcceptStatus was XXX_AND_SEEK?\n[11:17] ThetaPhi_: no\n[11:18] mikemccand: ok\n[11:18] ThetaPhi_: and doSeek is always reset to false whenever a seek occured\n[11:19] ThetaPhi_: the global doSeek is just for the YES_AND_SEEK case\n[11:19] ThetaPhi_: because it exits the loop and returns the term\n[11:19] ThetaPhi_: so on the next call to next() doSeek is true and we seek\n[11:20] mikemccand: got it\n[11:21] ThetaPhi_: an idea about the nextSeekTerm:\n[11:21] ThetaPhi_: we add a protected setSeekTerm(TermRef)\n[11:21] ThetaPhi_: this sets a private var\n[11:22] ThetaPhi_: accept can set this and return YES or no wahtever\n[11:22] ThetaPhi_: in the case of END it is ignored\n[11:22] ThetaPhi_: but when next() is then called again, if this internal seek varaible is != null it seeks, else it goes forward with next\n[11:22] ThetaPhi_: and after seek it is set to null\n[11:23] ThetaPhi_: and we could add an assert inside this method to check if only seeking forward\n[11:24] ThetaPhi_: to inform implementors of errors\n[11:24] ThetaPhi_: assert termComp.compare(seekTerm, term()) > 0;\n[11:24] mikemccand: why not simply return the optional seek term along w/ AcceptStatus?  it'd require no additional methods, and makes it clear that seeking part of accepting. \n[11:25] mikemccand: ie the existince of new methods in the api (setSeekTerm, nextSeekTerm) enrich the api -- make you wonder when you can call them.  eg can ctor call setSeekTerm?\n[11:25] ThetaPhi_: because accept status is an enum constant which is final, singleton and \n[11:25] ThetaPhi_: yes ctor can do it at the moment\n[11:25] ThetaPhi_: its already there its only called setinitialseekterm\n[11:26] ThetaPhi_: (see docs)\n[11:26] mikemccand: i mean make a new class (AcceptResult), like i described.  it contains an AcceptResult.Status (the enum), and a TermRef.\n[11:26] ThetaPhi_: the problem is lots of object creation\n[11:26] mikemccand: there would be no object creation -- we'd reuse?\n[11:26] ThetaPhi_: in my opinion setSeekTerm is simplier to use\n[11:27] ThetaPhi_: it would be the same like the reuse case\n[11:27] ThetaPhi_: and setseekterm can also be used in ctor\n[11:27] mikemccand: yeah the fact that ctor needs to set initial term does seem to require the extra method\n[11:28] mikemccand: though i also don't like side-effect methods -- you change the internal state of the class, vs returning the seek term\n[11:28] mikemccand: ie it makes the api stateful, which except for the initial case, is overkill\n[11:29] ThetaPhi_: its an iterator it always has an internal state\n[11:29] ThetaPhi_: i understand your problem\n[11:29] ThetaPhi_: you call in a method that should only accept something a method that changes state\n[11:30] mikemccand: the internal state is handled by FTE; my subclass is mostly stateless, if i return the seek term\n[11:30] ThetaPhi_: so you cannot call it from outside (which would not wrok, because it is protected)\n[11:30] ThetaPhi_: NRQ also has a state and also automaton\n[11:31] ThetaPhi_: in NRQ it is the linkedlist with seek terms\n[11:31] ThetaPhi_: in Automaton the nextString()\n[11:31] mikemccand: right, they have their own state because of how they iterate.  it's just that seek term need not be stateful.\n[11:32] ThetaPhi_: i think we should ask robert, at the moment i would know how to change his code to support both cases\n[11:33] mikemccand: in fact, instead of setInitialSeekTerm, could we have getInitialSeekTerm?  ie FTE would invoke that once on start\n[11:33] mikemccand: ok :)\n[11:33] mikemccand: automaton is scary\n[11:33] mikemccand: and, powerful\n[11:33] ThetaPhi_: the getInitialSeek term in the current api is hidden behind the iterator\n[11:34] ThetaPhi_: setInitialSeekTerm for the ctor is just a convenience\n[11:34] ThetaPhi_: to prevent subclasses like prefixtermsenum from overrideing and implementing the singleton itertor\n[11:34] * mikemccand w/ getInitialSeekTerm, there is no sneaky shared state w/ FTE.  i mean, FTE keeps track of its state, and each subclass tracks its own state.  subclassing wouldn't even be necessary anymore -- one could provdie a standonalone TermsEnumFilter, that just has getInitialSeekTerm and accept\n[11:34] ThetaPhi_: (see docs)\n[11:36] mikemccand: in general I don't like subclassing APIs -- it's a bigger surface area (how child works w/ parent, stateful methods, when can i call each method, etc.)\n[11:36] ThetaPhi_: we could remove that also in the current api\n[11:37] ThetaPhi_: only abstract classes should be subclassable\n[11:37] ThetaPhi_: thats asked very often\n[11:37] mikemccand: gonna be a cold run this AM -- 28F out there\n[11:37] ThetaPhi_: *calculating*\n[11:37] mikemccand: :)\n[11:37] mikemccand: invert 32 + 9/5 * C\n[11:38] ThetaPhi_: or ask google\n[11:38] ThetaPhi_: -2.22 \u00b0C \n[11:39] ThetaPhi_: (Link: http://www.google.de/search?hl=de&safe=off&q=28+fahrenheit+in+celsius&meta=&aq=f&oq=)http://www.google.de/search?hl=de&safe=off&q=28+fahrenheit+in+celsius&meta=&aq=f&oq=\n[11:39] mikemccand: if i jump in and see that, to use FTE i only have to implement to an interface (TermsEnumFilter) that has getInitialTerm/accept... I think that's more approachable than figuring out the relationship  (methods, state) to an abstract parent class\n[11:39] mikemccand: nice\n[11:40] mikemccand: ugh, zillions of conflicts on backporting thread safe spellchecker\n[11:40] ThetaPhi_: if the abstract parent class makes all other methods final its the same\n[11:41] ThetaPhi_: but ok, you could change MTQ to just return the interface\n[11:41] mikemccand: not really the same -- you have to define when each overridden method is allowed/supposed to invoke the methods from the parent\n[11:42] mikemccand: once (if) we make the interaction stateless,we suddenly have the freedom to make it a separate interface...\n[11:43] ThetaPhi_: you mean calling next() inside accept() -> loops forever\n[11:43] mikemccand: yeah :(\n[11:43] mikemccand: of course... that freedom of the orig FilteredTermEnum is what made NRQ sneakiness possible in the first place ;)\n[11:44] ThetaPhi_: (which was a hack, you have seen the comment: something like: this relys on how setEnum() works, if this changes in the superclass this enum will no longer work)\n[11:45] ThetaPhi_: this was a comment before i removed the recursion in one of this issues\n[11:45] mikemccand: right -- but it was the right hting to do at the time\n[11:45] mikemccand: sure was tricky to undertsand :)\n[11:45] ThetaPhi_: (ore remove the recursion, like it is now in trunk)\n[11:45] mikemccand: you were bound by FTE\n[11:45] mikemccand: yes, that's better\n[11:45] mikemccand: but i like separate interface best -- it removes all shared state -- one thing describes what's filtered, the other implements according to that\n[11:46] mikemccand: then MTQ could almost simply accept a TermsEnum.  the only difference is difference() -- ha\n[11:46] mikemccand: it's only fuzzy that uses difference() right?\n[11:46] ThetaPhi_: yes\n[11:46] ThetaPhi_: i was thinking about that\n[11:47] ThetaPhi_: because a empty prefix filter could simply return the termsenum\n[11:47] mikemccand: ahh yes nice opto\n[11:47] ThetaPhi_: PrefixQuery(\"\")\n[11:47] ThetaPhi_: would match all documents that have at least any term\n[11:47] mikemccand: actually how come contrib/queries' TermsFilter isn't a query filter wrapper around an MTQ?\n[11:47] ThetaPhi_: in automaton we need this for the catch all .* case\n[11:47] mikemccand: ahh\n[11:48] ThetaPhi_: at the moment it generates a PrefixTermsEnum(\"\")\n[11:48] mikemccand: so maybe AcceptResult has a float difference?\n[11:48] ThetaPhi_: which is slower than just returning the TermsEnum of the reader, just because of difference\n[11:49] ThetaPhi_: because it calls startsWith for each term (which in fact does nothing because termref.length==0\n[11:49] mikemccand: ugh\n[11:49] ThetaPhi_: so not that bad\n[11:49] mikemccand: much better to simple return .terms() for field.  or, rewrite to MatchAllDocs\n[11:49] ThetaPhi_: or a termrangequery(null,null) (often used in solr)\n[11:49] ThetaPhi_: no\n[11:49] ThetaPhi_: MatchAllDocs is different\n[11:50] ThetaPhi_: because the Prefix(\"\") case only returns document that have at least one term of that field\n[11:50] mikemccand: ahhh yes\n[11:50] ThetaPhi_: this is needed for facetting i think in Solr\n[11:50] ThetaPhi_: not sure\n[11:50] mikemccand: got it\n[11:50] ThetaPhi_: in NRQ its fast, it just enumerates all low-prec terms\n[11:51] ThetaPhi_: 16 for precStep=4\n[11:51] mikemccand: nice\n[11:51] mikemccand: NRQ is a great step forward for lucene\n[11:51] mikemccand: would be nice if MTQ could simply accept a TermsEnum\n[11:52] mikemccand: problem is difference()\n[11:52] ThetaPhi_: yes\n[11:52] ThetaPhi_: and is only used by fuzzy\n[11:52] mikemccand: yes, annoying for just that one case\n[11:52] mikemccand: contrib's TermsFilter really ought to be an MTQ\n[11:52] ThetaPhi_: because robert asked for a alltermsenum, which is stupied\n[11:53] mikemccand: yeah\n[11:53] ThetaPhi_: i only said, user prefix(\"\") whoich is ok, the overhead is minimal, but in this case it would be zero\n[11:53] mikemccand: we could allow MTQ to accept either a TersmsEnum, or, a TermsEnumFilter (this new stateless interface, with AcceptResult also having a float difference field)\n[11:53] ThetaPhi_: aaaah\n[11:54] ThetaPhi_: but that looks like attributesource\n[11:54] ThetaPhi_: differenceattribute\n[11:54] mikemccand: yeah that's true\n[11:54] ThetaPhi_: termsenums are already with attributes\n[11:54] mikemccand: curious.  so then MTQ could accept only TermsEnum, but, ask for its attrs, and if that's non-null, as for differenceattr, and if htat's non null, use it\n[11:55] ThetaPhi_: fuzzyenum just add this attribute\n[11:55] mikemccand: i like that!\n[11:55] ThetaPhi_: and fuzzyquery requests it\n[11:55] mikemccand: and MTQ respects it too\n[11:55] ThetaPhi_: and the default of this attribute is 1.0\n[11:55] mikemccand: ye\n[11:55] mikemccand: yes\n[11:55] ThetaPhi_: so mtq just asks always for this attribute in scoring boolean rewrite\n[11:56] mikemccand: yes\n[11:56] mikemccand: and, MTQ is much simplified to accept a TermsEnum for its terms\n[11:56] ThetaPhi_: yes\n[11:56] mikemccand: and we can make a stateless API for filtering a TermsEnum\n[11:57] ThetaPhi_: by the way, I did not check ever<ything in flex\n[11:57] mikemccand: that's ok -- it's an immense number of changes!\n[11:57] ThetaPhi_: but if you wrap an enum, you must override attributes() to return the attributes of the delegate\n[11:57] mikemccand: i still keep finding bugs in the emulation layers.\n[11:57] mikemccand: hmm you're right\n[11:58] ThetaPhi_: so UnionTermsEnum or like so must override attributes() and call delegate.attributes()\n[11:58] mikemccand: or, fuzzy query could be the only one that does htis\n[11:58] ThetaPhi_: yes\n[11:58] ThetaPhi_: no\n[11:58] ThetaPhi_: let it in MTQ\n[11:58] ThetaPhi_: we yesterday talked, normally rewrite should be final in MTQ\n[11:58] mikemccand: that sounds good\n[11:58] ThetaPhi_: you should only change behaviour in getEnum\n[11:58] mikemccand: ok\n[11:59] ThetaPhi_: in trunk we currently rewrite WildCardQuery to PrefixQuery which is itsself an MTQ\n[11:59] ThetaPhi_: totally useless\n[11:59] ThetaPhi_: just return PrefixEnum in getEnum\n[11:59] mikemccand: ahh right\n[12:00] ThetaPhi_: in flex i changed\n[12:00] ThetaPhi_: the problem are bw tests in trunk, because they check the rewritten thing, but we could simply remove the tests\n[12:01] mikemccand: tests shouldn't check internals like that\n[12:01] ThetaPhi_: yes\n[12:01] ThetaPhi_: or these checks should be marked\n[12:01] mikemccand: yes\n[12:01] ThetaPhi_: in Junit4 with an annotation\n[12:01] mikemccand: ahh what annotation?\n[12:01] ThetaPhi_: and the bw tests only run tests without that annotation\n[12:02] mikemccand: that sounds great\n[12:02] ThetaPhi_: the problem may then still compilation\n[12:03] ThetaPhi_: if it checks package protected fields and so on\n[12:03] ThetaPhi_: brrr\n[12:03] ThetaPhi_: we have such tests\n[12:03] mikemccand: sigh.\n[12:03] mikemccand: yes\n[12:03] mikemccand: i remember committing them ;)\n[12:03] *** mikemccand has left #lucene.\n[12:03] ThetaPhi_: you always have to remove them\n[12:22] *** mikemccand has joined #lucene.\n[12:22] mikemccand: sorry, dropped off\n[12:25] ThetaPhi_: ok i said\n[12:25] ThetaPhi_: i will try out a little bit\n[12:25] ThetaPhi_: and post in the automaton\n[12:25] mikemccand: ok\n[12:25] ThetaPhi_: its hard to always generate both pacthes\n[12:26] ThetaPhi_: when we are happy, i will post a patch to 2110 and then we commit\n[12:26] ThetaPhi_: in automaton there is more special cases to test\n{quote}",
            "date": "2009-12-06T12:18:40.930+0000",
            "id": 23
        },
        {
            "author": "Robert Muir",
            "body": "Hey guys, in my opinion it would make it easier if we could somehow iterate in the flex branch under this issue.\n\nDo we really need a monster patch right now that is 100% perfect or can we exploit having this branch available to make discussions and review easier?\n\nFor example, it seems everyone agrees the current patch here is a good \"step forward\".",
            "date": "2009-12-06T12:39:07.503+0000",
            "id": 24
        },
        {
            "author": "Uwe Schindler",
            "body": "New patch that implements the Attributes implementation to power scoring BooleanQuery searches. It changes:\n\n- MTQ.getTermsEnum now returns TermsEnum no longer a filtered one\n- As in flex, MTQ can only work on one field (because TermsEnum is limited to one Field), it gets a getField() method (highlighter is happy) and a ctor to set this final field (protected). Removed all thoise methods from sub classes. Old classes that still use TermEnum and call the deprec default ctor, still work (because the field is returned in the FilteredTermEnum), but highligter gots no field then (null). Whne BW is removed, highlighter do not need to use FakeIndexReader anymore.\n- WildcardQuery/PrefixQuery/TermRangeQuery was optimized to no longer rewrite, but just return the correct enum in getEnum/getTermsEnum(). The special cases for these queries are match all (directly return the enum from reader - new!!!, nothing EmptyTermsEnum, or SingleTermsEnum)\n- Fixed Highlighter for MTQ.getField()\n- FuzzyQuery now uses an attribute for the term difference: MTQ.TermDifferenceAttribute. For scoring booolean rewrite it is added by the consumer and keeps 1 per default, but fuzzy enum also adds it in its ctor and sets in accept()). Also the PQ boolean rewrite mode is now a RewriteMode.\n\nI think thats all. Happy reviewing.",
            "date": "2009-12-06T17:47:01.806+0000",
            "id": 25
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good Uwe -- just TestWildcard.testPrefixTerm, on back-compat tests, that's failing.  This is a nice simplification of MTQs...\n\nI'm wondering if we can further simplify the \"seek\" case in FilteredTermsEnum so that it's not a 2 step process (FTE.accept returns YES|NO_AND_SEEK, then, FTE.next calls nextSeekTerm), ie instead accept would return the new seek term in the returned status.  This would also make the interaction between FTE and its subclass stateless.  But let's take that up under a separate issue.  I think this one is ready to go into flex branch?",
            "date": "2009-12-06T18:08:14.966+0000",
            "id": 26
        },
        {
            "author": "Uwe Schindler",
            "body": "New patch:\n- better error message in NPE\n- change TermDifferenceAttribute to BoostAttribute and also its method names.\n- added Javadocs to FilteredTermEnum to deprec difference and explian that you should use BoostAttribute\n\nI think this is committable :-)",
            "date": "2009-12-06T19:01:30.413+0000",
            "id": 27
        },
        {
            "author": "Uwe Schindler",
            "body": "I'll commit this soon after I added some javadocs to BoostAttribute.",
            "date": "2009-12-06T21:16:52.604+0000",
            "id": 28
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 887779",
            "date": "2009-12-06T21:32:39.915+0000",
            "id": 29
        },
        {
            "author": "Uwe Schindler",
            "body": "I forgot: Thank you all, Mike, Robert, Mark for all your suggestions in chat!",
            "date": "2009-12-06T22:02:30.046+0000",
            "id": 30
        },
        {
            "author": "Uwe Schindler",
            "body": "Here a small update that changed nextSeekTerm to also provide the current TermRef. It will be null on first call. This removes the ugly if (unitialized) code in Automaton.\n\nAlso the delegate enum is now private, as its state should be unchangeable by subclasses.\n\nI will now work on a better approach with only accept using an extended AcceptStatus with next seek term). The current patch will now be committed.",
            "date": "2009-12-08T10:40:32.839+0000",
            "id": 31
        }
    ],
    "component": "core/search",
    "description": "FilteredTermsEnum is confusing as it is initially positioned to the first term. It should instead work like an uninitialized TermsEnum for a field before the first call to next() or seek().\nFilteredTermsEnums cannot implement seek() as eg. NRQ or Automaton are not able to support this. Seeking is also not needed for MTQ at all, so seek can just throw UOE.\nThis issue changes some of the internal behaviour of MTQ and FilteredTermsEnum to allow also seeking in NRQ and Automaton (see comments below).",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2110",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Refactoring of FilteredTermsEnum and MultiTermQuery",
    "systemSpecification": true,
    "version": "4.0-ALPHA"
}