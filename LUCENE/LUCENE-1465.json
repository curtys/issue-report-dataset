{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "Fix + test",
            "date": "2008-11-21T21:45:40.014+0000",
            "id": 0
        },
        {
            "author": "Mark Miller",
            "body": "See LUCENE-1001 for discussion of the bug.",
            "date": "2008-11-21T21:46:21.372+0000",
            "id": 1
        },
        {
            "author": "Mark Miller",
            "body": "I plan on committing this soon. This is a real deal breaker if you are trying to use the new getPayload API with ordered nearspans.\n\nThe attached path has java 1.5 code in the test which I'll remove.",
            "date": "2008-11-24T19:33:19.728+0000",
            "id": 2
        },
        {
            "author": "Mark Miller",
            "body": "Bah. Its even worse than that. Even after you get down to a min match, it might not meet the slop requirements! You have to load the payloads and then dump them if the slop is not met.\n\nI don't like all this extra payload loading. Come to think of it, if you don't use the getPayload, your still paying for it! I don't have  a way around it, but I don't like it. In this case, not only do you pay for loading, you also pay for loading the payloads of a bunch of possible matches that don't end up being a match!\n\nOver a large index with lots of hits, its a lot of payloads to load...\n\nI havn't thought about any of it at a high level, but I think this has to be addressed somehow...maybe you have to turn on payload collecting first, or it doesnt do it? We need something...\n\nbut until then, I think this still has to be fixed, and we are loading them one way or another now...might as well add a few more \"possible\" wrong loads (this last patch added a couple as well) to make the behavior correct - somewhat useless otherwise :)",
            "date": "2008-11-24T22:02:48.365+0000",
            "id": 3
        },
        {
            "author": "Mark Miller",
            "body": "That still wasn't quite right. A third test and a third fix. I am pretty sure this solves it, but my previous concerns still concern me.",
            "date": "2008-11-24T23:33:34.182+0000",
            "id": 4
        },
        {
            "author": "Mark Miller",
            "body": "Thanks Jonathan and Greg!",
            "date": "2008-11-25T23:40:12.865+0000",
            "id": 5
        },
        {
            "author": "Jonathan Mamou",
            "body": "Hi\nIt seems that the fix does not cover the case where 2 terms are indexed at the same position.\nI attach a sample program illustrating the issue. Each 2 terms are indexed at the same position.\nBest regards,\nJonathan",
            "date": "2008-12-01T14:16:00.513+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Let's backport fix to 2.4 branch (for eventual 2.4.1).",
            "date": "2008-12-03T16:48:14.384+0000",
            "id": 7
        },
        {
            "author": "Mark Miller",
            "body": "Whats involved in a backport - just commit it to the 2.4 branch and thats all?\n\nLooks like I have to look into terms indexed at the same position first - I'll try to get to that soon.\n\n- Mark",
            "date": "2008-12-04T12:22:38.144+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Whats involved in a backport - just commit it to the 2.4 branch and thats all? \n\nYup.  \"svn merge\" works well as long as the code hasn't diverged much, eg running this in a 2.4 branch checkout:\n\n{code}\nsvn merge -r(N-1):N https://svn.apache.org/repos/asf/lucene/java/trunk\n{code}\n\nwhere N was the revision committed to trunk.",
            "date": "2008-12-04T13:13:54.620+0000",
            "id": 9
        },
        {
            "author": "Mark Miller",
            "body": "This is an odd one Jonathan. Its actually for the unordered case (the others were for the ordered). I am not exactly clear on whats going on yet.\n\nWhen I look at the payloads coming back, it would seem we are get 0,7,7 when we should get 6,7,7. When I look at the offsets for the spans that I get the payloads from though - they appear correct. Its returning the payloads from the right offsets it seems, but somehow one of those payloads is from the term at position 0? Very odd. So when I debug in, it does indeed look like the first match happens at index 6...but the term offsets are start: 2147483647, end:-2147483648. What the heck? This is going to take some more time...",
            "date": "2008-12-18T03:37:46.629+0000",
            "id": 10
        },
        {
            "author": "Jonathan Mamou",
            "body": "Mark, I would expect to get 0,0,3,6,7,7 and not only 6,7,7. \n\nAs you wrote, \"a SpanAndQuery could easily be a SpanNearQuery if a huge distance was allowed.\" at http://www.gossamer-threads.com/lists/lucene/java-user/51983",
            "date": "2008-12-22T13:07:10.325+0000",
            "id": 11
        },
        {
            "author": "Mark Miller",
            "body": "Hmmm...I think thats true, but thats for finding 'a hit' on a document, not for finding every possible sequence of spans that could cause hit. Spans work by finding a minimum match, not greedily finding every match (which is a different algorithm).",
            "date": "2008-12-22T13:11:46.666+0000",
            "id": 12
        },
        {
            "author": "Mark Miller",
            "body": "This has been backported to 2.4 and is resolved. The unresolved dangling issue is a separate issue involving a different class, and is being tracked with LUCENE-1542.",
            "date": "2009-02-23T14:08:12.305+0000",
            "id": 13
        }
    ],
    "component": "core/search",
    "description": null,
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1465",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "NearSpansOrdered.getPayload does not return the payload from the minimum match span",
    "systemSpecification": true,
    "version": "2.4"
}