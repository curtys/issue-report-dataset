{
    "comments": [
        {
            "author": "Grant Ingersoll",
            "body": "Implementing this would mean deprecating Field.Store.COMPRESS and the various other places that use/set bits marking a field as compressed.\n\nSeems like a reasonable thing to do.  I will mark this as a 2.9 issue, so that we make sure we deprecate it at or before that time.",
            "date": "2008-01-13T15:13:22.579+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "I added o.a.l.document.CompressionTools, with static methods to\ncompress & decompress, and deprecated Field.Store.COMPRESS.\n\nI also found two separate bugs:\n\n  * With Field.Store.COMPRESS we were running compression twice\n    (unnecessarily); I've fixed that.\n\n  * If you try to make a Field(byte[], int offset, int length,\n    Store.COMPRESS), you'll hit an AIOOBE.  I think we don't need to\n    fix this one since it's in now-deprecated code, and with 2.9,\n    users can migrate to CompressionTools.\n\nI plan to commit in a day or two.\n",
            "date": "2009-03-18T20:04:44.385+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Is an index compressed with Store.COMPRESS still readable? Can i uncompress fields compressed using the old tools also by retrieving the byte array and using CompressionTools? There should be some documentation about that.\n\nAnother question: Compressing was also used for string fields, maybe CompressionTols also suplies a method to compress strings (and convert them to UTF-8 during that to be backwards compatible). This would prevent people from calling String.getBytes() without charset and then wondering, why they cannoit read their index again...",
            "date": "2009-03-20T17:38:13.783+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Good questions!\n\nbq. Is an index compressed with Store.COMPRESS still readable?\n\nYes, we have to support that until Lucene 4.0.  But\nField.Store.COMPRESS will be removed in 3.0 (ie you can read previous\ncompressed fields, interact w/ an index that has compressed fields in\nit, etc., just not add docs with Field.Store.COMPRESS to an index as\nof 3.0).\n\nbq. Can i uncompress fields compressed using the old tools also by retrieving the byte array and using CompressionTools?\n\nWell... yes, but: you can't actually get the compressed byte[]\n(because Lucene will decompress it for you).\n\nbq. Compressing was also used for string fields, maybe CompressionTols also suplies a method to compress strings (and convert them to UTF-8 during that to be backwards compatible). This would prevent people from calling String.getBytes() without charset and then wondering, why they cannoit read their index again...\n\nOK I'll add them.  I'll name them compressString and decompressString.\n",
            "date": "2009-03-20T17:50:11.373+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. OK I'll add them. I'll name them compressString and decompressString.\n\nMaybe it is better to use the new UTF-8 tools to encode/decode (instead of toBytes()). This would be consistent with the rest bof Lucene.\nBut for the old deprecated Field.Store.COMPRESS, keep it how it is (backwards compatibility).",
            "date": "2009-03-20T18:01:05.286+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nMaybe it is better to use the new UTF-8 tools to encode/decode (instead of toBytes()). This would be consistent with the rest bof Lucene.\nBut for the old deprecated Field.Store.COMPRESS, keep it how it is (backwards compatibility).\n{quote}\n\nYou mean UnicodeUtil? I think we can leave that to future optimization (I'd rather focus on the other 2.9 issues, realtime search, etc. at this point).",
            "date": "2009-03-20T18:22:39.352+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "Yes, should I prepare a patch for trunk and add these methods?",
            "date": "2009-03-20T18:24:53.561+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Added compress/decompressString, and improved javadocs to say this compression format matches Field.Store.COMPRESS.",
            "date": "2009-03-20T18:28:25.140+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Yes, should I prepare a patch for trunk and add these methods?\n\nYou mean to switch to UnicodeUtil?  That would be great!\n",
            "date": "2009-03-20T18:30:55.029+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "If we switch to UnicodeUntil we may want to allow instantiation of CompressionTools, since UnicodeUtil is optimized for re-use.\n\nAnd if we do that we have to think about thread safety & concurrency, probably using CloseableThreadLocal under the hood, and then add a close() method.\n",
            "date": "2009-03-20T18:45:41.039+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "This is a first version using UnicodeUtils. The deprecated Store.COMPRESS part still uses String.getBytes() because of backwards compatibility (otherwise it would be a change in index format).\nThis version currenty creates a new UTFxResult, because no state and no close method. It can also be synchronized without ThreadLocal, but this may not be so good.\nThe current version has a little performance impact because of array copying.",
            "date": "2009-03-20T19:04:57.146+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "OK thanks Uwe, it looks good.  We can leave the other changes I\nsuggested to future optimizations.  I'll commit soon!\n",
            "date": "2009-03-20T21:09:30.946+0000",
            "id": 11
        },
        {
            "author": "Uwe Schindler",
            "body": "Fine! In my opinion the little overhead of UnicodeUtils is far lower that the one by compression and the ByteArrayStreams.\n\n{quote}\nbq. Can i uncompress fields compressed using the old tools also by retrieving the byte array and using CompressionTools?\n\nWell... yes, but: you can't actually get the compressed byte[]\n(because Lucene will decompress it for you).\n{quote}\n\nYou can: With a FieldSelector that load the fields for merge, you get the raw binary values (found out from the code of FieldsReader).",
            "date": "2009-03-20T23:14:25.930+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Fine! In my opinion the little overhead of UnicodeUtils is far lower that the one by compression and the ByteArrayStreams.\n\nGood point...\n\nbq. You can: With a FieldSelector that load the fields for merge, you get the raw binary values (found out from the code of FieldsReader).\n\nAhh, true!  In fact, I will go and deprecate that FieldSelectorResult option.",
            "date": "2009-03-21T10:30:43.654+0000",
            "id": 13
        }
    ],
    "component": "core/index",
    "description": "Right now, as of 2.0 release, Lucene supports compressed stored fields.  However, after discussion on java-dev, the suggestion arose, from Robert Engels, that it would be better if this logic were moved into the Document level.  This way the indexing level just stores opaque binary fields, and then Document handles compress/uncompressing as needed.\n\nThis approach would have prevented issues like LUCENE-629 because merging of segments would never need to decompress.\n\nSee this thread for the recent discussion:\n\n    http://www.gossamer-threads.com/lists/lucene/java-dev/38836\n\nWhen we do this we should also work on related issue LUCENE-648.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-652",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Compressed fields should be \"externalized\" (from Fields into Document)",
    "systemSpecification": true,
    "version": "1.9, 2.0.0, 2.1"
}