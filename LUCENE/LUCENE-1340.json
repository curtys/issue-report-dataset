{
    "comments": [
        {
            "author": "Eks Dev",
            "body": "first cut",
            "date": "2008-07-18T22:42:00.781+0000",
            "id": 0
        },
        {
            "author": "Paul Elschot",
            "body": "Ok ok. I'll start working on adding a Filter as a clause to BooleanQuery. Will take some time though, there's a holiday coming up.",
            "date": "2008-07-18T22:48:25.054+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks eks, that was fast -- I think you set a new record!\n\nThe patch looks good, though we definitely need some solid unit tests\nhere.  I made some small (whitespace, spelling, naming) corrections &\nattached a new rev of the patch.\n\nOne question I have: right now if a single field has mixed true/false\nfor omitTf, you set it to false, meaning we start storing the term\nfreq, pos, payloads again.  Can/should we do the reverse instead?  If\nwe did, we could make some further optimizations, eg right now we\nconsume RAM storing all positions/payloads on a field that has omitTF=true\non the possibility that we may stll see omitTf=false in the same session.\n\nWith this patch we still store the *.prx bytes for a field with\nomitTf=true.  Can you fix that?  I think in FreqProxTermsWriter you\ncan simply not write any bytes to the proxOut; likewise in\nSegmentMerger and SegmentTermPositions, don't try to read bytes from\nthe prx file if omitTf==true.\n\nI'd also be curious about what gains in index size & filter\nperformance we see with these new boolean fields.\n",
            "date": "2008-07-19T09:32:36.233+0000",
            "id": 2
        },
        {
            "author": "Eks Dev",
            "body": "Thanks Mike, with just a little bit more hand-holding we are going to be there :)\n \nI *think* I have *.prx IO excluded in case omitTf==true, please have a look, this part is really not an easy one (*Merger).\n\nAlso, now if a single field has mixed true/false for omitTf, I set it to true.\n\nOne unit test is already there, basic use case works, but the test has to cover a bit more\n\n",
            "date": "2008-07-19T12:48:45.554+0000",
            "id": 3
        },
        {
            "author": "Eks Dev",
            "body": "- fixed stupid bug in SegmentTermDocs (was doc = docCode; instead of doc += docCode;)\n- TestOmitTf extended a bit \n",
            "date": "2008-07-20T20:31:46.891+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "OK good progress eks!\n\nI started from your latest patch and made some further changes:\n\n  * Fixed DW to not consume RAM writing prx if omitTf==true\n\n  * Fixed FreqProxTermsWriter to not create *.prx file if all fields\n    omit term freq.  I added hasProx to SegmentInfo, and changed the\n    index file format to store this new boolean.\n\n  * Fixed FreqProxTermsWriterPerField to not write prox into the RAM\n    buffer if we will omitTf on flushing the segment to disk.  This\n    makes the RAM buffer efficient (no bytes wasted on prox when\n    omitTf==true for a field).\n\n  * Added more test cases to TestOmitTf\n\n  * Small whitespace, comment changes\n\nThe one place I know of that will still waste bytes is the term dict\n(TermInfo): it stores a long proxPointer on disk (in *.tii,*.tis) and\nalso in memory because we load *.tii into RAM.  For fields with\nomitTf==true this will always be unused, and we could save alot of\ndisk/RAM if we didn't waste it.\n\nUnfortunately, I think it's too big a change to try to fix this now; I\nthink we should wait until flex indexing is online.  I wonder how we\ncan solve it at that point: maybe should we change TermInfo to be\n\"column stride\", meaning, there are separate arrays storing the values\nfor all terms (ie long[] proxPointers, long[] freqPointers, etc.).\nThis would also fit the \"pluggable\" model better, meaning any plugin\ncan store new stuff (its own arrays) per-term.",
            "date": "2008-07-21T10:32:59.969+0000",
            "id": 5
        },
        {
            "author": "Eks Dev",
            "body": "Great, it is already more than I expected, even indexing is going to be somewhat faster.\n\nI have tried your patch on smallish index with 8Mio documents and it worked on our regression test without problems. \nit worked fine with and without omitTf(true), no performance drop or bad surprises when we do not use it. Tomorrow is scheduled real test with production data, around 80Mio very small documents, with some very extensive tests.... I will report back.\n\n\"The one place I know of that will still waste bytes is the term dict\n(TermInfo): it stores a long proxPointer on disk (in .tii,.tis) and\nalso in memory because we load *.tii into RAM.... \"\n\n About this one, it would be nice not to store this as well, but I think the pointers are already reduced to one byte, as they are 0 for these cases (are they,?) So we have this benefit without expecting it :)\n\nAnd yes, more \"column stride\" is great, if you followed my comments on LUCENE-1278, that would mean we could easily \"inline\" very short postings into term dict (here I expect huge performance benefit, as skip()  on another large file is going to be saved independent from omitTf(true)), without increase in size (or minimal) of tii (no locality penalty) If we follow Zipfian distribution, there is *a lot* of terms with postings shorter than e.g. 16 ... \n\nThanks again for your support, without you this patch would be just another nice idea :)\n\n\n\n\n\n\n",
            "date": "2008-07-21T18:42:40.732+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "bq. About this one, it would be nice not to store this as well, but I think the pointers are already reduced to one byte, as they are 0 for these cases (are they,?) So we have this benefit without expecting it\n\nAhh, right.  The delta between the proxPointers are written as vlong's.  Since the delta will be zero it's now only 1 byte; only a bit worse than 0 bytes ;)\n\nbq. that would mean we could easily \"inline\" very short postings into term dict (here I expect huge performance benefit, as skip() on another large file is going to be saved independent from omitTf(true))\n\nYes, this looks like it would be a win for cases that need to visit the postings for many small terms.",
            "date": "2008-07-21T21:49:48.945+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "I attached a new rev of the patch:\n\n  * Use less RAM if field omits tf's (don't write the tf's into the RAM buffer), so we flush less often\n\n  * Added another test case to TestOmitTf\n\nAs a test, I indexed full wikipedia (~3.2 million docs) with this alg:\n\n{code}\nanalyzer=org.apache.lucene.analysis.standard.StandardAnalyzer\n\ndoc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\n\ndocs.file=/Volumes/External/lucene/wiki.txt\ndoc.stored = false\ndoc.term.vector = false\ndoc.add.log.step=10000\nmax.field.length=2147483647\n\ndirectory=FSDirectory\nautocommit=false\ncompound=false\ndoc.maker.forever = false\n\nwork.dir=/lucene/work2\nram.flush.mb=64\n\n- CreateIndex\n{ \"AddDocs\" AddDoc > : *\n- CloseIndex\n\nRepSumByPrefRound AddDoc\n\n{code}\n\nWith tf's it takes 970 seconds and index size is 2.5 GB.  Without tf's\nit takes 834 seconds (14% faster) and index size is 1.1 GB (56%\nsmaller).\n",
            "date": "2008-07-24T16:01:09.772+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "bq. The delta between the proxPointers are written as vlong's. Since the delta will be zero it's now only 1 byte; only a bit worse than 0 bytes\n\nOne more thing here: since the tiis are loaded into RAM, that unused proxPointer wastes 8 bytes for each indexed terms.  For indices with alot of terms this can add up to alot of wasted ram.  But still I think we should wait and fix this as part of flexible indexing, when we maybe refactor the TermInfos to be \"column stride\" instead.",
            "date": "2008-07-24T16:03:45.195+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch that also includes fixes to fileformat.{xml,html,pdf}.",
            "date": "2008-07-24T16:31:40.080+0000",
            "id": 10
        },
        {
            "author": "Eks Dev",
            "body": "we  finished our tests\n\nIndex without omitTf() :\n- 87Mio Documents, 2 indexed Fields one stored field\n- Unique terms in index 2.5Mio\n- Average Field lengths in tokens: 3.3 and 5.5 (very short fields)\n- On Disk size 3.8 Gb total with stored field\n \nQueries under test: \n- BooleanQuery in all shapes and forms (disjunctive, conjunctive, nested, with minNumberShouldMatch()) . with a lot of clauses (5-100).\n- Filter used, yes\n\nTest scope, regression with 30k Queries on the same index with omitTf(true/false).\n\nResult:\n\n- The Queries returned 100% identical Hits (full recall tested, all hits checked)!\n\n- Index size reduction(not including stored field!): 7% (short documents => less positions than in Mike's case)\n\n- Performance of Queries: 5.2% faster, but index was loaded as RAMIndex (on disk setup should bring even more due to the reduced IO for reading postings)\n\n-Indexing performance (FSDisk!) 13% faster\n\nAlso, we compared omitTf(false) with this patch and lucene.jar without this patch, no changes whatsoever.\n\nFrom my perspective, this is good to go into production. At least for our usage of lucene, there are no differences with homitTf(true)... \n\n>One more thing here: since the tiis are loaded into RAM, that unused proxPointer wastes 8 bytes for each indexed terms. For indices with alot of terms this can add up to alot of wasted ram. But still I think we should wait and fix this as part of flexible indexing, when we maybe refactor the TermInfos to be \"column stride\" instead.\n\nI am more than happy with the results, no need to squeeze the last bit out of it right now.\n\nMike, thanks again for the great work! \n\n",
            "date": "2008-07-26T09:47:11.772+0000",
            "id": 11
        },
        {
            "author": "Michael McCandless",
            "body": "OK that sounds like a healthy test.\n\nbq. Mike, thanks again for the great work! \n\nThank you for the sudden burst of effort to make this happen!\n\nSo I think this is ready to commit.  I'll wait a few days and then commit...",
            "date": "2008-07-26T09:58:42.744+0000",
            "id": 12
        },
        {
            "author": "Grant Ingersoll",
            "body": "I note a change to Fieldable...  sigh...  Back compatibility fails.  Ugh.\n\nMe thinks we should either rework Fieldable as we've previously discussed, or we mark it as being one of the very few classes in LUcene that is subject to change between releases.\n\n",
            "date": "2008-07-29T21:00:40.578+0000",
            "id": 13
        },
        {
            "author": "Eks Dev",
            "body": "ouch! it is kind of getting personal between me and Fieldable :) Not the first time to get bugged by it!\n\nDue to Fieldable (things really important, at lest to me):  \n- We cannot get binary stored Field in and out of lucene without getting gc() go crazy\n- We cannot omitTF \n \nit would be possible somehow to make it at AbstractField levele and instanceoff at a few places, but I simply hate to do it (I will patch my local copy, this issue is worth to me... must branch off from the trunk for the first time, sigh)\n\nfunny it is, I see no reason to have anything but AbstractField (Field/Fieldable are just redundant)",
            "date": "2008-07-29T22:02:42.732+0000",
            "id": 14
        },
        {
            "author": "Grant Ingersoll",
            "body": "Yeah, it's one of my biggest regrets in Lucene (yes, I am responsible for it), yet I firmly believe there is a way to do interfaces and abstracts in a proper way in Java.\n\nWe could make LazyField extend AbstractField, I think, but it's not clear, as there are some differences between the two, mostly around construction.  I'd have to go back and review again.\n\nThat being said, I still think if there is one place where we should allow breaking the back compat. contract, it is Fieldable!  For every rule, there is an exception, right?  I thinnk we could, w/ sufficient warning, tell people that we are changing the interface.  I am willing to bet that the number of people that would be effected by that would be less than 10.\n\nSo, please don't give up on this patch.  I am totally 100% for it.  I think it makes total sense to do.  \n\nAnother option is to speed up going towards 3.0",
            "date": "2008-07-29T22:31:38.076+0000",
            "id": 15
        },
        {
            "author": "Doug Cutting",
            "body": "> I firmly believe there is a way to do interfaces and abstracts in a proper way in Java. \n\nPersonally, I've given up on interfaces for stuff with more than one method with at most one parameter.  Ditch the interface and move on.",
            "date": "2008-07-29T22:48:50.508+0000",
            "id": 16
        },
        {
            "author": "Eks Dev",
            "body": "that sound like consensus :) Great!\n\nin that case LUCENE-1219 can be reworked slightly to avoid instanceoff (less code). Also it opens a way to pass reference to byte[] for retrieving stored fields out of lucene and communicating length back to caller (now we new byte[] every time we fetch stored field) \n\nbq. it's one of my biggest regrets in Lucene (yes, I am responsible for it), yet I firmly believe there is a way to do interfaces and abstracts in a proper way in Java. \n\nno need to regret Grant, if you do nothing you make no mistakes... Interfaces are ok, as long as you can tell what they are going to be doing in next 5 years... this forces you to design \"for the future\"... something we cannot afford in so popular and complex libraries like lucene at places like Field. Abstract* is equally good design-abstraction...  \n\nProposal:\nWe could live with a statement \"Fieldable changes are allowed from now, it is deprecated and will be  probably removed in 3.0\" , it causes just a tiny bit of work in case someone is really implementing it (adding new methods to Fieldable like omitTf() costs you max 5 minutes work to change your implementing class to implement it!).\n\nfrom 3.0 on, I could very well live without it, until then, we cause 5 minutes work for people that implement Fieldable on their own and want to stay up to date with the trunk.  It is fair  deal for everyone and lucene moves forward... \n\n\n\n\n \n\n\n  ",
            "date": "2008-07-30T05:48:50.628+0000",
            "id": 17
        },
        {
            "author": "Michael McCandless",
            "body": "Sigh, I too missed that we broke back-compatibility.\n\nBut I agree: let's mark Fieldable interface as being allowed to change from release to release (consciously make an exception to back compatibility requirements).\n\nLet's also transition away from interface for Field, for 3.0   EG we last had discussions on this, here:\n\n    http://mail-archives.apache.org/mod_mbox/lucene-java-dev/200803.mbox/%3C45933841-6EBF-4208-B10D-0D3B0BB530FF@mikemccandless.com%3E\n\n",
            "date": "2008-07-30T09:58:48.242+0000",
            "id": 18
        },
        {
            "author": "Grant Ingersoll",
            "body": "OK, I think we should call a vote on it, as it is significant enough in my mind.  I will write it up.",
            "date": "2008-07-30T11:26:43.589+0000",
            "id": 19
        },
        {
            "author": "Michael McCandless",
            "body": "LUCENE-1349 is in; I plan to commit this shortly...",
            "date": "2008-08-05T17:15:44.699+0000",
            "id": 20
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Eks!",
            "date": "2008-08-05T17:18:06.459+0000",
            "id": 21
        }
    ],
    "component": "core/index",
    "description": "Term Frequency is typically not needed  for all fields, some CPU (reading one VInt less and one X>>>1...) and IO can be spared by making pure boolen fields possible in Lucene. This topic has already been discussed and accepted as a part of Flexible Indexing... This issue tries to push things a bit faster forward as I have some concrete customer demands.\n\nbenefits can be expected for fields that are typical candidates for Filters, enumerations, user rights, IDs or very short \"texts\", phone  numbers, zip codes, names...\n\nStatus: just passed standard test (compatibility), commited for early review, I have not tried new feature, missing some asserts and one two unit tests\n\nComplexity: simpler than expected\n\ncan be used via omitTf() (who used omitNorms() will know where to find it :)  ",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1340",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Make it posible not to include TF information in index",
    "systemSpecification": true,
    "version": ""
}