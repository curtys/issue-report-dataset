{
    "comments": [
        {
            "author": "Simon Willnauer",
            "body": "mike this does not reproduce for me.. can you still trigger this one?",
            "date": "2011-05-20T20:37:18.602+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "I can't repro it either... and the while(1) tester (w/ no seed) also cannot so far...",
            "date": "2011-05-22T10:59:52.189+0000",
            "id": 1
        },
        {
            "author": "Simon Willnauer",
            "body": "I think we should close - can't reproduce - we can still reopen...",
            "date": "2011-05-22T11:03:23.789+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Woops, the while(true) tester just hit it... took 136 iterations @ -Dtests.iter=100.  It got this seed:\n\n{noformat}\nNOTE: reproduce with: ant test -Dtestcase=TestFieldCacheTermsFilter -Dtestmethod=testMissingTerms -Dtests.seed=3673074264729476620:7782176163702481120\n{noformat}\n\nBut, that does not repro for me...",
            "date": "2011-05-22T11:51:32.175+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "would really like to know if the one that failed is using an ExecutorService.\n\nRemember in that case we are trading reproducability for more coverage at the moment :(",
            "date": "2011-05-22T11:54:30.845+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Yes, we are... lesser evil I think, but still does not make one happy when that lesser evil attacks you!\n\nI'll re-run w/ verbose... could cause but not to happen though.",
            "date": "2011-05-22T12:35:55.159+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "The test still fails if I force LTC to never use an ES in newSearcher...",
            "date": "2011-05-22T13:34:51.161+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "I just committed the fix:\n\n{noformat}\nIndex: src/java/org/apache/lucene/search/FieldCacheTermsFilter.java\n===================================================================\n--- src/java/org/apache/lucene/search/FieldCacheTermsFilter.java\t(revision 1125975)\n+++ src/java/org/apache/lucene/search/FieldCacheTermsFilter.java\t(working copy)\n@@ -127,7 +127,7 @@\n \n     public FieldCacheTermsFilterDocIdSet(FieldCache.DocTermsIndex fcsi) {\n       this.fcsi = fcsi;\n-      openBitSet = new OpenBitSet(this.fcsi.size());\n+      openBitSet = new OpenBitSet(this.fcsi.numOrd());\n       final BytesRef spare = new BytesRef();\n       for (int i=0;i<terms.length;i++) {\n         int termNumber = this.fcsi.binarySearchLookup(terms[i], spare);\n{noformat}\n\n\nWe were using number-of-docs instead of number-of-ords to allocate the\nOBS.  This only causes a problem if 1) every doc has a unique term\n(thus number-of-ords is 1 + number-of-docs since 0 is reserved to mean\nunset), and 2) the number of docs is 0 mod 64, because this would then\ncause an AIOOBE coming out of the OBS (not the fcsi.getOrd!), which\nthe disi impl interprets as no-more-docs.  Phew!\n\nI think likely we couldn't repro because ConccurrentMergeScheduler was\ninvolved... this was able to repro for me:\n{noformat}\nant test-core -Dtestcase=TestFieldCacheTermsFilter -Dtestmethod=testMissingTerms -Dtests.seed=-7172644887386150665:-4028247385708880228a\n{noformat}\n\nIt uses SMS.\n\nI'd like to add assertions to OBS to better catch bugs like this in\nthe future... I'll work up a patch.\n",
            "date": "2011-05-22T17:08:31.955+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "Note that 3.x doesn't have the bug; it was already correctly using numOrd...",
            "date": "2011-05-22T17:10:38.792+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "Patch, tracking numBits and adding asserts on all methods where the \"index\" param is supposed to be within bounds.\n\nWith this patch and without the core fix I committed the test case quickly fails (trips the new asserts...).",
            "date": "2011-05-22T20:18:20.012+0000",
            "id": 9
        },
        {
            "author": "Yonik Seeley",
            "body": "To avoid slowing anything down, can we also maintain numBits in an assert?\nPerhaps something like\nassert (numBits = Math.max(other.numBits, numBits)) > 0;",
            "date": "2011-05-24T18:59:36.296+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "Good idea Yonik, I'll do that...",
            "date": "2011-05-24T19:58:42.764+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "Bulk closing for 3.2",
            "date": "2011-06-03T16:37:16.863+0000",
            "id": 12
        }
    ],
    "component": "",
    "description": "Running tests in while(1) I hit this:\n\n{noformat}\n\nNOTE: reproduce with: ant test -Dtestcase=TestFieldCacheTermsFilter -Dtestmethod=testMissingTerms -Dtests.seed=-1046382732738729184:5855929314778232889\n\n1) testMissingTerms(org.apache.lucene.search.TestFieldCacheTermsFilter)\njava.lang.AssertionError: Must match 1 expected:<1> but was:<0>\n\tat org.junit.Assert.fail(Assert.java:91)\n\tat org.junit.Assert.failNotEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:126)\n\tat org.junit.Assert.assertEquals(Assert.java:470)\n\tat org.apache.lucene.search.TestFieldCacheTermsFilter.testMissingTerms(TestFieldCacheTermsFilter.java:63)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n\tat org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1214)\n\tat org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1146)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:136)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:117)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:98)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:45)\n{noformat}\n\nUnfortunately the seed doesn't [consistently] repro for me...",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2972",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Intermittent failure in TestFieldCacheTermsFilter.testMissingTerms",
    "systemSpecification": true,
    "version": ""
}