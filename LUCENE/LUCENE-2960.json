{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Pulling back into 3.1 as blocker.",
            "date": "2011-03-10T20:08:49.904+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "If you call IWC.setRAMBufferSizeMB even after the IW is init'd, this *almost* works; I think the only problem is that DocumentsWriter has a private copy of the RAM buffer size.  We can simply fix that (it can pull from config, too), and then re-enable the test we used to have that asserts that live changes to the RAM buffer take effect.",
            "date": "2011-03-10T20:10:38.451+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "IMO, this is such an obscure usecase that we shouldn't introduce any extra complexity to implement it.\nFor example, we should not guarantee exactly *when* a change to setRAMBufferSizeMB will be seen... that could introduce the need for extra synchronization / memory barriers.",
            "date": "2011-03-10T20:22:38.448+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "my opinion (thanks for setting to 3.1) is solely based on how we do releases:\n\nI just don't think we should deprecate things in 3.1, then un-deprecate in 3.2... \n\nReally this is our mistake, we shouldn't have committed IWC and left TestIndexWriter.testChangingRamBufferSize or whatever using the deprecated setter without hashing this out further: because this test would fail if it tried to use IWC.\n",
            "date": "2011-03-10T20:32:40.413+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "bq. IMO, this is such an obscure usecase that we shouldn't introduce any extra complexity to implement it.\n\nThat this comes from Shay makes it not an \"obscure\" use case, IMO.\n\nIe, Shay (Elastic Search) is doing awesome things with Lucene, so if some change in Lucene is adversely impacting Elastic Search, we should listen.\n\nWe already don't hear from Shay nearly as often as we should ;)\n\nbq. For example, we should not guarantee exactly when a change to setRAMBufferSizeMB will be seen... that could introduce the need for extra synchronization / memory barriers.\n\nThat's really an impl. detail.  Ie, what really matters is whether or not this change results in any real change to index throughput.  If a volatile read per indexed doc (w/ rare volatile write) really costs too much (unlikely) then we can make this \"best effort\".",
            "date": "2011-03-10T20:41:52.260+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Really this is our mistake, we shouldn't have committed IWC and left TestIndexWriter.testChangingRamBufferSize or whatever using the deprecated setter without hashing this out further: because this test would fail if it tried to use IWC.\n\nI agree.  Really we should not commit API changes w/o also cutting over all but a few (so we still test the deprecated path) usages of the deprecated API to the new one (and addressing whatever issues that uncovers).",
            "date": "2011-03-10T20:44:19.314+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "For the depreciated path we should have backwards tests...",
            "date": "2011-03-10T20:51:25.217+0000",
            "id": 6
        },
        {
            "author": "Earwin Burrfoot",
            "body": "As I said on the list - if one needs to change IW config, he can always recreate IW with new settings.\nSuch changes cannot happen often enough for recreation to affect indexing performance.\n\nThe fact that you can change IW's behaviour post-construction by modifying unrelated IWC instance is frightening. IW should either make a private copy of IWC when constructing, or IWC should be made immutable.",
            "date": "2011-03-11T12:34:21.038+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "\nbq. As I said on the list - if one needs to change IW config, he can always recreate IW with new settings.\n\nThat's not really true, in general.  If you have a large merge running\nthen closing the IW can take an unpredictable amount of time.  You\ncould abort the merges on close, but that's obviously not great.\n\nFurthermore, closing the IW also forces you to commit, and I don't\nlike tying changing of configuration to forcing a commit.\n\nIn fact, it doesn't make sense to me to arbitrarily prevent settings\nfrom being live, just because we've factored out IWC as a separate\nclass.  Many of these settings were \"naturally\" live before the IWC\ncutover, and have no particular reason not to be (besides this API\nchange).\n\nWe could also rollback the IWC change.  I'm not saying that's a great\noption, but, it should be on the table.\n\nInfoStream, for example, should remain live: eg, maybe I'm having\ntrouble w/ optimize, so, I turn on infoStream and then call optimize.\n\nThe flushing params (maxBufferedDocs/Deletes/RAM) should also remain\nlive, since we have a very real user/data point (Shay) relying on\nthis.\n\nBut take MergedSegmentWarmer (used to be live but is now unchangeable).\nThis is a setting that obviously can easily remain live; there's no\ntechnical reason for it not to be.  So why should we force it to be\nunchangeable?  That can only remove freedom, freedom that is perhaps\nvaluable to an app somewhere.",
            "date": "2011-03-11T14:07:13.256+0000",
            "id": 8
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. InfoStream, for example, should remain live\n\nAgree - it's logging.\n\nbq. But take MergedSegmentWarmer (used to be live but is now unchangeable). This is a setting that obviously can easily remain live; there's no technical reason for it not to be.\n\nAnyone's implementation can be live (i.e. the impl could change it's behavior over time for whatever reason).\n",
            "date": "2011-03-11T14:14:11.986+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Anyone's implementation can be live (i.e. the impl could change it's behavior over time for whatever reason).\n\nWell, that's really cheating.  I mean, yes, technically it's an out, so\nit's certainly possible that an app can do the switching inside its\nclass... but that's not nice :)\n\nEG if an app has LoadsAllDocsWarmer and VisitsAllPostingsWarmer (say)\nand they want to switch between (for some reason)... they'd like have\nto make a SegmentWarmerSwitcher class or something.\n\nSeems silly because IW could care less if you switch up your warmer.\nIt just needs to get the current warmer every time it goes and warms\na segment...\n\n",
            "date": "2011-03-11T16:12:29.385+0000",
            "id": 10
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. Furthermore, closing the IW also forces you to commit, and I don't like tying changing of configuration to forcing a commit.\nLike I said, one isn't going to change his configuration five times a second. It's ok to commit from time to time?\n\nbq. So why should we force it to be unchangeable? That can only remove freedom, freedom that is perhaps valuable to an app somewhere.\nEach and every live reconfigurable setting adds to complexity.\nAt the very least it requires proper synchronization. Take your SegmentWarmer example - you should make the field volatile.\nWhile it's possible to chicken out on primitive fields ([except long/double|http://java.sun.com/docs/books/jls/third_edition/html/memory.html#17.7]), as Yonik mentioned earlier, making nonvolatile mutable references introduces you to a world of hard-to-catch unsafe publication bugs (yes, infoStream is currently broken!).\nFor more complex cases, certain on-change logic is required. And then you have to support this logic across all possible code rewrites and refactorings.",
            "date": "2011-03-11T23:13:47.179+0000",
            "id": 11
        },
        {
            "author": "Shay Banon",
            "body": "Heya,\n\n   If I had to choose between being able to change things in real time to better concurrency thanks to immutability, I would definitely go with better concurrency. I have no problems with closing the writers and reopening them, though, as Mike said, this can come with a big cost.\n\n   The funny thing is that a lot of the setters that were already there on the IndexWriter are still exposed, basically, through settings on the relevant MergePolicy, so I don't think we are talking about that many setter to begin with (I don't think we should bring those back to the IndexWriter).\n\n   I think that the notion of IWC is a good one, and should remain, but only to provide construction time parameters to IW. It should not be consulted once the construction phase of IW is done. If explicit real time parameters are to be set, then IW should expose it as a setter. Now, the question is which, if any, setters should be exposed.\n\n   Going through the list of current setters on IW, my vote is for the setRAMBufferSizeMB one. I am not sure that its that obscure use case. I believe Solr for example has a notion of cores (or something like that), so it can also be adaptive in terms of indexing buffer size dependent on the number of cores running in the VM. Also, one can easily run a system where it does bulk indexing, and then lowers the indexing buffer size for more \"streamline\" work. Its just a shame to close the writer for that (and having to pause all indexing work while this happens).\n\n   The term interval and divisor, I agree, are such obscure (funnily, I use the divisor quite a lot), that closing the writer and opening it again make sense.",
            "date": "2011-03-12T14:54:04.447+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "bq. If I had to choose between being able to change things in real time to better concurrency thanks to immutability, I would definitely go with better concurrency.\n\nWe're not talking about better concurrency here -- making these fields\nvolatile will be in the noise.\n\nIf ever it were not in the noise, I agree better concurrency should\nwin.\n\nbq. I don't think we are talking about that many setter to begin with (I don't think we should bring those back to the IndexWriter).\n\nTrue, but we are setting a precedent here.  Ie this will apply to\nfurther settings we add to IWC, apply to any other classes that we\npull config out of (eg IR), etc.  I don't like that factoring out\nconfig means loss of functionality.\n\nbq. It should not be consulted once the construction phase of IW is done.\n\nWhy such purity?  What do we gain?\n\nI'm all for purity, but only if it doesn't interfere w/ functionality.\nHere, it's taking away freedom...\n\nI would prefer to have the config you passed into IW remain \"live\".\nYou can also do IW.getConfig().setXXX later too.\n\nIn fact it should be fine to share an IWC across multiple writers; you\ncan change the RAM buffer for all of them at once.\n\nbq. If explicit real time parameters are to be set, then IW should expose it as a setter.\n\nBut then whenever we change our mind about liveness, we have to change\nthe API?  I'd like to decouple liveness of a setter (really a semantic\naspect of that API, documented in the jdocs) from which API is used to\nset it.\n\nI think a config param should be live by default and only if there's\nsome hardship / reason to not have it so, should we make an\nexception.  Most of these params are trivial to be live (they were\nbefore the IWC change).\n\nbq. making nonvolatile mutable references introduces you to a world of hard-to-catch unsafe publication bugs (yes, infoStream is currently broken!).\n\nWell, in theory, yes, in practice, no.  This is like stating your HTML is\nbuggy because it fails to put a closing </html> tag and so some\nbrowser could fail to render it ;)\n\nI doubt there's any JVM out there where our lack-of-volatile\ninfoStream causes any problems.\n\nBut, of course, we should make them volatile to be safe...\n\nbq. Each and every live reconfigurable setting adds to complexity.\n\nThat's the exception not the rule.  Most of these settings are used at\ncertain times -- on flushing a new seg, on warming a seg, etc. -- and\nthere's no added complexity to simply pulling their current value from\nthe config.\n\nbq. For more complex cases, certain on-change logic is required.\n\nFor such cases we can state that changes to the config do not take\neffect; eg IndexingChain is a good example I think.  But I think the\ndefault should be that changes are live, unless otherwise stated\n\nI don't think we should go out of our way to be making settings live,\nif there's any hair involved.  But for the settings where there's no\nhair involved, they should be live.\n",
            "date": "2011-03-12T22:56:41.781+0000",
            "id": 13
        },
        {
            "author": "Shay Banon",
            "body": "Just a note regarding the IWC and being able to consult it for live changes, it feels strange to me that settings something on the config will affect the IW in real time. Maybe its just me, but it feels nicer to have the \"live\" setters on IW compared to IWC.\n\nI also like the ability to decouple construction time configuration through IWC, and live settings through setters on IW. It is then very clear what can be set on construction time, and what can be set on a live IW. It also allows for compile time / static check for the code what can be changed at what lifecycle phase.",
            "date": "2011-03-13T16:03:55.124+0000",
            "id": 14
        },
        {
            "author": "Earwin Burrfoot",
            "body": "{quote}\nWhy such purity? What do we gain?\n\nI'm all for purity, but only if it doesn't interfere w/ functionality.\nHere, it's taking away freedom...\n{quote}\nWe gain consistency and predictability. And there are a lot of freedoms dangerous for developers.\n\n{quote}\nIn fact it should be fine to share an IWC across multiple writers; you\ncan change the RAM buffer for all of them at once.\n{quote}\n\nYou've brought up a purrfect example of how NOT to do things.\nThis is called 'action at a distance' and is a damn bug. Very annoying one.\nI've thoroughly experienced it with previous major version of Apache HTTPClient - they had an API that suggested you can set per-request timeouts, while these were actually global for a single Client instance.\nI fried my brain trying to understand why the hell random user requests timeout at hundred times their intended duration.\nOh! It was an occasional admin request changing the global.\n\n<irony> You know, you can actually instantiate some DateRangeFilter with a couple of Dates, and then change these Dates (they are writeable) before each request. Isn't it an exciting kind of programming freedom?\nOr, back to our current discussion - we can pass RAMBufferSizeMB as an AtomicDouble, instead of current double, then we can use .set() on an instance we passed, and have our live reconfigurability. What's more - AtomicDouble protects us from word tearing! </irony>\n\nbq. I doubt there's any JVM out there where our lack-of-volatile infoStream causes any problems.\nEr.. While I have never personally witnessed unsynchronized long/double tearing,\nI've seen the consequence of unsafely publishing a HashMap - an endless loop on get().\nIt happened on your run off the mill Sun 1.6 JVM.\nSo the bug is there, lying in wait. Maybe nobody ever actually used the freedom to change infoStream in-flight, or the guy was lucky, or in his particular situation the field was guarded by some unrelated sync.\n\n\n\n\nWhile I see banishing live reconfiguration from IW as a lost cause, I ask to make IWC immutable at the very least. As Shay said - this will provide a clear barrier between mutable and immutable properties.",
            "date": "2011-03-13T17:46:11.183+0000",
            "id": 15
        },
        {
            "author": "Mark Miller",
            "body": "bq. Maybe its just me, but it feels nicer to have the \"live\" setters on IW compared to IWC.\n\n+1.\n\nI agree that live settings on IWC feels too much 'action at a distance'. It's not a great pattern.\n\nFWIW, live config on the IW and a static IWC feels right to me. Earwin makes a strong argument for dropping live altogether - though I'm still liking the idea of allowing it where it's easy and especially where it has existed.\n\nAnd I've always felt unsafe publication was scary...",
            "date": "2011-03-13T23:03:11.344+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nEr.. While I have never personally witnessed unsynchronized long/double tearing,\nI've seen the consequence of unsafely publishing a HashMap - an endless loop on get().\n{quote}\n\nI've also seen JMM strike too -- it caused one of our unit tests to\nspin forever, because a \"volatile\" was missing.\n\nBut this will never impact rarely used fields (infoStream,\ntermIndexInterval, segmentWarmer, etc.), in practice.\n\nReally we need an anal Java impl. (or, maybe, CPU) that randomly\nasserts its \"rights\" under JMM, to hold a cached copy of any field\nthat's not volatile for unusual/random lengths of time (basically an\n\"adversary\" yet still playing by the JMM rules).  Such an impl would\nfind TONS of JMM bugs in Lucene (and I imagine any other Java\napp/library tested).\n\nYet, no \"real\" Java impl out there will ever do this since doing so\nwill simply make that Java impl appear buggy.  (Well, and, it'd be bad\nfor perf. -- obviously the Java impl, CPU cache levels, should cache\nonly frequently used things).\n\nIt's exactly why all web browsers today are tolerant to a missing\n</html> tag and no browser could afford to suddenly refuse to render\nbecause you're missing the </html> tag.\n\nI'm not saying we shouldn't put in our </html> tags in Lucene; we\ndefinitely should... we have no choice.  But, in practice, these\nmissing </html> tags all throughout Lucene are not a problem.\n\nbq. I ask to make IWC immutable at the very least\n\nIWC cannot be made immutable -- you build it up incrementally (new\nIWC(...).setThis(...).setThat(...)).  Its fields cannot be\nfinal. (Well, one field can and is: analyzer).\n\nHow about this as a compromise: IW continues cloning the incoming IWC\non init, as it does today.  This means any changes to the IWC instance\nyou passed to IW will have no effect on IW.\n\nBut, if you want to change something live, you can\nIW.getConfig().setFoo(...).  The config instance is a private clone to\nthat IW.\n",
            "date": "2011-03-14T17:56:27.668+0000",
            "id": 17
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. How about this as a compromise: IW continues cloning the incoming IWC on init, as it does today. This means any changes to the IWC instance you passed to IW will have no effect on IW.\n\n+1",
            "date": "2011-03-14T17:58:47.189+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "Patch, implementing the proposed compromise.\n\nI brought back the two prior unit tests, verifying changes to ram buffer take effect live; they pass.",
            "date": "2011-03-14T21:56:31.719+0000",
            "id": 19
        },
        {
            "author": "Yonik Seeley",
            "body": "Hmmm, infoStream is just for debugging... should we really make it volatile?\nAlthough volatile reads are cheap on current x86, they do prevent optimizations/reorderings across them.\nToo many volatile reads in inner loops can add up.\n\ninfoStream is a PrintStream, which synchronizes anyway, so it should be safe to omit the volatile.\n",
            "date": "2011-03-15T00:27:08.409+0000",
            "id": 20
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. infoStream is a PrintStream, which synchronizes anyway, so it should be safe to omit the volatile\nYou're absolutely right here.\n\nbq. Yet, no \"real\" Java impl out there will ever do this since doing so will simply make that Java impl appear buggy.\nSorry, but \"real\" Java impls do this. The case with endless get() happened on a map that was never modified after being created and set. Just one of the many JVM instances on many machines got unlucky after restart.\n\nbq. Well, and, it'd be bad for perf. \u2013 obviously the Java impl, CPU cache levels, should cache only frequently used things\nJava impls don't cache things. They do reorderings, they also keep final fields on registers, omitting reloads that happen for non-final ones, but no caching in JMM-related cases. Caching here is done by CPU, and it caches all data read from memory.\n\nbq. IWC cannot be made immutable \u2013 you build it up incrementally (new IWC(...).setThis(...).setThat(...)). Its fields cannot be final.\nSetters can return modified immutable copy of 'this'. So you get both incremental building and immutability.\n\nbq. How about this as a compromise: IW continues cloning the incoming IWC on init, as it does today. This means any changes to the IWC instance you passed to IW will have no effect on IW.\nWhat about earlier compromise mentioned by Shay, Mark, me? Keep setters for 'live' properties on IW.\nThis clearly draws the line, and you don't have to consult Javadocs for each and every setting to know if you can change it live or not.",
            "date": "2011-03-15T01:39:18.657+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Hmmm, infoStream is just for debugging... should we really make it volatile?\n\nI'll remove its volatile...\n\n{quote}\nbq. IWC cannot be made immutable \u2013 you build it up incrementally (new IWC(...).setThis(...).setThat(...)). Its fields cannot be final.\n\nSetters can return modified immutable copy of 'this'. So you get both incremental building and immutability.\n{quote}\n\nOh yeah.  But then we'd clone the full IWC on every set... this seems\nlike overkill in the name of \"purity\".\n\n{quote}\nWhat about earlier compromise mentioned by Shay, Mark, me? Keep setters for 'live' properties on IW.\nThis clearly draws the line, and you don't have to consult Javadocs for each and every setting to know if you can change it live or not.\n{quote}\n\nI really don't like that this approach would split IW configuration\ninto two places.  Like you look at the javadocs for IWC and think that\nyou cannot change the RAM buffer size.\n\nIWC should be the one place you go to see which settings you can\nchange about the IW.  That some of these settings take effect \"live\"\nwhile others do not is really an orthogonal (and I think, secondary,\nie handled fine w/ jdocs) aspect/concern.\n",
            "date": "2011-03-15T16:50:27.322+0000",
            "id": 22
        },
        {
            "author": "Mark Miller",
            "body": "{quote}I really don't like that this approach would split IW configuration\ninto two places.  Like you look at the javadocs for IWC and think that\nyou cannot change the RAM buffer size.\n\nIWC should be the one place you go to see which settings you can\nchange about the IW.  That some of these settings take effect \"live\"\nwhile others do not is really an orthogonal (and I think, secondary,\nie handled fine w/ jdocs) aspect/concern.{quote}\n\nYou can just as easily argue that the javadocs for IWC could explain that live settings are on the IW.\n\nThat pattern just smells wrong. \n\n{quote}\nBut, if you want to change something live, you can\nIW.getConfig().setFoo(...). The config instance is a private clone to\nthat IW.\n{quote}\n\nThis is better than nothing.\n\nAnother thought is to offer all settings on the IWC for init convenience and exposure and then add javadoc about updaters on IW for those settings that can be changed on the fly - or one update method and enums...",
            "date": "2011-03-15T17:29:53.382+0000",
            "id": 23
        },
        {
            "author": "Steve Rowe",
            "body": "How about an IWC base class, extended by IWCinit and IWClive.  IWCinit has setters for everything, and IW.getConfig() returns IWClive, which has no setters for things you can't set on the fly.",
            "date": "2011-03-15T17:40:12.711+0000",
            "id": 24
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. Oh yeah. But then we'd clone the full IWC on every set... this seems like overkill in the name of \"purity\".\nSo what? What exactly is overkill? Few wasted bytes and CPU ns for an object that's created a couple of times during application lifetime?\nThere are also builders, which are very similar to what Steven is proposing.\n\nbq. Another thought is to offer all settings on the IWC for init convenience and exposure and then add javadoc about updaters on IW for those settings that can be changed on the fly\nThat's exactly how I'd like to see it.",
            "date": "2011-03-15T17:52:09.800+0000",
            "id": 25
        },
        {
            "author": "Robert Muir",
            "body": "Its exactly the lack of consensus we see here, thats why I am 100% against having the setter approach.\n\nI'm totally against some deprecation/undeprecation loop because we in future releases another setting\nwants to be \"live\".\n\nIt seems the only way we can avoid this, is for javadoc to be the only specification as to whether a setting\ndoes or does not take effect \"live\".\n",
            "date": "2011-03-15T19:40:05.057+0000",
            "id": 26
        },
        {
            "author": "Earwin Burrfoot",
            "body": "You avoid deprecation/undeprecation and binary incompatibility, while incompatibly changing semantics. What do you win?",
            "date": "2011-03-15T20:10:09.284+0000",
            "id": 27
        },
        {
            "author": "Robert Muir",
            "body": "You win the fact that this is such an expert thing, and it should not confuse 99% of users who won't need to change these settings in a live way.\n\nThis is a central API to using lucene, sorry i would rather see IWConfig be reverted completely than see this deprecation/undeprecation loop, it would just cause too much confusion.\n",
            "date": "2011-03-15T20:13:57.120+0000",
            "id": 28
        },
        {
            "author": "Steve Rowe",
            "body": "bq. How about an IWC base class, extended by IWCinit and IWClive. IWCinit has setters for everything, and IW.getConfig() returns IWClive, which has no setters for things you can't set on the fly.\n\nI tried to implement this, but couldn't figure out a way to avoid code and javadoc duplication and/or separation for the live setters, which need to be on both the init and live versions.  Duplication/separation of this sort would be begging for trouble.  (The live setters can't be on the base class because the init and live versions would have to return different types to allow for proper chaining.)",
            "date": "2011-03-15T21:32:44.228+0000",
            "id": 29
        },
        {
            "author": "Steve Rowe",
            "body": "{quote}\nbq. How about an IWC base class, extended by IWCinit and IWClive. IWCinit has setters for everything, and IW.getConfig() returns IWClive, which has no setters for things you can't set on the fly.\n\nI tried to implement this, but couldn't figure out a way to avoid code and javadoc duplication and/or separation for the live setters, which need to be on both the init and live versions.\n{quote}\n\nAn annotation processor that looks for @Live annotations on setters, then generates source for a LiveIWC class, an instance of which would be returned by IW.getConfig(), would solve the duplication/separation problem.  No extension required: LiveIWC could forward all getters and the live setters to a cloned IWC.",
            "date": "2011-03-16T14:16:00.310+0000",
            "id": 30
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nbq. Oh yeah. But then we'd clone the full IWC on every set... this seems like overkill in the name of \"purity\".\n\nSo what? What exactly is overkill? Few wasted bytes and CPU ns for an object that's created a couple of times during application lifetime?\nThere are also builders, which are very similar to what Steven is proposing.\n{quote}\n\nI don't like that this'd be an O(N*M) cost API when you use it.  Sure,\nN and M are tiny, and you use this API very rarely, but I still don't\nlike it ;)\n\nIn addition, because this is all in the name of \"purity\" which as far\nas I can see has no real value besides \"purity\".  It's... incestuous.\nAnd, I'm a pragmatist, I guess.\n\n{quote}\nAn annotation processor that looks for @Live annotations on setters, then generates source for a LiveIWC class, an instance of which would be returned by IW.getConfig(), would solve the duplication/separation problem. No extension required: LiveIWC could forward all getters and the live setters to a cloned IWC.\n{quote}\n\nI think this is overkill?  (Ie to have @Live compile to LiveIWC vs\nInitIWC).  Though, @Live would be nice for jdocs?\n\nbq. You win the fact that this is such an expert thing, and it should not confuse 99% of users who won't need to change these settings in a live way.\n\nRight -- simple things should be simple and complex things should be\npossible.\n\nThe current patch achieves this -- the 99% of \"simple\" users that just\nwant to config IW and create it find all of the config in one place.\nThe 1% complex cases (need to change live settings) are able to do so,\nbut must read the jdocs for each setter to verify it's supported.  The\nAPI should be designed around the simple users not the complex ones,\nas the current patch does.\n\nSo... I think the current patch is ready to commit (except, I'll\nremove the </html> tag for infoStream & defaultInfoStream).\n",
            "date": "2011-03-16T16:03:58.426+0000",
            "id": 31
        },
        {
            "author": "Mark Miller",
            "body": "{quote}\nThe current patch achieves this \u2013 the 99% of \"simple\" users that just\nwant to config IW and create it find all of the config in one place.\nThe 1% complex cases (need to change live settings) are able to do so,\nbut must read the jdocs for each setter to verify it's supported. \n{quote}\n\nThe proposed alternatives sound just as good as this? In the proposed compromises, the 99% of simple users will see have one place to config IW as well for the avg 'set up front' use case. Perhaps the complex users could also have an API with a better pattern and it doesn't have to be either or as you seem to lead...\n\nAn IWC that is 'partially' live and can be changed externally after passing to the IW is just an inferior pattern plain and simple, and doesn't gain you much.\n\n{quote}\n The\nAPI should be designed around the simple users not the complex ones,\nas the current patch does.\n{quote}\n\nThis really depends. If the simple users can be satisfied, and the API can also be decent for complex users, win/win.\n\nI guess I would place my bets that there will not be a ton of deprecations loops of settings wanting to be live.\n\n",
            "date": "2011-03-16T16:33:57.364+0000",
            "id": 32
        },
        {
            "author": "Mark Miller",
            "body": "Though don't take that I don't agree as a hold up to finishing 3.1.",
            "date": "2011-03-16T16:44:21.824+0000",
            "id": 33
        },
        {
            "author": "Steve Rowe",
            "body": "bq. Though don't take that I don't agree as a hold up to finishing 3.1.\n\n+1",
            "date": "2011-03-16T20:02:14.451+0000",
            "id": 34
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:49:52.672+0000",
            "id": 35
        }
    ],
    "component": "core/index",
    "description": "In 3.1 the ability to setRAMBufferSizeMB is deprecated, and removed in trunk. It would be great to be able to control that on a live IndexWriter. Other possible two methods that would be great to bring back are setTermIndexInterval and setReaderTermsIndexDivisor. Most of the other setters can actually be set on the MergePolicy itself, so no need for setters for those (I think).",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2960",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Blocker",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Allow (or bring back) the ability to setRAMBufferSizeMB on an open IndexWriter",
    "systemSpecification": true,
    "version": ""
}