{
    "comments": [
        {
            "author": "Ivan Dimitrov Vasilev",
            "body": "The attached file TestIndexSplitter.java contains test that shows the bug (when running IndexSplitter from contrib) and the fix (when running IndexSplitter that is attached here as a patch)",
            "date": "2011-06-10T09:33:04.364+0000",
            "id": 0
        },
        {
            "author": "Steve Rowe",
            "body": "Hi Ivan,\n\nYour submissions should be in the form of a patch (for an explanation see e.g. http://en.wikipedia.org/wiki/Patch_%28computing%29).  To generate a patch, after you make modifications in a locally checked-out Subversion working copy, use the shell command \"svn diff\" at the top level, and redirect its output to a file named for the issue you want to attach to, with extension \".patch\", e.g.: {{svn diff > ../LUCENE-3188.patch}}.\n\nAlso, when you attached the two files to this issue, you did not click on the radio button next to the text \"Grant license to ASF for inclusion in ASF works (as per the Apache License \u00a75)\".  You must do this for the Lucene project to be able to use code you contribute.  When you attach your patch, please click on the radio button indicating you grant license to the ASF.  (I haven't looked at your code yet for this reason.)\n\nSteve",
            "date": "2011-06-10T12:54:51.824+0000",
            "id": 1
        },
        {
            "author": "Steve Rowe",
            "body": "This is a better Wikipedia article on (source code) patching than the one I gave above: http://en.wikipedia.org/wiki/Patch_%28Unix%29",
            "date": "2011-06-10T15:34:43.037+0000",
            "id": 2
        },
        {
            "author": "Ivan Dimitrov Vasilev",
            "body": "The file LUCENE-3188.patch contains the needed changes to IndexSplitter to fix this issue.",
            "date": "2011-06-10T16:24:40.181+0000",
            "id": 3
        },
        {
            "author": "Ivan Dimitrov Vasilev",
            "body": "Hi Steve,\n\nI attached the patch to this issue as required from Apache (or at least I think so :) ).\nI do not have lot of time now to read in depth Apache docs about the procedures when contributing but I saw on the wiki that I should provide also test cases that show the bug and they should be in form of unit tests. I provided a test case that is not in JUnit form but still works. As I saw when submitted patch the tests do not need granting license so you can use it. I do not have much time now because we are before release and this was one of the bugs that I should fix (and I did it).\n\nI guess you are the one who discovered this Splitter. Thank you very much for this you saved me a lot of hard work because in our previous releases we used a class that generated segments descriptor file out of given segments and looking for content of this file was very difficult.",
            "date": "2011-06-10T16:36:23.586+0000",
            "id": 4
        },
        {
            "author": "Steve Rowe",
            "body": "{quote}\nI attached the patch to this issue as required from Apache (or at least I think so ).\nI do not have lot of time now to read in depth Apache docs about the procedures when contributing but I saw on the wiki that I should provide also test cases that show the bug and they should be in form of unit tests. I provided a test case that is not in JUnit form but still works. As I saw when submitted patch the tests do not need granting license so you can use it. I do not have much time now because we are before release and this was one of the bugs that I should fix (and I did it).\n{quote}\n\nThanks for reporting and providing a patch.  I can take it from here.\n\nbq. I guess you are the one who discovered this Splitter.\n\nI think you have me confused with someone else :) - Jason Rutherglen wrote it: LUCENE-1959.",
            "date": "2011-06-10T18:25:21.518+0000",
            "id": 5
        },
        {
            "author": "Steve Rowe",
            "body": "Patch against branch_3x.\n\nI converted Ivan's test class into a unit test.  Without Ivan's patch, the test fails, and with the patch, it succeeds.\n\nHere's the test failure I got without Ivan's patch:\n\n{noformat}\norg.apache.lucene.index.TestIndexSplitter,testDeleteThenOptimize\nNOTE: reproduce with: ant test -Dtestcase=TestIndexSplitter -Dtestmethod=testDeleteThenOptimize -Dtests.seed=5250008618328265481:-4070453331991284264\nWARNING: test class left thread running: merge thread: _0(3.3):c2/1 into _0 [optimize]\nRESOURCE LEAK: test class left 1 thread(s) running\nException in thread \"Lucene Merge Thread #0\" NOTE: test params are: locale=es_BO, timezone=Australia/Tasmania\norg.apache.lucene.util.ThreadInterruptedException: java.lang.InterruptedException: sleep interrupted\n\tat org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:515)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:482)\nCaused by: java.lang.InterruptedException: sleep interrupted\n\tat java.lang.Thread.sleep(Native Method)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:513)\n\t... 1 more\nNOTE: all tests run in this JVM:\n[TestIndexSplitter]\nNOTE: Windows 7 6.1 amd64/Sun Microsystems Inc. 1.5.0_22 (64-bit)/cpus=4,threads=2,free=99874080,total=128057344\n\njava.io.IOException: background merge hit exception: _0(3.3):c2/1 into _0 [optimize]\n\tat org.apache.lucene.index.IndexWriter.optimize(IndexWriter.java:2536)\n\tat org.apache.lucene.index.IndexWriter.optimize(IndexWriter.java:2474)\n\tat org.apache.lucene.index.IndexWriter.optimize(IndexWriter.java:2444)\n\tat org.apache.lucene.index.TestIndexSplitter.testDeleteThenOptimize(TestIndexSplitter.java:145)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n\tat org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1268)\n\tat org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1186)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:94)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:192)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:64)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:115)\nCaused by: java.io.IOException: MockDirectoryWrapper: file \"_0.cfs\" is still open: cannot overwrite\n\tat org.apache.lucene.store.MockDirectoryWrapper.createOutput(MockDirectoryWrapper.java:360)\n\tat org.apache.lucene.index.CompoundFileWriter.close(CompoundFileWriter.java:167)\n\tat org.apache.lucene.index.SegmentMerger.createCompoundFile(SegmentMerger.java:137)\n\tat org.apache.lucene.index.IndexWriter.mergeMiddle(IndexWriter.java:4242)\n\tat org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3853)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:388)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:456)\n{noformat}",
            "date": "2011-06-11T03:59:08.443+0000",
            "id": 6
        },
        {
            "author": "Steve Rowe",
            "body": "Mike McCandless reviewed for me; see [the IRC log|http://colabti.org/irclogger/irclogger_log/lucene-dev?date=2011-06-11#l45].  \n\nIn summary: This is a bug, and the fix is appropriate.  The problem is that the split index is created with an incorrect next-segment-name counter (always 0).  A simpler fix than Ivan's would be to copy the counter over from the source index.  Also, it would be good to include a check for this problem to the CheckIndex tool:\n\nbq. mikemccand: ie it'd just verify sis.counter is > all segs in the index\n\nI'll make a patch with these changes.\n",
            "date": "2011-06-11T14:03:30.418+0000",
            "id": 7
        },
        {
            "author": "Steve Rowe",
            "body": "Attachment with above-described changes.\n\nI plan on committing shortly, then porting to trunk.",
            "date": "2011-06-11T23:01:55.446+0000",
            "id": 8
        },
        {
            "author": "Steve Rowe",
            "body": "Committed:\n- r1134823: branch_3x\n- r1134829: trunk\n\nThanks Ivan!",
            "date": "2011-06-11T23:41:04.831+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Reopen: The CheckIndex patch reports broken index if you have empty index without segments.",
            "date": "2011-06-12T09:49:10.507+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "Fix for the CheckIndex problem with empty indexes.",
            "date": "2011-06-12T09:49:49.350+0000",
            "id": 11
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed fixes in revisions: 1134895 (trunk), 1134896 (3.x)",
            "date": "2011-06-12T09:54:59.722+0000",
            "id": 12
        },
        {
            "author": "Steve Rowe",
            "body": "Thanks Uwe.  I didn't see the problem because I didn't run all tests before committing.",
            "date": "2011-06-12T16:41:21.485+0000",
            "id": 13
        },
        {
            "author": "Robert Muir",
            "body": "bulk close for 3.3",
            "date": "2011-07-02T02:40:16.488+0000",
            "id": 14
        }
    ],
    "component": "modules/other",
    "description": "When using the method IndexSplitter.split(File destDir, String[] segs) from the Lucene cotrib directory (contrib/misc/src/java/org/apache/lucene/index) it creates an index with segments descriptor file with wrong data. Namely wrong is the number representing the name of segment that would be created next in this index.\nIf some of the segments of the index already has this name this results either to impossibility to create new segment or in crating of an corrupted segment.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3188",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "The class from cotrub directory org.apache.lucene.index.IndexSplitter creates a non correct index",
    "systemSpecification": true,
    "version": "3.0, 3.2"
}