{
    "comments": [
        {
            "author": "Paul Elschot",
            "body": "I did something wrong here, I wanted to review the text above before posting it.\nI'm sorry about that,  I'll just continue here, when it gets too messy, another jira issue can easily be opened.\n\n",
            "date": "2008-02-23T10:36:45.363+0000",
            "id": 0
        },
        {
            "author": "Paul Elschot",
            "body": "Iirc the boolean logic on contrib/queries is defined in two places: ChainedFilter and BooleanFilter. Ideally these could me merged and their functions be implemented by the DocIdSetIterators underlying the current scorers used by BooleanScorer2 (Conjunction/Disjunction/ReqOpt/ReqExcl). See also the comments of Micheal Bush and Eks Dev at the end of Jan 2008 at LUCENE-584.\n\nThat's it for the moment. Sorry for the mess, at least it should save others from reviewing all the comments at LUCENE-584. I hope I have not missed anything...",
            "date": "2008-02-23T10:43:42.659+0000",
            "id": 1
        },
        {
            "author": "Eks Dev",
            "body": "Paul, I think there is one CHEKME in DisjunctionSumScorer I have stumbled upon recently when I realized \n(token1+ token2+) query works way faster than (token1 token2).setMinimumSholdMatch(2). It is not directly related to the LUCENE-584, but just as a reminder. \n\nalso I think there is a hard_to_detect_small_maybe_performance_bug in ConjuctionScorer, :\n{code:java}\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end=(scorers.length-1)-1;\n    for (int i=0; i<(end>>1); i++) {\n      Scorer tmp = scorers[i];\n      scorers[i] = scorers[end-i];\n      scorers[end-i] = tmp;\n    }\n{code}\n\n\nIt has not been detected so far as it has only performance implications (I think?), and it sometimes works and sometimes not, depending on number of scorers:\n\nto see what I am talking about, try this \"simulator\":\n\n{code:java}\n  public static void main(String[] args) {\n    int[] scorers = new int[7]; //3 and 7 do not work\n   \n    for (int i=0; i<scorers.length; i++) {\n      scorers[i]=i;\n    }\n   \n    System.out.println(Arrays.toString(scorers));\n   \n   \n    int end=(scorers.length-1)-1;\n    for (int i=0; i<(end>>1); i++) {\n      int tmp = scorers[i];\n      scorers[i] = scorers[end-i];\n      scorers[end-i] = tmp;\n    }\n\n    System.out.println(Arrays.toString(scorers));\n\n  }\n\n{code}\nfor 7 you get:\n[0, 1, 2, 3, 4, 5, 6]\n[5, 4, 2, 3, 1, 0, 6]\n\ninstead of [5, 4, 3, 2, 1, 0, 6]\n\nand for 3\n[0, 1, 2]\n[0, 1, 2] (should be [1, 0, 2])\n\n",
            "date": "2008-02-24T20:16:48.440+0000",
            "id": 2
        },
        {
            "author": "Paul Elschot",
            "body": "Eks, \n\nAs both issues you mention are not related to filters, could you open a new issue for each of them?\nFor the first issue: iirc BooleanScorer2 will use a ConjunctionScorer in the case when all clauses are actually required in a disjunction, so normal usage via BooleanQuery should not have a performance problem there.\nThe second issue is beyond me at the moment.\n\nRegards,\nPaul Elschot",
            "date": "2008-02-24T20:42:22.973+0000",
            "id": 3
        },
        {
            "author": "Yonik Seeley",
            "body": "{quote}also I think there is a hard_to_detect_small_maybe_performance_bug in ConjuctionScorer {quote}\n\nYup, I introduced that feature + bug.  I just committed a fix that makes the code do what the comments say (no correctness implications, just perhaps minor performance).",
            "date": "2008-02-24T22:46:02.566+0000",
            "id": 4
        },
        {
            "author": "Paul Elschot",
            "body": "Attached javadocsZero2Match.patch that replaces the last few occurrences 'zero scoring' in the java docs of org.apache.lucene.search by 'matching'.",
            "date": "2008-02-26T21:30:02.681+0000",
            "id": 5
        },
        {
            "author": "Mark Miller",
            "body": "Test that now fails with ChainedFilter.\n\n{code}\njava.lang.ClassCastException: org.apache.lucene.util.OpenBitSet cannot be cast to java.util.BitSet\n\tat org.apache.lucene.search.CachingWrapperFilter.bits(CachingWrapperFilter.java:55)\n\tat org.apache.lucene.misc.ChainedFilter.doChain(ChainedFilter.java:258)\n\tat org.apache.lucene.misc.ChainedFilter.bits(ChainedFilter.java:193)\n\tat org.apache.lucene.misc.ChainedFilter.bits(ChainedFilter.java:156)\n\tat org.apache.lucene.search.Filter.getDocIdSet(Filter.java:49)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:141)\n{code}\n\n\n",
            "date": "2008-03-13T22:54:15.228+0000",
            "id": 6
        },
        {
            "author": "Michael Busch",
            "body": "{quote}\nTest that now fails with ChainedFilter.\n{quote}\n\nThe reason apparently is that the core moved from BitSets to OpenBitSets,\nwhereas the contrib packages haven't.\n\nIf we change the contrib packages to also use OpenBitSets, then this is \nstill not completely backwards compatible. For example, if a user upgrades\nto 2.4, uses a ChainedFilter to combine a 2.4 core filter with their own \ncustom Filter that is based on 2.3 and thus uses a BitSet, then it won't\nwork. So a simple drop-in replacement with the new lucene jar would not\nbe possible, the user would have to change their own filters.\n\nMaybe we should introduce a DocIdSetFactory in the core? For \nbackwards compatibility a factory that produces BitSets can be used,\nfor speed one that creates OpenBitSets. Thoughts?",
            "date": "2008-03-14T07:04:54.964+0000",
            "id": 7
        },
        {
            "author": "Eks Dev",
            "body": "Michael, \nI do not think we need to add Factory (for this particular reason), DocIdSet type should not be assumed as we could come up with smart ways to select optimal Filter representation depending on doc-id distribution, size... \n\nThe only problem we have with is that contrib classes, ChainedFilter and BooleanFilter assume BitSet. \nAnd the solution for this would be to add just a few methods to the DocIdSet that are able to do AND/OR/NOT on DocIdSet[] using DocIdSetIterator()\ne.g. \nDocIdSet or(DocIdSet[], int minimumShouldMatch);\nDocIdSet or(DocIdSet[]);\n\n\nOptimized code for these basic operations *already exists*, can be copied from Conjunction/Disjunction/ReqOpt/ReqExcl Scorer classes by just simply stripping-off scoring part.\n\nwith these utility methods in DocIdSet, rewriting ChainedFilter/BooleanFilter to work with DocIdSet (and that works on all implementations of Fileter/DocIdSet) is 10 minutes job... than, if needed this implementation can be  optimized to cover type specific cases. Imo, BoolenFilter is better bet, we do not need both of them.  \n\nUnfortunately I do not have time to play with it next 3-4 weeks, but should be no more than 2 days work (remember, we have difficult part already done in Scorers). Having so much code duplication is not something really good, but we can then later \"merge\" these somehow.\n",
            "date": "2008-03-14T09:06:14.833+0000",
            "id": 8
        },
        {
            "author": "Paul Elschot",
            "body": "I started adding getDocIdSet() to BooleanFilter of contrib/queries. When trying to collect the interim results into an OpenBitSet I soon needed OpenBitSet.conjunction(DocIdSetIterator), as well as similar disjunction() and exclusion() methods.\n\nWould it be ok to add such methods to Lucene's OpenBitSet, or would it be preferable to subclass OpenBitSet for this? At first sight I prefer subclassing, but I'd like to hear some opinions on this before going further.\n",
            "date": "2008-03-22T17:42:13.223+0000",
            "id": 9
        },
        {
            "author": "Paul Elschot",
            "body": "The OpenBitSetDISI-20080322.patch illustrates my previous question.\nDISI means DocIdSetIterator, for want of a better name.\nThe patch compiles, but is untested.\n",
            "date": "2008-03-22T21:44:06.996+0000",
            "id": 10
        },
        {
            "author": "Paul Elschot",
            "body": "For the record: the and() method in the patch misses a last statement: clear(index, size());\n\n",
            "date": "2008-03-22T22:00:58.941+0000",
            "id": 11
        },
        {
            "author": "Paul Elschot",
            "body": "BooleanFilter20080325.patch contains a non BitSet version of BooleanFilter. The contrib/queries tests pass, and it includes a finished version of OpenBitSetDISI of a few days ago.\nI've also changed the indentation of all of BooleanFilter and added some minor refactorings. This makes the patch itself somewhat less easy to read, but I couldn't leave the indendation in different styles.",
            "date": "2008-03-25T19:48:11.797+0000",
            "id": 12
        },
        {
            "author": "Paul Elschot",
            "body": "All tests pass, except the one for ChainedFilter provided here by Mark Miller. Stay tuned.",
            "date": "2008-03-25T21:35:32.096+0000",
            "id": 13
        },
        {
            "author": "Paul Elschot",
            "body": "The Contrib20080325 also includes Mark Miller's test patch, and a non BitSet version of ChainedFilter. It passes the tests contrib/miscellaneous, no time left to run all tests.\n\nContrib20080325.patch should supersede all patches currently here, except the javadoc patch.\n\nThere are no type checks yet to use the inter OpenBitSet boolean operations directly, but at least it should work. Remember to profile before adding such optimisations, for sparse OpenBitSets this could well be competitive. Well, I'd hope so.\n",
            "date": "2008-03-25T22:31:18.501+0000",
            "id": 14
        },
        {
            "author": "Paul Elschot",
            "body": "Contrib20080326.patch: supersedes the 20080325 version. Generally the same as yesterday, some extensions:\n- fix a possible synchronisation issue by using a local int[1] array instead of an object int attribute,\n- return a SortedVIntList when it is definitely smaller than an OpenBitSet, the method doing this is protected.\n- all constructors in OpenBitSetDISI now also take a initial size argument\n(still called maxSize, perhaps better renamed to initialSize).\n\nBoth ChainedFilter and BooleanFilter should work normally, except perhaps using less memory because of the SortedVIntList.\n\nChainedFilter still has the 1.1 ASL, it's probably time to upgrade it, but I did not change it in the patch.\n",
            "date": "2008-03-26T18:23:26.978+0000",
            "id": 15
        },
        {
            "author": "Michael Busch",
            "body": "Thanks for your patches, Paul. I'll be traveling the next days, but I'll try to look at the patches next week.\n\n",
            "date": "2008-03-26T20:02:51.547+0000",
            "id": 16
        },
        {
            "author": "Paul Elschot",
            "body": "One thing: I added the max size parameter to the OpenBitSetDISI ctor rather late, so there is probably some room to use more of the fast... bit access methods of OpenBitSet.",
            "date": "2008-03-29T08:36:10.340+0000",
            "id": 17
        },
        {
            "author": "Paul Elschot",
            "body": "Contrib20080427.patch is the same as the previous one from March, except for OpenBitSetDISI: added javadocs there and use fast... bit access methods consistently.",
            "date": "2008-04-27T19:19:05.632+0000",
            "id": 18
        },
        {
            "author": "Mark Harwood",
            "body": "Paul,\nGood work.\nJust tried the patch and ran some pre and post-patch benchmarks.\n\nI wanted to measure the overhead of :\n   the new OpenBitSetDISI.inPlaceOr(DocIdSetIterator) \nvs \n  the previous scheme of BitSet.or(BitSet).\n\nMy test was on the biggest index I have here which was 3 million Wikipedia docs. I had 2 cached TermFilters on very popular terms (500k docs in each) and was measuring the cost of combining these as 2 \"shoulds\" in a BooleanFilter.\nThe expectation was the new scheme would add some overhead in extra method calls.\n\nThe average cost of iterating across BooleanFilter.getDocIdSet() was:\n\nold BitSet scheme: 78 milliseconds\nnew DISI scheme: 156 milliseconds.\n\nTo address this I tried adding this optimisation into BooleanFilter...\n\n               DocIdSet dis = ((Filter)shouldFilters.get(i)).getDocIdSet(reader);\n        \tif(dis instanceof OpenBitSet)\n        \t{\n        \t\tres.or((OpenBitSet) dis); // go-faster method\n        \t}\n        \telse\n               {\n        \t\tres.inPlaceOr(getDISI(shouldFilters, i, reader)); //your patch code\n               }\nBefore I could benchmark this I had to amend TermsFilter to use OpenBitSet rather than plain old BitSet \n\navg speed of your patch with OpenBitSet-enabled TermFilter :   100 milliseconds\navg speed of your patch with OpenBitSet-enabled TermFilter and above optimisation :   70 milliseconds\n\nI'll try and post a proper patch when I get more time to look at this...\n\nCheers,\nMark\n\n\n\n\n\n",
            "date": "2008-05-13T22:16:53.660+0000",
            "id": 19
        },
        {
            "author": "Paul Elschot",
            "body": "That sounds like the overhead of the DocIdSetIterator is never more than directly using an OpenBitSet in the dense cases that you tested so far (1 in 6 is more than 1 bit per byte).\n\nThat means that a DocIdSetIterator should have acceptable performance in the sparse case when it uses a SortedVIntList underneath. Could you share some test results for sparse cases as well? I'd expect it to outperform OpenBitSet even at CPU time when it is sparse enough.",
            "date": "2008-05-13T22:54:47.075+0000",
            "id": 20
        },
        {
            "author": "Michael Busch",
            "body": "Good benchmarking, Mark.\n\nI'm actually wondering about the performance of BooleanFilter, when used\nwith a mix of Filters where some use OpenBitSets and others use BitSets.\n\nThis will happen when users upgrade to Lucene 2.4 (core filters use \nOpenBitSets now) and keep using their own custom Filters that use\nBitSets. \n\nYour patch, Paul, makes this combination possible, and thus guarantees\nbackwards-compatibility of BooleanFilter and ChainedFilter, which is \ngreat! I'm just wondering if those user might encounter bad performance\nsurprises?\n",
            "date": "2008-05-22T06:30:39.025+0000",
            "id": 21
        },
        {
            "author": "Paul Elschot",
            "body": "I would not expect bad performance problems mixing OpenBitSet and BitSet for Filters using this patch, although some performance may be lost. However, if a problem surfaces, the solution is to upgrade the existing Filter from BitSet to OpenBitSet, which amounts to the expected work after deprecation of BitSet in Filter.\nA direct implementation of the bit manipulation operations on an OpenBitSet from a BitSet would probably be faster (taking the DocIdSetIterator out of the loop), but at the moment I see no good reason to implement that.\n",
            "date": "2008-05-22T07:08:12.844+0000",
            "id": 22
        },
        {
            "author": "Michael Busch",
            "body": "{quote}\nthe solution is to upgrade the existing Filter from BitSet to OpenBitSet, which amounts to the expected work after deprecation of BitSet in Filter.\n{quote}\n\nI agree.",
            "date": "2008-05-22T07:16:25.839+0000",
            "id": 23
        },
        {
            "author": "Michael Busch",
            "body": "The patches look good to me, Paul!\n\nI'm attaching a new file that contains both your patches Contrib20080427.patch\nand  javadocsZero2Match.patch. I also added the optimizations for OpenBitSets\nthat Mark suggested to BooleanFilter and ChainedFilter.\nAnd I added the check (disi.doc() < size()) to OpenBitSetDISI.inPlaceOr() and\nOpenBitSetDISI.inPlaceXor().\n\nAll unit tests pass, however I think they don't cover all code paths now. We \nshould test both the ChainedFilter and the BooleanFilter on OpenBitSet-Filters \nonly as well as on combinations of different filters.\n\nPaul, maybe you can help me with adding those tests? Then I would go ahead\nand commit this patch soon. Otherwise I probably won't have time before next\nweek.",
            "date": "2008-05-22T08:15:49.542+0000",
            "id": 24
        },
        {
            "author": "Paul Elschot",
            "body": "With the size tests added in OpenBitSetDISI, the javadocs of the changed methods could also be relaxed.\n\nThe filter tests in the contrib modules misc and queries look fairly complete to me in their current state. Did I overlook anything there? I don't have a coverage test tool here.\n\n\n",
            "date": "2008-05-22T15:53:25.689+0000",
            "id": 25
        },
        {
            "author": "Michael Busch",
            "body": "I added a test helper class called OldBitSetFilterWrapper that helps to\ntest compatibility with old filters based on BitSets.\n\nI changed ChainedFilterTest and BooleanFilterTest to run all tests on\nnew (OpenBitSet) and old (BitSet) filters to test both different code paths\nthat we have for OpenBitSet and DocIdSetIterator.\n\nI verified with a code coverage tool that now all those paths are covered\nand all tests pass.\n\nWould be nice if you could quickly review the patch, Paul. If you're ok\nwith it then I'll commit it tomorrow.",
            "date": "2008-05-22T22:57:23.211+0000",
            "id": 26
        },
        {
            "author": "Paul Elschot",
            "body": "Thanks for the backward compatibility additions in the tests.\n\nOne nice little detail: the patch contains this in OldBitSetFilterWrapper:\n{code}\n+      BitSet bits = new BitSet(reader.maxDoc());\n+      DocIdSetIterator it = filter.getDocIdSet(reader).iterator();\n...\n{code}\n\nbut I expected:\n\n{code}\nBitSet bits = filter.bits(reader); // use deprecated method\n{code}\n\nOn old filters both will versions will work, but the alternative makes it explicit that the filter must be an 'old' one. \nUsing the deprecated method would have the advantage that it (the whole wrapper class in fact) would _have_ to be removed in 3.0.\n",
            "date": "2008-05-23T07:33:44.197+0000",
            "id": 27
        },
        {
            "author": "Michael Busch",
            "body": "{quote}\nUsing the deprecated method would have the advantage that it (the whole wrapper class in fact) would have to be removed in 3.0.\n{quote}\n\nThanks for reviewing! You're right, I will change it to use the deprecated method and also deprecate the wrapper class itself.",
            "date": "2008-05-23T07:44:10.387+0000",
            "id": 28
        },
        {
            "author": "Michael Busch",
            "body": "Committed with mentioned changes to OldBitSetFilterWrapper.\n\nThanks Paul!",
            "date": "2008-05-23T19:27:20.982+0000",
            "id": 29
        },
        {
            "author": "Paul Elschot",
            "body": "I missed TermsFilter initially, so I had another look there. It could use sth like this:\n\n{code}\n   /** Provide a SortedVIntList when it is definitely smaller than an OpenBitSet */\n   protected DocIdSet finalResult(OpenBitSetDISI result, int maxDocs) {\n       return (result.cardinality() < (maxDocs / 9))\n             ? (DocIdSet) new SortedVIntList(result)\n             : (DocIdSet) result;\n   }\n{code}\n\nBut that would leave three copies this finalResult method in the patch, which is just beyond my refactoring tolerance level.\nPerhaps this method could move to a static method in the o.a.l.search.DocIdSet class under a better name, sth like defaultDocIdSet(), or into a new helper class o.a.l.util.DefaultDocIdSet, to prepare for the availability of better implementations in the future.\n\n",
            "date": "2008-05-23T19:45:30.450+0000",
            "id": 30
        },
        {
            "author": "Paul Elschot",
            "body": "And in that case, the first argument could also be changed from OpenBitSetDISI to OpenBitSet.",
            "date": "2008-05-23T19:47:15.801+0000",
            "id": 31
        },
        {
            "author": "Michael Busch",
            "body": "Do we actually know about the performance of SortedVIntList?\n\nI'm a little worried, because it doesn't have a skip list.",
            "date": "2008-05-23T20:11:14.076+0000",
            "id": 32
        },
        {
            "author": "Paul Elschot",
            "body": "OpenBitSet does not have a skip list either, so I'd expect SortedVIntList to be faster when the underlying set is sparse enough.\n\nAs I missed the commit, I'll provide a patch for my latest comments in the next few days. :)",
            "date": "2008-05-23T20:15:47.237+0000",
            "id": 33
        },
        {
            "author": "Michael Busch",
            "body": "{quote}\nI'll provide a patch for my latest comments in the next few days\n{quote}\n\nSounds good!",
            "date": "2008-05-23T20:29:52.287+0000",
            "id": 34
        },
        {
            "author": "Paul Elschot",
            "body": "While considering DefaultDocIdSet as a class, I thought that perhaps a better way would be to add a method to class Filter that takes the usual DocIdSet and provides the DocIdSet that should be used for caching, for example in CachingWrapperFilter. Sth like this:\n{code}\npublic class Filter {\n  ... the abstract bits() deprecated method ... ;\n\n  public DocIdSet getDocIdSet(IndexReader reader) {\n    // unchanged implementation for now. to become abstract later.\n  }\n\n  public DocIdSet getDocIdSetForCache(IndexReader reader) {\n    // Use a default implementation here that provides a tradeoff for caching,\n    // fairly compact when possible, but still fast.\n    // For the moment this could be close to the code of the finalResult() method\n    // mentioned above:\n    DocIdSet result = getDocIdSet(reader);\n   \n    if (!(result instanceof SortedVIntList)) \n                and (result.cardinality() < (reader.maxDoc() / 9))) {\n      return  new SortedVIntList(result);\n    }\n    return result;\n  }\n{code}\n(One minor problem with this is that DocIdSet does not have a cardinality() method\nand that SortedVIntList does not have a constructor for a DocIdSet.)\n\nThe question is: how about adding such a getDocIdSetForCache() method to Filter?\nOr is there a better place for this functionality, for example in CachingWrapperFilter?\n",
            "date": "2008-05-25T18:56:23.162+0000",
            "id": 35
        },
        {
            "author": "Paul Elschot",
            "body": "As this has had some time so settle, I think the cache should decide what it wants to store.\nThat means I'm in favour of changing CachingWrapperFilter to let it decide which DocIdSet implementation to cache, sth. like this:\n{code}\nprotected DocIdSet docIdSetToCache(DocIdSet dis) { ... }\n{code}\nwhere dis is the result of getDocIdSet(reader) on the wrapped Filter.\nAt the same time the protected finalResult() methods in the contrib code could be removed.\n\nComments?",
            "date": "2008-05-29T15:22:46.546+0000",
            "id": 36
        },
        {
            "author": "Michael Busch",
            "body": "Sounds good to me Paul.\n\nCould you open a separate issue and attach a patch?\n",
            "date": "2008-05-29T16:45:38.646+0000",
            "id": 37
        },
        {
            "author": "Paul Elschot",
            "body": "After the commit here, I'm opening a new issue for filter caching.",
            "date": "2008-05-29T20:11:49.920+0000",
            "id": 38
        },
        {
            "author": "Paul Elschot",
            "body": "Just to be complete, the new issue for filter caching is LUCENE-1296 ",
            "date": "2008-06-03T19:08:51.005+0000",
            "id": 39
        }
    ],
    "component": "core/search, modules/other",
    "description": "(Aside: where is the documentation on how to mark up text in jira comments?)\n\nThe following things are left over after LUCENE-584 :\n\nFor Lucene 3.0  Filter.bits() will have to be removed.\n\nThere is a CHECKME in IndexSearcher about using ConjunctionScorer to have the boolean behaviour of a Filter.\n\nI have not looked into Filter caching yet, but I suppose there will be some room for improvement there.\nIirc the current core has moved to use OpenBitSetFilter and that is probably what is being cached.\nIn some cases it might be better to cache a SortedVIntList instead.\n\nBoolean logic on DocIdSetIterator is already available for Scorers (that inherit from DocIdSetIterator) in the search package. This is currently implemented by ConjunctionScorer, DisjunctionSumScorer,\nReqOptSumScorer and ReqExclScorer.\nBoolean logic on BitSets is available in contrib/misc and contrib/queries\n\nDisjunctionSumScorer calls score() on its subscorers before the score value actually needed.\nThis could be a reason to introduce a DisjunctionDocIdSetIterator, perhaps as a superclass of DisjunctionSumScorer.\n\nTo fully implement non scoring queries a TermDocIdSetIterator will be needed, perhaps as a superclass of TermScorer.\n\nThe javadocs in org.apache.lucene.search using matching vs non-zero score:\nI'll investigate this soon, and provide a patch when necessary.\n\nAn early version of the patches of LUCENE-584 contained a class Matcher,\nthat differs from the current DocIdSet in that Matcher has an explain() method.\nIt remains to be seen whether such a Matcher could be useful between\nDocIdSet and Scorer.\n\nThe semantics of scorer.skipTo(scorer.doc()) was discussed briefly.\nThis was also discussed at another issue recently, so perhaps it is wortwhile to open a separate issue for this.\n\nSkipping on a SortedVIntList is done using linear search, this could be improved by adding multilevel skiplist info much like in the Lucene index for documents containing a term.\n\nOne comment by me of 3 Dec 2008:\n\nA few complete (test) classes are deprecated, it might be good to add the target release for removal there.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1187",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Things to be done now that Filter is independent from BitSet",
    "systemSpecification": true,
    "version": ""
}