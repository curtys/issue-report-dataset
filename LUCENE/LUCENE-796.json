{
    "comments": [
        {
            "author": "Steven Parkes",
            "body": "This code is a little bit twisted; took me a while to figure out how it was working.\n\nI'm wondering what you want to do with the variables if they're available ... not that I'm terribly against making them protected (or adding gettter/setters), but I see another issue here.\n\nThe code right now takes two paths: if you pass a field, it just calls QP via super. If you don't pass a field, it loops through each of the fields it has, which I suspect is usually what one wants. But in this loop, it also calls super, which means you don't get a chance in your derived class to override it again. I think it would make more sense to not call super in the loop case. So derived classes can get access to the call both when no field is passed and when each field is passed.\n\nOut of curiosity, would this do anything for you? If these were to be made protected, would you just be writing the loop yourself?",
            "date": "2007-03-02T00:33:32.615+0000",
            "id": 0
        },
        {
            "author": "Steven Parkes",
            "body": "This patch allows the recursive per-field calls in MFQP to be overridden by not forcing them to super.\n\nAll tests pass.",
            "date": "2007-03-02T01:33:20.071+0000",
            "id": 1
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Makes sense.  Thanks Steve, applied.  I left those 2 private attributes of MFQP as private until somebody asks for them to be protected.\n",
            "date": "2007-04-05T02:07:49.605+0000",
            "id": 2
        }
    ],
    "component": "core/queryparser",
    "description": "In MultiFieldQueryParser the two methods \n\n  protected Query getFuzzyQuery(String field, String termStr, float minSimilarity) throws ParseException\n  protected Query getWildcardQuery(String field, String termStr) throws ParseException\n\nare intended to be overwritten if one would like to avoid fuzzy and wildcard queries. However, the String[] fields attribute of this class is private and hence it is not accessible in subclasses of MFQParser. If you just change it to protected this issue should be solved.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-796",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Change Visibility of fields[] in MultiFieldQueryParser",
    "systemSpecification": true,
    "version": "2.1"
}