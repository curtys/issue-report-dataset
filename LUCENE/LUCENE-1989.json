{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "This is the only possibility to make it somehow genericfied. As all Object subclasses (so everything) contains a toString() method it is no longer a problem to add any object that has a valid String representation to this set.\n\nIt is only strange that the iterator returns Strings and not char[] - why is this so? To fix this, there is also an accessor to get an Iterator<String> correctly casted.",
            "date": "2009-10-17T12:45:38.379+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Add some java docs. Will commit now.",
            "date": "2009-10-18T10:11:48.143+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 826395",
            "date": "2009-10-18T10:12:50.626+0000",
            "id": 2
        }
    ],
    "component": "",
    "description": "I tried to make CharArraySet using generics (extends AbstractSet<char[]>) but this is not possible, as it e.g. returns sometimes String instances in the Iterator instead of []. Also its addAll method accepts both String and char[]. I think this class is a complete mis-design and violates almost everything (sorry).\n\nWhat to do? Make it Set<?> or just place a big @SuppressWarnings(\"unchecked\"> in front of it?\n\nBecause of this problem also a lot of Set declarations inside StopAnalyzer cannot be made generic as you never know whats inside.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1989",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "CharArraySet cannot be made generic, because it violates the Set<char[]> interface",
    "systemSpecification": true,
    "version": "2.9"
}