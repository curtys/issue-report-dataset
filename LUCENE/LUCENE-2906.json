{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "I'll take it, ive done the unibigram approach already (maybe we can just have it as a separate filter option), so the bigram should be easy.\n\nMy original design, just lets you provide a BitSet of script codes. (this would be simple i think to parse from say a solr factory).\n\nI think its also useful to have an option, for whether the filter should only do this for \"joined\" text or not (based on offsets). For CJK i think it makes sense to enforce this, so that it won't bigram across sentence boundaries. But for say the Tibetan language, where you have a syllable separator, you would want to turn this off.\n\nSeparately, if you want it to work \"just like\" CJKTokenizer, please be aware that by default, the unicode standard tokenizes Katakana to words (only hiragana and han are tokenized to codepoints). So in this case you would have to use a custom ruleset if you wanted katakana to be tokenized to codepoints instead of words, for later bigramming. I'm not sure you want to do this though... (in truth CJKTokenizer bigrams ANYTHING out of ascii, including a lot of things it shouldnt).\n\nFor hangul the same warning applies, but its more debatable, you might want to do this if you don't have a decompounder... but in my opinion this is past tokenization, and its the same problem you have with german, etc... the default tokenization is not \"wrong\".\n\nIn either case, if you decide to do that, it would be a pretty simple ruleset!\n\nLet me know if this makes sense to you.\n",
            "date": "2011-02-04T21:01:00.562+0000",
            "id": 0
        },
        {
            "author": "Tom Burton-West",
            "body": "Sounds good to me.\n\nThe option to limit to \"joined\" text also sounds very useful.\n\nTom",
            "date": "2011-02-04T23:39:55.483+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "here's a patch going in a slightly different direction (though we can still add some special icu-only stuff here).\n\ninstead the patch synchronizes the token types of ICUTokenizer with StandardTokenizer, adds the necessarily types to both, and then adds the bigramming logic to standardfilter.\n\nthis way, cjk works easily \"out of box\", for all of unicode (e.g. supplementaries) and plays well with other languages. i deprecated cjktokenizer in the patch and pulled out its special full-width filter into a separate tokenfilter.\n",
            "date": "2011-02-06T13:30:12.706+0000",
            "id": 2
        },
        {
            "author": "DM Smith",
            "body": "Two questions:\nHow will this differ from the SmartChineseAnalyzer?\nI doubt it but can this be in 3.1?",
            "date": "2011-02-06T16:19:44.637+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nHow will this differ from the SmartChineseAnalyzer?\n{quote}\n\nThe SmartChineseAnalyzer is for Simplified Chinese only... this is about the \nlanguage-independent technique similar to what CJKAnalyzer does today.\n\n{quote}\nI doubt it but can this be in 3.1?\n{quote}\n\nWell i hate the way CJKAnalyzer treats things like supplementary characters (wrongly).\nThis is definitely a bug, and fixed here. Part of me wants to fix this as quickly as possible.\n\nAt the same time though, I would prefer 3.2... otherwise I would feel like I am rushing things.\n\nI don't think 3.2 needs to come a year after 3.1... in fact since we have a stable branch I think its\nstupid to make bugfix releases like 3.1.1 when we could just push out a new minor version (3.2) with\nbugfixes instead. The whole branch is intended to be stable changes, so I think this is better use\nof our time. But this is just my opinion, we can discuss it later on the list as one idea to promote \nmore rapid releases.\n",
            "date": "2011-02-06T17:43:23.566+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "the prerequisite subtask is fixed, so we should be able to add this in 3.2 (supporting StandardTokenizer, UAX29URLEmailTokenizer, and ICUTokenizer) without having to change any of the tokenizers.\n\nI'll update the patch.",
            "date": "2011-02-09T17:59:37.677+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "bulk move 3.2 -> 3.3",
            "date": "2011-06-03T16:40:46.001+0000",
            "id": 6
        },
        {
            "author": "Tom Burton-West",
            "body": "Any chance this might get implemented for 3.4?\n",
            "date": "2011-08-31T21:10:47.962+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "As much as I would like this to work as the patch does (where its automatic from StandardFilter), I think its bad because its something we then have to commit to/deal with for a while (e.g. backwards compat).\n\nSo another idea is just to call it CJKFilter or something under the CJK package for now. We could still cutover CJKAnalyzer like the patch and then it finally works with supplementary characters too (which I think is really long needed).\n",
            "date": "2011-12-16T23:51:12.048+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "sorry to take so long Tom... ill round this out tonight.",
            "date": "2011-12-17T00:24:58.219+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "synced up to trunk... has a couple minor nocommits (mostly just some needed tests) I'll look at tomorrow morning.",
            "date": "2011-12-17T03:55:51.928+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "patch removing all nocommits with additional tests.\n\nI think its ready to commit.",
            "date": "2011-12-27T04:06:09.864+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "one new test and a tweak: so that this filter never calls input.incrementToken() after it already returned false.",
            "date": "2011-12-27T15:04:09.705+0000",
            "id": 12
        },
        {
            "author": "Robert Muir",
            "body": "Committed, maybe in the future we enable this for StandardFilter (for good CJK behavior by default), but for now it seems good enough to have separate filters that handle the corner cases and all of unicode.",
            "date": "2011-12-29T05:24:36.853+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi Robert,\n\nI had no time to review before, there is one small thing that should maybe fixed. Currently this finter relies on the fact that TypeAttribute strings are interned, as it compares by identity:\n\n{code:java}\nString type = typeAtt.type();\nif (type == doHan || type == doHiragana || type == doKatakana || type == doHangul) {\n{code}\n\nThis is documented nowhere that Strings in TypeAttribute need to be interned. We should maybe replace that check by a simple equals(). It seems that you already wanted to do that, as you added a sentinel value Object NO = new Object(). -With the above check this sentinel value is useless, a simple null would be enough-. *EDIT:* Sentinel value is also useful for not enabling bigramming is a Tokenizer sets \"null\" as TypeAttribute. When using equals() this sentinel makes real sense. The check is not costly. String.equals() already does an identity check for early exit, if the sentinel is used it will also quickly return false (if String.equals(sentinel) is used, it will return false on instanceof Check, if you call sentinel.equals(String) it will even be faster).\n\nSo I would change this check to:\n\n{code:java}\nString type = typeAtt.type();\nif (doHan.equals(type) || doHiragana.equals(type) || doKatakana.equals(type) || doHangul.equals(type)) {\n{code}\n\n(this is the fastest check, if the doXXX is the sentinel, it's default Object.equals() will return false. If its a string, String.equals() will return true on identity very quick, but if it's not interned it will be slower. So we loose nothing but dont require useless interned strings.",
            "date": "2011-12-29T10:02:30.066+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "...alternatively, we could use a HashSet<String>. If the stringsin it are intered, the lookup is fast, too. The hashCode of Strings is precalculated in the String class. For four if checks it maybe not really different performance wise, but thats just another idea. The ctor would simply check the flags and add the type strings to the Set<String>.",
            "date": "2011-12-29T10:26:25.358+0000",
            "id": 15
        },
        {
            "author": "Robert Muir",
            "body": "Hi Uwe:\n\nMany filters in lucene currently do things like this, and have forever (including StandardFilter).\nIn my opinion its ok, as its documented this filter works with StandardTokenizer and ICUTokenizer which use\nthe interned types.\n\nSo I would prefer if we discuss this on another issue.",
            "date": "2011-12-29T14:09:50.585+0000",
            "id": 16
        },
        {
            "author": "Robert Muir",
            "body": "I created LUCENE-3669 for the broader interned-type issue",
            "date": "2011-12-29T14:32:35.181+0000",
            "id": 17
        }
    ],
    "component": "modules/analysis",
    "description": "The ICUTokenizer produces unigrams for CJK. We would like to use the ICUTokenizer but have overlapping bigrams created for CJK as in the CJK Analyzer.  This filter would take the output of the ICUtokenizer, read the ScriptAttribute and for selected scripts (Han, Kana), would produce overlapping bigrams.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2906",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Filter to process output of ICUTokenizer and create overlapping bigrams for CJK ",
    "systemSpecification": true,
    "version": ""
}