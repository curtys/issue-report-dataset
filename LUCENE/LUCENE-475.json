{
    "comments": [
        {
            "author": "Volodymyr Bychkoviak",
            "body": "Oh, I didn't described my solution...\nSolution is simle: use 1k buffer to copy files from source  index to ram files",
            "date": "2005-12-01T21:04:21.000+0000",
            "id": 0
        },
        {
            "author": "Hoss Man",
            "body": "\nI'm no expert on File I/O, so i don't know if this is/isn't a good change to make, but i deplore constants:\n\nIf this patch is a good idea, then i'd like to suggest that instead of a static constant for the buffer size, a new constructor arg be added specifying the buffer size, with the default (ie: no value, or \"0\" specified) being to use the old behavior (ie: a buffer the same size as the file)",
            "date": "2005-12-02T03:36:32.000+0000",
            "id": 1
        },
        {
            "author": "Bernhard Messer",
            "body": "I like the patch and find it very helpful if one tries to load larger indices into RAMDirectory.\n\nHoss Man,\n\nwhy do you would like to have a new constructor to adjust the internal buffer size. I do not see any reason to make the buffersize configurable from outside. The tests i made with different sizes didn't show any difference on performace or disk usage. The new implementation would be similar to BufferedIndexOutput where the internal buffer size couldn't be changed either. Do i miss something ?\n",
            "date": "2005-12-02T06:36:15.000+0000",
            "id": 2
        },
        {
            "author": "Hoss Man",
            "body": "Using different buffer sizes may not make a big difference in your performacne tests -- but that doesn't mean it won't mke a differnece for other people running with different heap sizees, or on different hardware.  \n\nAs i understand it, the point of this patch is to give people the ability to use memory more efficiently,  and I applaud that -- but why not go all out and let users control he buffer size so they can tune it to their hearts content?",
            "date": "2005-12-02T08:16:29.000+0000",
            "id": 3
        },
        {
            "author": "Doug Cutting",
            "body": "Why not just use BufferedIndexOutput.BUFFER_SIZE, a constant declared elsewhere and already used for all RAMDirectory buffers?  That way you're not introducing any new constants and disturbing the constant averse...\n\nAnd I disagree that the default behaviour should be as before:  there's no good reason to buffer the entire file.  That was a bug that this patch fixes.",
            "date": "2005-12-02T08:30:59.000+0000",
            "id": 4
        },
        {
            "author": "Alexey Panchenko",
            "body": "byte[] buf = new byte[READ_BUFFER_SIZE];\nshould be moved before the for-loop, so the single buffer can be used to load all the files.",
            "date": "2005-12-02T15:38:16.000+0000",
            "id": 5
        },
        {
            "author": "Volodymyr Bychkoviak",
            "body": "second version of patch which  uses  BufferedIndexOutput.BUFFER_SIZE as buffer size and same buffer for all files.\n",
            "date": "2005-12-02T17:52:52.000+0000",
            "id": 6
        },
        {
            "author": "Jiri Kuhn",
            "body": "Wouldn't it be nice to have special method to copy two directories? Like:\n\npublic abstract class Directory {\n    ...\n    public static void copyDirectory(Directory from, Directory to) throws IOException {\n          // patched code here\n    }\n}\n\nBecause I have different problem how to flush RAMDirectory to FSDirectory. The copy operation is more general to be only in RAMDirectory.",
            "date": "2005-12-02T20:13:43.000+0000",
            "id": 7
        },
        {
            "author": "Volodymyr Bychkoviak",
            "body": "agree",
            "date": "2005-12-02T21:37:24.000+0000",
            "id": 8
        },
        {
            "author": "Yonik Seeley",
            "body": "super minor nit:\n\n  toRead = Math.min(len-readCount, BufferedIndexOutput.BUFFER_SIZE)\n\nis easier on my eyes than\n\n+        int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? len - readCount : BufferedIndexOutput.BUFFER_SIZE;\n",
            "date": "2005-12-03T02:09:21.000+0000",
            "id": 9
        },
        {
            "author": "Bernhard Messer",
            "body": "Volodymyr,\n\nthanks for the fix. It's reviewed and commited.\n\nBernhard",
            "date": "2005-12-03T02:41:10.000+0000",
            "id": 10
        }
    ],
    "component": "core/store",
    "description": "recently I found that  RAMDirectory(Directory dir, boolean closeDir)  constructor uses memory inefficiently.\nfiles from source index are read entirely intro memory as single byte array which is after all is thrown away. And if I want to load my 200M optimized, compound format index to memory for faster search I should give JVM at least 400Mb memory limit. For larger indexes this can be an issue.\n\nI've attached patch how to solve this problem.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-475",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": " RAMDirectory(Directory dir, boolean closeDir)  constructor uses memory inefficiently.",
    "systemSpecification": false,
    "version": ""
}