{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "A couple of guidelines off the top of my head...\n - hash codes should strive to be unique across the Query hierarchy, not just unique within one specific subclass.  For example, TermQuery(t) and SpanTermQuery(t) will generate the exact same hash codes.\n- mix bits between different components that have any hashCode parts in common... \n   for example RangeQuery will produce the same hashCode whenever lowerTerm==upperTerm.\n   Also, field[x TO y] will produce the same hashCode for *any* field since the fieldname parts of the\n  terms will always cancel eachother out.  This will also cause the hashCode of field{x TO x} to equal field:x\n  The hashCode of FilteredQuery will also cause many collisions because the bits aren't mixed inbetween\n   the query and the filter.\n  Remember that every query as a boost component... never just xor two query hashCodes together.\n- make things position dependent.\n  Currently, field[x TO y] will produce the same hasCode as field[y TO x]... not particularly important for RangeQuery, but\n   you get the idea. \n- don't be afraid of using \"+\" instead of \"^\".  They both take a single CPU cycle, but \"+\" is not quite so easily (accidentally) reversed.\n- flipping more than a single bit when hashing a boolean might be a good idea - it will make collisions harder.\n\nhttp://www.concentric.net/~Ttwang/tech/inthash.htm is an interesting link on integer hash codes (what we are in effect doing when we combine multiple hash codes).  Esp interesting is the section \"Parallel Operations\"",
            "date": "2005-10-31T00:04:04.000+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "Oh, and preserve entropy by using reversible integer hash functions (see the previous link).\n -  key ^= (key << a) | (key >>> b); for a,b in (17,16) (16,17) (14,19) (19,14) (13,20) (20,13) (10,23) (23,10) (8,25) (25,8)\n - multiply by an odd\n - addition\n - xor\n - rotates",
            "date": "2005-10-31T00:07:52.000+0000",
            "id": 1
        },
        {
            "author": "Daniel Naber",
            "body": "\"Currently, field[x TO y] will produce the same hasCode as field[y TO x]... not particularly important for RangeQuery, but  you get the idea. \"\n\nActually it is kind of important, because while [a TO z] will give hits [z TO a] won't.\n",
            "date": "2005-10-31T00:14:08.000+0000",
            "id": 2
        },
        {
            "author": "Paul Elschot",
            "body": "> \u00a0- hash codes should strive to be unique across the Query hierarchy, not just unique within one specific\n> subclass. For example, TermQuery(t) and SpanTermQuery(t) will generate the exact same hash codes. \n\nThis has the disadvantage that the structure information added by the query parser is lost in the hash.\nIn case a hash is needed over the query text before parsing, one can use precisely that.\nWhat's the point of hash code uniqueness over subclasses?\n\nRegards,\nPaul Elschot\n",
            "date": "2005-10-31T16:51:42.000+0000",
            "id": 3
        },
        {
            "author": "Yonik Seeley",
            "body": "Paul, I'm not sure I understand your point about \"structure information added by the query parser is lost in the hash\".\nLet me rephrase my statement in case you misunderstood me:\n\n   - hash codes should strive to avoid collisions across Query hierarchy, not just within one specific\n     subclass. An example of hashCode implementations that don't do this are TermQuery(t) and SpanTermQuery(t) which will generate the exact same hash codes. \n\n> What's the point of hash code uniqueness over subclasses? \n\nThe same point as hash code uniqueness (avoiding collisions) within a particular class - the more collisions you have, the more it will slow down hash based lookups.  Things should still work if all hashCodes mapped to the same number, but it would be dog slow.",
            "date": "2005-10-31T23:01:04.000+0000",
            "id": 4
        },
        {
            "author": "Paul Elschot",
            "body": ">  For example, TermQuery(t) and SpanTermQuery(t) will generate the exact same hash codes. \n\nI'm sorry, I misread this as an example of what a hash code should be. You meant this\nto be an example of what is wrong with current hashcodes...\n ",
            "date": "2005-11-01T04:22:19.000+0000",
            "id": 5
        },
        {
            "author": "Yonik Seeley",
            "body": "Some people have asked where some of the magic constants come from in the hashCodes:\n\n> python -c \"import random;print hex(random.getrandbits(32))[:-1]\"\n> Just a way of making some things unique.... let me know if you have a\n> better idea on that.\n> \n> So those constants are just random numbers.  I thought about trying to pick magic numbers to maximize hamming distances, etc,\n> but it's more work and more likely to mess things up if you get it wrong.  getClass().hashCode() would also work, but it would be \n> slower.\n",
            "date": "2005-12-24T01:29:21.000+0000",
            "id": 6
        },
        {
            "author": "Yonik Seeley",
            "body": "closing... I think I got most of these.",
            "date": "2006-04-06T10:10:47.000+0000",
            "id": 7
        },
        {
            "author": "David Smiley",
            "body": "I am not an expert on hashCode generation, yet as any java developer I have to generate hash codes.  I typically leave this to my IDE, IntelliJ.  As I find the need to update a hashCode, *do you think it's bad form for me to outright replace an existing hashCode implementation you wrote that looks complicated to me with what IntelliJ generates?*:  Here's a specific example:\n\nSpanNotQuery formerly:\n{code:java}\n    int h = include.hashCode();\n    h = (h<<1) | (h >>> 31);  // rotate left\n    h ^= exclude.hashCode();\n    h = (h<<1) | (h >>> 31);  // rotate left\n    h ^= Float.floatToRawIntBits(getBoost());\n    return h;\n{code}\n\nIntelliJ will generate a hashCode for this + a new pre & post pair of integer fields I'm adding via LUCENE-5091:\n{code:java}\n    int result = super.hashCode();\n    result = 31 * result + include.hashCode();\n    result = 31 * result + exclude.hashCode();\n    result = 31 * result + pre;\n    result = 31 * result + post;\n    return result;\n{code}\n\nNow that's a hashCode implementation I can understand, and I don't question it's validity because IntelliJ always generates them in a consistent fashion that I am used to seeing.  Your hashCode might be better, but I simply don't understand and thus can't maintain it.  Do you want me to consult you (or an applicable author of a confusing hashCode in general) every time?  Granted this doesn't happen often.\n",
            "date": "2013-07-18T16:00:18.702+0000",
            "id": 8
        },
        {
            "author": "Dawid Weiss",
            "body": "There isn't really much to understand, it's pretty simple. \n\n{code}\nh = (h<<1) | (h >>> 31);  // rotate left\n{code}\n\nThese are rotation bitshifts -- there is no operator for it in Java. There's actually an intrinsic for this (Integer.rotateLeft and rotateRight).\n\nNow which sequence of operations -- the one above or IntelliJ generated one -- is \"better\" is a difficult question to answer -- depends how many collisions you actually get for real life include/exclude pairs. I doubt there'll be many. Multiplications used to be much smaller than bitshifts and logical operations so the first version is probably historically motivated (as being faster).\n",
            "date": "2013-07-18T18:41:33.867+0000",
            "id": 9
        },
        {
            "author": "David Smiley",
            "body": "With some time (and thanks to your help) I'm learning *what* it is doing but it takes more to know *why*, making it hard to judge how to add in a couple more integers into the existing hashCode.  Well... as I've been spending more time investigating, I'm feeling a more comfortable.  I would certainly prefer to see Integer.rotateLeft(31).\n\nI argue for the more maintainable code -- and that's IntelliJ's version.  I also like that it uses super.hashCode(), which leaves the responsibility of including the hashcode of boost, which is where that responsibility should lie.  Of course the approaches are complementary.\n\n_More generally_, I'm looking to see if it would be bad form of me to outright replace a hashCode (or equals) method if it suited me, without feeling obliged to consult who coded it in the first place.",
            "date": "2013-07-18T19:37:00.003+0000",
            "id": 10
        },
        {
            "author": "Dawid Weiss",
            "body": "I didn't argue for the first version or the second one -- I was just saying both are pretty straightforward. They're apples and oranges, hard to tell which one is better. IntelliJ's version is based on a common pattern found throughout the JDK -- I am pretty sure it has a common underlying academic source somewhere :)\n\nIn general implementing equals and hashCode properly (so that the contract of these methods is not violated and the hash code distribution is sensibly random) is not trivial at all so anything that helps you get to the point is probably sensible.\n\n{code}\nInteger.rotateLeft(31)\n{code}\n\nThat example is actually a rotateLeft(1) -- you shift one bit to the left (h<<1), then you OR (\"insert\") the leftmost bit shifted to the first bit's position (h>>>31).\n",
            "date": "2013-07-18T20:54:07.085+0000",
            "id": 11
        }
    ],
    "component": "core/search",
    "description": "It would be nice for all Query classes to implement hashCode and equals to enable them to be used as keys when caching.\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-460",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "hashCode improvements",
    "systemSpecification": false,
    "version": ""
}