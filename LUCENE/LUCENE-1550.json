{
    "comments": [
        {
            "author": "Thomas Morton",
            "body": "Patch includes implementation of n-gram string matching.\n\nThis implementation uses the position-based optimization to compute partial matches of n-gram sub-strings and adds a null-character prefix of size n-1  so that the first character is contained in the same number of n-grams as a middle character.  Null-character prefix matches are discounted so that  strings with no matching characters will return a distance of 0.\n\nIncludes test cases.\n\nFixes javadoc description of StringDistance to reflect that 1 is used for the same string and 0 for non-matching.",
            "date": "2009-02-28T03:18:33.779+0000",
            "id": 0
        },
        {
            "author": "Grant Ingersoll",
            "body": "not major",
            "date": "2009-03-03T01:42:44.579+0000",
            "id": 1
        },
        {
            "author": "Grant Ingersoll",
            "body": "Hey Tom,\n\nFew questions:\n\n# Do you have recommendations on picking n?\n# On line 78 or so, can't that be moved up?  s1/t1 are calculated on line 47 and not assigned to.  Seems like it would be an optimization to return out if they are 0.  Also, can it just be:\n{code}\nif (s1 == 0 || t1 == 0){return 1;};\n{code}\nIn fact, all tests still pass when this is moved up to the top.  However, I must not be understanding something, as why should:\n{code}\npublic void testEmpty() throws Exception {\n    StringDistance nsd = new NGramDistance(1);\n    float d = nsd.getDistance(\"\", \"al\");\n    assertEquals(d,1.0f,0.001);\n  }\n{code}\npass?\n",
            "date": "2009-03-21T21:30:04.017+0000",
            "id": 2
        },
        {
            "author": "Thomas Morton",
            "body": "\n2 seems a reasonable default.  Experiments in paper should comparable results for bi-grams and tri-grams.  Made an empty constructor which sets n=2.\n\nYes that can be moved up without penalty.\n\nThat's a bug in the empty case.  Should return 0 unless both strings are empty.  I ported this bug form the Levenstein Distance code.  It's now fixed in both and has unit tests in both.  New patch attached.\n\nTechnically NGramDistance(1) is the same thing as LevensteinDistance but LevensteinDistance code is more straight forward and may be slightly faster.\n",
            "date": "2009-03-22T18:06:08.122+0000",
            "id": 3
        },
        {
            "author": "Grant Ingersoll",
            "body": "Hey Tom,\n\nThe empty string test still fails, namely b/c it is expecting 0.0 instead of -1.  Seems like we should just return 0 for the case where one is empty.  Although, even that is a bit weird, right?  For instance, in the Edit distance case, there still is a notion of the number of edits one needs to make to get from a string to an empty string, right? That is, the distance from \"a\" to \"\" seems less than the distance of \"abcdef\" to \"\", no?\n\nI guess I'm fine with 0, but what does the literature suggest for this edge case?",
            "date": "2009-04-01T20:26:44.477+0000",
            "id": 4
        },
        {
            "author": "Thomas Morton",
            "body": "Fixes the empty string case.\nAdds some additional unit tests.",
            "date": "2009-04-22T03:14:03.445+0000",
            "id": 5
        },
        {
            "author": "Thomas Morton",
            "body": "The implementations returns a normalized edit distance (normalized by string length) and specifically 1 if the strings are the same and 0 if that are maximally different.  0 in that case makes sense as the number of edits is equal to the number of characters in the longest string, so:\n\n1- (2 edits /2 length) = 0\n",
            "date": "2009-04-22T03:18:57.377+0000",
            "id": 6
        },
        {
            "author": "Grant Ingersoll",
            "body": "Committed revision 776704.\n\nThanks Tom!",
            "date": "2009-05-20T14:07:28.407+0000",
            "id": 7
        }
    ],
    "component": "modules/spellchecker",
    "description": "N-Gram version of edit distance based on paper by Grzegorz Kondrak, \"N-gram similarity and distance\". Proceedings of the Twelfth International Conference on String Processing and Information Retrieval (SPIRE 2005), pp. 115-126,  Buenos Aires, Argentina, November 2005. \nhttp://www.cs.ualberta.ca/~kondrak/papers/spire05.pdf\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1550",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add N-Gram String Matching for Spell Checking",
    "systemSpecification": true,
    "version": "2.9"
}