{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Attached patch.  I plan to commit in a day or two.\n\nI also noticed that CheckIndex would incorrectly mark an index as corrupt if two sequential positions are the same, which of course is perfectly fine (eg if you are injecting synonyms with positionIncrementGap=0).  So I fixed that case too.",
            "date": "2008-03-31T13:39:31.831+0000",
            "id": 0
        },
        {
            "author": "Hoss Man",
            "body": "FWIW: Apparently Luke gets confused by this as well.\n\nif i'm understanding correctly, the only reason position \"-1\" seems to come about is because of some internal counter that starts at \"-1\" since it assumes the first token will have an increment of \"1\" and thus: the first position used is \"0\"\n\nChanging IndexWriter/DocumentsWriter/whatever to ignore the increment of the first Token, or make it realitve to \"0\" might be a better solution in general.\n\ncases to consider: what should it mean for position info if:\n\n- first token has increment of 0\n- first token has increment of 1\n- first token has increment of 27\n\nin my opinion, the answers should probably be: 0, 1, 27 ... but i think that changes the common case of \"1\" (which would currently gets a position of \"0\" right?) ... so maybe the right behavior is 0,0,26\n\n",
            "date": "2008-03-31T18:50:07.903+0000",
            "id": 1
        },
        {
            "author": "Doug Cutting",
            "body": "Since the increment is relative to the prior token, it should make no difference when there is no prior token.  So shouldn't the first token be at position=0 no matter what its increment?",
            "date": "2008-03-31T18:55:50.906+0000",
            "id": 2
        },
        {
            "author": "Hoss Man",
            "body": "bq. Since the increment is relative to the prior token, it should make no difference when there is no prior token. So shouldn't the first token be at position=0 no matter what its increment?\n\nI'm ok with that ... but the other way to look at it is that there is a \"virtual token\" signifing the start of the Field, and the first physical tokens increment is relative that ... with things like SpanFirstQueries not allowing the \"first\" token to specify an arbitrary increment from the 'virtual\" start of the field has real consequences.\n\n(consider an Analyzer that only indexes proper names and wants to record real positions so that a SpanFirstQuery can find docs where Doug Cutting appears in the first 100 Tokens)",
            "date": "2008-03-31T19:12:52.379+0000",
            "id": 3
        },
        {
            "author": "Doug Cutting",
            "body": "Hoss: you're right, the change I proposed would be incompatible and might make some applications more difficult to write, with little benefit except aesthetic.",
            "date": "2008-03-31T19:30:47.794+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "OK so I'll change the patch so that the first Token's position is max(0, increment-1).\n\nThis only changes the \"increment=0\" case to now set position to 0 not -1.\n\nAnd I'll change CheckIndex again to reject position == -1.",
            "date": "2008-03-31T20:39:31.959+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Attached new patch.",
            "date": "2008-03-31T22:04:11.726+0000",
            "id": 6
        },
        {
            "author": "Michael Busch",
            "body": "I don't think this was a backwards-compatible change.\n\nWith this change you can't tell anymore if the first token had a positionIncrement\nset to 0 or 1. TermPositions.nextPosition() returns 0 in both cases. Applications\ntoday might rely on getting -1 from nextPosition() in the former case.",
            "date": "2008-04-28T21:24:22.950+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "Hmm, you're right.\n\nOK so I guess we should revert it entirely, on 2.4 & 2.3.2, and continue to accept -1 position in the index?  It doesn't seem to cause any real harm, except CheckIndex was [incorrectly] flagging it as corruption, and, Luke was also unhappy with it.\n",
            "date": "2008-04-28T22:03:20.868+0000",
            "id": 8
        },
        {
            "author": "Michael Busch",
            "body": "{quote}\nOK so I guess we should revert it entirely, on 2.4 & 2.3.2, and continue to accept -1 position in the index?\n{quote}\n\nYes, I think we should do that.",
            "date": "2008-04-28T22:10:44.958+0000",
            "id": 9
        },
        {
            "author": "Mark Miller",
            "body": "why should the first token have an increment of 1? I think the first token should always be 0. Increments are between tokens.\n\nand why do you want to know if the first token had an inc of 0 or 1? I think the -1 is a bug and it shows up elsewhere - eg spans,payloads, and most likely highlighting with the SpanHighlighter.",
            "date": "2009-05-28T16:17:59.294+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "Fix reverted and corrected to disallow negative posIncr in LUCENE-1542.",
            "date": "2011-01-26T15:26:36.643+0000",
            "id": 11
        }
    ],
    "component": "core/index",
    "description": "\nSpinoff from this discussion:\n\n    http://mail-archives.apache.org/mod_mbox/lucene-java-user/200803.mbox/%3CPine.LNX.4.62.0803292323350.16762@radix.cryptio.net%3E\n\nRight now CheckIndex claims the index is corrupt if you index a Token with -1 position, which happens if your first token has positionIncrementGap set to 0.\n\nBut, as far as I can tell, Lucene doesn't \"mind\" when this happens.\n\nSo I plan to fix CheckIndex to allow this case.  I'll backport to 2.3.2 as well.\n\nLUCENE-1253 is one example where Lucene's core analyzers could do this.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1255",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "CheckIndex should allow term position = -1",
    "systemSpecification": true,
    "version": "2.4"
}