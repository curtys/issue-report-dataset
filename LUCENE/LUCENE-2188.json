{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "The again heavy class from Uwe's reflection tools...",
            "date": "2010-01-03T13:33:17.549+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "By the way, this of course passes Mike's testcase, where he tests this with a dummy Analyzer that overrides the old method.",
            "date": "2010-01-03T14:04:08.860+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Improved patch:\n- add runtime checks to not fail on spelling errors\n- add testcase for distance measurement",
            "date": "2010-01-03T15:08:17.457+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Haven't looked closely at the patch, but, this sounds useful Uwe!",
            "date": "2010-01-03T15:42:28.394+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "Also added test for protected methods and some tests that all IAEs are thrown correctly.",
            "date": "2010-01-03T16:35:38.807+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Some API cleanup and more readability for client code (see Analyzer.java and javadocs). Also enforce singleton status (static instantiations needed!).",
            "date": "2010-01-03T23:15:20.405+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "New patrch, the previous one had the compare method in wrong order. Fixed docs and Analyzer and tests. I always get \"totally disturbed\" when using compareTo() and compare() :-(",
            "date": "2010-01-04T12:17:28.223+0000",
            "id": 6
        },
        {
            "author": "Simon Willnauer",
            "body": "Uwe, \nI'm not sure if I have a really good replacement for the your names, none of the following suggestions seem to be a 100% match though.\n\nfor getOverrideDistance() you could call it:\n * getDefinitionDistanceFrom(Class)\n * getImplementationDistanceFrom(Class)\n\nThe term distance is fine IMO, I would rather extend the javadoc a little and explain that this is the distance between the given class and the next class implementing the method on the path from the given class to the base class where the method was initally declared / defined\n\nfor isOverriddenBy() you could call it:\n * isDefinedBy()\n * isImplementedBy()\n\nI also wanna mention an option for the class name, \"VirtualMethod\" pretty much matches what this class represents. :) ",
            "date": "2010-01-05T23:20:28.551+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "I renamed the class to VirtualMethod as suggested by Simon and also changed method names and their javadocs to better describe whats happening. It is still hard to use, but client code never should use this class.\n\nI will commit this soon to proceed with the dependent issues. Improvements to Javadocs can be done later of course.",
            "date": "2010-01-12T11:51:11.195+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "Changed javadocs and changes.txt.\n\nWill commit this now.",
            "date": "2010-01-12T20:52:57.655+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 898507",
            "date": "2010-01-12T21:04:06.531+0000",
            "id": 10
        },
        {
            "author": "Simon Willnauer",
            "body": "good stuff uwe, I will fix LUCENE-2183 now.",
            "date": "2010-01-12T21:10:31.287+0000",
            "id": 11
        }
    ],
    "component": "",
    "description": "This issue provides a new handy utility class that keeps track of overridden deprecated methods in non-final sub classes. This class can be used in new deprecations.\n\nSee the javadocs for an example.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2188",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "A handy utility class for tracking deprecated overridden methods",
    "systemSpecification": true,
    "version": ""
}