{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "You can use ConcurrentMergeScheduler.sync()?",
            "date": "2009-06-19T17:54:43.196+0000",
            "id": 0
        },
        {
            "author": "Tim Smith",
            "body": "thought maybe that method would do it, however that method is undocumented (no javadoc) \n\nideally, the IndexWriter would have these semantics in order to handle any configured MergeScheduler that may perform background syncs",
            "date": "2009-06-19T17:58:04.941+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "bq. ideally, the IndexWriter would have these semantics in order to handle any configured MergeScheduler that may perform background syncs\n\nI agree.  Wanna cons up a patch?",
            "date": "2009-06-19T18:03:53.498+0000",
            "id": 2
        },
        {
            "author": "Tim Smith",
            "body": "I'm not super familiar with internals of IndexWriter, but i'll give it a shot",
            "date": "2009-06-19T18:05:22.990+0000",
            "id": 3
        },
        {
            "author": "Tim Smith",
            "body": "Here's a diff for IndexWriter.java\n\nmoved code from else block in finishMerges() into public waitForMerges() method\n\nthis should wait for any outstanding merges to be complete prior to exiting\n\nwill see if i can also work up a test case",
            "date": "2009-06-19T18:28:47.298+0000",
            "id": 4
        },
        {
            "author": "Tim Smith",
            "body": "I'm finding it a bit tricky to create a proper unit test for this\n\nThis is indirectly tested as IndexWriter.close() will call this method\n\nbut explicit calling of this method is harder to test as it requires outstanding merges to be running (very difficult to trigger)\n\nI started with TestIndexWriter.testNoWaitClose() as a base\nhowever, modifying this to test waitForMerges() takes 11 seconds to run (surely because it always waits, and doesn't abort the merges)\n\nalso, in order to properly test, another method should be added to IndexWriter\n{code}\npublic synchronized int getOutstandingMerges() {\n  return mergingSegments.size();\n}\n{code}\n\nI suppose the most proper test would create a subclass of ConcurrentMergeScheduler that would block all merges until after i released a lock.  Then the test would add docs, fork off thread to unlock for merging in X seconds, then call waitForMerges.\n",
            "date": "2009-06-19T19:09:51.538+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good!  I don't think you actually need a separate unit test, since (as you pointed out), this method is well tested internally?",
            "date": "2009-06-19T19:23:46.743+0000",
            "id": 6
        },
        {
            "author": "Shai Erera",
            "body": "May I ask what's the use case for this? I looked at IndexWriter and the following have doWait versions: close(), optimize() and expungeDeletes(). The only one that doesn't is commit(), which documents it will not wait for merges. So this seems to be a method just for\n\n{code}\ntry { \n  writer.commit(); \n} finally { \n  writer.waitForMerges(); \n}\n{code}\n\nIs there any other use case that you would want to wait for merges to finish?\n\nIt's just that adding methods means we need to support them going forward, and if there's no real use case (or at least none that is covered by current API), we should not do it?",
            "date": "2009-06-19T19:26:28.941+0000",
            "id": 7
        },
        {
            "author": "Tim Smith",
            "body": "My primary use case for this is to stabilize an index prior to performing a backup operation\n\nIf background merges are ongoing, then partial segment files will be written to disk (potentially while an rsync or other operation is running)\n\nthis will result in partial segments being backed up\n\nwhile this should still be a viable index, as the partial segments have not been \"committed\", it results in an unclean backup (this can result in rsync throwing warnings/errors (which operations people greatly dislike)\n\n\n\n",
            "date": "2009-06-19T19:33:22.103+0000",
            "id": 8
        },
        {
            "author": "Tim Smith",
            "body": "Very minor change\nmoved assert on mergingSegments.size() into waitForMerges()",
            "date": "2009-06-19T19:53:30.793+0000",
            "id": 9
        },
        {
            "author": "Shai Erera",
            "body": "I'm just playing the devil's advocate here. \n\nI'm still not sure that this method is needed. A MergeScheduler is given to IndexWriter, and therefore your code should be able to sync() on it, whether it's ConcurrentMergeScheduler or a different one which does background merges, since you control its creation. If it's something that needs to improve on CMS, let's improve it (like documenting sync()).\n\nbq. My primary use case for this is to stabilize an index prior to performing a backup operation\n\nStill .. if you call any of the methods I've mentioned, you can change your code to call the doWait variants, except for commit(). If commit() is what you're after, wouldn't it be better to add a commit(doWait) so that you can call it w/ doWait=true?\n\nBTW, Mike McCandless has written a great article on Hot Backups w/ Lucene, which you can find here: http://www.manning.com/free/green_HotBackupsLucene.html (need to register to Manning first). If you're not familiar w/ it, I suggest you read it since it shows a nice and elegant ways to perform backups, w/o the need to sync your writer.\n\nI'm planning to try it out. One thing you can do, after calling snapshot() is to compare the files returned from snapshot() to the ones in the backup and: (1) delete the ones in backup that do not appear in the returned list of files, and copy over the files that do not exist in the backup (except for .lock). The article is really good and self explanatory.",
            "date": "2009-06-19T20:33:45.133+0000",
            "id": 10
        },
        {
            "author": "Tim Smith",
            "body": "MergeScheduler does not provide a sync() method in its abstract class. Therefore, an implementation could be used that would not derive from or provide a sync() method\n\nIf it did, this would be a more than acceptable solution instead of putting the method on the IndexWriter. (i potentially want to allow configuration to specify what MergeScheduler to use, and if sync() isn't specified on the base class, i can't reliably use it (will have to do instanceof checks, and a new concurrent based scheduler not derived from ConcurrentMergeScheduler breaks this)\n\nAlso, the SerialMergeScheduler may be in use and be running due to another thread calling addDocument triggering a merge, but i want my second thread to wait for that merge to complete (this would require implementing sync() on SerialMergeScheduler to allow other threads to sync on the merge as well)\n\noptimize() is not a viable option to use to wait for merges as this could take a long time (hours)\nclose() requires reopening the IndexWriter (which i am trying to avoid in the first place)\nexpungeDeletes(true) is doing more work that is actually required (this could be a viable solution, however its a bit odd to \"waitForMerges()\" by calling a method called expungeDeletes())\n\nI will try getting access to the article you suggest, however i still expect i will want this method at the end of the day (and will end up using expungeDeletes(true) if it never gets added (with copious comments indicating that expungeDeletes() is actually being used to wait for background merges)\n\nAnother use for waitForMerges() is as a more lightweight version of optimize().\nthis will allow blocking adding more documents until background merges are complete periodically, preventing from throttling the IO on the indexer from being hit too hard. Could call IndexWriter.maybeMerge() followed by IndexWriter.waitForMerges()\n\n\n\n",
            "date": "2009-06-19T20:53:59.997+0000",
            "id": 11
        },
        {
            "author": "Shai Erera",
            "body": "{quote}\nMergeScheduler does not provide a sync() method in its abstract class. Therefore, an implementation could be used that would not derive from or provide a sync() method\n\nIf it did, this would be a more than acceptable solution instead of putting the method on the IndexWriter. (i potentially want to allow configuration to specify what MergeScheduler to use, and if sync() isn't specified on the base class, i can't reliably use it (will have to do instanceof checks, and a new concurrent based scheduler not derived from ConcurrentMergeScheduler breaks this)\n{quote}\n\nWe can add a sync() method to MergeScheduler or you do it on your side. There are only two MS today: CMS and SMS. If you're going to write your own CMS variant, then you can have it extend CMS, or define your own interface with a sync() method, which will delegate that call to whatever MS it wraps. Again, the way I see it, you know which MS you instantiate, and therefore you should be able to declare its type and use whatever methods it has. If you want something configurable, I suggest we move sync() to MS (w/ a default impl of doing nothing, for back-compat).\n\nWhat do you think?\n\nbq. ... another thread calling addDocument triggering a merge\n\nThis will only happen if you use autoCommit=true, right? You can use autoCommit=true, and when you call commit(), use the one that waits for merges (the one that does not exist yet :) ), and sync all your addDoc threads with that current commit thread (make sure you use a ReadWriteLock, or otherwise all your addDocs are going to sync on each other).\n\nbq. this will allow blocking adding more documents until background merges are complete periodically\n\nWhat's \"periodically\"? If you're using autoCommit=false, those merges cannot happen suddenly. There are only 4 methods that can trigger them (I think?) and you can sync on calling them w/ the rest of the addDoc threads.\n\nDon't get me wrong - I just play the devil's advocate here. Recently, we've had this thread http://www.nabble.com/ReadOnly-IndexReaders-td23787255.html - a naive question on adding an ever more naive method to IndexReader - isReadOnly. If you read it, you'll see that it wasn't accepted at the end, because we've understood it will just try to cover a design flaw of your system.\n\nTherefore I'm just trying to verify whether this method is absolutely necessary, and there aren't any \"design decisions\" we should make in our apps to better handle that case.\n\nHaving said that, I'm not a committer and if one decides it's important enough, one would take this issue and commit it. I just enjoy the discussion  for now (hope you too :) ).",
            "date": "2009-06-19T21:20:13.403+0000",
            "id": 12
        },
        {
            "author": "Tim Smith",
            "body": "NOTE: I'm always using autoCommit=false (autoCommit=true is deprecated anyway)\n\nhowever, i could potentially have 2 threads feeding the index (in my custom code)\none thread may call addDocument() (or maybeMerge() to be more to the point)\nthis thread could result in the SerialMergeScheduler to start merging (addDocument() won't return until this merge completes)\nI then want thread 2 to call waitForMerges(), at which point it will wait till the first thread will have finished its merges (at which point addDocument will have returned)\n\nObviously this is a contrived example as i personally will be locking the updates such that no addDocument() call could be in process when i want to call waitForMerges(), however this situation points out that even the SerialMergeScheduler should have an actual implementation for a sync() method, which would block until the thread actually doing the merge has completed. (as i may be calling sync() from a different thread other than the one the IndexWriter called merge() on) SerialMergeScheduler should therefore have a lock that will be held while merging, and a sync() method should be added that will just acquire and release the lock. Making both the sync() and merge() methods on the SerialMergeScheduler would achieve this (and the sync would just be a synchronized noop)\n\nIt seems more natural to me to put this \"sync\" on the IndexWriter itself, especially as this will be completely agnostic to the merge scheduler used.\n\n\nfor the \"periodic\" waiting for merge thread completion, this would be driven by messages from client code to request a \"soft optimize\" perhaps, which would just wait for background merges to complete. This could then result in turning over a new IndexReader for more efficient searches than using the old IndexReader (which may be more segmented). This message asking for a \"soft optimize\" may be sent on some scheduled basis in order to achieve better search performance (without the cost of an explicit optimize)\n\n\nDiscussion is all well and good, and i definitely appreciate all comments.\nEven if this doesn't end up going in, you've pointed out another solution (using expungeDeletes()) which will achieve the same solution for me at least.\n\n",
            "date": "2009-06-19T21:45:22.007+0000",
            "id": 13
        },
        {
            "author": "Michael McCandless",
            "body": "There are also \"merges\" that take place outside of the merge scheduler, eg addIndexesNoOptimize copies over the tail segments by running its own merges.  Also, with LUCENE-1313, there may be merges that run entirely in RAM, not under MergeScheduler.\n\nI think it makes sense to expose waitForMerges in IW (instead of duplicating the code in every merge scheduler).  We may be able to then deprecate CMS.sync?",
            "date": "2009-06-19T21:56:19.172+0000",
            "id": 14
        },
        {
            "author": "Shai Erera",
            "body": "{quote}\none thread may call addDocument() (or maybeMerge() to be more to the point)\nthis thread could result in the SerialMergeScheduler to start merging (addDocument() won't return until this merge completes)\n{quote}\n\nAgain, if autoCommit=false, how can this happen? I thought that if autoCommit=false, no commit happens and therefore no segment merging?\n\nbq. I think it makes sense to expose waitForMerges in IW (instead of duplicating the code in every merge scheduler). We may be able to then deprecate CMS.sync?\n\nI guess I'm still not convinced what simplicity would that bring. For Tim's use case, just two threads, using SMS, that might work. But for the general use case, or one which uses multiple indexing threads, one of which may call commit() at some point, another daemon may run optimize(), I dunno, this would still require syncing all threads around that waitForMerges call, if the intent is to prevent document additions while merges occur. Therefore this method is not expected to make my life any easier, except that if I need to report \"no merges are running\" or make a decision based on \"no merges are running\" I should have one thread call this waitForMerges()\n\nOf course, still playing the devil's advocate, you could call waitForMerges() which will return immediately b/c there are no merges to do or that are running, and soon as that happens, a context switch also happens, and an innocent addDocument will trigger a 50-segments merge, at which point whatever you thought to do b/c there are no merges, will hit the exact scenario you were trying to avoid all that time :).\n\nI'll admit though that it's late here (1 AM), and perhaps I'm not seeing this clearly. And .. I still don't understand how if autocommit=false, and addDocument/deleteDocument can trigger a merge.",
            "date": "2009-06-19T22:12:47.876+0000",
            "id": 15
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. I still don't understand how if autocommit=false, and addDocument/deleteDocument can trigger a merge.\n\nWhy not? I always use autocommit=false. After I added a number of documents to the index some of the existing not-yet committed segments get merged. It will never merge the current existing and committed segments, but the segments created during indexing can be merged. After commit() or close() the already existing and the new segments are maybe additionally merged and a new segments file written.",
            "date": "2009-06-19T22:27:28.930+0000",
            "id": 16
        },
        {
            "author": "Jason Rutherglen",
            "body": "Seems like a useful feature.",
            "date": "2009-06-19T22:35:28.417+0000",
            "id": 17
        },
        {
            "author": "Shai Erera",
            "body": "Right ... forgot the merges to the uncommitted segments. If we do this, can we also add a commit() version which waits for merges, to complete the set of operations that allow you to wait for merges (just for convenience, so that you don't call commit() followed by a waitForMerges()), or .. deprecate all the variants of the other methods that wait for merges, and say that the default behavior will not wait, and if you want this, call waitForMergest() afterwards?",
            "date": "2009-06-20T05:53:31.605+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "bq. After I added a number of documents to the index some of the existing not-yet committed segments get merged. It will never merge the current existing and committed segments, but the segments created during indexing can be merged. After commit() or close() the already existing and the new segments are maybe additionally merged and a new segments file written.\n\nActually, existing segments do get merged (assuming the merge policy selects them).  It's just that they cannot be deleted because logically there are two snapshots while an IndexWriter is running with autoCommit false: the index as of when it was opened, and the current in-memory SegmentInfos.  (And if you are using a deletion policy different from the default KeepOnlyLastCommit, even more snapshots will be kept).",
            "date": "2009-06-20T10:41:57.910+0000",
            "id": 19
        },
        {
            "author": "Michael McCandless",
            "body": "bq. or .. deprecate all the variants of the other methods that wait for merges, and say that the default behavior will not wait, and if you want this, call waitForMergest() afterwards?\n\n+1\n\nThough we have a migration challenge (if we want to swap the default).  Or we add a matchVersion.",
            "date": "2009-06-20T10:42:47.415+0000",
            "id": 20
        },
        {
            "author": "Shai Erera",
            "body": "bq. Though we have a migration challenge (if we want to swap the default). Or we add a matchVersion.\n\nIf we change the default to not wait, then I don't think matchVersion will matter. Since I'll need to update my code anyway, I don't think I'd care whether I call waitForMerges(), or matchVersion, even though the latter is called only once and the change is required in just one place. matchVersion, IMO, is required in more complicated cases, like that ACRONYM issue, which my code really has no control over.",
            "date": "2009-06-20T17:57:13.430+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "bq. If we change the default to not wait, then I don't think matchVersion will matter. Since I'll need to update my code anyway, I don't think I'd care whether I call waitForMerges(), or matchVersion, even though the latter is called only once and the change is required in just one place. matchVersion, IMO, is required in more complicated cases, like that ACRONYM issue, which my code really has no control over.\n\nBut we can't suddenly not wait, if you call optimize(), right?  (That's too severe a change in runtime behavior) Ie, we'd have to rename it to something else, and deprecate the old one.\n\nActually... I'm no longer so sure we should make this change to the default.  I think the current default (optimize(), addIndexes*(), expungeDeletes(), etc., all wait until they're \"done\") is actually a good default?",
            "date": "2009-06-20T23:21:25.219+0000",
            "id": 22
        },
        {
            "author": "Shai Erera",
            "body": "I'm not against the default, just thought that waitForMerges() will be even more useful if all of these didn't have the doWait variant, and it will reduce the number of methods on IW. We can leave them around though, I guess it doesn't hurt.",
            "date": "2009-06-21T02:30:45.750+0000",
            "id": 23
        },
        {
            "author": "Tim Smith",
            "body": "I also noticed that at least on expungeDeletes() these methods may only wait for merges that the method itself initiated\n\nthe waitForMerges() method would wait for all merges regardless of who initiated the merge.\n\nso:\n{code}\ntry {\n  expungeDeletes(false);\n} finally {\n  waitForMerges();\n}\n{code}\n\nwould not be the same as\n{code}\nexpungeDeletes(true);\n{code}\n\nas the later would only wait for the merges actually caused by the expungeDeletes() method\n\nThis would indicate that the waitForMerges=true/false variants of different methods should remain",
            "date": "2009-06-22T20:58:09.530+0000",
            "id": 24
        },
        {
            "author": "Michael McCandless",
            "body": "bq. This would indicate that the waitForMerges=true/false variants of different methods should remain\n\nAhh good point; and I think the default should be to wait.  OK I plan to commit the current patch in a day or two.  Thanks Tim!",
            "date": "2009-06-22T21:15:28.166+0000",
            "id": 25
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Tim!",
            "date": "2009-06-23T21:08:27.032+0000",
            "id": 26
        }
    ],
    "component": "core/index",
    "description": "It would be very useful to have a waitForMerges() method on the IndexWriter.\n\nRight now, the only way i can see to achieve this is to call IndexWriter.close()\n\nideally, there would be a method on the IndexWriter to wait for merges without actually closing the index.\nThis would make it so that background merges (or optimize) can be waited for without closing the IndexWriter, and then reopening a new IndexWriter\n\nthe close() reopen IndexWriter method can be problematic if the close() fails as the write lock won't be released\nthis could then result in the following sequence:\n* close() - fails\n* force unlock the write lock (per close() documentation)\n* new IndexWriter() (acquires write lock)\n* finalize() on old IndexWriter releases the write lock\n* Index is now not locked, and another IndexWriter pointing to the same directory could be opened\n\nIf you don't force unlock the write lock, opening a new IndexWriter will fail until garbage collection calls finalize() the old IndexWriter\n\nIf the waitForMerges() method is available, i would likely never need to close() the IndexWriter until right before the process being shutdown, so this issue would not occur (worst case scenario, the waitForMerges() fails)\n\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-1703",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add a waitForMerges() method to IndexWriter",
    "systemSpecification": true,
    "version": "2.4"
}