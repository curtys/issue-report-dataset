{
    "comments": [
        {
            "author": "Dawid Weiss",
            "body": "Static fixtures couldn't be handled with a rule, so I've decided to rewrite JUnit Runner instead of subclassing it. Lots of frustration so far, but I like the result :)",
            "date": "2011-10-06T11:01:19.740+0000",
            "id": 0
        },
        {
            "author": "Dawid Weiss",
            "body": "I've implemented a runner that follows the basic algorithm given in LUCENE-3489. Basically speaking, seeds for each test run are fixed derivations of a single master seed (used for the runner and all class-level fixtures) and don't rely on the order of invocations or other factors.\n\nThere's plenty of ways to tweak and tune by overriding class-level @Seed, method-level @Seed. @Repeat gives you control on how many times a given test is executed and whether a seed is reused (constant for each iteration) or randomized (predictably from the start seed).\n\nMost of all, everything fits quite nicely in Eclipse (and I hope other GUIs... didn't check Idea or Netbeans though) because each executed test run is nicely described in the runner (full seed), so that you can either click on it and re-run a single test or write down the seed and fix it at runtime.\n\nLots of TODOs in the code, will continue in the evening.",
            "date": "2011-10-06T11:08:09.845+0000",
            "id": 1
        },
        {
            "author": "Shai Erera",
            "body": "This is only for debugging from an IDE right? It does not replace tests.iter and tests.seed?\n\nIt looks very cool.\n\nIt also adds a risk that someone will accidentally commit tests with these annotations. So perhaps we should add pre-commit hooks, or a test that scans all test files and ensures those annotations do not exist?",
            "date": "2011-10-06T13:46:26.473+0000",
            "id": 2
        },
        {
            "author": "Dawid Weiss",
            "body": "Hi Shai. This is definitely not only for debugging. For example we use randomized testing inside CarrotSearch to test algorithmic/ combinatorial code. Once you hit a bug, you simply copy the test case (or a call to a common test case method) and fix the seed to have a regression test for the future (so that you know you're not failing examples that previously failed). So, for example:\n{code}\n@Test @Seed(\"23095324\")\npublic void runFixedRegression_1 { doSomethingWithRandoms(); }\n\n@Test @Seed(\"239735923\")\npublic void runFixedRegression_2 { doSomethingWithRandoms(); }\n\n@Test\npublic void runRandomized { doSomethingWithRandoms(); }\n{code}\n\nThis is a scenario I really came to like. It's a bit like your tests write themselves for you :)\n\nI left system properties for fixing seeds and enforcing repetition number because they are currently in Lucene, although I personally don't like them that much (because they affect everything globally). I do understand they're useful for quick hacking without recompiling stuff or for remote executions, but I'd much rather have something like -Dseed.testClass[.method]=xxxx which would affect only a single class or method rather than everything. The same can be done for filtering which method/ test case to execute. This is debatable of course and a matter of personal taste.\n\nI should publish what I have tonight on github (I'm moving certain things out of our proprietary codebase and there are JUnit corner cases that slow things down).",
            "date": "2011-10-06T17:04:12.037+0000",
            "id": 3
        },
        {
            "author": "Shai Erera",
            "body": "Ok I get the point now.\n\nBut I still think we should have specific unit tests that reproduce specific scenarios, than using some monstrous tests that happened to stumble on a seed that revealed a bug. If however the scenario cannot be reproduced deterministically, then I agree that this framework is powerful and useful.",
            "date": "2011-10-06T18:27:43.955+0000",
            "id": 4
        },
        {
            "author": "Dawid Weiss",
            "body": "Sure, absolutely. In our (mostly algorithmic, mind you) experience even small test cases can be randomized and then it is really duplicated effort to re-write them for a particular bug scenario (the tests are often simple, the data changes). But sure: the simpler the test, the better.",
            "date": "2011-10-06T18:44:23.032+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "I agree too. one difficulty with using @seed or something is our seeds quickly become out of date because we are often adding more randomization to our testing framework (e.g. additional craziness to randomindexwriter, searchers, analyzer, whatever)",
            "date": "2011-10-06T18:48:37.382+0000",
            "id": 6
        },
        {
            "author": "Dawid Weiss",
            "body": "That's why I mentioned I would like this to become _generally_ useful, not only restricted to Lucene/Solr :) If we make it work for two projects (Carrot2 and Lucene) chances are the outcome will be flexible enough to use elsewhere. \n\nI'm not saying you must fix the seeds using annotations -- it's an option.",
            "date": "2011-10-06T19:02:28.938+0000",
            "id": 7
        },
        {
            "author": "Dawid Weiss",
            "body": "Ok. I've published the project on github here: https://github.com/dweiss/randomizedtesting\n\nThe repo contains the runner, some tests and examples. Lots of TODOs (in TODO), so consider this a work-in-progress, but if anybody cares to take a look and shout if something is definitely not right -- go ahead.\n\nmvn verify on the topmost project compiles everything and runs the tests/ examples. I don't see any functional deviations or differences in execution between ant maven and my Eclipse GUI (mentioned by Robert) which is good.",
            "date": "2011-10-06T23:20:09.268+0000",
            "id": 8
        },
        {
            "author": "Dawid Weiss",
            "body": "A word of warning: this will be a longer comment. I still hope somebody will read it ;)\n\nI've written a somewhat largish chunk of code that provides an infrastructure to run \"randomized\", but \"repeatable\" tests. I'd like to report on my impressions so far.\n\nRobert was right that a custom runner provides more flexibility than a @Rule on top of the default JUnit runner (which changes depending where you run it -- ant, maven, Eclipse, etc.). I've spent a lot of time inspecting the current implementation inside JUnit and I came to the conclusion that it really is best to have a full reimplementation of the Runner interface.  Full meaning not descending ParentRunner, but implementing the whole runner from scratch. This provides additional, uhm, unexpected benefits in that one can add new functionality that \"regular\" JUnit runners don't have and _still_ be compatible with hosting environments such as Ant, Maven or Eclipse (because they, thank God, respect @RunWith). \n\nAmong the things I have implemented so far that are missing or different in JUnit are:\n- There is a \"context\" object which is accessible via thread local, so @BeforeClass and other suite-level hooks can actually access the suite class, inspect it, check conditions, whatever (the runner's random seed is also passed via this context). This is useful, but not crucial.\n- I've decided to deviate from JUnit strict policy of having public hook methods. By default this only causes headaches when one shadows or overrides a hook in the parent class and it is no longer invoked. A better (different) idea is to declare hooks as private; no shadowing occurs and they will all get invoked in a contractual predefined order (befores - super to class, afters - class to super).\n- I've added additional suite-level annotations. @Listeners provides listeners automatically hooked to RunListener. @Validators hooks up additional validators for verifying extra restrictions. An example of such a restriction is bailing out the test suite if shadowed or overridden methods exist in the class hierarchy of a suite class. Another (that I have implemented) is a validator checking for non-annotated testXXX methods that are dead JUnit3 test cases. You get the idea. A lot of code then simply vanishes from LTC; I can envision it having this shape:\n{code}\n@Listeners({\n  StandardErrorInfoRunListener.class})\n@Validators({\n  NoHookMethodShadowing.class,\n  NoTestMethodOverrides.class,\n  NoJUnit3TestMethods.class})\npublic abstract class LuceneTestCase extends RandomizedTest {\n  ...\n}\n{code}\nSome of these things are currently verified using a state machine (calling super() in overridden methods), but this just looks better to me to take away this concern elsewhere rather than implement it inside LTC.\n- The entire lifecycle of handling test method calls and hooks is controlled in the runner. I made a design decision to _not_ follow JUnit's insane wrap-wrap-wrap-exception style but instead report all exceptions that happen anywhere in the lifecycle. So if you get an exception in the test case, followed by an exception in @After, followed by an exception in @AfterClass, all these exceptions will be reported separately to the RunListener and in effect to all listening objects (in the lifecycle-corresponding order!). Such an implementation does work with fine with ANT JUnit reports, maven reports and in Eclipse (all exceptions are included) so far as I can tell -- didn't check other environments like NetBeans or IntelliJ. Again: in my personal opinion this is a much clearer way of dealing with exceptions in the lifecycle of JUnit test case compared to wrapping them into artificial exceptions (MultipleException being a supreme example) or suppressing them altogether.\n- I couldn't resist a tiny tweak of making any exceptions thrown from hooks or test methods carry the information about the seed used in their execution (both runner-level and method-level, even though the latter could be derived from the former).  There is no easy way to do it because Throwables are designed  not to allow changes to their content once constructed. With the exception of stack traces :) So I simply inject a debugging info inside the stack trace as an artificial entry; what it looks like is here, for instance:\n{noformat}\njava.lang.Error: Blah blah exception message.\n\tat __randomizedtesting.SeedInfo.seed([60BDF6E574486C2:60BDF6E76C930BC]:0)\n\tat [\u2026].examples.TestStackAugmentation$Nested.testMethod1(TestStackAugmentation.java:29)\n{noformat}\n(Note how the seed info is inside the file position of StackTraceEntry object.). This may seem like overly clever solution, but I've had it many times that sysouts got discarded or lost somehow and an exception object along with the stack trace is always there in front of your eyes. Another way to capture-and-dump reproduction info is to use @Listeners annotation above; this can be used for much what LTC does today -- -D\u2026, -D\u2026, -D...\n- A custom runner can have custom implementation of the contractual \"events\", such as assumptions or ignore triggers. This takes away a lot of code related to trying to get around JUnit's API limitations (assume without message/cause, method filtering and dynamic ignores based on extra conditions like @Nightly, etc.).\n\nIn short: I'm really happy with a custom Runner.\n\nAs for the infrastructure for writing randomized test cases:\n- There is currently one \"master\" seed that the runner either generates randomly or accepts as a global constant. Everything else: method shuffling, initial random instance for each test case (method repetition)\u2026 really everything is based on sequential calls to this generator. This has advantages and disadvantages I guess (read about static initializers below), but it was my personal desire to implement it this way and based on my few days' worth of experience with this code, it works great.\n- I've written a base class RandomizedTest that extends Assert and has a number of utility methods for picking random numbers or objects from collections. There is no passing of explicit _Random_ instances around like it is done currently in LTC though. The base class accesses the context's Random (which it is assigned by the runner) and then uses this random consistently to generate pseudo-randomness in selection of attributes and iterations. Of course once you go multi-threaded this will all go to dust, but I imagine multi-threaded tests shouldn't use the base class's randomness (a test case based on race conditions won't be repeatable anyway). If anything, generate per-thread Randoms based on current seed and let each thread handle its own sequence of pseudo-random numbers from there. This is even possible at runtime with non-mock objects as I'm going to show in Barcelona, hopefully.\n\n\nNow\u2026 if you're still with me you're probably interested how this applies to Lucene. The wall I've hit is the sheer amount of code that any change to LTC affects. I realized it'd be large, but it's just gargantuan :) \n\nThe major issue is with static initializers and static public methods called from them that leave resources behind. I'm sorry, but nobody can convince me this isn't evil. I understand certain things are costly and require a one-time setup, but these should really be moved to @BeforeClass fixture hooks. If one really needs to do things once at JVM lifespan level a @BeforeClass with some logic to perform a single initialization can be a replacement for a static initializer (even if it's unclear to me when exactly such a fixture would be really needed). In short: the problem with static initializers is that they are executed outside the lifecycle control of the runner\u2026 I'd say most of the problems and current patchy solutions inside LTC (dealing with resource tracking for example) are somehow related to the fact that static initializers and static method calls are used throughout the codebase. \n\nI am currently wondering if it's feasible to provide a single patch that will make a drop-in replacement of LTC. It may be the case that adding another skeleton class based on the \"new\" infrastructure and rewriting tests one by one to use it may be a more sensitive/ sensible way to go. \n\nThe runner (alone) is currently at github if you care to take a look. I think Barcelona may be a good place to talk about this face to face and decide what to do with it. I'm myself leaning towards the: have parallel base classes and port existing tests in chunks.\n",
            "date": "2011-10-11T13:05:27.764+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nI am currently wondering if it's feasible to provide a single patch that will make a drop-in replacement of LTC. It may be the case that adding another skeleton class based on the \"new\" infrastructure and rewriting tests one by one to use it may be a more sensitive/ sensible way to go.\n{quote}\n\nCould we add this stuff, cut over our runner to it (our runner doesnt actually do that match?) and then migrate our base class functionality piece by piece to the runner code (nuking it from LuceneTestCase?)\n",
            "date": "2011-10-11T13:24:38.005+0000",
            "id": 10
        },
        {
            "author": "Dawid Weiss",
            "body": "Yeah, I was thinking about that too and I've actually started, replaced the runner successfully but then there is no simple \"piece by piece\" with all the static method calls tangled together... And RandomizedRunner requires a different seed format etc... I'll give it another shot though.",
            "date": "2011-10-11T13:59:54.078+0000",
            "id": 11
        },
        {
            "author": "Dawid Weiss",
            "body": "In response to my question whether the idea of randomized testing is new Yuriy Pasichnyk passed me the info about Haskell's QuickCheck project. Indeed, the idea is pretty much the same (with differences concerning implementation details, not the concept itself).\n\nhttp://en.wikipedia.org/wiki/QuickCheck\n\nThere is a Java port of this too, if you check out Wikipedia. The implementation follows a different direction compared to what I implemented, but there are also pieces that are nearly 1:1 identical copies. Good to know -- this means I wasn't completely wrong in my goals.",
            "date": "2011-10-21T19:45:56.113+0000",
            "id": 12
        },
        {
            "author": "Dawid Weiss",
            "body": "I consider this issue done. I've pulled all the super-cool features from Lucene/Solr and put them into a separate, stand-alone and reusable project called randomizedtesting. We have switched our infrastructure at Carrot2 to use it and I'm very happy with it.\n\nhttp://labs.carrotsearch.com/randomizedtesting.html\n\nI will file another issue concerned with progressively moving from LuceneTestRunner/Case and tests infrastructure to RandomizedRunner (and siblings).",
            "date": "2012-02-14T15:32:50.841+0000",
            "id": 13
        }
    ],
    "component": "general/test",
    "description": "{color:red}The work on this issue is temporarily at github{color} (lots of experiments and tweaking):\nhttps://github.com/carrotsearch/randomizedtesting\nOr directly: git clone git://github.com/carrotsearch/randomizedtesting.git\n{color}\n----\n\nRandomizedRunner is a JUnit runner, so it is capable of running @Test-annotated test cases. It\nrespects regular lifecycle hooks such as @Before, @After, @BeforeClass or @AfterClass, but it\nalso adds the following:\n\nRandomized, but repeatable execution and infrastructure for dealing with randomness:\n\n- uses pseudo-randomness (so that a given run can be repeated if given the same starting seed)\n  for many things called \"random\" below,\n- randomly shuffles test methods to ensure they don't depend on each other,\n- randomly shuffles hooks (within a given class) to ensure they don't depend on each other,\n- base class RandomizedTest provides a number of methods for generating random numbers, strings\n  and picking random objects from collections (again, this is fully repeatable given the\n  initial seed if there are no race conditions),\n- the runner provides infrastructure to augment stack traces with information about the initial\n  seeds used for running the test, so that it can be repeated (or it can be determined that\n  the test is not repeatable -- this indicates a problem with the test case itself).\n\nThread control:\n\n- any threads created as part of a test case are assigned the same initial random seed \n  (repeatability),\n- tracks and attempts to terminate any Threads that are created and not terminated inside \n  a test case (not cleaning up causes a test failure),\n- tracks and attempts to terminate test cases that run for too long (default timeout: 60 seconds,\n  adjustable using global property or annotations),\n\nImproved validation and lifecycle support:\n\n- RandomizedRunner uses relaxed contracts of hook methods' accessibility (hook methods _can_ be\n  private). This helps in avoiding problems with method shadowing (static hooks) or overrides\n  that require tedious super.() chaining). Private hooks are always executed and don't affect\n  subclasses in any way, period.\n- @Listeners annotation on a test class allows it to hook into the execution progress and listen\n  to events.\n- @Validators annotation allows a test class to provide custom validation strategies \n  (project-specific). For example a base class can request specific test case naming strategy\n  (or reject JUnit3-like methods, for instance).\n- RandomizedRunner does not \"chain\" or \"suppress\" exceptions happening during execution of \n  a test case (including hooks). All exceptions are reported as soon as they happened and multiple\n  failure reports can occur. Most environments we know of then display these failures sequentially\n  allowing a clearer understanding of what actually happened first.\n",
    "hasPatch": false,
    "hasScreenshot": true,
    "id": "LUCENE-3492",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Extract a generic framework for running randomized tests.",
    "systemSpecification": true,
    "version": ""
}