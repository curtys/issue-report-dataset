{
    "comments": [
        {
            "author": "Matthew Bogosian",
            "body": "Attaching the fix as a patch. All tests pass. Patch includes fix, test case and modifications to the CHANGES.txt file.",
            "date": "2006-11-17T18:57:58.000+0000",
            "id": 0
        },
        {
            "author": "Matthew Bogosian",
            "body": "In original description:\n\ns/except when using the IndexModifier class/when using the IndexModifier class/",
            "date": "2006-11-17T19:06:58.000+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Good catch!  And thanks for the patch.  Plus I like the perl-ese correction above.\n\nIt looks like with this patch you are swallowing an IOException if it happens in that try/catch block?  So I think you should add a throw(e) at the end of the catch block?  Also maybe move the try/catch outside the synchronized block?  I usually try to minimize the code inside synchronized blocks, and I don't think the releasing of the writeLock on IOException needs to be inside the synchronized block.",
            "date": "2006-11-17T20:15:32.000+0000",
            "id": 2
        },
        {
            "author": "Matthew Bogosian",
            "body": "Ugh! How embarrassing! If it makes you feel better, I re-raised the exception in my mind.... ;-)\n\nI added the the missing throw statement and moved the try/catch outside of the synchronized block (which is probably even better since it will also take care of the case where the call to makeLock raises an IOException).\n\nThanks for catching that (no pun intended)!",
            "date": "2006-11-17T21:50:28.000+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Don't worry about it :)  This is what open source is all about!\n\nOK this looks good to me.  I will commit.  Thanks Matthew, keep the patches coming!",
            "date": "2006-11-17T22:25:28.000+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Closing all issues that were resolved for 2.1.",
            "date": "2007-02-27T18:10:36.494+0000",
            "id": 5
        }
    ],
    "component": "core/index",
    "description": "In version 2.0.0, the private IndexWriter constructor does not properly remove its write lock in the event of an error. This can be seen when one attempts to open (not create) an index in a directory which exists, but in which there is no segments file. Here is the offending code:\n\n    247   private IndexWriter(Directory d, Analyzer a, final boolean create, boolean closeDir)\n    248     throws IOException {\n    249       this.closeDir = closeDir;\n    250       directory = d;\n    251       analyzer = a;\n    252 \n    253       Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    254       if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n    255         throw new IOException(\"Index locked for write: \" + writeLock);\n    256       this.writeLock = writeLock;                   // save it\n    257 \n    258       synchronized (directory) {        // in- & inter-process sync\n    259         new Lock.With(directory.makeLock(IndexWriter.COMMIT_LOCK_NAME), commitLockTimeout) {\n    260             public Object doBody() throws IOException {\n    261               if (create)\n    262                 segmentInfos.write(directory);\n    263               else\n    264                 segmentInfos.read(directory);\n    265               return null;\n    266             }\n    267           }.run();\n    268       }\n    269   }\n\nOn line 254, a write lock is obtained by the constructor. If an exception is raised inside the doBody() method (on line 260), then that exception is propagated, the constructor will fail, but the lock is not released until the object is garbage collected. This is typically an issue except when using the IndexModifier class.\n\nAs of the filing of this bug, this has not yet been fixed in the trunk (IndexWriter.java#472959):\n\n    251   private IndexWriter(Directory d, Analyzer a, final boolean create, boolean closeDir)\n    252     throws IOException {\n    253       this.closeDir = closeDir;\n    254       directory = d;\n    255       analyzer = a;\n    256 \n    257       Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    258       if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n    259         throw new IOException(\"Index locked for write: \" + writeLock);\n    260       this.writeLock = writeLock;                   // save it\n    261 \n    262       synchronized (directory) {        // in- & inter-process sync\n    263         new Lock.With(directory.makeLock(IndexWriter.COMMIT_LOCK_NAME), commitLockTimeout) {\n    264             public Object doBody() throws IOException {\n    265               if (create)\n    266                 segmentInfos.write(directory);\n    267               else\n    268                 segmentInfos.read(directory);\n    269               return null;\n    270             }\n    271           }.run();\n    272       }\n    273   }",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-715",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "IndexWriter does not release its write lock when trying to open an index which does not yet exist",
    "systemSpecification": true,
    "version": "2.0.0"
}