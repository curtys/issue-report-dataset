{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "{noformat}\nTestFSTs.testRealTerms -seed 4857a4f3c937e12e:15e316518d8ee33:-4b9de2133ce6125c -mult 3 \n{noformat}\n\nThat'll hit OOME.  The problem is that the test gets RandomCodecProvider which then assigns MemoryCodec to a bad field.\n\nI think we need a clean way to annotate that a given test cannot handle Memory/SimpleText codecs and then mark the above tests as such?",
            "date": "2011-09-27T14:37:18.631+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "{noformat}\nTestFSTs.testRealTerms -seed 4857a4f3c937e12e:15e316518d8ee33:-4b9de2133ce6125c -mult 3 \n{noformat}\n\nThat'll hit OOME.  The problem is that the test gets RandomCodecProvider which then assigns MemoryCodec to a bad field.\n\nI think we need a clean way to annotate that a given test cannot handle Memory/SimpleText codecs and then mark the above tests as such?",
            "date": "2011-09-27T14:37:19.175+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Here is a comment that I will only add once.",
            "date": "2011-09-27T14:39:51.328+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "LOL. I just wondered about it, because this was the second time today a comment was posted twice. I was thinking about a problem with JIRA.",
            "date": "2011-09-27T14:42:37.350+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Here was my first stab at just fixing these tests to avoid Memory/SimpleTextCodec themselves.\n\nBut it's not committable!  Because it alters the RCP instance that other tests may share (ie each test would have to put back the 2 codecs I think).\n\nWould really be nice to have a test annotation and then LTC just magically avoids the codecs.",
            "date": "2011-09-30T18:24:17.846+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Should be easy. Unfortunatley, I am currently Lucene-disabled :(",
            "date": "2011-09-30T18:39:19.563+0000",
            "id": 5
        },
        {
            "author": "Dawid Weiss",
            "body": "I'm fairly busy too, but I need to put together a presentation about randomized testing for Barcelona... this would be a good opportunity for a clean-up refactoring integrating several ideas that have been discussed so far on this list (and others that I've been carrying in my head for some time).\n\nI'll share once I have something concrete.",
            "date": "2011-09-30T18:43:03.833+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Here a patch that implements this annotation (@UseNoMemoryExpensiveCodec). I am not so happy with it, as it also moves this codec selection shit into the LuceneTestRunner). Maybe somebody has a better idea how to pass the flag down to LTC. Unfortunately LTC creates the RandomCodecProvider per class not per test method, so removing and readding the codecs from it is the only solution to handle this per test method.\n\nMike, can you test if this fixes the problems. I had no time to check this, I only implemented it.",
            "date": "2011-09-30T21:43:45.337+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "Moved the codec handling back to LTC and made the test runner more abstract. There are still some issues with tests that create the index in BeforeClass but cannot read it later when @UseNoMemoryExpensiveCodec is selected for one test method. Also similar issues may occur if the test explicitely selects such a codec (Mike found some failing tests, still investigating).",
            "date": "2011-09-30T22:19:31.281+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "We could generalize the whole thing a little bit more:\n- Add 2 methods to LTC: beforeTestMethod(FrameworkMethod m) and afterTestMethod(FrameWorkMethod m)\n- Do the wohle annotation checking inside there. this would it make easier to extend in the future",
            "date": "2011-09-30T22:25:43.052+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Patch with full flexibility",
            "date": "2011-09-30T22:37:01.687+0000",
            "id": 10
        },
        {
            "author": "Hoss Man",
            "body": "bq. There are still some issues with tests that create the index in BeforeClass but cannot read it later when @UseNoMemoryExpensiveCodec is selected for one test method. Also similar issues may occur if the test explicitely selects such a codec (Mike found some failing tests, still investigating).\n\n...i haven't really been following this issue (or looked at the patches) but wouldn't the most straight forward way to deal with this sort of thing be to support specifying the annotation that indicate certain codecs are required/prohibited on either the individual test methods or on the entire test class -- so if a class wants to build the index in an @BeforeClass method, it has to put the @UseNoMemoryExpensiveCodec or @MustUseCodec(\"PulsingCodec\") on the entire class and not the individual methods?\n\n(where by \"most straight forward\" i mean for the test writer, not neccessarily for how it's implemented in LTC)\n\nIn the case where classes are building the indexes in @Before or @Test methods, the codec anotations could be placed on both the class and the test methods - with the method annotations overwritting the class annotations...\n\n{code}\n/** Most of these tests create indexes too bug for in memory codecs */\n@UseNoMemoryExpensiveCodec public class CoolFeatureTest {\n  @Before buildIndex() { ... }\n  @Test testFooIntensively() { ... }\n  @Test testBarIntensively { ... }\n  /* this test should work with any codec */\n  @Test @UseRandomCodec testSimpleStuff() { ... }\n  /* this tests specific to pulsing codec, so it must also use that one */\n  @Test @UseCodec(\"PulsingCodec\") testPulsingCodec() { ... }\n}\n{code}\n\n",
            "date": "2011-09-30T23:37:11.019+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "I think its dangerous to do this per-test method (problems with random seed reproducibility and such).\n\nCan we just do this per-class? why is it necessary for the annotation to work at methods?",
            "date": "2011-10-01T00:02:52.596+0000",
            "id": 12
        },
        {
            "author": "Robert Muir",
            "body": "Hoss asked me some questions about my comment, so some more explanations of what I meant:\n\nFirst I think it would be great to add this annotation: its bogus how we assume() so much (and annoying from your ide when you randomly get a green light sometimes and think you fixed your problem but you didnt).\n\nBut the configuration of Codec (and i think other things, Locale, Similarity, ...) is currently across the whole class for consistency, which means its pulling from a per-class random seed. Because of this I think it would be \"tricky\" for the annotation to properly work at the test method level if we want the random seeds to always reproduce failures... I'm not saying its impossible...\n\nSo my idea of the simplest solution would be for the annotation to only work at the whole class level... I think for practical purposes this is all we need to fix these problems and remove these assume()s.",
            "date": "2011-10-01T00:48:24.113+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "Robert: Its indeed strange, but I solved the problem reproducible. The CodecProvider is always the same, so it uses only one time the random seeds per class. Inside the annotated test methods, LTC simply tells RandomCodecProvider, that it should temporarily not return several codecs. This consumes no randomness and is reproducible, as it is done before/after each test. \n\nThis was implemented by a callback from the testrunner to a static LTC method (beforeTestMethod/afterTestMethod), that gets the FrameworkMethod instance of the running test and will change the codec provider accordingly, if it detects the annotation on the FrameworkMethod. On shutdown it reverses the change (the callback is called from within a finalization block, so ensured to do the cleanup).\n\nThis approach is somehow a duplicate of the standard @Before and @After, but those aleady available ones miss the FrameworkMethod parameter passed to the method, so it's hard to detect the currently running test.",
            "date": "2011-10-01T10:22:08.019+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "Some further issue hunting showed the followinbg problems with the current patch, that make it almost impossible to implement correctly without redesigning RandomCodecProvider in LTC:\n- Mike have seen problems with running all tests and suddenly got errors about missing \"SimpleText\" or \"Memory\" codec. The reason is simple: once a field uses a codec this is preserved to infinity in the previousMappings map. This problem could be solved by clearing the map before each test class/test method. The field->codec mappings are not random, they are based on a a final per codec-provider instance seed and the field's hashcode and modulo the size of codecs.\n- My patch violates the reproducibility, as unregistering and readding a codec from the RandomCodecProvider changes the order in the list and modifies the selection of codecs based on field name. Theoretically, RandomCodecProvider should not allow any modifications to its registered codecs after creating (and the swapCodecs operations in LTC).\n\nA possible solution might be to have two RCPs created by LTC and only exchanging them based on annotation. Problem is that both still have separate mappings from field name to codec -> does not work if you reuse indexes across test methods. Another possible solution might be to enable a lowMemory mode for RCP (via a setter, I already implemented that somehow), so it just never returns memory/simpletext (maybe replace by standard codec). Problem here again, the mapping from field name to codec is preserved for all codecs, but if a mapping to a simpletext/memory codec already exists for field name, it cannot be used (so the fieldname is \"dead\" for this test. This is also a no-go.\n\nI think we should move the annotation, as Robert suggests, up to the class, so all methods in a class will get the reduced set of codecs. Before each class (beforeClass) we cleanup the codec provider and recreate a new one according to the annotation. The easy way is then (as we did for some other tests, too), to move the tests that should not run on simpletext/memory to separate classes - this is the easiest way to go.",
            "date": "2011-10-01T11:27:30.683+0000",
            "id": 15
        },
        {
            "author": "Michael McCandless",
            "body": "+1 to making the annotation per class -- it's too hairy to do it per method.\n\nWe just have to remember to move \"hog tests\" to their own classes so we don't lose coverage of any non-hog test methods sharing the same class.\n",
            "date": "2011-10-01T15:36:46.893+0000",
            "id": 16
        },
        {
            "author": "Uwe Schindler",
            "body": "Here patch for the per-class annotation (it also got the right annotation target).\n\nThe test methods are not yet moved to separate classes, I just moved the annotation up.\n\nMike can you check that it is better now?",
            "date": "2011-10-04T19:45:42.486+0000",
            "id": 17
        },
        {
            "author": "Uwe Schindler",
            "body": "Minor cleanups.",
            "date": "2011-10-04T20:12:04.860+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Uwe!  I'll beast it.",
            "date": "2011-10-04T20:17:34.413+0000",
            "id": 19
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good!  The seed no longer fails, and beast beasted lucene core+contrib tests 95 times w/ no failure!  Thanks Uwe :)",
            "date": "2011-10-04T21:24:08.065+0000",
            "id": 20
        },
        {
            "author": "Uwe Schindler",
            "body": "Thanks, Mike!\n\nI will work on extracting the methods annotated before from all test classes that have assumes. We can also commit this for now before refactoring?\n\nWhat is with the TestCompiledAutomaton test? It has commented-out code, looks like a temporary fix.",
            "date": "2011-10-04T21:32:50.988+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "Yes we can commit now and refactor the tests after....\n\nOh you can remove that commented out code in TestCompiledAutomaton; the new fix is better (big reduction on RAM/CPU so hopefully no more OOME from it).\n\nThanks.",
            "date": "2011-10-04T21:54:07.992+0000",
            "id": 22
        },
        {
            "author": "Uwe Schindler",
            "body": "Updated patch, I will commit that tomorrow.\n\nSome small things that might be changed: We could remove the assumes if we add another check in the TestCaseRunner: If the annotation is present and the current codec uses SimpleText or Memory (in the case the use has explicitely given it using -Dtests.codec...), it should remove all test methods from this test (like @Nightly on the class). I think that would be the cleanest solution to prevent bad behaviour with wrong codecs?",
            "date": "2011-10-04T22:03:58.451+0000",
            "id": 23
        },
        {
            "author": "Robert Muir",
            "body": "+1",
            "date": "2011-10-05T01:33:11.825+0000",
            "id": 24
        },
        {
            "author": "Uwe Schindler",
            "body": "New patch that adds a check to setUp() and disables the test method if the current default codec is memory expensive (using assume(), I had to fight against JUnit... krrrrrrrr).",
            "date": "2011-10-05T09:15:59.171+0000",
            "id": 25
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 1179210\n\nI will open a new issue for refactoring tests.",
            "date": "2011-10-05T13:17:03.309+0000",
            "id": 26
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Uwe!",
            "date": "2011-10-05T14:32:52.862+0000",
            "id": 27
        }
    ],
    "component": "",
    "description": "The nightly Job Lucene-trunk quite often fails with OOM (in several methods, not always in the same test):\n\nExample from last night (this time a huge Automaton):\n\n{noformat}\n[junit] java.lang.OutOfMemoryError: Java heap space\n[junit] Dumping heap to /home/hudson/hudson-slave/workspace/Lucene-trunk/heapdumps/java_pid38855.hprof ...\n[junit] Heap dump file created [86965954 bytes in 1.186 secs]\n[junit] Testsuite: org.apache.lucene.index.TestTermsEnum\n[junit] Testcase: testIntersectRandom(org.apache.lucene.index.TestTermsEnum):\tCaused an ERROR\n[junit] Java heap space\n[junit] java.lang.OutOfMemoryError: Java heap space\n[junit] \tat org.apache.lucene.util.automaton.RunAutomaton.<init>(RunAutomaton.java:128)\n[junit] \tat org.apache.lucene.util.automaton.ByteRunAutomaton.<init>(ByteRunAutomaton.java:28)\n[junit] \tat org.apache.lucene.util.automaton.CompiledAutomaton.<init>(CompiledAutomaton.java:134)\n[junit] \tat org.apache.lucene.index.TestTermsEnum.testIntersectRandom(TestTermsEnum.java:266)\n[junit] \tat org.apache.lucene.util.LuceneTestCase$2$1.evaluate(LuceneTestCase.java:611)\n[junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:148)\n[junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:50)\n[junit] \n[junit] \n[junit] Tests run: 6, Failures: 0, Errors: 1, Time elapsed: 11.699 sec\n{noformat}\n\nOther traces:\n\n{noformat}\n[junit] Testsuite: org.apache.lucene.util.fst.TestFSTs\n[junit] Testcase: testRealTerms(org.apache.lucene.util.fst.TestFSTs):\tCaused an ERROR\n[junit] Java heap space\n[junit] java.lang.OutOfMemoryError: Java heap space\n[junit] \tat org.apache.lucene.util.ArrayUtil.grow(ArrayUtil.java:338)\n[junit] \tat org.apache.lucene.util.fst.FST$BytesWriter.writeBytes(FST.java:927)\n[junit] \tat org.apache.lucene.util.fst.ByteSequenceOutputs.write(ByteSequenceOutputs.java:113)\n[junit] \tat org.apache.lucene.util.fst.ByteSequenceOutputs.write(ByteSequenceOutputs.java:32)\n[junit] \tat org.apache.lucene.util.fst.FST.addNode(FST.java:451)\n[junit] \tat org.apache.lucene.util.fst.NodeHash.add(NodeHash.java:122)\n[junit] \tat org.apache.lucene.util.fst.Builder.compileNode(Builder.java:180)\n[junit] \tat org.apache.lucene.util.fst.Builder.finish(Builder.java:495)\n[junit] \tat org.apache.lucene.index.codecs.memory.MemoryCodec$TermsWriter.finish(MemoryCodec.java:232)\n[junit] \tat org.apache.lucene.index.FreqProxTermsWriterPerField.flush(FreqProxTermsWriterPerField.java:414)\n[junit] \tat org.apache.lucene.index.FreqProxTermsWriter.flush(FreqProxTermsWriter.java:92)\n[junit] \tat org.apache.lucene.index.TermsHash.flush(TermsHash.java:117)\n[junit] \tat org.apache.lucene.index.DocInverter.flush(DocInverter.java:80)\n[junit] \tat org.apache.lucene.index.DocFieldProcessor.flush(DocFieldProcessor.java:78)\n[junit] \tat org.apache.lucene.index.DocumentsWriterPerThread.flush(DocumentsWriterPerThread.java:472)\n[junit] \tat org.apache.lucene.index.DocumentsWriter.doFlush(DocumentsWriter.java:420)\n[junit] \tat org.apache.lucene.index.DocumentsWriter.flushAllThreads(DocumentsWriter.java:568)\n[junit] \tat org.apache.lucene.index.IndexWriter.getReader(IndexWriter.java:366)\n[junit] \tat org.apache.lucene.index.IndexReader.open(IndexReader.java:317)\n[junit] \tat org.apache.lucene.util.fst.TestFSTs.testRealTerms(TestFSTs.java:1034)\n[junit] \tat org.apache.lucene.util.LuceneTestCase$2$1.evaluate(LuceneTestCase.java:611)\n{noformat}\n\nor:\n\n{noformat}\n[junit] Testsuite: org.apache.lucene.util.automaton.TestCompiledAutomaton\n[junit] Testcase: testRandom(org.apache.lucene.util.automaton.TestCompiledAutomaton):\tCaused an ERROR\n[junit] Java heap space\n[junit] java.lang.OutOfMemoryError: Java heap space\n[junit] \tat org.apache.lucene.util.automaton.RunAutomaton.<init>(RunAutomaton.java:128)\n[junit] \tat org.apache.lucene.util.automaton.ByteRunAutomaton.<init>(ByteRunAutomaton.java:28)\n[junit] \tat org.apache.lucene.util.automaton.CompiledAutomaton.<init>(CompiledAutomaton.java:134)\n[junit] \tat org.apache.lucene.util.automaton.TestCompiledAutomaton.build(TestCompiledAutomaton.java:39)\n[junit] \tat org.apache.lucene.util.automaton.TestCompiledAutomaton.testTerms(TestCompiledAutomaton.java:55)\n[junit] \tat org.apache.lucene.util.automaton.TestCompiledAutomaton.testRandom(TestCompiledAutomaton.java:101)\n[junit] \tat org.apache.lucene.util.LuceneTestCase$2$1.evaluate(LuceneTestCase.java:611)\n[junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:148)\n[junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:50)\n{noformat}\n\nAlmost every nightly test fails, history: [https://builds.apache.org/job/Lucene-trunk]\n\nWe should maybe raise the max heap space or reduce doc counts/...",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3463",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Jenkins trunk tests (nightly only) fail quite often with OOM in Automaton/FST tests",
    "systemSpecification": true,
    "version": "4.0-ALPHA"
}