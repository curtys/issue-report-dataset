{
    "comments": [
        {
            "author": "Javier Godoy",
            "body": "Patch",
            "date": "2010-01-25T09:50:59.662+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Looks good! Will commit this in a day or two.",
            "date": "2010-01-25T09:58:34.228+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Updates patch, please create the svn diff against the trunk (root of checkout) directory next time!\n\nAlso added missing import statement and changes.txt entry.",
            "date": "2010-01-25T10:13:29.916+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 903368\n\nThanks Javier!",
            "date": "2010-01-26T19:01:18.696+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "reopening for possible 2.9.4/3.0.3 backport.\n",
            "date": "2010-10-29T12:58:43.438+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed 3.0 branch revision: 1028915\nCommitted 2.9 branch revision: 1028918",
            "date": "2010-10-29T21:45:29.541+0000",
            "id": 5
        },
        {
            "author": "Nick Pellow",
            "body": "I just upgraded to 3.0.3 and we started getting NullPointerExceptions coming from PerFieldAnalyzerWrapper.\nWe have a  PerFieldAnalyzerWrapper that has a null defaultAnalyzer:\n{code}\nprivate final PerFieldAnalyzerWrapper analyzer = new PerFieldAnalyzerWrapper(null);\n{code}\n\nWe add analyzers to all fields that are analyzed. ie: field.isAnalyzed() == true.\ngetOffsetGap on  PerFieldAnalyzerWrapper is being called, even for these non-analyzed fields. Is this expected behaviour?\n\nLines 200-203 of DocInverterPerField are: \n{code}\n        if (anyToken)\n          fieldState.offset += docState.analyzer.getOffsetGap(field);\n        fieldState.boost *= field.getBoost();\n      }\n\n{code}\nShould this be checking that a field is indeed analyzed before calling getOffsetGap ?\n",
            "date": "2010-12-06T01:01:04.159+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi Nick,\nthanks for reporting this. Your problem only occurs since the missing method was added (before PFAW only returned some default, now it throws NPE) in that case.\n\nIn general, Lucene does not support *null* analyzers anywhere (not as ctor argument in IW/IWC) or e.g. here. You should always add a \"simple\" analyzer to IndexWriter (WhitespaceAnalyzer, SimpleAnalyzer, KeywordAnalyzer) or other methods taking Analyzer.\n\nTo really fix this, we have to review all places that don't need to call Analyzers. There are e.g. other places, like when you directly pass the TokenStream to the Field with \"new Field(name, TokenStream), it also calls the analyzer, so you have to implement it.",
            "date": "2010-12-06T07:34:21.911+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "To come back to the original issue:\n\nbq. Should this be checking that a field is indeed analyzed before calling getOffsetGap ?\n\nIn my opinion this should be done (and so this issue would disappear). Can you open another issue requesting this check and link it to this one?\n\nOne problem coming from not checking for \"analyzed\" is this:\nYou add a field indexed and it gets analyzed by PFAW - After that you add the same field name stored-only (which is perfectly legal and often used, e.g. when the stored value is binary or in some other format and does not correspond to the indexed text), the positionIncrement is increased. After that you again add another instance of the same field as indexed-only, which also increases posIncr. So you have 2 times the gap between both indexed sub-fields. This is definitely wrong.",
            "date": "2010-12-06T08:27:36.149+0000",
            "id": 8
        },
        {
            "author": "Nick Pellow",
            "body": "Thanks for the clarification, Uwe. I wasn't sure if null Analyzers were meant to be accepted or not. I was upgrading some existing code from 3.0.2 to 3.0.3 and stumbled across that, so its good to know.\n\nI've created LUCENE-2801 to track the real reason the check should be done too!",
            "date": "2010-12-06T10:36:03.306+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Thanks, Nick!",
            "date": "2010-12-06T10:49:14.713+0000",
            "id": 10
        }
    ],
    "component": "modules/analysis",
    "description": "PerFieldAnalyzerWrapper does not delegates calls to getOffsetGap(Fieldable), instead it returns the default values from the implementation of Analyzer. (Similar to LUCENE-659 \"PerFieldAnalyzerWrapper fails to implement getPositionIncrementGap\")",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2235",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "implement PerFieldAnalyzerWrapper.getOffsetGap",
    "systemSpecification": true,
    "version": "3.0"
}