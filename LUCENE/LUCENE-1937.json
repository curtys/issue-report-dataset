{
    "comments": [
        {
            "author": "Adriano Crestani",
            "body": "The patch adds five methods:\n\nQueryNodeProcessor getProcessorAt(int index)\nremoveProcessorAt(int index)\naddProcessor(int index, QueryNodeProcessor processor)\nsetProcessor(int index, QueryNodeProcessor processor)\nint getSize()\n\nI realized while coding that manipulation methods based on processor instead of index position can be tricky, because the pipeline could have the same instances in multiple positions, so they are based on index position.",
            "date": "2009-10-01T17:54:05.385+0000",
            "id": 0
        },
        {
            "author": "Luis Alves",
            "body": "Hi Adriano,\n\nWouldn't it be better for the pipeline to implement the \"List\" interface.\nWhat do you think?",
            "date": "2009-10-07T18:30:17.184+0000",
            "id": 1
        },
        {
            "author": "Adriano Crestani",
            "body": "Hi Luis,\n\n{quote}\nWouldn't it be better for the pipeline to implement the \"List\" interface.\nWhat do you think?\n{quote}\n\nYes, it's one of the valid approaches, I just didn't want to tie it initially to an interface. I will code that later and provide a new patch.",
            "date": "2009-10-08T02:10:53.015+0000",
            "id": 2
        },
        {
            "author": "Adriano Crestani",
            "body": "New patch, now QueryNodeProcessorPipeline implements List interface",
            "date": "2009-10-13T21:57:37.952+0000",
            "id": 3
        },
        {
            "author": "Adriano Crestani",
            "body": "This patch could also be applied to branch_3x",
            "date": "2010-09-01T01:59:23.238+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "no functional changes to the patch, i just updated it to apply cleanly to trunk.\n\nI'd like to commit this improvement, so we can then replace the PrecedenceQueryParser with LUCENE-1938\n\nThis is a much simpler way to implement the functionality and would remove the additional duplicate javacc\ngrammar, and make maintenance easier.",
            "date": "2010-10-19T13:19:30.126+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "Committed revisions 1024402, 1024405 (3x).\n\nThanks Adriano! I'll look at LUCENE-1938 now",
            "date": "2010-10-19T20:47:35.405+0000",
            "id": 6
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:49:52.850+0000",
            "id": 7
        }
    ],
    "component": "modules/other",
    "description": "QueryNodeProcessorPipeline allows the user to define a list of processors to process a query tree. However, it's not very flexible when the user wants to extend/modify an already created pipeline, because it only provides an add method, which only allows the user to append a new processor to the pipeline.\n\nSo, I propose to add new methods to manipulate the processor in a pipeline. I think the methods should not consider an index position when modifying the pipeline, hence the index position in a pipeline does not mean anything, a processor has a meaning when it's after or before another processor. Therefore, I suggest the methods should always consider another processor when inserting/modifying the pipeline. For example, insertAfter(processor, newProcessor), which will insert the \"newProcessor\" after the \"processor\".",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1937",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add more methods to manipulate QueryNodeProcessorPipeline elements",
    "systemSpecification": true,
    "version": "2.9"
}