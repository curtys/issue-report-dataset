{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "Couldn't you just use a TermQuery?\nOr a BooleanQuery with a MatchAllDocsQuery and an optional TermQuery?",
            "date": "2009-02-19T20:13:02.896+0000",
            "id": 0
        },
        {
            "author": "Karl Wettin",
            "body": "bq. Couldn't you just use a TermQuery? Or a BooleanQuery with a MatchAllDocsQuery and an optional TermQuery?\n\nWouldn't that require a TermQuery that match all documents? I.e. adding a term to a field in all documents?\n\nThe following stuff doesn't really fit in this issue, but still. It's rather related to column stride payloads LUCENE-1231 . I've been considering adding a new \"norms\" field at document level for a couple of years now. 8 more bits at document level would allow for moving general document boosting to move it out the norms-boost-per-field-blob and increase the length normalization and per field boost resolution quite a bit at a low cost. \n\n(I hope that is not yet another can of worms I get to open.)\n",
            "date": "2009-02-19T20:28:09.294+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "\nIt seems like this is quite similar to function queries, which also\nmatch all docs but then let you to set your own score for each doc (eg\nbased on values from FieldCache).\n\nOnce we create column-stride fields, and merge norms into it, then\npresumably MatchAllDocsQuery & function queries would simply be the\nsame thing.\n\nbq. I've been considering adding a new \"norms\" field at document level for a couple of years now. 8 more bits at document level would allow for moving general document boosting to move it out the norms-boost-per-field-blob and increase the length normalization and per field boost resolution quite a bit at a low cost.\n\nThis seems interesting -- it would double the precision for boosting,\nbut would require the equivalent of one more field's norms enabled of\nRAM storage (ie a byte[] of length maxDoc()).  Also, it would slow\ndown scoring to have to lookup & multiply in doc's contributation, and\nthe field's.  I don't have a good sense of how often the added\nprecision is helpful though.  Karl have you tested that?  EG using\nfunction queries you could easily emulate \"per-document norms\".\n",
            "date": "2009-02-21T15:47:11.532+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Karl, is there a reason why a function query can't be used in your situation?  It seems like it should work?",
            "date": "2009-03-19T09:43:07.257+0000",
            "id": 3
        },
        {
            "author": "Karl Wettin",
            "body": "bq. Karl, is there a reason why a function query can't be used in your situation? It seems like it should work?\n\nI'm sure it would. : ) \n\nI do however not understand why you think it is a more correct/nice/better/what not solution than to use this patch. This is how I reason: if the feature of norms scoring is available in all other low level queries, than it also makes sense to have it in the low level MatchAllDocumentsQuery",
            "date": "2009-03-19T10:51:48.207+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "bq. This is how I reason: if the feature of norms scoring is available in all other low level queries, than it also makes sense to have it in the low level MatchAllDocumentsQuery\n\nOK I agree.  Since the index would already have norms for the field,\nit makes sense to provide a way to tap solely those norms as the basis\nfor scoring.\n",
            "date": "2009-03-19T11:50:30.310+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Karl!",
            "date": "2009-03-19T14:41:16.888+0000",
            "id": 6
        }
    ],
    "component": "core/query/scoring",
    "description": "This patch allows for optionally setting a field to use for norms factoring when scoring a MatchingAllDocumentsQuery.\n\nFrom the test case:\n{code:java}\n.\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    iw.setMaxBufferedDocs(2);  // force multi-segment\n    addDoc(\"one\", iw, 1f);\n    addDoc(\"two\", iw, 20f);\n    addDoc(\"three four\", iw, 300f);\n    iw.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    IndexSearcher is = new IndexSearcher(ir);\n    ScoreDoc[] hits;\n\n    // assert with norms scoring turned off\n\n    hits = is.search(new MatchAllDocsQuery(), null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(\"one\", ir.document(hits[0].doc).get(\"key\"));\n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"three four\", ir.document(hits[2].doc).get(\"key\"));\n\n    // assert with norms scoring turned on\n\n    MatchAllDocsQuery normsQuery = new MatchAllDocsQuery(\"key\");\n    assertEquals(3, hits.length);\n//    is.explain(normsQuery, hits[0].doc);\n    hits = is.search(normsQuery, null, 1000).scoreDocs;\n\n    assertEquals(\"three four\", ir.document(hits[0].doc).get(\"key\"));    \n    assertEquals(\"two\", ir.document(hits[1].doc).get(\"key\"));\n    assertEquals(\"one\", ir.document(hits[2].doc).get(\"key\"));\n{code}",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-1543",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Field specified norms in MatchAllDocumentsScorer ",
    "systemSpecification": true,
    "version": "2.4"
}