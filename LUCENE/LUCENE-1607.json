{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "What was the field count? Is it still a considerable speedup with hundreds of fields without slowing anything else down ?(I would assume so, but would be nice to know considering a new hashmap is made per add - it is a one time hit though and the number of fields is not likely to exceed hundreds at the extreme)?\n\nAlso would be great to get the speedup numbers for Java 4 and 5.\n\nI'll relate this to the 3 or 4 other field intern issues out there in a bit.",
            "date": "2009-04-19T16:52:02.534+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "Here's a completely lockless and memory barrier free intern() cache.\nThis default would be more back compatible since programs may rely on String instances being interned via String.intern().\n\nIt does not yet include corresponding Lucene code changes to use the StringInterner.\n\nThoughts?",
            "date": "2009-04-19T18:17:52.550+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "Earwin, I took a quick look at your implementation just now, but it doesn't look thread-safe.",
            "date": "2009-04-19T18:22:54.653+0000",
            "id": 2
        },
        {
            "author": "Mark Miller",
            "body": "bq. Earwin, I took a quick look at your implementation just now, but it doesn't look thread-safe. \n\nThat was my first impression too, but I couldnt pin down the issue. The access will either be against the old pool, or it will be against the new pool, and the instance switch should be atomic? I figured it was a clever trick of some kind (though I did wonder about the cost of making the new hashmap every add). The HashMaps are read only right (once they can be accessed by multiple threads)? And they are popped in with an atomic variable assignment?\n",
            "date": "2009-04-19T18:55:24.270+0000",
            "id": 3
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. This default would be more back compatible since programs may rely on String instances being interned via String.intern(). \nMy version is also String.intern()-compatible\n\nbq. Earwin, I took a quick look at your implementation just now, but it doesn't look thread-safe.\nunlock for one thread happens-before lock on the same monitor for the other thread, inside each thread each action happens-before the next one\nSince I get pool reference for the second time after the lock, and write pool reference before unlocking, everything's fine. As for the other threads, if they find what they need in the pool, it doesn't matter if they're seeing a stale pool, or not. If they don't find what they need, they hit the lock, re-retrieve pool reference, getting the latest one and either find what they need there, or write.\nCorrect me if I'm wrong?\n\nbq. though I did wonder about the cost of making the new hashmap every add\nIt's COSTLY :) But you're going to pay all of it at startup.\n\nI think we can introduce the class (without any interfaces, why should we need one here?), and then try to make it faster by switching storage. I tried GNU Trove THashMap, but on Java 6 it was slower than stock HashMap.",
            "date": "2009-04-19T19:11:32.131+0000",
            "id": 4
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. What was the field count? Is it still a considerable speedup with hundreds of fields without slowing anything else down ?\nThe field count was 1 :) I rewrote the benchmark, with extra code Java6 speedup on single already interned field became 12.5x.\nResults for three java varieties, and different sets of keys follow:\n\nJava 6 (64, server):\n\n  1 key\ninterned 12.47x\nuninterned 3.76x\n\n  10 keys\ninterned 8.03x\nuninterned 3.08x\n\n  100 keys\ninterned 6.58x\nuninterned 2.55x\n\n  1000 keys\ninterned 5.39x\nuninterned 2.69x\n\nJava 5 (64, server):\n\n  1 key\ninterned 9.84x\nuninterned 5.03x\n\n  10 keys\ninterned 7.00x\nuninterned 4.61x\n\n  100 keys\ninterned 6.61x\nuninterned 2.28x\n\n  1000 keys\ninterned 4.73x\nuninterned 2.73x\n\nJava 4 (32, client):\n\n  1 key\ninterned 4.90x\nuninterned 2.88x\n\n  10 keys\ninterned 4.08x\nuninterned 2.67x\n\n  100 keys\ninterned 3.88x\nuninterned 2.52x\n\n  1000 keys\ninterned 3.44x\nuninterned 2.31x\n",
            "date": "2009-04-19T19:39:39.516+0000",
            "id": 5
        },
        {
            "author": "Yonik Seeley",
            "body": "The thread safety problem has to do with safe object publication (making an object visible to a different thread).  Mutable objects generally can't be safely published w/o synchronization.... it has to do with CPU caches in multi-CPU systems.\n\nIIRC, current x86 architectures will see fewer problems since read barriers are no-ops.. caches are guaranteed to be coherent.  But even on x86, you aren't guaranteed that instructions and writes won't be reordered...  so the assignment to pool could be visible *before* all the memory changes that newPool.put() could cause.",
            "date": "2009-04-20T00:33:04.769+0000",
            "id": 6
        },
        {
            "author": "Derek DeMarco",
            "body": "Good point Yonik.  Making pool volatile should take care of it, but only on JVMs 1.5+, as before that volatile didn't prevent reordering of non-volatile reads/writes around it.",
            "date": "2009-04-20T01:36:02.666+0000",
            "id": 7
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Okay, you're probably right. It's not that hashmap can be corrupted on subsequent write, it's that reader threads can possibly see not-yet-built hashmap.\nAnd volatile works, while simple sync doesn't, because volatile also orders reads. \nHm. Hm. Hm.\nThan, as you suggested, all we need is our own hash implementation that remains usable even being partially updated. I skipped through your patch and something looks suspicious to me. Like lack of collision resolve and that line:\nint slot = h & (cache.length-1);\nIt'll break on non-power-of-two sizes.",
            "date": "2009-04-20T08:28:48.487+0000",
            "id": 8
        },
        {
            "author": "Mark Miller",
            "body": "bq. The thread safety problem has to do with safe object publication\n\nOh, great, you mean basic concurrency competency :( Well thats an embarrassing erosion of knowledge. Back to the books. Thread a has no happens before relationship with thread b unless they share the lock. I trained myself to just synchronize or use volatile long ago (and then let the knowledge begin seeping I guess), but even still, every time I see one of these double lock check type tricks I go, eh, this one must work or something.",
            "date": "2009-04-20T12:19:18.757+0000",
            "id": 9
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. lack of collision resolve\n\nMy version was the most basic... a simple cache that is not guaranteed to always hit.  I also wanted to keep the overhead very low in case of misses (hence no re-probing).  In the best case, I don't think one can get much faster... and in the worst case it won't be much slower than simple String.intern().  There could be other implementations that do resizing of course.\n\nbq. It'll break on non-power-of-two sizes. \n\nThe size is guaranteed to be a power of two by the constructor.",
            "date": "2009-04-20T15:49:55.728+0000",
            "id": 10
        },
        {
            "author": "Yonik Seeley",
            "body": "Here's another version that uses closed hashing and table resizes to cache all interned strings requested.  It remains lock free and memory barrier free on the read side.",
            "date": "2009-04-20T20:30:41.159+0000",
            "id": 11
        },
        {
            "author": "Yonik Seeley",
            "body": "corrected load factor check (the previous code actually calculated 80%, not 75%).",
            "date": "2009-04-20T20:36:29.495+0000",
            "id": 12
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Okay, I thought more about that. Yonik is amazing.\n\nThe fastest hash we can get, should have no collisions. This is achievable by resizing on each new collision. Then we should introduce an upper bound for this process, for it not to blow up. Finally, we can use our upper bound for hash size from the start.\n\nI benchmarked a bit, it works better than HashTable.\nSomewhat better for already interned strings, much better for noninterned strings.\n\"s1==s2 || s1.compareTo(s2) == 0\" combo amazingly works faster than s1.equals(s2).\nAdditional hashcode check makes sparse hash access a bit slower and doesn't really help with crowded hash.\nHaving a crowded hash degrades performance a lot. \n\nI updated my patch with Yonik's algorithm. Kept everything in statics (faster), allowed to change cache size through system property for adventurous types, default is 16k (works well for 100 values)",
            "date": "2009-04-20T20:40:54.473+0000",
            "id": 13
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Hehe, ten minute difference. Take over this issue, since you're obviously better at it than I?",
            "date": "2009-04-20T21:00:07.712+0000",
            "id": 14
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. The fastest hash we can get, should have no collisions. This is achievable by resizing on each new collision.\n\n*edit*: agree, for the first version that was only a cache where collisions invalidate the entry and cause another String.intern() to be called... my comments below are with respect to the second version of my code where interned strings are never dropped from the table.\n\nHmmm, in my quick'n'dirty tests of about 256 unique strings, a smaller hash table was actually quicker (initialized with 32 and let it resize vs starting at 1024).  I imagine that this would be due to a larger part of the table fitting in smaller and faster processor caches.  YMMV.  Collisions should also be very quick to skip by comparing the hash code (which is cached for Strings).\n\n",
            "date": "2009-04-20T21:02:28.731+0000",
            "id": 15
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. Collisions should also be very quick to skip by comparing the hash code (which is cached for Strings).\nIn no-collision resolution scheme, if you detect a collision early with hashcode, you still call String.intern(). That kills any benefit gained from hashcode check vs compareTo. And if no collision is detected, introducing this check slows things down a little. Yes, that surprised me too.",
            "date": "2009-04-20T21:10:52.378+0000",
            "id": 16
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. In no-collision resolution scheme, if you detect a collision early with hashcode, you still call String.intern(). \n\nIn the old code, yes... that's why I left it commented out there.  In the latest code, we re-probe on a collision w/o calling compareTo (assuming hashCodes are unequal) and only call intern() if it's really a String we haven't seen before.  The new code is a real hash table that will store all the Strings requested through it, unlike the first variant that was a simple cache.",
            "date": "2009-04-20T21:22:14.227+0000",
            "id": 17
        },
        {
            "author": "Earwin Burrfoot",
            "body": "I tried it out. Works a little bit better than simple cache (no stray interns must've paid off), doesn't degrade at all.\nI'd like to change starter value to something 256-1024, it works way better for 10-20 fields.\n\nWhy h >> 7? I understand that you're sacking collision-guilty bits, but why not exact amount that was used (have to store it?), or a whole byte or two?",
            "date": "2009-04-22T18:39:31.703+0000",
            "id": 18
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Mmm.. what's the status of this one?\nShould I add a patch with Yonik's last hash impl and all calls to String.intern() replaced to get it moving?",
            "date": "2009-04-29T18:01:35.128+0000",
            "id": 19
        },
        {
            "author": "Patrick Eger",
            "body": "As a quick comment on the implementation, i notice that it is possible (with reasonable probability) for hash collisions to result in re-interning a pair of strings multiple times. For example, a codepath that traverses across 32 unique string datapoints (say, in an inner loop somewhere), would have a minimum 3% probability of colliding and re-interning 2 strings every time through the loop. Because of the birthday paradox, it becomes likely to have such a situation (50% probability with ~150 unique values).\n\nThese are the probabilities of collision, assuming random distribution and perfect hashing. In real life the distribution will not be so random (string.hashCode() & MASK) so these will be \"best case\".\n2 datapoints: collision prob = 0.006104%\n4 datapoints: collision prob = 0.036617%\n8 datapoints: collision prob = 0.170779%\n16 datapoints: collision prob = 0.729976%\n32 datapoints: collision prob = 2.983863%\n64 datapoints: collision prob = 11.591861%\n128 datapoints: collision prob = 39.188158%\n256 datapoints: collision prob = 86.501947%\n\n\nPractically this may or may not matter. My thought is that some sort of fast LRU structure would be better, but of course creating something like this without locking may be tricky. Another idea might be to support some form of limited hash-chaining or probing in the table, which would mitigate the damage of a collision significantly.\n\n\nfor reference, python code for calculating birthday/hash collisions, shamelessly stolen:\n--------------------\ndef bp(n, d):\n\tv = 1.0\n\tfor i in range(n):\n\t\tv = v * (1 - float(i)/d)\n\treturn 1 - v\n\nfor n in [2, 4, 8, 16, 32, 64, 128, 256]:\n\tprint \"%i datapoints: collision prob = %f%%\" % (n, bp(n, 16*1024)*100)",
            "date": "2009-04-29T18:40:05.083+0000",
            "id": 20
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. why h >> 7?\n\nWas copied from Solr's hashing of doc ids... we didn't want to throw away too many lower bits since they were likely to be the most random.  In string hashes, the rightmost bits also have the most entropy.\n\nbq. Should I add a patch with Yonik's last hash impl and all calls to String.intern() replaced to get it moving? \n\nThat would be helpful, thanks!",
            "date": "2009-04-29T18:42:17.615+0000",
            "id": 21
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. As a quick comment on the implementation, i notice that it is possible (with reasonable probability) for hash collisions to result in re-interning a pair of strings multiple times.\n\nFor the first implementation, yes.  The latest implementation is guaranteed to only intern a string once ( the hashtable does probing and resizing.)\n",
            "date": "2009-04-29T18:56:49.855+0000",
            "id": 22
        },
        {
            "author": "Patrick Eger",
            "body": "Ah I see thanks. Was looking at the most recent patch (by  date).",
            "date": "2009-04-29T19:09:08.902+0000",
            "id": 23
        },
        {
            "author": "Earwin Burrfoot",
            "body": "This should do.\nI replaced a pair of intern()s that appeared on trunk after last patch, initial cache size is 1024 and won't probably go up for most people.\nAlso renamed some variables while trying to understand the code, can revert them back if it's important for anyone.",
            "date": "2009-04-29T19:30:55.786+0000",
            "id": 24
        },
        {
            "author": "Yonik Seeley",
            "body": "The last patch removed the ability to plug a different implementation, but I guess we don't need that until we have another implementation (and it's not clear if the benefits of dumping String.intern() compatability in the future outweigh the disadvantages of breaking back compatibility).\n\nRethinking what possible problems this could have... I'm not sure it should be committed in it's current form.  One problem is potentially unlimited growth where there was not before.  This could happen in a long running search system where users enter a variety of field names that don't even exist.\n\nA WeakReference based approach would work (as String.intern() uses), but that's more heavyweight and could need synchronization since we are dealing with more complex objects.\nAnother option is to go back to a simple cache based approach which could still pin otherwise unreferenced Strings in memory, but would have a bounded size.  Perhaps this argues for reinstating the pluggability of the intern implementation.\n",
            "date": "2009-04-29T20:06:55.914+0000",
            "id": 25
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Is there 'any' benefit of dumping String.intern() compatibility? All those interns happen at startup anyway.\nIf future brings us something better (which I doubt in this case), we'll just swap the impl, which is all-private.\n\nAll in all I consider a practice of system-property-driven pluggable implementations a sickening one. Take MMapDirectory that was impossible to use until now without twiddling with startup keys, take SegmentReader/ReadonlySegmentReader - resulting code is ugly and nobody's going to override defaults anyway, all important dependencies are package-private.",
            "date": "2009-04-29T20:24:13.850+0000",
            "id": 26
        },
        {
            "author": "Earwin Burrfoot",
            "body": "A top bound on cache size will do? If you're fed too much unique strings it'll end up with characteristics of simple cache.",
            "date": "2009-04-29T20:29:58.826+0000",
            "id": 27
        },
        {
            "author": "Yonik Seeley",
            "body": "Here is another alternative that is limited in size to prevent unbounded growth, and should still handle collisions acceptably.  It's completely lockless (even for updates) and uses open hashing.  Each bucket is an insertion-order cache (inserts at the head) and is limited to a certain length.",
            "date": "2009-04-30T02:41:11.384+0000",
            "id": 28
        },
        {
            "author": "Shalin Shekhar Mangar",
            "body": "Yonik, the string is being interned twice in your latest patch\n{code}\n+      if (e==null) {\n+        s = s.intern();\n+        arr[slot] = new Entry(s.intern(), h, first);\n{code}",
            "date": "2009-04-30T05:44:51.635+0000",
            "id": 29
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. Yonik, the string is being interned twice in your latest patch \n\nThanks - I had actually fixed that... but it didn't make it into the patch apparently :-)",
            "date": "2009-04-30T13:49:41.121+0000",
            "id": 30
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Bug in previous algo (unbounded hash):\n\n      // check cached hashCode first, and use compareTo to avoid\n      // dynamic type checking in equals().\n      if (h == other.hashCode() && s.compareTo(other)==0) {\n        return s;          <--- here we should return 'other'\n      }\n",
            "date": "2009-05-05T18:03:35.896+0000",
            "id": 31
        },
        {
            "author": "Yonik Seeley",
            "body": "Here's a slightly updated patch (javadoc and StringHelper.intern() convenience method).\n\nThe method of plugging a different StringInterner implementation would be to simply assign to the static in StringHelper.\n\n{code}\n  /**\n   * Expert:\n   * The StringInterner implementation used by Lucene.\n   * This should never be changed after other Lucene APIs have been used.\n   */\n  public static StringInterner interner = new SimpleStringInterner(1024,8);\n{code}\n\nAre people comfortable with this approach?  How about the defaults?  This should speed up anyone with under thousands of field, and only slightly slow down someone with over thousands of fields (until they plugged in a new interner with a bigger table size).\n\n",
            "date": "2009-05-14T00:52:54.349+0000",
            "id": 32
        },
        {
            "author": "Michael McCandless",
            "body": "Yonik is this ready to go in...?",
            "date": "2009-06-10T20:13:20.935+0000",
            "id": 33
        },
        {
            "author": "Yonik Seeley",
            "body": "I think so... but I was waiting for some kind of feedback if people in general thought it was the right approach.  It introduces another static, and people tend to not like that.  I accidentally didn't upload the latest version with the javadoc + helper method.  I'll do that now.",
            "date": "2009-06-10T20:29:17.364+0000",
            "id": 34
        },
        {
            "author": "Yonik Seeley",
            "body": "latest patch - could use a multi-threaded testcase to ensure no exceptions are thrown and that intern() always returns the same instance.",
            "date": "2009-06-10T20:33:31.273+0000",
            "id": 35
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. but I was waiting for some kind of feedback if people in general thought it was the right approach. It introduces another static, and people tend to not like that.\nJust forgot somehow about this issue.\nYou're right about static, it's not clear how and when to initialize it, plus you introduce some public classes we'll be unable to change/remove later.\nI still have a feeling we should expose a single static method - intern() and hide implementation away, possibly tuning it to be advantageous for <thousands of fields, and degrading to raw String.intern() level if there are more fields.\n\nI'm going to be away from AC power for three days starting now, so I won't be able to reply until then.",
            "date": "2009-06-10T21:02:15.837+0000",
            "id": 36
        },
        {
            "author": "Yonik Seeley",
            "body": "Latest patch attached with multi-threaded test.\n\nSome quick performance tests:\n10240 unique strings, 100 threads:  29% faster  (larger than the cache capacity - will lead to evictions)\n100 unique strings, 100 threads: 147% faster\n100 unique strings, 2 threads: 152% faster\n\nTimes were simply the time it took the junit test to run - includes other overhead like random number generation and error checking.",
            "date": "2009-06-11T19:29:53.057+0000",
            "id": 37
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. I still have a feeling we should expose a single static method - intern() and hide implementation away\n\nWhile the default should be beneficial for most users, I'd hate to lock away a users ability to either expand or remove the cache. ",
            "date": "2009-06-11T21:52:05.695+0000",
            "id": 38
        },
        {
            "author": "Mark Miller",
            "body": "I assume we can assign this one to you Yonik?",
            "date": "2009-06-16T17:57:23.095+0000",
            "id": 39
        },
        {
            "author": "Yonik Seeley",
            "body": "I've held off because of a lack of consensus, but I suppose I can do the old \"i'll commit in a few days\" thing.",
            "date": "2009-06-16T18:09:37.504+0000",
            "id": 40
        },
        {
            "author": "Mark Miller",
            "body": "Or push to 3.1. I have no preference if it goes in as is, just looking for it to be managed one way or another for 2.9 release.",
            "date": "2009-06-16T18:15:19.004+0000",
            "id": 41
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I've held off because of a lack of consensus\n\nSilence = consensus!",
            "date": "2009-06-16T18:45:38.673+0000",
            "id": 42
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Okay, let's have an extra class and ability to switch impls. I liked that static method could get inlined (at least its short-path), but that's not necessary.\n\nExcept I'd like the javadoc demand each impl to be String.intern()-compatible. There's nothing bad in it, as in any decent impl an unique string will be String.intern()'ed one time at most. And the case when you get an infinite flow of unique strings is degenerate anyway, you have to fix something, not deal with it. On the other hand, we can remove \"This should never be changed after other Lucene APIs have been used\" clause.\n\nrewrite 'for' as 'for (Entry e = first;e != null;e = e.next)' for clarity?\n'Entry[] arr = cache;' - this can be skipped? 'cache' is already final and optimizer loves finals. Plus further down the method you use both cache[slot] and arr[slot]. Or am I missing some voodoo?\nIf check around 'nextToLast = e' can also be removed?\n'public String intern(char[] arr, int offset, int len)' - is this needed?",
            "date": "2009-06-23T23:13:47.157+0000",
            "id": 43
        },
        {
            "author": "Mark Miller",
            "body": "looks like this is so close ...",
            "date": "2009-07-14T22:55:36.876+0000",
            "id": 44
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. Except I'd like the javadoc demand each impl to be String.intern()-compatible.\n\nIf *everything* went through the same intern, it wouldn't matter. \n\nbq. rewrite 'for' as 'for (Entry e = first;e != null;e = e.next)' for clarity?\n\ndone.\n\nbq. If check around 'nextToLast = e' can also be removed?\n\nI don't see how...",
            "date": "2009-08-05T17:20:04.806+0000",
            "id": 45
        },
        {
            "author": "Yonik Seeley",
            "body": "committed.",
            "date": "2009-08-05T18:05:17.758+0000",
            "id": 46
        },
        {
            "author": "Uwe Schindler",
            "body": "I found one real occurrence of intern() in crontrib and a now obsolete discussion in one comment.\n\nAttached is a simple patch.\n\nWhat I currently do not like is that there are still a lot of intern()s in the Javadocs/comments elsewhere, maybe this should also be changed (code refactoring is not able to do that, but a simple grep).",
            "date": "2009-08-06T06:46:55.529+0000",
            "id": 47
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed rev 802095.",
            "date": "2009-08-07T17:20:37.620+0000",
            "id": 48
        },
        {
            "author": "Noble Paul",
            "body": "isn't it possible to make the call to \n{code}\npublic String intern(char[] arr, int offset, int len) {\n}\n{code}\nnot create a String? \ncurrently , if I have a char[] it ends up creating a String (which makes a copy of the char[]) before it does the intern() operation.\n",
            "date": "2009-08-24T08:46:16.627+0000",
            "id": 49
        },
        {
            "author": "Noble Paul",
            "body": "I haven't quite tested it. But it is an idea as a patch. ",
            "date": "2009-08-24T11:05:11.579+0000",
            "id": 50
        },
        {
            "author": "Yonik Seeley",
            "body": "{quote}\nisn't it possible to make the call to\npublic String intern(char[] arr, int offset, int len) {}\nnot create a String?\n{quote}\n\nYep - that's why I added that method (just didn't get around to implementing it that way).",
            "date": "2009-08-24T12:41:19.852+0000",
            "id": 51
        }
    ],
    "component": "",
    "description": "By using our own interned string pool on top of default, String.intern() can be greatly optimized.\n\nOn my setup (java 6) this alternative runs ~15.8x faster for already interned strings, and ~2.2x faster for 'new String(interned)'\nFor java 5 and 4 speedup is lower, but still considerable.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1607",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "String.intern() faster alternative",
    "systemSpecification": true,
    "version": ""
}