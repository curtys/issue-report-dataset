{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "Attached you find the patch. Robert offered to do benchmarks with Automaton.\n\nThe patch can be applied to a clean checkout, you no longer need to svn copy old SorterTemplate, as this is a almost complete rewrite.\n\nThis patch removes the CHANGES.txt entry for 3.x, as it readds the class. If we don't merge this to 3.x, the CHANGES should be reverted. As Lucene uses Arrays.sort(Object[]) which is slow at other places, I recommend to add it also to 3.x.\n\nPlease test the stuff with large -Dtests.multiplier! Maybe also verify my modified quickSort!",
            "date": "2010-10-22T21:48:42.542+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Using this class we can look for more useless quickSort code duplication. One is e.g. in DocFieldProcessorPerThread. Maybe more of them.",
            "date": "2010-10-22T21:58:17.167+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. This also applies to Solr (Yonik?).\n\nYep - Solr also has it's own version of quicksort - PrimUtils.sort() to deal with sorting indexes (an int[]) instead of objects (parallel array sorting).",
            "date": "2010-10-22T22:43:52.636+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "The quickSort in DocFieldProcessorPerThread also converted to ArrayUtil.quickSort().\n\nYonik: I will take care of PrimUtils!",
            "date": "2010-10-22T22:47:29.128+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "New patch:\n- Cleaned up (removed useless imports)\n- Added test that verifies that mergeSort() is stable - this is now validated and we can use mergeSort() in ConjunctionScorer\n- Further test optimization, so also totally reversed arrays get sorted correctly (special case)",
            "date": "2010-10-23T09:16:09.168+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "This is great Uwe!",
            "date": "2010-10-23T09:48:22.109+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "Modified all sorts to use >>>1 instead /2 (have no real opinion about that).\n\nbq. Yep - Solr also has it's own version of quicksort - PrimUtils.sort() to deal with sorting indexes (an int[]) instead of objects (parallel array sorting).\n\nAccording to java.util.Arrays javadoc: The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\", Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log(n) performance on many data sets that cause other quicksorts to degrade to quadratic performance. \n\nIf I change to SorterTemplate, we will degrade to good old quicksort. We could also upgrade SorterTemplate to use this algo, but I am not sure if thats easy because SorterTemplate only allows swap(index, index) and compare(index, index). But we cannot retrieve e.g. the pivot value. This was also one problem in porting BytesRefHash's quicksort, as it used the value of the pivot (this is why there is an additional check below the commented out assert in the current patch's algo).",
            "date": "2010-10-23T11:29:55.115+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "I tested indexing first 10M wikipedia 1KB docs  and running various queries and found no real perf change, or at least less than the noise in the test...",
            "date": "2010-10-23T14:02:08.382+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "Latest updates.\n\nThere is also an additional patch which provides CollectionUtil, now also supporting in-place collection sorts which is much more perfromant for smaller collections. Collections.sort() in JDK does copy the List into array and calls Arrays.sort() which itsself does clone the array and after that copies the arraycontents using a ListIterator back to the List.\n\nBefore committing this, can somebody look into the o.a.l.index package, because I replaced some sorts for field names there. For commit points i used MergeSort, as I am not sure if it should be stable.\n\nSo just a confirmation, if we need stable sort for Indexer and Commit points would be fine.",
            "date": "2010-10-25T12:10:41.252+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "Robert tested yesterday and found out that SorterTemplate.quickSort is not as efficient as it could be. The general problem is:\n- Quicksort needs the value of the pivot/partition element and the main sorting step compares this single value quite often\n- For our in-place algorithm that only used swap(i,j) and compare(i,j), the main loop's swap statements needed an extra check that not the pivot index is swapped and so the pivot changes suddenly. Because of this when the index of the pivot is swapped, the pivot index value needed to be updated.\n\nI changed SorterTemplate to look more like FieldComparator known from search. It now has not only swap(index1,index2) and compare(index1,index2), it also gets setPivot(index) [stores index' value as pivot] and comparePivot(index) [compares given index' value with previously stored pivot value]. Now the quicksort algorithm is identical to the one seen everywhere in Lucene before. We can now also implement the optimized one from harmony also seen in Solr's PrimUtil. I will look into this, if it makes sense (it makes not always sense as comparing and swapping is more intensive for non-native values!).\n\nThis has also some improvements to BytesRefHash, as there are less de-references of BytesRefs, because the main quickSort loop only compares an index with the in setPivot dereferenced BytesRefs. Before it did this on every compare step!\n\nRobert: Can you supply your benchmark? Or test again :-)",
            "date": "2010-10-26T10:07:51.398+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "After spending the evening with performance tests on BytesRefHash and Fuzzy automatons I cam to the following conclusion, finalized in this hopefully last patch:\n\n- Automatons use very short, mostly presorted arrays. Quicksort is ineffective for them. Initial tests showed that even insertionSort is enough for most of the Transition arrays. As some automatons also contain very large Transition arrays, it showed, that then insertionSAort gets very slow. Quicksort gets better, but as the array is already sorted, mergesort beats them all. SorterTemplate.mergeSort contains a limit, so when array size is < 12 entries, it uses insertion sort for the sorting (also in later merge steps if the partitioned array gets < 12 entries).\nschindlerMinimize and mccandlessDeterminize are now using mergesort.\n- BytesRefHash gets about 10% speed improvement by the recent extension to SorterTemplate with setPivot/comparePivot abstract methods. This beats the old algorithm which is currently in trunk, as for the quicksort algorithm used, the swapping of entries in the mail loop always compares to the pivot value. If BytesRefHash needs to resolve this values every time, it gets slow. The new patch improves a modified TestBytesRefHash.testSort for perf testing by 11% (runs with -Xbatch -server -Xmx1024m, Java 1.5 on my computer in 12.5 secs on trunk, 11.1 secs with this patch):\n\n{code}\npublic void testSortPerf() {\n  long start = System.currentTimeMillis();\n  BytesRef ref = new BytesRef();\n  for (int j = 0; j < 200 * RANDOM_MULTIPLIER; j++) {\n    for (int i = 0; i < 1797; i++) {\n      String str;\n      do {\n        str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n      } while (str.length() == 0);\n      ref.copy(str);\n      hash.add(ref);\n    }\n    hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());\n    hash.clear();\n    hash.reinit();\n  }\n  System.out.println(\"time: \"+(System.currentTimeMillis()-start));\n}\n{code}\n\nI will commit this patch, which now also makes insertionSort public in SorterTemplate, ArrayUtil and CollectionUtil tomorrow. I tend to also commit this to 3.x (merged to BytesRefHash-similar class from 3.x). This is why the CHANGES.txt removes the SorterTemplate removal message (may need to be modified, because SorterTemplate changed API). If we will only commit to trunk, CHANGES would keep unchanged.",
            "date": "2010-10-26T23:07:24.250+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "After Robert mentioned the strange comparator in the above benchmark:\nIt is just a leftover from the original testSort() test which needed that special order, because it compared the sorted BytesRefHash using a TreeSet of UTF16 strings.\nFor the benchmark the comparator has no real effect.",
            "date": "2010-10-27T12:29:09.125+0000",
            "id": 11
        },
        {
            "author": "Uwe Schindler",
            "body": "Final patch, will get committed... now. It adds some contrib changes and changes.txt/notice.txt and javadocs.",
            "date": "2010-10-27T15:13:49.237+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 1027998\n\nNow working on 3.x",
            "date": "2010-10-27T15:19:12.776+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "filterdiff'ed patch for 3.x branch - we need that for commit mails, too. The changes in BytesRefHash are merged over to TermsHashPerField. This patch also removes useless synchronization!\n\nAfter this also 3.x gets the imporved terms sorting and reduced code duplication.\n\nI will commit soon.",
            "date": "2010-10-27T16:15:16.658+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed 3.x branch revision: 1028042\n\nThanks to all for performance testing!",
            "date": "2010-10-27T17:16:41.497+0000",
            "id": 15
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:24.385+0000",
            "id": 16
        }
    ],
    "component": "",
    "description": "This patch adds back an optimized and rewritten SorterTemplate back to Lucene (removed after release of 3.0). It is of use for several components:\n\n- Automaton: Automaton needs to sort States and other things. Using Arrays.sort() is slow, because it clones internally to ensure stable search. This component is much faster. This patch adds Arrays.sort() replacements in ArrayUtil that work with natural order or using a Comparator<?>. You can choose between quickSort and mergeSort.\n- BytesRefHash uses another QuickSort algorithm without insertionSort for very short ord arrays. This class uses SorterTemplate to provide the same with insertionSort fallback in a very elegant way. Ideally this class can be used everywhere, where the sort algorithm needs to be separated from the underlying data and you can implement a swap() and compare() function (that get slot numbers instead of real values). This also applies to Solr (Yonik?).\n\nSorterTemplate provides quickSort and mergeSort algorithms. Internally for short arrays, it automatically chooses insertionSort (like JDK's Arrays). The quickSort algorith was copied modified from old BytesRefHash. This new class only shares MergeSort with the original CGLIB SorterTemplate, which is no longer maintained.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2719",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Re-add SorterTemplate and use it to provide fast ArraySorting and replace BytesRefHash sorting",
    "systemSpecification": true,
    "version": "3.1"
}