{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "I thought it's going to be easy too soon :).\n\nAfter I've made the changes, some tests in TestBooleanMinShouldMatch fail w/ NPE. That's because previously we always returned BS2, which used NonMatchingScorer internally, and now we return null. Therefore this looks like a back-compat issue, but not sure how serious it is. The reason is that BooleanWeight.scorer() already returns null today in some situations, therefore any code that calls BooleanWeight.scorer() directly should already check that it didn't get null. So I'm not sure if it's indeed back-compat problem or not.\n\nWhat do you think?",
            "date": "2009-07-20T07:00:15.418+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "It seems like Weight.scorer() in general is allowed to return null to indicate \"no docs will match\" (since some scorers do so, though others do not)?  Though that \"right\" wasn't spelled out anywhere in the javadocs as best I can tell.  So... I don't think this is really a back-compat break?\n\nI think we should allow this, and document it clearly, going forward (in QueryWeight.scorer)?\n\nI suppose we could fix the emulation of Weight on top of QueryWeight (QueryWeightWrapper) to return NonMatchingScorer if it gets null back from QueryWeight.scorer?",
            "date": "2009-07-20T10:55:57.864+0000",
            "id": 1
        },
        {
            "author": "Shai Erera",
            "body": "Patch which removes NonMatchingScorer, fixes tests and tag.\n\nI also agree this is not a back-compat change, since BooleanQuery returns null today already. I just fixed the test to check whether the scorer returned is not null.\n\nI don't think we should return NonMatchingScorer from QueryWeightWrapper, since it will hide the already returned null Scorer. I.e., I think that will cause some apps to break, since if previously they relied on null, now they will get an instance which if they'll call its score() or doc() methods will get UOE.",
            "date": "2009-07-20T12:31:26.054+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. It seems like Weight.scorer() in general is allowed to return null to indicate \"no docs will match\"\n\nHmmm, that's a bit of a surprise... I had thought one would always get a scorer instance back .  There's probably a lot of lurking bugs.\nSee ConstantScoreQuery.explain() for instance.",
            "date": "2009-07-20T12:37:39.821+0000",
            "id": 3
        },
        {
            "author": "Shai Erera",
            "body": "bq. See ConstantScoreQuery.explain() for instance.\n\nCSQ calls its own scorer(), therefore it knows it's going to get an instance back.\n\nIn general, BooleanQuery already returns null today, so all I was saying is that if someone called BQ.weight.scorer(), he had to check for null anyway. If he didn't then his app would be exposed?",
            "date": "2009-07-20T13:10:19.929+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "TermWeight.scorer returns null if the termDocs is null (though it looks like DirectoryIndexReader will never return null termDocs).\n\nPhraseQuery and MultiPhraseQuery return null scorer if they have 0 terms.\n\nA number of scorers check for null returns from their sub-scorers and then return null to their caller.  IndexSearcher also handles a null scorer.\n\nIt looks like null is already in general an accepted/possible return from Weight.scorer().",
            "date": "2009-07-20T18:54:09.607+0000",
            "id": 5
        },
        {
            "author": "Yonik Seeley",
            "body": "Still surprising that scorer() can return null... I guess it's been a blind spot.\n\nAnother question - from QueryWrapperFilter:\n{code}\n  public DocIdSet getDocIdSet(final IndexReader reader) throws IOException {\n    final QueryWeight weight = query.queryWeight(new IndexSearcher(reader));\n    return new DocIdSet() {\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(reader, true, false);\n      }\n    };\n  }\n{code}\n\nSo is it the case that DocIdSet.iterator() can also return null?  That's what this code does.\n",
            "date": "2009-07-20T23:47:45.678+0000",
            "id": 6
        },
        {
            "author": "Shai Erera",
            "body": "That's a good point. IndexSearcher does not protect against this case (it only asserts the filter is not null, but not the DISI returned from it).\n\nbq. I guess it's been a blind spot. \n\nI think that you're right. And more than that, we don't have unit tests that cover these cases (I believe there are some that cover a null Scorer, but not a null DISI). And I wonder how this hasn't come up until now. I mean, the examples Mike gave above do not sound way too extreme to me.\n\nSo does this mean we should document that scorer cannot be null? And if so, we make NonMatchingScorer public and recommend to return it if the query does not expect to return any documents? We can also make NMS not instantiable (is it a word?), with a static instance() method, but that's a minor thing.\n\nOr ... we leave everything as-is, and add some test cases which test this exactly, and change QueryWrapperFilter to return NMS in case the scorer returned by Weight is null.\n\nI think I prefer the first approach.",
            "date": "2009-07-21T06:06:44.133+0000",
            "id": 7
        },
        {
            "author": "Tim Smith",
            "body": "If making NonMatchingScorer public, i suggest potentially implementing a NonMatchingQuery as well\n\nthis way, if a query has to rewrite() to null, it could return a NonMatchingQuery instead (which would protect against null pointer exceptions)",
            "date": "2009-07-21T12:57:28.025+0000",
            "id": 8
        },
        {
            "author": "Shai Erera",
            "body": "So if we agree that scorer() cannot return null, I think that most of the patch can be reverted, and I'll change the scorer() impls which return null to return NMS instead?\n\nAbout NonMatchingQuery, I don't mind adding it, though why should a Query rewrite to null?",
            "date": "2009-07-21T17:49:10.480+0000",
            "id": 9
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. So if we agree that scorer() cannot return null, I think that most of the patch can be reverted, and I'll change the scorer() impls which return null to return NMS instead? \n\nI haven't looked deeply into it, but at first blush that could simplify client code.\nNeed to watch out if there are any implementations of Weight.explain() that cast to a Specific type of scorer - hence one would get a cast exception if \"return null\" were blindly replaced with \"return NMS\".",
            "date": "2009-07-21T18:00:47.960+0000",
            "id": 10
        },
        {
            "author": "Tim Smith",
            "body": "Here's a couple of use cases where a Query should rewrite to null/NonMatchingQuery (in my opinion):\n* Wildcard query that maps to 0 terms in the index\n* range query that again maps to 0 terms in the index\n* boolean query that has 0 clauses\n* filter based constant score query that has 0 docs in it\n* (and thats just in the in the lucene tree, nothing to do with custom query implementations)\n\nMost of these situations would actually preempt needing to return null from a scorer, since the query would already have been rewritten to a NonMatchingQuery/null prior to asking for a scorer\n\nBooleanQuery could then also do instanceof checks on return from clause rewrite. If a NonMatchingQuery/null is returned for a required clause, the BooleanQuery itself can rewrite to NonMatchingQuery, also, if a prohibited clause rewrites to NonMatchingQuery/null, that clause can be removed entirely, if an optional clause rewrites to NonMatchingQUery/null, that clause can also be removed safely",
            "date": "2009-07-21T18:04:09.286+0000",
            "id": 11
        },
        {
            "author": "Shai Erera",
            "body": "bq. hence one would get a cast exception if \"return null\" were blindly replaced with \"return NMS\".\n\nSo this means that that someone is prepared to get a null Scorer right? So I'm confused - are you for returning null or not? Of course, something I just realized, returning null from scorer() does not break back-compat, while returning NMS does (or at least may).\n\nHow about if we fix QueryWrapperFilter to return NMS then? Or we document that Filter.getDocIdSet may return null, and fix IndexSearcher accordingly (this again is not a back-compat thing, while returning NMS is)?",
            "date": "2009-07-21T18:07:15.682+0000",
            "id": 12
        },
        {
            "author": "Shai Erera",
            "body": "bq. BooleanQuery could then also do instanceof checks on return from clause rewrite\n\nThat is a good point you raise. Actually today, BQ is quite efficient in that it compares to null. If we change scorer() to return NMS, we'd need to check instanceof which is way more expensive (we'd still need to check for null though, because we cannot enforce NMS).\n\nSo I think I'm still in favor of returning null ... or should I say - keep the currently not documented, but in effect, behavior.",
            "date": "2009-07-21T18:10:13.299+0000",
            "id": 13
        },
        {
            "author": "Shai Erera",
            "body": "Any thoughts on that?\n\nIf we keep null, then I'll fix IndexSearcher to check whether filter.getDocIdSet did not return null. If it did, don't execute the query.\n\nI'd like to move on with this, if we have some sort of consensus.",
            "date": "2009-07-22T15:22:03.870+0000",
            "id": 14
        },
        {
            "author": "Tim Smith",
            "body": "keeping null should be fine, as long as this is documented and all core query implementations handle this behavior, and all searcher code handles the null return properly\nat this point, NonMatchingScorer could be removed and null returned in its place (being package private, no one writing applications can make any assumptions on a NonMatchingScorer being returned)\n\nhowever, this should also be documented for the rewrite() method (currently this looks to always expect a non-null return value), also the searcher will throw null pointers if a null query is passed to it \n\n",
            "date": "2009-07-22T15:29:42.116+0000",
            "id": 15
        },
        {
            "author": "Michael McCandless",
            "body": "I think we continue to allow scorer() and getDocIdSet to return null to mean \"no matches\", though they are not required too (ie, one cannot assume that a non-null return means there are matches).\n\nAnd we should make this clear in the javadocs.\n\nAnd remove NonMatchingScorer.",
            "date": "2009-07-22T15:50:02.894+0000",
            "id": 16
        },
        {
            "author": "Shai Erera",
            "body": "ok then I'll add a test case to the patch which uses QWF w/ a query that it's scorer returns null, and then fix IndexSearcher accordingly. And update the javadocs as needed.",
            "date": "2009-07-22T15:54:20.452+0000",
            "id": 17
        },
        {
            "author": "Shai Erera",
            "body": "* Added a test case to TestDocIdSet which returns a null DocIdSet and indeed IndexSearcher failed.\n* Fixed IndexSearcher and all other places in the code which called scorer() or getDocIdSet() and could potentially hit NPE.\n* Added EmptyDocIdSetIterator for use by classes (such as ChainFilter) that need a DISI, but got a null DocIdSet.\n* Updated CHANGES.\n\nAll search tests pass.",
            "date": "2009-07-22T17:10:13.611+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "For some reason I can't apply the patch -- I get this:\n{code}\n$ patch -p0 < /x/tmp/LUCENE-1754.patch.txt \npatching file CHANGES.txt\npatch: **** malformed patch at line 20: @@ -629,6 +638,11 @@\n{code}",
            "date": "2009-07-22T17:19:51.424+0000",
            "id": 19
        },
        {
            "author": "Shai Erera",
            "body": "My fault. After I created it, I manually edited the CHANGES section, which messed up the lines count.",
            "date": "2009-07-22T17:27:54.175+0000",
            "id": 20
        },
        {
            "author": "Michael McCandless",
            "body": "OK patch looks good, thanks Shai!\n\nI plan to commit in a day or two.",
            "date": "2009-07-22T18:48:05.788+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "New patch attached -- sync'd to trunk, and, fixed places to also catch when disi.iterator() returns null.",
            "date": "2009-07-25T10:37:28.987+0000",
            "id": 22
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Shai!",
            "date": "2009-07-27T09:50:04.739+0000",
            "id": 23
        },
        {
            "author": "Shai Erera",
            "body": "EmptyDocIdSetIterator is not necessary as DocIdSet already defines an EMPTY_DOCIDSET member. We should use it.",
            "date": "2009-07-27T10:59:41.956+0000",
            "id": 24
        },
        {
            "author": "Shai Erera",
            "body": "Removed EmptyDocIdSetIterator and changed DocIdSet.EMPTY_DOCIDSET to impl iterator() to always return the same, empty, instance.",
            "date": "2009-07-27T10:59:54.488+0000",
            "id": 25
        },
        {
            "author": "Michael McCandless",
            "body": "New patch looks good Shai, thanks!  I'll commit shortly.",
            "date": "2009-07-27T11:11:51.436+0000",
            "id": 26
        },
        {
            "author": "Uwe Schindler",
            "body": "There is no need to make this empty DIS a subvclass of SortedVIntList\n\n{code}\n-public static final DocIdSet EMPTY_DOCIDSET = new SortedVIntList(new int[0]) {\n+-public static final DocIdSet EMPTY_DOCIDSET = new DocIdSet() {\n{code}\n\nElse is OK!",
            "date": "2009-07-27T11:15:39.231+0000",
            "id": 27
        },
        {
            "author": "Shai Erera",
            "body": "Wait ! DocIdSet.EMPTY should not do \"new SortedVIntList\", just \"new DocIdSet()\".",
            "date": "2009-07-27T11:15:44.651+0000",
            "id": 28
        },
        {
            "author": "Shai Erera",
            "body": "bq. There is no need to make this empty DIS a subvclass of SortedVIntList \n\nWe probably posted at the same time :)",
            "date": "2009-07-27T11:16:29.634+0000",
            "id": 29
        },
        {
            "author": "Uwe Schindler",
            "body": "Hihi! Sometimes it is not the best to be too fast :-) \n\nI am now satisfied with the latest patch, this new DocdSet impl is better than the SortedVInitList (which was OK, too, in my opinion. There was a very lengthly discussion in another JIRA issue about that DIS(I)).\n",
            "date": "2009-07-27T11:22:16.430+0000",
            "id": 30
        },
        {
            "author": "Michael McCandless",
            "body": "bq. DocIdSet.EMPTY should not do \"new SortedVIntList\", just \"new DocIdSet()\".\n\nOK, committed.",
            "date": "2009-07-27T11:23:30.849+0000",
            "id": 31
        },
        {
            "author": "Uwe Schindler",
            "body": "I also removed the note about SortedVInitList in the JavaDocs, Mike, should I commit?",
            "date": "2009-07-27T11:24:56.242+0000",
            "id": 32
        },
        {
            "author": "Shai Erera",
            "body": "bq. I also removed the note about SortedVInitList in the JavaDocs\n\nArgh ... I guess I tried to create the patch too fast (before Mike commits) :).\nWhen you do this, the import of SVIL can also be removed.",
            "date": "2009-07-27T11:30:31.404+0000",
            "id": 33
        },
        {
            "author": "Uwe Schindler",
            "body": "I am a little bit confused about the JavaDocs of iterator():\n{code}\n/** Provides a {@link DocIdSetIterator} to access the set.\n * This may (but is not required to) return null if there\n * are no docs that match. */\n{code}\n\nIs it really allowed to return null instead of an empty iterator? If not, we should silently remove this part of the docs (and hopefully do not break some filters written by someone).\n\n",
            "date": "2009-07-27T11:30:40.038+0000",
            "id": 34
        },
        {
            "author": "Shai Erera",
            "body": "bq. Is it really allowed to return null instead of an empty iterator?\n\nSome iterators already return null as an iterator, perhaps unknowingly. QueryWrapperFilter will do that if the Query produced a null Scorer, which is legal, or at least the de facto impl of some Queries.\n\nI think that the decisions on this issue were made because we observed that returning null \"already exists\", and moving to not return null, or saying that null should not be returned, may break back-compat (e.g. if someone relies on null to mean \"there are no docs to match\").",
            "date": "2009-07-27T11:34:49.361+0000",
            "id": 35
        },
        {
            "author": "Uwe Schindler",
            "body": "OK, so maybe we change the JavaDoc and state, that optimally a Filter should return the empty DocIdSet instance. This is e.g. how MultiTermQueryWrapperFilter works.",
            "date": "2009-07-27T11:37:04.644+0000",
            "id": 36
        },
        {
            "author": "Shai Erera",
            "body": "Even though I don't know if it's \"optimal\", I think this makes sense to document, i.e. change the javadoc to something like \"if there are no docs that match, the implementation can return null or DocIdSet.EMPTY_DOCIDSET.iterator()\"?\n\nCan you do this while changing the javadoc of EMPTY_DOCIDSET as well as the unnecessary import?",
            "date": "2009-07-27T11:46:17.681+0000",
            "id": 37
        },
        {
            "author": "Uwe Schindler",
            "body": "DONE! I hope this is the last commit for this issue :-)",
            "date": "2009-07-27T12:04:20.059+0000",
            "id": 38
        },
        {
            "author": "Michael McCandless",
            "body": "Phew, thanks guys!",
            "date": "2009-07-27T12:27:17.715+0000",
            "id": 39
        }
    ],
    "component": "core/search",
    "description": "Over in LUCENE-1614 Mike has made a comment about removing NonMatchinScorer from BS2, and return null in BooleanWeight.scorer(). I've checked and this can be easily done, so I'm going to post a patch shortly. For reference: https://issues.apache.org/jira/browse/LUCENE-1614?focusedCommentId=12715064&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12715064.\n\nI've marked the issue as 2.9 just because it's small, and kind of related to all the search enhancements done for 2.9.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1754",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Get rid of NonMatchingScorer from BooleanScorer2",
    "systemSpecification": true,
    "version": ""
}