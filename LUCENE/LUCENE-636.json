{
    "comments": [
        {
            "author": "Johan Stuyts",
            "body": "Patch which includes a class for the Lucene configuration and changes to existing classes so they use the configuration.",
            "date": "2006-07-27T08:39:43.000+0000",
            "id": 0
        },
        {
            "author": "Johan Stuyts",
            "body": "I just found out that the patch is incomplete. You can only specify the subclass of the SegmentReader class, but not the subclass of the MultiReader class. If your index contains multiple segments a MultiReader instead of the specified subclass of SegmentReader is created, and it is not possible to cast the returned IndexReader to the subclass of SegmentReader you specified in the LuceneConfig object.\n",
            "date": "2006-09-26T10:01:36.000+0000",
            "id": 1
        },
        {
            "author": "Ken Geis",
            "body": "I was able to work around this problem by using AspectJ to intercept calls to System.setProperty(..) and System.getProperty().  This is not a great solution.\n\nA side note...  Tomcat on Ubuntu ships with the security manager turned on by default, a strangely uncommon setting for servlet engine distributions.  The default security settings prevent a webapp from calling System.setProperty(..).\n\nIt would be nice if this got resolved sometime soon because once it is resolved, I need to wait for Compass to pick up the change downstream.  It looks like it may be a year until I don't need to worry about this issue any more.",
            "date": "2007-02-06T00:31:15.072+0000",
            "id": 2
        },
        {
            "author": "Otis Gospodnetic",
            "body": "We've moved away from using system properties.  I think there are only a couple of places in the code that still refer to system properties, and those are, I believe, depreated:\n\n$ ffjg System.getProp\n./org/apache/lucene/analysis/standard/ParseException.java:  protected String eol = System.getProperty(\"line.separator\", \"\\n\");\n./org/apache/lucene/index/SegmentReader.java:        System.getProperty(\"org.apache.lucene.SegmentReader.class\",\n./org/apache/lucene/queryParser/ParseException.java:  protected String eol = System.getProperty(\"line.separator\", \"\\n\");\n./org/apache/lucene/store/FSDirectory.java:  public static final String LOCK_DIR = System.getProperty(\"org.apache.lucene.lockDir\",\n./org/apache/lucene/store/FSDirectory.java:                                                           System.getProperty(\"java.io.tmpdir\"));\n./org/apache/lucene/store/FSDirectory.java:        System.getProperty(\"org.apache.lucene.FSDirectory.class\",\n./org/apache/lucene/store/FSDirectory.java:        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n./org/apache/lucene/util/Constants.java:  /** The value of <tt>System.getProperty(\"java.version\")<tt>. **/\n./org/apache/lucene/util/Constants.java:  public static final String JAVA_VERSION = System.getProperty(\"java.version\");\n./org/apache/lucene/util/Constants.java:  /** The value of <tt>System.getProperty(\"os.name\")<tt>. **/\n./org/apache/lucene/util/Constants.java:  public static final String OS_NAME = System.getProperty(\"os.name\");\n\n\nI'll close this as Won't Fix.",
            "date": "2007-04-05T01:50:19.233+0000",
            "id": 3
        },
        {
            "author": "Ken Geis",
            "body": "This is not going to be sufficient.  There are active code paths that still use System.getProperty(..).  For instance, the static initializers of FSDirectory and SegmentReader.\n\nIf I load up a Compass-based web app, and it uses an old version of Lucene that works off system properties, it will set the org.apache.lucene.SegmentReader.class property to use a Compass-specific segment reader.  Then in another web app that uses a current version of Lucene that has \"moved away from using system properties,\" the application will crash when it tries to load the SegmentReader class.",
            "date": "2007-04-05T03:24:06.742+0000",
            "id": 4
        },
        {
            "author": "Hoss Man",
            "body": "I think Ken is right, while most of the uses are for debugging or in legacy methods that have newer ways callers can specify the exact behavior they want programmaticly, these two do not, and warrant leaving the issue open (at the very least)...\n\n\n/org/apache/lucene/index/SegmentReader.java: System.getProperty(\"org.apache.lucene.SegmentReader.class\",\n./org/apache/lucene/store/FSDirectory.java: System.getProperty(\"org.apache.lucene.FSDirectory.class\",\n",
            "date": "2007-04-06T19:30:17.802+0000",
            "id": 5
        },
        {
            "author": "Mark Miller",
            "body": "Both of the properties Hoss mentioned are now deprecated - I think we can close this issue unless some new one has managed to pop up (I'm not aware of one myself)",
            "date": "2009-08-12T00:09:46.266+0000",
            "id": 6
        },
        {
            "author": "Ken Geis",
            "body": "I would not close this until the code is removed, not just its use deprecated.  Even if it is deprecated, I can write a new application with the code from svn trunk (as of right now,) and the SegmentReader or FSDirectory implementation can be overridden by an old application (in the same servlet container) that sets the system property.",
            "date": "2009-08-12T04:38:25.753+0000",
            "id": 7
        }
    ],
    "component": "",
    "description": "Currently Lucene can be configured using system properties. When running multiple 'instances' of Lucene for different purposes in the same JVM, it is not possible to use different settings for each 'instance'.\n\nI made changes to some Lucene classes so you can pass a configuration to that class. The Lucene 'instance' will use the settings from that configuration. The changes do not effect the API and/or the current behavior so are backwards compatible.\n\nIn addition to the changes above I also made the SegmentReader and SegmentTermDocs extensible outside of their package. I would appreciate the inclusion of these changes but don't mind creating a separate issue for them.\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-636",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "[PATCH] Differently configured Lucene 'instances' in same JVM",
    "systemSpecification": true,
    "version": "2.0.0"
}