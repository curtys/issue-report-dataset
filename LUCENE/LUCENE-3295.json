{
    "comments": [
        {
            "author": "Simon Willnauer",
            "body": "here is a simple patch and a test that at least exercise the code.",
            "date": "2011-07-08T14:03:32.256+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "good catch, just some thoughts looking at the test:\n\n* we should create a helper no-arg LTC.newIOContext() that uses LTC's random, or\n* should we need to actually pass IOcontext like this in tests explicitly?\n  or, should MDW randomize the IOContexts that it passes down to its wrapped Dir?\n",
            "date": "2011-07-08T14:30:25.103+0000",
            "id": 1
        },
        {
            "author": "Simon Willnauer",
            "body": "while those comments are really unrelated, how would you pass a randomized IOContext in the MDW? ignore the given one?\n\nI agree we should have a zero arg newIOContext()",
            "date": "2011-07-08T14:37:31.455+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "we can have a true/false setter on MDW (randomizeIOContexts), so we control if it respects the \ngiven one (e.g. tests that actually want to test IOContext works) or not.",
            "date": "2011-07-08T14:46:17.007+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Egads, thanks Simon!  I found a few more crazy problems with BitVector\n(patch attached, merged with the first patch), and added some asserts\nand a few more test cases.\n",
            "date": "2011-07-08T19:04:54.990+0000",
            "id": 4
        },
        {
            "author": "Simon Willnauer",
            "body": "thanks for resolving this mike",
            "date": "2011-07-11T09:36:19.017+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Thank you for catching that something was amiss in the first place ;)  That's the hardest part.",
            "date": "2011-07-11T12:40:41.868+0000",
            "id": 6
        }
    ],
    "component": "core/other",
    "description": "When writing cleared DGaps in BitVector we compare a byte against 0xFF (255) yet the byte is casted into an int (-1) and the comparison will never succeed. We should mask the byte with 0xFF before comparing or compare against -1",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3295",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "BitVector never skips fully populated bytes when writing ClearedDgaps",
    "systemSpecification": true,
    "version": "4.0-ALPHA"
}