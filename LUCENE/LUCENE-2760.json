{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "here's the patch, the SpanPositionCheckQuery now has logic similar to FilteredTermsEnum,\ninstead of returning a boolean true/false for whether a match is acceptable,\nit can return YES, NO, NO_AND_ADVANCE\n",
            "date": "2010-11-14T21:29:39.340+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "Admittedly, I don't yet have a good benchmarking setup for these spanqueries yet.\n\nBut from doing a quick test on a 125k doc corpus, the SpanFirstQuery on a common term like \"the\" took\nabout half the time.. this is because it read/evaluated 117,556 positions instead of 1,029,622 positions.\n",
            "date": "2010-11-14T21:44:49.230+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "here's an updated patch, with javadocs.\n\nadditionally i now check for spans.start() *>=* end() instead of spans.start() *>* end()\n\ni believe its invalid to have a zero-length span (e.g. for a single term end = start+1)\nI added an assert to check for this, and all tests still pass.\n",
            "date": "2010-11-14T22:21:36.398+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "I'd like to commit this soon if there are no objections.\n\nthese apis (SpanPositionCheckQuery) are new in 3.x/trunk so theres no backwards break\n",
            "date": "2010-11-15T16:16:15.998+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "Committed revision 1035397, 1035411 (3x)",
            "date": "2010-11-15T18:59:35.731+0000",
            "id": 4
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:16.782+0000",
            "id": 5
        }
    ],
    "component": "",
    "description": "SpanFirstQuery and SpanPositionRangeQuery (SpanFirst is just a special case of this), are currently inefficient.\n\nTake this worst case example: SpanFirstQuery(\"the\").\nCurrently the code reads all the positions for the term \"the\".\n\nBut when enumerating spans, once we have passed the allowable range we should move on to the next document (skipTo)\n ",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2760",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "optimize spanfirstquery, spanpositionrangequery",
    "systemSpecification": true,
    "version": ""
}