{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "here's the patch. i reverted my previous backwards break for the no-payloads optimization since this is actually faster overall.\n\nHere's standard codec (trunk). I've run this benchmark about 5 times to be sure.\n||Query||QPS trunk||QPS patch||Pct diff||\n|uni*|11.41|11.36|{color:red}-0.5%{color}|\n|unit*|20.57|20.47|{color:red}-0.5%{color}|\n|un*d|31.56|31.63|{color:green}0.2%{color}|\n|united~2.0|1.66|1.67|{color:green}0.5%{color}|\n|unit~1.0|5.21|5.23|{color:green}0.5%{color}|\n|unit~2.0|5.09|5.14|{color:green}0.9%{color}|\n|united~1.0|7.61|7.69|{color:green}1.0%{color}|\n|unit state|7.11|7.21|{color:green}1.3%{color}|\n|spanNear([unit, state], 10, true)|2.67|2.72|{color:green}2.0%{color}|\n|state|25.09|25.61|{color:green}2.1%{color}|\n|+nebraska +state|69.29|70.84|{color:green}2.2%{color}|\n|u*d|8.44|8.71|{color:green}3.2%{color}|\n|\"unit state\"|4.98|5.17|{color:green}3.8%{color}|\n|+unit +state|7.34|7.70|{color:green}4.8%{color}|\n|spanFirst(unit, 5)|10.27|11.35|{color:green}10.5%{color}|\n\nthe optimization is more important though for the methods like readInt (15% faster in my tests)\n",
            "date": "2010-12-19T11:46:21.684+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "+1, Thats a good idea overall: Always optimize the general case (buffer is large enough), and fallback if not",
            "date": "2010-12-19T11:52:37.867+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "sorry my math was off, the worst case is 4 extra checks (1028 total?)... but in general the buffer size default (1024)\nis large enough that this helps.\n",
            "date": "2010-12-19T11:54:25.906+0000",
            "id": 2
        },
        {
            "author": "Paul Elschot",
            "body": "Did you also try to catch out of bounds exceptions instead of doing the bounds checks in the current patch?",
            "date": "2010-12-19T11:58:11.175+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "bq. Did you also try to catch out of bounds exceptions instead of doing the bounds checks in the current patch?\n\nPaul, how can we do this? In the mmap case we can because the mmap getXXX will throw the bufferunderflow\nand not actually read anything if there isn't enough bytes.\n\nBut in this case I don't see how we can re-arrange the code to safely do this? \nif you know, please let us know as I think this would be better too.\n",
            "date": "2010-12-19T12:03:21.086+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "For the MMap case with *veeeery* large arrays, the cost of exception instantiation with stack trace is really small. I think for small buffer sizes like 1024 the overhead would be immense. But we should check this :-)\n\nAnother place where the checks were omitted and instead AIOOBE is catched is FieldCacheRangeFilter. This really helps there! But in that case FieldCache is always large :-)",
            "date": "2010-12-19T12:04:37.982+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "oh, i think i see your idea Paul... so in the special case when we refill() at the end of the file and we populate\nless than the buffers length, we just have to copy to a shorter array so this will work?\n",
            "date": "2010-12-19T12:13:17.397+0000",
            "id": 6
        },
        {
            "author": "Paul Elschot",
            "body": "Using bounds check would be possible when the array size equals the buffered size. But indeed this need not normally be the case.\nI'll take a closer look, it might be worthwhile to use a smaller array object when there is no more data available.\n",
            "date": "2010-12-19T12:13:31.504+0000",
            "id": 7
        },
        {
            "author": "Paul Elschot",
            "body": "You are obviously more familiar with the code than me :)",
            "date": "2010-12-19T12:15:03.149+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "well its slightly trickier to do it this way (e.g. slimming down the array in the very special case but restoring the fully sized one later in a future refill(), but potentially worthwhile... we should at least benchmark the exception idea, and see how it goes.\n",
            "date": "2010-12-19T12:24:05.015+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "And as said in my above comment, for buffer sizes like 1024 or in that area (even for 16384 or like that), the overhead of throwing the AIOOBE would be much higher (as the JVM needs to generate stack trace!!!). I would simply don't even think about that *g*.\n\nFor MMap the idea is fine because we normally have \"buffer\" sizes of 2^31th, where the AIOOBE / BufferUnderflowEx is veeeeeeeeeeeery seldom.",
            "date": "2010-12-19T12:26:18.755+0000",
            "id": 10
        },
        {
            "author": "Paul Elschot",
            "body": "It's too long ago that I had to deal with this tradeoff myself, so I'm taking a look here: http://www.javaspecialists.eu/archive/Issue187.html\n\"Cost of causing exceptions\" (2010-08-31).\n",
            "date": "2010-12-19T12:42:44.730+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nAnd as said in my above comment, for buffer sizes like 1024 or in that area (even for 16384 or like that), the overhead of throwing the AIOOBE would be much higher (as the JVM needs to generate stack trace!!!). I would simply don't even think about that g.\n{quote}\n\nOk, i looked into this and I think I agree with Uwe.\n\nI'm concerned about the JRE-specifics here too (cost of an exception, for example I ran all the tests on IKVM jvm the other day, \nand a wierd one failed due to this:\nhttp://weblog.ikvm.net/CommentView.aspx?guid=062e4506-89c4-488e-9104-59c1ec80007b\n\nSo, I think the optimization here (reducing checks on average) is safe, but I'm worried about going the exception route with\nsuch a small buffer... even if we could tweak it out to perform better on a sun JRE,\n",
            "date": "2010-12-19T12:46:15.830+0000",
            "id": 12
        },
        {
            "author": "Paul Elschot",
            "body": "In case I understood the javaspecialists article correctly, it could be faster to use AIOOBE but only when -XX:-OmitStackTraceInFastThrow is not used in the sun/oracle jvm. For the first few hundreds of exceptions from the same piece of code however it would always be slower.\n\nSince this depends on the JVM I'd rather keep the explicit bounds check in the code for now, and may be open a separate issue when it turns out to be faster to use AIOOBE.",
            "date": "2010-12-19T13:07:34.053+0000",
            "id": 13
        },
        {
            "author": "Robert Muir",
            "body": "Paul I agree with your sentiments, for this issue I'd like to stick with this patch as just a small step (reducing bounds checks on average).\n\nIn general, I think its probably the case we can improve our i/o (especially BufferedIndexInput) to be more efficient with\nthe int block codecs, don't hesitate to open more issues if there are ideas, I've definitely been testing a lot of crazy things, but\nthe others didn't pan out :)\n\n",
            "date": "2010-12-20T12:11:33.260+0000",
            "id": 14
        },
        {
            "author": "Paul Elschot",
            "body": "Do these performance comparison tests (posted on 19 December above) have a basic verification that each query returns the same result, for example a CRC on the matching docids and perhaps also a CRC on the score values?",
            "date": "2010-12-21T16:20:45.004+0000",
            "id": 15
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nDo these performance comparison tests (posted on 19 December above) have a basic verification that each query returns the same result, for example a CRC on the matching docids and perhaps also a CRC on the score values?\n{quote}\n\nYes, the performance benchmark I used originally came from Mike, it builds on contrib/benchmark, you can see it here: http://code.google.com/p/luceneutil/\n\nIt verifies as you suggested, and in fact has found bugs before that our tests don't find... which frustrates me about our unit tests!\n",
            "date": "2010-12-21T17:34:11.855+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "I'm seeing excellent gains w/ this patch, on Linux 64bit Java 6 NIOFSDir:\n\n||Query||QPS clean||QPS robspec||Pct diff||||\n|spanFirst(unit, 5)|16.67|15.62|{color:red}-6.3%{color}|\n|\"unit state\"|8.04|7.87|{color:red}-2.2%{color}|\n|spanNear([unit, state], 10, true)|4.31|4.25|{color:red}-1.2%{color}|\n|\"unit state\"~3|4.85|5.02|{color:green}3.6%{color}|\n|unit state|10.35|10.94|{color:green}5.7%{color}|\n|unit~1.0|9.60|10.15|{color:green}5.7%{color}|\n|unit~2.0|9.35|9.94|{color:green}6.3%{color}|\n|united~2.0|3.30|3.51|{color:green}6.4%{color}|\n|+nebraska +state|161.71|174.23|{color:green}7.7%{color}|\n|+unit +state|11.20|12.09|{color:green}8.0%{color}|\n|doctitle:.*[Uu]nited.*|3.93|4.25|{color:green}8.0%{color}|\n|united~1.0|15.12|16.39|{color:green}8.4%{color}|\n|un*d|49.33|56.09|{color:green}13.7%{color}|\n|u*d|14.85|16.97|{color:green}14.3%{color}|\n|state|25.95|30.12|{color:green}16.1%{color}|\n|unit*|22.72|26.88|{color:green}18.3%{color}|\n|uni*|12.64|15.20|{color:green}20.2%{color}|\n|doctimesecnum:[10000 TO 60000]|8.42|10.73|{color:green}27.4%{color}|\n\n+1 to commit.",
            "date": "2011-01-20T18:40:45.124+0000",
            "id": 17
        },
        {
            "author": "Robert Muir",
            "body": "Committed revision 1061619, 1061622",
            "date": "2011-01-21T04:17:55.932+0000",
            "id": 18
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:15.547+0000",
            "id": 19
        }
    ],
    "component": "",
    "description": "along the same lines as LUCENE-2816:\n* the readVInt/readVLong/readShort/readInt/readLong are not optimal here since they defer to readByte. for example this means checking the buffer's bounds per-byte in readVint instead of per-vint.\n* its an easy win to speed this up, even for the vint case: its essentially always faster, the only slower case is 1024 single-byte vints in a row, in this case we would do a single extra bounds check (1025 instead of 1024)\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2824",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "optimizations for bufferedindexinput",
    "systemSpecification": true,
    "version": "3.1, 4.0-ALPHA"
}