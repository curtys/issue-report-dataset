{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "Why do you need this?",
            "date": "2009-08-12T13:44:38.597+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "It makes delegation possible.  Say one wanted to create a new Tokenizer by wrapping an existing Tokenizer or TokenStream.",
            "date": "2009-08-12T13:49:04.828+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "OK, I was wondering, because TokenFilter is there for this pupose and TokenStream only provides the AttributeSource ctor because the TokenFilter subclass needs this. So one could also simply create a TokenFilter and put it ontop of the Tokenizer to wrap? new TokenFilter(new WrappedTokenizer())  - why need a Tokenizer for that when TokenFilter is made for it?\n\nBut for completeness, this ctor should also get the Reader/CharStream (as all other ctors have the Reader param).",
            "date": "2009-08-12T14:34:55.851+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. But for completeness, this ctor should also get the Reader/CharStream (as all other ctors have the Reader param).\n\nWouldn't tokenizer.reset(reader) serve the same purpose?  I'm not sure why all those different constructors are there.",
            "date": "2009-08-12T14:44:29.906+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "Normally it would be ok. E.g. in the reuse of TokenStreams, the simpliest would be to create the tokenizer with a null Reader first and only reset(Reader) it before first use. I think, this has historical reasons and to keep consistent we should add the ctors. Or deprecate all Reader ctors and state, that you should create a reusable Tokenizer and call reset(Reader).\n\nI am still not sure, why a simple TokenFilter does not serve the same pupose you would like to have with Tokenizer here. Why not simply wrap the Tokenizer with a TokenFilter that already has the possibility to delegate? If it is because you miss the reset(Reader) call, we could think about adding this to TokenFilter, that passes to the delegated Tokenizer (using instanceof checks).",
            "date": "2009-08-12T16:33:28.973+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "OO design principal of not removing functionality - Tokenizer's superclass can specify it's AttributeSource... why can't Tokenizer?  We shouldn't disallow it just because we can't immediately think of a use case.\n\nbq. I am still not sure, why a simple TokenFilter does not serve the same pupose you would like to have with Tokenizer here.\n\nSimplest case: a Tokenizer that delegates to an existing Tokenizer or TokenStream?",
            "date": "2009-08-12T16:42:12.275+0000",
            "id": 5
        },
        {
            "author": "Yonik Seeley",
            "body": "Committed.\n\nI'm not sure it's worth adding constructors for all combinations of parameters, esp when the trend is toward reuse, and specifying the reader separately - but I think that can be a different issue (whether to remove some of the existing constructors or not).",
            "date": "2009-08-12T19:04:41.135+0000",
            "id": 6
        }
    ],
    "component": "",
    "description": "One can't currently specify the attribute source for a Tokenizer like one can with any other TokenStream.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1804",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Can't specify AttributeSource for Tokenizer",
    "systemSpecification": true,
    "version": ""
}