{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "Patch for trunk, also with testcase. In tests.verbose=true it prints all stack traces, so simply try with Java 6 and Java 7.",
            "date": "2011-07-22T21:51:46.170+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Small cleanups in test and reflection.",
            "date": "2011-07-22T23:06:05.323+0000",
            "id": 1
        },
        {
            "author": "Hoss Man",
            "body": "Sweet!\n\nI am naively wondering if replacing this...\n\n{code}\nif (SUPPRESS_METHOD != null && exception != null && suppressed != null) {\n  ...\n}\n{code}\n\n...with this...\n\n{code}\nif (SUPPRESS_METHOD != null) {\n  if (exception != null && suppressed != null) {\n    ...\n  }\n}\n{code}\n\nwould help runtime bytecode optimizers (ie: HotSpot) to replace that method with an inline NOOP when that method doesn't exist?",
            "date": "2011-07-22T23:55:59.235+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nPatch for trunk, also with testcase. In tests.verbose=true it prints all stack traces, so simply try with Java 6 and Java 7.\n{quote}\n\nBut its not really a testcase: we don't run hudson on java 7, and because we aren't testing this version of java, I don't\nthink we should conditionalize code to use java7-only features that are totally untested.\n\nSo I'm totally against patches like this until this is addressed, sorry. Otherwise perhaps lucene is broken on java 7, and we don't even know until users tell us.\n",
            "date": "2011-07-23T08:48:53.791+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "http://www.freshports.org/java/openjdk7/",
            "date": "2011-07-23T08:58:11.628+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "sure, but until there is a hudson job running, testing this stuff on java7, I don't think we should commit patches like this.\n\nthis is the same argument i had about java 5 support (still untested to this day), it applies to java 7 equally.",
            "date": "2011-07-23T09:18:12.082+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "I am working on it, because Java 7 will come out on July 28th, and I want to be prepared on that.\n\nI would suggest that we add 2 more jobs for half hourly, that set an environment variable, so hudson-setting.sh uses another JDK.\n\nBy the way, javac 7.0 warns you when you compile code with -source 1.6 and you dont set another bootclasspath, something that missing since years (the problem with missing methods/classes used in your code, even if -source 1.6).",
            "date": "2011-07-23T09:25:21.652+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "...haven't tested @Override -source 1.5 violations...",
            "date": "2011-07-23T09:28:55.662+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\n...haven't tested @Override -source 1.5 violations...\n{quote}\n\nThat would be *really* nice if this worked somehow...",
            "date": "2011-07-23T09:32:28.301+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. would help runtime bytecode optimizers (ie: HotSpot) to replace that method with an inline NOOP when that method doesn't exist?\n\nThis may be a good idea if this code is performance critical. In that case its only exceuted when Exceptions are thrown and all is already f*cked up :-), so no need to optimize. For me the current code is more readable.\n\nI will keep this issue open until Oracle has fixed its HotSpot bug hopefully before the release of Java 7 (LUCENE-3335) and then commit once we have the Java7-Tasks running on Jenkins.",
            "date": "2011-07-24T10:41:33.628+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Here my final patch.",
            "date": "2011-07-24T10:42:32.441+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 1150405\nCommitted 3.x revision: 1150407",
            "date": "2011-07-24T15:26:07.667+0000",
            "id": 11
        }
    ],
    "component": "core/other",
    "description": "I was always against Java 6 support, as it brings no really helpful new features into Lucene. But there are several things that make life easier in coming Java 7 (hopefully on July 28th, 2011). One of those is simplier Exception handling and suppression on Closeable, called \"Try-With-Resources\" (see http://docs.google.com/View?id=ddv8ts74_3fs7483dp, by the way all Lucene classes support these semantics in Java 7 automatically, the cool try-code below would work e.g. for IndexWriter, TokenStreams,...).\n\nWe already have this functionality in Lucene since adding the IOUtils.closeSafely() utility (which can be removed when Java 7 is the minimum requirement of Lucene - maybe in 10 years):\n\n{code:java}\ntry (Closeable a = new ...; Closeable b = new ...) {\n  ... use Closeables ...\n} catch (Exception e) {\n  dosomething;\n  throw e;\n}\n{code}\n\nThis code will close a and b in an autogenerated finally block and supress any exception. This is identical to our IOUtils.closeSafely:\n\n{code:java}\nException priorException = null;\nCloseable a,b;\ntry (Closeable a = new ...; Closeable b = new ...) {\n  a = new ...;\n  b = new ...\n  ... use Closeables ...\n} catch (Exception e) {\n  priorException = e;\n  dosomething;\n} finally {\n  IOUtils.closeSafely(priorException, a, b);\n}\n{code}\n\nSo this means we have the same functionality without Java 7, but there is one thing that makes logging/debugging much nicer:\nThe above Java 7 code also adds maybe suppressed Exceptions in those Closeables to the priorException, so when you print the stacktrace, it not only shows the stacktrace of the original Exception, it also prints all Exceptions that were suppressed to throw this Exception (all Closeable.close() failures):\n\n{noformat}\norg.apache.lucene.util.TestIOUtils$TestException: BASE-EXCEPTION\n    at org.apache.lucene.util.TestIOUtils.testSuppressedExceptions(TestIOUtils.java:61)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n    at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n    at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1486)\n    at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1404)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n    at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:39)\n    at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:420)\n    at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:911)\n    at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:768)\n    Suppressed: java.io.IOException: TEST-IO-EXCEPTION-1\n            at org.apache.lucene.util.TestIOUtils$BrokenCloseable.close(TestIOUtils.java:36)\n            at org.apache.lucene.util.IOUtils.closeSafely(IOUtils.java:58)\n            at org.apache.lucene.util.TestIOUtils.testSuppressedExceptions(TestIOUtils.java:62)\n            ... 26 more\n    Suppressed: java.io.IOException: TEST-IO-EXCEPTION-2\n            at org.apache.lucene.util.TestIOUtils$BrokenCloseable.close(TestIOUtils.java:36)\n            at org.apache.lucene.util.IOUtils.closeSafely(IOUtils.java:58)\n            at org.apache.lucene.util.TestIOUtils.testSuppressedExceptions(TestIOUtils.java:62)\n            ... 26 more\n{noformat}\n\nFor this in Java 7 a new method was added to Throwable, that allows logging such suppressed Exceptions (it is called automatically by the synthetic bytecode emitted by javac). This patch simply adds this functionality conditionally to IOUtils, so it \"registers\" all suppressed Exceptions, if running on Java 7. This is done by reflection: once it looks for this method in Throwable.class and if found, it invokes it in closeSafely, so the exceptions thrown on Closeable.close() don't get lost.\n\nThis makes debugging much easier and logs all problems that may occur.\n\nThis patch does *not* change functionality or behaviour, it just adds more nformation to the stack trace in a Java-7-way (similar to the way how Java 1.4 added causes). It works here locally on Java 6 and Java 7, but only Java 7 gets the additional stack traces. For Java 6 nothing changes. Same for Java 5 (if we backport to 3.x).\n\nThis would be our first Java 7 improvement (a minor one). Next would be NIO2... - but thats not easy to do with reflection only, so we have to wait 10 years :-)",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3334",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "IOUtils.closeSafely should log suppressed Exceptions in stack trace of original Exception (a new feature of Java 7)",
    "systemSpecification": true,
    "version": ""
}