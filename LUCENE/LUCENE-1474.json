{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "Test case to reproduce issue.",
            "date": "2008-12-02T21:15:48.330+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Good catch!  Great test case... thanks Marcel.\n\nI'll commit the fix (to set pendingDeleteCount to 0 after flushing deletes) shortly.",
            "date": "2008-12-02T21:47:47.047+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Committed revision 722645.\n\nThanks Marcel!",
            "date": "2008-12-02T22:34:03.317+0000",
            "id": 2
        },
        {
            "author": "Marcel Reutegger",
            "body": "Are there any plans to release a 2.4.1? If yes, can this fix be included?",
            "date": "2008-12-03T12:59:36.142+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "There are no concrete plans / timing for a 2.4.1 release, but I think it's likely it'll eventually happen if we accumulate enough issues to backport.\n\nI'll reopen this & add 2.4.1 fix version so we don't lose track of it...",
            "date": "2008-12-03T13:42:14.287+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Committed revision 722964 on 2.4 branch.",
            "date": "2008-12-03T16:46:18.484+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Reopening for backport to 2.4.1.",
            "date": "2009-02-19T01:37:22.723+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Already backported to 2.4 branch.",
            "date": "2009-02-19T10:04:07.991+0000",
            "id": 7
        },
        {
            "author": "Erik van Zijst",
            "body": "For some time now we've been getting similar assertion errors on our development machines when running with assertions enabled (disabling them kills the assertion error and doesn't _appear_ to have any negative impact though).\n\nWe're running with lucene 2.4.1 and the unit test attached to this issue succeeds as expected, but our own code still appears to trigger a similar problem:\n\n     [java] ERROR - Problem processing revisions from repo https://studio.atlassian.com/svn/FE due to class java.lang.AssertionError - delete count mismatch: info=128 vs BitVector=126\n     [java] java.lang.AssertionError: delete count mismatch: info=128 vs BitVector=126\n     [java] \tat org.apache.lucene.index.SegmentReader.loadDeletedDocs(SegmentReader.java:405)\n     [java] \tat org.apache.lucene.index.SegmentReader.initialize(SegmentReader.java:368)\n     [java] \tat org.apache.lucene.index.SegmentReader.get(SegmentReader.java:306)\n     [java] \tat org.apache.lucene.index.SegmentReader.get(SegmentReader.java:228)\n     [java] \tat org.apache.lucene.index.MultiSegmentReader.<init>(MultiSegmentReader.java:55)\n     [java] \tat org.apache.lucene.index.DirectoryIndexReader$1.doBody(DirectoryIndexReader.java:104)\n     [java] \tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:653)\n     [java] \tat org.apache.lucene.index.DirectoryIndexReader.open(DirectoryIndexReader.java:115)\n     [java] \tat org.apache.lucene.index.IndexReader.open(IndexReader.java:316)\n     [java] \tat org.apache.lucene.index.IndexReader.open(IndexReader.java:216)\n     [java] \tat com.cenqua.fisheye.lucene.LuceneConnection.getReader(LuceneConnection.java:309)\n     [java] \tat com.cenqua.fisheye.lucene.LuceneConnection.withReaderAndDeletes(LuceneConnection.java:158)\n     [java] \tat com.cenqua.fisheye.rep.RepositoryIndexer.deleteDocuments(RepositoryIndexer.java:146)\n     [java] \tat com.cenqua.fisheye.rep.RepositoryIndexer.deleteContent(RepositoryIndexer.java:138)\n     [java] \tat com.cenqua.fisheye.rep.RepositoryScanner.deleteContent(RepositoryScanner.java:594)\n     [java] \tat com.cenqua.fisheye.rep.RepositoryScanner.indexContent(RepositoryScanner.java:578)\n     [java] \tat com.cenqua.fisheye.rep.RepositoryScanner.processContent(RepositoryScanner.java:432)\n     [java] \tat com.cenqua.fisheye.rep.RepositoryScanner.slurpRepository(RepositoryScanner.java:263)\n     [java] \tat com.cenqua.fisheye.rep.RepositoryScanner.slurp(RepositoryScanner.java:175)\n     [java] \tat com.cenqua.fisheye.rep.RepositoryScanner.ping(RepositoryScanner.java:108)\n     [java] \tat com.cenqua.fisheye.svn.SvnRepositoryEngine.doSlurp(SvnRepositoryEngine.java:68)\n     [java] \tat com.cenqua.fisheye.rep.ping.OneOffPingRequest.doRequest(OneOffPingRequest.java:30)\n     [java] \tat com.cenqua.fisheye.rep.ping.PingRequest.process(PingRequest.java:90)\n     [java] \tat com.cenqua.fisheye.rep.RepositoryHandle.processPingRequests(RepositoryHandle.java:119)\n     [java] \tat com.cenqua.fisheye.rep.RepositoryHandle.queuePingRequest(RepositoryHandle.java:109)\n     [java] \tat com.cenqua.fisheye.rep.ping.PingRequest.run(PingRequest.java:57)\n     [java] \tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)\n     [java] \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)\n     [java] \tat java.lang.Thread.run(Thread.java:613)\n\n\ncheers,\nErik\nAtlassian",
            "date": "2009-05-20T03:38:29.372+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "Erik, do you use undeleteAll?  I've found one path, using undeleteAll, that could cause this.",
            "date": "2009-05-20T10:31:59.208+0000",
            "id": 9
        },
        {
            "author": "Erik van Zijst",
            "body": "{quote}\nErik, do you use undeleteAll? I've found one path, using undeleteAll, that could cause this. \n{quote}\n\nNo, we don't call {{IndexReader.undeleteAll()}}.",
            "date": "2009-05-20T11:51:38.440+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "Are you able to run a modified Lucene JAR?  If so, I'd like to add an assert at the point when Lucene commits deletes so we can catch earlier when this happens.",
            "date": "2009-05-20T15:33:19.290+0000",
            "id": 11
        },
        {
            "author": "Erik van Zijst",
            "body": "Sure, I'd be happy to.",
            "date": "2009-05-20T23:29:39.303+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "OK, thanks.  Let's try this:\n{code}\nIndex: src/java/org/apache/lucene/index/SegmentReader.java\n===================================================================\n--- src/java/org/apache/lucene/index/SegmentReader.java\t(revision 768598)\n+++ src/java/org/apache/lucene/index/SegmentReader.java\t(working copy)\n@@ -592,6 +592,7 @@\n       \n       si.setDelCount(si.getDelCount()+pendingDeleteCount);\n       pendingDeleteCount = 0;\n+      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n     }\n     if (undeleteAll && si.hasDeletions()) {\n       si.clearDelGen();\n{code}\n\nHopefully you see that assert trip at some point \"interesting\" (ie, before the assert above).\n",
            "date": "2009-05-20T23:36:07.194+0000",
            "id": 13
        },
        {
            "author": "Erik van Zijst",
            "body": "Should that be applied to tags/lucene_2_4_1 or trunk (the svn revision numbers don't seem to match those from your patch)?",
            "date": "2009-05-21T00:23:52.460+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "Sorry, 2.4.1",
            "date": "2009-05-21T00:42:58.614+0000",
            "id": 15
        },
        {
            "author": "Erik van Zijst",
            "body": "Running with the patch applied doesn't seem to have changed anything. Is it possible the damage to the index has already been done at this point?\n\nNote that I'm running lucene on large index files that were taken from our production servers. We've never seen these exception on these production servers, but then they do not run with assertions enabled. Using these copied index files (safely copied while the product was not running) on development machines consistently triggers this problem. I've not regenerated the entire index on the development machine, for that would be hugely impractical.\n",
            "date": "2009-05-21T01:08:23.209+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "Yes, the damage once done will remain in the index.\n\nThis new assert will only trip if the index is recreated, ie when a segment is first written with the wrong count.\n\nCan you run CheckIndex on your index and report back?  I'm curious how many segments show the wrong delete count, and how much the counts are off.",
            "date": "2009-05-21T09:31:38.254+0000",
            "id": 17
        },
        {
            "author": "Michael McCandless",
            "body": "Was the index at least partially generated with 2.4.0?  Or was it entirely generated with 2.4.1?",
            "date": "2009-05-21T09:42:34.336+0000",
            "id": 18
        },
        {
            "author": "Erik van Zijst",
            "body": "I have attached the output of CheckIndex on all our index directories, which seems to report quite a few errors:\n\nerik:cache ervzijst$ grep \"CorruptIndexException\\|AssertionError\" CheckIndex.txt \njava.lang.AssertionError: delete count mismatch: info=1263 vs BitVector=1262\njava.lang.AssertionError: delete count mismatch: info=496 vs BitVector=493\njava.lang.AssertionError: delete count mismatch: info=101 vs BitVector=100\njava.lang.AssertionError: delete count mismatch: info=300 vs BitVector=298\njava.lang.AssertionError: delete count mismatch: info=109 vs BitVector=108\njava.lang.AssertionError: delete count mismatch: info=140 vs BitVector=139\njava.lang.AssertionError: delete count mismatch: info=122 vs BitVector=121\njava.lang.AssertionError: delete count mismatch: info=91 vs BitVector=89\njava.lang.AssertionError: delete count mismatch: info=1411 vs BitVector=1409\njava.lang.AssertionError: delete count mismatch: info=801 vs BitVector=800\njava.lang.AssertionError: delete count mismatch: info=630 vs BitVector=629\njava.lang.AssertionError: delete count mismatch: info=510 vs BitVector=508\norg.apache.lucene.index.CorruptIndexException: doc counts differ for segment _0: fieldsReader shows 12365 but segmentInfo shows 12232\norg.apache.lucene.index.CorruptIndexException: doc counts differ for segment _1: fieldsReader shows 10144 but segmentInfo shows 8766\norg.apache.lucene.index.CorruptIndexException: doc counts differ for segment _2: fieldsReader shows 4616 but segmentInfo shows 7006\norg.apache.lucene.index.CorruptIndexException: doc counts differ for segment _3: fieldsReader shows 6681 but segmentInfo shows 4854\norg.apache.lucene.index.CorruptIndexException: doc counts differ for segment _4: fieldsReader shows 2652 but segmentInfo shows 8808\norg.apache.lucene.index.CorruptIndexException: doc counts differ for segment _5: fieldsReader shows 11500 but segmentInfo shows 14551\norg.apache.lucene.index.CorruptIndexException: doc counts differ for segment _6: fieldsReader shows 16225 but segmentInfo shows 4375\nerik:cache ervzijst$\n\nP.S.\nThe full log is attached as CheckIndex.txt\n",
            "date": "2009-05-21T23:46:56.606+0000",
            "id": 19
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Erik.  Can you answer my other questions?",
            "date": "2009-05-22T13:51:17.379+0000",
            "id": 20
        },
        {
            "author": "Adrian Hempel",
            "body": "Hi Michael,\n\nThe index that Erik was working with contained segments created with a pre-2.4.1 version of Lucene, so we don't believe this is a regression.\n\nRegards,\nAdrian",
            "date": "2009-06-15T07:15:49.662+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "OK that's good news: the bug is fixed in 2.4.1, but since your index had segments from before 2.4.1, it had the bug \"cached\".",
            "date": "2009-06-15T10:48:55.447+0000",
            "id": 22
        }
    ],
    "component": "core/index",
    "description": "When deleted documents are flushed using IndexReader.flush() the delCount in SegmentInfo is updated based on the current value and SegmentReader.pendingDeleteCount (introduced by LUCENE-1267). It seems that pendingDeleteCount is not reset after the commit, which means after a second flush() or close() of an index reader the delCount in SegmentInfo is incorrect. A subsequent IndexReader.open() call will fail with an error when assertions are enabled. E.g.:\n\njava.lang.AssertionError: delete count mismatch: info=3 vs BitVector=2\n\tat org.apache.lucene.index.SegmentReader.loadDeletedDocs(SegmentReader.java:405)\n[...]",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-1474",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Incorrect SegmentInfo.delCount when IndexReader.flush() is used",
    "systemSpecification": true,
    "version": "2.4"
}