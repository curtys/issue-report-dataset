{
    "comments": [
        {
            "author": "Dawid Weiss",
            "body": "I've implemented this invariant and it works like a charm. Did you know TimeZone.getDefault() has a side-effect of setting (!) user.timezone system property? If you did, I'll buy you a beer next time we meet :)\n\nAnyway, lots of Solr tests leave behind system properties. Instead of trying to fix them one by one I went kind of the easy route and created a class and test rule that simply reverts all system properties from before the entry scope. This has been applied to AbstractSolrTestCase and SolrTestCaseJ4 and since these are subclasses of LuceneTestCase, the invariant will always hold, no matter what.\n\nIf Solr folks wish to fix tests one by one (which may be a good idea or a bad idea -- there's lots of them), then comment out these two:\n{code}\n  @ClassRule\n  public static TestRule solrClassRules = \n    RuleChain.outerRule(new SystemPropertiesRestoreRule());\n\n  @Rule\n  public TestRule solrTestRules = \n    RuleChain.outerRule(new SystemPropertiesRestoreRule());\n{code}",
            "date": "2012-03-04T21:21:31.075+0000",
            "id": 0
        },
        {
            "author": "Dawid Weiss",
            "body": "Patch with changes.",
            "date": "2012-03-04T21:42:20.462+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "+1\n\nProperties implements java.util.Map<Object,Object>, clone as Map can simply be a \"new WhateverMap(System.getProperties())\". Although it's <Object,Object>, it should only contain Strings... Can we be sure?",
            "date": "2012-03-04T22:03:39.454+0000",
            "id": 2
        },
        {
            "author": "Dawid Weiss",
            "body": "I don't know, to be honest. I didn't want to experiment because I remember being scalded at some point in my past when I used Map interface to manipulate system properties and in certain circumstances things didn't work as they should. I can't remember the details now, unfortunately.\n\nAs for non Strings and nulls -- I assume only System.setProperty/clearProperty is used to manipulate the map; if so, it should only contain Strings and it should have non-null keys and values.",
            "date": "2012-03-04T22:13:20.690+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. I don't know, to be honest. I didn't want to experiment because I remember being scalded at some point in my past when I used Map interface to manipulate system properties and in certain circumstances things didn't work as they should. I can't remember the details now, unfortunately.\n\nFor copying you are already using the map interface (retrieving entrySet). For read access this is not a problem, but the whole Java API implementing Map is broken. Implementing the Map interface, which allows to put Object keys/values is unfortunately a no-go. But doing \"new TreeMap<String,String>((Map<String,String>) properties)\" is fine (with SuppressWarnings because of the cast) - because the putAll method of TreeMap is implemented exactly as your loop.",
            "date": "2012-03-04T23:48:22.396+0000",
            "id": 4
        },
        {
            "author": "Dawid Weiss",
            "body": "Yeah, I know. I actually felt bad about entrySet too -- I think the safest way would be to use enumeration, but it felt ancient. I'll leave as is if you don't mind. It's a bit more explicit, but won't hurt anybody I think.\n",
            "date": "2012-03-05T07:46:34.503+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "I don't mind, I think it's fine. But I had the same problem like you when I used the Properties class, it always feels bad and some things are not working at all.\n\nThis comment in Javadocs for public Set<String> stringPropertyNames() makes me nervous, too:\n\n{quote}\nReturns a set of keys in this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list. Properties whose key or value is not of type String are omitted.\nThe returned set is not backed by the Properties object. Changes to this Properties are not reflected in the set, or vice versa.\nReturns:\na set of keys in this property list where the key and its corresponding value are strings, including the keys in the default property list.\nSince:\n1.6\n{quote}\n\nThis method is available since Java 6, so this would be the \"most correct\" solution. Retrieve the set, iterate via advanced for-loop and use getProperty(). But that does not work for Lucene 3.x.",
            "date": "2012-03-05T07:56:34.469+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "As far as I remember, the main problem with the Map interface in Properties is the values coming from the parent \"defaults\" object. When you wrap another properties object with one that has the other one as \"defaults\" given in ctor, then your are fcked up if you are using the Map interface. Which is not the case for system properties, but that's not guaranteed (e.g. the Java JVM could set some basic properties in another Properties object and make the changes available only through the overlayed properties object).\n\nTo fix the \"defaults\" problem I would go with the Enumeration<?> (works in Java 5, too) in a \"for(Enumeration<?> e=propertyNames(); e.hasMoreElements();)\" loop.\n\nIf you use the Set interface, the inherited props would not have been seen and the system may *delete* properties which are in a parent/\"defaults\" properties object.",
            "date": "2012-03-05T08:06:42.091+0000",
            "id": 7
        },
        {
            "author": "Dawid Weiss",
            "body": "Yeah, it might have been that that I experienced. So back to enumeration we go :(",
            "date": "2012-03-05T08:12:44.697+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "About your commit: It should be getProperty() [without cast] and not get()... Otherwise the defaults are again fcked up :-)",
            "date": "2012-03-05T08:30:20.210+0000",
            "id": 9
        },
        {
            "author": "Dawid Weiss",
            "body": "Right, good catch. Properties are seriously messed up, aren't they?",
            "date": "2012-03-05T08:32:49.488+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "Horrible!!! I just say: die, die, die",
            "date": "2012-03-05T08:38:29.893+0000",
            "id": 11
        },
        {
            "author": "Dawid Weiss",
            "body": "Now I remember what it was that I had a problem with. Properties has the notion of \"defaults\" so it falls back to another Properties by default if the key is not present. Unfortunately get() is not overridden in Properties (and everything else is) so things like propertyNames or getProperty will return a value from the fallback set, but get() won't.\n{code}\n  public static void main(String[] args) {\n    Properties defaults = new Properties();\n    Properties p = new Properties(defaults);\n    String key = \"custom-key\";\n    String value = \"value\";\n    defaults.put(key, value);\n    for (Enumeration<?> e = p.propertyNames(); e.hasMoreElements();) {\n      Object currentKey = e.nextElement();\n      if (currentKey == key) {\n        System.out.println(\"Default key found in propertyNames(), but...\");\n        System.out.println(\"p.get()=\" + p.get(key));\n        System.out.println(\"p.getProperty()=\" + p.getProperty(key));\n      }\n    }\n  }\n{code}\nYou can easily corrupt other programs by inserting Object values into the system property set -- any enumeration will then fail with a classcast. Still don't remember where this caused a problem but it definitely was.",
            "date": "2012-03-05T08:53:29.981+0000",
            "id": 12
        },
        {
            "author": "Dawid Weiss",
            "body": "bq. As far as I remember, the main problem with the Map interface in Properties is the values coming from the parent \"defaults\" object. \n\nExactly, I'm kind of slow today.",
            "date": "2012-03-05T08:54:19.443+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "No prob. That is exactly the problem I wanted to prevent with the Enumeration and getProperty(). Code using those 2 functions is the only correct one to list all properties... :(",
            "date": "2012-03-05T09:03:29.448+0000",
            "id": 14
        },
        {
            "author": "Mark Miller",
            "body": "This is great Dawid, thanks!",
            "date": "2012-03-05T14:07:41.831+0000",
            "id": 15
        },
        {
            "author": "Robert Muir",
            "body": "Strangely i trip the timezone issue when running any solr tests from Eclipse... but not lucene tests?\n\nE.g. if i run TestDemo from lucene its fine, but if i run TestRussianFilter (org.apache.solr.analysis) then i hit:\n\n{noformat}\njava.lang.AssertionError: System properties invariant violated.\nDifferent values:\n  [old]user.timezone=\n  [new]user.timezone=America/New_York\n\n\tat org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:46)\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:18)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n{noformat}\n\n",
            "date": "2012-03-22T14:15:18.195+0000",
            "id": 16
        },
        {
            "author": "Dawid Weiss",
            "body": "Well... something is changing it, the question is what it is. I'll take a look.",
            "date": "2012-03-22T16:50:43.907+0000",
            "id": 17
        },
        {
            "author": "Dawid Weiss",
            "body": "I know what's changing it. Eh. So -- there is a warning being printed:\n{noformat}\nMar 22, 2012 6:20:33 PM org.apache.solr.core.Config parseLuceneVersionString\nWARNING: You should not use LUCENE_CURRENT as luceneMatchVersion property: if you use this setting, and then Solr upgrades to a newer release of Lucene, sizable changes may happen. If precise back compatibility is important then you should instead explicitly specify an actual Lucene version.\nMar 22, 2012 6:20:33 PM org.apache.solr.analysis.BaseTokenStreamFactory warnDeprecated\nWARNING: RussianLetterTokenizerFactory is deprecated. Use StandardTokenizerFactory instead.\n{noformat}\n\nThese warnings go through Java logging and this in turn is localized (date format, \"warning\" info, etc.). This in turn asks for the default TimeZone and this in turn sets the system property (I mentioned it a while ago).\n\nI suggest that we just ignore user.timezone as it is triggered from multiple locations and doesn't seem that important?\n\n",
            "date": "2012-03-22T17:23:48.799+0000",
            "id": 18
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nI suggest that we just ignore user.timezone as it is triggered from multiple locations and doesn't seem that important?\n{quote}\n\n+1, we know its a side effect of our testcase itself randomizing the locale/timezone...",
            "date": "2012-03-22T17:27:32.519+0000",
            "id": 19
        },
        {
            "author": "Dawid Weiss",
            "body": "Applied a fix for this. user.timezone is ignored (and is not reset).",
            "date": "2012-03-22T20:34:06.130+0000",
            "id": 20
        },
        {
            "author": "Robert Muir",
            "body": "Thanks Dawid... these tests are now working in my IDE",
            "date": "2012-03-22T21:42:35.935+0000",
            "id": 21
        }
    ],
    "component": "general/test",
    "description": "- fail the test if changes have been detected.\n- revert the state of system properties before the suite.\n- cleanup after the suite.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3847",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "LuceneTestCase should check for modifications on System properties",
    "systemSpecification": true,
    "version": ""
}