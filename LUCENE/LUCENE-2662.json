{
    "comments": [
        {
            "author": "Jason Rutherglen",
            "body": "We need unit tests and a base implementation as BytesHash is abstract...",
            "date": "2010-09-22T06:24:32.285+0000",
            "id": 0
        },
        {
            "author": "Jason Rutherglen",
            "body": "The current hash implementation needs to be separated out of TermsHashPerField.  ",
            "date": "2010-09-22T14:54:03.969+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "Jason: I am confused... there is no hash impl in TermsHashPerField.\n\nthe hashing, and term encoding and other things, is the responsibility of the analysis chain (TermToBytesRefAttribute):\n{code}\n    // Get the text & hash of this term.\n    int code = termAtt.toBytesRef(utf8);\n{code}\n\nthis way, implementations can 'hash-as-they-go' like we do when encoding unicode char[] -> byte[],\nor they can simply return BytesRef.hashCode() if they don't have an optimized implementation.\n",
            "date": "2010-09-22T15:05:30.436+0000",
            "id": 2
        },
        {
            "author": "Jason Rutherglen",
            "body": "The THPF is hashing tokens for use in the indexing RAM buffer and the creation of postings, ie, the lookup of term byte[]s to term ids.  The hash component is currently interwoven into THPF.  \n\nHere's some of the variables being used in THPF.\n\n{code}\nprivate int postingsHashSize = 4;\nprivate int postingsHashHalfSize = postingsHashSize/2;\nprivate int postingsHashMask = postingsHashSize-1;\nprivate int[] postingsHash;\n{code}\n\nAlso there's the methods rehashPostings, shrinkHash, postingEquals, and add(int textStart) has the lookup.  \n\nWe'll probably also need to separate out the quick sort implementation in THPF, I'll add that to this issue.",
            "date": "2010-09-22T15:33:07.932+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "Jason: what I am saying is if i look at the method in your patch:\n\npublic T add(BytesRef bytes)\n\nthe first thing it does is compute the hash, but this is already computed in the analysis chain.\n\nwhy not have\n{code}\npublic T add(BytesRef bytes, int hashCode)\n{code}\n\nand also:\n{code}\npublic T add(BytesRef bytes) {\n  return add(bytes, bytes.hashCode());\n}\n{code}\n\nthen we can avoid computing this twice, and keep the optimization in UnicodeUtil\n",
            "date": "2010-09-22T15:52:15.883+0000",
            "id": 4
        },
        {
            "author": "Jason Rutherglen",
            "body": "Ah, ok, I didn't write this code, I extracted it from LUCENE-2186, and nice, you reviewed it can be improved.  I'll make changes to it shortly, hopefully.",
            "date": "2010-09-22T16:00:24.369+0000",
            "id": 5
        },
        {
            "author": "Simon Willnauer",
            "body": "jason, can you please hold off with this since I have newer / different versions of this class already with tests etc. I understand that you need that class but creating all these issues and rushing ahead is rather counter productive.\n\n@Robert: this class is standalone in this patch and doesn't know about the analysis chain. But thanks for the comments I will incorporate them.\n\nsimon",
            "date": "2010-09-22T16:05:45.603+0000",
            "id": 6
        },
        {
            "author": "Jason Rutherglen",
            "body": "Simon, when do you think you'll be posting?",
            "date": "2010-09-22T16:10:43.972+0000",
            "id": 7
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Simon, when do you think you'll be posting?\n\nmaybe within the next week I have a busy schedule but does this patch keep you from doing any work? You shouldn't just pull out stuff from 1 month old patches especially as you don't even give me time to reply on the orig. discussion. \n\nAny rush on this?",
            "date": "2010-09-22T16:18:00.105+0000",
            "id": 8
        },
        {
            "author": "Jason Rutherglen",
            "body": "It'd be nice to get deletes working, ie, LUCENE-2655 and move forward in a way that's useful long term.  What changes have you made?",
            "date": "2010-09-22T16:29:26.442+0000",
            "id": 9
        },
        {
            "author": "Simon Willnauer",
            "body": "This patch contains a slightly different version of BytesHash (renamed it to BytesRefHash but that is to be discussed - while writing this I actually think BytesHash is the better name).  BytesRefHash is now final and does not create Entry objects anymore. Internally it maintains two integer arrays one acting as the hash buckets and the other one contain the bytes-start offset in the ByteBlockPool. Each added entry is assigned to an increasing ordinal since this is what Entry is used in almost all use-cases (in CSF though). For TermsHashPerField this is also \"native\" since is uses the same kind of referencing system.\n\nThese changes keep this class as efficient as possible, keeping GC costs low and allows JIT to do better optimizations. IMO this class is super performance critical and since we recently refactored indexing towards parallel arrays adding another \"object\" array might not be the way to go anyway.\n\nI also incorporated robers comments - thanks for the review anyway. I guess that is the first step towards factoring it out of TermsHashPerField, the next question is are we gonna do that in a different issue and get this committed first?\n\ncomments / review welcome!!\n\nOne more thing, I did not move ByteBlockPool to o.a.l.utils but I thing it belongs there, thoughts?",
            "date": "2010-09-24T12:42:04.721+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "bq. I guess that is the first step towards factoring it out of TermsHashPerField, the next question is are we gonna do that in a different issue and get this committed first?\n\nI think it would be better if this class were used in the patch... i wouldn't commit it by itself unused. Its difficult for people to review its behavior, since its just a standalone unused thing (for instance, the hashCode thing i brought up)\n",
            "date": "2010-09-24T12:48:33.896+0000",
            "id": 11
        },
        {
            "author": "Jason Rutherglen",
            "body": "> BytesRefHash is now final and does not create Entry objects anymore\n\nThat's good.\n\n> move ByteBlockPool to o.a.l.utils\n\nSure why not.\n\n> factoring it out of TermsHashPerField, the next question is are we gonna do that in a different issue and get this committed first?\n\nWe need to factor it out of THPF otherwise this patch isn't really useful for committing.  Also, it'll get tested through the entirety of the unit tests, ie, it'll get put through the laundry.  ",
            "date": "2010-09-24T14:25:16.061+0000",
            "id": 12
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. We need to factor it out of THPF otherwise this patch isn't really useful for committing. Also, it'll get tested through the entirety of the unit tests, ie, it'll get put through the laundry.\n\nYeah, lets see this as the first baby step towards it. I will move ByteBockPool to o.a.l.utils and start cutting THPF over to it. We need to do benchmarking in any case just to make sure JIT doesn't play nasty tricks with us again.\n\nsimon",
            "date": "2010-09-24T14:40:00.606+0000",
            "id": 13
        },
        {
            "author": "Jason Rutherglen",
            "body": "bq. make sure JIT doesn't play nasty tricks with us again.\n\nWhat would we do if this happens?",
            "date": "2010-09-24T16:28:43.025+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good Simon -- some ideas:\n\n\n\n  * In the class jdocs, I think state that this is basically a\n    Map<BytesRef,int>?\n\n  * Maybe we also move ByteBlockPool --> oal.util?\n\n  * Maybe move out the ByteBlockAllocator to its own class (in util)?\n    RecyclingByteBlockAllocator?\n\n  * Can we have DocumentsWriter share the ByteBlockAllocator?  (Right\n    now it's dup'd code since DW also implements this).\n\n  * Maybe rename ords -> keys?  And hash -> values?  (The key isn't\n    really an \"ord\" (I think?) because it increases by more than 1\n    each time... it's more like an address since it references an\n    address in the byte-pool space).\n\n  * We should advertise the limits in the jdocs -- limited to <= 2GB\n    total byte storage, each key must be <= BLOCK SIZE-2 in length.\n\n  * Can we have sortedEntries() not allocate a new iterator object?\n    Ie, just return the sorted bytesStart int[]?  (This is what's done\n    today, and, for term vectors on small docs, this method is pretty\n    hot).  And the javadocs for this should be stronger -- it's not\n    that the behaviour is undefined after, it's that you must .clear()\n    after you're done consume the sorted entries.\n",
            "date": "2010-09-24T19:52:40.515+0000",
            "id": 15
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nbq. make sure JIT doesn't play nasty tricks with us again.\n\nWhat would we do if this happens?\n{quote}\n\nCry?\n\nOr... install Harmony and see if it has the same problem and if so submit a patch to them to fix it :)",
            "date": "2010-09-24T19:54:13.173+0000",
            "id": 16
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. In the class jdocs, I think state that this is basically a Map<BytesRef,int>?\nyeah that simplifies it - will do.\n\nbq. Maybe we also move ByteBlockPool --> oal.util?\nyeah I did that already - that makes totally sense\n\nbq. Maybe move out the ByteBlockAllocator to its own class (in util)? RecyclingByteBlockAllocator?\n+1 yeah I like that - I also think we should allow to pass the blockpool to the byteshash instead of the allocator. From what I can tell now I think this is necessary for the refactoring anyway since we share pools with secondary TermsHash instances in the termvector case.\n\n{quote}\nMaybe rename ords -> keys? And hash -> values? (The key isn't\nreally an \"ord\" (I think?) because it increases by more than 1\neach time... it's more like an address since it references an\naddress in the byte-pool space).\n{quote}\nyeah that depends how you see it - the array index really is the ord though. but I like those names. I will change.\n\n{quote}\nWe should advertise the limits in the jdocs - limited to <= 2GB\ntotal byte storage, each key must be <= BLOCK SIZE-2 in length.\n{quote}\nI think I have done the latter already but I will add the other too.\n\n{quote}\nCan we have sortedEntries() not allocate a new iterator object?\nIe, just return the sorted bytesStart int[]? (This is what's done\ntoday, and, for term vectors on small docs, this method is pretty\nhot). And the javadocs for this should be stronger - it's not\nthat the behaviour is undefined after, it's that you must .clear()\nafter you're done consume the sorted entries.\n{quote}\nAh I see - good point. I think what you refer to is   public int[] sort(Comparator<BytesRef> comp) - the iterator one is just more convenient one. I will change though.\n\nthanks mike!",
            "date": "2010-09-24T20:07:17.264+0000",
            "id": 17
        },
        {
            "author": "Simon Willnauer",
            "body": "Attaching my current state for feedback and iteration.\n\n* factored out ByteBlockAllocator from DocumentsWriter\n* moved ByteBlockPool to o.a.l.util\n* added RecyclingByteBlockAllocator which can be used with or without synchronization. IMO the DummyConcurrentLock will be optimized away so that his might be super low cost. - feedback for that would more than welcome. \n* addressed all the comments from mike - thanks again\n* added more tests\n* cut over constants from DocumentsWriter to ByteBlockPool\n\nTermsHashPerField is next.... feedback welcome.\n\nsimon",
            "date": "2010-09-25T18:48:35.306+0000",
            "id": 18
        },
        {
            "author": "Jason Rutherglen",
            "body": "An API change to BBP that would be useful is instead of passing in the \"size in bytes\" to newSlice, it'd be more useful if the level and/or the size were passed in.  In fact, throughout the codebase, a level, specifically the first, is all that is passed into the newSlice method.  The utility of this change is, I'm recording the level of the last slice for the skip list in LUCENE-2312.",
            "date": "2010-09-25T22:43:23.840+0000",
            "id": 19
        },
        {
            "author": "Jason Rutherglen",
            "body": "Simon, the patch looks like it's ready for the next stage, ie, TermsHashPerField deparchment.  ",
            "date": "2010-09-26T23:50:46.873+0000",
            "id": 20
        },
        {
            "author": "Simon Willnauer",
            "body": "We are almost there. I factored out ByteRefHash out of TermsHashPerField just having two \"nocommit\" parts left in the code I need to find a solution for. \n\n* there needs to be a way to communicate the byte usage up to DocumentsWriter which I haven't explored yet\n* textStarts in ParallelPostingsArray needs to be replaced since it is already maintained in ByteRefHash. I will need to look closer into that but suggestions are welcome. One way to do it would be to attach a reference to BRH instead of the textStart - but that is a naive suggestion since I haven't looked into that in more detail.\n\nAll tests are passing so far and TermsHashPerField looks somewhat cleaner. I will work on fixing those nocommits and run some indexing perf test against the patch. \n\n",
            "date": "2010-09-27T06:03:57.328+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nbq. Maybe rename ords -> keys? And hash -> values? (The key isn't really an \"ord\" (I think?) because it increases by more than 1 each time... it's more like an address since it references an address in the byte-pool space).\n\nyeah that depends how you see it - the array index really is the ord though. but I like those names. I will change.\n{quote}\n\nDuh, I agree -- the new names are confusing!!  Sorry.  I was\nconfused... you are right that what's now called \"keys\" are in fact\nreally ords!  They are always incr'd by one, on adding a new one.\n\nHow about renaming key back to ord?  And then maybe rename values to\nbytesStart?  And in their decls add comments saying they are indexed\nby hash code?  And maybe rename addByOffset -> addByBytesStart?\n\n\n  * On the nocommit in ByteBlockPool -- I think that's fine?  It's an\n    internal class....\n\n  * The nocommit in BytesRefHash seems wrong?  (Ie, compact is used\n    internally)... though maybe we make it private if it's not used\n    externally?\n\n  * On the \"nocommit factor this out!\" in THPF.java... I agree, the\n    postingsArray.textStarts should go away right?  Ie, it's a\n    [wasteful] copy of what the BytesRefHash is already storing?\n\n  * Can we impl BytesRefHash.bytesUsed as an AtomicLong (hmm maybe\n    AtomicInt -- none of these classes can address > 2GB)?  Then the\n    pool would add in blockSize every time it binds a new block.  That\n    method (DW.bytesUsed) is called *alot* -- at least once on every\n    addDoc.\n\n  * I'm confused again -- when do we use RecyclingByteBlockAllocator\n    from a single thread...?  Ie, why did the sync need to be\n    conditional for this class, again....?  It seems like we always\n    need it sync'd (both the main pool & per-doc pool need this)?  If\n    so we can simplify and make these methods sync'd?\n    \n",
            "date": "2010-09-28T10:31:11.418+0000",
            "id": 22
        },
        {
            "author": "Simon Willnauer",
            "body": "{quote}\nHow about renaming key back to ord? And then maybe rename values to\nbytesStart? And in their decls add comments saying they are indexed\nby hash code? And maybe rename addByOffset -> addByBytesStart?\n{quote}\nI don't like addByBytesStart I would like to keep offset since it really is an offset into the pool. addByPoolOffset?\nThe names ord and bytesStart are a good compromise :) lets shoot for that.\n\n\n{quote}\nOn the nocommit in ByteBlockPool - I think that's fine? It's an\ninternal class....\n{quote}\nyou refer to this: // nocommit - public arrays are not nice! ?\nyeah that more of an style thing but if somebody changes them its their fault for being stupid I guess.\n\n{quote}\nThe nocommit in BytesRefHash seems wrong? (Ie, compact is used\ninternally)... though maybe we make it private if it's not used\nexternally?\n{quote}\n\nAh yeah thats bogus - its from a previous iteration which was wrong as well, I will remove.\n\n{quote}\nOn the \"nocommit factor this out!\" in THPF.java... I agree, the\npostingsArray.textStarts should go away right? Ie, it's a\n[wasteful] copy of what the BytesRefHash is already storing?\n{quote}\nYeah that is the reason for that nocommit. Yet, I though about this a little and I have two options for this.\n * we could factor out a super class from ParallelPostingArray which only has the textStart int array, the grow and copy method and let ParallelPostingArray subclass it.\nBytesRefHash would accept this class, don't have a good name for it but lets call it TextStartArray for now, and use it internally. It would call grow() once needed inside BytesRefHash and all the other code would be unchanged since PPA is a subclass. \n* the other way would be to bind the ByteRefHash to the postings array which seems odd to me though.\n\nMore ideas?\n\n{quote}\nCan we impl BytesRefHash.bytesUsed as an AtomicLong (hmm maybe\nAtomicInt - none of these classes can address > 2GB)? Then the\npool would add in blockSize every time it binds a new block. That\nmethod (DW.bytesUsed) is called alot - at least once on every\naddDoc.\n{quote}\n\nI did exactly that in the not yet uploaded patch. But I figured that it would maybe make more sense to use that AtomicInt in the allocator as well as in THPF or is that what you mean?\n\n{quote}\nI'm confused again - when do we use RecyclingByteBlockAllocator\nfrom a single thread...? Ie, why did the sync need to be\nconditional for this class, again....? It seems like we always\nneed it sync'd (both the main pool & per-doc pool need this)? If\nso we can simplify and make these methods sync'd?\n{quote}\n\nman, I am sorry - I  thought I will use this in LUCENE-2186 in a single threaded env but if so I should change it there if needed. I was one step ahead though.\nI will change and maybe have a second one if needed. Agree?\n\nsimon\n\n\n\n\n\n\n",
            "date": "2010-09-28T11:52:03.947+0000",
            "id": 23
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nI don't like addByBytesStart I would like to keep offset since it really is an offset into the pool. addByPoolOffset?\nThe names ord and bytesStart are a good compromise  lets shoot for that.\n{quote}\n\nOK!\n\nbq. we could factor out a super class from ParallelPostingArray which only has the textStart int array, the grow and copy method and let ParallelPostingArray subclass it.\n\nThis seems good?  So, this would be the \"store\" that BRH manages... and by subclassing it you can have other parallel arrays storing anything, indexed by ord.\n\nbq. I did exactly that in the not yet uploaded patch. But I figured that it would maybe make more sense to use that AtomicInt in the allocator as well as in THPF or is that what you mean?\n\nI think we should use it everywhere to track bytes used ;)\n\nbq. man, I am sorry - I thought I will use this in LUCENE-2186 in a single threaded env but if so I should change it there if needed. I was one step ahead though.\nI will change and maybe have a second one if needed. Agree?\n\nAhh that's right I forgot the whole driver for this refactoring heh ;)  Yeah I think leave it sync'd for now and we can test if this hurts perf in LUCENE-2186?  \"Supposedly\" uncontended locks are low-cost (but I'm not sure...).",
            "date": "2010-09-28T12:33:36.210+0000",
            "id": 24
        },
        {
            "author": "Jason Rutherglen",
            "body": "{quote}we could factor out a super class from ParallelPostingArray which only has the textStart int array, the grow and copy method and let ParallelPostingArray subclass it. {quote}\n\nThis option, makes the most sense.  ParallelByteStartsArray?\n\n\n\n",
            "date": "2010-09-30T03:05:45.612+0000",
            "id": 25
        },
        {
            "author": "Simon Willnauer",
            "body": "Next iteration - seems to be very close!\n\nI have applied the following changes:\n\n* introduces a AtomicLong to track bytesUsed in DocumetnsWriter, TermsHashPerField, ByteRefHash and RecyclingByteBlockAllocator\n* Factored out  a BytesStartArray class from BytesRefHash that manages the int[] holding the bytesStart offsets. TermsHashPerField subclasses and manages the ParallelPostingsArray through it. \n* remove remaining no-commits\n* made RecyclingbyteBlockAllocator synced by default (we use synchronized methods for it now)\n\nI run a quick Wikipedia 100k docs benchmark against trunk vs. LUCENE-2662 and the results are promising.\n|version|rec/sec|elapsed sec|avgUsedMem|\n|LUCENE-2662|717.30|139.41|536,682,592|\n|trunk| 682.66|146.49|546,065,344|\n\nI will run the 10M benchmark once I get back to this.\n",
            "date": "2010-09-30T16:28:44.506+0000",
            "id": 26
        },
        {
            "author": "Jason Rutherglen",
            "body": "Simon, looks good.\n\nAre we using:\n{code}\npublic int add(BytesRef bytes, int code)\n{code}\n\nyet?",
            "date": "2010-10-01T03:41:54.157+0000",
            "id": 27
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Are we using:...\n\nyeah, look at TermsHashPerFields add() method\n{code}\n       termID = bytesHash.add(termBytesRef, termAtt.toBytesRef(termBytesRef));\n{code}\n\nsimon",
            "date": "2010-10-01T06:26:03.189+0000",
            "id": 28
        },
        {
            "author": "Michael McCandless",
            "body": "I indexed 10M 1KB wikipedia docs, single threaded, and also see things a bit faster w/ the patch (10,353 docs/sec vs 10,182 docs/sec).  Nice to have a refactor improve performance for a change, heh.\n\nThe avgUsedMem was quite a bit higher (1.5GB vs 1.0GB), but, I'm not sure this stat is trustworthy.... I'll re-run w/ infoStream enabled to see if anything looks suspicious (eg, we are somehow not tracking bytes used correctly).\n\nStill, the resulting indices had identical structure (ie we seem to flush at exactly the same points), so I think bytes used is properly tracked.",
            "date": "2010-10-01T12:28:50.110+0000",
            "id": 29
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Still, the resulting indices had identical structure (ie we seem to flush at exactly the same points), so I think bytes used is properly tracked.\n\nSorry, scratch that -- I was inadvertently flushing by doc count, not by RAM usage.  I'm re-running w/ flush-by-RAM to verify we flush at exactly the same points as trunk.",
            "date": "2010-10-01T12:33:24.040+0000",
            "id": 30
        },
        {
            "author": "Michael McCandless",
            "body": "In RecyclingByteBlockAllocator.recycleByteBlocks, if we cannot recycle all of the blocks (ie because it exceeds maxBufferedBlocks), we are failing to null out the entries in the incoming array?\n\nAlso maybe rename pos -> freeCount?  (pos is a little too generic?)",
            "date": "2010-10-01T12:46:34.727+0000",
            "id": 31
        },
        {
            "author": "Robert Muir",
            "body": "Simon, thank you for renaming the 'utf8' variables here. \n",
            "date": "2010-10-01T13:07:44.923+0000",
            "id": 32
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Simon, thank you for renaming the 'utf8' variables here.\nYW :)\n\nbq. In RecyclingByteBlockAllocator.recycleByteBlocks, if we cannot recycle all of the blocks (ie because it exceeds maxBufferedBlocks), we are failing to null out the entries in the incoming array?\nAhh you are right - I will fix. \n\nbq. Also maybe rename pos -> freeCount? (pos is a little too generic?)\nI mean its internal though but I see your point.\n\nthanks for reviewing it closely. \n\n{quote}\nThe avgUsedMem was quite a bit higher (1.5GB vs 1.0GB), but, I'm not sure this stat is trustworthy.... I'll re-run w/ infoStream enabled to see if anything looks suspicious (eg, we are somehow not tracking bytes used correctly).\n{quote}\n\nhmm I will dig once I get back to my workstation.\n\nsimon",
            "date": "2010-10-01T13:21:53.227+0000",
            "id": 33
        },
        {
            "author": "Michael McCandless",
            "body": "OK my 2nd indexing test (10M wikipedia docs, flush @ 256 MB ram used) finished and trunk/patch are essentially the same throughput, and, all flushes happened at identical points.  So I think we are good to go...\n\nNice work Simon!",
            "date": "2010-10-01T15:27:41.074+0000",
            "id": 34
        },
        {
            "author": "Michael McCandless",
            "body": "I also ran a test w/ 5 threads -- they are close (22,402 docs/sec for patch, 22,868 docs/sec for trunk), and this time avgUsedMem is closer (811 MB for trunk, 965 MB for patch).\n\nI don't think the avgUsedMem is that meaningful -- it takes the max of Runtime.totalMemory() - Runtime.freeMemory() (which includes garbage I think), after each completed task, and then averages across all tasks.  In my case I think it's averaging 1 measure per thread, so it's really sort of measuring how much garbage there happened to be at the time.",
            "date": "2010-10-01T17:35:40.044+0000",
            "id": 35
        },
        {
            "author": "Michael McCandless",
            "body": "I instrumented trunk & the patch to see how many times we do new byte[bufferSize] while building 5M index, and they both alloc the same number of byte[] from the BBA.  So I don't think we have a memory issue...",
            "date": "2010-10-01T18:18:17.138+0000",
            "id": 36
        },
        {
            "author": "Simon Willnauer",
            "body": "This patch fixes nulling out the recycled but not reused byte blocks in RecyclingByteBlockAllocator.\n\nI thing we are ready to go I will commit to trunk soon. I don't think we need a CHANGES.TXT here - at least I can not find any section this refactoring would fit to. \n\nsimon",
            "date": "2010-10-02T12:35:59.880+0000",
            "id": 37
        },
        {
            "author": "Simon Willnauer",
            "body": "Committed to trunk in rev. 1003790\n\n@Jason: do you need that merged into Realtime-Branch or is buschmi going to do that? Otherwise I can help too\n\nI will keep it open until this is merged into Realtime Branch",
            "date": "2010-10-02T12:45:25.779+0000",
            "id": 38
        },
        {
            "author": "Jason Rutherglen",
            "body": "Simon, I'm going to get deletes working, tests passing using maps in the RT branch, then we can integrate.  This'll probably be best.",
            "date": "2010-10-03T16:04:21.475+0000",
            "id": 39
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Simon, I'm going to get deletes working, tests passing using maps in the RT branch, then we can integrate. This'll probably be best.\nJason, I suggest you create a separate issue something like \"Integrate BytesRefHash in Realtime Branch\" and I will take care of it. I think this issue had a clear target to factor out the hash table out of TermsHashPerField and we should close it. lets use a new one to track the integration.\n\nThoughts?\n\nSimon",
            "date": "2010-10-03T18:10:12.571+0000",
            "id": 40
        },
        {
            "author": "Jason Rutherglen",
            "body": "Lets commit this to trunk.  We need to merge in all of trunk to the RT branch, or vice versa at some point anyways.  This patch could be a part of that bulk merge-in, or we can simply do it now.",
            "date": "2010-10-03T22:10:26.721+0000",
            "id": 41
        },
        {
            "author": "Michael McCandless",
            "body": "This was already committed to trunk...",
            "date": "2010-10-04T09:51:06.242+0000",
            "id": 42
        },
        {
            "author": "Mathias Walter",
            "body": "Why is this issue still open, if the patch was already committed to trunk?",
            "date": "2010-10-25T07:56:45.833+0000",
            "id": 43
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Why is this issue still open, if the patch was already committed to trunk?\n\nsee my comment above: \n\nbq. I will keep it open until this is merged into Realtime Branch\n",
            "date": "2010-10-25T08:02:42.857+0000",
            "id": 44
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. I will keep it open until this is merged into Realtime Branch\nI think we should really close this since RT branch is not very active right now....\n\n",
            "date": "2010-11-25T10:42:34.207+0000",
            "id": 45
        },
        {
            "author": "Michael Busch",
            "body": "bq. I think we should really close this since RT branch is not very active right now....\n\nSorry about that.  I need to merge trunk into RT, then I'll get this change too.  It's a big merge though with tons of conflicts...",
            "date": "2010-11-25T12:13:40.606+0000",
            "id": 46
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Sorry about that. I need to merge trunk into RT, then I'll get this change too. It's a big merge though with tons of conflicts...\nHA! good to see you here! :) have fun with the merge",
            "date": "2010-11-25T12:24:11.423+0000",
            "id": 47
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. HA! good to see you here!  have fun with the merge\n\nHe is working hard, it's 4:45 am in California :-)",
            "date": "2010-11-25T12:44:52.846+0000",
            "id": 48
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. He is working hard, it's 4:45 am in California \ntrue but he is in germany :D",
            "date": "2010-11-25T12:51:39.187+0000",
            "id": 49
        },
        {
            "author": "Michael Busch",
            "body": "Yeah sitting in Stuttgart, going to hit the Weihnachtsmarkt soon - let's see how the merge goes after several glasses of Gluehwein :)\n",
            "date": "2010-11-25T13:02:31.136+0000",
            "id": 50
        }
    ],
    "component": "core/index",
    "description": "This issue will have the BytesHash separated out from LUCENE-2186",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2662",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "BytesHash",
    "systemSpecification": true,
    "version": "4.0-ALPHA"
}