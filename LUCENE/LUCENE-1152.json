{
    "comments": [
        {
            "author": "Naveen Belkale",
            "body": "Suggested patch.",
            "date": "2008-01-25T12:52:40.463+0000",
            "id": 0
        },
        {
            "author": "Naveen Belkale",
            "body": "One more small query. We have requirement where we have to add new words to our dictionary quite frequently. So multiple threads may concurrently call indexDictionary. This will cause problems as each call to indexDictionary will create a new IndexWriter. So is it possible to make indexDictionary function synchronized? Like this\n  public synchronized void indexDictionary(Dictionary dict) throws IOException {\n........",
            "date": "2008-01-25T13:06:48.938+0000",
            "id": 1
        },
        {
            "author": "Otis Gospodnetic",
            "body": "This patch no longer applies.  Could you provide a new patch (against trunk)?  Also, please use 2-spaces for indentation.  Thanks.\n\nAs for synchronizing indexDictionary method, why not add synchronization logic to your application?\n",
            "date": "2008-05-17T04:41:16.000+0000",
            "id": 2
        },
        {
            "author": "Naveen Belkale",
            "body": "Suggested patch against trunk",
            "date": "2008-05-21T10:06:10.744+0000",
            "id": 3
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Thank you for the patch!\n\nCommitted revision 659013.\n",
            "date": "2008-05-22T06:21:39.484+0000",
            "id": 4
        }
    ],
    "component": "modules/spellchecker",
    "description": "We have to call clearIndex and indexDictionary to rebuild dictionary from fresh. The call to SpellChecker clearIndex() function does not reset the searcher. Hence, when we call indexDictionary after that, many entries that are already in the stale searcher will not be indexed.\n\nAlso, I see that IndexReader reader is used for the sole purpose of obtaining the docFreq of a given term in exist() function. This functionality can also be obtained by using just the searcher by calling searcher.docFreq. Thus, can we get away completely with reader and code associated with it like\n      if (IndexReader.isLocked(spellIndex)){\n\tIndexReader.unlock(spellIndex);\n      }\nand the reader related code in finalize?\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-1152",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "SpellChecker does not work properly on calling indexDictionary after clearIndex",
    "systemSpecification": true,
    "version": "2.3"
}