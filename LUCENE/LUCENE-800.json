{
    "comments": [
        {
            "author": "Doron Cohen",
            "body": "Michael, I've been looking into this and think I made some progress. Are you just starting, or do you have it solved already?",
            "date": "2007-02-23T20:00:23.979+0000",
            "id": 0
        },
        {
            "author": "Michael Busch",
            "body": "Hi Dilip,\n\nthe backslash is the escape character in Lucene's queryparser syntax. So if you want to search for a backslash you have to escape it. That means that the first two examples you provides are working as expected:\n\nitem:\\\\ -> item:\\ is correct\nitem:\\\\* -> item:\\* is correct too\n\nIf you want to search for two backslashes you have to escape both, meaning you have to put four backslashes in the query string:\nitem:\\\\\\\\* -> item:\\\\*\n\n\nBut you indeed found two other problems. You are right, the last example should not throw a ParseException. \nIn (item:\\\\ item:ABCD\\\\) the queryparser falsely thinks that the closing parenthesis is escaped, but actually the backslash is the escaped character. I will provide a patch for this problem soon.\n\nAnd as you said the third example should throw a ParseException because there are too many closing parenthesis. There is already a patch for this problem in JIRA: \nhttp://issues.apache.org/jira/browse/LUCENE-372\n\nI will commit fixes for both problems soon. \n\nThanks again, Dilip! Good catches :-)\n",
            "date": "2007-02-23T20:08:17.456+0000",
            "id": 1
        },
        {
            "author": "Michael Busch",
            "body": "Doron,\n\nthe problem here is that a backslash is a valid TERM_CHAR and an ESCAPE_CHAR at the same time. The fix is to exclude \\ from the TERM_CHAR list. I tried this fix and it works fine for me. I'm going to attach a patch today. Would be great if you could review it before I commit it, Doron!\n\n",
            "date": "2007-02-23T20:12:03.204+0000",
            "id": 2
        },
        {
            "author": "Dilip Nimkar",
            "body": "In my test code, I took care of the difference between \\ as the Java escape character and \\ as the Lucene escape character.   \n\n    System.out.println(new QueryParser(\"_default_\", analyzer).parse( \"item:\\\\\\\\\"))    //note the 4 backslashes.\n                 should print on the console item:\\\\\n                 But it is printing item:\\\n    Same is the case with the second string in the test code.\n\n    in general, the boolean test\n       str.equals(QueryParser(\"_default_\", analyzer).parse( str).toString())\n     should always evaluate to true if the analyzer is not changing the string. But in our case it is evaluating to false.\n\nThe behavior I have consitently found is that - \"Whenever and wherever a java String contains an unbroken sequence of N escaped backslashes (that is, N  pairs of unescaped backslashes, totalling 2N backslashes) where N>= 2, the parse() method creates a Query that has only n-1 escaped backslashes in the corresponding place. \" If you have 20 escaped backslashes in a java string, the Lucene query will end up with 19.\n\nThank you much for your time, attention and efforts.\nThanks.\n   ",
            "date": "2007-02-23T21:57:05.015+0000",
            "id": 3
        },
        {
            "author": "Michael Busch",
            "body": "Dilip,\n\nare you using Lucene 1.9? The problem you are referring to (a sequence of N escaped backslashes) has been fixed in Lucene 2.1:\nhttp://issues.apache.org/jira/browse/LUCENE-573\n\nCould you test your code with the new version, please?\n\nHowever, the two other problems you pointed out and which I talked about in my previous comment are still there (but I'm working on it ;))\n\nThanks,\nMichael\n",
            "date": "2007-02-23T22:52:02.443+0000",
            "id": 4
        },
        {
            "author": "Michael Busch",
            "body": "just lowering the severity to minor",
            "date": "2007-02-23T22:54:17.260+0000",
            "id": 5
        },
        {
            "author": "Michael Busch",
            "body": "With this patch a query like\n(item:\\\\ item:ABCD\\\\)\ndoes not throw a ParseException anymore. I excluded the backslash from the TERM_CHAR list, because a backslash should always be escaped. \n\nI also changed the list ESCAPED_CHAR. Every character that follows a backslash should be considered as escaped. Until now, the query \\a would cause a ParseException, the query \\+ would work fine, which is not consistent. So now every character following a backslash is an ESCAPED_CHAR. Any objections?\n\nAll unit tests pass.",
            "date": "2007-02-25T22:06:05.136+0000",
            "id": 6
        },
        {
            "author": "Doron Cohen",
            "body": "Hi Michael, I reviewed this fix and it looks good and correct. \nAll tests are passing, including the new ones. (well, a few backwards compatibility tests fail - I would check that later - but it is unrelated to this fix).\nWhile reviewing I added a few test cases just to make sure - attached Lucene-800-more-tests.patch in case you find that worthy to add.\nRegards,\nDoron\n",
            "date": "2007-03-07T19:53:06.832+0000",
            "id": 7
        },
        {
            "author": "Michael Busch",
            "body": "Thanks Doron for reviewing and for the additional tests!\n\nI just committed this and LUCENE-372. Together these patches fix the two problems descibed in this issue.",
            "date": "2007-03-08T04:27:56.334+0000",
            "id": 8
        }
    ],
    "component": "core/queryparser",
    "description": "Test code and output follow. Tested  Lucene 1.9 version only. Affects hose who would index/search for Lucene's reserved characters.\n\nDescription: When an input search string has a sequence of N (java-escaped) backslashes, where N >= 2, the QueryParser will produce a query in which that sequence has N-1 backslashes.\n\nTEST CODE:\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    String[] queryStrs = {\"item:\\\\\\\\\",\n                          \"item:\\\\\\\\*\",\n                          \"(item:\\\\\\\\ item:ABCD\\\\\\\\))\",\n                          \"(item:\\\\\\\\ item:ABCD\\\\\\\\)\"};\n    for (String queryStr : queryStrs) {\n      System.out.println(\"--------------------------------------\");\n      System.out.println(\"String queryStr = \" + queryStr);\n      Query luceneQuery = null;\n      try {\n        luceneQuery = new QueryParser(\"_default_\", analyzer).parse(queryStr);\n        System.out.println(\"luceneQuery.toString() = \" + luceneQuery.toString());\n      } catch (Exception e) {\n        System.out.println(e.getClass().toString());\n      }\n    }\n\nOUTPUT (with remarks in comment notation:) \n--------------------------------------\nString queryStr = item:\\\\\nluceneQuery.toString() = item:\\             //One backslash has disappeared. Searcher will fail on this query.\n--------------------------------------\nString queryStr = item:\\\\*\nluceneQuery.toString() = item:\\*           //One backslash has disappeared. This query will search for something unintended.\n--------------------------------------\nString queryStr = (item:\\\\ item:ABCD\\\\))\nluceneQuery.toString() = item:\\ item:ABCD\\)     //This should have thrown a ParseException because of an unescaped ')'. It did not.\n--------------------------------------\nString queryStr = (item:\\\\ item:ABCD\\\\)\nclass org.apache.lucene.queryParser.ParseException        //...and this one should not have, but it did.\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-800",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Incorrect parsing by QueryParser.parse() when it encounters backslashes (always eats one backslash.)",
    "systemSpecification": true,
    "version": ""
}