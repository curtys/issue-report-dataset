{
    "comments": [
        {
            "author": "Doron Cohen",
            "body": "Simple fix: consult also with maxMemory if freeMemory not suffice.",
            "date": "2012-02-02T17:12:39.980+0000",
            "id": 0
        },
        {
            "author": "Doron Cohen",
            "body": "{quote}\n[Dawid:|http://markmail.org/message/jobtemqm4u4vrxze] (maxMemory - totalMemory) because that's how much the heap can\ngrow? The problem is none of this is atomic, so the result can\nunpredictable. There are other methods in management interface that\npermit a somewhat more detailed checks.  Don't know if they guarantee\natomicity of the returned snapshot, but I doubt it.\n- [MemoryMXBean.getHeapMemoryUsage()|http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/management/MemoryMXBean.html#getHeapMemoryUsage()]\n- [MemoryPoolMXBean.getPeakUsage()|http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/management/MemoryPoolMXBean.html#getPeakUsage()]\n{quote}\n\nCurrent patch not (yet) handling the atomicity issue Dawid described. ",
            "date": "2012-02-02T18:06:09.734+0000",
            "id": 1
        },
        {
            "author": "Doron Cohen",
            "body": "Updated patch using ManagementFactory.getMemoryMXBean().getHeapMemoryUsage(). \n\nJavadocs are not explicit about this call being atomic, but from the wording it seems almost certain to conclude that each call returns a new Usage instance. In this patch this is (Java) asserted and the assert passes (-ea) in two different JVMs - IBM and Oracle - so this might be correct. I searched some more explicit info on this with no success. \n\nAnnoyingly though, in IBM JDK, running the tests like this produces the nice warning:\n\n{noformat}\nWARNING: test class left thread running: Thread[MemoryPoolMXBean notification dispatcher,6,main]\nRESOURCE LEAK: test class left 1 thread(s) running\n{noformat}\n\nThis makes me reluctant to use the memory bean - I did not find a way to prevent that thread leak.\n\nSo perhaps a better approach would be to be conservative about the sequence of calls when using Runtime? something like this:\n\n{code}\nlong free = rt.freeMemory();\nif (free is sufficient)\n  return decideBy(free);\nlong max = rt.maxMemory();\nlong total = rt.totalMemory();\nreturn decideBy(max - total)\n{code}\n\nThis is conservative in that 'total' is computed last, and in that total-free is not added to the computed available bytes.\n\nIn both approaches, even if atomicity is guaranteed, it is possible that more heap is allocated in another thread between the time that the size is computed, to the time that the bytes are actually allocated, so not sure how safe this check can be made.",
            "date": "2012-02-05T16:39:10.493+0000",
            "id": 2
        },
        {
            "author": "Doron Cohen",
            "body": "Updated patch - without MemoryMXBean - computing 'max, total, free' (in that order) and deciding by 'free' or falling to 'max-free'. This is more conservative, than MemoryMxBean but since the latter is not full proof either, I prefer the simpler approach. ",
            "date": "2012-02-05T17:00:13.675+0000",
            "id": 3
        },
        {
            "author": "Dawid Weiss",
            "body": "As for spawning MemoryPoolMXBean -- I wouldn't be worried about it, it's probably a system daemon thread for sending memory threshold notifications  (didn't check though). I will peek at openjdk sources and see how the mx is implemented to verify if it's atomic or not (not a guarantee, just curiosity).",
            "date": "2012-02-05T19:53:02.731+0000",
            "id": 4
        },
        {
            "author": "Dawid Weiss",
            "body": "Just checked and it seems to be that within a single memory pool the results will be atomic. Unfortunately that call aggregates all memory pools and (depending on the GC used) this may result in inconsistencies if the calculation happens to be interwoven with garbage collector activity. As stated in the sources of G1, for example:\n\n{noformat}\n// 4) Now, there is a very subtle issue with all the above. The\n// framework will call get_memory_usage() on the three pools\n// asynchronously. As a result, each call might get a different value\n// for, say, survivor_num which will yield inconsistent values for\n// eden_used, survivor_used, and old_gen_used (as survivor_num is used\n// in the calculation of all three). This would normally be\n// ok. However, it's possible that this might cause the sum of\n// eden_used, survivor_used, and old_gen_used to go over the max heap\n// size and this seems to sometimes cause JConsole (and maybe other\n// clients) to get confused. There's not a really an easy / clean\n// solution to this problem, due to the asynchrounous nature of the\n// framework. \n{noformat}\n\nMakes sense to me. I wouldn't bother with management interface then and just use the Runtime.* heuristic you proposed.",
            "date": "2012-02-05T20:05:55.495+0000",
            "id": 5
        },
        {
            "author": "Doron Cohen",
            "body": "Thanks Dawid! \n\n{quote}\nit's probably a system daemon thread for sending memory threshold notifications\n{quote}\n\nYes this makes sense. \nStill the difference between the two JDKs felt bothering.\nSome more digging, and now I think it is clear. \n\nHere are the stack traces reported (at the end of the test) with Oracle:\n{noformat}\n1.  Thread[ReaderThread,5,main]\n2.  Thread[main,5,main]\n3.  Thread[Reference Handler,10,system]\n4.  Thread[Signal Dispatcher,9,system]\n5.  Thread[Finalizer,8,system]\n6.  Thread[Attach Listener,5,system]\n{noformat}\n\nAnd with IBM JDK:\n{noformat}\n1.  Thread[Attach API wait loop,10,main]\n2.  Thread[Finalizer thread,5,system]\n3.  Thread[JIT Compilation Thread,10,system]\n4.  Thread[main,5,main]\n5.  Thread[Gc Slave Thread,5,system]\n6.  Thread[ReaderThread,5,main]\n7.  Thread[Signal Dispatcher,5,main]\n8.  Thread[MemoryPoolMXBean notification dispatcher,6,main]\n{noformat}\n\nThe 8th thread is the one that started only after accessing the memory management layer. The thing is, that in the IBM JDK that thread is created in the ThreadGroup \"main\", while in the Oracle JDK it is created under \"system\". To me the latter makes more sense. \n\nTo be more sure I added a fake memory notification listener and check the thread in which notification happens: \n{code}\nMemoryMXBean mmxb = ManagementFactory.getMemoryMXBean();\nNotificationListener listener = new NotificationListener() {\n  @Override\n  public void handleNotification(Notification notification, Object handback) {\n    System.out.println(Thread.currentThread());\n  }\n};\n((NotificationEmitter) mmxb).addNotificationListener(listener, null, null);\n{code}\n\nEvidently in IBM JDK the notification is in \"main\" group thread (also in line with the thread-group in the original warning message which triggered this threads discussion):\n{noformat}\nThread[MemoryPoolMXBean notification dispatcher,6,main]\n{noformat}\n\nWhile in Oracle JDK notification is in \"system\" group thread:\n{noformat}\nThread[Low Memory Detector,9,system]\n{noformat}\n\nThis also explains why the warning is reported only for IBM JDK: because the threads check in LTC only account for the threads in the same thread-group as the one running the specific test case. So when dispatching happens in a \"system\" group thread it is not sensed by that check at all.\n\nOk now with mystery solved I can commit the simpler code...",
            "date": "2012-02-06T06:33:17.716+0000",
            "id": 6
        },
        {
            "author": "Doron Cohen",
            "body": "Committed:\n- r1241355 - trunk\n- r1241363 - 3x",
            "date": "2012-02-07T07:05:13.531+0000",
            "id": 7
        }
    ],
    "component": "modules/spellchecker",
    "description": "Follow up op dev thread: [FSTCompletionTest failure \"At least 0.5MB RAM buffer is needed\" | http://markmail.org/message/d7ugfo5xof4h5jeh]",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3746",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "suggest.fst.Sort.BufferSize should not automatically fail just because of freeMemory()",
    "systemSpecification": true,
    "version": ""
}