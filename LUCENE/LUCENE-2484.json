{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "So after hours of waiting:\n- Lucene Core, Contrib is fine\n- Modules fine\n- Solr core works\n- *Solr carrot2 is broken and this is not fixable!*\n\nIts broken by itsself:\nThe contrib module for carrot clustering depends on carrot, but carrot itsself depends on an older version of Lucene! We only have the binary, so we cannot fix it:\n\n{noformat}\njava.lang.NoClassDefFoundError: org/apache/lucene/analysis/tokenattributes/TermAttribute\n\tat org.carrot2.text.analysis.ExtendedWhitespaceTokenizer.&lt;init&gt;(ExtendedWhitespaceTokenizer.java:53)\n\tat org.carrot2.text.analysis.ExtendedWhitespaceAnalyzer.tokenStream(ExtendedWhitespaceAnalyzer.java:28)\n\tat org.carrot2.text.analysis.ActiveLanguageAnalyzer.tokenStream(ActiveLanguageAnalyzer.java:53)\n\tat org.carrot2.text.preprocessing.Tokenizer.tokenize(Tokenizer.java:171)\n\tat org.carrot2.text.preprocessing.PreprocessingPipeline.preprocess(PreprocessingPipeline.java:96)\n\tat org.carrot2.text.preprocessing.PreprocessingPipeline.preprocess(PreprocessingPipeline.java:87)\n\tat org.carrot2.clustering.lingo.LingoClusteringAlgorithm.process(LingoClusteringAlgorithm.java:155)\n\tat org.carrot2.core.ControllerUtils.performProcessing(ControllerUtils.java:95)\n\tat org.carrot2.core.ControllerUtils.performProcessing(ControllerUtils.java:138)\n\tat org.carrot2.core.CachingController.processInternal(CachingController.java:279)\n\tat org.carrot2.core.CachingController.process(CachingController.java:224)\n\tat org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.cluster(CarrotClusteringEngine.java:78)\n\tat org.apache.solr.handler.clustering.ClusteringComponent.process(ClusteringComponent.java:75)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:195)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:131)\n\tat org.apache.solr.handler.clustering.ClusteringComponentTest.testComponent(ClusteringComponentTest.java:57)\nCaused by: java.lang.ClassNotFoundException: org.apache.lucene.analysis.tokenattributes.TermAttribute\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:202)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:307)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:248)\n{noformat}\n\nWe cannot move forward in breaking backwards in trunk, so I suggest to disable this contrib in trunk! We can only support it if, it moves to Lucene/Solr in complete and we have the source code in solr's SVN.\n\nThoughts?",
            "date": "2010-06-01T13:45:59.917+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "bq. We cannot move forward in breaking backwards in trunk, so I suggest to disable this contrib in trunk!\n\n+1",
            "date": "2010-06-01T13:46:56.580+0000",
            "id": 1
        },
        {
            "author": "Stanislaw Osinski",
            "body": "Hi!\n\nAgainst which version of Lucene should we refactor/ build Carrot2 to fix the issue? Does it have to be trunk?\n\nThanks!\n\nS.",
            "date": "2010-06-01T13:56:02.285+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. Against which version of Lucene should we refactor/ build Carrot2 to fix the issue? Does it have to be trunk?\n\nThis is against Solr *trunk*, what does the question mean? This is marked deprecated in branch_3x, so you have to fix it\n\nThe whole thing is broken per se:\n*Solr trunk cannot depend on external APIs that itsself depend on older Lucene APIs*",
            "date": "2010-06-01T14:02:14.830+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "Since this clustering contrib depends on binary files that are tied to specific versions of the Lucene API,\nI suggest the following:\n\n* only enable clustering in release branches (such as 3x)\n* when we cut a new release branch from trunk (say we make a 4x), then add the new version there that works with it.\n* but never have this enabled in trunk, as it is a cyclic dependency\n\nthe problem is, further changes might happen in trunk as it is backwards-incompatible.\n\nas a realistic theoretical example, we might all decide to move to write-once attributes API (LUCENE-2450). \nIn this case perhaps Uwe writes a sophisticated \u00ae backwards for 3x, to enable easy migration, \nbut then the old TokenStream API itself would be deprecated in 3x and removed in trunk so we can keep going.\n",
            "date": "2010-06-01T14:09:08.844+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Additionally:\nI will commit this soon. I dont care on external APIs. This is *trunk* and as discussed in the mailing list: Lucene trunk is no longer backwards compatible!\n\nSo: This contrib has to be removed from solr trunk! This contrib is part of carrot, so why is it in Solr's contrib at all. It's License itsself is incompatible. We will remove *all* deprecated APIs in trunk soon! Whole Lucene *trunk* moves to *FLEX* APIs now, so this broken at all.\n\nSorry, this is outside of this issue, please move this discussion to mailing list!\n\nOut of Scope:\nAs a Lucene-affiliated committer (personally, I dont care of Solr at all and I was against merging Solr+Lucene!), I cannot take care of external binary-only JARs that itsself depend on old Lucene APIs !!!",
            "date": "2010-06-01T14:10:38.453+0000",
            "id": 5
        },
        {
            "author": "Stanislaw Osinski",
            "body": "{quote}\nSince this clustering contrib depends on binary files that are tied to specific versions of the Lucene API,\nI suggest the following:\n* only enable clustering in release branches (such as 3x)\n* when we cut a new release branch from trunk (say we make a 4x), then add the new version there that works with it.\n* but never have this enabled in trunk, as it is a cyclic dependency\n{quote}\n\nSounds very good to me, thanks for the explanation!\n",
            "date": "2010-06-01T14:19:16.113+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Updated patch, that also fixes a bug in NumericTokenStreams isAssignableFrom checks to prevent addition of a CTA subclass. This bug existed before, but its easier to fix here (and not serious).",
            "date": "2010-06-02T06:32:50.471+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 952616",
            "date": "2010-06-08T11:28:26.142+0000",
            "id": 8
        }
    ],
    "component": "",
    "description": "The title says it:\n- Remove interface TermAttribute\n- Remove empty fake implementation TermAttributeImpl extends CharTermAttributeImpl\n- Remove methods from CharTermAttributeImpl (and indirect from Token)\n- Remove sophisticated\u00ae backwards\u2122 Layer in TermsHash*\n- Remove IAE from NumericTokenStream, if TA is available in AS\n- Fix rest of core tests (TestToken)",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2484",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "OTHER",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Remove deprecated TermAttribute from tokenattributes and legacy support in indexer",
    "systemSpecification": true,
    "version": ""
}