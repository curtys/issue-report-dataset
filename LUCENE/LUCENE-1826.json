{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "To make sure these issues are considered for 2.9 (and there is not much time for this - but we will certainly take advantage of your experiences upgrading here), you want to set the fix to 2.9 rather than the affects.",
            "date": "2009-08-20T17:41:02.184+0000",
            "id": 0
        },
        {
            "author": "Tim Smith",
            "body": "i'll do that from now on (feel free to boot them if you feel necessary (didn't want to overstep my bounds suggesting fix in 2.9))",
            "date": "2009-08-20T17:43:46.870+0000",
            "id": 1
        },
        {
            "author": "Tim Smith",
            "body": "NOTE: for me, this is just a \"nice to have\"\n\nI currently only use my \"concat\" TokenStream on my own TokenStream implementations right now (so i can do this manually on my own TokenStream Impls)\n\nhowever i would like to be able to directly use lucene \"Tokenizers\" under my \"concat\" TokenStream under some situations in the future",
            "date": "2009-08-20T17:51:16.233+0000",
            "id": 2
        },
        {
            "author": "Mark Miller",
            "body": "bq. didn't want to overstep my bounds suggesting fix in 2.9\n\nNo worries - I think its good because it will force us to consider them before deciding to do something or move them out.",
            "date": "2009-08-20T17:54:25.993+0000",
            "id": 3
        },
        {
            "author": "Tim Smith",
            "body": "This is further complicated by the fact that Tokenizers are often \"held onto\" in a thread local\n\nso, Tokenizer.reset(Reader) should also take an AttributeSource in order to really reset things properly\n\nalso, then all TokenFilters/TokenStreams would be required to reinit their held onto \"attributes\" at reset() time, not at constructor time otherwise they could be holding onto stale attributes",
            "date": "2009-08-20T21:26:58.238+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "I was thinking about that, too. But it was too much work in my opinion :-) -- But for the same reason like LUCENE-1804, they should have this ctor (and the AttributeFactory one!).",
            "date": "2009-08-20T23:02:38.443+0000",
            "id": 5
        },
        {
            "author": "Tim Smith",
            "body": "without the Tokenizer.reset(Reader, AttributeSource), i won't be able to reuse Tokenizer instances (will have to create a fresh one each time)\nthis can get costly if each Tokenizer is layered with a bunch of TokenFilters\nobviously, adding this method would be nasty (and impose additional requirements on TokenFilters/Streams) but it would allow reusing the token streams to the utmost\n\nQuestion:\nIs the reflection penalty on the new TokenStream stuff incurred per root AttributeSource?, or per TokenFilter/TokenStream?\nthat is, if i pass the same AttributeSource to 10 TokenStreams, is the reflection cost the same as if i passed it to just one?\n",
            "date": "2009-08-20T23:27:52.940+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. without the Tokenizer.reset(Reader, AttributeSource), i won't be able to reuse Tokenizer instances (will have to create a fresh one each time)\n\nThis is not possible per design. The AttributeSource cannot be changed. It is created during creation of the classes (this is why it is in the ctor and nowhere else). For filters, the attributes come from the input token stream.\n\nEDIT: The TokenStream itsself is the AttributeSource, the ctor parameter AttributeSource only tells the ctor not to create new Attribute instances and reuse the maps from the given source. But Each TokenStream/Filter is always an AttributeSource itsself.\n\nbq. Is the reflection penalty on the new TokenStream stuff incurred per root AttributeSource?, or per TokenFilter/TokenStream?\n\nThe reflection penalty is one-time per class (because of static cache of \"known\" classes), so all attributeimpl are inspected one time when a new AttributeSouce like TokenStream is created. There is an additional reflection cost, when new attributes are added, but also one time per AttributeImpl class.\nSince the last changes in TokenStream the reflection is therefore no longer a penalty. The only problem is more work to construct an TokenStream (filling the LinkedHashMaps), because of that you should reuse TokenStream-chains.\n\nbq. that is, if i pass the same AttributeSource to 10 TokenStreams, is the reflection cost the same as if i passed it to just one?\n\nNo change!",
            "date": "2009-08-21T05:33:39.236+0000",
            "id": 7
        },
        {
            "author": "Tim Smith",
            "body": "bq. This is not possible per design. The AttributeSource cannot be changed.\nI fully understand why\n\nbut...\nit should be rather easy to add a reset(AttributeSource input) to AttributeSource\n{code}\npublic void reset(AttributeSource input) {\n    if (input == null) {\n      throw new IllegalArgumentException(\"input AttributeSource must not be null\");\n    }\n    this.attributes = input.attributes;\n    this.attributeImpls = input.attributeImpls;\n    this.factory = input.factory;\n}\n{code}\n\nThis would require making attributes and attributeImpls non-final (potentially reducing some jvm caching capabilities)\n\nHowever, this then provides the ability to do even more Attribute reuse\nFor example, if this method existed, the Indexer could use a ThreadLocal of raw AttributeSources (one AttributeSource per thread)\nthen, prior to calling TokenStream.reset(), it could call TokenStream.reset(ThreadLocal AttributeSource)\n\nThis would result in all token streams for the same document using the same AttributeSource (reusing TermAttribute, etc)\n\nThis would require that the no TokenStreams/Filters/Tokenizers call addAttribute() in the constructor (they would have to do this in reset())\n\nI totally get that this is a tall order\nIf you want i can open a separate ticket for this (AttributeSource.reset(AttributeSource)) for further consideration\n\n",
            "date": "2009-08-21T13:35:43.100+0000",
            "id": 8
        },
        {
            "author": "Michael Busch",
            "body": "Patch adds additional constructors that take AttributeSource or AttributeFactory to all tokenizers (core + contrib).\n\nIt doesn't add additional reset() methods. We have to discuss that more and I think it's too late for 2.9.\n\nI'll commit this tomorrow if nobody objects.",
            "date": "2009-08-21T23:09:31.472+0000",
            "id": 9
        },
        {
            "author": "Tim Smith",
            "body": "i'll fork off another ticket for the reset(AttributeSource) method\n",
            "date": "2009-08-21T23:19:36.942+0000",
            "id": 10
        },
        {
            "author": "Tim Smith",
            "body": "forked off the reset(AttributeSource) to    LUCENE-1842",
            "date": "2009-08-21T23:25:34.354+0000",
            "id": 11
        },
        {
            "author": "Michael Busch",
            "body": "Committed revision 806942.",
            "date": "2009-08-23T08:34:43.895+0000",
            "id": 12
        }
    ],
    "component": "modules/analysis",
    "description": "I have a TokenStream implementation that joins together multiple sub TokenStreams (i then do additional filtering on top of this, so i can't just have the indexer do the merging)\n\nin 2.4, this worked fine.\nonce one sub stream was exhausted, i just started using the next stream \n\nhowever, in 2.9, this is very difficult, and requires copying Term buffers for every token being aggregated\n\nhowever, if all the sub TokenStreams share the same AttributeSource, and my \"concat\" TokenStream shares the same AttributeSource, this goes back to being very simple (and very efficient)\n\n\nSo for example, i would like to see the following constructor added to StandardTokenizer:\n{code}\n  public StandardTokenizer(AttributeSource source, Reader input, boolean replaceInvalidAcronym) {\n    super(source);\n    ...\n  }\n{code}\n\nwould likewise want similar constructors added to all Tokenizer sub classes provided by lucene\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1826",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "All Tokenizer implementations should have constructors that take AttributeSource and AttributeFactory",
    "systemSpecification": true,
    "version": "2.9"
}