{
    "comments": [
        {
            "author": "Woody Anderson",
            "body": "I'm providing this patch in case you want to have this fix for 3.0.2 based lucene branch. It breaks the back compatibility test, b/c i changed the 'meaning' of TopDocsCollector. You could probably introduce a new class that is a superclass of TDC, but that makes code/files less readable and less representative.\nSo, since few people are probably patching 3.0.2 in this case anyway, it's here only for those few want that. There will be another patch for 4.0 release target, where the back compatibility is not enforced.",
            "date": "2010-07-17T23:01:03.538+0000",
            "id": 0
        },
        {
            "author": "Woody Anderson",
            "body": "this patch was generated against lucene/trunk\n{code}\n~/g/lucene-trunk -> svn info\nPath: .\nURL: http://svn.apache.org/repos/asf/lucene/dev/trunk\nRepository Root: http://svn.apache.org/repos/asf\nRepository UUID: 13f79535-47bb-0310-9956-ffa450edef68\nRevision: 964467\n{code}\n\nI generated the diff with svn, but did not \"add with history\" when i moved TopDocs* to PQTopDocs*, this allows the diff to apply cleanly with patch, but is not optimal for svn history management.\n\nwith svn i guess, it's technically better to preserve the history and svn merge, which can track file adds w/ history etc.\ni track my local changes with git, which does that automatically, so if there is a \"preferred\" way to generate patches wrt to svn that can actually apply with patch i'll generate that way.\n\nOr if there is a way to apply a history preserving patch with svn, i'd love to know what it is. And i can figure out how to jostle that diff into my git repo on my own.\n",
            "date": "2010-07-17T23:18:11.443+0000",
            "id": 1
        },
        {
            "author": "Shai Erera",
            "body": "I am not sure that we should do this change. The purpose behind TDC was its PQ usage. On top of it we created TSDC and TFC. What is the benefit of having TDC w/o PQ, just so that we can have a PQTFC?\n\nCollector is the base class for all, and if someone wants to create a non-PQ TDC he can do so ... not sure this should be in Lucene core though.",
            "date": "2010-07-18T03:03:53.679+0000",
            "id": 2
        },
        {
            "author": "Woody Anderson",
            "body": "Well, the idea of \"top N documents\" is, imo, distinct from how it is implemented, (e.g. with lucene's internal PQ impl).\n\nI think, at some level we disagree on what TopDocsCollector is \"for\", you say it's for a PQ implementation; whereas, I think it's for the public interface, namely:\ngetTopDocs(..) and getTotalHits(). The that fact that the implementation uses org.apache.lucene.util.PriorityQueue is not necessarily a positive thing for my purposes.\n\nAlternate impls certainly could subclass Collector directly, but much of the time when getting documents, getting a TopDocs is preferred, and there is value in expressing that capability abstractly. And there is value in expressing accomplishing that w/o being tied it to a single possible implementation. Overall, the PQ based impl is effective, but that doesn't mean that it's always the most effective impl capable of yielding TopDocCollector functionality, and by that i mean the public interface.\n\nI have uses of this code that require referring abstractly to Collectors that produce TopDocs, doing that without any common interface or abstract class (whole separate issue with the fact that Collector is not in iface & ditto TDC) requires wrapping a TopDocsCollector in a proxy, which is just kind of silly to me.\n\nAlso, i'm entirely missing the downside?",
            "date": "2010-07-18T04:21:13.935+0000",
            "id": 3
        },
        {
            "author": "Shai Erera",
            "body": "First, we didn't make an interface out of Collector or any of its derivatives on purpose - that's the approach that's adopted in many places of the code - when you want to add a method, it's impossible to do it with an interface w/o breaking back-compat, while abstract classes give us the freedom to do so w/ a default impl (when possible).\n\nYou can already sub-class TDC and not rely on its PQ, by passing null to its ctor and override all of the topDocs methods. I agree that looks odd (why pass null in the first place). But then, there is a point where you need to ask yourself \"what must be in core Lucene\", \"what is a nice to have\" and \"what is completely app-specific usage\". Collector is a \"must have in core\", no arguments about it. Previously, TDC was actually TSDC and had only one derivative -- TFC. But a while ago, when the Collector API was changed, TDC was created for TSDC and TFC to override it (rather than TFC overriding TSDC) and a \"nice to have\" side effect was that app-specific PQ-based collectors can override TDC as well.\n\nThe question I'm asking myself is whether a generic \"TDC\", which will be entirely abstract -- no chance for common impl, perhaps except for getTotalHits(), which is redundant 'cause TopDocs has totalHits already -- is a \"nice to have\" in Lucene. It's certainly not a \"must have\" ... and it adds complexity more than it simplifies the API. After all, Lucene's external API accepts and handles Collector. Internally it creates TSDC or TFC. It couldn't care less what those two extend.\n\nIt seems to me that only the app will benefit from having this abstraction, and seems to me you can do so w/o having TDC in core Lucene. You can have your own TDC, w/ a wrapper for \"Lucene TDCs\" and your own extensions ...",
            "date": "2010-07-18T07:32:05.077+0000",
            "id": 4
        },
        {
            "author": "Woody Anderson",
            "body": "I'm pretty sure that you cannot usefully pass null to the TDC constructor due to various final methods (all the public methods are final), e.g. \n{code}\n  /** Returns the top docs that were collected by this collector. */\n  public final TopDocs topDocs() {\n    // In case pq was populated with sentinel values, there might be less\n    // results than pq.size(). Therefore return all results until either\n    // pq.size() or totalHits.\n    return topDocs(0, totalHits < pq.size() ? totalHits : pq.size());\n  }\n{code}\n\nWhich actually begs the question, should the constructor validate that the PQ is non-null, as it clearly cannot produce a TopDocs if it is\nI imagine there were performance reasons that it was made final? or is extension in this case frowned upon?\n\nAt any rate, I agree that this isn't a \"must have\", i do think that since a lot of useful collectors conform to the TDC contract, it's useful to allow that definition to be extensible to implementations not provided by core lucene. Code \"sharing\" is not the only reason to allow for oo abstractions, and though the implementations don't all belong in core lucene, the ability to refer to them collectively does have value. I would suggest that the value of the abstraction is there for more developers than just me, otherwise i wouldn't have submitted the patch.\n\nI agree with your last comment the most, that IF TDC were extensible for my purposes, then that would be far superior to my submitted patch of adding classes.\nWe could un-final all the public methods of the TDC, which would basically allow someone to fullfil the contract without using the PQ system TDC is built upon. \n\nWhat do you think of that?",
            "date": "2010-07-19T02:42:50.943+0000",
            "id": 5
        },
        {
            "author": "Shai Erera",
            "body": "Personally I don't mind removing the final modifier from the methods. I see that jdocs need to be fixed anyway, cause they mention one can override topDocs which is wrong. What do others think?",
            "date": "2010-07-19T05:13:53.809+0000",
            "id": 6
        },
        {
            "author": "Woody Anderson",
            "body": "simple un-final patch with simple unit test that won't compile if they are final.\nupdated javadocs as well. Though, i defer final wording in that regard.",
            "date": "2010-07-20T01:40:23.053+0000",
            "id": 7
        },
        {
            "author": "Shai Erera",
            "body": "Can you please add the TDC impl to JustCompileSearch (instead of the testcase you wrote)? Look at other internal classes there for an example. This class is not a test per se, however it's there to ensure certain extensions are possible.\n\nAlso, can you change the jdoc from \"Most extending classes ...\" to \"Extending classes can override any of the methods to provide their own implementation, as well as avoid the use of the priority queue entirely by passing null to {@link #TopDocsCollector(PriorityQueue)}. In that case however, you might want to consider overriding all methods, in order to avoid an NullPointerException.\n\nThen, you can remove the jdoc of the ctor.",
            "date": "2010-07-20T12:03:40.849+0000",
            "id": 8
        },
        {
            "author": "Woody Anderson",
            "body": "went with your suggestions verbatim.\nas a \"just compile\" test, we lose the test/proof that super(null) will not NPE, but that's presumably a fairly minor issue, and was previously not enforced by a test case anyway.\nadding that test would be trivial, we could simply  \"new JustCompileTopDocsCollector(null)\", though that would go against \"just compile\", otherwise we're back to a test pretty much the same as the previous patch.",
            "date": "2010-07-21T02:35:26.516+0000",
            "id": 9
        },
        {
            "author": "Shai Erera",
            "body": "Patch looks good. I think it's ready to commit, but it will take me another day or two until I can get to it. So if someone else wants to commit it, please do.",
            "date": "2010-07-21T06:48:38.355+0000",
            "id": 10
        },
        {
            "author": "Yonik Seeley",
            "body": "committed.",
            "date": "2010-07-21T19:00:41.394+0000",
            "id": 11
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:49:50.365+0000",
            "id": 12
        }
    ],
    "component": "core/search",
    "description": "TopDocsCollector is both an abstract interface for producing TopDocs as well as a PriorityQueue based implementation.\nNot all Collectors that could produce TopDocs must use a PriorityQueue, and it would be advantageous to allow the TopDocsCollector to be an \"interface\" type abstract class, with a PQTopDocsCollector sub-class.\nWhile doing this, it'd be good to clean up the generics uses in these classes. As it's odd to create a TopFieldCollector and have to case the TopDocs object, when this can be fixed with generics.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2542",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "TopDocsCollector should be abstract super class that is the real \"TopDocsCollector\" contract, a subclass should implement the priority-queue logic. e.g. PQTopDocsCollector",
    "systemSpecification": true,
    "version": ""
}