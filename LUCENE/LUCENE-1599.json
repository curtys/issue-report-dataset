{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "Could you write a quick test case? I just give it a simple go, and for the case I used, I didn't see the problem. If you can provide some sample code that shows exactly what tickles it, I'll work on fixing it.",
            "date": "2009-04-19T17:22:53.470+0000",
            "id": 0
        },
        {
            "author": "Mark Miller",
            "body": "Hey Billow, do you have anything to add to help us track this down? If not, I'm going to close it as incomplete eventually.",
            "date": "2009-06-11T10:35:31.651+0000",
            "id": 1
        },
        {
            "author": "Billow Gao",
            "body": "Sorry, I should write the test case earlier.\nForgot to check my email on this account.\n\nHere is the testcase.\n\nThe problem is very clear.\nWhen there is a SpanNearQuery query which have SpanRegexQuery in it.\nAnd MultiSearcher is used, the query will only be rewritten once on the first IndexSearcher in the MultiSearcher.\nSo only terms in the first IndexSearcher are used.\nAnd of course, it will fail on other IndexSearchers since it didn't use terms in those IndexSearchers.\n\nBillow",
            "date": "2009-06-11T11:53:57.428+0000",
            "id": 2
        },
        {
            "author": "Billow Gao",
            "body": "Just uploaded the testcase  \tTestSpanRegexBug.java.\n\nSorry, I should write the test case earlier.\nForgot to check my email on this account.\n\nHere is the testcase.\n\nThe problem is very clear.\nWhen there is a SpanNearQuery query which have SpanRegexQuery in it.\nAnd MultiSearcher is used, the query will only be rewritten once on the first IndexSearcher in the MultiSearcher.\nSo only terms in the first IndexSearcher are used.\nAnd of course, it will fail on other IndexSearchers since it didn't use terms in those IndexSearchers.\n\nBillow",
            "date": "2009-06-11T11:55:04.760+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "MultiSearcher seems to rewrite against all its searchers, and then uses Query.combine to merge all the the results?  Maybe the issue is in Query.combine?\n\nSeems like we should fix this for 2.9.",
            "date": "2009-06-12T19:11:50.635+0000",
            "id": 4
        },
        {
            "author": "Billow Gao",
            "body": "Not there.\nIf you use the query one those two IndexSearcher one by one, then you will find that only the first search has a match.\nThe second one always fail.\n\nFor example:\n\nSpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"a.*\"));\n        SpanRegexQuery stq = new SpanRegexQuery(new Term(\"field\", \"b.*\"));\n        SpanNearQuery query = new SpanNearQuery(new SpanQuery[] { srq, stq },\n                6, true);\nIndexSearcher[] arrSearcher = new IndexSearcher[2];\n        arrSearcher[0] = new IndexSearcher(indexStoreA);\n        arrSearcher[1] = new IndexSearcher(indexStoreB);\n\nHits hits = arrSearcher[0].search(query);\nassertEquals(1, hits.length());\n\nhits = arrSearcher[1].search(query);\n\n//fail here because query rewrite will not use new term.\n//The problem should sit inside spanquery, maybe it only call rewrite function once.\n//Anyway, I didn't check its source code yet.\nassertEquals(1, hits.length()); \n\narrSearcher[0].close();\narrSearcher[1].close();\n\n\n",
            "date": "2009-06-12T19:20:27.306+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Hmm... do you have a patch in mind (to Lucene's sources) to fix this?",
            "date": "2009-06-12T19:51:10.362+0000",
            "id": 6
        },
        {
            "author": "Billow Gao",
            "body": "I rewrote the MultiSearcher for my system. Actually, we rewrote most lucene analyzer/parser/search functions...\nSo my patch won't work for others.\n\nI will look into the SpanQuery function when I get a chance. I believe that our patch should be applied there.\nAlso, I don't like MultiSearcher's combine function.",
            "date": "2009-06-12T19:59:33.069+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I rewrote the MultiSearcher for my system. Actually, we rewrote most lucene analyzer/parser/search functions...\n\nSounds interesting!  Anything that could be contributed back?\n\nbq. Also, I don't like MultiSearcher's combine function.\n\nI don't either!  It seems like Lucene should rewrite then search, against each searcher, rather than rewriting all up front and combining.",
            "date": "2009-06-12T20:08:01.089+0000",
            "id": 8
        },
        {
            "author": "Billow Gao",
            "body": "The system is specially designed for special requirement. So they are not for general purpose.\nAdded many limitation and extended some search features.\nI will re-organize and extract those useful for public, and then contribute them.\nBut not a good time to do that now. Will wait until they are stable enough.",
            "date": "2009-06-12T20:18:48.296+0000",
            "id": 9
        },
        {
            "author": "Mark Miller",
            "body": "Something is modifying the original query itself.\n\nIn MultiSearcher.rewrite:\n\n  public Query rewrite(Query original) throws IOException {\n    Query[] queries = new Query[searchables.length];\n    for (int i = 0; i < searchables.length; i++) {\n      queries[i] = searchables[i].rewrite(original);\n    }\n    return queries[0].combine(queries);\n  }\n\nOn the first time through the loop, the SpanRegexQuery will contain the regex pattern, but the first time it hits rewrite, it will be changed to the expanded query. This shouldnt happen.\nOn the next time through the loop, original query will not contain a regex pattern, but will instead be the first time through the loop's rewritten query. Oddness.\n\nI'll dig in and try and fix for 2.9.",
            "date": "2009-06-15T16:14:41.897+0000",
            "id": 10
        },
        {
            "author": "Mark Miller",
            "body": "Well yuck.\n\nSpanNearQuery does this clone call in its rewrite method but there is no clone impl - so it looks like it returns a SpanNearQuery with the same clauses instance. So it looks like this gets tangled up with the real query, and the real query gets modified to the rewritten form for the rewrite on searchable2.\n\nI think anyway. I wanted to just test a fix to if that was right, but SpanNearQuery can contain any span queries, so I guess all of them might need clone impls and we may have to clone the whole chain?\n\nA little tired to think about it at the moment ;) Looks like the issue is with the cloning in SpanNearQuery though.",
            "date": "2009-06-18T04:33:08.900+0000",
            "id": 11
        },
        {
            "author": "Mark Miller",
            "body": "Test + Fix (properly implement clone on near,or,not span queries)",
            "date": "2009-06-24T19:13:04.439+0000",
            "id": 12
        }
    ],
    "component": "modules/other",
    "description": "MultiSearcher is using:\nqueries[i] = searchables[i].rewrite(original);\nto rewrite query and then use combine to combine them.\n\nBut SpanRegexQuery's rewrite is different from others.\nAfter you call it on the same query, it always return the same rewritten queries.\n\nAs a result, only search on the first IndexSearcher work. All others are using the first IndexSearcher's rewrite queries.\nSo many terms are missing and return unexpected result.\n\nBillow",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1599",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "SpanRegexQuery and SpanNearQuery is not working with MultiSearcher",
    "systemSpecification": true,
    "version": "2.4.1"
}