{
    "comments": [
        {
            "author": "Ryan McKinley",
            "body": "This is the lucene only parts of SOLR-2134",
            "date": "2010-09-26T22:13:09.726+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "Ah - I was just about to report \"hmmm, doesn't seem to be working\".  But then I realized you separated them out and this is the lucene part only.\n\nIMO - if you're working on these together (and esp if the original motivation was to ultimately get the functionallity into Solr, it's simpler to keep it as a single issue / single patch).\n\nedit: and two patches are tougher to deal with - in fact, I can't apply the solr one either with or without this patch... not sure what's up.",
            "date": "2010-09-27T00:23:57.492+0000",
            "id": 1
        },
        {
            "author": "Ryan McKinley",
            "body": "added in #1002460 -- this can be backported to 3.x when LUCENE-2665 is stabalized",
            "date": "2010-09-29T04:15:34.378+0000",
            "id": 2
        },
        {
            "author": "Ryan McKinley",
            "body": "Note, this solution does not (yet) address Uwe's concern about sorting NaN and real POSITIVE_INFINITY/NEGATIVE_INFINITY values.\n\nI'm going to punt that to a different issues since it preexisted this one\n",
            "date": "2010-09-29T04:21:45.167+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi Ryan,\n\nthis patch causes tons of unchecked warnings, without it, Lucene compiles without any.\n\nThe generics policeman does not understand this code so he cannot fix:\n\n{noformat}\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:209: warning: [unchecked] unchecked cast\n    [javac] found   : java.lang.Object\n    [javac] required: T\n    [javac]         key.creator.validate( (T)value, reader);\n    [javac]                                  ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:278: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry\n    [javac]     return (ByteValues)caches.get(Byte.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                          ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:278: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache\n    [javac]     return (ByteValues)caches.get(Byte.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                 ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:293: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry\n    [javac]     return (ShortValues)caches.get(Short.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                            ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:293: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache\n    [javac]     return (ShortValues)caches.get(Short.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                   ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:308: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry\n    [javac]     return (IntValues)caches.get(Integer.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                            ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:308: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache\n    [javac]     return (IntValues)caches.get(Integer.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                   ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:323: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry\n    [javac]     return (FloatValues)caches.get(Float.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                            ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:323: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache\n    [javac]     return (FloatValues)caches.get(Float.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                   ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:337: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry\n    [javac]     return (LongValues)caches.get(Long.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                          ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:337: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache\n    [javac]     return (LongValues)caches.get(Long.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                 ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:352: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry\n    [javac]     return (DoubleValues)caches.get(Double.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                              ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:352: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache\n    [javac]     return (DoubleValues)caches.get(Double.TYPE).get(reader, new Entry(field, creator));\n    [javac]                                                     ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:366: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry\n    [javac]     return (DocTermsIndex)caches.get(DocTermsIndex.class).get(reader, new Entry(field, creator));\n    [javac]                                                                       ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:366: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache\n    [javac]     return (DocTermsIndex)caches.get(DocTermsIndex.class).get(reader, new Entry(field, creator));\n    [javac]                                                              ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:382: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry\n    [javac]     return (DocTerms)caches.get(DocTerms.class).get(reader, new Entry(field, creator));\n    [javac]                                                             ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\FieldCacheImpl.java:382: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry<T>) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache\n    [javac]     return (DocTerms)caches.get(DocTerms.class).get(reader, new Entry(field, creator));\n    [javac]                                                    ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\cache\\DocTermsCreator.java:137: warning: [unchecked] unchecked cast\n    [javac] found   : org.apache.lucene.search.cache.DocTermsCreator.DocTermsImpl\n    [javac] required: T\n    [javac]     return (T)new DocTermsImpl(bytes.freeze(true), docToOffset.getMutable());\n    [javac]               ^\n    [javac] C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-solr\\lucene\\src\\java\\org\\apache\\lucene\\search\\cache\\DocTermsIndexCreator.java:169: warning: [unchecked] unchecked cast\n    [javac] found   : org.apache.lucene.search.cache.DocTermsIndexCreator.DocTermsIndexImpl\n    [javac] required: T\n    [javac]     return (T)new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    [javac]               ^\n{noformat}",
            "date": "2010-10-01T20:21:09.651+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Additionally, the source code formatting is not Lucene-conform (should be no newline before {, no extra space around method parameters).",
            "date": "2010-10-01T20:22:28.751+0000",
            "id": 5
        },
        {
            "author": "Ryan McKinley",
            "body": "here is a patch that ignores all the unchecked casts\n{code:java}\n @SuppressWarnings(\"unchecked\")\n{code}\n\nI don't think there is any way around this for the current design -- in LUCENE-2665, the cache would directly use the generic map, but for the baby step it needs a cast.\n\nThe issues is that we have:\n{code:java}\nprivate Map<Class<?>,Cache> caches;\n{code}\n\nand really need to be able to define something like:\n{code:java}\nprivate Map<Class<X>,Cache<? extends X>> caches;\n{code}\nwhere X depends on what you put into the map...  but that is not possible as far as I know.\n\n- - -\n\nI would commit this, but the build is failing for other reasons....  \n\n",
            "date": "2010-10-14T00:28:39.564+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "I am concerned about the @SuppressWarnings here, for two reasons:\n\n# I don't think we should use this except in limited circumstances where its not our fault (see below)\n# I don't think we should leave the API broken pending some massive \"rework fieldcache\" issue, which it appears has been attempted before...\n# I don't understand the generics in the current API at all\n\nIn general with SuppressWarnings, i think we should limit our uses to cases where its really a false warning\n* generic collections/array problems\n* documenting intentional fallthroughs in switch statements\n* possibly autogenerated code from something else like javacc/jflex\n\nI'd like for us to remove the SuppressWarnings and look at what we can do to fix the API right now as-is.",
            "date": "2010-10-16T13:04:03.075+0000",
            "id": 7
        },
        {
            "author": "Ryan McKinley",
            "body": "\nbq. I don't think we should leave the API broken pending some massive \"rework fieldcache\" issue, which it appears has been attempted before...\n\nWhat part of the API is broken?  The assumptions about what is in the Map are are internal to a private member that can not be touched outside this ugly class.  My reference to \n\n\nTo avoid the compiler warning, we could do something like:\n{code:java}\n  public DoubleValues getDoubles(IndexReader reader, String field, EntryCreator<DoubleValues> creator ) throws IOException {\n    Object v = caches.get(Double.TYPE).get(reader, new Entry(field, creator));\n    if( v instanceof DoubleValues ) {\n      return (DoubleValues)v;\n    }\n    throw new RuntimeException( \"should be of type DoubleValues rather then: \"+v.getClass() );\n  }\n{code}\nBut this is more complex and equivalent to the ClassCastException that would be thrown with the original code.\n\nAnother option is to drop the caches Map<Class,Cache> since that is where we lose what type the output should be.  I will post a patch with this option",
            "date": "2010-10-16T18:16:20.095+0000",
            "id": 8
        },
        {
            "author": "Ryan McKinley",
            "body": "This patch reduces the number of compiler warnings by removing a Map and replacing it with specific classes.  That is rather then:\n{code:java}\nprivate Map<Class<?>,Cache> caches;\n{code}\nwe would have\n{code:java}\n  private Cache<ByteValues> byteCache;\n  private Cache<ShortValues> shortCache;\n  private Cache<IntValues> intCache;\n  private Cache<FloatValues> floatCache;\n  private Cache<LongValues> longCache;\n  private Cache<DoubleValues> doubleCache;\n  private Cache<DocTermsIndex> docTermsIndexCache;\n  private Cache<DocTerms> docTermsCache;\n  private final List<Cache<?>> caches = new ArrayList<Cache<?>>();\n{code}\n\nand then each type looks up its values directly:\n{code:java}\n  public IntValues getInts(IndexReader reader, String field, EntryCreator<IntValues> creator ) throws IOException {\n    return intCache.get(reader, new Entry<IntValues>(field, creator));\n  }\n{code}\n\nHowever, this approach still leaves one place that has class cast.  since the Cache holds a CreationPlaceholder while it is making the object, we can not use a simple generic Map.  Again, we could add some extra instanceof checks, but I don't think that adds anything\n\n",
            "date": "2010-10-16T18:24:01.137+0000",
            "id": 9
        },
        {
            "author": "Yonik Seeley",
            "body": "Hopefully if/when this cache moves to IndexReader, we will still be able to cache arbitrary stuff on the reader?",
            "date": "2010-10-16T18:39:27.508+0000",
            "id": 10
        },
        {
            "author": "Ryan McKinley",
            "body": "bq. Hopefully if/when this cache moves to IndexReader, we will still be able to cache arbitrary stuff on the reader? \n\nYa, the ReaderCache proposed in LUCENE-2665 simply uses the key from EntryCreator.getCacheKey().\n\n\n",
            "date": "2010-10-16T20:34:12.127+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "bq. What part of the API is broken? \n\nDocTermsCreator\n\nbq. The assumptions about what is in the Map are are internal to a private member that can not be touched outside this ugly class.\n\nThis is a public class.\n\nIt is parameterized as T extends DocTerms, but \n{noformat}\n  @Override\n  public T create(IndexReader reader) throws IOException {\n{noformat}\n\nThis is not true, it returns DocTermCreator.DocTermsImpl and gives an ugly cast\n{noformat}\n    final T t =\n      (T)new DocTermsImpl(bytes.freeze(true), docToOffset.getMutable());\n    return t;\n{noformat}\n\nThe api doesn't look extensible to me, I'm surprised it works. I guess this is why the compiler complains.\n\nGranted i didnt take a lot of time to look it over, but the compiler warnings speak loudly enough in my favor.\n",
            "date": "2010-10-16T20:44:56.701+0000",
            "id": 12
        },
        {
            "author": "Ryan McKinley",
            "body": "bq. This is not true, it returns DocTermCreator.DocTermsImpl and gives an ugly cast\n\nDocTermCreator.DocTermsImpl (a private class only accessible within DocTermCreator) extends DocTerms and so it is true.\n\nI won't argue about the ugly cast. :)\n\nin #1023379 I changed DocTermsCreator and DocTermsIndexCreator to bind directly to the class (rather then T extends XXX)  This is a bit more clear, but does not let you extend the generic API (not that you need to)",
            "date": "2010-10-16T21:29:16.137+0000",
            "id": 13
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nin #1023379 I changed DocTermsCreator and DocTermsIndexCreator to bind directly to the class (rather then T extends XXX) This is a bit more clear, but does not let you extend the generic API (not that you need to)\n{quote}\n\nthanks Ryan!",
            "date": "2010-10-16T21:57:18.469+0000",
            "id": 14
        },
        {
            "author": "Ryan McKinley",
            "body": "here is a new patch that applies cleanly.\n\nI could go either way for -- keep it as it is, vs drop the first layer generic map",
            "date": "2010-10-17T12:34:45.982+0000",
            "id": 15
        },
        {
            "author": "Yonik Seeley",
            "body": "(carried over from LUCENE-2649... I guess my last patch should have been here.)\n\nActually, looking a bit further at these comparators, it seems like we have an unnecessary cast in the inner-loop method compareBottom (because of type erasure)?\nSeems like we should just cache the int[] or whatever to avoid that.\nI'll work up another patch for consideration.",
            "date": "2010-12-08T17:26:52.637+0000",
            "id": 16
        },
        {
            "author": "Yonik Seeley",
            "body": "OK, here's a patch that caches the typed array as \"docValues\"\nand moves the ShortComparator next to the other numeric comparators (since it wasn't next to the others, I actually missed it in my first patch).",
            "date": "2010-12-08T17:43:44.221+0000",
            "id": 17
        },
        {
            "author": "Ryan McKinley",
            "body": "Looks good -- should we also get rid of the lazy initialization that then allocates at the end anyway (with FloatValuesCreator, LongValuesCreator, and DoubleValuesCreator)?  ",
            "date": "2010-12-10T17:05:11.576+0000",
            "id": 18
        },
        {
            "author": "Ryan McKinley",
            "body": "This was fixed a while ago -- i think it fixes all concerns...\n\nDoes this mean we should now deprecate:\n org.apache.solr.schema.Sortable*\n?\n\n\n",
            "date": "2011-01-29T18:31:40.287+0000",
            "id": 19
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. Does this mean we should now deprecate: org.apache.solr.schema.Sortable*\n\nSure - I already removed references to those classes from the example schema.",
            "date": "2011-01-29T18:48:11.023+0000",
            "id": 20
        },
        {
            "author": "Ryan McKinley",
            "body": "in r1065093, i deprecated the sortable* fields and noted they will be removed in 5.x (seems so far away!)",
            "date": "2011-01-29T19:44:31.693+0000",
            "id": 21
        }
    ],
    "component": "core/search",
    "description": "When SortField and ValueComparator use EntryCreators (from LUCENE-2649) they use a special sort value when the field is missing.\n\nThis enables lucene to implement 'sort missing last' or 'sort missing first' for numeric values from the FieldCache.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2671",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add sort missing first/last ability to SortField and ValueComparator",
    "systemSpecification": true,
    "version": ""
}