{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "{noformat}\n    [junit] Testsuite: org.apache.lucene.index.codecs.pulsing.Test10KPulsings\n    [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 1.81 sec\n    [junit] \n    [junit] ------------- Standard Output ---------------\n    [junit] CheckIndex failed\n    [junit] Segments file=segments_e numSegments=1 version=4.0 format=FORMAT_4_0 [Lucene 4.0]\n    [junit]   1 of 1: name=_p docCount=10050\n    [junit]     codec=SegmentCodecs [codecs=[Pulsing(freqCutoff=3)], provider=RandomCodecProvider: {}]\n    [junit]     compound=true\n    [junit]     hasProx=true\n    [junit]     numFiles=2\n    [junit]     size (MB)=3,141\n    [junit]     diagnostics = {optimize=false, mergeFactor=3, os.version=2.6.38-8-generic, os=Linux, lucene.version=4.0-SNAPSHOT, source=merge, os.arch=amd64, java.version=1.6.0_25, java.vendor=Sun Microsystems Inc.}\n    [junit]     no deletions\n    [junit]     test: open reader.........FAILED\n    [junit]     WARNING: fixIndex() would remove reference to this segment; full exception:\n    [junit] java.io.IOException: No sub-file with id _0-1.dat found (files: [_0.cfs, _0.tib, _0.tiv, .fnm, _0.cfe, _0.frq, .fdt, .nrm, _0.prx, .fdx])\n    [junit] \tat org.apache.lucene.store.CompoundFileDirectory.openInput(CompoundFileDirectory.java:198)\n    [junit] \tat org.apache.lucene.store.MockCompoundFileDirectoryWrapper.openInput(MockCompoundFileDirectoryWrapper.java:55)\n    [junit] \tat org.apache.lucene.index.values.Bytes$BytesReaderBase.<init>(Bytes.java:448)\n    [junit] \tat org.apache.lucene.index.values.VarDerefBytesImpl$Reader.<init>(VarDerefBytesImpl.java:225)\n    [junit] \tat org.apache.lucene.index.values.Bytes.getValues(Bytes.java:177)\n    [junit] \tat org.apache.lucene.index.codecs.DefaultDocValuesProducer.loadDocValues(DefaultDocValuesProducer.java:170)\n    [junit] \tat org.apache.lucene.index.codecs.DefaultDocValuesProducer.load(DefaultDocValuesProducer.java:113)\n    [junit] \tat org.apache.lucene.index.codecs.DefaultDocValuesProducer.<init>(DefaultDocValuesProducer.java:86)\n    [junit] \tat org.apache.lucene.index.codecs.pulsing.PulsingCodec.docsProducer(PulsingCodec.java:184)\n    [junit] \tat org.apache.lucene.index.PerFieldCodecWrapper$PerDocProducers.<init>(PerFieldCodecWrapper.java:224)\n    [junit] \tat org.apache.lucene.index.PerFieldCodecWrapper.docsProducer(PerFieldCodecWrapper.java:207)\n    [junit] \tat org.apache.lucene.index.SegmentCoreReaders.<init>(SegmentCoreReaders.java:92)\n    [junit] \tat org.apache.lucene.index.SegmentReader.get(SegmentReader.java:113)\n    [junit] \tat org.apache.lucene.index.SegmentReader.get(SegmentReader.java:92)\n    [junit] \tat org.apache.lucene.index.CheckIndex.checkIndex(CheckIndex.java:517)\n    [junit] \tat org.apache.lucene.util._TestUtil.checkIndex(_TestUtil.java:158)\n    [junit] \tat org.apache.lucene.util._TestUtil.checkIndex(_TestUtil.java:148)\n    [junit] \tat org.apache.lucene.index.codecs.pulsing.Test10KPulsings.test10kPulsed(Test10KPulsings.java:92)\n...\n    [junit] ------------- Standard Error -----------------\n    [junit] NOTE: reproduce with: ant test -Dtestcase=Test10KPulsings -Dtestmethod=test10kPulsed -Dtests.seed=2835406743900800199:-6668246351730332054\n{noformat}",
            "date": "2011-07-27T05:46:17.911+0000",
            "id": 0
        },
        {
            "author": "Simon Willnauer",
            "body": "I will look into this hopefully soon",
            "date": "2011-07-27T09:47:42.512+0000",
            "id": 1
        },
        {
            "author": "Simon Willnauer",
            "body": "Robert, is it possible that checkIndex gets a different codec provider which randomly set the useCFSforDV flag?",
            "date": "2011-07-27T10:59:15.903+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "That might be, but I think its still a bug here, because you cannot read a index written with \"Pulsing\" (it does not indicate this flag in any way in the index.\n\n* who randomly sets this flag?\n* do we need this flag at all? why can't it always be true?\n\n",
            "date": "2011-07-27T12:53:40.949+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "This flag can be per-segment right?\n\nAnother idea is, if the flag is important to docvalues, we write it into fieldinfos.\nwe decided to make docvalues a part of core, and I think this would make better sense.\n\nI don't like the way this works today, we are out of normal field bits (I used the last one for LUCENE-2048), but docvalues adds a whole 'type byte' that is always written, when in the majority of causes there won't even be a docvalues.\n\nI think instead, we should add a second 'type byte', and the first flag is 'hasDocValues', if this is true, then there is follow-on byte for docvalues flags, which could include this one.\n\nI will open an issue.\n",
            "date": "2011-07-27T13:21:16.036+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "Sorry, just realized this flag is stored in Codec, for all its fields right?\n\nCan we change this? It seems if the boolean is important enough to be configurable, and important enough to open an index, we should put it in SI or something? (does it really need to be configurable on per-codec basis?) Couldn't we then just pass the Directory explicitly to producer/consumer and the codec is then unaware?\n\nbut separately we should still reorganize the fieldinfos bits i think.",
            "date": "2011-07-27T15:07:05.415+0000",
            "id": 5
        },
        {
            "author": "Simon Willnauer",
            "body": "I think we should make useCompoundFile totally private to the Codec ie. not configurable via a setter. If you want to change to CFS / non-CFS for DocValues you should either subclass and therefore create a new codec or create an entirely new codec. That way this is private to the codec plus recored in the index in SegmentCodecs via the codecs name.",
            "date": "2011-08-18T21:13:01.639+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "+1",
            "date": "2011-08-18T21:15:29.849+0000",
            "id": 7
        },
        {
            "author": "Simon Willnauer",
            "body": "here is a patch that makes the CFS option private to the codec. Currently all codecs default to use CFS for docvalues. For testcoverage I added a MockRandomDocValues codec that always uses noCFS. \nIf you want to change to noCFS for docvalues you need to subclass a codec and give it a name since those settings are final now.",
            "date": "2011-08-23T09:06:50.598+0000",
            "id": 8
        },
        {
            "author": "Simon Willnauer",
            "body": "updated patch, I plan to commit shortly",
            "date": "2011-08-28T09:57:54.876+0000",
            "id": 9
        },
        {
            "author": "Simon Willnauer",
            "body": "committed in revision 1162489",
            "date": "2011-08-28T10:11:41.109+0000",
            "id": 10
        }
    ],
    "component": "",
    "description": "I created a test for LUCENE-3335, and it found an unrelated bug in docvalues.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3345",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "docvalues FNFE",
    "systemSpecification": true,
    "version": ""
}