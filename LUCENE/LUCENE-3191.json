{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Patch.\n\nThe basic idea is simple (use PQ to find top N across all shards),\nbut, I had to add FieldComparator.compare(Comparable, Comparable).\nIe, the FieldComparator should be able to compare the Comparables\nreturned by its value method.\n",
            "date": "2011-06-10T19:50:08.354+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. The basic idea is simple (use PQ to find top N across all shards), but, I had to add FieldComparator.compare(Comparable, Comparable).\n\nThat makes no sense to me, because Comparable<?> can always compare against each other without a separate comparator. The old MultiSearcher did exactly do this. This is why it returns Comparable<?>. So instead FieldComparator.compare(a, b) just use a.compareTo(b). It's in the responsibility of the Comparator to return a correctly wrapped Comparable.\n\nThere might only be a bug in RelevanceComparator: Its getValue() method returns a comparable that sorts in wrong order. We have no test for this, so it might never cause a test failure.",
            "date": "2011-06-10T20:07:59.671+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Uwe, you are right!  Now why didn't I think of that...\n\nThe returned Comparable should be expected to properly compare itself to any other Comparable returned from FieldComparator.value... so I'll do that and then the patch is nice and small.  And no API change for 3.x.",
            "date": "2011-06-10T20:44:36.120+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "So... I started down this path (relying on the returned Comparable\nfrom .value to .compareTo themselves, instead of adding new .compare\nmethod to FieldComp), but I'm not sure I like it...\n\nI had to add a ReverseFloatComparable inside RelevanceComp, since it\nsorts opposite natural Float sort order by default.\n\nBut then what this means, for an app that wants to do some sharding,\nsuddenly a TopDocs might contain an instance of this class, whereas\nnow it contains plain Java objects (Float, Integer, etc.).\n\nI also don't like that this is splitting up the logic of how relevacne\nscores compare to one another across two places (RelevanceComp and\nthis new ReverseFloatComparable).\n\nI think it'd be better if we keep simple objects in the TopDocs, to\nkeep it easy for apps to serialize themselves (since we don't impl\nSerializable anymore), and then the front end would invoke\nRelevanceComparator locally to properly compare the floats.\n\nIe, really FieldComp.value should never have returned Comparable, I\nthink?\n",
            "date": "2011-06-10T21:29:24.044+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "This still confuses me:\n\nbq. There might only be a bug in RelevanceComparator: Its getValue() method returns a comparable that sorts in wrong order. We have no test for this, so it might never cause a test failure.\n\nIn my opinion, it should return a negative Float object. But as far as I know, there was/is already some special case in the collectors merge code used to merge segment's results (FieldValueHitQueue.fillFields copys the values into the collected docs, but I am not sure if this is still used.\n\nThe good old deprecated FieldDocSortedHitQueue in 3.x (what's the replacement?) contains this special case:\n\n{code}\n} else {\n  c = docA.fields[i].compareTo(docB.fields[i]);\n  if (type == SortField.SCORE) {\n    c = -c;\n  }\n}\n{code}\n\nIn trunk it's gone, so we can maybe fix this stupidness. The Comparable returned by RelevanceComparator (used with SortField.SCORE) should simply be negative? Else we have to add this special case in your TopDocs.merge, too.",
            "date": "2011-06-10T21:35:25.511+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "By the way, in current trunk the value() method in FieldComparator is obsolete and slows down search, if the field values are not needed. But of course, this patch makes use of it again, but we should correct it.",
            "date": "2011-06-10T21:36:46.594+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "We had some discussions about cleaning this up in IRC: [http://colabti.org/irclogger/irclogger_log/lucene-dev?date=2011-06-10#l235]",
            "date": "2011-06-10T23:09:18.171+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "New patch:\n\n  * Changes .value from Comparator (which is trappy because you think\n    you're free to .compareTo them) to parameterized type passed to\n    FieldComparator.\n\n  * Renames .compare -> .compareValues, which are now type checked w/\n    generic.\n\n  * Changes FieldDoc.fields from Comparable[] to Object[]\n\nWill need to work out how we backport this to 3.x; the change from\nComparable to Object is an API break, though... maybe not many apps\nare using FieldDoc.field.\n",
            "date": "2011-06-10T23:15:36.997+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "New patch, adds default impl for FC.compareValues to just cast to Comparable<T> and call .compareTo.  All but 2 places just use this default...",
            "date": "2011-06-10T23:40:23.666+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "Looks fine, I am happy now :-)\n\nThe RelevanceComparator should use simply to minimize unboxing:\n\n{code}\n+    public int compareValues(Float first, Float second) {\n+      return second.compareTo(first); // reverse!\n+    }\n{code}\n\nWill review more closely tomorrow!",
            "date": "2011-06-10T23:50:17.412+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Uwe; I'll fix that.",
            "date": "2011-06-11T10:49:31.075+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "New patch, addresses feedback from Uwe (thanks!), and also adds\nmerging for TopGroups and SearchGroup to make distributed grouping\neasy(ier).\n\nI think it's ready to commit!\n",
            "date": "2011-06-12T17:32:17.375+0000",
            "id": 11
        },
        {
            "author": "Michael McCandless",
            "body": "For 3.x, I think we should make an exception to back-compat and break the API (changing FieldComp.value(..) to return <T> not Comparable; changing FieldDoc.fields from Comparable[] to Object[]).  I'll advertise the break in CHANGES.",
            "date": "2011-06-15T17:34:42.308+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "I think this has less impact on users. Two user types:\n\n- People using FieldDoc.fields[] would always cast the return type, so a simple recompile should be fine\n- People writing own FieldComparators must change return value of getValue() and maybe add generics (not required)\n- People that dont implement compareValue() will be also fine, as the default impl casts to Comparable and that will have the same behaviour\n\nThe 3.x impl just have to fix FieldDocSortedHitQueue to use compareValue() and remove the negation for scores.",
            "date": "2011-06-15T18:08:23.788+0000",
            "id": 13
        },
        {
            "author": "Michael McCandless",
            "body": "Patch for merging back to 3.x.",
            "date": "2011-06-15T18:08:56.259+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "Patch looks good, let the BackwardsPoliceman think about some possibilities to lower the risk of breaking code. Of course nothing sophisticated...",
            "date": "2011-06-15T18:17:13.011+0000",
            "id": 15
        },
        {
            "author": "Michael McCandless",
            "body": "Small further patch for trunk:\n\n  * Simplifies the API by moving shardIndex onto ScoreDoc\n\n  * Fixes TopDocs.merge to return TopFieldDocs if the Sort != null\n\n  * A couple FieldComparators must override compareValue because the\n    values may be null.\n",
            "date": "2011-06-15T18:38:01.379+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Uwe!",
            "date": "2011-06-16T15:07:17.039+0000",
            "id": 17
        },
        {
            "author": "Robert Muir",
            "body": "Reopening: this code in SlowCollatedStringComparator is totally broken:\n{noformat}\n  @Override\n  public int compareValues(BytesRef first, BytesRef second) {\n    if (first == null) {\n      if (second == null) {\n        return 0;\n      }\n      return -1;\n    } else if (second == null) {\n      return 1;\n    } else {\n      return collator.compare(first, second);\n    }\n  }\n{noformat}\n\nI haven't tracked this issue to understand whats going on here, but you cannot pass BytesRefs to collator.compare. If this code is ever reached (and looking at the test i wrote for this damn thing, its unclear if this code is even necessary?!), it *will* throw ClassCastException:\nhttp://download.oracle.com/javase/1,5.0/docs/api/java/text/Collator.html#compare(java.lang.Object, java.lang.Object)\n",
            "date": "2011-06-28T02:08:50.764+0000",
            "id": 18
        },
        {
            "author": "Uwe Schindler",
            "body": "I looked at the code, it was ununderstandable why this thing was generified to BytesRef at all. As it compares String, getValue() and compareValue() should take Strings.\n\nAnd thats done in the patch, its even a little bit no so slow :-)",
            "date": "2011-06-28T06:32:33.518+0000",
            "id": 19
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. I haven't tracked this issue to understand whats going on here, but you cannot pass BytesRefs to collator.compare. If this code is ever reached (and looking at the test i wrote for this damn thing, its unclear if this code is even necessary?!)\n\nThe code is necessary once you -cross segments during compare- merge TopDocs. -Maybe the index in the tests is so small that it never has multiple segments.-\n\nThe clover report shows that this is not the case, it even shows that compare does not use compareBottom():\n[https://builds.apache.org/job/Lucene-trunk/clover/org/apache/lucene/search/SlowCollatedStringComparator.html]\n\n-It never ever calls even compareBottom() so this index is really small. We should make it bigger to test correctly. The getValue() method is only called because the actual String (previously: BytesRef) values are placed in TopFieldDocs.-",
            "date": "2011-06-28T06:37:09.586+0000",
            "id": 20
        },
        {
            "author": "Uwe Schindler",
            "body": "New patch that also checks the getValue/compareValues methods in the comparator.\n\nSorry, my earlier comment about too small indexes was wrong. The indexes in fact have segments. The problem was that I was irritated by the former MultiSearcher code that used these compareValues() code. In trunk, only TopDocs.merge() does this.\n\nSo I changed the test:\n- It does not use MatchAllDocsQuery, instead two TermRangeQueries with a random center point, so it splits the index into two parts. Each result is sorted and checked that its valid.\n- With the two result sets it calls TopDocs.merge() and again checks the result. This call will invoke the value methods and here the test fails as Robert said.\n- For each search call it does *not* always set the maximum number of docs as PQ size (else compareBottom/setBottom) are not tested. It reduces the PQ size to a fraction of numDocs for all searches.\n\nIn general we should add similar tests to all custom comparators in Lucene's code, because the comparator can only be tested completely if you also check merging TopDocs.",
            "date": "2011-06-28T07:26:13.015+0000",
            "id": 21
        },
        {
            "author": "Robert Muir",
            "body": "ahh thank you!!! I was very confused at why this method was untested!",
            "date": "2011-06-28T11:41:12.383+0000",
            "id": 22
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Uwe and Robert -- good catch!  Scary.\n\nMaybe, to better test TopDocs.merge, we could fix newSearcher (AssertingIndexSearcher) to, sometimes, break into N searches on the sub-searchers and then merge the results, from its search methods?",
            "date": "2011-06-28T13:23:06.907+0000",
            "id": 23
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed fix trunk rev 1140713",
            "date": "2011-06-28T16:34:42.985+0000",
            "id": 24
        },
        {
            "author": "Uwe Schindler",
            "body": "Mike: This is a good idea, not sure if this could break scores, ranking and other things :-)",
            "date": "2011-06-28T16:49:45.336+0000",
            "id": 25
        },
        {
            "author": "Robert Muir",
            "body": "also remember, when you call newSearcher, it optionally takes a default boolean parameter (maybeWrap, default=true).\n\nSo tests sensitive to stuff like this can just pass false here... in general I think beefing up newSearcher with stuff like this is a good idea, so far adding logic here (randomly use executor, randomly use slowwrapper, etc) has always found some bugs... eventually\n",
            "date": "2011-06-28T16:58:16.000+0000",
            "id": 26
        },
        {
            "author": "Michael McCandless",
            "body": "I added this to the TestIdeas wiki page.\n",
            "date": "2011-06-28T17:00:54.680+0000",
            "id": 27
        },
        {
            "author": "Michael McCandless",
            "body": "This can be done w/o breaking scores -- we can create a top-level weight, and then search against the subs (this is how TestTopDocs works).",
            "date": "2011-06-28T17:01:50.387+0000",
            "id": 28
        },
        {
            "author": "Robert Muir",
            "body": "bulk close for 3.3",
            "date": "2011-07-02T02:40:11.109+0000",
            "id": 29
        }
    ],
    "component": "",
    "description": "It's not easy today to merge TopDocs, eg produced by multiple shards,\nsupporting arbitrary Sort.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3191",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add TopDocs.merge to merge multiple TopDocs",
    "systemSpecification": true,
    "version": ""
}