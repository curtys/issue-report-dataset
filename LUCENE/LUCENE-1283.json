{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Attached patch.  I plan to commit in a day or two.",
            "date": "2008-05-10T10:35:11.517+0000",
            "id": 0
        }
    ],
    "component": "core/index",
    "description": "DocumentsWriter uses byte slices into shared byte[]'s to hold the\ngrowing postings data for many different terms in memory.  This is\nprobably the trickiest (most confusing) part of DocumentsWriter.\n\nRight now it's not cleanly factored out and not easy to separately\ntest.  In working on this issue:\n\n  http://mail-archives.apache.org/mod_mbox/lucene-java-user/200805.mbox/%3c126142c0805061426n1168421ya5594ef854fae5e4@mail.gmail.com%3e\n\nwhich eventually turned out to be a bug in Oracle JRE's JIT compiler,\nI factored out ByteSliceWriter and created a unit test to stress test\nthe writing & reading of byte slices.  The test just randomly writes N\nstreams interleaved into shared byte[]'s, then reads them back\nverifying the results are correct.\n\nI created the stress test to try to find any bugs in that code.  The\ntest ran fine (no bugs were found) but I think the refactoring is\nstill very much worthwhile.\n\nI expected the changes to reduce indexing throughput, so I ran a test\nindexing first 200K Wikipedia docs using this alg:\n\n{code}\nanalyzer=org.apache.lucene.analysis.standard.StandardAnalyzer\ndoc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker\n\ndocs.file=/Volumes/External/lucene/wiki.txt\ndoc.stored = true\ndoc.term.vector = true\ndoc.add.log.step=2000\n\ndirectory=FSDirectory\nautocommit=false\ncompound=true\n\nram.flush.mb=256\n\n{ \"Rounds\"\n  ResetSystemErase\n  { \"BuildIndex\"\n    - CreateIndex\n     { \"AddDocs\" AddDoc > : 200000\n    - CloseIndex\n  }\n  NewRound\n} : 4\n\nRepSumByPrefRound BuildIndex\n\n{code}\n\nOk trunk it produces these results:\n{code}\nOperation   round   runCnt   recsPerRun        rec/s  elapsedSec    avgUsedMem    avgTotalMem\nBuildIndex      0        1       200000        791.7      252.63   338,552,096  1,061,814,272\nBuildIndex -  - 1 -  -   1 -  -  200000 -  -   793.1 -  - 252.18 - 605,262,080  1,061,814,272\nBuildIndex      2        1       200000        794.8      251.63   601,966,528  1,061,814,272\nBuildIndex -  - 3 -  -   1 -  -  200000 -  -   782.5 -  - 255.58 - 608,699,712  1,061,814,272\n{code}\n\nand with the patch:\n\n{code}\nOperation   round   runCnt   recsPerRun        rec/s  elapsedSec    avgUsedMem    avgTotalMem\nBuildIndex      0        1       200000        745.0      268.47   338,318,784  1,061,814,272\nBuildIndex -  - 1 -  -   1 -  -  200000 -  -   792.7 -  - 252.30 - 605,331,776  1,061,814,272\nBuildIndex      2        1       200000        786.7      254.24   602,915,712  1,061,814,272\nBuildIndex -  - 3 -  -   1 -  -  200000 -  -   795.3 -  - 251.48 - 602,378,624  1,061,814,272\n{code}\n\nSo it looks like the performance cost of this change is negligible (in\nthe noise).\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1283",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Factor out ByteSliceWriter from DocumentsWriterFieldData",
    "systemSpecification": true,
    "version": "2.3, 2.3.1"
}