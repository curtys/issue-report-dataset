{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "I think that newDirectory(Directory) is weird. I'd think we'll have a newDirectory(File) which will either return a FSDir on that File, or a RAMDir where the files are copied into it.\n\nOf all the tests we have, only one calls this method and from what I can tell, for no good reason. The method just copies the incoming Dir to another one, an operation I think is useless for tests purposes.",
            "date": "2010-12-07T04:30:15.030+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "bq. Of all the tests we have, only one calls this method and from what I can tell, for no good reason. The method just copies the incoming Dir to another one, an operation I think is useless for tests purposes.\n\nLet me explain why this is: there are a number of tests that:\n# build up a dir with IW\n# in a loop, copy the dir into several other dir(s) and do scary tests\n\nwhen i converted things to newDirectory, i only did the \"easy tests\". I think i did one of these more scary ones. We should do the others.\nI think it can make sense for a test to do this, if it wants to look for some race condition or something and doesnt want to re-index into a new dir in each loop.\n\nHowever...\n\nbq. I think that newDirectory(Directory) is weird. I'd think we'll have a newDirectory(File) which will either return a FSDir on that File, or a RAMDir where the files are copied into it.\n\nI think newDirectory(File) is a good idea! But i still think we should keep the other one. So newDirectory(File) could be done with:\n{noformat}\nSimpleFSDirectory fs = new SimpleFSDirectory(file);\nDirectory ret = newDirectory(fs);\nfs.close();\nreturn ret;\n{noformat}",
            "date": "2010-12-07T13:23:36.619+0000",
            "id": 1
        },
        {
            "author": "Shai Erera",
            "body": "Ok I agree. Currently there is only one 'testEmptyIndex()' test that makes use of newDirectory(Directory). But perhaps after we've converted more tests to not use FSDirectory.open, more will use it.",
            "date": "2010-12-07T13:34:50.299+0000",
            "id": 2
        },
        {
            "author": "Shai Erera",
            "body": "Started to go over the tests, and I think that newDirectory(File) could be useful to return any of the FSDirectory impls, over that File, and not copy it to a random directory. Tests like LockFactory stress tests etc need to work on a FSDirectory impl so either we make sure the test runs on all of them, or we introduce newDirectory(File) which draws one of the FSDirs.",
            "date": "2010-12-07T13:57:25.465+0000",
            "id": 3
        },
        {
            "author": "Shai Erera",
            "body": "Patch fixes all tests to use newDirectory() or newFSDirectory(), except for backwards test code. Also some improvements to LuceneTestCase are included (in the scope of the issue).\n\nAll tests pass.\n\nNote that I had to impl setLockFactory by FSDirectory, which caused the addition of \"throws IOException\" to Directory.setLockFactory. The changes in the issue revealed an inconsistency we had - previously if you \"new FSDirectory(File, LockFactory)\" or \"new FSDirectory(File).setLockFactory\" you wouldn't get the same behavior. The former set the lockPrefix to null while the latter didn't. The changes in the patch uncovered that (TestLockFactory) and so I made the change.\n\nWhile technically this is a backwards break, I think adding that 'throws' stuff to Directory is safe. Kinda hard to believe someone has code which calls dir.setLockFactory and does not handle/throw IOException. I spelled it out in CHANGES.",
            "date": "2010-12-09T12:06:15.711+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "looking through the patch, it looks very good to me!\n\ni agree with fixing FSDirectory's setLockFactory, and adding the throws IOException to the method signature.\n\nI think after this issue is resolved we should make a separate followup issue to create a MockDirectoryFactory (or whatever we wish to call it) for Solr\nthat uses this new newFSDirectory() method, because currently Solr's tests are using FSDirectory.open I think, which is system-dependent.\n",
            "date": "2010-12-09T13:14:23.414+0000",
            "id": 5
        },
        {
            "author": "Shai Erera",
            "body": "Note that I searched for FSDirectory.open in Solr's tests too, and found 3 tests that called it, and fixed them. But I agree this MockDirectoryFactory is needed too, since I assume other tests use a DirFactory outside the *test* code, which uses FSDirectory.open inside.\n\nOne thing I discovered is that the Directory obtained from DirFactory.open() is not closed by Solr code. So I guess a lot of Solr tests would fail after we introduce MockDirFactory. If you wish, we can revert the fixes I did to the 3 tests, and fix them in the follow up issue. Currently, I had to hack one test to make sure the dir is closed in the end.",
            "date": "2010-12-09T13:22:07.614+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nOne thing I discovered is that the Directory obtained from DirFactory.open() is not closed by Solr code. So I guess a lot of Solr tests would fail after we introduce MockDirFactory. If you wish, we can revert the fixes I did to the 3 tests, and fix them in the follow up issue. Currently, I had to hack one test to make sure the dir is closed in the end.\n{quote}\n\nYour call either way, but you are right... and once we fix whatever issue is causing directories not to be closed in Solr tests, we will still have more things to chase down.\nThis is because MockDirectoryWrapper tracks open files, and when you call .close() on it, it will cause the test to fail if you didn't close things like IndexReaders.\nI know at the very least, there is an issue with SpellChecker: SOLR-1877. \n\nWorst case, we can setNoDeleteOpenFile(false) for Solr, which won't enforce this... but I'm not really positive this check should be tied to setNoDeleteOpenFile, maybe it should have its own setter, and I think even in the case where we don't want it to fail (intentional resource leak, I think TestCrash/*OnDiskFull), we should have it warn\nthat there is a resource leak.\n",
            "date": "2010-12-09T13:37:49.988+0000",
            "id": 7
        },
        {
            "author": "Shai Erera",
            "body": "Except for one class, the rest of the fixes are straightforward, so let's keep them here. And I think we can keep the other fix as well, w/ a TODO to remove it once MockDirFactory is in place (and perhaps make some changes to that TestDirFactory).",
            "date": "2010-12-09T13:58:53.341+0000",
            "id": 8
        },
        {
            "author": "Shai Erera",
            "body": "Committed revision 1043979 (3x). Now working to port it to trunk",
            "date": "2010-12-09T14:33:50.421+0000",
            "id": 9
        },
        {
            "author": "Shai Erera",
            "body": "Committed revision 1044008 (trunk).\n\nThanks Robert !",
            "date": "2010-12-09T15:47:40.436+0000",
            "id": 10
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:49:55.814+0000",
            "id": 11
        }
    ],
    "component": "",
    "description": "In LUCENE-2471 we were discussing the copyBytes issue, and Shai and I had a discussion about how we could prevent such bugs in the future.\n\nOne thing that lead to the bug existing in our code for so long, was that it only happened on windows (e.g. never failed in hudson!)\nThis was because the bug only happened if you were copying from SimpleFSDirectory, and the test used FSDirectory.open\n\nToday the situation is improving: most tests use newDirectory() which is random by default and never use FSDir.open,\nit always uses SimpleFS or NIOFS so that the same random seed will reproduce across both windows and unix.\n\nSo I think we need to review all uses of FSDirectory.open in our tests, and minimize these.\nIn general tests should use newDirectory().\nIf the test comes with say a zip-file and wants to explicitly open stuff from disk, I think it should open the contents with say SimpleFSDir,\nand then call newDirectory(Directory) to copy into a new \"random\" implementation for actual testing. This method already exists:\n{noformat}\n  /**\n   * Returns a new Dictionary instance, with contents copied from the\n   * provided directory. See {@link #newDirectory()} for more\n   * information.\n   */\n  public static MockDirectoryWrapper newDirectory(Directory d) throws IOException {\n{noformat}\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2804",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "OTHER",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "check all tests that use FSDirectory.open",
    "systemSpecification": true,
    "version": ""
}