{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "here's an initial patch... all the SpanRegexQuery tests pass, but it could use its own tests too.\n\ntheres a nocommit mentioning what i don't like.\n",
            "date": "2010-11-11T13:45:58.647+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Looks good, even the generics policeman is happy (with the wrapper which is like MTQWrapperFilter! Phantastic :-)\n\nAbout the nocommit and more problems related to this:\n\n- I would remove separate boosts for wrapped and wrapper query. The wrapper should simply delegate get/setBoost(). We have other examples in Lucene that do the same (somewhere...). So the boost does not need to be set in rewrite() and toString() may not show two different boosts. toString() should not print any boost at all (only the wrapped query will do).\n- The same should be done in the rewrite method, it should simply delegate. In ctor, it could set the rewrite mode initially to a span default. We should only document this.\n\nWhen we respect both things, why do we need the wrapper at all? Wrapping and setting a rewrite mode is the same work. And the SpanRegExQuery in contrib could simply set the rewrite mode in the ctor (like Fuzzy or NRQ does) and maybe override toString() for nice output.",
            "date": "2010-11-11T15:21:14.873+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "What about the third BQ rewrite mode (is it needed or is scoring different (we have two rerwite modes for fuzzy)?",
            "date": "2010-11-11T15:23:25.584+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. When we respect both things, why do we need the wrapper at all\n\nAh because query must extend SpanQuery :-) That solves my problem.\n\nSo the rewrite methods can only be used for real SpanQueries, how about moving those rewrite methods out of MTQ? I know, then we must make some classes more public... But I was already thinking about the code mess in MTQ. Maybe we should remove those modes and put into separate classes at all.\n\n+1 to backport to 3.x",
            "date": "2010-11-11T16:00:45.975+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "bq. What about the third BQ rewrite mode (is it needed or is scoring different (we have two rerwite modes for fuzzy)?\n\nIn this case, i thought not because it would be constant score queries, not spanqueries.\nI think a constant score spanquery would be useless :)\n\n{quote}\nSo the rewrite methods can only be used for real SpanQueries, how about moving those rewrite methods out of MTQ? I know, then we must make some classes more public... But I was already thinking about the code mess in MTQ. Maybe we should remove those modes and put into separate classes at all.\n{quote}\n\nI agree completely... its tricky to scroll through the massive .java file and find what we want. \nI would also prefer in this case for the Span-rewrite methods to be in the actual o.a.l.search.span package...\n",
            "date": "2010-11-11T16:24:46.119+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "Attached is an improved patch, still not perfect but better.\n\nI added Uwe's suggestion of delegating all methods in the wrapper, and also\nsetting the rewrite method in the ctor and documenting that it does this.\n\nI added a simple test case in search.spans that wraps some wildcard and fuzzy queries,\nand added examples and javadocs.\n\nI also deprecated the SpanRegexQuery, converted the tests for the contrib SpanRegexQuery to use the wrapper directly, and deprecated the old tests, but they still work too.\n\nI would prefer to avoid the heavy refactoring of MultiTermQuery rewrites (easier on another issue?) just because it would make backporting to 3.x a little more tricky.\n\nAnyway, I think this is pretty close, maybe just needs another police investigation\nbefore committing.\n",
            "date": "2010-11-11T21:35:57.925+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "The linked  LUCENE-2757 will add support for this while also refactoring MTQ.",
            "date": "2010-11-13T16:55:32.269+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 1035096\n\nNow backporting...",
            "date": "2010-11-14T23:15:22.256+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed 3.x revision: 1035118",
            "date": "2010-11-15T01:39:51.901+0000",
            "id": 8
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:49:51.905+0000",
            "id": 9
        }
    ],
    "component": "core/search",
    "description": "I set fix version: 4.0, but possibly we could do this for 3.x too\n\nCurrently, we have a special SpanRegexQuery in contrib, and issues like LUCENE-522 open for SpanFuzzyQuery.\nThe SpanRegexQuery in contrib is a little messy additionally.\n\nFor any arbitrary MultiTermQueries to work as a SpanQuery, there are only 3 requirements:\n# The un-rewritten query must extend SpanQuery so it can be included in Span clauses\n# The rewritten query should be SpanOrQuery instead of BooleanQuery\n# The rewritten term clauses should be SpanTermQueries.\n\nInstead of having logic like this for each query, i suggest adding two rewrite methods:\n* ScoringSpanBoolean rewrite\n* TopTermsSpanBoolean rewrite\n\nas a start i wrote these up, and added a SpanMultiTermQueryWrapper that can be used to wrap any multitermquery this way.\nthere are a few kinks, but I think the MTQ policeman can probably help get through them.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2754",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "add spanquery support for all multitermqueries",
    "systemSpecification": true,
    "version": ""
}