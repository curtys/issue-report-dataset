{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "Hi,\n\n+1, I was f*cking with this the whole day when rewriting oirectoryReader/MultiReader.\n\nThe bad thing is also that the Set(CHM) is not initialized in IndexReader base class (and is not final), the subclasses must do it. This should be done by base class and be protected final, then normal IndexReaders dont need to f*ck with it. Just make the listeners collection in IndexReader base class final and initialize with MapBackedSet(CHM).\nDirectoryReader and other MultiReaders may simply delegate the registration to the subreaders, but dont pass sets around. If they need to copy all, just do \"for (Listener l: this.listenerss) subreader[i].add(l);\", sharing the same map between different readers is wrong.",
            "date": "2011-12-13T13:04:47.696+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "The original intention of this API (LUCENE-2474) was in fact to detect\nonly when a SegmentCoreReader was closed, so that \"external\" caches\nthe app kept could be purged, and not really to detect closing of all\nother readers (eg composite readers).\n\nBut I agree, we should somehow generalize this to do both\nfunctions...\n",
            "date": "2011-12-13T13:33:50.920+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "I think thats confusing, I think if you set the listener on a reader, it should work.\n\nIf we want a *core* listener, it should be a separate thing! and we can have a clean API for that,\nspecific to SR (Maybe even only on SR itself!) that doesn't confuse the other case",
            "date": "2011-12-13T13:38:14.957+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "That's a good idea: separate APIs for \"core closed event\" and \"composite reader closed event\".",
            "date": "2011-12-13T13:50:11.570+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nThat's a good idea: separate APIs for \"core closed event\" and \"composite reader closed event\".\n{quote}\n\nThats not really what i'm saying though.\n\nI think readerFinishedListener, since its on indexreader, should fire when an IndexReader closes.\nI dont care if its composite or not. Its an indexreader, thats all we care about.\n\nThen core closed event naturally makes sense on SegmentReader, because its the only one that \ncares/knows about cores.",
            "date": "2011-12-13T14:00:04.129+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "I hate the whole thing, sorry. Please remove it,... completely.",
            "date": "2011-12-13T14:02:34.544+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "And \"ReaderFinished\" is wrong word, it is \"ReaderClosed\". Finished sounds more like \"Ready\" than like \"Close\", its misunderstanding. I heard of that shit the first time last weekend and was teriified. Who proposed it, I will kill him/her?",
            "date": "2011-12-13T14:07:22.690+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Sorry for the last comment, I am still in rage, rage against this... aaaaah ! :( die, die, die!",
            "date": "2011-12-13T14:09:18.932+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "attached is a patch, cleaning this up. All tests pass.\n\nThe two use cases are now totally separated instead of being confusingly and dangerously interwoven. I also renamed things per uwe's advice:\n\n* IndexReader's ReaderClosedListener does exactly what it says. It fires when readers close. This is used to e.g. evict top-level fieldcaches.\n* SegmentReader's CoreClosedListener fires when the shared core is closed. This is used to e.g. evict per-segment fieldcaches.",
            "date": "2011-12-13T15:12:18.129+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "updated patch, with a stupid optimization for when you have field cache on top-level readers and also insanity.",
            "date": "2011-12-13T15:45:50.301+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks great!  I love the separation into \"reader closed\" vs \"core closed\", and removing all that hairy code that was copying around the previously registered listeners... MUCH simpler.\n\nBut: I don't think we should \"forward to subs\" when someone registers for reader closed?  I think if you register you should only be notified when that exact reader is closed?  If somehow you care about the subs (I think this is the exception not the rule) you can always pull them and register with them too.",
            "date": "2011-12-13T16:21:40.389+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi, I am happy with the code now, but I still hate the (Event-)Listener-pattern. In a library like Lucene its very \"foreign\", it fits much better to GUIs with event loops :-)\n\nAnd thanks for renaming the Listener!",
            "date": "2011-12-13T16:28:52.568+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nBut: I don't think we should \"forward to subs\" when someone registers for reader closed? I think if you register you should only be notified when that exact reader is closed?\n{quote}\n\nI agree, the only two real uses of this api we have today (as of the previous patch), both jump thru hoops to avoid this. Here's a patch implementing it that way (much cleaner imo)",
            "date": "2011-12-13T19:20:42.699+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "+1 looks great!",
            "date": "2011-12-13T19:31:48.618+0000",
            "id": 13
        },
        {
            "author": "Shay Banon",
            "body": "I just saw this thread, and would like to respond to @Uwe as I think he is completely wrong here. Its perfectly fine to have listeners in this case. If you are implementing a cache based on core readers (think custom filter cache for example), its basically the only sane way to do it (and not have to handle weak references which is bad on GC and error prone with complex keys). And Lucene should allow for that.\n\nI don't think the separation to segment core listener and index reader listener is the best solution here, since it exposes \"too much info\" to the user (having to deal with different reader cases, check FieldCacheImpl for example). I don't really mind it, since in my case I only work on low level Segment case (which is the sane way to work when you do NRT) and can handle it, but not sure its best in a general usability wise case. What the user want is: here is a reader, which I cache base on it, and here is a listener, call me back when that listener is no longer valid.",
            "date": "2012-01-07T20:21:58.693+0000",
            "id": 14
        }
    ],
    "component": "",
    "description": "There are two major problems:\n1. The listener api does not really apply all indexreaders. for example segmentreaders dont fire it on close, only segmentcorereaders. this is wrong, a segmentcorereader is *not* an indexreader. Furthermore, if you register it on a top-level reader you get events for anything under the reader tree (sometimes, unless they are segmentreaders as mentioned above, where it doesnt work correctly at all).\n2. Furthermore your listener is 'passed along' in a viral fashion from clone() and reopen(). This means for example, if you are trying to listen to readers in NRT search you are just accumulating reader listeners, all potentially keeping references to old indexreaders (because, in order to deal with #1 your listener must 'keep' a reference to the IR it was registered on, so it can check if thats *really* the one).\n\nWe should discuss how to fix #1. \n\nI will create a patch for #2 shortly and commit it, its just plain wrong.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3644",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "problems with IR's readerFinishedListener",
    "systemSpecification": true,
    "version": ""
}