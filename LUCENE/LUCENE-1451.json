{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "The actual class used for making new instances of Directory is FSDirectory.IMPL, set via the system property \"org.apache.lucene.FSDirectory.class\".\n\nIt seems like we should make it  possible to create multiple FSDirectory implementations of different types in the same JVM.\nThe simplest workaround would be to create a\n  protected static FSDirectory getDirectory(File file, LockFactory lockFactory, Class impl)\nSubclasses could implement their own getDirectory calls that pass down the appropriate class.\n\nNot the most elegant solution if one were starting from scratch, but it seems like it would be completely backward compatible, while allowing NIOFSDirectory.getDirectory() to do what it looks like it should do.",
            "date": "2008-11-12T20:38:48.216+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "Attaching untested patch implementing logic above.",
            "date": "2008-11-12T20:50:18.126+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "That looks like a good approach to me.\n\nThough, should we make the new getDirectory that takes the Class directoryImpl arg public, so that external subclasses of FSDirectory could also create their own instances?",
            "date": "2008-11-12T20:53:20.149+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "Hmmm, external subclasses should be able to call the protected getDirectory method, right?\nBut perhaps a test case for external subclasses is warranted.",
            "date": "2008-11-12T21:02:16.170+0000",
            "id": 3
        },
        {
            "author": "Hoss Man",
            "body": "bq. It seems like we should make it possible to create multiple FSDirectory implementations of different types in the same JVM.\n\nAs mentioned in the thread that spawned this issue...\n\n1. i'm not sure i see any real motivation for this.  the biggest motivation to use an alternate impl will be OS (which is fixed for the whole JVM)\n1. if i'm reading it right, this patch won't work if two different callers ask for Directories backed by the same File using different directoryImpl instances ... the first one will go into the DIRECTORIES cache and \"win\" for all future calls.\n\n\nthat second problem can be solved in a similar way to the lockFactory check ... but like i said: this seems like a can of worms, with very little real advantage over a simple static setter.",
            "date": "2008-11-12T22:07:27.872+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "Attaching patch with tests.",
            "date": "2008-11-12T22:08:56.515+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "bq. 1. if i'm reading it right, this patch won't work if two different callers ask for Directories backed by the same File using different directoryImpl instances ... the first one will go into the DIRECTORIES cache and \"win\" for all future calls.\n\nHmm good point.  Actually why do we do this 'single instance of FSDir per File' again?  Is it really needed?",
            "date": "2008-11-12T22:21:27.451+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Hmmm, external subclasses should be able to call the protected getDirectory method, right?\n\nWoops sorry you're right.",
            "date": "2008-11-12T22:21:38.729+0000",
            "id": 7
        },
        {
            "author": "Mark Miller",
            "body": "bq. Hmm good point. Actually why do we do this 'single instance of FSDir per File' again? Is it really needed?\n\nWhile it might be useful sometimes, I don't see how it really is needed. I think a better solution is allowing for direct instantiation while providing a factory class if for some reason you need that behavior. Most apps I have worked with do not need it and I don't understand why its forced on you, other than a bit of overprotection.",
            "date": "2008-11-12T23:08:12.071+0000",
            "id": 8
        },
        {
            "author": "Yonik Seeley",
            "body": "bq.  if i'm reading it right, this patch won't work if two different callers ask for Directories backed by the same File using different directoryImpl instances ... the first one will go into the DIRECTORIES cache and \"win\" for all future calls.\n\nRight... the tests in the patch test for this too.  If an instance already exists, then it's returned.  If all the instances are closed, the desired implementation can be returned.   So it won't be for all future calls, but it would be difficult to ensure you got the implementation you wanted.\n\nbq. Hmm good point. Actually why do we do this 'single instance of FSDir per File' again? Is it really needed?\n\nI had assumed it was locking.... but it goes outside of the FSDirectory and operates directly on File.  So, I'm not sure.\n\n",
            "date": "2008-11-12T23:22:03.322+0000",
            "id": 9
        },
        {
            "author": "Hoss Man",
            "body": "bq. Right... the tests in the patch test for this too. If an instance already exists, then it's returned.\n\nMiller is probably right and we should just remove the cache anyway -- but if we do leave it in this still seems dangerous to me, clients aren't guaranteed to get what they ask for.\n\nAdopting the same pattern as with LockType (throw an Exception if a Directory is in the cache but doens't match the class specified) seems safer.",
            "date": "2008-11-13T00:03:56.670+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "I think we should simply allow direct instantiation of NIOFSDirectory, and not map to a singular instance per-File.  But we should keep it for FSDir for back-compat.",
            "date": "2008-11-13T10:14:51.878+0000",
            "id": 11
        },
        {
            "author": "Yonik Seeley",
            "body": "Ok, here's a version that adds public constructors, and a test that ensures that reading, writing, and locking all work concurrently in the same directory with different FSDirectory implementations.\n\nAFAIK, there's nowhere in Lucene that synchronizes on the Directory instance (where it matters), so multiple instances per path should be safe.",
            "date": "2008-11-13T21:26:36.906+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "This looks good, Yonik.  Should we deprecate FSDirectory.getDirectory?",
            "date": "2008-11-14T15:41:48.057+0000",
            "id": 13
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. Should we deprecate FSDirectory.getDirectory? \n\nPerhaps... it would cut down the number of silly future errors in the form of NIOFSDirectory.getDirectory().",
            "date": "2008-11-14T15:53:30.967+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "True.  And in general I don't like have more than one way to do basically the same thing.  People can always do the single-Directory-instance-per-File thing externally if they need to.",
            "date": "2008-11-14T15:58:34.271+0000",
            "id": 15
        },
        {
            "author": "Yonik Seeley",
            "body": "When I was reviewing getDirectory() I can across a race condition anyway - could lead to handing out a closed directory.  But people would need to be opening and closing directories rapidly from multiple threads, so I'm not sure if it's actually bitten anyone.",
            "date": "2008-11-14T16:03:01.955+0000",
            "id": 16
        },
        {
            "author": "Yonik Seeley",
            "body": "Any preferences on the public constructor signature... File or String for the path?",
            "date": "2008-11-14T16:07:36.902+0000",
            "id": 17
        },
        {
            "author": "Michael McCandless",
            "body": "I think File is fine?  But I don't have a strong preference (I can't think of any tradeoffs).",
            "date": "2008-11-14T16:21:55.188+0000",
            "id": 18
        },
        {
            "author": "Yonik Seeley",
            "body": "Committed.  Thanks for the input guys!",
            "date": "2008-11-14T19:23:07.795+0000",
            "id": 19
        },
        {
            "author": "Doug Cutting",
            "body": "A bit of history, if any care.\n\nOriginally Lucene synchronized only on the Directory to coordinate index writes.  This was the primary motivation for the Directory cache.\n\nhttp://tinyurl.com/62ugs9#l120\n\nLater, lock files were added, but Directory synchronization remained as an optimization, to avoid hitting the filesystem when coordinating threads in the same process.\n\nhttp://tinyurl.com/5dzsyq#l125\n\nNow Directory-based synchronization has been dropped entirely, so the Directory cache can now go too.\n\n\n",
            "date": "2008-11-24T21:52:51.166+0000",
            "id": 20
        }
    ],
    "component": "",
    "description": "NIOFSDirectory.getDirectory() returns a FSDirectory object",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1451",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Can't create NIOFSDirectory w/o setting a system property",
    "systemSpecification": true,
    "version": ""
}