{
    "comments": [
        {
            "author": "Hoss Man",
            "body": "test case using NearSpans directly that demonstrates bug.\n",
            "date": "2006-05-13T08:34:35.000+0000",
            "id": 0
        },
        {
            "author": "Hoss Man",
            "body": "fixed title",
            "date": "2006-05-13T08:41:22.000+0000",
            "id": 1
        },
        {
            "author": "Paul Elschot",
            "body": "Hoss,\n\nThere is an alternative NearSpans here:\nhttp://issues.apache.org/jira/browse/LUCENE-413\nin the files:\nNearSpansOrdered.java\nNearSpansUnordered.java\nSpanNearQueryPatch1.txt\n\nIt would be good to see whether these have the same skipTo bug.\nI'll have a look into this in a few days, please feel free to beat me to it.\n\nAnyway, thanks for the courage to review all of Lucene's use of Explanation.\nExplaining a score value is just as involved as the normal search mechanisms,\nas it is necessary to redo the whole search, but only for a single document,\nand then literally explain all the details in program code.",
            "date": "2006-05-13T15:52:11.000+0000",
            "id": 2
        },
        {
            "author": "Paul Elschot",
            "body": "Fwiw, TestNearSpans passes on my working copy that has the alternative NearSpans.\nIt's still worthwhile to try locate the bug in the current NearSpans.\n\nThe last skipTo bug in DisjunctionSumScorer was caused by me not understanding\nthat skipTo() always advances at least one document, even when the given target\nis at or before the current document of the Scorer on which skipTo is called.\nI would not be surprised if this turns out to be a similar problem.\n\n",
            "date": "2006-05-13T18:01:23.000+0000",
            "id": 3
        },
        {
            "author": "Paul Elschot",
            "body": "Hoss,\n\nI'm afraid you've uncovered a bug in NearSpans.java for the ordered case.\nThe test case testNearSpansSkipToLikeNext() uses this test data:\ndoc 0: w1 w2 w3 .. ..\ndoc 1: w1 w3 w2 w3 ..\nand an ordered SpanNearQuery with slop 1 for \"w1 w2 w3\" should match doc 0 and doc 1\nThe test first does a skipTo(0) on the NearSpans which succeeds to match doc 0.\nThen it tries skipTo(1) on the NearSpans, which should succeed, but fails, because\nNearSpans first does skipTo(1) on the Spans for the query terms,\nwhich puts these term spans at\ndoc 1: w1 w3 w2\n(as expected) but this does not match because it's not ordered.\nThe NearSpans then tries a next() on itself, which starts by doing next() on the term spans\nfor w1 in NearSpans.java near line 146:\n      more = min().next();                        // trigger further scanning\nHowever, in the ordered case, it should have advanced the first non ordered term,\nhere w3, and so it misses the match:\ndoc 1: w1 .. w2 w3 ..\n\nI would recommend to use the alternative NearSpans from LUCENE 413 mentioned above\nto fix this. The NearSpansOrdered there differs from the current version in that it does not\nmatch overlapping subspans, but it passes all current test cases including TestNearSpans here.\nOverlaps between Spans can occur when SpanNearQueries are nested and/or when multiple\nterms are indexed on the same position.\nIn case this ordered non overlapping matching becomes an issue, it can always be fixed later.\nThe NearSpansUnordered there is just like the current NearSpans, only simplified, and this\nmatches overlapping subspans.\n",
            "date": "2006-05-14T03:51:10.000+0000",
            "id": 4
        },
        {
            "author": "Hoss Man",
            "body": "\nI tried to make sense of the existing NearSpans implimentation over the weekend ... i did not succeed.  I still haven't had a cahnce to look at the new one in LUCENE-413 but i wnat to clarify something you said..\n\n>>> The NearSpansOrdered there differs from the current version in that it does not\n>>> match overlapping subspans, but it passes all current test cases including TestNearSpans here. \n\n...should I understand you to mean then that the current implimentaion of NearSpans does work correctly with overlapping sub-spans ... there just isnt' a test for it?\n\nthat seems like important enough behavior that we wouldn't want to break it to fix this bug.\n\nEven if matching on overlapping subspans wasn't an intentional feature of NearSpans -- the fact that it currently works and the documentation is silent on the issue suggests to me that it should remain supported.",
            "date": "2006-05-16T08:17:23.000+0000",
            "id": 5
        },
        {
            "author": "Paul Elschot",
            "body": "> I tried to make sense of the existing NearSpans implimentation over the weekend ... i did not succeed.\n> I still haven't had a cahnce to look at the new one in LUCENE-413 but i wnat to clarify something you said.. \n\nFor the unordered case the priority queue implementation over the subspans in the current NearSpans is fine.\nFor the ordered case I could not figure out how to deal with the priority queue and the restriction on\nordering at the same time. This is precisely what the bug above shows.\n \n> >>> The NearSpansOrdered there differs from the current version in that it does not \n> >>> match overlapping subspans, but it passes all current test cases including TestNearSpans here. \n>\n> ...should I understand you to mean then that the current implimentaion of NearSpans does work\n> correctly with overlapping sub-spans ... there just isnt' a test for it? \n\nFor ordered queries, it might work with overlapping sub-spans on some cases.\nHowever, I'd expect any test to run into the bug above for some other ordered cases.\n \n> that seems like important enough behavior that we wouldn't want to break it to fix this bug. \n\nGiven the bug, I hope nothing depends on it.\n\n> Even if matching on overlapping subspans wasn't an intentional feature of NearSpans -- the fact that it\n> currently works and the documentation is silent on the issue suggests to me that it should remain supported. \n\nThat can probably be done by modifying the NearSpansOrdered of LUCENE-413 at lines 133-138 and at\nline 167 where the end of the previous (possibly matching) subspans is compared to the start of the next one.\nThis could compare the start with the start instead.\nI don't know what precisely is the intended behaviour, so I can't say whether these changed comparisons\nshould allow equality or not. Perhaps the ends should be compared when the starts are equal,\njust like it is done in the priority queue for the unordered case.\n\n",
            "date": "2006-05-16T14:37:59.000+0000",
            "id": 6
        },
        {
            "author": "Hoss Man",
            "body": "Attitional test case patch that should work if this bug is fixed.  (orriginally from LUCENE-557 but uncommited)",
            "date": "2006-06-20T08:35:48.000+0000",
            "id": 7
        },
        {
            "author": "Paul Elschot",
            "body": "TestSpanExplanations (latest) with the SpanScorer.explain.testcase.patch passes here,\nbut my intermediate version of NearSpansOrdered.java does not pass TestSpans yet.\n",
            "date": "2006-06-21T00:57:32.000+0000",
            "id": 8
        },
        {
            "author": "Paul Elschot",
            "body": "These two attachments (NearSpansOrdered and NearSpansUnordered), together with the near spans patch at the issue indicated above, pass all tests here, including the patched spans explanation test.\n\nThe attachments share the code that defines the ordering of spans.\n\nSome minor refactoring will probably be needed.",
            "date": "2006-06-21T04:38:07.000+0000",
            "id": 9
        },
        {
            "author": "Paul Elschot",
            "body": "common-build.assertions.patch enables assertions in org.apache.lucene during the junit tests.\n\nNearSpansOrdered.java is refactored from the previous version of 2 days ago.\nIt contains some assert statements.\n\nAll tests pass here as before with these two attachments.\n",
            "date": "2006-06-22T05:19:18.000+0000",
            "id": 10
        },
        {
            "author": "Paul Elschot",
            "body": "The patch to SpanNearQuery at the other issue still uses NearSpans.\nUsing the patch attached here, NearSpans is not used anymore.\n",
            "date": "2006-06-22T14:26:23.000+0000",
            "id": 11
        },
        {
            "author": "Paul Elschot",
            "body": "NearSpans20060903.patch combines the changes for the bug fix on the\nfollowing files against revision 439747 (today):\n\nsrc/java/org/apache/lucene/search/spans/NearSpansOrdered.java, added\nsrc/java/org/apache/lucene/search/spans/NearSpansUnordered.java, added\nsrc/java/org/apache/lucene/search/spans/SpanNearQuery.java, changed\nsrc/test/org/apache/lucene/search/spans/TestNearSpans.java, added\nsrc/java/org/apache/lucene/search/spans/NearSpans.java, deleted.\n\nThis obsoletes the patch to SpanNearQuery.java.\n(It leaves out one line of commented code that is  in the separate patch for SpanNearQuery.java .)\n\nThe added NearSpansUnordered is a simple specialisation of the deleted\nNearSpans for the unordered case.\n\nRegards,\nPaul Elschot\n\n",
            "date": "2006-09-03T09:25:27.000+0000",
            "id": 12
        },
        {
            "author": "Hoss Man",
            "body": "Okay, I've attached a cosolidation of SpanScorer.explain.testcase.patch and NearSpans20060903.patch, with a few small modifications...\n\n  1) renamed TestNearSpans.java to TestNearSpansOrdered.java\n  2) renamed some tst* methods test* (I think Paul had disabled them for faster testing \n      since they weren't broken, but they provide good coverage)\n  3) removed some javadocs from NearSpansOrdered so they are inherited from Spans\n      (they were the same)\n\nI can't say I completely understand everything going on in all of this code ... but it passes all of the existing unit tests (as well as the new ones) and I trust Paul; so in the spirit of \"be bold\" I'll commit these tomorow unless anyone objects.\n\nTo recap the major issues for people who may not be familiar with this issue...\n\n   * The existing NearSpans, which used in an \"inOrder\" SpanNear query, has a bug \n     where it fails to recognize ordered spans if they overlap with unordered spans.\n   * Paul has proposed a fix by eliminating the NearSpans class and replacing it with \n     both NearSpansOrdered and NearSpansUnordered - SpanNearQuery will pick the\n     appropriate class when getSpans is called.\n",
            "date": "2006-10-26T23:31:19.000+0000",
            "id": 13
        },
        {
            "author": "Paul Elschot",
            "body": "Hoss, thanks for the modifications. The tst* methods were indeed renamed from test*.\n\nIs there a way to invoke an ant test indicating the testcase _and_ the testmethod to be called?\n",
            "date": "2006-10-27T16:03:41.000+0000",
            "id": 14
        },
        {
            "author": "Hoss Man",
            "body": "Thanks again for figuring all of this out Paul.",
            "date": "2006-10-27T22:04:15.000+0000",
            "id": 15
        },
        {
            "author": "Doron Cohen",
            "body": "It seems that having  \"assert()\"   in NearSpanOrdered.java now required Java 1.5 in order to compile Lucene. This would require 1.5 for running Lucene. Do we want to include this now?",
            "date": "2006-10-27T22:44:46.000+0000",
            "id": 16
        },
        {
            "author": "Steven Parkes",
            "body": "I don't think so. And I'm glad someone is checking. Got a patch, Doron?",
            "date": "2006-10-27T22:52:29.000+0000",
            "id": 17
        },
        {
            "author": "Doron Cohen",
            "body": "Chris Hostetter wrote:\n\n> Really? ... the build.xml currently sets the javac -source and -target to\n> 1.4 so if that were true i would except it to have failed, and the\n> documentation for J2SE 1.4.2 indicates that assertion support exists in\n> 1.4.\n> \n> while writting this i attempted an \"ant clean test\" using Java 1.4 and\n> everything seemed to work fine.\n\nYou are right Chris, my mistake, compilation passed for me with 1.5 but failed with 1.4 so I assumed this was the case, but apparently for 1.4 I had 1.3 for the source compatibility (in Eclipse). I changed to 1.4 and it passed with no problems.\n\nSorry for this noise,\nDoron",
            "date": "2006-10-27T23:20:18.000+0000",
            "id": 18
        }
    ],
    "component": "core/search",
    "description": "NearSpans appears to have a bug in skipTo that causes it to skip over some matching documents completely.  I discovered this bug while investigating problems with SpanWeight.explain, but as far as I can tell the Bug is not specific to Explanations ... it seems like it could potentially result in incorrect matching in some situations where a SpanNearQuery is nested in another query such thatskipTo will be used ... I tried to create a high level test case to exploit the bug when searching, but i could not.  TestCase exploiting the class using NearSpan and SpanScorer will follow...",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-569",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "NearSpans skipTo bug",
    "systemSpecification": true,
    "version": ""
}