{
    "comments": [
        {
            "author": "Jason Rutherglen",
            "body": "This issue illustrates why the ram dir approach can be useful,\nbecause small segment merges compete with large segment merges\nfor IO, which can spike the turnaround time. With a ram dir, the\nsmall segments are held in RAM until they're large enough to be\nplaced onto disk. They can then be given the same IO priority as\nthe other merging segments which should result in consistent\nreopen times.",
            "date": "2009-12-15T17:12:17.170+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch.\n\nWhenever CMS starts a new thread, or an existing thread pulls a new merge to run, it updates the thread priorities (smaller merges get higher thread priority).\n\nI also increased the default max thread count from 1 to 2.",
            "date": "2009-12-15T20:51:15.523+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "{quote} \nThis issue illustrates why the ram dir approach can be useful,\nbecause small segment merges compete with large segment merges\nfor IO, which can spike the turnaround time. With a ram dir, the\nsmall segments are held in RAM until they're large enough to be\nplaced onto disk. They can then be given the same IO priority as\nthe other merging segments which should result in consistent\nreopen times.Make CMS smarter about thread priorities\n{quote}\n\nI'm still not convinced we should game the OS, here.\n\nIe, the small segments are likely still in the IO cache, so\nwe're probably not really competing for IO on the smaller merges.\n\nI think it's when an immense merge is running that we're in trouble.\nEG I see very long NRT reopen times when such a merge is running.\n\nI've been wondering whether we need to take IO prioritization into our\nown hands.  EG, instead of relying [only] on thread priorities for\nCMS, somehow have the big merge pause until the small merge can\ncomplete.  This would really be the best way to implement the \"allow\nat most 1 merge to run at once\".  I guess we may be able to override\nthe mergeAbort to implement this...\n\nI think a similar \"emulate IO prioritization\" may help when, eg, a\nlarge merge/optimize is interfering with ongoing searches.  Yes, some\nof the cost is because the merge is evicting IO cache, but for large\nindexes that don't fit in RAM, there must be some cost to sharing the\ndisk heads, too...\n",
            "date": "2009-12-15T21:50:02.904+0000",
            "id": 2
        },
        {
            "author": "Hoss Man",
            "body": "bq. I also increased the default max thread count from 1 to 2.\n\nrandom thought from the peanut gallery: do we want to go down the \"Ergonomics\" route and make the default number of threads vary based on Runtime.getRuntime().availableProcessors()\n\n(ie: 1 on a single threaded box, NUM_PROCESSORS/CONSTANT on multithreaded boxes?)\n\n?",
            "date": "2009-12-15T22:00:43.587+0000",
            "id": 3
        },
        {
            "author": "Jason Rutherglen",
            "body": "{quote}I've been wondering whether we need to take IO\nprioritization into our own hands. {quote}\n\nI think we discussed IO throttling at the directory level\nbefore. A controller could be passed to createOutput that has a\nsetPriority method. The priority level would be set based on the\ndemand for IO from IndexWriter. SegmentMerger could know if it's\ncreating a large segment from the sizes of the source segments,\nand set the IO priority accordingly?\n\nI wonder what algorithm would be suitable for this?",
            "date": "2009-12-15T22:19:53.939+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "bq. do we want to go down the \"Ergonomics\" route and make the default number of threads vary based on Runtime.getRuntime().availableProcessors()\n\nGood idea!  How about something like this:\n\n{code}\nmax(1, min(3, numberOfCores / 2))\n{code}\n\nIe, number of cores divided by 2, but floored at 1 and ceiling'd at 3?\n\nI think 1 BG thread is always good since you gain CPU + IO\nconcurrency.  Too many thread (I'm guess above 3) will swamp the IO\nsystem (unless IO system is SSD).\n\nThis would just be a dynamic default, ie, if you call\nsetMaxThreadCount yourself, you override it.\n",
            "date": "2009-12-15T23:33:09.526+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nI think we discussed IO throttling at the directory level\nbefore. A controller could be passed to createOutput that has a\nsetPriority method. The priority level would be set based on the\ndemand for IO from IndexWriter. SegmentMerger could know if it's\ncreating a large segment from the sizes of the source segments,\nand set the IO priority accordingly?\n{quote}\n\nYeah we talked about this for the more general case (throttling\nmerging when searches are running).  That's a pretty big change\nthough.\n\nI think for this case we could handle the throttling entirely in CMS,\nby wrapping the OneMerge and overriding the checkAborted method to\npause the large merge when smaller merge(s) are running.  This would\nforce the long merges to stop so that the smaller merges could\ncomplete without fighting for IO.\n\nTo get a sense of how important this would be, I think we need to\nmeasure how long it takes a merge to complete when it's alone vs when\nanother merge is running at the same time, on a machine with enough\ncores, for a \"typical\" IO system.  If they do cause one another to\nthrash (seems likely, though, I've also seen evidence that merging is\nCPU bound, at least for merging the postings...) then we should only\nallow 1 to run at once...\n",
            "date": "2009-12-15T23:40:33.201+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Actually, I'd like to explore the throttling, just within CMS, with this issue.\n\nI have a crude prototype working and it's actually quite simple... I think this is a good way to force the prioritization of different threads.",
            "date": "2009-12-16T01:47:47.414+0000",
            "id": 7
        },
        {
            "author": "Jason Rutherglen",
            "body": "{quote}max(1, min(3, numberOfCores / 2))... This would just be a dynamic default, ie, if you call setMaxThreadCount yourself, you override it.{quote}\n\nThis is a good idea as a default.",
            "date": "2009-12-16T02:05:34.686+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch:\n\n  * Adds new CMS.setMaxMergeCount, which must be greater than\n    maxThreadCount, allowing CMS to pause big threads so small threads\n    can finish\n\n  * Uses dynamic default for CMS.maxThreadCount, to between 1 & 3\n    depending on number of cores; defaults maxMergeCount to that\n    number +2\n\nThe pausing works well the NRT stress test -- it greatly reduces how\noften the NRT reopen is blocked because of too many merges running.\nIt's most important when there is a very big merge running -- in that\ncase it's better to pause & unpause that big merge when tiny merges\narrive then to force NRT to wait for the completion of the merge.\n",
            "date": "2009-12-18T16:49:19.579+0000",
            "id": 9
        }
    ],
    "component": "core/index",
    "description": "Spinoff from LUCENE-2161...\n\nThe hard throttling CMS does (blocking the incoming thread that wants\nto launch a new merge) can be devastating when it strikes during NRT\nreopen.\n\nIt can easily happen if a huge merge is off and running, but then a\ntiny merge is needed to clean up recently created segments due to\nfrequent reopens.\n\nI think a small change to CMS, whereby it assigns a higher thread\npriority to tiny merges than big merges, should allow us to increase\nthe max merge thread count again, and greatly reduce the chance that\nNRT's reopen would hit this.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2164",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Make CMS smarter about thread priorities",
    "systemSpecification": true,
    "version": ""
}