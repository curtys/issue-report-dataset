{
    "comments": [
        {
            "author": "Christoph Goller",
            "body": "I think that you somehow break/corrupt the content of the path field either \nwhile adding it into your document or while providing it for delete, so that the\ntwo terms are not equal. I am quite sure that Termdocs.next() works as it should.\nThis means that the doc numbers provided by a TermDocs is only valid if next()\nreturned true. \n\nHowever, if you are convinced, that there is a bug in TermDocs/delete(term),\nplease provide a self-contained test case.",
            "date": "2004-07-30T23:05:04.000+0000",
            "id": 0
        },
        {
            "author": "alan",
            "body": "Created an attachment (id=12282)\nModification of IndexFiles.java to add single doc to index\n",
            "date": "2004-07-31T03:39:08.000+0000",
            "id": 1
        },
        {
            "author": "alan",
            "body": "Created an attachment (id=12283)\nModification of DeleteFiles.java to delete a single doc from the index\n",
            "date": "2004-07-31T03:39:54.000+0000",
            "id": 2
        },
        {
            "author": "alan",
            "body": "Created an attachment (id=12284)\nDemos jar file which includes IndexFile and DeleteFile\n",
            "date": "2004-07-31T03:42:59.000+0000",
            "id": 3
        },
        {
            "author": "alan",
            "body": "It is quite possible that there is a problem with how I am adding and then deleting a document from the\nindex which is the source of the problem, although what I am doing is only a small variation on the \nDemo code.  I'm not a Java programmer and have only just recently started playing with Lucene.\n\nI've attached two class files which are small modifications to the IndexFiles.java and DeleteFiles.java \nfiles included in the lucene distro.   I've also included the jar file that includes them (although I received\nan error when uploading and am not positive it got uploaded safely).  I'm afraid\nI don't have a publicly accessible server where you can see directly what I have, but here's a complete\nrundown of what I did:\n\n- created and archive of plain text/html documents (in this case in the directory /home/acolliso/\narchive)\n\n- ran java org.apache.lucene.demo.IndexFiles /home/acolliso/archive\n   This created an index of about 190 MB and searching on the index appears to work fine.\n\n- then I ran the following:\n\n> java org.apache.lucene.demo.IndexFile /home/acolliso/archive/newdoc1.html\nadding /home/acolliso/archive/newdoc1.html\n244 total milliseconds\n\n  newdoc1.html is a small file with a few unique words in it so I know it will show up at the top\n  of my search later on.  Note that IndexFile does *not* run optimize.  don't know if that has any\n  consequences.\n\n> java org.apache.lucene.demo.SearchFiles\nQuery:  +white +dwarfs +black +holes\nSearching for: +white +dwarfs +black +holes\n2 total matching documents\n0. /home/acolliso/archive/newdoc.html\n1. /home/acolliso/archive/newdoc1.html\n\n> java org.apache.lucene.demo.DeleteFile /home/acolliso/archive/newdoc1.html\nPath to delete: /home/acolliso/archive/newdoc1.html\nTerm: path:/home/acolliso/archive/newdoc1.html\nGot next doc ...false\nTerm docs: 164437\ndeleted 0 documents containing path:/home/acolliso/archive/newdoc1.html\n\nThe 'path' *seems* to be o.k., but next() returns false and the doc is not deleted,\nas the following search confirms:\n\n> java org.apache.lucene.demo.SearchFiles\nQuery: +white +dwarfs +black +holes\nSearching for: +white +dwarfs +black +holes\n2 total matching documents\n0. /home/acolliso/archive/newdoc.html\n1. /home/acolliso/archive/newdoc1.html\n\nThe I modified the delete() code as noted in the original report\nand tried delete() again:\n\n> java org.apache.lucene.demo.DeleteFile /home/acolliso/archive/newdoc1.html\nPath to delete: /home/acolliso/archive/newdoc1.html\nTerm: path:/home/acolliso/archive/newdoc1.html\nGot next doc ...false\nTerm docs: 164437\ndeleted 1 documents containing path:/home/acolliso/archive/newdoc1.html\n\nAnd to see if the document really was deleted, I did the search again:\n\n> java org.apache.lucene.demo.SearchFiles\nQuery: +white +dwarfs +black +holes\nSearching for: +white +dwarfs +black +holes\n1 total matching documents\n0. /home/acolliso/archive/newdoc.html\n\nWhich makes it seem that the doc was successfully deleted.\n\nIf there is any other info I can provide that would help, or could provide\nin a different format, I'm happy to provide it.  Or, if this really ought to\ngo to the distro list instead, I'm happy to do that as well.  Thanks!\n\n\n ",
            "date": "2004-07-31T03:59:29.000+0000",
            "id": 4
        },
        {
            "author": "Daniel Naber",
            "body": "The path field is tokenized, so you cannot use a TermQuery with the path name \nto identify the document. I keep this bug open, as the demo is misleading in \nthis regard. ",
            "date": "2004-07-31T04:41:07.000+0000",
            "id": 5
        },
        {
            "author": "Christoph Goller",
            "body": "That\u00c2\u00b4s it. Daniel is right. Maybe the Demo code should be changed and\nthe path field should not be tokenized.",
            "date": "2004-08-01T23:37:04.000+0000",
            "id": 6
        },
        {
            "author": "Otis Gospodnetic",
            "body": "+1.  It doesn't make sense to have a tokenied path.  It just confuses people. \nWant to change that, Daniel?",
            "date": "2004-08-02T20:39:31.000+0000",
            "id": 7
        },
        {
            "author": "Daniel Naber",
            "body": "The demo has been modified so that using it should be easier. \n ",
            "date": "2004-08-04T04:56:03.000+0000",
            "id": 8
        }
    ],
    "component": "core/index",
    "description": "It appears that delete(term) fails to delete the last document containing term, which\nfor a unique match means that you can't remove an individual document.\n\nCode attempting to remove document with specific 'path' (slightly modified version of demo code):\n\nDirectory directory = FSDirectory.getDirectory(\"index\", false);\nIndexReader reader = IndexReader.open(directory);\nTerm term = new Term(\"path\", args[0]);  // path passed via command line arg\nint deleted = reader.delete(term);\nreader.close();\ndirectory.close();\n\nSystem.out.println(\"deleted \" + deleted + \" documents containing \" + term);\n\nExecuting this always returns \"deleted 0 documents containing <path entered>\"\n\nIn IndexReader.java, delete() has:\n\npublic final int delete(Term term) throws IOException {\n  TermDocs docs = termDocs(term);\n  if (docs == null) return 0;\n  int n = 0;\n  try {\n    while (docs.next()) {\n      delete(docs.doc());\n      n++;\n    }\n  } finally {\n    docs.close();\n  }\n  return n;\n}\n\nIt appears that docs.next() always returns false when there is only one doc, hence\ndelete() is never called and 0 is always returned.  I assume that this also means that\nif there are multiple matches, the last doc will not be deleted either, but I have not tested\nthat.\n\nI modified the code as follows:\n\n    boolean more = true;\n    try {\n      docs.next();\n      while (more) {\n        delete(docs.doc());\n        n++;\n        more = docs.next();\n      }\n    } finally {\n      docs.close();\n    }\n\nand then it worked as expected (at least attempts to delete a single document from the\nindex succeeded whereas previously they did not).",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-249",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Demo: DeleteFiles doesn't delete files by their path names",
    "systemSpecification": true,
    "version": "1.4"
}