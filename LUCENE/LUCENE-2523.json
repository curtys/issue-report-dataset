{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "bq. I think instead we should throw an IndexTooOldException or something like that?\n\n+1 - should be nice warm warnings for all index version incompat stuff. A Solr user ran into this the other day I think.",
            "date": "2010-07-02T12:47:37.106+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Here initial patch. I have not yet added a new Exception, but if the text is saying all information and we maybe better use Version Names that contain the first/last supported Lucene Version (not format version), we are fine.",
            "date": "2010-07-18T13:45:21.503+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Here a revised patch after discussion in IRC:\n- Move the SegmentInfos Versions to the default reader/writer. There is still the format version used at one place in o.a.l.index, maybe we should remove version support there, too\n- Added two Exceptions for too old and too new index.\n- Unified all messages",
            "date": "2010-07-18T14:41:37.330+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "Added minimum version support to CodecUtil.",
            "date": "2010-07-18T15:09:01.320+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "This patch now also adds a test, that tries to open old indexes in TestBaclwards and tries to use them. This should produce *only* IndexTooOldExceptions, if other exceptions are throws we have still bugs.\n\nYou have to add the old zip files back from 3.x branch with slight renaming. I prefer to use all of them to check all possible old formats, especially those with no version support.\n\nAll tests pass.",
            "date": "2010-07-18T16:14:05.134+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "I think this is ready to commit!",
            "date": "2010-07-18T17:50:31.965+0000",
            "id": 5
        },
        {
            "author": "Chris Male",
            "body": "Since its the format of the index, not the index itself, that is too old / too new, I vote for calling the exceptions IndexFormatTooOldException / IndexFormatTooNewException.  ",
            "date": "2010-07-19T14:37:49.989+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "I had the same idea, I think I should change this! I will also change the Exception ctor a little bit to produce a generic text, maybe including filename and min/max format version.",
            "date": "2010-07-19T15:21:46.551+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "- Rename of Exception\n- Disabled the segments.gen version check. I had several exceptions about illegal format 0 on windows.\n\nWill investigate more tomorrow.",
            "date": "2010-07-19T21:08:32.986+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "The final patch:\n- I streamlined the exceptions. The ctor tooks filename, actual format version and min/max. The message is then generated in the exception ctor and looks identical everywhere in the code. Where the filename is not available, it is left out (null). Maybe we should add the filename to CodecUtils, to be able to display it on errors. This helps finding out, which file has wrong header. Or is there a way to get file name from IndexInput?\n- I keep the segments.gen version check disabled, this seems to be needed on windows, to be able to retry.\n\nI will commit soon!",
            "date": "2010-07-20T12:54:32.784+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 965868",
            "date": "2010-07-20T14:56:46.441+0000",
            "id": 10
        }
    ],
    "component": "core/index",
    "description": "If you create an index in 2.3.x (I used demo's IndexFiles) and then try to read it in 4.0.x (I used CheckIndex), you hit a confusing exception like this:\n{noformat}\njava.io.IOException: read past EOF\n        at org.apache.lucene.store.BufferedIndexInput.refill(BufferedIndexInput.java:154)\n        at org.apache.lucene.store.BufferedIndexInput.readByte(BufferedIndexInput.java:39)\n        at org.apache.lucene.store.ChecksumIndexInput.readByte(ChecksumIndexInput.java:40)\n        at org.apache.lucene.store.DataInput.readInt(DataInput.java:76)\n        at org.apache.lucene.index.SegmentInfo.<init>(SegmentInfo.java:171)\n        at org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:230)\n        at org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:269)\n        at org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:649)\n        at org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:484)\n        at org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:265)\n        at org.apache.lucene.index.CheckIndex.checkIndex(CheckIndex.java:308)\n        at org.apache.lucene.index.CheckIndex.checkIndex(CheckIndex.java:287)\n        at org.apache.lucene.index.CheckIndex.main(CheckIndex.java:930)\n{noformat}\n\nI think instead we should throw an IndexTooOldException or something like that?",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2523",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "if index is too old you should hit an exception saying so",
    "systemSpecification": true,
    "version": ""
}