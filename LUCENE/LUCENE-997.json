{
    "comments": [
        {
            "author": "Sean Timm",
            "body": "Patch against trunk revision 575451.",
            "date": "2007-09-13T21:09:00.505+0000",
            "id": 0
        },
        {
            "author": "Sean Timm",
            "body": "Simple test case.  Run by passing in the index directory as an argument.",
            "date": "2007-09-13T21:11:30.615+0000",
            "id": 1
        },
        {
            "author": "Sean Timm",
            "body": "Here are some additional details on the changes.\n\nNew files:\nTimeLimitedCollector.java\n\n    Extends HitCollector and detects timeouts resulting in a TimeLimitedCollector.TimeExceeded exception being thrown.\n\nTimerThread.java\n\n    TimerThread provides a pseudo-clock service to all searching threads, so that they can count elapsed time with less overhead than repeatedly calling System.currentTimeMillis.  A single thread should be created to be used for all searches.\n\nModified Files:\nHits.java\n\n    Added partial result flag.\n\nIndexSearcher.java\n\n    Catches TimeLimitedCollector.TimeExceeded, sets partial results flag on TopDocs and estimates the total hit count (if we hadn't timed out partway through).  Returns TopDocs with partial results.\n\nSearcher.java\n\n    Added methods to set and get the timeout parameters.  This implementation decision has the limitation of only permitting a single timeout value per Searcher instance (of which there is usually only one).  However, this greatly minimizes the number of search methods that would need to be added.  In practice, I have not needed the functionality to change the timeout settings on a per query basis.\n\nTopFieldDocCollector.java\n\n    Uses TimeLimitedCollector functionality.\n\nTopDocCollector.java\n\n    Uses TimeLimitedCollector functionality and exposes it to child class TopFieldDocCollector.\n\nTopDocs.java\n\n    Added partial results flag.  Note, TopFieldDocs extends this class and inherits the new functionality.",
            "date": "2007-09-13T21:14:58.445+0000",
            "id": 2
        },
        {
            "author": "Daniel Naber",
            "body": "Thanks for the patch. I didn't have a very close look, just one small thing: it's probably no good idea to catch and ignore the InterruptedException. See http://www-128.ibm.com/developerworks/java/library/j-jtp05236.html",
            "date": "2007-09-14T18:55:44.563+0000",
            "id": 3
        },
        {
            "author": "Hoss Man",
            "body": "I'm not entirely convinced it makes sense to modify these classes to include timeouts as core functionality ... would it make more sense to deal with this in subclasses of IndexSearcher/TopDocs/Hits ?",
            "date": "2007-09-15T00:41:20.129+0000",
            "id": 4
        },
        {
            "author": "Sean Timm",
            "body": "http://www-128.ibm.com/developerworks/java/library/j-jtp05236.html\n\nTimerThread Now follows Brian Goetz's best practice for a noncancelable task that restores interrupted status before returning rather than ignoring the InterruptedException.",
            "date": "2007-09-17T21:54:44.581+0000",
            "id": 5
        },
        {
            "author": "Sean Timm",
            "body": "Two issues are addressed in this latest patch:\n\n1) Timeout support was not added to: public TopFieldDocs search(Weight weight, Filter filter, final int nDocs, Sort sort)\n\n2) getCounter() in TimerThread was replaced by getMilliseconds()\n",
            "date": "2007-10-19T19:41:19.225+0000",
            "id": 6
        },
        {
            "author": "Doron Cohen",
            "body": "I think this is a nice feature to have.\n\nBut I am not sure about the propsed API - the application creates a TimerThread, starts it, and the timer thread is then passed to the searcher with setTimeOut(timer,ticks). Not so simple.\n\nI think my preference for the API and implementation would be in HitCllector.collect() - in other words, we consider this new feature as an advanced one, and so only allow applications to provide their \"timed\" hitCollector. The modified collect() would either throw a TimeoutException or return a timedOut indication. If this is a (subclass of) RunTimeException (thuogh I am not crazy about this alternative) then there's no API change (a plus) but we need to verify that the code below propagates the RuntimeException gracefully and closes all the streams and everything (which I believe it does with all last careful changes by Mike and Michael). If RuntimeEXception is not acceptable, then this is an API change (a minus) and also many (simple) changes will be required in scorers (callers to collect). \n\nThe application's timedColletor will have all the logic in that collector for both announcing and detecting the timeout. Next we can add a TimedCollector for the benefit of applications, and last, consider adding search() methods with timeOut, but I doubt that last step.",
            "date": "2007-10-23T20:37:03.576+0000",
            "id": 7
        },
        {
            "author": "Yonik Seeley",
            "body": "> allow applications to provide their \"timed\" hitCollector\n\n+1\n",
            "date": "2007-10-23T21:43:05.470+0000",
            "id": 8
        },
        {
            "author": "Lance Norskog",
            "body": "\nI just requested a more fancy feature in the Solr Jira. My apologies, I did not think to search the Lucene Jira.\n\n\n1) timeout: stop searching after N milliseconds and return results using only those hits already found\n2) hit limit: stop searching after N milliseconds and return results using only those hits already found\n3) ram limit: estimate the amount of ram used so far and stop searching at a given amount\n\nHere is the complete request:\n",
            "date": "2007-10-26T23:44:07.576+0000",
            "id": 9
        },
        {
            "author": "Lance Norskog",
            "body": "I stumbled above; I do not yet know Jira :)  The Solr code is SOLR-392.\n\nThis request is inspired by a public search engine with millions of records. \n There are three different aspects mentioned above that can cause a query to \"go rogue\": timing out, finding too many records to give a truly useable result, and using up too much memory. The point is that if a search is going to find 14 million hits, Google does not go and tally them. It stops quickly and estimates how many might remain. I would like to have similar control. \n\nThe HitCollector implementation mentioned above would allow all three of these control options. If they could be pipelined together we could use any or all of them.",
            "date": "2007-10-26T23:49:58.558+0000",
            "id": 10
        },
        {
            "author": "Sean Timm",
            "body": "> I think my preference for the API and implementation would be in HitCollector.collect()\n\nThis would be simpler, but I don't see how it would be possible to estimate the total number of results and return partial results in that case.  I think that is an important feature.\n\nIf the concern is complexity for the application, perhaps it is possible to hide the TimerThread altogether.  The TimerThread could be created and started via a searcher setTimeOut(tick, numTicks) method.\n\nTo simplify it further, ticks could be fixed at a reasonable number, e.g., 100 ms, and a timeout in milliseconds could be passed in: setTimeout(milliseconds).",
            "date": "2007-11-15T05:44:43.870+0000",
            "id": 11
        },
        {
            "author": "Doron Cohen",
            "body": "{quote}\nTimerThread provides a pseudo-clock service to all searching threads, \nso that they can count elapsed time with less overhead than repeatedly \ncalling System.currentTimeMillis. A single thread should be created to \nbe used for all searches.\n{quote}\nIs this really faster than calling System.currentTimeMillis()?\nI quick searched but found no references supporting this. \nThis one says the opposite:\n  http://www.devx.com/Java/Article/28685\nBecause if this is not the case, you could do without the TimerThread?\n",
            "date": "2007-12-15T21:57:12.243+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "I think one benefit of a dedicated timer thread is not being affected\nby clock shift on the machine.  System.currentTimeMillis() is not\nguaranteed to be monotonic.  System.nanoTime() (1.5 only!) tries\nto be (I think), but it's still not guaranteed.\n\nWithout a monotonic clock, if the clock shifts forward then it could\ntimeout in-flight queries (way) too early.\n\nBut: what happens when TimerThread overflows the int (a\n2*1024*1024*1024)?  Is it the caller's job to deal with the\nwraparound?\n",
            "date": "2007-12-15T22:30:51.210+0000",
            "id": 13
        },
        {
            "author": "Doron Cohen",
            "body": "Nice, I didn't think of this.\n\nSo with this understanding the timer thread  (with long vs int) \nmakes sense while in Java 1.4, then in 1.5 System.nanoTime\nwill do.\n\nThe suggested patch relied on collect() being called, and\nso if a scorer takes long going over all the posting lists but\nfails to find a single match after the time passed, the search \noperation will not be stopped. I guess it is a fair assumption \nthat this would be very rare... \n(so would be a system clock shift...  : - ) )\n\nAlso important to understand is what happens with IO \nresources once search is aborted with timeout exception. \nCurrent patch does not close the underlying streams (I \nmean IndexInput clones). I think this is ok, because \nonce the search is aborted and there are no more references \nto the weights&scorers, the IndexInput clones would be \neventually garbage collected. Others?",
            "date": "2007-12-16T06:47:40.273+0000",
            "id": 14
        },
        {
            "author": "Nadav Har'El",
            "body": "I'd like to add my 2 cents on this issue.\n\nThe more I use Lucene in various ways, the more I'm getting convinced that the \"Hits\" API should be de-emphasized (if not outright depracated), and users should be encouraged to use the HitCollector API (search() taking a hitcollector, TopDocCollector, and so on) - especially for advanced usage.\n\nI believe that your TimeLimitedCollector is an interesting idea. However, there is simply no justification to change TopDocCollector, TopFieldDocCollector, Topdocs, Hits and Searcher. There's a MUCH simpler, and in my opinion cleaner, approach: Just make TimeLimitedCollector be a front-end for another collector (for example, TopDocCollector) which will be passed to TimeLimitedCollector's constructor. For every document that is presented to TimeLimitedCollector's collect(), it would call the inner collector's collect().\n\nThis way, without any changes to Lucene's core APIs, and just the addition of a new class, you can add the new functionality that you wanted. This, I think, is the beauty of the HitCollector interface over the \"monolithic\" Hits approach, and I think we should encourage this way of thinking instead of adding more and more features to Hits.",
            "date": "2007-12-16T07:56:17.149+0000",
            "id": 15
        },
        {
            "author": "Yonik Seeley",
            "body": "{quote}make TimeLimitedCollector be a front-end for another collector (for example, TopDocCollector) which will be passed to TimeLimitedCollector's constructor.{quote}\n+1",
            "date": "2007-12-16T22:09:31.452+0000",
            "id": 16
        },
        {
            "author": "Doron Cohen",
            "body": "Sean, can you revise your patch to follow the suggestions above?\n\nThat is, create a TimeLimitedCollector that takes and Collector parameter \nfor its constructor. You should be able to hide all the TimerThread \ndetails (use long instead of int) within the implementation of this \nnew collector class, and so when moving to Java5  the TimeThread \ncan be replaced by nanoTime.\n\nThen we can add to either core search or under contrib.\n\nOn a related point - I am not happy with programming by a \nruntimException - if others agree that this should become \na standard functionality, how about modifying Collector.collect()\nto return a stop-or-continue indicator?",
            "date": "2007-12-17T04:53:26.076+0000",
            "id": 17
        },
        {
            "author": "Sean Timm",
            "body": "Thanks for all of the feedback.  I'll take another stab at this.  I'm on vacation now and probably won't have time until I get back.  It'll probably be early Jan. before I have a new patch ready.",
            "date": "2007-12-20T05:39:49.913+0000",
            "id": 18
        },
        {
            "author": "Timo Nentwig",
            "body": "IMHO it definitely should be part of the core. Being able to control the runtime of queries/your ressources is crucial for every live system and I really wonder this it has taken so long to address this.\n\nOtherwise I totally agree with Navdav: that Hits thingie is nice and fine for simple full-text queries but as soon as things become somewhat more complex you don't get around writing your own HitCollector (and do stuff like Facets).\n\nI also strongly agree that the timeout HC should be implemented as an decorator (what's been called \"front-end\" here), I just quickly wrote an example and attached it (no, I'm not happy throwing an runtime exception either):\n\nMyHitCollector hc = new MyHitCollector();\ns.search(q, null, HitCollectorTimeoutDecorator.decorate( hc, 10 ) );\n\nAnd finally, why return partial results? I don't think that this is reasonable.\n\nBTW I'm not sure whether volatile in the timer thread is really working reliably in 1.4...\n",
            "date": "2008-01-01T12:22:09.572+0000",
            "id": 19
        },
        {
            "author": "Timo Nentwig",
            "body": "Example of the timeout HitCollector implemented as an decorator.",
            "date": "2008-01-01T12:23:28.012+0000",
            "id": 20
        },
        {
            "author": "Timo Nentwig",
            "body": "Example HitCollector to be decorated by HitCollectorTimeoutDecorator.",
            "date": "2008-01-01T12:24:05.264+0000",
            "id": 21
        },
        {
            "author": "Paul Elschot",
            "body": "By using only a HitCollector it cannot be guaranteed that searches will not take too long. The reason is that there are searches that take a long time but do not collect any docs.\n\nFor example consider the case where every even doc has term A and every odd doc has term B, and the query requires both A and B. This is going to take an amount of time that is linear in the size of the index but no document will be collected.\n\nThis means that every conjunction (boolean queries with more than one required clause, phrase queries, span near queries) will need to check for timeout. Also a HitCollector with a timeout facility will need a way\nto be informed of a timeout when no document is collected.",
            "date": "2008-01-01T15:00:54.339+0000",
            "id": 22
        },
        {
            "author": "Timo Nentwig",
            "body": "True, unfortunately, but still better than nothing (->current situation). This approach isn't very precise in matters of timing either. Also, throwing a RuntimeException feels more like a hack than well thought out code...\n\nI don't know Lucene's code good enough in order to estimate whether it's possible to build a real timeout machanism at all/without changing the API/rewriting a lot of code but it's incredibly important to be able to cancel running queries. You don't want to servers under high load suffering from lucene queries running up to multiple *minutes* at the same time consuming quite a lot of memory. And it makes no sense either because nobody is waiting so long for results...",
            "date": "2008-01-01T15:32:15.051+0000",
            "id": 23
        },
        {
            "author": "Sean Timm",
            "body": "Created a patch using Timo's HitCollectorTimeoutDecorator.  This patch just has a few mostly minor changes.  The biggest changes are that it uses a long instead of an int for the counter in TimerThread and the TimerThread interval is fixed at 10 ms.  It also throws a TimeLimitedCollector.TimeExceeded exception on a timeout.",
            "date": "2008-01-25T20:02:08.064+0000",
            "id": 24
        },
        {
            "author": "Sean Timm",
            "body": "Updated bad patch with good copy.\n\nCreated a patch using Timo's HitCollectorTimeoutDecorator. This patch just has a few mostly minor changes. The biggest changes are that it uses a long instead of an int for the counter in TimerThread and the TimerThread interval is fixed at 10 ms. It also throws a TimeLimitedCollector.TimeExceeded exception on a timeout.",
            "date": "2008-01-25T20:11:45.521+0000",
            "id": 25
        },
        {
            "author": "Sean Timm",
            "body": "Updated to work with latest patch.",
            "date": "2008-01-25T20:12:52.081+0000",
            "id": 26
        },
        {
            "author": "Sean Timm",
            "body": "The TimerThreadTest illustrates the accuracy of the TimerThread under load.  On my 2GHz Xeon 4 CPU dual core RH AS 4 Linux box, it get a 20% difference between the TimerThread implementation and System.currentTimeMillis() and is independent of load.\n\njava TimerThreadTest 8\n[...]\n10010   12020   [...]\n\nWith my single core single CPU Windows XP laptop I see a 20% difference at load, but when adding additional threads, I see an increasing difference.\n\njava TimerThreadTest 0\n[...]\n10000   11819 [...]\n\njava TimerThreadTest 2\n[...]\n10040   18890 [...]\n\n",
            "date": "2008-01-25T20:34:58.484+0000",
            "id": 27
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "I believe this version of the patch won't work properly unless you add synchronization - writes to long values are non-atomic (Java Language Specification 17.7, as the comment says), that's why Nutch uses an int there. Perhaps using AtomicLong would be an answer, if you really need a long value.",
            "date": "2008-01-25T23:35:25.860+0000",
            "id": 28
        },
        {
            "author": "Nicolas Lalev\u00e9e",
            "body": "AtomicLong is a Java 1.5 feature, so it doesn't fit either.",
            "date": "2008-01-26T09:52:14.742+0000",
            "id": 29
        },
        {
            "author": "Paul Elschot",
            "body": "After LUCENE-584 more work will be needed to get all conjunctions in the same place, but it is a starting point.\n\nOnce all conjunctions are in the same place, it would make sense to add a timeout there.\n",
            "date": "2008-01-26T11:10:54.489+0000",
            "id": 30
        },
        {
            "author": "Sean Timm",
            "body": "Andrzej--\n\nJLS 17.7 Non-atomic Treatment of double and long\n\n\"Writes and reads of volatile long and double values are always atomic.\"",
            "date": "2008-01-26T14:59:13.254+0000",
            "id": 31
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "Indeed, thanks for the correction - I forgot about the special treatment of volatile values.",
            "date": "2008-01-26T23:23:44.590+0000",
            "id": 32
        },
        {
            "author": "Sean Timm",
            "body": "You are right that I forgot to change the comment when I changed it from an int to a long though.  \"* updates to 32-bit-sized variables are atomic\" is a pretty pointless comment now. :-)",
            "date": "2008-01-27T03:59:10.808+0000",
            "id": 33
        },
        {
            "author": "Timo Nentwig",
            "body": "@Sean: \"The biggest changes are that it uses a long instead of an int for the counter in TimerThread\" - didn't I use a volatile long already? :)\n\nI hope this will become part of the next release. IMHO this is Priority Major or above...",
            "date": "2008-01-27T08:08:52.101+0000",
            "id": 34
        },
        {
            "author": "Paul Elschot",
            "body": "In the timeout.patch, instead of this:\n{code}\ntime += resolution;\n{code}\nI'd rather have this:\n{code}\ntime = System.currentTimeMillis();\n{code}\nbecause all of the wait() methods can become unreliable, especially at high loads.\n\nWith (or without) this change, 100 msecs or even 200 msecs could be used as the\nupdate frequency instead of the current 10 msecs.\n\nBy computing the time out moment up front, one subtraction can be saved at each document collection. Then only TIMER_THREAD.getMilliseconds() method is needed at document collection time, and the getElapsedMilliseconds() method is superfluous.\n",
            "date": "2008-01-27T08:54:20.793+0000",
            "id": 35
        },
        {
            "author": "Sean Timm",
            "body": "@Timo: \"didn't I use a volatile long already?\"  Indeed.  I guess that wasn't a very big change then. ;-)",
            "date": "2008-01-28T14:32:18.531+0000",
            "id": 36
        },
        {
            "author": "Sean Timm",
            "body": "This is a minor update to timeout.patch which fixes the comment about updates to 32-bit-sized variables being atomic and instead talks about volatile longs, as pointed out by Andrzej.  It also computes the time out moment up front to save a subtraction on each document collection as suggested by Paul.",
            "date": "2008-01-29T19:18:55.848+0000",
            "id": 37
        },
        {
            "author": "Sean Timm",
            "body": "I could go either way on the System.currentTimeMillis() versus a TimerThread issue.  I agree nanoTime is the correct implementation when using 1.5.\n\nIt doesn't seem like on Linux running ntp it matters much either way.  NTP tries to perform smoothing and makes clock changes slowly over a longer period of time when it can rather than have an abrupt change, but YMMV if your system is having clock issues.  On a really overloaded Windows box, the TimerThread implementation will not behave well as demonstrated above.  I can't speak to any other platforms.",
            "date": "2008-01-29T19:38:49.203+0000",
            "id": 38
        },
        {
            "author": "Paul Elschot",
            "body": "The idea of System.currentTimeMillis() is to guard against misbehaviour of the java wait() method and against unexpected delays because of thread scheduling during the jump back for the loop around the wait() call.\nOne way to reduce such misbehaviour under heavy load is by increasing the scheduling priority of the timing thread, but I don't think that is necessary.\n\nAlso System.currentTimeMillis() is obviously correct, whereas timeout += resolution is never more than an assumption about correct wait() behaviour.\n\nClock changes by NTP are normally so slow that they don't really matter for query time outs.\n",
            "date": "2008-01-29T22:28:10.958+0000",
            "id": 39
        },
        {
            "author": "Doron Cohen",
            "body": "Sean, can you add a Junit test to timeout.patch?\n\nI think such test should check (1) search correctness (regardless of timeout), (2) expected timeout behavior, and (3) some sanity test with multiple searching threads. This can also serve as an example for using this new collector.\n\nCheers.\nDoron\n\n",
            "date": "2008-01-30T18:48:37.400+0000",
            "id": 40
        },
        {
            "author": "Timo Nentwig",
            "body": "IIRC I did time=System.currentTimeMillis() first but was surprised how slow this method actally is.",
            "date": "2008-02-05T12:09:34.755+0000",
            "id": 41
        },
        {
            "author": "Paul Elschot",
            "body": "Would that still be a problem with a 200ms resolution?",
            "date": "2008-02-05T16:57:03.542+0000",
            "id": 42
        },
        {
            "author": "Sean Timm",
            "body": "Patch adds JUnit test cases as suggested by Doron.",
            "date": "2008-02-05T17:47:03.809+0000",
            "id": 43
        },
        {
            "author": "Timo Nentwig",
            "body": "200ms? No, probably not. I don't recall what resolution I used in my test but actually the timeout check took more time than the Lucene query...",
            "date": "2008-02-05T18:03:25.981+0000",
            "id": 44
        },
        {
            "author": "Sean Timm",
            "body": "Paul,\nI think that if we were to use System.currentTimeMillis(), we would eschew the TimerThread as Doron suggests in his Dec. 15 comment.  I haven't seen any performance issues with System.currentTimeMillis().\n\nAs far as 200ms, I think that is too large of a default resolution (and with the current implementation it is not configurable).  With a 200 ms resolution, a query with a 1 second time allowed could timeout in 800 ms, and one with a time allowed of 500 ms could timeout in 300 ms.  I think it is much worse to timeout a query early than to timeout late.",
            "date": "2008-02-05T22:11:33.380+0000",
            "id": 45
        },
        {
            "author": "Doron Cohen",
            "body": "Sean thanks for adding the test.\n\nIn the attached I tightened the check of allowed elapsed time until timeout.\nAlso added info in the exception, and added ability to modify the resolution - default is 20ms (was 5ms).\nPlease let me know what you think. \n\nAs for System.currentTimeMillis() vs. Timer thread - IMHO Mike's comment on 'system clock changes' makes the timer thread favorable.\n\nI checked this with up to 10,000 threads and with that number the test sometimes fails because it is quite tight on the max elapsed time required comparing to the timeout, so I don't see this is a problem. In the attached N_THREADS = 50 and this number of threads always passes for me.\n\nIf there are no more major concerns I think this is now ready to go in, question is where to - under core o.a.l.search or under contrib (query or misc). \nOthers?",
            "date": "2008-02-06T12:43:44.764+0000",
            "id": 46
        },
        {
            "author": "Sean Timm",
            "body": "Doron, your comment for setResolution(long) says \"The default timer resolution is 50 milliseconds\", however, the default is actually 20 ms (public static final int DEFAULT_RESOLUTION = 20;).  Other than that, everything looks great.",
            "date": "2008-02-06T16:02:25.516+0000",
            "id": 47
        },
        {
            "author": "Doron Cohen",
            "body": "Oh wrote comment that was before I decided to change the default... \nThanks for catching this.",
            "date": "2008-02-06T16:10:24.513+0000",
            "id": 48
        },
        {
            "author": "Doron Cohen",
            "body": "Attached patch corrects default resolution comment.",
            "date": "2008-02-06T16:16:41.871+0000",
            "id": 49
        },
        {
            "author": "Sean Timm",
            "body": "\"If there are no more major concerns I think this is now ready to go in, question is where to - under core o.a.l.search or under contrib (query or misc).\"\n\nMy preference would be for core o.a.l.search.",
            "date": "2008-02-12T18:48:06.821+0000",
            "id": 50
        },
        {
            "author": "Timo Nentwig",
            "body": "I agree, core.",
            "date": "2008-02-12T18:53:52.251+0000",
            "id": 51
        },
        {
            "author": "Yonik Seeley",
            "body": "> My preference would be for core o.a.l.search.\n+1",
            "date": "2008-02-12T18:57:26.680+0000",
            "id": 52
        },
        {
            "author": "Doron Cohen",
            "body": "Committed (under core o.a.l.search).\nThanks Sean!",
            "date": "2008-02-12T21:02:15.358+0000",
            "id": 53
        }
    ],
    "component": "",
    "description": "This patch is based on Nutch-308. \n\nThis patch adds support for a maximum search time limit. After this time is exceeded, the search thread is stopped, partial results (if any) are returned and the total number of results is estimated.\n\nThis patch tries to minimize the overhead related to time-keeping by using a version of safe unsynchronized timer.\n\nThis was also discussed in an e-mail thread.\nhttp://www.nabble.com/search-timeout-tf3410206.html#a9501029",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-997",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add search timeout support to Lucene",
    "systemSpecification": true,
    "version": ""
}