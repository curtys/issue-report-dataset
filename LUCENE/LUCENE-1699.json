{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "incomplete patch for feedback - needs tests and further work to allow binary field values with token streams (I assume this would be desirable for numeric fields).",
            "date": "2009-06-16T20:13:10.829+0000",
            "id": 0
        },
        {
            "author": "Mark Miller",
            "body": "Another 2.9 huh? You own it then :)",
            "date": "2009-06-16T21:02:21.367+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "Watch out - there's a new sheriff in town!",
            "date": "2009-06-16T21:07:16.872+0000",
            "id": 2
        },
        {
            "author": "Mark Miller",
            "body": "This group could develop hard for the rest of the year no problem by the looks. Someones got to herd these cats. Since we last semi decided it would be a good idea to release 2.9, we have rewritten half the core code base :)",
            "date": "2009-06-16T21:10:07.814+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "\nPatch looks good:\n\n  * Can you make sure CHANGES describes this new behavior (Field is\n    allowed to have both a tokenStream and a String/Reader/binary\n    value)?\n\n  * The javadoc for readerValue is wrong (copy/paste from stringValue)\n\n  * Can you spell out more clearly in the javadocs that even when a\n    tokenStream value is set, one of String/Reader/binary may also be\n    set, or, not, and if so, that \"other\" value is only used for\n    stored fields.  Eg, explain why one would use setTokenStream\n    instead of setValue(TokenStream value).\n",
            "date": "2009-06-17T09:20:47.121+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "Patch attached.\n\nI've attempted to clean up some of the semantics of Fieldable - it's really a reasonable interface, with just a few redundancies (isBinary/getBinary).  I've purposely avoided messing with Field more than necessary (adding yet more constructors, constants, etc).\n\nThis change is back compatible as it just removes some unnecessary restrictions.  I'll commit in a few days.",
            "date": "2009-06-20T19:28:42.206+0000",
            "id": 5
        },
        {
            "author": "Yonik Seeley",
            "body": "committed.",
            "date": "2009-06-22T23:07:38.660+0000",
            "id": 6
        }
    ],
    "component": "",
    "description": "Field.tokenStream should be usable for indexing even for stored values.  Useful for many types of pre-analyzed values (text/numbers, etc)\nhttp://search.lucidimagination.com/search/document/902bad4eae20bdb8/field_tokenstreamvalue",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1699",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Field tokenStream should be usable with stored fields.",
    "systemSpecification": true,
    "version": ""
}