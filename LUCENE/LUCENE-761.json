{
    "comments": [
        {
            "author": "Grant Ingersoll",
            "body": "Hi Michael,\n\nI am not sure I understand why 755 blocks this one.  I would think it would be the other way around, that way we could integrate this into scoring and people could access it seamlessly w/o having to change their query code (except maybe the similarity, as I suggested, or by adding some other interface).  \n\n\n-Grant",
            "date": "2006-12-29T14:51:18.000+0000",
            "id": 0
        },
        {
            "author": "Michael Busch",
            "body": "Grant,\n\nyour are absolutely right, 755 does not block this issue. The reason why I wanted to wait to submit a patch here was that 755 and this one are changing the same files. So committing this one would have prevented 755 from applying cleanly on the trunk. But since there were a couple of commits in the last days/weeks and the Payloads API is still under discussion I can as well submit a patch here now, because I have to change 755 to apply cleanly to the trunk anyway.",
            "date": "2007-01-18T13:35:20.546+0000",
            "id": 1
        },
        {
            "author": "Grant Ingersoll",
            "body": "If I understand correctly, all we need on this one is to move line 37 of SegmentTermPositions to line 55, right?",
            "date": "2007-03-10T12:50:04.564+0000",
            "id": 2
        },
        {
            "author": "Michael Busch",
            "body": "Grant,\n\nyou're right, it is a simple change to clone the stream lazily. And I think I will do that for now. The benefit then is, that it won't be more expensive anymore to use a SegmentTermPosition object instead of a SegmentTermDocs in scorers. \n\nHowever, there might be one drawback. SegmentTermDocs implements the method \n   int read(final int[] docs, final int[] freqs)\nwhich is used by TermScorer for better performance. SegmentTermPositions overwrites this method and just throws a UnsupportedOperationException. This just becomes a problem if we want to make TermScorer extendable, so that subclasses can make use of payloads.... But actually I don't see much benefit in extending TermScorer over just extending Scorer for such a use case. What do you think?",
            "date": "2007-03-10T20:04:26.907+0000",
            "id": 3
        },
        {
            "author": "Michael Busch",
            "body": "Here is the simple patch. All unit tests pass. I'll commit this soon if nobody objects...",
            "date": "2007-03-10T20:30:06.435+0000",
            "id": 4
        },
        {
            "author": "Michael Busch",
            "body": "I just committed this.",
            "date": "2007-03-11T07:15:03.674+0000",
            "id": 5
        }
    ],
    "component": "core/index",
    "description": "In SegmentTermPositions the proxStream should be cloned lazily, i. e. at the first time nextPosition() is called. Then the initialization costs of TermPositions are not higher anymore compared to TermDocs and thus there is no reason anymore for Scorers to use TermDocs instead of TermPositions. In fact, all Scorers should use TermPositions, because custom subclasses of existing scorers might want to access payloads, which is only possible via TermPositions. We could further merge SegmentTermDocs and SegmentTermPositions into one class and deprecate the interface TermDocs.\n\nI'm going to attach a patch once the payloads feature (LUCENE-755) is committed.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-761",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Clone proxStream lazily in SegmentTermPositions",
    "systemSpecification": true,
    "version": ""
}