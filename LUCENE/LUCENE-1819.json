{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "I agree - thanks John.",
            "date": "2009-08-18T00:52:02.618+0000",
            "id": 0
        },
        {
            "author": "Mark Miller",
            "body": "unless someone has an objection, I'm going to commit this in a day or two.",
            "date": "2009-08-18T03:20:48.619+0000",
            "id": 1
        },
        {
            "author": "Mark Miller",
            "body": "Thats funny - I didn't realize you originally donated this back in 05 - 4 years later, almost to the day (it was committed August 21st), you are back to correct the parsable toString.\n\nThats interesting stuff.",
            "date": "2009-08-18T13:31:29.318+0000",
            "id": 2
        },
        {
            "author": "John Wang",
            "body": "Thanks Mark for taking care of this issue!\nw.r.t. this class, funny coincidence :)\n\nWhat are you thoughts about QueryParser being able to know about custom Query implementations? E.g. if I were to write a MyQuery class and implemen the toString method a certain way, how would QueryParser know about MyQuery? Is it possible to extend QueryParser?",
            "date": "2009-08-18T14:51:47.170+0000",
            "id": 3
        },
        {
            "author": "Mark Miller",
            "body": "bq. What are you thoughts about QueryParser being able to know about custom Query implementations? E.g. if I were to write a MyQuery class and implemen the toString method a certain way, how would QueryParser know about MyQuery?\n\nRight - this has always been a limitation. That is why the wording has been loosened a lot of the years in Query.toString(). There is really not a lot you can do here - non of the SpanQuerys produce parsable toStrings because there is no support for SpanQuerys in the QueryParser. I think a couple others do not work either. I think its just got to be something we live with - you simply can't count on it - but if possible, its nice I guess - especially for the core queries.\n\nbq.  Is it possible to extend QueryParser?\n\nIts possible to extend it, but not really syntax wise. The new QueryParser in contrib will likely be more extensable in that regard in a way - though still you would be building another parser - it would just hopefully allow for a lot of non cut and paste reuse if you just want to add syntax (I think - I'm only at the surface with the new QP).\n\nOverall though, its not really a contract, because its not something users can adhere to. Its more of an internal nicety suggestion - but if your not a Query already in the QP, your out of luck anyway - at best you could toString to a primitive query parsable String if your custom query rewrites to primitives.",
            "date": "2009-08-18T15:41:11.692+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. it would just hopefully allow for a lot of non cut and paste reuse if you just want to add syntax \n\nBut the new query parser still uses the JavaCC grammar... so the most difficult part of adding new syntax (by far IMO) is unchanged.",
            "date": "2009-08-18T15:47:51.051+0000",
            "id": 5
        },
        {
            "author": "Mark Miller",
            "body": "Thanks John!",
            "date": "2009-08-18T23:10:00.790+0000",
            "id": 6
        }
    ],
    "component": "core/search",
    "description": "Should be \n\npublic String toString(String field){\n  return \"*:*\";\n}\n\nQueryParser needs to be able to parse the String form of this query.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1819",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "MatchAllDocsQuery.toString(String field) does not honor the javadoc contract",
    "systemSpecification": true,
    "version": "2.4.1"
}