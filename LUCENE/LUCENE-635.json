{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "TAR file containing sources as first cut at implementation.  I've also included patch files off revision 425918.",
            "date": "2006-07-27T00:34:24.000+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "This patch contains the same source changes as my July 26 patch, but this one is done \"correctly\" as the output of a single top-level \"svn diff\" command (ie, I ran \"svn add ...\" locall for the new files).  I also added an entry to CHANGES.txt, and corrected newlines on one of the sources.",
            "date": "2006-08-03T11:09:08.000+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "\nHas anyone had a chance to look at this patch?\n\nThis should be fully backwards compatible: old APIs have not changed.\nI've just added new ones that allow you to set the locking\nimplementation per Directory.  The default Locking implementation also\nhas not changed; it's just been refactored out of the *Directory.java\nsources.  So this should be a drop-in change to existing users of\nLucene.\n\nThis change passes all unit tests, and I added a new test (with 9 test\ncases) for LockFactory.\n\nThe above LUCENE-635-Aug3.patch still applies cleanly to the\ncurrent svn HEAD (431322).",
            "date": "2006-08-14T10:53:24.000+0000",
            "id": 2
        },
        {
            "author": "Otis Gospodnetic",
            "body": "I took a look at it a few weeks back.  If nobody takes care of it, I'll look at it again and hopefully commit it after I return from vacation in September.",
            "date": "2006-08-14T14:43:11.000+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Awesome, thanks Otis!  Have a great vacation!",
            "date": "2006-08-14T15:08:01.000+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "Very nice job Michael... very thorough.\nIn general, locking & synchronization is something that requires hard review since it's hard to test for correctness, but the thouroughness of your tests increases my confidence.\n\nSuper-minor improvement while I'm looking at it: could the following\nmethod body be replaced with \"synchronized(locks) {return locks.add(lockName);}\" ?\n\n+  public boolean obtain() throws IOException {\n+    synchronized(locks) {\n+      if (!locks.contains(lockName)) {\n+        locks.add(lockName);\n+        return true;\n+      } else {\n+        return false;\n+      }\n+    }\n+  }\n\nAs far as backward compatibility, could you speak to\n  1) FSDirectory.disableLocks\n  2) Slight changes in how FSLock.obtain works (the old one recreated the lock dir each time)\n",
            "date": "2006-08-17T21:16:58.000+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Thank you!  I agree, locking is sneaky and requires very thorough\nreview & testing.\n\nNice, I definitely like that more compact version of\nSingleInstanceLockFactory.obtain -- I'll fold that in.\n\nOn FSDirectory.disableLocks, which is a private static boolean set by\n\"setDisabledLocks\", if this is \"true\" when the FSDirectory is created\nthen FSDirectory uses the NoLockFactory for its locking; else it uses\nthe default SimpleFSLockFactory.  (This is only when the caller did\nnot provide a LockFactory instance).\n\nOOH I do see one difference: in the current code, if you call\nsetDisableLocks then this affects even a previously created\nFSDirectory, with the current code.  But with my changes, only newly\ncreated FSDirectory instances will have locking disabled.  Ie, it's no\nlonger \"retroactive\" to all previously created FSDirectory instances,\nwith my change.  Hmm.  OK I will fix this case.\n\nOn SimpleFSLock.obtain, you are correct: I lost the creation of the\nlock dir (if it doesn't exist) with each obtain.  Good catch!  I\ndidn't mean to lose it.  I will put it back in, and move it out of the\ninit() method in SimpleFSLockFactory.\n\nThanks for reviewing this!",
            "date": "2006-08-17T22:55:26.000+0000",
            "id": 6
        },
        {
            "author": "Yonik Seeley",
            "body": "Yeah... those were the slight differences in external behavior I saw.\nThat doesn't mean it's wrong, but it does mean we should examine if it's OK to change it (or just defer the changes to a later patch...).\n",
            "date": "2006-08-17T23:23:05.000+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "\nOK, does anyone have a strong opinion one way or another on these\nsmall changes?\n\nI would lean towards keeping the small change to \"setDisabledLocks()\".\nMeaning, it's only when you create a FSDirectory that the static\n\"disableLocks\" value is checked.  So, changing disabledLocks would no\nlonger retroactively affect all previously created FSDirectories,\nwhich seems too \"powerful\" -- what if I wanted some to be disabled and\nothers not?  Was it intentional that it was this powerful?  If we do\nthis we could document it in CHANGES.txt as a small difference.  Or,\nagain, I can put back the old behaviour if people think that's best.\n\nOn the second one, I agree we should keep the current behaviour of\nchecking existence of & creating the LOCK DIR with each obtain.  There\nwould be some performance benefit to only doing it on creating the\nlock factory, but, I don't think that's worth the risk of the change.\nSo I'll go ahead & fix that one.\n",
            "date": "2006-08-18T21:47:18.000+0000",
            "id": 8
        },
        {
            "author": "Yonik Seeley",
            "body": "> I would lean towards keeping the small change to \"setDisabledLocks()\".\n> Meaning, it's only when you create a FSDirectory that the static\n> \"disableLocks\" value is checked.\n\nI think this is probably OK.  In addition to being a little-used method, If one truely wanted locking disabled (for read-only media for example) they would be calling setDisableLocks() before opening an IndexReader anyway.\n",
            "date": "2006-08-26T14:51:40.000+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "OK, I agree.  I've updated the CHANGES.txt to state this small change.\n\nAnd I've fixed SimpleFSLockFactory to move directory existence checking & creation back into the obtain() method.\n\nNew patch attached!",
            "date": "2006-08-27T11:45:51.000+0000",
            "id": 10
        },
        {
            "author": "Yonik Seeley",
            "body": "Committed.  Thanks Michael!",
            "date": "2006-08-29T01:12:29.000+0000",
            "id": 11
        },
        {
            "author": "Doron Cohen",
            "body": "While updating my patch for 665 according the changes here, I noticed something - I may be wrong here - but it seems to me that until this change, all the actual FS access operations where performed by FSDirectory, using the Directory API. \n\nThe new SimpleFSLock and SimpleFSLockFactory also access the FS directly, not through FSDirectory API.\n\nThat Directory abstraction in Lucene allows to develop Lucene-in-RAM, Lucene-in-DB, etc. It is a nice feature. \n\nGuess we can say: \"well, now the abstraction is made of two interfaces - Lock and Directory, just make sure you use 'matching' implementations of them.\" This seems weaker than before.\n\nOr, can limit all file access to go through FSDirectory - \n- one possibility is to add to LockFactory a Directory object (as a class member); SimpleFSLockFactory can require thas Directory object to be FSDirectory (cast, and fail otherwise); also, FSDirectory should be extened with createSingleFile(), mkdirs() and isDirectory().",
            "date": "2006-08-29T19:54:13.000+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "With this change, \"Directory on DB\", \"Directory on RAM\", etc., still\nwork correctly.  In fact you can completely override the LockFactory\nbehavior by implementing your own \"makeLock\" in a subclass of\nDirectory if you want to.\n\nThis change just opens up the freedom to allow you to separately\nchoose how your locking is done.  I think this is important because\nmany applications have different locking requirements.  Perhaps you\nrequire no locking at all (NoLockFactory or legacy\nFSDirectory.setDisabledLocks), or everything happens in one JVM\n(SingleInstanceLockFactory), etc.\n\nThis also opens up the chance for people to work around locking issues\neg over NFS until we can get lock-less commits finished.\n\nI'm working on a LockFactory implementation that uses native OS locks\n(java.nio.*) and this will be another place that accesses the file\nsystem.  The java.io.File.createNewFile (used by the\nSimpleFSLockFactory) has a very spooky warning about not using it for\nlocking.\n\nWe could (as you're suggesting) indeed extend FSDirectory so that it\nprovided the low level methods required by a locking implementation,\nand then alter SimpleFSLockFactory/NativeFSLockFactory (or make a new\nLockFactory) so that all underlying IO is through the FSDirectory\ninstead.",
            "date": "2006-08-30T11:19:08.000+0000",
            "id": 13
        },
        {
            "author": "Doron Cohen",
            "body": "> We could (as you're suggesting) indeed extend FSDirectory so that it \n> provided the low level methods required by a locking implementation, \n> and then alter SimpleFSLockFactory/NativeFSLockFactory (or make a new \n> LockFactory) so that all underlying IO is through the FSDirectory instead.\n\nYes, this is exactly (and only) what I am suggesting to consider - to include a Directory member within the LockFactory so that it is clear that any LockFactory implementation operates in the realm of a directory (implementation) and is using it for any actual store accesses.",
            "date": "2006-08-30T19:34:48.000+0000",
            "id": 14
        }
    ],
    "component": "core/index",
    "description": "This is a spinoff of http://issues.apache.org/jira/browse/LUCENE-305.\n\nI've opened this new issue to capture that it's wider scope than\nLUCENE-305.\n\nThis is a patch originally created by Jeff Patterson (see above link)\nand then modified as described here:\n\n  http://issues.apache.org/jira/browse/LUCENE-305#action_12418493\n\nwith some small additional changes:\n\n  * For each FSDirectory.getDirectory(), I made a corresponding\n    version that also accepts a LockFactory instance.  So, you can\n    construct an FSDirectory with your own LockFactory.\n\n  * Cascaded defaulting for FSDirectory's LockFactory implementation:\n    if you pass in a LockFactory instance, it's used; else if\n    setDisableLocks was called, we use NoLockFactory; else, if the\n    system property \"org.apache.lucene.store.FSDirectoryLockFactoryClass\"\n    is defined, we use that; finally, we'll use the original locking\n    implementation (SimpleFSLockFactory).\n\nThe gist is that all locking code has been moved out of *Directory and\ninto subclasses of a new abstract LockFactory class.  You can now set\nthe LockFactory of a Directory to change how it does locking.  For\nexample, you can create an FSDirectory but set its locking to\nSingleInstanceLockFactory (if you know all writing/reading will take\nplace a single JVM).\n\nThe changes pass all unit tests (on Ubuntu Linux Sun Java 1.5 and\nWindows XP Sun Java 1.4), and I added another TestCase to test the\nLockFactory code.\n\nNote that LockFactory defaults are not changed: FSDirectory defaults\nto SimpleFSLockFactory and RAMDirectory defaults to\nSingleInstanceLockFactory.\n\nNext step (separate issue) is to create a LockFactory that uses the OS\nnative locks (through java.nio).\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-635",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "[PATCH] Decouple locking implementation from Directory implementation",
    "systemSpecification": true,
    "version": "2.0.0"
}