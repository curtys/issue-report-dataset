{
    "comments": [
        {
            "author": "Simon Willnauer",
            "body": "bq. So I think we should just provide ignore with CharArraySet, but if you feel otherwise please comment.\nWhile I read your proposal a possibly more flexible design came to my mind. We could introduce a StemAttribute that has a method public boolean stem() used by every stemmer to decide if a token should be stemmed. That way we decouple the decision if a token should be stemmed from the stemming algorithm. This also enables custom filters to set the values based on other reasons aside from a term being in a set. \nThe default value for sure it true but can be set on any condition. inside an analyzer we can add a filter right before the stemmer based on a CharArraySet. Yet if the set is empty or null we simply leave the filter out. \n\n",
            "date": "2010-01-09T18:39:22.503+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "hi Simon, the more i think about it, the more i like your design.\n\nthis way, for example, if someone has pos tagging/named entity recognition or a similar sophisticated NLP process, they could change the value of this attribute and prevent these from being stemmed at runtime. with static sets this is not possible.\n",
            "date": "2010-01-13T16:51:30.265+0000",
            "id": 1
        },
        {
            "author": "Erik Hatcher",
            "body": "+1 on the StemAttribute approach.  I've just encountered this exact need in some custom code I've been reviewing, where the decision to stem or not is dynamic per term (with the approach I'm looking at using a custom term type string and a custom stem filter).",
            "date": "2010-01-13T17:44:23.225+0000",
            "id": 2
        },
        {
            "author": "Simon Willnauer",
            "body": "This patch contains an intial design proposal. I tried to name the new attribute a little bit more generic as this could easily be used outside of the stemming domain.\n\nall tests pass -- comments welcome.",
            "date": "2010-01-13T18:49:23.037+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "the patch looks great to me Simon. I especially like the naming.",
            "date": "2010-01-13T19:05:37.351+0000",
            "id": 4
        },
        {
            "author": "Simon Willnauer",
            "body": "This patch ports all stemmers in core and contrib/analyzers to make use of the KeywordAttribute. \nI did not include snowball yet.",
            "date": "2010-01-17T15:44:21.957+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "The KeywordAttribute and *Impl looks correct. copyTo() behaves also correctly (this is important in some cases!).",
            "date": "2010-01-17T15:55:20.452+0000",
            "id": 6
        },
        {
            "author": "Yonik Seeley",
            "body": "One random thought is to wonder how much this adds to the cost of  capturing state - and if we should \"bundle\" this with other (future) binary flags into a word (this is what the original \"flags\" field on Token was for).",
            "date": "2010-01-17T16:57:17.382+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "If we start to discuss about such topics, we should not have used Attributes at all.\n\nThere is no additional cost, because with 3.0, the FlagAttribute is used nowhere, so it is not captured, too. We would just move this to another attribute, the cost is the same. And capturing a boolean costs no much. Because the State object is build internally before and just cloned. So the number of attributes vs. the size of the captured states do not affect performance in neglectible manner.",
            "date": "2010-01-17T17:04:30.540+0000",
            "id": 8
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. If we start to discuss about such topics, we should not have used Attributes at all. \n\nAttributes are great for allowing extensions.  But for attributes that often appear together, it seems like we should at least consider bundling them.\nYou seem to be implying that we shouldn't question the cost of doing things one way vs another?\n\nbq. There is no additional cost\n\nSurely the native clone() invoked for every additional attribute counts for something?\n\nbq. Because the State object is build internally before and just cloned. So the number of attributes vs. the size of the captured states do not affect performance in neglectible manner.\n\nNot sure I understand... if captureState() is invoked, isn't .clone() called on each attribute?",
            "date": "2010-01-17T17:25:59.814+0000",
            "id": 9
        },
        {
            "author": "Simon Willnauer",
            "body": "I kind of agree with both of you. When I started implementing this attribute I had FlagAttribute in mind but I didn't choose it because users can randomly choose a bit of the word which might lead to unexpected behavior. \n\nAnother solution I had in mind is to introduce another Attribute (or extend FlagAttribute) holding a Lucene private (not the java visibility keyword) Enum that can be extended in the future. Internally this could use a word or a Bitset (a word will do I guess) where bits can be set according to the enum ord. That way we could encode way more than only one single boolean and the cost of adding new \"flags\" / enum values would be minimal.\n\n{code}\nbooleanAttribute.isSet(BooelanAttributeEnum.Keyword)\n{code}\n\nsomething like that, thoughts?",
            "date": "2010-01-17T17:35:09.069+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "My problem with FlagsAttribute is missing \"type safety\". You have to choose an bit mask for \"your\" attribute but another TokenFilter in your streanm could use the same bit mask. So in my opinion, FlagsAttribute should be deprectated and replaced by simple boolean attributes everybody can define type safe.\n\nAbout the speed of cloning: Clone was slow in old java versions, but now it is done directly in the JVM. Cloning an Attribute using the following code is much slower than invoking clone() [please note, not because of the reflections, it there to show how it should be implemented):\n\n{code}\nAttributeImpl clone = this.getClass().newInstance();\nthis.copyTo(clone);\nreturn clone;\n{code}\n\nMichi Busch and me are currently investigating fast Attribute Proxies (needed for flex MultiEnums) and also fast capturing of states using CGLIB.",
            "date": "2010-01-17T17:44:46.790+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "bq. Surely the native clone() invoked for every additional attribute counts for something?\n\nBut it looks to me like only each Attribute*Impl* is cloned, so if you are worried about this and using a lot of attributes you could use your own AttributeFactory, similar to Token.TOKEN_ATTRIBUTE_FACTORY to pack everything however you see fit, right?\n\nI think the interface as boolean is correct, and I think the reference implementation is correct too.",
            "date": "2010-01-17T17:48:44.016+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. Surely the native clone() invoked for every additional attribute counts for something?\n\nFlagsAttribute is not used anywhere in Lucene. So it does not matter if you have a separate attribute or the FlagsAttribute for cloning in this issue. Only in the case that having multiple boolean attributes in the same stream, there is additional cost. But this is really seldom, so type safety is more important and helps preventing bugs.\n\nAnd by the way, you can combine all attributes using a special AttributeFactory into the same AttributeImpl if you need speed (e.g. Token). Then you can have lots of boolean attributes with getters/setters, but all use the same AttributeImpl with the same bitset. If we have more than one boolean attribute in lucene in future, we can extend DEFAULT_ATTRIBUTE_FACTORY to support this.",
            "date": "2010-01-17T17:51:51.047+0000",
            "id": 13
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. Only in the case that having multiple boolean attributes in the same stream, there is additional cost. \n\nBut that's exactly what I was talking about when I said \"if we should \"bundle\" this with other (future) binary flags\".  No, it doesn't look like we have any others now, I was talking about if we were going to have any others in the future.\n\nI also don't understand the arguments about type safety.  Token bundles multiple attributes together w/o loss of type safety, right?\n\nbq. If we have more than one boolean attribute in lucene in future, we can extend DEFAULT_ATTRIBUTE_FACTORY to support this.\n\nHmm, ok - that was really my only concern - the number of clone() calls due to increasing numbers of attributes.",
            "date": "2010-01-17T18:07:57.407+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. I also don't understand the arguments about type safety. Token bundles multiple attributes together w/o loss of type safety, right?\n\nWith \"type safety\" I mean, not attributes in general (they are type safe withy any impl). FlagAttribute itsself is not type safe, because everybody can store/update any bit in this integer. If you have two different filters updating the same bit but mean something other with the bit, it gets broken. Maybe other Filters just update the flags using no bit operations (because we have no support for these in the API).\n\nbq. If we have more than one boolean attribute in lucene in future, we can extend DEFAULT_ATTRIBUTE_FACTORY to support this.\n\nMy idea is to have a default AttributeImpl for boolean attributes that support things like set/get of a bit (like BitSet). You subclass it e.g. to generate a combined impl for 4 boolean interfaces we may have in futrure in Lucene core. In the ctor you pass the bitmasks and the impl of all boolean get/setters delegate to the generic BitSet-like methods. Clone and copyTo it then simple, as it only copies the word if the target AttributeImpl is the same class (like Token.copyTo).",
            "date": "2010-01-18T11:03:28.870+0000",
            "id": 15
        },
        {
            "author": "Uwe Schindler",
            "body": "I take this one and will commit this in a day or two.\n\nWhen we get additional boolean attributes, I can open an issue, to provide an \"combined\" AttributeImpl for them to support heavy cloning.",
            "date": "2010-01-25T13:44:58.725+0000",
            "id": 16
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 903608\n\nThanks Simon!",
            "date": "2010-01-27T11:19:52.820+0000",
            "id": 17
        }
    ],
    "component": "modules/analysis",
    "description": "This is from LUCENE-1515\n\nI propose that all stemming TokenFilters have an 'exclusion set' that bypasses any stemming for words in this set.\nSome stemming tokenfilters have this, some do not.\n\nThis would be one way for Karl to implement his new swedish stemmer (as a text file of ignore words).\nAdditionally, it would remove duplication between lucene and solr, as they reimplement snowballfilter since it does not have this functionality.\nFinally, I think this is a pretty common use case, where people want to ignore things like proper nouns in the stemming.\n\nAs an alternative design I considered a case where we generalized this to CharArrayMap (and ignoring words would mean mapping them to themselves), which would also provide a mechanism to override the stemming algorithm. But I think this is too expert, could be its own filter, and the only example of this i can find is in the Dutch stemmer.\n\nSo I think we should just provide ignore with CharArraySet, but if you feel otherwise please comment.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2198",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "support protected words in Stemming TokenFilters",
    "systemSpecification": true,
    "version": "3.0"
}