{
    "comments": [
        {
            "author": "Nadav Har'El",
            "body": "I propose a trivial patch, which does two very simple things:\n\n1. RAMDirectory.close(), instead of being a no-op, sets files=null. This allows the garbage collector to collect all the memory that was used for this RAMDirectory (this is the best we can do in Java).\n\n2. Make the documentation more explicit, from \"Closes the store to future operations.\" to \"Closes the store to future operations, releasing associated memory.\"\n\nNote that now, after a close(), any operations on the RAMDirectory will likely result in a NullPointerException. I don't think this matters, as the documentation clearly says that after a close() you're not allowed to operate on this object.\n",
            "date": "2006-07-06T17:47:11.000+0000",
            "id": 0
        },
        {
            "author": "Hoss Man",
            "body": "Patch commited.  \n\nNote that this patch caused an NPE in TestIndexWriterMerging.testLucene, but after reviewing the test I'm of the opinion that it made an invalid assumption about the order of events that was allowed, to the effect of...\n\n\n    Directory merged = new RAMDirectory();\n    ...\n    merged.close();\n    ...\n    IndexReader reader = IndexReader.open(merged);\n\n...I modified the test slightly to only close the directory once all uses of it were finished and included it in the commit.",
            "date": "2006-07-07T05:15:14.000+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "Just out of curiousity, does Lucene hold onto a RAMDirectory instance somewhere after it has called close on it?  If so, that would have been the ideal place to fix it any kind of \"leak\".\n\nThis patch, while not doing much harm, is not really \"best practice\" in Java and the existing RAMDirectory close() was correct.\nAm I missing something?",
            "date": "2006-07-08T08:00:07.000+0000",
            "id": 2
        }
    ],
    "component": "core/store",
    "description": "I wrongly assumed that calling RAMDirectory.close() would free up the memory occupied by the RAMDirectory.\nIt might be helpful to add a javadoc comment that warns users that RAMDirectory.close() is a no-op, since it might be a common assumption that close() would release resources.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-623",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "RAMDirectory.close() should have a comment about not releasing any resources",
    "systemSpecification": true,
    "version": "1.9"
}