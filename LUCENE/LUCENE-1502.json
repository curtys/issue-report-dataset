{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "Patch fixes CharArraySet and adds a test to TestCharArraySet.",
            "date": "2008-12-29T11:45:04.110+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Committed revision 732141.\n\nThanks Shai!",
            "date": "2009-01-06T22:02:05.609+0000",
            "id": 1
        }
    ],
    "component": "modules/analysis",
    "description": "CharArraySet's add(Object) method looks like this:\n    if (o instanceof char[]) {\n      return add((char[])o);\n    } else if (o instanceof String) {\n      return add((String)o);\n    } else if (o instanceof CharSequence) {\n      return add((CharSequence)o);\n    } else {\n      return add(o.toString());\n    }\nYou'll notice that in the case of an Object (for example, Integer), the o.toString() is added. However, its contains(Object) method looks like this:\n    if (o instanceof char[]) {\n      char[] text = (char[])o;\n      return contains(text, 0, text.length);\n    } else if (o instanceof CharSequence) {\n      return contains((CharSequence)o);\n    }\n    return false;\nIn case of contains(Integer), it always returns false. I've added a simple test to TestCharArraySet, which reproduces the problem:\n  public void testObjectContains() {\n    CharArraySet set = new CharArraySet(10, true);\n    Integer val = new Integer(1);\n    set.add(val);\n    assertTrue(set.contains(val));\n    assertTrue(set.contains(new Integer(1)));\n  }\nChanging contains(Object) to this, solves the problem:\n    if (o instanceof char[]) {\n      char[] text = (char[])o;\n      return contains(text, 0, text.length);\n    } \n    return contains(o.toString());\n\nThe patch also includes few minor improvements (which were discussed on the mailing list) such as the removal of the following dead code from getHashCode(CharSequence):\n      if (false && text instanceof String) {\n        code = text.hashCode();\nand simplifying add(Object):\n    if (o instanceof char[]) {\n      return add((char[])o);\n    }\n    return add(o.toString());\n(which also aligns with the equivalent contains() method).\n\nOne thing that's still left open is whether we can avoid the calls to Character.toLowerCase calls in all the char[] array methods, by first converting the char[] to lowercase, and then passing it through the equals() and getHashCode() methods. It works for add(), but fails for contains(char[]) since it modifies the input array.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1502",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "CharArraySet behaves inconsistently in add(Object) and contains(Object)",
    "systemSpecification": true,
    "version": ""
}