{
    "comments": [
        {
            "author": "Martijn van Groningen",
            "body": "This is an initial patch that allows result grouping with Lucene via a Collector and an attempt to integrate result grouping into Lucene / Solr. The collector can be used just like any other collector and returns TopDocs. The TopDocs contains GroupDoc instances, which is a subclass of ScoreDoc. I think this way it is easier to integrate grouping into existing code that uses Lucene (like Solr).\n\nI think that grouping code should be part of Lucene instead of Solr. I put the result grouping into a new contrib that I named grouping. Putting it in a contib seemed the right place for me.  The patch doesn't contain any Solr code and I think a new issue in Solr should be opened for that.\n\nThis patch is 'inspired by' by SOLR-236, but only contains its core functionality. Nonadjacent grouping based on field value with group counts. Also in the code i don't use the verb collapsing but grouping. This patch is also faster then the Solr variants. This because the grouping occurs whilst the documents are collected and thus saves multiple searches.  Also the grouping algorithm itself is improved. \n\nAlthough this is work in progress any thought about this would be appriciated. BTW the patch is based on the Lucene trunk and is relative to the trunk directory",
            "date": "2010-06-22T20:59:06.291+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I think that grouping code should be part of Lucene instead of Solr.\n\n+1\n\nThis is a very popular issue (currently tied for 2nd place in votes).\n\nUnfortunately, I think the single-pass collector attached here doesn't\nscale very well to large maxDoc and/or large number of unique groups.\nAlso, it pulls a DocTermsIndex on the top-level reader (costly in an\nNRT/reopen setting since it's not per-segment).\n\nSo I decided to factor out parts of Solr's current two-pass approach\ninto a shared \"grouping\" module.\n\nThe downside of the two-pass approach is you run the query twice,\nautomatically halving your QPS.  (It's even worse because the grouping\nitself is somewhat computing intensive too).  To try to help mitigate\nthis, I also added a new CachingCollector, which just holds hits\n(docID and optionally score) up to a max allowed RAM consumption, and\ncan then replay them for the 2nd pass.  In includes a \"max RAM\"\nsetting so that if too many hits are found, it stops caching (and you\nmust then re-execute the query).\n\nBut one nice side effect of the two-phased approach is that sharding\nis in theory straightforward (I think?).  Ie, all shards would do the\nfirst phase, concurrently, to get the top N groups.  Then you\nmerge-sort the resulting top groups, then run second phase (finding\ndocs w/in the top groups) on all shards, then merge results from the\nsame group across all shards.\n",
            "date": "2011-05-10T17:31:30.371+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Initial rough patch.  I think it's working well.  I reused the test\ncase from the original patch (thank you Martijn!), and also created a\nnew random test case.  There are still nocommits/sops/javadocs to\nclean up... but I think it's close.\n\nWe cannot yet cutover Solr to this module because it doesn't support\ngrouping by ValueSource (from a function query) nor by arbitrary\nquery.  (This refactoring groups by a single-valued indexed field.)  I\nthink we need to first refactor function queries (LUCENE-2883) and\nalso filter caches out of Solr before cutting Solr over.\n\nI plan to backport this to 3.x as contrib/grouping.\n",
            "date": "2011-05-10T17:33:01.375+0000",
            "id": 2
        },
        {
            "author": "Bill Bell",
            "body": "The issue I have with the group=true feature in Solr is that the facets are not calculated post grouping.\nSo I cannot show the (count) in the facet list for a field.\n\nIf we can get the facets to return counts POST grouping that would be ideal.\n\nBill\n",
            "date": "2011-05-11T04:45:47.742+0000",
            "id": 3
        },
        {
            "author": "Martijn van Groningen",
            "body": "Nice work Michael! I also think that the two pass mechanism is definitely the preferred way to go. \n\nI think we also need a strategy mechanism (or at least an GroupCollector class hierarchy) inside this module. The mechanism should select the right group collector(s) for a certain request. Some users maybe only care about the top group document, so I second pass won't be necessary. Another example with faceting in mind. When group based faceting is necessary. The top N groups don't suffice. You'll need all group docs (I currently don't see a other way). These groups docs are then used to create a grouped Solr DocSet. But this should be a completely different implementation. ",
            "date": "2011-05-11T21:24:00.413+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Patch w/ next iteration... I beefed up the overview.html, added test case coverage of \"null\" groupValue.\n\nI think it's ready to commit and then back-port to 3.x!",
            "date": "2011-05-11T22:37:48.626+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nI think we also need a strategy mechanism (or at least an GroupCollector class hierarchy) inside this module. The mechanism should select the right group collector(s) for a certain request. Some users maybe only care about the top group document, so I second pass won't be necessary. Another example with faceting in mind. When group based faceting is necessary. The top N groups don't suffice. You'll need all group docs (I currently don't see a other way). These groups docs are then used to create a grouped Solr DocSet. But this should be a completely different implementation.\n{quote}\n\nI agree, there's much more we could do here!  Specialized collection for the maxDocsPerGroup=1 case, and for the \"I want all groups\" case, would be nice.  For the \"not many unique values in the group field\" case we could do a single-pass collector, I think.\n\nGrouping by a multi-valued field should be possible (we now have DocTermOrds in Lucene, but it doesn't load the term byte[] data), as well as support for sharding, ie, by merging top groups and docs w/in each group (but I think we need an addition to FieldComparator API for this).\n\nI think we should commit this starting point, today, and then iterate from there...\n\nMartijn, thank you for persisting for so long on SOLR-236!  We are\nfinally getting grouping functionality accessible from Lucene and\nSolr...\n",
            "date": "2011-05-11T22:46:10.843+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "bq. If we can get the facets to return counts POST grouping that would be ideal.\n\nHow would the field values for the group be defined...?  Or would facets run on all not-collapsed docs...?",
            "date": "2011-05-11T22:47:53.564+0000",
            "id": 7
        },
        {
            "author": "Bill Bell",
            "body": "Say we have 4 documents:\n\ndocid=1\nhgid=1\nage=10\n\ndocid=2\nhgid=1\nage=10\n\ndocid=3\nhgid=2\nage=12\n\ndocid=4\nhgid=4\nage=11\n\nIf we group by hgid, we would get:\n\nhgid=1\n  >docid=1\n   hgid=1\n   age=10\n  >docid=2\n   hgid=1\n   age=10\n\nhgid=3\n   >docid=3\n    hgid=2\n    age=12\n\nhgid=4\n    >docid=4\n     hgid=4\n     age=11\n\nIf I set Facet Counts = POST\n\nage: 10 (1 document)\nage: 11 (1 document)\nage: 12 (1 document)\n\nIf I set Facet Counts = PRE\n\nage: 10 (2 document)\nage: 11 (1 document)\nage: 12 (1 document)\n\nThe only way grouping works in Solr now is Facet Counts = PRE.\n\nThanks.",
            "date": "2011-05-12T02:44:44.932+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "But what if docid=2 had age=17 instead?  How would we determine what value the group (for hgid=1) should have for the \"age\" field?\n\nOr... would the group count +1 to age=10 and +1 to age=17 in that case?  (ie, as if the group were a single document w/ multi-valued field age).",
            "date": "2011-05-12T10:23:15.708+0000",
            "id": 9
        },
        {
            "author": "Martijn van Groningen",
            "body": "bq. But what if docid=2 had age=17 instead? How would we determine what value the group (for hgid=1) should have for the \"age\" field?\nThat would depend on the group sort, right? If your group sort is age asc the lowest document would be chosen.\n\nbq. Or... would the group count +1 to age=10 and +1 to age=17 in that case?\nYou mean like a sum of all ages per group? That is interesting, but sounds more like a function to me. This can be computed with a separated group collector. Wouldn't make sense to me, to have this with a regular field facet. ",
            "date": "2011-05-12T10:47:45.547+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nbq. But what if docid=2 had age=17 instead? How would we determine what value the group (for hgid=1) should have for the \"age\" field?\n\nThat would depend on the group sort, right? If your group sort is age asc the lowest document would be chosen.\n{quote}\n\nOK, I see.  So the group is \"represented\" by the doc within it that\nsorts highest according to the group sort, and any faceting on the\ngroups means faceting on that top doc's values, per group.  Neat.\n\n{quote}\nbq. Or... would the group count +1 to age=10 and +1 to age=17 in that case?\n\nYou mean like a sum of all ages per group? That is interesting, but sounds more like a function to me. This can be computed with a separated group collector. Wouldn't make sense to me, to have this with a regular field facet.\n{quote}\n\nWell, not sum, but multi-valued?  (Ie, as if this group were\nrepresented by a doc that takes the union of all age values of docs\nwithin it).\n\nThis way, if the user then does a drill-down by a specific age, the\nnumber of groups then returned would match the facet count of that age\nin the first query.\n\nI agree we need to hash out these semantics :)\n\nBill could you open a separate Lucene issue, to work out the semantics\n& impl for \"post-grouping-faceting\"?  Unfortunately, it's blocked by\nfactoring out the facet module (LUCENE-3079).\n",
            "date": "2011-05-12T12:40:43.883+0000",
            "id": 11
        },
        {
            "author": "Martijn van Groningen",
            "body": "Michael I see you have committed it to the trunk. Nice work!\nOnly one quest why is the SearchGroup class now package protected? For me the documentation in overview.html suggest that I can just use it in any package.\n\nAs for porting this code to the 3x branch I see that this branch doesn't have modules. Does it mean that it will be a Lucene contrib?",
            "date": "2011-05-14T11:54:49.216+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "Woops, it should not be protected!  I'll fix... thanks Martijn!\n\nYes, I ported to 3.x as contrib/grouping, so this will be released when we release 3.2.",
            "date": "2011-05-14T12:00:08.498+0000",
            "id": 13
        },
        {
            "author": "Robert Muir",
            "body": "Hi Martijn, in 3.x it is available as a lucene contrib (contrib/grouping).\n\nAs far as classes being package-private, I don't think Mike intended this, as they are marked experimental.\n\nWant to upload a patch that ensures everything you need has correct visibility?",
            "date": "2011-05-14T12:01:19.102+0000",
            "id": 14
        },
        {
            "author": "Martijn van Groningen",
            "body": "bq. Want to upload a patch that ensures everything you need has correct visibility?\nOnly the SearchGroup class had different visibility compared to the patch. And Michael says he is going to change that. So I think a patch for that is a bit overkill.\n\nbq. Yes, I ported to 3.x as contrib/grouping, so this will be released when we release 3.2.\nCool! After a svn update I see the contrib now as well.\n\nThe question is how to go from here. Continue development in this issue or for each new grouping related feature a separate issue?\nE.g. think about class hierarchy / strategy for grouping collectors. And new collectors like UniqueFieldValueCountGroupCollector.\n\nI haven't see an issue regarding post faceting yet. I can create one if necessary?",
            "date": "2011-05-14T13:05:55.785+0000",
            "id": 15
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nOnly the SearchGroup class had different visibility compared to the patch. And Michael says he is going to change that. So I think a patch for that is a bit overkill.\n{quote}\n\nOk, thanks for taking a look... I just figured we could tackle any visibility issues at once, but it seems this is the only one.\n\n{quote}\nI haven't see an issue regarding post faceting yet. I can create one if necessary?\n{quote}\n\nSure! of course it will unfortunately need to be blocked on LUCENE-3079, but it seems like a good idea to have the issue open for planning.\n\n{quote}\nThe question is how to go from here. Continue development in this issue or for each new grouping related feature a separate issue?\nE.g. think about class hierarchy / strategy for grouping collectors. And new collectors like UniqueFieldValueCountGroupCollector.\n{quote}\n\nMy opinion would be to open new issues for each new grouping feature! This way things can get committed faster and its easier to\nreview patches (when there are enormous jira issues with a mix of unrelated patches its pretty difficult to keep up with what is happening).\n\nThese apis are marked experimental so I don't think we should waste time on backwards compatibility, nor should we try to come up with\n\"holy grail\" solutions that solve everyones problems in one single commit... I think we should go iteratively. Patches welcome!\n",
            "date": "2011-05-14T13:16:38.125+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "Resolving this... we can iterate in further issues.\n\nThanks Martijn!",
            "date": "2011-05-14T16:19:09.673+0000",
            "id": 17
        },
        {
            "author": "Michael McCandless",
            "body": "I adding grouping queries to the nightly benchmarks\n(http://people.apache.org/~mikemccand/lucenebench) -- see\nTermGroup100/10K/1M.  The \"F\" annotation is the day grouping queries\nfirst ran.\n\nThose queries are the same queries running as TermQuery, just with\ngrouping turned on on 3 randomly generated fields, with 100, 10,000\nand 1 million unique values.  So we can gauge the perf hit by\ncomparing to TermQuery each night.\n\nI use the CachingCollector.\n\nFirst off, I'm impressed that the perf hit for grouping is not too\nbad:\n\n||Query||QPS||Slowdown||\n|TermQuery (baseline)|30.72|0|\n|TermGroup100|13.59|2.26|\n|TermQuery10K|13.2|2.34|\n|TermQuery1M|12.15|2.53|\n\nI had expected we'd pay a bigger perf hit!\n\nSecond, there more unique groups you have, the slower grouping gets,\nbut that multiplier really isn't so bad -- the 1M unique groups case\nis only 10.6% slower than the 100 unique groups case.\n\nRemember, though, that these groups are randomly generated\nfull-unicode strings, so real data could very well produce different\nresults...\n\nThird, and this is insanity, the addition of grouping caused other\nunexpected changes.  Most horribly, SpanNearQuery slowed down\nby ~12.2%\n(http://people.apache.org/~mikemccand/lucenebench/SpanNear.html),\nwhile other queries seem to get a bit faster.  I think this is\n[frustratingly!] due to hotspot making different decisions about which\ncode to optimize/inline.\n\nSimilarly strange, when I added sorting (TermQuery sorting by title\nand date/time, \"E\" annotation in all graphs), I saw the variance in\nthe unsorted TermQuery performance drop substantially.  I'm pretty\nsure this wide variance was due to hotspot's erratic decision making,\nbut somehow the addition of sorting, while not change TermQuery's mean\nQPS, caused hotspot to at least be somewhat more consistent in how it\ncompiled the code.  Maybe as we add more and more diverse queries to\nthe benchmark we'll see hotspot behave more \"reasonably\"....\n",
            "date": "2011-05-17T10:37:40.843+0000",
            "id": 18
        },
        {
            "author": "Martijn van Groningen",
            "body": "bq. I adding grouping queries to the nightly benchmarks\nNice!\n\nAre the regular sort and group sort different in these test cases?\n\nDo think when new features are added that these also need be added to this test suite? Or is this perfomance test suite just for the basic features?",
            "date": "2011-05-17T11:12:34.130+0000",
            "id": 19
        },
        {
            "author": "Michael McCandless",
            "body": "I'm only testing groupSort and sort by relevance now in the nightly bench.\n\nI'll add sort-by-title, groupSort-by-relevance cases too, so we test that.  Hmm, though: this content set is alphabetized by title I believe, so it's not really a good test.  (I suspect that's why the TermQuery sorting by title is faster \n\nbq. Do think when new features are added that these also need be added to this test suite? Or is this perfomance test suite just for the basic features?\n\nWell, in general I'd love to have wider coverage in the nightly perf test...  really it's only a start now.  But there's no hard rule we have to add new functions into the nightly bench...",
            "date": "2011-05-17T15:44:51.506+0000",
            "id": 20
        },
        {
            "author": "Robert Muir",
            "body": "Bulk closing for 3.2",
            "date": "2011-06-03T16:37:14.766+0000",
            "id": 21
        }
    ],
    "component": "core/search",
    "description": "It would be awesome to group search results by specified field. Some functionality was provided for Apache Solr but I think it should be done in Core Lucene. There could be some useful information like total hits about collapsed data like total count and so on.\n\nThanks,\nArtyom",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1421",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Ability to group search results by field",
    "systemSpecification": true,
    "version": ""
}