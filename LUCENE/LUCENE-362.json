{
    "comments": [
        {
            "author": "Chuck Williams",
            "body": "Created an attachment (id=14514)\n(1 of 2) Patch to Field.java to support lengths on binary values\n",
            "date": "2005-03-18T11:30:47.000+0000",
            "id": 0
        },
        {
            "author": "Chuck Williams",
            "body": "Created an attachment (id=14515)\n(2 of 2) Patch to FieldsWriter to write binary values using length from Field\n",
            "date": "2005-03-18T11:31:35.000+0000",
            "id": 1
        },
        {
            "author": "Erik Hatcher",
            "body": "Chuck - would you mind also contributing a test case that exercises this new feature?\n\nIt'd be nice if all new code added is covered by test cases.  One of these days we'll even run code \ncoverage on it to see how well we're doing :)",
            "date": "2005-03-18T12:10:36.000+0000",
            "id": 2
        },
        {
            "author": "Chuck Williams",
            "body": "Erik -- I'd be happy to write a test case.  But first, I want to fully\nunderstand the valid uses and dangers of this patch.  Since it is reusing\nmemory, it is possible to mess up seriously.  I think its javadoc at least needs\nmore explanation of the dangers and an \"expert\" caveat.  It's apparent\nsimplicity lulled me into submitted it too quickly.  Will revise later.\n\n",
            "date": "2005-03-18T17:44:17.000+0000",
            "id": 3
        },
        {
            "author": "Chuck Williams",
            "body": "Created an attachment (id=14521)\n(1 of 2) Patch to Field.java to support lengths on binary values (with better\njavadoc)\n\nThis version improves the javadoc to provide and \"expert\" caveat and specify\nthe precise use-case that this patch supports.\tFor this use-case (storing a\nsingle large binary field on each Document, e.g. the externally compressed body\nof a document), the memory allocation benefits are substantial.  There are no\ncode changes from the original version.\n\nI'll try to get to a junit test in the not too distant future.\n",
            "date": "2005-03-19T11:45:39.000+0000",
            "id": 4
        },
        {
            "author": "cutting@apache.org",
            "body": "Things would be safer if you:\n\nprivate int fieldsDataLength = -1;\n\npublic int binaryLength() { \n   return fieldsDataLength == -1\n      ? binaryValue().length\n      : fieldsDataLength;\n}\n\npublic Field(String name, byte[] value, int length, Store store) {\n  if (length < 0 || length > value.length)\n    throw new IllegalArgumentException(\"bad length:\" + length);\n\n  ...\n\n}\n         \nNo?\n",
            "date": "2005-03-23T03:19:35.000+0000",
            "id": 5
        },
        {
            "author": "Chuck Williams",
            "body": "I don't see how the first change (initializing fieldsDataLength to -1 and\ntesting it in binaryLength()) provides any additional safety.  The patch always\ninitializes fieldsDataLength in Field() for any binary value, so unless that was\nchanged the value would never be -1 in binaryLength().  The main risk in this\narea of the code is that somebody calls binaryValue() without calling\nbinaryLength() to get the length, which seems impossible to address.  Another\nrisk is that somebody calls binaryLength() on a non-binary field -- the current\npatch returns null in that case, consistent with binaryValue(), while the\nchanged version would get an NPE.  I'm probably missing some other case that you\nsee.\n\nThe second change (validating the length passed to Field()) seems an\nimprovement.  But the biggest risk with this patch is the one I outlined in the\nJavadoc, i.e. that somebody passes the same byte array in two different calls to\nField before the use in the first call is consumed (e.g., 2 fields in the same\nDocument, or the same field in 2 Documents before either is indexed).  I don't\nsee a good way to protect against that (without a performance hit).\n\nThe patch is a bit risky due to this last consideration, but the performance\ngain is substantial in the particular case where it is necessary to store large\ndocument bodies in Lucene.  I'm indexing with this now and doing zero\nallocations by using nio ByteBuffer and CharBuffer views on a fixed byte array\nthat holds the successive document bodies.  It rips.  I'm using compression\noutside of Lucene (using the same zlib).  The combination of outside-compression\nand the patch reduces 5 allocations of each document body to 0, when compared to\npassing the bodies as text and letting Lucene do the compression (the biggest\npart of this is the outside-compression).\n\nI don't object to either change and would be happy to see them if it means this\ngets committed so I can eliminate my local patch!\n\nChuck\n",
            "date": "2005-03-23T10:45:49.000+0000",
            "id": 6
        },
        {
            "author": "Chuck Williams",
            "body": "(Thanks Eric for correcting my mistaken posting to the old issue tracking system)\n\nBetter late than never I hope.\tFixedBufferBinaryFields.patch is revised to\napply against the latest source and now includes a test case (extension of \nTestBinaryDocument).  This is my last current local patch to Lucene, so it\nwould be great if it gets committed.  The value again is to eliminate copying\nof large binary values to be stored in the Lucene index.  For a compressed\ndocument, for example, if the documents are read and compressed externally in a\nfixed buffer and the compressed buffer is passed in, all copying can be\neliminated.\n\nChuck\n",
            "date": "2005-12-15T01:48:34.000+0000",
            "id": 7
        },
        {
            "author": "Shai Erera",
            "body": "Field already has ctor and setter which accept a byte[], offset and length, allowing you to reuse the byte[].",
            "date": "2011-01-26T13:41:50.477+0000",
            "id": 8
        }
    ],
    "component": "core/index",
    "description": "This is a very simple patch that supports storing binary values in the index\nmore efficiently.  A new Field constructor accepts a length argument, allowing a\nfixed byte[] to be reused acrossed multiple calls with arguments of different\nsizes.  A companion change to FieldsWriter uses this length when storing and/or\ncompressing the field.\n\nThere is one remaining case in Document.  Intentionally, no direct accessor to\nthe length of a binary field is provided from Document, only from Field.  This\nis because Field's created by FieldReader will never have a specified length and\nthis is usual case for Field's read from Document.  It seems less confusing for\nmost users.\n\nI don't believe any upward incompatibility is introduced here (e.g., from the\npossibility of getting a larger byte[] than actually holds the value from\nDocument), since no such byte[] values are possible without this patch anyway.\n\nThe compression case is still inefficient (much copying), but it is hard to see\nhow Lucene can do too much better.  However, the application can do the\ncompression externally and pass in the reused compression-output buffer as a\nbinary value (which is what I'm doing).  This represents a substantialy\nallocation savings for storing large documents bodies (compressed) into the\nLucene index.\n\nTwo patch files are attached, both created by svn on 3/17/05.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-362",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "[PATCH] Extension to binary Fields that allows fixed byte buffer",
    "systemSpecification": false,
    "version": ""
}