{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "attached is a patch. i changed FuzzyQueries pq test to use this so it does not have to do the try-finally thing/BooleanQuery.maxClauseCount",
            "date": "2010-02-11T17:53:24.700+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Patch looks good, some things because of serializable:\n- The readResove method must go to the singleton constant, which should also throw UOE when modified\n- euquals / hashcode is neaded for the rewritemode, else FuzzyQuery & Co would no longer compare\n\nIt could be solved by doing like for AutoRewrite and its unmodifiable constant. I know: Queries are a pain because of Serializable.\n\n+1 on adding a param to FuzzyQuery ctor",
            "date": "2010-02-11T18:10:38.416+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "the previous patch was wrong for readResolve, here is a fix.\n",
            "date": "2010-02-11T18:12:34.928+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "here is a patch with uwe's suggestions. now that fuzzyquery supports the param via ctor, the singleton TopTerms is no longer used so i removed it.",
            "date": "2010-02-11T19:34:24.933+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "sorry, i created a javadoc warning, (TOP_TERMS singleton was referenced in the top of mtq javadocs). here is the fix",
            "date": "2010-02-11T19:39:05.917+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Looks good when gaining a first insight. I have not tried the patch, will do soon.",
            "date": "2010-02-11T20:55:24.571+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "bq. Looks good when gaining a first insight. I have not tried the patch, will do soon.\n\nUwe lemme know if everything is ok, once multitermquery policeman is happy I will look at proceeding to commit :)",
            "date": "2010-02-12T18:39:19.285+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi Robert, patch looks good, all tests pass, nothing to complain from the MTQ police :-)\n\nThere is only one thing unrelated to that issue: It makes no sense to declare IllegalArgExceptions as they are unchecked. I would remove them, else the compiler does.",
            "date": "2010-02-12T21:44:09.428+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "bq. There is only one thing unrelated to that issue: It makes no sense to declare IllegalArgExceptions as they are unchecked. I would remove them, else the compiler does.\n\nAgreed, here is a patch with this cleanup, and also removes an unused import from MTQ",
            "date": "2010-02-13T17:19:13.963+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "will commit this in a day or two if no one objects.",
            "date": "2010-02-13T17:20:16.456+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "Committed revision 912311.",
            "date": "2010-02-21T07:28:17.938+0000",
            "id": 10
        }
    ],
    "component": "core/search",
    "description": "MultiTermQuery has a TopTermsScoringBooleanRewrite, that uses a priority queue to expand the query to the top-N terms.\n\ncurrently N is hardcoded at BooleanQuery.getMaxClauseCount(), but it would be nice to be able to set this for top-N MultiTermQueries: e.g. expand a fuzzy query to at most only the 50 closest terms.\n\nat a glance it seems one way would be to expose TopTermsScoringBooleanRewrite (it is private right now) and add a ctor to it, so a MultiTermQuery can instantiate one with its own limit.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2261",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "configurable MultiTermQuery TopTermsScoringBooleanRewrite pq size",
    "systemSpecification": true,
    "version": ""
}