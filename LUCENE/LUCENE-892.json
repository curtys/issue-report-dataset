{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "It looks like the double copying only happens in certain limited cases\nwith Lucene now.\n\nDuring indexing, when doing a segment merge of multiple CFS files,\nwhen the CSIndexInput reaches the end of its sub-file then that final\nbuffer fill will be a double copy.\n\nIf the flushing is small (like the default every 10 docs, with small\ndocs) then often files are so small that they are less than a buffer\nsize and all reads are double-copy.\n\nDuring searching the same situation occurs (tail end of file that is\nless than buffer size).\n\nI had thought I saw a case before where the two buffers get \"out of\nsync\" such that every buffer refill in CSIndexInput results in a\ndouble copy even when you are not at the end of the file, but I can't\nreproduce that case now.  This would have been much more serious.\n\nSo we are sort of getting \"lucky\" right now, but, if Lucene changes\nhow it uses CFS, it could get the buffers to be \"mis-aligned\" at which\npoint every buffer fill would be a double copy.  So I think we should\nstill fix it.\n\nThe solution I'm leaning towards is to add a new readBytes() method in\nIndexInput that takes 4th argument \"boolean useBuffer\".  It would have\na default implementation that just ignores that parameter (and calls\nthe current readBytes).  BufferedIndexInput would implement that\nmethod and not refill its buffer if that parameter is false, and\nCSIndexInput would pass false when it calls base.readBytes in its\nreadInternal method.\n",
            "date": "2007-06-22T18:04:46.860+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch that implements the design above (make an\nIndexInput.readBytes that let's you specify whether or not a buffer\nshould be used).  All tests pass.\n",
            "date": "2007-07-02T17:23:05.911+0000",
            "id": 1
        }
    ],
    "component": "core/index",
    "description": "Spinoff of LUCENE-888.\n\nThe class for reading from a compound file (CompoundFileReader) has a\nprimary stream which is a BufferedIndexInput when that stream is from\nan FSDirectory (which is the norm).  That is one layer of buffering.\n\nThen, when its openInput is called, a CSIndexInput is created which\nalso subclasses from BufferedIndexInput.  That's a second layer of\nbuffering.\n\nWhen a consumer actually uses that CSIndexInput to read, and a call to\nreadByte or readBytes runs out of what's in the first buffer, it will\ngo to refill its buffer.  But that refill calls the first\nBufferedIndexInput which in turn may refill its buffer (a double\ncopy) by reading the underlying stream.\n\nNot sure how to fix it yet but we should change things to not do the\nextra buffer copy.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-892",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "CompoundFileReader's openInput produces streams that may do an extra buffer copy",
    "systemSpecification": true,
    "version": "2.1"
}