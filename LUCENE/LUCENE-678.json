{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Has anyone had a chance to look at this patch?",
            "date": "2006-10-16T10:37:25.000+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "Committed. Thanks Michael!",
            "date": "2006-10-16T18:28:27.000+0000",
            "id": 1
        },
        {
            "author": "Doron Cohen",
            "body": "The patch added a call to \"writer.close()\" in TestLockFactory - testFSDirectoryTwoCreates().\nThis is just before the 2nd attempt to create an index writer with override.\nThis line should probably be removed, as it cancels the second part of that test case, right?",
            "date": "2006-10-18T17:28:08.000+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "I believe it's correct with the line in there (ie, as committed)?\n\nThat test case is verifying that the 2nd index writer indeed removes any leftover lockfiles created by the first one.\n\nIt did not intend to test the case (but previously was) of opening an IndexWriter with create=true while another IndexWriter is already open against that same directory.",
            "date": "2006-10-18T18:16:03.000+0000",
            "id": 3
        },
        {
            "author": "Doron Cohen",
            "body": "Michael, I must be misunderstanding something then...\n\n> That test case is verifying that the 2nd index writer indeed removes \n> any leftover lockfiles created by the first one. \n\nCan there be any leftovers once the first writer was closed?\n\n> It did not intend to test the case (but previously was)..\n\nCould you explain why the change?\n\nThanks,\nDoron",
            "date": "2006-10-18T18:51:10.000+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "OK!  Sorry, you are correct.  Of course on closing the first\nIndexWriter cleanly, it will remove its lock files.  Good catch.\n\nNow I remember (and just re-tested) why I added this line: as a test,\nI temporarily changed FSDirectory's default locking to\nNativeFSLockFactory and then ran all unit tests.  This test case\nfailed, with IOException on creating that second IndexWriter and my\n[wrong] fix was to close the first writer.  But you're right that fix\nis not right because it turns off the test entirely.\n\nHowever, I still think the test is incorrect.\n\nReally what the test is trying to do is \"simulate\" a crashed writer\nand then verify creating a new writer on that directory works.  With\nSimpleFSLockFactory, an effective \"simulation\" is to leave open the\nfirst IndexWriter.  But with NativeFSLockFactory, it's not, because\nthe OS won't let you remove the lock files (that are still held open)\n-- this is actually a good thing because in this context it would let\nthe programmer know that indeed another writer is still holding the\nwrite lock.\n\nMaybe we should remove the writer.close and then disable this test\nwhen we switch to Native locks as the default [in the future]?  Doron\nwhat do you think?\n\n\nUGH, I just found a serious [different] problem with my patch.  I'm\ndoing too much \"sharing\" for the locks such that different directories\nwill incorrectly share locks!  Ugh.\n\nI'm reopening this so I can fix it properly.  Sorry about this.\n",
            "date": "2006-10-19T02:30:52.000+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "OK, take two.\n\nFirst off, I added a new test case to TestLockFactory to catch\n\"improper lock / lock ID sharing across different directories\".  This\ntest case fails with the currently committed version of\nNativeFSLockFactory (ie, catches the bug I had sadly created).\n\nThen, I fixed the bug in NativeFSLockFactory, and now that new test\ncase, and all existing unit tests, pass.\n\nOK changes I made in this take:\n\n  * Doron, I removed the writer.close() that I had added previously,\n    and then put a comment there summarizing the details above.\n\n  * I reworked the class, to fix how I enforce that only one Channel\n    is used per lock file: I now use a HashSet (in the NativeFSLock\n    class) to keep track of all currently held locks in the JVM.  A\n    Channel is only held open while the lock is held.  Also put back\n    constructors for the class instead of the \"getLockFactory(...)\"\n    static methods.\n\n  * Updated the javadocs a bit.\n\n  * Added unit test cases (described above).\n\n  * Fixed one other test case for NativeFSLockFactory that was testing\n    for identical LockFactories, Locks, etc., which is no longer a\n    correct test (since these instances are now different).\n",
            "date": "2006-10-19T18:35:36.000+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Also, I checked the new \"Patch Available\" field!",
            "date": "2006-10-19T18:36:20.000+0000",
            "id": 7
        },
        {
            "author": "Yonik Seeley",
            "body": "take two committed.  Thanks for keeping on top of this Michael!",
            "date": "2006-10-19T21:03:07.000+0000",
            "id": 8
        }
    ],
    "component": "core/store",
    "description": "The current default locking for FSDirectory is SimpleFSLockFactory.\nIt uses java.io.File.createNewFile for its locking, which has this\nspooky warning in Sun's javadocs:\n\n    Note: this method should not be used for file-locking, as the\n    resulting protocol cannot be made to work reliably. The FileLock\n    facility should be used instead.\n\nSo, this patch provides a LockFactory implementation based on FileLock\n(using java.nio.*).\n\nAll unit tests pass with this patch, on OS X (10.4.8), Linux (Ubuntu\n6.06), and Windows XP SP2.\n\nAnother benefit of native locks is the OS automatically frees them if\nthe JVM exits before Lucene can free its locks.  Many people seem to\nhit this (old lock files still on disk) now.\n\nI've created this new class:\n\n  org.apache.lucene.store.NativeFSLockFactory\n\nand added a couple test cases to the existing TestLockFactory.\n\nI've left SimpleFSLockFactory as the default locking for FSDirectory\nfor now.  I think we should get some usage / experience with\nNativeFSLockFactory and then later on make it the default locking\nimplementation?\n\nI also tested changing FSDirectory's default locking to\nNativeFSLockFactory and all unit tests still pass (on the above\nplatforms).\n\nOne important note about locking over NFS: some NFS servers and/or\nclients do not support it, or, it's a configuration option or mode\nthat must be explicitly enabled.  When it's misconfigured it's able to\ntake a long time (35 seconds in my case) before throwing an exception.\nTo handle this, I acquire & release a random test lock on creating the\nNativeFSLockFactory to verify locking is configured properly.\n\nA few other small changes in the patch:\n\n    - Added a \"failure reason\" to Lock.java so that in\n      obtain(lockWaitTimeout), if there is a persistent IOException\n      in trying to obtain the lock, this can be messaged & included in\n      the \"Lock obtain timed out\" that's raised.\n\n    - Corrected javadoc in SimpleFSLockFactory: it previously said the\n      wrong system property for overriding lock class via system\n      properties\n\n    - Fixed unhandled IOException when opening an IndexWriter for\n      create, if the locks dir does not exist (just added\n      lockDir.exists() check in clearAllLocks method of\n      SimpleFSLockFactory & NativeFSLockFactory.\n\n    - Fixed a few small unrelated issues with TestLockFactory, and\n      also fixed tests to accept NativeFSLockFactory as the default\n      locking implementation for FSDirectory.\n\n    - Fixed a typo in javadoc in FieldsReader.java\n\n    - Added some more javadoc for the LockFactory.setLockPrefix\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-678",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "[PATCH] LockFactory implementation based on OS native locks (java.nio.*)",
    "systemSpecification": true,
    "version": "2.1"
}