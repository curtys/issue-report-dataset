{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "Patch against trunk fixes MockDirWrapper to track open files of both II and IO. Also, I've made the maps private and added methods for removing and IndexInput/Output.\n\nOne test that fails (previously failed to delete dir, when FSDirectory was used):\n{noformat}\nNOTE: reproduce with: ant test -Dtestcase=TestIndexWriterWithThreads -Dtestmethod=testIOExceptionDuringWriteSegmentWithThreads -Dtests.seed=2215506388922451011:4021053174950346200\nNOTE: test params are: codec=RandomCodecProvider: {field=MockFixedIntBlock(blockSize=6)}, locale=el_CY, timezone=Europe/Volgograd\nNOTE: all tests run in this JVM:\n[TestIndexWriterWithThreads]\nNOTE: Windows 7 6.1 build 7600 amd64/IBM Corporation 1.6.0 (64-bit)/cpus=2,threads=4,free=37703064,total=48524288\n{noformat}\n\nI'm sure there are other tests too. I'll try to find a non-threaded one.",
            "date": "2011-05-26T11:49:03.054+0000",
            "id": 0
        },
        {
            "author": "Shai Erera",
            "body": "Here's another one:\n\n{noformat}\nNOTE: reproduce with: ant test -Dtestcase=TestIndexWriterExceptions -Dtestmethod=testExceptionsDuringCommit -Dtests.seed=-7460760853320570890:8937985421698447215\nNOTE: reproduce with: ant test -Dtestcase=TestIndexWriterExceptions -Dtestmethod=testOptimizeExceptions -Dtests.seed=-7460760853320570890:8014438941838172914\nNOTE: test params are: codec=PreFlex, locale=ar_IQ, timezone=SystemV/HST10\nNOTE: all tests run in this JVM:\n[TestIndexWriterExceptions]\nNOTE: Windows 7 6.1 build 7600 amd64/IBM Corporation 1.6.0 (64-bit)/cpus=2,threads=4,free=8136368,total=39485440\n{noformat}\n\nThis one actually has a FIXME which I think after we resolve why the segments_1 is not closed, we can reinstate the assert too.",
            "date": "2011-05-26T11:51:24.721+0000",
            "id": 1
        },
        {
            "author": "Shai Erera",
            "body": "Patch resolves another leaked file handle.\n\nAdditionally, TestIndexWriterExceptions.testOptimizeExceptions() fails w/ some leftovers. I modified it to use SerialMergeScheduler so that it's easier to debug, and it fails on _e_0.doc left open. Is that the DocValues file (not sure if it was landed on trunk or not).\n\nYou can reproduce with:\nant test -Dtestcase=TestIndexWriterExceptions -Dtestmethod=testOptimizeExceptions -Dtests.seed=-226675704182511370:3818287653643995169\n\nDebug-tracing what's happening after the IOE is thrown does not reveal any obvious leak. I can continue debugging it later, but if someone can spot it quicker, that'll be great.\n\nAlso, shall we perhaps commit the changes to MockDirWrapper + II/IOWrappers and let Hudson hunt down the failures for us?",
            "date": "2011-05-26T12:53:00.964+0000",
            "id": 2
        },
        {
            "author": "Simon Willnauer",
            "body": "Shai I have a couple of comments\n\n * first good catch! :)\n * reenable the FIXME is awesome\n * in DefaultSegmentInfosWriter you might want to change the try / catch blocks to a simple try / finally if (!succes) out.close(); for simplicity\n * in MockDirectoryWrapper#addFileHandle(io, name) you create an exception that always says \"Unclosed IndexInput\" which should say IndexOutput if the handle is an index output. I think this could be very confusing if you run into bugs there.\n\nsimon",
            "date": "2011-05-26T13:21:40.533+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "bq. and it fails on _e_0.doc left open. Is that the DocValues file (not sure if it was landed on trunk or not).\n\nThis is the doc deltas file from SepCodec",
            "date": "2011-05-27T00:08:13.713+0000",
            "id": 4
        },
        {
            "author": "Shai Erera",
            "body": "bq. in DefaultSegmentInfosWriter you might want to change the try / catch blocks to a simple try / finally if (!succes) out.close(); for simplicity\n\nThanks, fixed !\n\nbq. in MockDirectoryWrapper#addFileHandle(io, name) you create an exception that always says \"Unclosed IndexInput\"\n\nGood catch ! it's the result of consolidating that into a method and tracking open IndexOutput as well. Fixed !\n\nPatch includes more leak fixes. Now, if you run \"ant test-core -Dtestcase=TestIndexWriterExceptions -Dtestmethod=testOptimizeExceptions -Dtests.seed=-5142521044628153171:-5513903279645473802\", the test fails on CheckIndex, which fails on FixedGapTermsIndexReader line 92 (the assert). This makes sense since FixedGapTermsIndexWriter failed while it was writing the header. Still need to understand this, will dig deeper later.\n\nShort summary - we're leaking handles :). Good news - the changes to MockDirWrapper catches all of them !",
            "date": "2011-05-27T05:50:16.278+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "Hey, looks really cool to catch all that stuff.\n\nOne thing: In BlockTermsWriter, the \"success\" boolean is never set to true!",
            "date": "2011-05-27T05:57:09.941+0000",
            "id": 6
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Short summary - we're leaking handles . Good news - the changes to MockDirWrapper catches all of them !\nits awesome that you tracked it down!\n\nsome minor things:\n\nfor readability: \n{code} \n\nif (segnOutput != null) segnOutput.close();\n// should be\n\nif (segnOutput != null) {\n segnOutput.close();\n}\n\n{code}\n\nI think you should also do that in other places. Those one line if statements are hard to read and could lead to errors if somebody changes the code later. \n\nIn FixedGapTermsIndexWriter you do:\n{code}\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeSafelyNoException(out);\n      }\n    }\n{code}\n\nI wonder if we should rather add a boolean to IOUtils.closeSafely(boolean suppressException ,Closable... objs) to make situations like that simply a one-liner that way you could do IOUtils.closeSafely(!success, out)\n\nAfter all I think you found lots of places where we leak file handles :) nice....\n\n\n\n",
            "date": "2011-05-27T06:34:31.860+0000",
            "id": 7
        },
        {
            "author": "Shai Erera",
            "body": "bq. In BlockTermsWriter, the \"success\" boolean is never set to true!\n\nGood catch. Fixed !\n\nbq. for readability: \n\nSure, I'll change\n\nbq. I wonder if we should rather add a boolean to IOUtils.closeSafely\n\nI didn't want to do that since it's public API, and I intend to backport these changes to 3x. But I can add another closeSafely variant as you suggest, and have the current one call it w/ false?\n\nAlso, I think that closeSafely isn't really safe :). If RuntimeException is thrown, the code will blow away, not closing all Closeables. We need to fix that as well. (I'm not sure, but I think some Faliure objects throw RuntimeException during close() ...",
            "date": "2011-05-27T11:22:12.225+0000",
            "id": 8
        },
        {
            "author": "Shai Erera",
            "body": "More leak fixes. Do you think I should commit what I've fixed already? We can let Hudson catch more of these, it's fun :).\n\nSimon, I will fix IOUtils as you suggest, just noticed it's @internal. I'll do that after tests stop failing at least once on my machine :).",
            "date": "2011-05-27T12:51:40.254+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Can we also add a closeSafely & others taking Iterable<Closeable> instead of varargs/array? When you fix more leaks, there may be more places where collections may be used, so it would be a nice addition.\n\nI am refering to the one place in your code where you added a comment, that closeSafely only takes arrays and you had to duplicate the code.",
            "date": "2011-05-27T15:52:57.297+0000",
            "id": 10
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Can we also add a closeSafely & others taking Iterable<Closeable> instead of varargs/array? When you fix more leaks, there may be more places where collections may be used, so it would be a nice addition.\n\n+1\n\nbq. Simon, I will fix IOUtils as you suggest, just noticed it's @internal. I'll do that after tests stop failing at least once on my machine\n\ncool thanks, calling it with false from the existing API is what I had in mind.\n\nthanks!",
            "date": "2011-05-27T17:34:12.862+0000",
            "id": 11
        },
        {
            "author": "Shai Erera",
            "body": "Added IOUtils.closeSafely variants that take Iterable<Closeable>, however I'm not able to use them:\n* If they are called closeSafely, compiler complains about bounded exceptions (the generic version accepting priorEx).\n* I renamed them, but then it complains that ArrayList<FieldsConsumer> is not Iterable<Closeable> -- I guess understanding that AL is Iterable and FC is Closeable is too much.\n* I tried to pass an Iterator<Closeable>, but it still complains.\nJust to be clear, FieldsConsumer implements Closeable !\n\nTestIndexWriter.testThreadInterruptDeadlock fails continuously still, each time in other places. I'd appreciate a second set of eyes on it. To reproduce:\nant test -Dtestcase=TestIndexWriter -Dtestmethod=testThreadInterruptDeadlock -Dtests.seed=2846295764185553690:-3734668484155088580\n\nAmongst the 'left open' file handles, it complains that a file created from this place is left open:\n\n{noformat}\nCaused by: java.lang.RuntimeException: unclosed IndexOutput: _72.nrm\n\tat java.lang.Throwable.<init>(Throwable.java:67)\n\tat org.apache.lucene.store.MockDirectoryWrapper.addFileHandle(MockDirectoryWrapper.java:384)\n\tat org.apache.lucene.store.MockDirectoryWrapper.createOutput(MockDirectoryWrapper.java:368)\n\tat org.apache.lucene.index.SegmentMerger.mergeNorms(SegmentMerger.java:585)\n{noformat}\n\nSegmentMerger.mergeNorms creates the file and closes it in the same method, in a protected block. So how come it is left open? Of course, when debug-tracing the test, it always passes :).\n\nCan anyone reproduce and help me w/ the debugging?",
            "date": "2011-05-28T05:11:26.759+0000",
            "id": 12
        },
        {
            "author": "Shai Erera",
            "body": "Another thing to clarify, everyone can reproduce these bugs now, even on Linux.",
            "date": "2011-05-28T05:13:20.707+0000",
            "id": 13
        },
        {
            "author": "Michael McCandless",
            "body": "OK one problem is ThrottledIndexOutput's close method.  Right now it sleeps and then closes, but this must be done in a try/finally because the sleep could throw ThreadInterrupt.",
            "date": "2011-05-28T16:02:49.555+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "But even after fixing that, I still see *.tiv files left open... I'll dig.",
            "date": "2011-05-28T16:03:08.231+0000",
            "id": 15
        },
        {
            "author": "Robert Muir",
            "body": "adding the try-finally to vargapwriter gets you past that, but now there is a new one:\n\nant test -Dtestcase=TestDocumentWriter -Dtestmethod=testAddDocument -Dtests.seed=6194875654219552577:595815136781814876 -Dtests.codec=MockRandom",
            "date": "2011-05-28T16:12:42.631+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "Also, VariableGapTermsIndexWriter.close needs to use try/finally.",
            "date": "2011-05-28T16:13:36.816+0000",
            "id": 17
        },
        {
            "author": "Robert Muir",
            "body": "updated patch with fixes to THrottled and VarGapsWriter, but still has the testAddDocument problem",
            "date": "2011-05-28T16:18:21.885+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "New patch, fixes {{ant test-core -Dtestcase=TestIndexWriterDelete -Dtestmethod=testErrorInDocsWriterAdd -Dtests.seed=7129352714993563045:3367096563984633863 -Dtests.codec=MockRandom}}",
            "date": "2011-05-28T16:38:31.158+0000",
            "id": 19
        },
        {
            "author": "Robert Muir",
            "body": "ant test -Dtestcase=TestIndexWriterDelete -Dtestmethod=testUpdatesOnDiskFull -Dtests.seed=-505532335460902096:-6988290248406972759",
            "date": "2011-05-28T16:44:54.753+0000",
            "id": 20
        },
        {
            "author": "Michael McCandless",
            "body": "Another iteration, fixes a few more tests...",
            "date": "2011-05-28T17:47:20.132+0000",
            "id": 21
        },
        {
            "author": "Robert Muir",
            "body": "ant test -Dtestcase=TestIndexWriterWithThreads -Dtestmethod=testImmediateDiskFullWithThreads -Dtests.seed=3427070915583133981:-5436728766623164583\n",
            "date": "2011-05-28T17:59:59.388+0000",
            "id": 22
        },
        {
            "author": "Simon Willnauer",
            "body": "patch fixing the generics related nocommit",
            "date": "2011-05-28T18:06:27.518+0000",
            "id": 23
        },
        {
            "author": "Robert Muir",
            "body": "thanks simon, i'm gonna take your patch and make a throwaway branch now, since we are all trying to merge various fixes.\n",
            "date": "2011-05-28T18:11:00.216+0000",
            "id": 24
        },
        {
            "author": "Robert Muir",
            "body": "https://svn.apache.org/repos/asf/lucene/dev/branches/leaky3147",
            "date": "2011-05-28T18:15:56.816+0000",
            "id": 25
        },
        {
            "author": "Robert Muir",
            "body": "probably the same fail as before, preflexrw again: ant test -Dtestcase=TestConcurrentMergeScheduler -Dtestmethod=testFlushExceptions -Dtests.seed=-1522558944672603540:-5713175873482685091\n",
            "date": "2011-05-28T18:20:54.409+0000",
            "id": 26
        },
        {
            "author": "Michael McCandless",
            "body": "Aha!  Thanks Simon :)  IOUtils had to be fixed to accept <? extends Closeable>, not just <Closeable>.",
            "date": "2011-05-28T18:21:05.354+0000",
            "id": 27
        },
        {
            "author": "Robert Muir",
            "body": "after svn up, i still got another preflex fail:\n\nant test -Dtestcase=TestIndexWriterExceptions -Dtestmethod=testOptimizeExceptions -Dtests.seed=-4125144081554890699:-9213228330712396498",
            "date": "2011-05-28T18:24:33.844+0000",
            "id": 28
        },
        {
            "author": "Robert Muir",
            "body": "I put a fail() in the branch in case a test cannot delete its directory.\n\nrunning tests in a loop on windows and linux: so far things look pretty good, except I hit a situation where windows can't delete a tempdir in TestIndexReader... inside the directory is two simpletext segments and write lock...\n\n",
            "date": "2011-05-28T20:20:36.987+0000",
            "id": 29
        },
        {
            "author": "Robert Muir",
            "body": "Here's the stacktrace from the error on windows:\n{noformat}\n    [junit] ------------- Standard Error -----------------\n    [junit] java.io.IOException: could not delete c:\\Users\\rmuir\\workspace\\leaky3147\\lucene\\build\\test\\3\\test388355461394710068tmp\\write.lock\n    [junit]     at org.apache.lucene.util._TestUtil.rmDir(_TestUtil.java:72)\n    [junit]     at org.apache.lucene.util.LuceneTestCase.afterClassLuceneTestCaseJ4(LuceneTestCase.java:460)\n ...\n    [junit] path c:\\Users\\rmuir\\workspace\\leaky3147\\lucene\\build\\test\\3\\test388355461394710068tmp allocated from\n    [junit]     org.apache.lucene.util.LuceneTestCase.newDirectoryImpl(LuceneTestCase.java:1143)\n    [junit]     org.apache.lucene.util.LuceneTestCase.newDirectory(LuceneTestCase.java:930)\n    [junit]     org.apache.lucene.util.LuceneTestCase.newDirectory(LuceneTestCase.java:922)\n    [junit]     org.apache.lucene.index.TestIndexReader.testFieldCacheReuseAfterReopen(TestIndexReader.java:1661)\n{noformat}",
            "date": "2011-05-28T20:27:46.737+0000",
            "id": 30
        },
        {
            "author": "Robert Muir",
            "body": "OK, I think all the windows-only errors are resolved now from LUCENE-3152.",
            "date": "2011-05-29T00:29:14.252+0000",
            "id": 31
        },
        {
            "author": "Michael McCandless",
            "body": "I'm still hitting an intermittent fail:\n{noformat}\nNOTE: reproduce with: ant test -Dtestcase=TestIndexWriterWithThreads -Dtestmethod=testIOExceptionDuringWriteSegmentWithThreads -Dtests.seed=-3173666621914391759:573268695851991855\n\njava.lang.RuntimeException: MockDirectoryWrapper: cannot close: there are still open files: {_h.fdt=1, _h.tvd=1, _h.tvf=1, _h.fdx=1, _h.tvx=1}\n\tat org.apache.lucene.store.MockDirectoryWrapper.close(MockDirectoryWrapper.java:454)\n\tat org.apache.lucene.index.TestIndexWriterWithThreads._testMultipleThreadsFailure(TestIndexWriterWithThreads.java:279)\n\tat org.apache.lucene.index.TestIndexWriterWithThreads.testIOExceptionDuringWriteSegmentWithThreads(TestIndexWriterWithThreads.java:407)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n\tat org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1334)\n\tat org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1252)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:136)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:117)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:98)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:45)\nCaused by: java.lang.RuntimeException: unclosed IndexOutput: _h.tvf\n\tat org.apache.lucene.store.MockDirectoryWrapper.addFileHandle(MockDirectoryWrapper.java:393)\n\tat org.apache.lucene.store.MockDirectoryWrapper.createOutput(MockDirectoryWrapper.java:369)\n\tat org.apache.lucene.index.TermVectorsTermsWriter.initTermVectorsWriter(TermVectorsTermsWriter.java:98)\n\tat org.apache.lucene.index.TermVectorsTermsWriter.finishDocument(TermVectorsTermsWriter.java:123)\n\tat org.apache.lucene.index.TermsHash.finishDocument(TermsHash.java:138)\n\tat org.apache.lucene.index.DocInverter.finishDocument(DocInverter.java:95)\n\tat org.apache.lucene.index.DocFieldProcessor.finishDocument(DocFieldProcessor.java:293)\n\tat org.apache.lucene.index.DocumentsWriterPerThread.updateDocument(DocumentsWriterPerThread.java:246)\n\tat org.apache.lucene.index.DocumentsWriter.updateDocument(DocumentsWriter.java:368)\n\tat org.apache.lucene.index.IndexWriter.updateDocument(IndexWriter.java:1469)\n\tat org.apache.lucene.index.IndexWriter.updateDocument(IndexWriter.java:1441)\n\tat org.apache.lucene.index.TestIndexWriterWithThreads$IndexerThread.run(TestIndexWriterWithThreads.java:65)\n{noformat}\n\nThe seed doesn't repro for me; I have to run in a while(1), but it repros fairly quickly with -Dtest.iters=10.\n\nI'm not sure how/why but somehow there is a DWPT that successfully indexed 1 doc, opened the doc stores, and then is never heard from again... when it fails it always still has the 5 doc stores open.  Somehow, when we flushAll at close we fail to visit this DWPT.  I don't know where it's getting lost...\n\nOK, this has something to do w/ DocsWriterFlushControl.abortFullFlushes -- that method visits the DWPT in question, to abort its flush, but, this does not close the opened doc store files.\n\nBut: why do we ever \"abort\" a full flush...?  It looks like it happens because one of the DWPTs hits an exc while flushing...?",
            "date": "2011-05-29T00:29:19.852+0000",
            "id": 32
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. I'm still hitting an intermittent fail:\nI fixed the last failure mike reported on the branch. If we abort a flushAll and a excp. is thrown in the abort method we were not closing the remaining dwpt in the queues.\n\nbq. But: why do we ever \"abort\" a full flush...? It looks like it happens because one of the DWPTs hits an exc while flushing...?\n\nI think this is the way to go here. if one DWPT can not flush why would be continue flushing the remaining ones. You will need to call rollback anyway or reindex all documents since the last commit. Its unnecessary to flush those DWPT since we are already lost the failed segment.",
            "date": "2011-05-29T02:57:05.454+0000",
            "id": 33
        },
        {
            "author": "Robert Muir",
            "body": "updated patch, with everything from our throwaway branch.\n\nat a glance i saw at least one TODO involving closing a list of iterable (probably can be easily fixed now) and a nocommit about rethrowing threadinterruptexc",
            "date": "2011-05-29T03:12:35.862+0000",
            "id": 34
        },
        {
            "author": "Shai Erera",
            "body": "Renamed all IOUtils methods to closeSafely. With Simon's fix, the names don't collide anymore. Thanks Simon !\n\nFixed to two TODO + one other place to use IOUtils.closeSafely collection version.\n\nAdded CHANGES entry.\n\nThere is one nocommit, but I think it's already handled? The code already rethrows TIE:\n\n{code}\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      // nocommit if this is thread interrupted we should rethrow\n    }\n{code}\n\nI think this is ready to commit to trunk, and then will start backporting to 3x.",
            "date": "2011-05-29T04:09:22.187+0000",
            "id": 35
        },
        {
            "author": "Shai Erera",
            "body": "Thanks guys for the awesome help !",
            "date": "2011-05-29T04:10:44.957+0000",
            "id": 36
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Thanks guys for the awesome help !\nawesome teamwork - I love it!",
            "date": "2011-05-29T04:13:19.096+0000",
            "id": 37
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nI think this is ready to commit to trunk, and then will start backporting to 3x.\n{quote}\n\n+1 to commit, I updated the patch to include the missing MockLockFactory.java, don't forget to svn add :)",
            "date": "2011-05-29T04:21:50.037+0000",
            "id": 38
        },
        {
            "author": "Shai Erera",
            "body": "MockLockFactoryWrapper accidentally omitted from previous patch.",
            "date": "2011-05-29T04:22:37.297+0000",
            "id": 39
        },
        {
            "author": "Shai Erera",
            "body": "Committed revision 1128830 to trunk. I will now backport to 3x.",
            "date": "2011-05-29T05:50:03.180+0000",
            "id": 40
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nbq. But: why do we ever \"abort\" a full flush...? It looks like it happens because one of the DWPTs hits an exc while flushing...?\n\nI think this is the way to go here. if one DWPT can not flush why would be continue flushing the remaining ones. You will need to call rollback anyway or reindex all documents since the last commit. Its unnecessary to flush those DWPT since we are already lost the failed segment.\n{quote}\n\nIn theory, if disk space freed up, the other DWPTs could flush?  Ie the failure of one DWPT to flush should only \"have to\" above that one DWPT?\n\nBut I agree, I think it's OK if we leave it this way for now... you're right that the app is going to have to do its own \"recovery\" anyway.  Just feels like we shouldn't be discarding healthy DWPTs... but I think it's minor.",
            "date": "2011-05-29T10:00:45.115+0000",
            "id": 41
        },
        {
            "author": "Shai Erera",
            "body": "Changes backported from trunk.\n\nI think I found another leak in IndexWriter.closeMergeReaders (not fixed on trunk yet) -- if suppressExceptions was 'false', it could fail on a release() / close() attempt w/o releasing/closing all of the pooled readers.\n\nI modified the method to remove a lot of code duplication, so I'd appreciate a second eye on it.\n\nAll tests pass (at least so far). So if there are no objections, I'll commit to 3x and port the IW fix to trunk as well.",
            "date": "2011-05-29T11:47:22.260+0000",
            "id": 42
        },
        {
            "author": "Michael McCandless",
            "body": "Nice catch in closeMergeReaders -- the changes there look great.  Much less code dup now :)\n\nYou need to \"svn add\" MockLockFWWrapper.java.",
            "date": "2011-05-29T12:11:53.648+0000",
            "id": 43
        },
        {
            "author": "Shai Erera",
            "body": "Also, why do we call checkpoint() only if suppressWarnings=true and not only if anyChanges=true? Why do we care about suppressWarnings or not? From what I read, the two are equivalent in that context, b/c drop=!suppressWarnings which means anyChanges=false whenever drop=true ...\n\nIt's weird about MLFWrapper - when I 'svn stat' it appears w/ \"A  +\" and not \"?\". Yet \"svn diff MLFW\" yields no diff ... If I \"svn ci\", I see that it's included in the list of files ... strange.",
            "date": "2011-05-29T14:08:04.283+0000",
            "id": 44
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Also, why do we call checkpoint() only if suppressWarnings=true and not only if anyChanges=true? \n\nGood question!  My guess is the checkpoint() can be removed?  We call checkpoint up above after closeMergeReaders unconditionally...\n\nbq. It's weird about MLFWrapper - when I 'svn stat' it appears w/ \"A +\" and not \"?\". Yet \"svn diff MLFW\" yields no diff ... If I \"svn ci\", I see that it's included in the list of files ... strange.\n\nAhh yes OK.  This is from \"svn merge\" I think?  Like \"svn diff\" won't show it... maybe there's some option to svn diff to show these \"added due to merge\" changes?",
            "date": "2011-05-29T15:11:07.513+0000",
            "id": 45
        },
        {
            "author": "Shai Erera",
            "body": "ok I removed the call to checkpoint(), and do not track anyChanges anymore.\n\nI tried \"svn diff --force\", but still nothing. And yes, it's an \"svn merge\" that I did. I guess we don't post patches after backport very often, so not a biggy.\n\nI'll commit shortly.",
            "date": "2011-05-29T16:47:06.853+0000",
            "id": 46
        },
        {
            "author": "Shai Erera",
            "body": "Hmm ... I think checkpoint() is needed after all. After I committed to trunk, I ran tests again on 3x before commit, and TestIndexWriter.testNoWaitClose failed:\n\n{noformat}\n    [junit] Testsuite: org.apache.lucene.index.TestIndexWriter\n    [junit] Testcase: testNoWaitClose(org.apache.lucene.index.TestIndexWriter): FAILED\n    [junit] IndexFileDeleter doesn't know about file _a6_1.del\n    [junit] junit.framework.AssertionFailedError: IndexFileDeleter doesn't know about file _a6_1.del\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1207)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1125)\n    [junit]     at org.apache.lucene.index.IndexWriter.filesExist(IndexWriter.java:4421)\n    [junit]     at org.apache.lucene.index.IndexWriter.startCommit(IndexWriter.java:4469)\n    [junit]     at org.apache.lucene.index.IndexWriter.prepareCommit(IndexWriter.java:3354)\n    [junit]     at org.apache.lucene.index.IndexWriter.commitInternal(IndexWriter.java:3425)\n    [junit]     at org.apache.lucene.index.IndexWriter.closeInternal(IndexWriter.java:1870)\n    [junit]     at org.apache.lucene.index.IndexWriter.close(IndexWriter.java:1813)\n    [junit]     at org.apache.lucene.index.TestIndexWriter.testNoWaitClose(TestIndexWriter.java:1515)\n    [junit]\n    [junit]\n    [junit] Tests run: 68, Failures: 1, Errors: 0, Time elapsed: 24.884 sec\n    [junit]\n    [junit] ------------- Standard Error -----------------\n    [junit] NOTE: reproduce with: ant test -Dtestcase=TestIndexWriter -Dtestmethod=testNoWaitClose -Dtests.seed=8584244356995777356:6228535864161192995\n    [junit] NOTE: test params are: locale=da_DK, timezone=America/Menominee\n    [junit] NOTE: all tests run in this JVM:\n    [junit] [TestClassicAnalyzer, TestPerFieldAnalzyerWrapper, TestCharTermAttributeImpl, TestNumberTools, TestConcurrentMergeScheduler, TestFilterIndexReader, TestIndexWriter]\n    [junit] NOTE: Windows 7 6.1 build 7600 amd64/IBM Corporation 1.6.0 (64-bit)/cpus=2,threads=3,free=1805128,total=34830336\n    [junit] ------------- ---------------- ---------------\n    [junit] TEST org.apache.lucene.index.TestIndexWriter FAILED\n{noformat}\n\nReproduced it on 3x, not on trunk. closeMergeReaders is called from commitMerge, which indeed calls checkpoint() afterwards unconditionally, but also from mergeMiddle, in its finally block if (!success). And the exception suggests that IFD does not know about a certain file, and checkpoint() calls deleter.refresh. So I'll revert my change to trunk and call checkpoint() if anyChanges + suppressExceptions. I don't want to change previous behavior.",
            "date": "2011-05-29T17:10:39.583+0000",
            "id": 47
        },
        {
            "author": "Michael McCandless",
            "body": "Ahh OK it is in fact necessary.  It's because closeMergeReaders is also called from the finally clause when there is an exception (hence the suppressExcs=true), and checkpoint is NOT then called from that location, so we do need to call it inside here.  Alternatively we could always call it inside closeMergeReaders, but then not above (inside commitMerge()).  Or we can leave it be for now :)",
            "date": "2011-05-29T17:22:07.808+0000",
            "id": 48
        },
        {
            "author": "Shai Erera",
            "body": "I prefer that it's always called outside of closeMergeReaders. That's practically what happens already (checkpoint() is either called outside or inside in confusing code), so why not make it explicit and remove the confusing code?",
            "date": "2011-05-29T17:36:21.221+0000",
            "id": 49
        },
        {
            "author": "Michael McCandless",
            "body": "Well... the problem is, mergeMiddle isn't sync'd?  But, we could wrap the call to closeMergeReaders in sync block, and put the checkpoint() inside that?",
            "date": "2011-05-29T17:42:30.077+0000",
            "id": 50
        },
        {
            "author": "Shai Erera",
            "body": "Backported to 3x from trunk.\n\nI decided to keep IW.closeMergeReaders as it is.\n\nThanks Mike, Robert and Simon. This was great teamwork !",
            "date": "2011-05-29T18:41:03.131+0000",
            "id": 51
        },
        {
            "author": "Robert Muir",
            "body": "Bulk closing for 3.2",
            "date": "2011-06-03T16:37:14.337+0000",
            "id": 52
        }
    ],
    "component": "general/test",
    "description": "MockDirectoryWrapper currently tracks open file handles of IndexInput only. Therefore IO files that are not closed do not fail our tests, which can then lead to test directories fail to delete on Windows. We should make sure all open files are tracked and if they are left open, fail the test. I'll attach a patch shortly.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3147",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "OTHER",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "MockDirectoryWrapper should track open file handles of IndexOutput too",
    "systemSpecification": true,
    "version": ""
}