{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "The patch is here. Maybe the javadocs of getLastNumberOfTerms could be improved...",
            "date": "2009-04-14T16:36:58.830+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good.  Should we allow lastNumberOfTerms to be the sum of all invocations?  (Instead of clearing it per segment)?  And maybe add a resetLastNumberOfTerms, in case one wants to re-use a MultiTermQuery and recheck that count.",
            "date": "2009-04-14T16:57:26.766+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "This is also another idea. The sum is interesting, too, but not so helpful, if the segments share the same terms. But for the number of seeks in TermDocs its interesting. Even if it sums up, the numbers in the Trie tests are the same, because index is optimized. So the note could be: For real numbers to analyze your query, use a optimized index, for real seek counts on a complex index/query structure, do not optimize.\n\nBy the way: Are queries also rewritten per segment with the new Searchers? If not, one could use the BooleanQuery variant, if he wants to have real term numbers on unoptimized index.\n\nI am +/- 0 about the change. In case of a change, the method should be called getCurrentNumberOfTerms() or something like that -- naming is the hardest one.",
            "date": "2009-04-14T17:37:03.561+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "I was thinking that this count is a good way to measure how much net work was done, hence the switch to sum.  EG you could compare that count vs the count you get after having optimized the index to get a sense of how much you gained by optimizing.\n\nWhereas now, with the count only showing the # terms from the last segment searched, is not really useful at all.\n\nbq. Are queries also rewritten per segment with the new Searchers? If not, one could use the BooleanQuery variant, if he wants to have real term numbers on unoptimized index.\n\nThey are rewritten at the MultiReader level, so you're right one could use that to get \"number of unique terms\" vs \"amount of work (seeks) done\".\n\nIf we do change it, ow about \"get/clearTotalNumberOfTerms()\"?",
            "date": "2009-04-14T17:48:38.190+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "Maybe declare the term number as transient, it should not be serialized...",
            "date": "2009-04-14T17:49:51.243+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Here the patch with the suggested changes.\nTrieRange test changes and so on come later.",
            "date": "2009-04-14T19:15:40.279+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Looks good Uwe, thanks.  I plan to commit shortly.  I changed one sentence in the javadoc to:\n\n{code}\n* If you re-use the same query instance for another\n* search, be sure to first reset the term counter\n* with {@link #clearTotalNumberOfTerms}.\n{code}\n\n(It was missing the \"reuse\" part, making it sound like you always must call clear first).",
            "date": "2009-04-14T19:27:33.977+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Uwe!",
            "date": "2009-04-14T19:36:50.055+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "Just for completeness: Should we add the number of terms methods also to the *Filter counterparts of the MultiTermQueries (as the new methods are only automatically appear in subclasses, but not in related pass-to-query-only classes)?\nIn trie-range I have these pass-to-query methods.",
            "date": "2009-04-15T06:44:36.820+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "An idea how to achive this, would be to make the *Filter counterparts subclasses of a new superclass MutiTermFilter, that just passes all methods to the corresponding query. This would make the filter classes simplier and one must only add the new methods to this superclass not to every filter class manually.\nShould I add a patch?",
            "date": "2009-04-15T06:48:25.581+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "bq. An idea how to achive this, would be to make the *Filter counterparts subclasses of a new superclass MutiTermFilter, that just passes all methods to the corresponding query.\n\nThat'd be great -- can you reopen this & attach patch?",
            "date": "2009-04-15T12:33:37.594+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "To also expose getTotalTermCount to the Filter counterparts, I provide a new supercalss for those filters MultiTermQueryWrapperFilter (name to be discussed).",
            "date": "2009-04-15T16:25:57.768+0000",
            "id": 11
        },
        {
            "author": "Uwe Schindler",
            "body": "Patch that provides that filter.\n\nMike: Can you please test drop-in-backwards-compatibility with this patch applied, with Windows, the checkout through Ant does not work correctly? I also set the native line ending svn property of the new file in the patch.\n\nThe update of the TrieRange follows after this is committed, code not affected, compiles still fine.",
            "date": "2009-04-15T16:28:40.106+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good -- I'll commit shortly.  Thanks Uwe!",
            "date": "2009-04-16T11:34:53.675+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "Do you think the name is good? MultiTermQueryWrapperFilter or simplier MultiTermFilter? Its not really one of both, its a mix between wrapper and the real filter: It wraps the query, but does the getDocIdSet and TermEnums himself.",
            "date": "2009-04-16T11:43:59.489+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "I think the name is good, so it's clear you have to provide a MultiTermQuery yourself (via subclass) to use it.",
            "date": "2009-04-16T11:52:17.246+0000",
            "id": 15
        }
    ],
    "component": "",
    "description": "This is a patch, that is needed for the MultiTermQuery-rewrite of TrieRange (LUCENE-1602):\n- Make the private members protected, to have access to them from the very special TrieRangeTermEnum \n- Fix a small inconsistency (docFreq() now only returns a value, if a valid term is existing)\n- Improvement of MultiTermFilter.getDocIdSet to return DocIdSet.EMPTY_DOCIDSET, if the TermEnum is empty (less memory usage) and faster.\n- Add the getLastNumberOfTerms() to MultiTermQuery for statistics on different multi term queries and how may terms they affect, using this new functionality, the improvement of TrieRange can be shown (extract from test case there, 10000 docs index, long values):\n{code}\n[junit] Average number of terms during random search on 'field8':\n[junit]  Trie query: 244.2\n[junit]  Classical query: 3136.94\n[junit] Average number of terms during random search on 'field4':\n[junit]  Trie query: 38.3\n[junit]  Classical query: 3018.68\n[junit] Average number of terms during random search on 'field2':\n[junit]  Trie query: 18.04\n[junit]  Classical query: 3539.42\n{code}\n\nAll core tests pass.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1603",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Changes for TrieRange in FilteredTermEnum and MultiTermQuery improvement",
    "systemSpecification": true,
    "version": "2.4, 2.9"
}