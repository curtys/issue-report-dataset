{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Attached patches, for 3.1 and 4.0.\n\nThis also cleans up the String/TermOrdValComparator, absorbing the convert method directly into setBottom, and doing away with some dead code.  With this fix we no longer compare by value at all if index is a single segment (I think!).",
            "date": "2010-07-10T20:48:43.374+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Another iteration on the patches with some small further optimizing.",
            "date": "2010-07-10T22:47:04.587+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "The thing that jumps out at me is the removal of \"reversed\"... I'd need to apply the patch to study enough to figure that out, but any clues you could give would be helpful (yes, I'm being lazy ;-)",
            "date": "2010-07-11T00:08:59.483+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "I hear you; this stuff is kinda hairy ;)\n\nThe usage of reverse (and, sortPos) was only in dead code, inside the convert method.\n\nThe convert method used to be used more often (to do on-demand convert of the ord when its readerGen != current one), but we stopped doing that and only convert the bottom slot now, which mean this if:\n\n{noformat}\n      if (sortPos == 0 && bottomSlot != -1 && bottomSlot != slot) {\n{noformat}\n\nCan never be true (bottomSlot is *always* == slot), so that true clause was all dead code anyway.",
            "date": "2010-07-11T00:20:22.612+0000",
            "id": 3
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:30.489+0000",
            "id": 4
        }
    ],
    "component": "core/search",
    "description": "Digging on LUCENE-2504, I noticed that TermOrdValComparator's compareBottom method falls back on compare-by-value when it needn't.\n\nSpecifically, if we know the current bottom ord \"matches\" the current segment, we can skip the value comparison when the ords are the same (ie, return 0) because the ords are exactly comparable.\n\nThis is hurting string sort perf especially for optimized indices (and also unoptimized indices), and especially for highly redundant (not many unique values) fields.  This affects all releases >= 2.9.x, but trunk is likely more severely affected since looking up a value is more costly.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2531",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "FieldComparator.TermOrdValComparator compares by value unnecessarily",
    "systemSpecification": true,
    "version": ""
}