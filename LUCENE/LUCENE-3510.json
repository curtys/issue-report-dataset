{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Patch.",
            "date": "2011-10-11T19:17:44.258+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "I feel bad for Tate:\n\n    http://www.gossamer-threads.com/lists/lucene/java-user/8403\n\nBut at least finally we are addressing this.",
            "date": "2011-10-11T19:18:52.613+0000",
            "id": 1
        },
        {
            "author": "Doug Cutting",
            "body": "Using a single bit to track prohibited terms seems reasonable, plus a count for required terms.\n\nI don't recall the exact history of the original implementation.  I think it may have been in order to support more complex boolean expressions.  Any boolean expression can be rewritten to disjunctive normal form, which can then be evaluated with a set of required/prohibited mask pairs, one per conjunctive clause.  This is something I'd implemented previously and probably had in mind when implementing BooleanScorer.  A Lucene boolean query is effectively a single such conjunctive clause, since the optional terms can be ignored when evaluating the boolean expression, so would reduce to a single pair of masks.  But, as you observe, this single clause DNF case can be further simplified to a boolean and a count of required terms.  Does that make sense?",
            "date": "2011-10-11T20:18:13.674+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Doug, that makes sense!  So it looks like this is a safe change.",
            "date": "2011-10-11T20:26:36.317+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "Bulk close after release of 3.5",
            "date": "2011-11-27T12:29:33.772+0000",
            "id": 4
        }
    ],
    "component": "",
    "description": "Today it's limited to 32, because it uses a separate bit in the mask\nfor each clause.\n\nBut I don't understand why it does this; I think all prohibited\nclauses can share a single boolean/bit?  Any match on a prohibited\nclause sets this bit and the doc is not collected; we don't need each\nprohibited clause to have a dedicated bit?\n\nWe also use the mask for required clauses, but this code is now\ncommented out (we always use BS2 if there are any required clauses);\nif we re-enable this code (and I think we should, at least in certain\ncases: I suspect it'd be faster than BS2 in many cases), I think we\ncan cutover to an int count instead of bit masks, and then have no\nlimit on the required clauses sent to BooleanScorer also.\n\nSeparately I cleaned a few things up about BooleanScorer: all of the\nembedded scorer methods (nextDoc, docID, advance, score) now throw\nUOE; pre-allocate the buckets instead of doing it lazily\nper-sub-collect.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3510",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "BooleanScorer should not limit number of prohibited clauses",
    "systemSpecification": true,
    "version": ""
}