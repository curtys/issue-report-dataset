{
    "comments": [
        {
            "author": "Simon Willnauer",
            "body": "Mike, I think renaming is a good idea - that might make things slightly easier for folks to play around with codec \n\nhere are some comments on the naming:\n\nbq.StandardTermsDictWriter/Reader -> PrefixCodedTermsWriter/Reader\n+1\n\nbq. StandardTermsIndexWriter/Reader -> AbstractTermsIndexWriter/Reader\nWhat about TermsIndexWriter/ReaderBase since we started using that scheme with analyzers and the JDK uses that too. If we remove the abstractness one day the name is very miss-leading but the property of being a base class will likely remain.\n\nbq. SimpleStandardTermsIndexWriter/Reader -> SimpleTermsIndexWriter/Reader\nI really don't like Simple* its like Smart which makes me immediately feel itchy all over the place. What differentiates this from others? It is the default? maybe DefaultTermsIndexWriter/Reader? \n\nbq. StandardPostingsWriter/Reader -> AbstractPostingsWriter/Reader\nAgain, what about PostingWriter/ReaderBase\n\nbq. StandardPostingsWriterImpl/ReaderImple -> StandardPostingsWriter/Reader\n+1",
            "date": "2010-09-16T10:33:26.529+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "bq. What about TermsIndexWriter/ReaderBase since we started using that scheme with analyzers and the JDK uses that too.\n\nOK I'll switch from Abstract* -> *Base.\n\n{quote}\nbq. SimpleStandardTermsIndexWriter/Reader -> SimpleTermsIndexWriter/Reader\n\nI really don't like Simple* its like Smart which makes me immediately feel itchy all over the place. \n{quote}\n\nHeh OK.\n\nbq. What differentiates this from others? It is the default? maybe DefaultTermsIndexWriter/Reader?\n\nWell... there are no \"others\" yet!  So, its is the default for now, but, I don't like baking that into its name...\n\nLesse... so this one uses packed ints, to write the \"RAM image\" required at search time, so that at search time we just slurp in these pre-built images.  While the index term selection policy is now \"fixed\" (every N), I think this may change with time (the policy should be easily separable from how the index terms are written).  Though, since we haven't yet done that separation, maybe I simply name it FixedGapTermsIndexWriter/Reader?  How's that?",
            "date": "2010-09-16T10:54:56.103+0000",
            "id": 1
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. ...FixedGapTermsIndexWriter/Reader? How's that?\n+1\n\n",
            "date": "2010-09-16T11:08:42.173+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "New patch, w/ the names we iterated to above...",
            "date": "2010-09-17T15:14:28.714+0000",
            "id": 3
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. New patch, w/ the names we iterated to above...\nI looked at the patch briefly - looks good to me mike!\n",
            "date": "2010-09-17T15:42:13.294+0000",
            "id": 4
        }
    ],
    "component": "core/index",
    "description": "The terms dict components that current live under Standard codec\n(oal.index.codecs.standard.*) are in fact very generic, and in no way\nparticular to the Standard codec.  Already we have many other codecs\n(sep, fixed int block, var int block, pulsing, appending) that re-use\nthe terms dict writer/reader components.\n\nSo I'd like to move these out into oal.index.codecs, and rename them:\n\n  * StandardTermsDictWriter/Reader -> PrefixCodedTermsWriter/Reader\n  * StandardTermsIndexWriter/Reader -> AbstractTermsIndexWriter/Reader\n  * SimpleStandardTermsIndexWriter/Reader -> SimpleTermsIndexWriter/Reader\n  * StandardPostingsWriter/Reader -> AbstractPostingsWriter/Reader\n  * StandardPostingsWriterImpl/ReaderImple -> StandardPostingsWriter/Reader\n\nWith this move we have a nice reusable terms dict impl.  The terms\nindex impl is still well-decoupled so eg we could [in theory] explore\na variable gap terms index.\n\nMany codecs, I expect, don't need/want to implement their own terms\ndict....\n\nThere are no code/index format changes here, besides the renaming &\nfixing all imports/usages of the renamed class.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2647",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Move & rename the terms dict, index, abstract postings out of oal.index.codecs.standard",
    "systemSpecification": true,
    "version": "4.0-ALPHA"
}