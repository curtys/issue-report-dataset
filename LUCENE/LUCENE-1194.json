{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Attached patch.  All tests pass.",
            "date": "2008-02-26T15:55:25.058+0000",
            "id": 0
        },
        {
            "author": "Ning Li",
            "body": "Great to see deleteByQuery being added to IndexWriter!\n\n> Then, I also decoupled flushing deletes (mapping term or query -->\n> actual docIDs that need deleting) from flushing added documents, and\n> now I flush deletes only when a merge is started, or on commit() or\n> close().\n\nWhen autoCommit is true, we have to flush deletes with added documents\nfor update atomicity, don't we? UpdateByQuery can be added, if there is a\nneed.\n\n> SegmentMerger now exports the docID map it used when merging,\n> and I use that to renumber the max docIDs of all pending deletes.\n\nBecause of renumbering, we don't have to flush deletes at the start of\nevery merge, right? But it is a good time to flush deletes.",
            "date": "2008-02-26T17:45:35.236+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nWhen autoCommit is true, we have to flush deletes with added documents\nfor update atomicity, don't we? UpdateByQuery can be added, if there is a\nneed.\n{quote}\nGood question Ning!\n\nAs of LUCENE-1044, when autoCommit=true, IndexWriter only commits on\ncommitting a merge, not with every flush.\n\nHmmm ... but, there is actually the reverse problem now with my patch:\nan auto commit can actually commit deletes before the corresponding\nadded docs are committed (from updateDocument calls).  This is\nbecause, when we commit we only sync & commit the merged segments (not\nthe flushed segments).  Though, autoCommit=true is deprecated; once we\nremove that (in 3.0) this problem goes away.  I'll have to ponder how\nto fix that for now up until 3.0...it's tricky.  Maybe before 3.0\nwe'll just have to flush all deletes whenever we flush a new\nsegment....\n\nAlso, I don't think we need updateByQuery?  Eg in 3.0 when autoCommit\nis hardwired to false then you can deleteDocuments(Query) and then\naddDocument(...) and it will be atomic.\n\n{quote}\nBecause of renumbering, we don't have to flush deletes at the start of\nevery merge, right?\n{quote}\n\nExactly.  EG, we could carry the deletes indefinitely and then flush\nthem only on close (assuming autoCommit=false), but...\n\n{quote}\nBut it is a good time to flush deletes.\n{quote}\n\nRight.  I think you want to flush all deletes that apply to the\nsegments being merged so merging will compact them.  Right now I apply\nall buffered deletes to all segments when any merge is started.  It\nmay be possible to only apply them to those segments about to be\nmerged, but, I think it gets rather complex to track which buffered\ndeletes then need to apply to which segments.\n",
            "date": "2008-02-26T20:05:40.218+0000",
            "id": 2
        },
        {
            "author": "Ning Li",
            "body": "> As of LUCENE-1044, when autoCommit=true, IndexWriter only commits on\n> committing a merge, not with every flush.\n\nI see. Interesting.\n\n> Hmmm ... but, there is actually the reverse problem now with my patch:\n> an auto commit can actually commit deletes before the corresponding\n> added docs are committed (from updateDocument calls). This is\n> because, when we commit we only sync & commit the merged segments (not\n> the flushed segments).\n\nYep.\n\n> Though, autoCommit=true is deprecated; once we\n> remove that (in 3.0) this problem goes away. I'll have to ponder how\n> to fix that for now up until 3.0...it's tricky. Maybe before 3.0\n> we'll just have to flush all deletes whenever we flush a new\n> segment....\n\nI think flushing deletes when we flush a new segment is fine before 3.0.\nIn 3.0, is the plan to default autoCommit to false or to disable autoCommit\nentirely? The latter, right?\n\n> Also, I don't think we need updateByQuery? Eg in 3.0 when autoCommit\n> is hardwired to false then you can deleteDocuments(Query) and then\n> addDocument(...) and it will be atomic.\n\nAgree. When autoCommit is disabled, we don't need any update method.",
            "date": "2008-02-27T16:22:35.216+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nIn 3.0, is the plan to default autoCommit to false or to disable autoCommit\nentirely? The latter, right?\n{quote}\nYes, the latter.\n",
            "date": "2008-02-27T22:00:56.886+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "OK I attached a new rev of the patch, fixing the issue Ning spotted\n(thanks!).  Now if autoCommit=true we apply deletes with every flush.\n\nOther changes in this rev:\n\n  * I modified the TestAtomicUpdate unit test to fail (because of this\n    issue), and with the new patch it now passes.\n\n  * I added the unLock/isLocked methods into IndexWriter and deprecated\n    the ones in IndexReader.\n\n  * I fixed an issue with commit() whereby it could return without\n    committing, if another thread (merge thread) was in the process of\n    committing at the same time.\n\n  * Using the same testPoint call from LUCENE-1198, I added more test\n    points so that I could tweak thread scheduling by randomly calling\n    Thread.yield().  I changed TestStressIndexing2 & TestAtomicUpdate\n    to do this.\n\nI plan to commit in a few days.",
            "date": "2008-03-01T17:29:53.400+0000",
            "id": 5
        }
    ],
    "component": "",
    "description": "This has been discussed several times recently:\n\n  http://markmail.org/message/awlt4lmk3533epbe\n  http://www.gossamer-threads.com/lists/lucene/java-user/57384#57384\n\nIf we add deleteByQuery to IndexWriter then this is a big step towards\nallowing IndexReader to be readonly.\n\nI took the approach suggested in that first thread: I buffer delete\nqueries just like we now buffer delete terms, holding the max docID\nthat the delete should apply to.\n\nThen, I also decoupled flushing deletes (mapping term or query -->\nactual docIDs that need deleting) from flushing added documents, and\nnow I flush deletes only when a merge is started, or on commit() or\nclose().  SegmentMerger now exports the docID map it used when\nmerging, and I use that to renumber the max docIDs of all pending\ndeletes.\n\nFinally, I turned off tracking of memory usage of pending deletes\nsince they now live beyond each flush.  Deletes are now only\nexplicitly flushed if you set maxBufferedDeleteTerms to something\nother than DISABLE_AUTO_FLUSH.  Otherwise they are flushed at the\nstart of every merge.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1194",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add deleteByQuery to IndexWriter",
    "systemSpecification": true,
    "version": ""
}