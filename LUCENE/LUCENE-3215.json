{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "test case",
            "date": "2011-06-20T03:46:10.143+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "the problem in this case, is it computes a 'matchLength' of -1.\nthen the default impl of sloppyFreq divides by zero, because its defined as:\n{noformat}\nreturn 1.0f / (distance + 1);\n{noformat}\n",
            "date": "2011-06-20T03:51:07.006+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "those lyrics are entertaining, but here is a more concise test.",
            "date": "2011-06-20T04:14:31.546+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "It seems to me the root cause of the bug is having position 'holes' (e.g. stopwords), especially across duplicated terms...\n\nFor example, if you disable position increments in queryparser it won't trigger the bug.",
            "date": "2011-08-05T13:23:56.502+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "Here's a hack patch... \n\nI tried writing some correctness tests here but its *really* hard for me to visualize what the freq should even be for these \"sloppy repeating phrase queries with holes\".\n",
            "date": "2011-08-09T01:08:48.266+0000",
            "id": 4
        },
        {
            "author": "Doron Cohen",
            "body": "An update on this...\n\nThis is not related to LUCENE-3142 - the latter was fixed but this one still fails.\n\nThe patch fix which 'abs' the distance indeed avoids the infinite score problem, but I was not 100% comfortable with it - how can the distance be none positive?\n\nDigging into it shows a wrong assumption in SloppyPhraseScorer:\n\n{code}\n    private int initPhrasePositions() throws IOException {\n        int end = 0;\n{code}\n\nThe initial value of end assumes that all positions will be nonnegative.\nBut this is wrong, as PP position is computed as \n\n{code}\n  position = postings.nextPosition() - offset\n{code}\n\nSo, whenever the query term appears in the doc in a position smaller than its offset in the query, the computed position is negative. The correct initialization for end is therefore:\n\n{code}\n    private int initPhrasePositions() throws IOException {\n        int end = Integer.MIN_VALUE;\n{code}\n\nYou would expect this bug to surfaced sooner...\n\nAnyhow, for the 3 tests that Robert added, this only resolve testInfiniteFreq1() but the other two tests still fail, investigating...",
            "date": "2011-09-08T09:43:45.339+0000",
            "id": 5
        },
        {
            "author": "Doron Cohen",
            "body": "OK I think I have a fix for this.\n\nWhile looking at it, I realized that PhraseScorer (the one that used to base both Exact&Sloppy phrase scorers but now is the base of only sloppy phrase scorer) is way too complicated and inefficient. All those sort calls after each matching doc can be avoided. \n\nSo I am modifying PhraseScorer to not have a phrase-queue at all - just the sorted linked list, which is always kept sorted by advancing last beyond first. Last is renamed to 'min' and first is renamed to 'max'. Making the list cyclic allows more efficient manipulation of it. \n\nWith this, SloppyPhraseScorer is modified to maintain its own phrase queue. The queue size is set at the first candidate document. In order to handle repetitions (Same term in different query offsets) it will contain only some of the pps: those that either have no repetitions, or are the first (lower query offset) in a repeating group. A linked list of repeating pps was added: so PhrasePositions has a new member: nextRepeating.\n\nDetection of repeating pps and creation of that list is done once per scorer: at the first candidate doc.\n\nFor solving the bugs reported here, in addition to the initiation of 'end' as explained in previous comment, advanceRepeatingPPs now also update two values:\n- end, in case one of the repeating pps is far ahead (larger)\n- position of the first pp in a repeating list (the one that is in the queue - in case the repeating pp is far behind (smaller). This can happen when there are holes in the query, as position = tpPOs - offset. It fixes the problem of false negative distances which caused this bug. It is tricky: relies on that PhrasePositions.nextPosition() ignores pp.position and just call positions.nextPosition(). But it is correct, as the modified position is used to replace pp in the queue.\n\nLast, I think that the test added with holes had one wrong assert: It added four docs:\n- drug drug\n- drug druggy drug\n- drug druggy druggy drug\n- drug druggy drug druggy drug\n\ndefined this query (number is the offset):\n- drug(1) drug(3)\n\nand expected that with slop=1 the first doc would not be found.\nI think it should be found, as the slop operates in both directions.\nSo modified the query to: drug(1) drug(3)\n\nPatch to follow.",
            "date": "2011-09-17T18:52:21.366+0000",
            "id": 6
        },
        {
            "author": "Doron Cohen",
            "body": "Attached patch is based on r1166541 - before recent changes to scorers. Will merge with recent changes tomorrow or so. All tests pass.\nI believe that sloppy scoring performance should improve with this change but did not check this.",
            "date": "2011-09-17T19:01:14.075+0000",
            "id": 7
        },
        {
            "author": "Doron Cohen",
            "body": "Updated patch for current trunk r1172055.",
            "date": "2011-09-17T19:37:07.465+0000",
            "id": 8
        },
        {
            "author": "Doron Cohen",
            "body": "Previous patch still produces NANs and infinite scores with holes.\nUpdated patch is fixing this, by updating END (before computing the new match-length) also for pp (not only for its repeats).\n\nI plan to commit this soon.",
            "date": "2011-09-20T08:42:20.041+0000",
            "id": 9
        },
        {
            "author": "Doron Cohen",
            "body": "Fixed\n- r1173961 - trunk\n- r1174002 - 3x\n\nPrior to committing I compared the performance of sloppy phrase queries with/out repeats for large documents with many candidate matches and did not see the anticipated speedup, though, at least, no degradations as well.",
            "date": "2011-09-22T09:13:34.268+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "Bulk close after release of 3.5",
            "date": "2011-11-27T12:29:36.253+0000",
            "id": 11
        }
    ],
    "component": "",
    "description": "reported on user list:\nhttp://www.lucidimagination.com/search/document/400cbc528ed63db9/score_of_infinity_on_dismax_query\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3215",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "SloppyPhraseScorer sometimes computes Infinite freq",
    "systemSpecification": true,
    "version": ""
}