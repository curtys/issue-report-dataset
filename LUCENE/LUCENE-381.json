{
    "comments": [
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14799)\nMemoryIndex.java\n\nMemoryIndex.java",
            "date": "2005-04-23T05:50:30.000+0000",
            "id": 0
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14800)\nMemoryIndexTest.java\n\nMemoryIndexTest.java",
            "date": "2005-04-23T05:51:06.000+0000",
            "id": 1
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14801)\ntestqueries.txt\n\ntestqueries.txt",
            "date": "2005-04-23T05:51:30.000+0000",
            "id": 2
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14802)\npackage.html\n\npackage.html",
            "date": "2005-04-23T05:51:55.000+0000",
            "id": 3
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14816)\nMemoryIndex.java\n\n- slighly faster indexing\n- reduced sort code duplication",
            "date": "2005-04-24T17:04:17.000+0000",
            "id": 4
        },
        {
            "author": "hoschek",
            "body": "(From update of attachment 14800)\nmade obsolete my new submitted version\n",
            "date": "2005-04-27T07:04:31.000+0000",
            "id": 5
        },
        {
            "author": "hoschek",
            "body": "(From update of attachment 14816)\nmade obsolete my new submitted version\n",
            "date": "2005-04-27T07:04:51.000+0000",
            "id": 6
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14848)\nnew update\n\n- added addField(String, TokenStream)\n- added addField(String, String, Analyzer)\n- refined getMemorySize()\n- cosmetics",
            "date": "2005-04-27T07:06:45.000+0000",
            "id": 7
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14849)\nMemoryIndex.java\n\n- added addField(String, TokenStream)\n- added addField(String, String, Analyzer)\n- refined getMemorySize()\n- cosmetics",
            "date": "2005-04-27T07:08:02.000+0000",
            "id": 8
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14850)\nMemoryIndexTest.java\n\na little more flexible tests",
            "date": "2005-04-27T07:08:41.000+0000",
            "id": 9
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14851)\nPatternAnalyzer.java\n\n * Efficient Lucene analyzer/tokenizer that preferably operates on a String\nrather than a\n * {@link java.io.Reader}, that can flexibly separate on a regular expression\n{@link Pattern}\n * (with behaviour idential to {@link String#split(String)}),\n * and that combines the functionality of\n * {@link org.apache.lucene.analysis.LetterTokenizer},\n * {@link org.apache.lucene.analysis.LowerCaseTokenizer},\n * {@link org.apache.lucene.analysis.WhitespaceTokenizer},\n * {@link org.apache.lucene.analysis.StopFilter} into a single efficient\n * multi-purpose class.\n * <p>\n * If you are unsure how exactly a regular expression should look like,\nconsider \n * prototyping by simply trying various expressions on some test texts via\n * {@link String#split(String)}. Once you are satisfied, give that regex to \n * PatternAnalyzer. Also see <a target=\"_blank\" \n * href=\"http://java.sun.com/docs/books/tutorial/extra/regex/\">Java Regular\nExpression Tutorial</a>.\n * <p>\n * This class can be considerably faster than the \"normal\" Lucene tokenizers. \n * It can also serve as a building block in a compound Lucene\n * {@link org.apache.lucene.analysis.TokenFilter} chain. For example as in this\n\n * stemming example:\n * <pre>\n * PatternAnalyzer pat = ...\n * TokenStream tokenStream = new SnowballFilter(\n *     pat.tokenStream(\"content\", \"James is running round in the woods\"), \n *     \"English\"));\n * </pre>\n",
            "date": "2005-04-27T07:09:49.000+0000",
            "id": 10
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14852)\nPatternAnalyzerTest.java\n\nVerifies that Lucene PatternAnalyzer and normal Lucene Analyzers have the same\nbehaviour,\nreturning the same results for any given free text.\nRuns a set of texts against a tokenizers/analyzers\nCan also be used as a simple benchmark.\n<p>\nExample usage:\n<pre>\ncd lucene-cvs\njava org.apache.lucene.index.memory.PatternAnalyzerTest 1 1 patluc 1 2 2 *.txt\n*.xml docs/*.html src/java/org/apache/lucene/index/*.java xdocs/*.xml\n../nux/samples/data/*.xml\n</pre>\n\nwith WhitespaceAnalyzer problems can be found; These are not bugs but\nquestionable \nLucene features: CharTokenizer.MAX_WORD_LEN = 255.\nThus the PatternAnalyzer produces correct output, whereas the\nWhitespaceAnalyzer \nsilently truncates text, and so the comparison results in assertEquals() don't\nmatch up. \n",
            "date": "2005-04-27T07:10:37.000+0000",
            "id": 11
        },
        {
            "author": "Erik Hatcher",
            "body": "Two requests - could you provide a MemoryIndex implementation that works with\nthe latest codebase?  The inner MemoryIndexReader does not implement some new\nabstract methods, as you have noted.\n\nAlso, having your two tests converted to JUnit tests would be very helpful, as\nonly the JUnit tests get run automatically from Ant.\n\nOnce these two things are done, all looks great to commit.  Initially I will put\nthis in a new contrib/misc area (moving the old sandbox/contributions/misc there).",
            "date": "2005-04-27T18:15:51.000+0000",
            "id": 12
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14890)\nMemoryIndex.java\n\n- now runs against current lucene-svn\n- added support for position offsets\n- added toString() for easier prototyping/debugging\n- renamed query() to search()\n- better internal documentation",
            "date": "2005-05-02T11:09:43.000+0000",
            "id": 13
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14891)\nMemoryIndexTest.java\n\nNow also runs as junit test case (be prepared for a run to take several\nminutes)",
            "date": "2005-05-02T11:10:57.000+0000",
            "id": 14
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14892)\nPatternAnalyzer.java\n\nMinor internal optimizations",
            "date": "2005-05-02T11:11:57.000+0000",
            "id": 15
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=14893)\nPatternAnalyzerTest.java\n\nNow also runs as junit test case (Erik might need to adjust default test file\nnames on moving this to a different package/directory location; same for\nMemoryIndexTest)",
            "date": "2005-05-02T11:13:18.000+0000",
            "id": 16
        },
        {
            "author": "Erik Hatcher",
            "body": "Committed with some minory tweaks.",
            "date": "2005-05-02T18:11:39.000+0000",
            "id": 17
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=15001)\nMemoryIndex.java\n\n- javadoc improvements, cometics, indentation\n- no functional changes",
            "date": "2005-05-12T12:21:00.000+0000",
            "id": 18
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=15097)\nMemoryIndex.java\n\n- javadoc cosmetics\n- added performance improvement: using far less Term interning\n- requires the following addition to Term:   \n\n/** Constructs a term with the given text and the same interned field name as\n   * this term (minimizes interning overhead). */\n  public Term createTerm(String txt) { // WH\n      return new Term(field, txt, false);\n  }\n",
            "date": "2005-05-21T06:40:43.000+0000",
            "id": 19
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=15099)\nPatternAnalyzer.java\n\njavadoc cosmetics",
            "date": "2005-05-21T06:41:25.000+0000",
            "id": 20
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=15124)\nMemoryIndex.java\n\n- small bug fix for rare cases\n- minor performance improvements\n",
            "date": "2005-05-23T11:33:24.000+0000",
            "id": 21
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=15125)\nPatternAnalyzer.java\n\nadded EXTENDED_ENGLISH_STOP_SET",
            "date": "2005-05-23T11:34:06.000+0000",
            "id": 22
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=15157)\nMemoryIndex.java\n\n- minor performance optimizations\n- javadoc cosmetics",
            "date": "2005-05-25T14:17:34.000+0000",
            "id": 23
        },
        {
            "author": "hoschek",
            "body": "Created an attachment (id=15158)\nPatternAnalyzer.java\n\n- minor performance optimizations\n- javadoc cosmetics",
            "date": "2005-05-25T14:18:33.000+0000",
            "id": 24
        },
        {
            "author": "Mark Harwood",
            "body": "These latest versions of MemoryIndex and PatternAnalyzer are now committed in \ncontrib area, and the new createTerm() method it relies on in Term.java has \nbeen added to the core.\n\nMy personal unit tests show it works but the \"official\" Junit test in contrib \narea doesn't seem to run as there seems to be a hard-coded path to test query \nfiles in the wrong place. ",
            "date": "2005-07-01T06:45:23.000+0000",
            "id": 25
        },
        {
            "author": "hoschek",
            "body": "Thanks Mark,\n\nCan you please take the source from the Nux download. http://dsd.lbl.gov/nux\nAs mentioned before, that source contains a small bug fix, some minor performance improvements, plus \ndocumention improvements. I also believe the test file paths are right in that version.",
            "date": "2005-07-01T07:35:28.000+0000",
            "id": 26
        },
        {
            "author": "hoschek",
            "body": "Never mind, Mark. The versions appear to be identical.",
            "date": "2005-07-01T07:40:47.000+0000",
            "id": 27
        },
        {
            "author": "hoschek",
            "body": "Actually, the versions seem to be slightly different. For example search for \"sortedTemplates\" in \nMemoryIndex.java. I've moved this into the internal \"Info\" class. Please use the Nux versions. They are the \nmost up-to-date. Thanks. \n\n[The confusion stems in part from me struggling with subversion on eclipse-3.1 on OSX. subclipse seems \nto be riddled with bugs.]",
            "date": "2005-07-01T08:19:49.000+0000",
            "id": 28
        },
        {
            "author": "Otis Gospodnetic",
            "body": "MemoryIndex and friends live in contrib/ now.",
            "date": "2005-10-28T02:15:58.000+0000",
            "id": 29
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Contribution accepted, closing the issue.",
            "date": "2005-10-28T02:16:27.000+0000",
            "id": 30
        }
    ],
    "component": "core/index",
    "description": "Here is my contribution: a High-performance single-document main memory Apache Lucene fulltext \nsearch index. I'll try to attach the files, hoping for comments on how to proceed with this...",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-381",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Contributing a High-performance single-document main memory Apache Lucene fulltext search index.",
    "systemSpecification": true,
    "version": "1.4"
}