{
    "comments": [
        {
            "author": "Greg Shackles",
            "body": "I ran into this same problem.  Some examples are:\n\nwww.1-800-flowers.com gets split into www.1-800 and flowers.com\n\n1-800-flowers.com gets split into 1-800-flowers and com\n\n\nIs there any chance of this being looked at sometime soon?",
            "date": "2008-12-16T20:11:23.137+0000",
            "id": 0
        },
        {
            "author": "Shai Erera",
            "body": "These two are not so simple to tackle. They are results of several rules.\n\n1-800-flowers.com is split that way because of the NUM rule, and the HOST rule. The HOST rule requires the token to have some alphanumeric characters, followed by one or more (\".\" {ALPHANUM}) strings. Therefore this string is not detected as a HOST.\nIf we were to change the rule to recognize that string as a HOST, then we'd be wrong for strings like \"file.pdf\", which is clearly not a host. So I don't think how we can satisfy everyone.\n\nFor the string www.1-800-flowers.com - the reason it's split is because of the \"-\" not included in the HOST definition.\n\nBut .. this was stated already in other threads w.r.t. StandardTokenizer - it is just a default tokenizer that ships with Lucene. It is not meant to be *THE* tokenizer, and what will make sense to one will not fit the other.\n\nPersonally, I think that if you want to correctly identify hosts (or emails, or any other pattern), you should use a specially written annotator (it will be interesting to see a contribution, if there isn't one yet, that integrates between UIMA and Analyzer), rather than rely on some rule that we can argue about for ages. Or ... simply copy most of StandardTokenizer's grammar and change the HOST. I believe it will generate more promising results than trying to change the HOST definition now, since it depends on other definitions, like {NUM}, which sometimes can override other definitions.",
            "date": "2008-12-16T20:58:17.410+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "In 3.1 there will be a replacement for the obsolete StandardTokenizer (the deprecated old one is now called ClassicTokenizer): LUCENE-2167, LUCENE-2763\n\nStandardTokenizer as of Lucene 3.1 does not handle host names alltogether; instead you can use UAX29URLEmailTokenizer instead (also in standard package).",
            "date": "2011-01-25T19:46:09.361+0000",
            "id": 2
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:07.729+0000",
            "id": 3
        }
    ],
    "component": "modules/analysis",
    "description": "\nStandardTokenizer does not recognize host names with hyphens as a single HOST token. Specifically \"www.m-w.com\" is tokenized as \"www.m\" and \"w.com\", both of \"<HOST>\" type.\n\nStandardTokenizer should instead output a single HOST token for \"www.m-w.com\", since hyphens are a legitimate character in DNS host names.\n\nWe've a local fix to the grammar file which also required us to significantly simplify the NUM type to get the behavior we needed for host names.\n\nhere's a junit test for the desired behavior;\n\n\tpublic void testWithHyphens() throws Exception {\n\t\tfinal String host = \"www.m-w.com\";\n\t\tfinal StandardTokenizer tokenizer = new StandardTokenizer(\n\t\t\t\tnew StringReader(host));\n\t\tfinal Token token = new Token();\n\t\ttokenizer.next(token);\n\t\tassertEquals(\"<HOST>\", token.type());\n\t\tassertEquals(\"www.m-w.com\", token.term());\n\t}\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-1438",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "StandardTokenizer splits host names with hyphens into multiple tokens",
    "systemSpecification": true,
    "version": "2.4"
}