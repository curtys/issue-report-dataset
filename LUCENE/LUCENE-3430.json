{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "patch, my modifications to the others take the same approach as lucene's sim\n\nI did the relevance testing (across all 129 possibilities) with short queries, no problems, still waiting on my computer for long queries... if that comes back ok I'd like to commit.\n",
            "date": "2011-09-11T23:06:13.666+0000",
            "id": 0
        }
    ],
    "component": "",
    "description": "here is why this test sometimes fails (my explanation in the test i wrote):\n\n{noformat}\n  /** make sure all sims work with spanOR(termX, termY) where termY does not exist */\n  public void testCrazySpans() throws Exception {\n    // The problem: \"normal\" lucene queries create scorers, returning null if terms dont exist\n    // This means they never score a term that does not exist.\n    // however with spans, there is only one scorer for the whole hierarchy:\n    // inner queries are not real queries, their boosts are ignored, etc.\n{noformat}\n\nBasically, SpanQueries aren't really queries, you just get one scorer. it calls extractTerms on the whole hierarchy and computes weights (e.g. IDF) on\nthe whole bag of terms, even if they don't exist.\n\nThis is fine, we already have tests that sim's won't bug-out in computeStats() here: however they don't expect to actually score documents based on\nthese terms that don't exist... however this is exactly what happens in Spans because it doesn't use sub-scorers.\n\nLucene's sim avoids this with the (docFreq + 1)\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3430",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "TestParser.testSpanTermXML fails with some sims",
    "systemSpecification": true,
    "version": "4.0-ALPHA"
}