{
    "comments": [
        {
            "author": "Michael Busch",
            "body": "Btw: Please let me know if you prefer other class names. The java.io package also has interfaces with the same names DataInput and DataOutput, maybe that's confusing?",
            "date": "2009-12-07T09:26:14.047+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "This sounds great!  If/as we move to the intblock codecs, I wonder if we could put bulk int[] block reading/writing (like pfordelta) into DataInput/Output.",
            "date": "2009-12-07T09:27:21.106+0000",
            "id": 1
        },
        {
            "author": "Michael Busch",
            "body": "+1!",
            "date": "2009-12-07T09:31:49.045+0000",
            "id": 2
        },
        {
            "author": "Marvin Humphrey",
            "body": "FWIW, this approach is sort of the inverse of where we've gone with Lucy.  \n\nIn Lucy, low-level unbuffered IO operations are abstracted into FileHandle,\nwhich is either a thin wrapper around a POSIX file descriptor (e.g.\nFSFileHandle under unixen), or a simulation thereof (e.g. FSFileHandle under\nWindows, RAMFileHandle).  \n\nThen there are InStream and OutStream, which would be analogous to DataInput\nand DataOutput, in that they have all the Lucy-specific encoding/decoding\nmethods.  However, instead of requiring that subclasses implement the\nlow-level IO operations, InStream \"has a\" FileHandle and OutStream \"has a\"\nFileHandle.\n\nThe advantage of breaking out FileHandle as a separate class is that if e.g.\nyou extend InStream by adding on PFOR encoding, you automatically get the\nbenefit for all IO implementations.  I think that under the\nDataInput/DataOutput model, that extension technique will only be available to\ncore devs of Lucene, no?\n\nMore info: \n\n  * LUCY-58 FileHandle\n  * LUCY-63 InStream and OutStream",
            "date": "2009-12-07T15:54:52.883+0000",
            "id": 3
        },
        {
            "author": "Michael Busch",
            "body": "Thanks for the input, Marvin.\n\nI can see the advantages of what you're proposing. With this patch it'd only be possible to benefit in all IndexInput/IndexOutput implementations from a new encoding/decoding method if you add it to the DataInput/Output class directly, which is only possible by changing the classes in Lucene, not from outside.\n\nThe problem here, as so often, is backwards-compat. This patch here has no problems in that regard, as we just move the methods into new superclasses. If we'd want to implement what Lucy is doing, we'd have to deprecate all encoding/decoding methods in IndexInput/Output and add them to DataInput/Output. Then a DataInput would not be the superclass of IndexInput, but rather *have* an IndexInput. All users who call any of the encoding/decoding methods directly on IndexInput/Output would have to change their code to use the new classes. \n\nSo I can certainly see the benefits, the question now is if they're at the moment important enough to justify dealing with the backwards-compat hassle?",
            "date": "2009-12-07T22:39:03.588+0000",
            "id": 4
        },
        {
            "author": "Marvin Humphrey",
            "body": "I spent a long time today trying to understand why DataInput and \nDataOutput are justified so that I could formulate an intelligent reply, \nbut I had to give up. :\\ Please carry on.",
            "date": "2009-12-09T02:10:01.808+0000",
            "id": 5
        },
        {
            "author": "Michael Busch",
            "body": "The main reason why I'd like to separate DataInput/Output from IndexInput/Output now is LUCENE-2125. Users should be able to implement methods that serialize/deserialize attributes into/from a postinglist. These methods should only be able to call the read/write methods (which this issue moves to DataInput/Output), but not methods like close(), seek() etc.. \n\nThanks for spending time reviewing this and giving feedback from Lucy land, Marvin!\nI think I will go ahead and commit this, and once we see a need to allow users to extend DataInput/Output outside of Lucene we can go ahead and make the additional changes that are mentioned in your in my comments here.\n\nSo I will commit this tomorrow if nobody objects.",
            "date": "2009-12-09T09:47:18.256+0000",
            "id": 6
        },
        {
            "author": "Marvin Humphrey",
            "body": "> These methods should only be able to call the read/write methods (which this\n> issue moves to DataInput/Output), but not methods like close(), seek() etc..\n\nAh, so that's what it is.  \n\nIn that case, let me vote my (non-binding) -1.  I don't believe that the\nenforcement of such a restriction justifies the complexity cost of adding a\nnew class to the public API.\n\nFirst, adding yet another class to the hierarchy steepens the learning curve\nfor users and contributors.  If you aren't in the rarefied echelon of\nexceptional brilliance occupied by people named Michael who work for IBM :),\nthe gradual accumulation of complexity in the Lucene code base matters.  Inch\nby inch, things move out of reach.\n\nSecond, changing things now for what seems to me like a minor reason makes it\nharder to refactor the class hierarchy in the future when other, more\nimportant reasons are inevitably discovered.\n\nFor LUCENE-2125, I recommend two possible options. \n\n  * Do nothing and assume that the sort of advanced user who writes a posting \n    codec won't do something incredibly stupid like call indexInput.close().\n  * Add a note to the docs for writing posting codecs indicating which sort of\n    of IO methods you ought not to call.\n\n> once we see a need to allow users to extend DataInput/Output outside of\n> Lucene we can go ahead and make the additional changes that are mentioned in\n> your in my comments here.\n\nIn Lucy, there are three tiers of IO usage:\n\n    * For low-level IO, use FileHandle.\n    * For most applications, use InStream's encoder/decoder methods.\n    * For performance-critical inner-loop material (e.g. posting decoders, \n      SortCollector), access the raw memory-mapped IO buffer using\n      InStream_Buf()/InStream_Advance_Buf() and use static inline functions \n      such as NumUtil_decode_c32 (which does no bounds checking) from\n      Lucy::Util::NumberUtils.\n\nWhile you can extend InStream to add a codec, that's not generally the best\nway to go about it, because adding a method to InStream requires that all of\nyour users both use your InStream class and use a subclassed Folder which\noverrides the Folder_Open_In() factory method (analogous to \nDirectory.openInput()).  Better is to use the extension point provided by\nInStream_Buf()/InStream_Advance_Buf() and write a utility function which\naccepts an InStream as an argument.\n\nI don't expect and am not advocating that Lucene adopt the same IO hierarchy\nas Lucy, but I wanted to provide an example of other reasons why you might\nchange things.  (What I'd really like to see is for Lucene to come up with\nsomething *better* than the Lucy IO hierarchy.)  \n\nOne of the reasons Lucene has so many backwards compatibility headaches is\nbecause the public APIs are so extensive and thus constitute such an elaborate\nset of backwards compatibility promises.  IMO, DataInput and DataOutput do \nnot offer sufficient benefit to compensate for the increased intricacy they add \nto that backwards compatibility contract.\n",
            "date": "2009-12-09T14:08:24.948+0000",
            "id": 7
        },
        {
            "author": "Michael Busch",
            "body": "I disagree with you here: introducing DataInput/Output makes IMO the API actually easier for the \"normal\" user to understand.\n\nI would think that most users don't implement IndexInput/Output extensions, but simply use the out-of-the-box Directory implementations, which provide IndexInput/Output impls. Also, most users probably don't even call the IndexInput/Output APIs directly. \n\n{quote}\nDo nothing and assume that the sort of advanced user who writes a posting\ncodec won't do something incredibly stupid like call indexInput.close().\n{quote}\n\nWriting a posting code is much more advanced compared to using 2125's features. Ideally, a user who simply wants to store some specific information in the posting list, such as a boost, a part-of-speech identifier, another VInt, etc. should with 2125 only have to implement a new attribute including the serialize()/deserialize() methods. People who want to do that don't need to know anything about Lucene's API layer. They only need to know the APIs that DataInput/Output provide and will not get confused with methods like seek() or close(). For the standard user who only wants to write such an attribute it should not matter how Lucene's IO structure looks like - so even if we make changes that go into Lucy's direction in the future (IndexInput/Output owning a filehandle vs. the need to extend them) the serialize()/deserialize() methods of attribute would still work with DataInput/Output.\n\nI bet that a lot of people who used the payload feature before took a ByteArrayOutputStream together with DataOutputStream (which implements Java's DataOutput) to populate the payload byte array. With 2125 Lucene will provide an API that is similar to use, but more efficient as it remove the byte[] array indirection and overhead.\n\nI'm still +1 for this change. Others?",
            "date": "2009-12-13T01:20:52.036+0000",
            "id": 8
        },
        {
            "author": "Shai Erera",
            "body": "bq. I bet that a lot of people who used the payload feature before took a ByteArrayOutputStream together with DataOutputStream \n\nI actually use ByteBuffer which has similar methods. That's good though if you know the size of the needed byte[] up front. Otherwise, you either code the extension of growing the ByteBuffer, or use DataOutputStream(ByteArrayOutputStream).\n\nMichael, I read through the patch (briefly though), and I was confused by the names DataInput/Ouput. Initially, when I read this issue, I thought you mean that IndexInput/Output should implement Java's DataInput/Output, but now I see you created two new such classes. So first, can we perhaps name them otherwise, like LuceneInput/Output or something similar, to not confuse w/ Java's? Second, why not have them implement Java's DataInput/Output, and add on top of them additional methods, like readVInt(), readVLong() etc.? You can keep the abstracts LuceneInput/Output to provide the common implementation.\n\nBTW, a small optimization that I think can be made in the classes is to introduce an internal ByteBuffer of size 8. In the methods like readInt(), you can read 4 bytes into the buffer, calling readBytes(buf.array(), 0, 4), and then buf.getInt(). That will save 4 calls to readByte(). Same will go for long, and the write variants. Doesn't work though w/ readVInt(), because we need to read 1-byte at-a-time to decode. Maybe if the use of these is usually through BufferedIndexInput/Output this does not matter much, but it will still save 2/4 method calls.",
            "date": "2009-12-13T06:50:04.867+0000",
            "id": 9
        },
        {
            "author": "Marvin Humphrey",
            "body": "> I disagree with you here: introducing DataInput/Output makes IMO the API\n> actually easier for the \"normal\" user to understand.\n> \n> I would think that most users don't implement IndexInput/Output extensions,\n> but simply use the out-of-the-box Directory implementations, which provide\n> IndexInput/Output impls. Also, most users probably don't even call the\n> IndexInput/Output APIs directly. \n\nI agree with everything you say in the second paragraph, but I don't see how\nany of that supports the assertion you make in the first paragraph.\n\nLucene's file system has a directory class, named \"Directory\", and a pair of\nclasses which representing files, named \"IndexInput\" and \"IndexOutput\".\nDirectories and files.  Easy to understand.\n\nAll common IO systems have entities which represent data streaming to/from a\nfile.  They might be called \"file handles\", \"file descriptors\", \"readers\" and \n\"writers\", \"streams\", or whatever, but they're all basically the same thing.\n\nWhat this patch does is fragment the pair of classes that representing file\nIO... why?\n\nWhat does a \"normal\" user do with a file?\n\n   Step 1: Open the file.\n   Step 2: Write data to the file.\n   Step 3: Close the file.\n\nThen, later...\n\n   Step 1: Open the file.\n   Step 2: Read data from the file.\n   Step 3: Close the file.\n\nYou're saying that Lucene's file abstraction is easier to understand if you\nbreak that up?\n\nI grokked your first rationale -- that you don't want people to be able to\ncall close() on an IndexInput that they're essentially borrowing for a bit.\nOK, I think it's overkill to create an entire class to thwart something nobody\nwas going to do anyway, but at least I understand why you might want to do\nthat.\n\nBut the idea that this strange fragmentation of the IO hierarchy makes things\n*easier* -- I don't get it at all.  And I certainly don't see how it's such an \nimprovement over what exists now that it justifies a change to the public API.",
            "date": "2009-12-13T14:19:02.650+0000",
            "id": 10
        },
        {
            "author": "Mark Miller",
            "body": "> I disagree with you here: introducing DataInput/Output makes IMO the API\n> actually easier for the \"normal\" user to understand.\n\n>> I agree with everything you say in the second paragraph, but I don't see how\n>> any of that supports the assertion you make in the first paragraph.\n\nPresumably, because the \"normal\" user won't touch/see the IndexInput/Output classes, but more likely may deal with DataInput/Output - and those classes\nbeing limited to what actually makes sense to use for them (only exposing methods they should use) - thats easier for them.\n\nI was leaning towards Marvin's arguments - it really seems that documentation should be enough to steer users against doing something stupid - there is no\ndoubt that writing attributes into the posting list is a fairly advanced operation (though more \"normal\" than using IndexInput/Output). On the other hand though, \nI'm not really sold on the downsides longer term either. The complexity argument is a bit over blown. If you understand anything down to the level of these classes, \nthis is a ridiculously simple change. The backcompat argument is not very persuasive either - not only does it look like a slim chance of any future issues - at this \nlevel we are fairly loose about back compat when something comes up. I think advanced users have already realized, the more you dig into Lucene's guts, the \nmore likely you won't be able to count on jar drop in. Thats just the way things have gone. I don't see a looming concrete issue myself anyway. And if there is a\nhidden one, I don't think anyone is going to get in a ruffle about it.\n\nSo net/net, I'm +1. Seems worth it to me to be able to give a user 2125 the correct API.\n\nI could go either way on the name change. Not a fan of LuceneInput/Output though.",
            "date": "2009-12-13T15:18:35.921+0000",
            "id": 11
        },
        {
            "author": "Michael Busch",
            "body": "{quote}\nWhat does a \"normal\" user do with a file?\n\n   Step 1: Open the file.\n   Step 2: Write data to the file.\n   Step 3: Close the file.\n\nThen, later...\n\n   Step 1: Open the file.\n   Step 2: Read data from the file.\n   Step 3: Close the file.\n\nYou're saying that Lucene's file abstraction is easier to understand if you\nbreak that up?\n{quote}\n\nNo, I'm saying \"normal\" users do not work directly with files, so they won't do any of your steps above. They don't need to know those I/O related classes (except Directory).\n\nDataInput/Output is about encoding/decoding of data, which is all a user of 2125 needs to worry about. The user doesn't have to know that the attribute is first serialized into byte slices in TermsHashPerField and then written into the file(s) the actual codec defines.  \n\n{quote}\nBut the idea that this strange fragmentation of the IO hierarchy makes things\neasier - I don't get it at all. And I certainly don't see how it's such an\nimprovement over what exists now that it justifies a change to the public API.\n{quote}\n\nIt makes it easier for a 2125 user. It does not make it harder for someone \"advanced\" who's dealing with IndexInput/Output already.\n\nIt makes it also cleaner - look e.g. at ByteSliceReader/Writer: those classes just currently throw RuntimeExceptions in the methods that this patch leaves in IndexInput/Output. Why? Because they're not dealing with file I/O, but with data (de)serialization.",
            "date": "2009-12-13T21:02:09.263+0000",
            "id": 12
        },
        {
            "author": "Michael Busch",
            "body": "{quote}\nSo first, can we perhaps name them otherwise, like LuceneInput/Output or something similar, to not confuse w/ Java's?\n{quote}\n\nHmm, I was a bit concerned about confusion first too. But I'm, like Mark, not really liking LuceneInput/Output. I'd personally be ok with keeping DataInput/Output. But maybe we can come up with something better? Man, naming is always so hard... :)\n\n{quote}\nSecond, why not have them implement Java's DataInput/Output, and add on top of them additional methods, like readVInt(), readVLong() etc.?\n{quote}\n\nI considered that, but Java's interfaces dictate what string encoding to use:\n(From java.io.DataInput's javadocs)\n{noformat}\nImplementations of the DataInput and DataOutput interfaces represent Unicode strings in a format that is a slight modification of UTF-8.\n{noformat}\n\nE.g. DataInput defines readChar(), which we'd have to implement. But in IndexInput we deprecated readChars(), because we don't want to use modified UTF-8 anymore.",
            "date": "2009-12-13T21:19:21.159+0000",
            "id": 13
        },
        {
            "author": "Michael Busch",
            "body": "There has been silence here, so I hope everyone is ok with this change now?\n\nI'll commit this in a day or two if nobody objects!",
            "date": "2010-01-03T10:42:32.973+0000",
            "id": 14
        },
        {
            "author": "Michael Busch",
            "body": "Updated patch to trunk.\n\nI'll have to make a change to the backwards-tests too, because moving the copyBytes() method from IndexOutput to DataOutput and changing its parameter from IndexInput to DataInput breaks drop-in compatibility. \n",
            "date": "2010-02-24T19:49:04.372+0000",
            "id": 15
        },
        {
            "author": "Michael McCandless",
            "body": "Michael will this land on flex or on trunk?  Is it ready?  I'm trying to wrapup flex :)",
            "date": "2010-03-30T10:52:30.097+0000",
            "id": 16
        },
        {
            "author": "Michael Busch",
            "body": "I'll try to commit tonight to flex, but it'll probably be tomorrow (I think I have to update the patch, cause there were some changes to IndexInput/Output).  If you want to merge flex into trunk sooner I can also just commit this afterwards to trunk.",
            "date": "2010-03-30T16:11:01.703+0000",
            "id": 17
        },
        {
            "author": "Michael Busch",
            "body": "Committed revision 929340.",
            "date": "2010-03-30T23:43:29.127+0000",
            "id": 18
        }
    ],
    "component": "",
    "description": "I'd like to introduce the two new classes DataInput and DataOutput\nthat contain all methods from IndexInput and IndexOutput that actually\ndecode or encode data, such as readByte()/writeByte(),\nreadVInt()/writeVInt().\n\nMethods like getFilePointer(), seek(), close(), etc., which are not\nrelated to data encoding, but to files as input/output source stay in\nIndexInput/IndexOutput.\n\nThis patch also changes ByteSliceReader/ByteSliceWriter to extend\nDataInput/DataOutput. Previously ByteSliceReader implemented the\nmethods that stay in IndexInput by throwing RuntimeExceptions.\n\nSee also LUCENE-2125.\n\nAll tests pass.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2126",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Split up IndexInput and IndexOutput into DataInput and DataOutput",
    "systemSpecification": true,
    "version": "4.0-ALPHA"
}