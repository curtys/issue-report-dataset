{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "here is a prototype patch, needs more testing and benchmarking.",
            "date": "2010-09-27T04:47:53.273+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "here's another iteration, now that we have saved state, turns a run() into a single step()",
            "date": "2010-09-27T06:06:52.352+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "ok, heres a committable patch.\n\ni put a safety in here to address my own concerns. so the optimization doesnt apply to infinite dfas \n(but these typically dont backtrack anyway)\n\ni found a little perf problem with Standard's terms dict cache, we should avoid clone() on these deep hierarchies\nif theres a chance it will get called a lot. since the class in question is private static, i changed how clone() was impled.\n\nand i turned off terms dict cache for automaton, it doesnt seem to help in any query i test, and for some\nworst-case ones it slows things down (even with the cloning fix)... and queries like this \"trash\" the cache anyway.",
            "date": "2010-09-27T09:25:17.166+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "Committed revision 1001781.\n\nI left out the terms dict cache clone() thing, its something we can revisit if we ever need to... \nnot sure its a big deal especially if we can use it smarter (such as LUCENE-2674)\n",
            "date": "2010-09-27T17:17:47.751+0000",
            "id": 3
        }
    ],
    "component": "core/search",
    "description": "While testing, i found there are some queries (e.g. wildcard ?????????) that do quite a lot of backtracking.\n\nnextString doesn't handle this particularly well, when it walks the DFA, if it hits a dead-end and needs to backtrack, it increments the bytes, and starts over completely.\n\nalternatively it could save the path information in an int[], and backtrack() could return a position to restart from, instead of just a boolean.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2672",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "speed up automaton seeking in nextString",
    "systemSpecification": true,
    "version": ""
}