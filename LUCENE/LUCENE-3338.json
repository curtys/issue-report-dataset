{
    "comments": [
        {
            "author": "Vinicius Barros",
            "body": "The patch available includes week-8.patch attached to LUCENE-1768.\n\nOpen ranges now work on flexible standard query parser.\n\nMixed include and exclude bounds are now supported on flexible standard query parser.\n\nAdded junits to cover both problems.\n\nAdded the same junit tests to classic query parser.\n\nI found something while creating junits for the mixed include and exclude bounds. [1 TO } will always return nothing. It seems the exclusive operator there will take precedence over the inclusive operator. I double checked, and the NumericRangeQuery is correct, so I suppose this is the expected behavour of NumericRangeQuery.",
            "date": "2011-07-25T01:00:42.220+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. I found something while creating junits for the mixed include and exclude bounds. [1 TO } will always return nothing. It seems the exclusive operator there will take precedence over the inclusive operator. I double checked, and the NumericRangeQuery is correct, so I suppose this is the expected behavour of NumericRangeQuery.\n\nThere is no such limitation in NRQ, can you show the issue with a NRQ-specific test case? Maybe its a problem of the test setup?\n\nI will for now commit the javadoc improvements and post a delta patch.",
            "date": "2011-07-25T12:41:42.740+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Here the merged patch.",
            "date": "2011-07-25T13:05:50.109+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi Vinicius, can you check, that the merged patch is fine?\n\nI have one question about the regened files: surround was not touched, so maybe it can be reverted? Which version of javacc did you use, because the files look different and seem to produce more warnings.\n\nMaybe we should check which versions are available and used and document this somewhere.",
            "date": "2011-07-25T13:21:10.417+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi Vinicius,\n\nI attached the same patch, with changes in surround QP reverted.",
            "date": "2011-07-25T13:30:37.307+0000",
            "id": 4
        },
        {
            "author": "Vinicius Barros",
            "body": "Hi Uwe,\n\nI used javacc-4.1. When I ran ant javacc by the first time and it didn't find it, it told me I should use javacc-4.1, so I installed it.",
            "date": "2011-07-27T04:10:11.475+0000",
            "id": 5
        },
        {
            "author": "Vinicius Barros",
            "body": "hi Uwe,\n\nI changed the patch to make the junit fail and you see the problem with [x TO x} matching nothing.",
            "date": "2011-07-27T04:11:17.454+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "OK, now I understand:\n\nbq. I changed the patch to make the junit fail and you see the problem with [x TO x} matching nothing.\n\nIt seems that somehow the formatting of your original comment in JIRA was broken, I misunderstood and thought you mean half open ranges like: [x TO *] behaving different like [x TO *}, which is not the case (i am glad).\n\nThis of course returns no results, because the upper bound explicitely excludes the lower bound, so its in fact a query where upper<lower bound, so returns nothing, this is not bug or limitation, its in my opinion correct:\n\nassertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, false, true, 1);\n\nI would change that line to assert 0 results like in the next test with (true, false).",
            "date": "2011-07-27T09:21:12.085+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. I used javacc-4.1. When I ran ant javacc by the first time and it didn't find it, it told me I should use javacc-4.1, so I installed it.\n\nThats fine, I just was confused about some changes, but this was caused by regenerating surround QP which i reverted.\n\nWe may update once to a later version of javacc, but it still is not full Java5 generics compatible, so the warnings are expected, so for full compatibility we shoudl stay with 4.1 for now. I am thinking about a way to disable those for generated classes (using the regexes to add SuppressWarnings({\"unchecked\",\"rawtypes\"}) in the build.xml).",
            "date": "2011-07-27T09:24:22.020+0000",
            "id": 8
        },
        {
            "author": "Adriano Crestani",
            "body": "Hi, I just reviewed the patch and it looks good.\n\nHowever, I have one question. It seems (haven't tested yet) that the user can enter [* TO *], should we support it? If we support it, it basically means match all terms for that field. Isn't there any other query we could use to match all fields like (field:*)?\n\nI personally vote for disallowing this kind of range query.\n\nThoughts?",
            "date": "2011-07-29T17:56:23.965+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Solr uses exactly this range query to achieve this effect. And its different than MatchAllDocsQuery!\n\nFor numeric queries its no problem at all, for TermRange of course it is slow :)",
            "date": "2011-07-29T18:00:21.555+0000",
            "id": 10
        },
        {
            "author": "Adriano Crestani",
            "body": "Yes, it's different than MatchAllDocsQuery.\n\nDoes WildcardQuery(\"field\", \"*\",...) work the same way as TermRangeQuery(\"field\", null, null,...)? I mean, do they have the same performance?\n\nI just tested classic qp and it does support [* TO *], so I think it's fine if we support the same on standard query parser. Just wondering weather we could somehow optimize it.",
            "date": "2011-07-30T02:50:38.831+0000",
            "id": 11
        },
        {
            "author": "Mike Sokolov",
            "body": "I wondered that too, so I checked.  Both AutomatonQuery and TermRangeQuery special-case these to generate a simple TermsEnum, so the same. It makes sense to optimize:  this query could easily be generated by some app.\n\n ",
            "date": "2011-07-30T04:53:14.982+0000",
            "id": 12
        },
        {
            "author": "Adriano Crestani",
            "body": "Thanks for checking that Mike. I took a look at the code as well, makes more sense now. So no more extra optimization seems to be required then.",
            "date": "2011-07-30T06:15:02.353+0000",
            "id": 13
        },
        {
            "author": "Adriano Crestani",
            "body": "I merged this patch with LUCENE-3343, since this last one had a bug that the first one fixes.\n\n- LUCENE-3343 only was making TestQPHelper fail, since it was passing null to ParametricQueryNode. Instead, it's now passing \"*\", which is later being treated by OpenRangeQueryNodeProcessor (from LUCENE-3338).\n\n- I added extra tests to TestNumericQueryParser and TestQPHelper to make sure we cover all possible cases.\n\nI haven't changed changes.txt yet, since we are not sure whether these changes will be pushed to 3.x, it's my next task, to investigate that.\n\nI will wait one or two days before committing this patch.\n\nUwe, raise your hand if you want me to hold the commit and sorry for taking over your JIRA :)",
            "date": "2011-07-30T07:09:33.522+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. I wondered that too, so I checked. Both AutomatonQuery and TermRangeQuery special-case these to generate a simple TermsEnum, so the same. It makes sense to optimize: this query could easily be generated by some app.\n\nAnd for NumericRangeQuery this is even faster, as it will generate a query that only enumerates the lowest precision terms (all of them). For e.g. precisionStep 4 this would be 16 terms only :-) So no such optimization is needed for NRQ.\n\nbq. Uwe, raise your hand if you want me to hold the commit and sorry for taking over your JIRA \n\nIt's all fine to combine both commits! I had not looked in 3343 because I thought it's for the good old default QP... We should add changes at the end!",
            "date": "2011-07-30T08:10:11.609+0000",
            "id": 15
        },
        {
            "author": "Adriano Crestani",
            "body": "The last patch was just committed to the repository (rev 1152892)",
            "date": "2011-08-01T19:00:19.924+0000",
            "id": 16
        }
    ],
    "component": "modules/queryparser",
    "description": "Flexible query parser does not support open ranges and range queries with mixed inclusive and exclusive ranges.\n\nThese two problems were found while developing LUCENE-1768.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3338",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Flexible query parser does not support open ranges and range queries with mixed inclusive and exclusive ranges",
    "systemSpecification": true,
    "version": "3.3"
}