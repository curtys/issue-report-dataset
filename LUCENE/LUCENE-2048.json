{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "This is pretty close i think, but needs some rounding out: e.g. improve checkIndex to check freqs/stats when positions are omitted, beast the tests / search the code to see if there is any more \"hasProx abuse\" where code assumes hasProx means no freqs, etc.\n",
            "date": "2011-07-10T07:21:16.048+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "by the way, i'll look at tests tomorrow (I know the thing has bare minimum tests), and as for the enum, i don't care at all what the naming is, i just needed something.\n\ni simply refuse to use 2 booleans here with checks/assertions throughout the code ensuring the are in sync, i think thats really the wrong way to go.",
            "date": "2011-07-10T07:51:58.106+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Awesome to finally have progress here!\n\nI agree we should cutover to an enum instead of 2 coupled booleans... I think IndexOptions is a good name.",
            "date": "2011-07-10T20:53:16.395+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "i created a throwaway branch: branches/omitp, to hopefully sucker mike into helping me with some random fails (always pulsing is involved!)\n\nin general the pulsing cutover was tricky for me.\n",
            "date": "2011-07-11T18:11:19.988+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "ok here's a updated patch. I think its ready to commit!",
            "date": "2011-07-11T22:04:54.693+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Looks great!  +1 to commit.",
            "date": "2011-07-11T23:52:59.809+0000",
            "id": 5
        }
    ],
    "component": "core/index",
    "description": "it would be useful to have an option to discard positional information but still keep the term frequency - currently setOmitTermFreqAndPositions discards both. Even though position-dependent queries wouldn't work in such case, still any other queries would work fine and we would get the right scoring.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2048",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Omit positions but keep termFreq",
    "systemSpecification": true,
    "version": "3.1"
}