{
    "comments": [
        {
            "author": "robert engels",
            "body": "Can you post the full stack trace?",
            "date": "2007-10-26T17:10:47.354+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Are you using one of the IndexWriter.addIndexes* methods to combine indices in the end?",
            "date": "2007-10-26T18:06:07.023+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Also, are you calling setMaxMergeDocs?",
            "date": "2007-10-26T18:12:56.746+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Excellent, thanks!  I think I see the issue.  We default the thread priority of the threads spawned by ConcurrentMergeScheduler to 1+priority of calling thread.  But, we fail to bounds check that this is <= MAX_PRIORITY.\n\nAre your calling threads being set to MAX_PRIORITY?",
            "date": "2007-10-26T18:54:00.024+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Attached unit test that shows the issue & patch that fixes it.  I also\ncatch & ignore SecurityException coming out of mergeThread.setPriority\nsince it's fine if we fail to set the thread's priority.\n",
            "date": "2007-10-26T20:15:06.180+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "I just committed the above patch.  I think likely that was the issue here, but I'll leave this issue open for a while to hopefully hear confirmation back from the original poster...",
            "date": "2007-10-29T09:02:19.608+0000",
            "id": 5
        },
        {
            "author": "R Giles",
            "body": "No,  I am not executing any IndexWriter.addIndex method.  Just a\nstraight \nIndexWriter.optimize().\n\n\n",
            "date": "2007-11-03T05:42:41.780+0000",
            "id": 6
        },
        {
            "author": "R Giles",
            "body": "Done.   Issue has been updated with the following info:\n\njava.lang.IllegalArgumentException\n        at java.lang.Thread.setPriority(Thread.java(Compiled Code))\n        at\norg.apache.lucene.index.ConcurrentMergeScheduler.merge(ConcurrentMerg\neScheduler.java(Compiled Code))\n        at\norg.apache.lucene.index.IndexWriter.maybeMerge(IndexWriter.java:1750)\n        at\norg.apache.lucene.index.IndexWriter.optimize(IndexWriter.java:1686)\n        at\norg.apache.lucene.index.IndexWriter.optimize(IndexWriter.java:1652)\n        at LuceneSearchEngine.optimizeIndex(LuceneSearchEngine.java:643)\n        at LuceneSearchEngine.optimizeIndex(LuceneSearchEngine.java:636)\n        at SEIndexThread.closeIndex(SEIndexThread.java:674)\n        at SEIndexThread.processSearchObject(SEIndexThread.java:487)\n        at SEIndexThread.prepareIndex(SEIndexThread.java:391)\n        at SEIndexThread.run(SEIndexThread.java:41)\n\n\n\n\n\n",
            "date": "2007-11-03T05:42:42.002+0000",
            "id": 7
        },
        {
            "author": "R Giles",
            "body": "\n\nNo, I am not calling setMaxMergeDocs.    \n\n\n\n\n\n",
            "date": "2007-11-03T05:42:42.403+0000",
            "id": 8
        },
        {
            "author": "R Giles",
            "body": "Yes, my calling thread is set to MAX_PRIORITY.\n\n\n\n",
            "date": "2007-11-03T05:42:42.620+0000",
            "id": 9
        },
        {
            "author": "R Giles",
            "body": "I changed the priority of my thread from MAX_PRIORITY down to\nNORM_PRIORITY\nand my IndexWriter.optimize() step completes successfully.  So your\npatch\nis probably correct.  When will your patch be included in a nightly\nbuild?\n\n\n",
            "date": "2007-11-03T05:42:43.699+0000",
            "id": 10
        },
        {
            "author": "R Giles",
            "body": "Key: LUCENE-1036\n\nMichael,\n\nI have not seen any response to my question.\n\nI changed the priority of my thread from MAX_PRIORITY down to\nNORM_PRIORITY\nand my IndexWriter.optimize() step completes successfully.  So your\npatch\nis probably correct.  When will your patch be included in a nightly\nbuild?\n\n\n\n\n\n\n\n",
            "date": "2007-11-07T20:55:56.488+0000",
            "id": 11
        },
        {
            "author": "Michael McCandless",
            "body": "Woops, sorry, I somehow missed your posts here.\n\nOK that is good to hear that the MAX_PRIORITY was in fact the issue.\n\nI committed the fix on 10/29 so you should be able to use any nightly build since then.",
            "date": "2007-11-07T21:23:31.390+0000",
            "id": 12
        }
    ],
    "component": "core/index",
    "description": "Since the upcoming 2.3 version of Lucene has support for the setRAMBufferSizeMB() method in Index Writer,  I thought I would test its performance.   So, using my application that was built upon (and worked with) Lucene 2.2,  I downloaded the nightly build 2007-10-26_03-16-46 and rebuilt my application with new code setting setRAMBufferSizeMB() from a properties file.   My test data resides in a database table of 30 columns holding 1.25 million records.   The good news is that performance is superior to Lucene 2.2.  The indexing completes in roughly 1/3 the time.   The bad news is the Index Writer.optimize() step now throws an java.lang.IllegalArgumentException.\nI also run tests against various other tables.  Indexing smaller amounts of data did not throw the exception.  Indexing largers amounts of data did throw the exception.  Note, I also tested nightly builds dating back to 2007-10-05.\n\n...\nINFO:  SEIndexThread.commitCheck...\nINFO:    ----Commit point reached:  1200000\nINFO:  SEIndexThread.commitCheck...\nINFO:    ----Commit point reached:  1225000\nINFO:  SEIndexThread.commitCheck...\nINFO:    ----Commit point reached:  1250000\nINFO:  SEIndexThread.closeIndex()...\nINFO:    ----commit point reached:  1250659\nINFO:    ----optimize index\nINFO: SEIndexThread():  java.lang.IllegalArgumentException\n\njava.lang.IllegalArgumentException\n        at java.lang.Thread.setPriority(Thread.java(Compiled Code))\n        at org.apache.lucene.index.ConcurrentMergeScheduler.merge(ConcurrentMerg\neScheduler.java(Compiled Code))\n        at org.apache.lucene.index.IndexWriter.maybeMerge(IndexWriter.java:1750)\n        at org.apache.lucene.index.IndexWriter.optimize(IndexWriter.java:1686)\n        at org.apache.lucene.index.IndexWriter.optimize(IndexWriter.java:1652)\n        at LuceneSearchEngine.optimizeIndex(LuceneSearchEngine.java:643)\n        at LuceneSearchEngine.optimizeIndex(LuceneSearchEngine.java:636)\n        at SEIndexThread.closeIndex(SEIndexThread.java:674)\n        at SEIndexThread.processSearchObject(SEIndexThread.java:487)\n        at SEIndexThread.prepareIndex(SEIndexThread.java:391)\n        at SEIndexThread.run(SEIndexThread.java:41)\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1036",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Unreleased 2.3 version of IndexWriter.optimize()  consistly throws java.lang.IllegalArgumentException out-of-the-box",
    "systemSpecification": true,
    "version": "2.3"
}