{
    "comments": [
        {
            "author": "Dan Armbrust",
            "body": "Also note that, by changing the parameters in this way, no breakage or behavior\nchange occurs for end users.  \n\nWhen the 3rd parameter flag is set to true - it will erase the existing index,\njust like it does now.\n\nIf it is set to false, it will not erase the existing index - it will append,\njust like it does now.\n\nThe only change (and I consider it an improvment, and unlikely to break anyones\ncode) is that if it is set to false, and no index exists yet, then it will\ncreate a new empty index at the specified location.",
            "date": "2005-06-26T00:46:32.000+0000",
            "id": 0
        },
        {
            "author": "Dan Armbrust",
            "body": "Could this be addresses or WONT FIXED before the 1.9 release?\n",
            "date": "2005-09-27T04:48:54.000+0000",
            "id": 1
        },
        {
            "author": "Hoss Man",
            "body": "\n>The only change (and I consider it an improvment, and unlikely to break anyones\n>code) is that if it is set to false, and no index exists yet, then it will\n>create a new empty index at the specified location.\n\n...that could be very bad for tools/apps that wantto update an existing index after reading the directory path from user input or configs when the user makes a typo.  In the past \"new IndexWriter(d,a,false) would throw an Exception indicating a problem, with the change you describe it would happily make a new index.\n\n\nI'd be happy to see a more explict API with more options about what you want IndexWRiter to do if/when the directory does'doesn't exist ... but it should be 100% backwards compatible.  deprecating this constructor but leaving it alone and adding a new one with more options seems like a much safer approach.",
            "date": "2006-02-18T04:10:56.000+0000",
            "id": 2
        },
        {
            "author": "Doug Cutting",
            "body": "I agree with Hoss that we need to be very careful about compatibility.\n\nWhy not add a new constructor, IndexWriter(Directory, Analyzer) which, if no such index exists, creates one?  Or we could deprecate the existing constructors and add new ones whose third parameter is a type-safe enumeration of IfExists:OVERWRITE, IfExists:APPEND or somesuch.\n",
            "date": "2006-02-22T02:09:34.000+0000",
            "id": 3
        },
        {
            "author": "Dan Armbrust",
            "body": "I'm perfectly happy with either new constructor approach - as long as there is a better constructor than what is currently available for my (and I suspect many other folks) \"normal\" use case of these constructors.\n\nIt doesn't really matter to me if the current one stays or gets deprecated.  If it was going to be deprecated, it seems like 1.9 would be a good place to do it.\n\n",
            "date": "2006-02-22T03:31:59.000+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "I like Doug's solution \"add a new constructor, IndexWriter(Directory, Analyzer) which, if no such index exists, creates one\" -- I think this makses sense.  I will commit this.",
            "date": "2006-12-18T22:06:24.000+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "OK I've added the new constructors for IndexWriter.  Thank you Dan and sorry for the long delay!",
            "date": "2006-12-19T11:37:39.000+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Closing all issues that were resolved for 2.1.",
            "date": "2007-02-27T18:10:32.364+0000",
            "id": 7
        }
    ],
    "component": "core/index",
    "description": "Wouldn't it make more sense if the constructor for the IndexWriter always\ncreated an index if it doesn't exist - and the boolean parameter should be\n\"clear\" (instead of \"create\")\n\nSo instead of this (from javadoc):\n\nIndexWriter\n\npublic IndexWriter(Directory d,\n                   Analyzer a,\n                   boolean create)\n            throws IOException\n\n    Constructs an IndexWriter for the index in d. Text will be analyzed with a.\nIf create is true, then a new, empty index will be created in d, replacing the\nindex already there, if any.\n\nParameters:\n    d - the index directory\n    a - the analyzer to use\n    create - true to create the index or overwrite the existing one; false to\nappend to the existing index \nThrows:\n    IOException - if the directory cannot be read/written to, or if it does not\nexist, and create is false\n\n\nWe would have this:\n\nIndexWriter\n\npublic IndexWriter(Directory d,\n                   Analyzer a,\n                   boolean clear)\n            throws IOException\n\n    Constructs an IndexWriter for the index in d. Text will be analyzed with a.\nIf clear is true, and a index exists at location d, then it will be erased, and\na new, empty index will be created in d.\n\nParameters:\n    d - the index directory\n    a - the analyzer to use\n    clear - true to overwrite the existing one; false to append to the existing\nindex \nThrows:\n    IOException - if the directory cannot be read/written to, or if it does not\nexist.\n\n\n\nIts current behavior is kind of annoying, because I have an app that should\nnever clear an existing index, it should always append.  So I want create set to\nfalse.  But when I am starting a brand new index, then I have to change the\ncreate flag to keep it from throwing an exception...  I guess for now I will\nhave to write code to check if a index actually has content yet, and if it\ndoesn't, change the flag on the fly.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-301",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Index Writer constructor flags unclear - and annoying in certain cases",
    "systemSpecification": true,
    "version": "1.4"
}