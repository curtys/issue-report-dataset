{
    "comments": [
        {
            "author": "David Mark Nemeskey",
            "body": "EasyStats object added.",
            "date": "2011-06-20T13:42:01.223+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "a few comments (it generally looks close to me):\n* maybe we should use 'numberOfDocuments' instead of 'docNo' and same with 'numberOfFieldTokens'? this might make the naming more clear\n* i'm worried about 'uniqueTermCount', do you know of which implementations require this? this number is not accurate if the index has more than one segment.\n",
            "date": "2011-06-20T15:52:20.550+0000",
            "id": 1
        },
        {
            "author": "David Mark Nemeskey",
            "body": " * I was wondering about that too -- actually docNo is a mistake, it should have been noDocs or noOfDocs anyway, but I guess I'll just go with numberOfDocuments.\n * I'll put a nocommit there for the time being, and if no sims use it, I'll just remove it from the Stats. Terrier has it, though, so I guess there should be at least one method that depends on it.",
            "date": "2011-06-20T16:01:26.824+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "bq. I'll put a nocommit there for the time being, and if no sims use it, I'll just remove it from the Stats. Terrier has it, though, so I guess there should be at least one method that depends on it.\n\nI've never seen one that did... I don't imagine us ever implementing this efficiently given that we support incremental indexing.\n",
            "date": "2011-06-20T16:07:18.817+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "oh two more nitpicky comments: \n* can you update the patch to use two-spaces instead of tabs? if you use eclipse, you can download this and configure this as your default codestyle: http://people.apache.org/~rmuir/Eclipse-Lucene-Codestyle.xml\n* can you also remove the @author? For legal reasons (i think actually for your protection!) we omit these from new files.\n* it might be a good idea to use the tag @lucene.experimental also for new classes: this is a template that 'ant-javadocs' replaces with \"WARNING: This API is experimental and might change in incompatible ways in the next release.\" to tell users that its very new and not to expect precise backwards compatibility.\n",
            "date": "2011-06-20T16:12:22.588+0000",
            "id": 4
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Oh, sorry, how lame of me :( Actually I am working now on a different machine than the one I usually do, so that's why I made those mistakes. Anyhow, I have fixed them.",
            "date": "2011-06-20T16:29:06.885+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "one last thing, can we do 'numberOfFieldTokens' instead of noFieldTokens? \n\nthen I think we can commit this as a step, should make things a lot easier for experimentation, if you are new to lucene it will make life much easier.\n",
            "date": "2011-06-20T16:37:41.179+0000",
            "id": 6
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Done.",
            "date": "2011-06-21T11:48:17.590+0000",
            "id": 7
        },
        {
            "author": "David Mark Nemeskey",
            "body": "EasySimilarity added. Lots of questions and nocommit in the code.",
            "date": "2011-06-22T15:27:52.931+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "Just took a look, a few things that might help:\n\n* yes the maxdoc does not reflect deletions, but neither does things like totalTermFreq or docFreq either... so its best to not worry about deletions in the scoring and to be consistent and use the stats (e.g. maxDoc, not numDocs) that do not take deletions into account.\n\n* for the computeStats(TermContext... termContexts) its wierd to sum the DF across the different terms in the case? But i don't honestly have any suggestions here... maybe in this case we should make a EasyPhraseStats that computes the EasyStats for each term, so its not hiding anything or limiting anyone? and you could then do an instanceof check and have a different method like scorePhrase() that it forwards to in case its an EasyPhraseStats? In general i'm not sure how other ranking systems tend to handle this case, the phrase estimation for IDF in lucene's formula is done by summing the IDFs\n",
            "date": "2011-06-22T16:16:37.207+0000",
            "id": 9
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Implementation of the DFR framework added. Lots of nocommits, though. I things to think about:\n * lots of (float) conversions. Maybe the inner API (BasicModel, etc.) could use doubles? According to my experience, double is faster anyway, at least on 64bit architectures\n * I am not overly happy about the naming scheme, i.e. BasicModelBE, etc. Maybe we should do it the same way as in Terrier, with a basicmodel package and class names like BE?\n * A regular SimilarityProvider implementation won't play well with DFRSimilarity, in case the user wants to use several different setups. Actually, this is a problem for all similarities that have parameters (e.g. BM25 with b and k).\n\nAlso, I think we need that NormConverter we talked earlier on irc, so that the Similarities can run on any index.",
            "date": "2011-06-25T17:53:51.500+0000",
            "id": 10
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Made the signature of EasySimilarity.score() a bit saner.",
            "date": "2011-06-26T13:00:00.700+0000",
            "id": 11
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Explanation-handling added to EasySimilarity and DFRSimilarity.",
            "date": "2011-06-27T08:09:09.830+0000",
            "id": 12
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Information-based model framework due to Clinchant and Gaussier added.",
            "date": "2011-06-27T15:09:05.023+0000",
            "id": 13
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Fixed a few things in MockBM25Similarity.",
            "date": "2011-07-04T15:58:10.149+0000",
            "id": 14
        },
        {
            "author": "David Mark Nemeskey",
            "body": " * log2() moved from DFRSimilarity to EasySimilarity,\n * changed DFRSimilarity so that it constructor does not use reflection.",
            "date": "2011-07-05T15:29:23.480+0000",
            "id": 15
        },
        {
            "author": "Robert Muir",
            "body": "Hi David: I had some ideas on stats to simplify some of these sims:\n# I think we can use an easier way to compute average document length: sumTotalTermFreq() / maxDoc(). This way the average is 'exact' and not skewed by index-time-boosts, smallfloat quantization, or anything like that.\n# To support pivoted unique normalization like lnu.ltc, I think we can solve this in a similar way: add sumDocFreq(), which is just a single long, and divide this by maxDoc. this gives us avg # of unique terms. I think terrier might have a similar stat (#postings or #pointers or something)?\n\nso i think this could make for nice simplifications: especially for switching norms completely over to docvalues: we should be able to do #1 immediately right now, change the way we compute avgdoclen for e.g. BM25 and DFR.\n\nthen in a separate issue i could revert this norm summation stuff to make the docvalues integration simpler, and open a new issue for sumDocFreq()\n",
            "date": "2011-07-06T16:46:38.075+0000",
            "id": 16
        },
        {
            "author": "David Mark Nemeskey",
            "body": " * Fixed #1\n * Added a totalBoost to EasySimilarity, and a getter method -- noone uses it yet\n * Added basic implementations for the Jelinek-Mercer and the Dirichlet LM methods.\n\nAs for the last one: the implementation is very basic now, I want to factor a few things out (e.g. p(w|C) to LMStats, possibly in a pluggable way so ppl can implement it however they want). It also doesn't seem right to have the same LM method implemented twice (both as MockLMSimilarity and here), so I'll take a look to see if I can merge those two. Finally, I am wondering whether I should implement the absolute discounting method, which, according to the paper, seems inferior to the Jelinek-Mercer and Dirichlet methods. Right now I am more on the \"no\" side.",
            "date": "2011-07-10T14:43:57.749+0000",
            "id": 17
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Added LMSimilarity so that the two LM methods have a common parent. It also defines the CollectionModel interface which computes p(w|C) in a pluggable way (and only once per query, though I am not sure this improves performance as I need a cast in score()).",
            "date": "2011-07-13T14:37:28.935+0000",
            "id": 18
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Explanation added to LM models; query boost added.",
            "date": "2011-07-14T09:35:37.642+0000",
            "id": 19
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Made the score() and explain() methods in Similarity components final.",
            "date": "2011-07-14T18:47:59.452+0000",
            "id": 20
        },
        {
            "author": "Robert Muir",
            "body": "Hi David, this is looking really good! The patch is quite large so what i did was:\n# re-sync flexscoring branch to trunk\n# commit your patch as is (i did a tiny tweak for LUCENE-3299)\n\nI saw a couple things we should address (full review will really mean i have to take quite a bit of time for each model!)\nBut we can take care of some of this easy stuff first!\n\n* numberOfFieldTokens seems to be the same as sumOfTotalTF? we should only have one name for this stat i think\n* i like the idea of NoAfterAffect/NoNormalization in DFR, maybe we should make these ordinary classes, and in DFR we just don't allow null for any of the components? just thought it might look cleaner.\n* some of the files in .similarities need apache license header.\n* because we dont need the norm for averaging, maybe we should use lucene's encoding? we can pre-build the decode table like TF-IDF similarity, except our decode table is basically 1 / decode(float)^2 to give us the quantized doc length. from a practical perspective, this would mean someone could use this stuff with existing lucene indexes (once they upgrade their segments to 4.0's format), and easily switch between things without reindexing.\n \nif you want, you can do these things on this issue or open separate issues, whichever is easiest. but i think looking at smaller patches at this point will make iteration easier!",
            "date": "2011-07-15T12:51:02.806+0000",
            "id": 21
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Fixed two of the issues you mentioned:\n * Apache license header added to all files in the similarities package;\n * cleaned up the constructor of DFRSimilarity and added a few new ones.\n\nI have not yet moved the NoNormalization and NoAfterEffect classes to their own files, because I feel a bit uncomfortable about the naming, since it's different from that of the other classes, e.g. NormalizationH2 vs NoNormalization. ",
            "date": "2011-07-20T11:48:31.429+0000",
            "id": 22
        },
        {
            "author": "Robert Muir",
            "body": "Thanks David: i committed this.",
            "date": "2011-07-20T11:55:42.223+0000",
            "id": 23
        },
        {
            "author": "David Mark Nemeskey",
            "body": "I think I realized what I wanted with numberOfFieldTokens. I was afraid that sumTotalTermFreq is affected by norms / index time boost / etc, and I wanted to make numberOfFieldTokens to unaffected by those (I don't know now how); only I forgot to do so.\n\nBut if sumTotalTermFreq is really just the number of tokens in the field, I will delete one of them. Not sure which, because for me numberOfFieldTokens seems a more descriptive name than sumTotalTermFreq, but the latter is used everywhere in Lucene. May I ask your opinion on this question?",
            "date": "2011-07-25T18:09:37.214+0000",
            "id": 24
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nNot sure which, because for me numberOfFieldTokens seems a more descriptive name than sumTotalTermFreq\n{quote}\n\nI think I agree with you: in the context of stats for scoring this might be the way to go, as its easier to understand.",
            "date": "2011-07-25T18:15:59.609+0000",
            "id": 25
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Added norm decoding table to EasySimilarity, and removed sumTotalFreq. Sorry I could only upload this patch now but I didn't have time to work on Lucene the last week.\n\nAs I see, all the problems you mentioned have been corrected, so maybe we can go on with the review?",
            "date": "2011-08-02T08:17:37.104+0000",
            "id": 26
        },
        {
            "author": "Robert Muir",
            "body": "Hi David, i was thinking for the norm, we could store it like DefaultSimilarity. this would make it especially convenient, as you could easily use these similarities with the same exact index as one using Lucene's default scoring. Also I think (not sure!) by using 1/sqrt we will get better quantization from smallfloat?\n\n{noformat}\n  public byte computeNorm(FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    return encodeNormValue(state.getBoost() * ((float) (1.0 / Math.sqrt(numTerms))));\n  }\n{noformat}\n\nfor computations, you have to 'undo' the sqrt() to get the quantized length, but thats ok since its only done up-front a single time and tableized, so it won't slow anything down.\n",
            "date": "2011-08-02T12:42:18.096+0000",
            "id": 27
        },
        {
            "author": "David Mark Nemeskey",
            "body": "EasySimilarity now computes norms in the same way as DefaultSimilarity.\n\nActually not exactly the same way, as I have not yet added the discountOverlaps property. I think it would be a good idea for EasySimilarity as well (it is for phrases, right), what do you reckon?\n\nI also wrote a quick test to see which norm (length directly or 1/sqrt) is closer to the original value and it seems that the direct one is usually much closer (RMSE is 0.09689688608375747 vs 0.23787634482532286). Of course, I know it is much more important that the new Similarities can use existing indices.",
            "date": "2011-08-02T20:04:31.666+0000",
            "id": 28
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Deleted the accidentally forgotten abstract modifier from the Distribution classes.",
            "date": "2011-08-04T20:03:50.061+0000",
            "id": 29
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Removed reflection from IBSimilarity.",
            "date": "2011-08-04T20:12:10.883+0000",
            "id": 30
        },
        {
            "author": "Robert Muir",
            "body": "Thanks, I committed your latest patch, some ideas just perusing:\n* we can move the calculations currently in decodeNormValue into the static table, this way we aren't doing these per-document multiplications and divisions... so decodeNormValue just returns the document length.\n* should easysim change its score method from score(Stats stats, float freq, byte norm) to score(Stats stats, float freq, int documentLength) ? then it could encapsulate this encoding/decoding.\n* I think we should try to factor in the index-time boost in computeNorm here if we can, e.g. just divide the document length by it? So documents with a higher index-time boost have a shorter length.",
            "date": "2011-08-05T13:19:05.349+0000",
            "id": 31
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Done. Actually, I wanted to implement the norm table in the way you said, but somehow forgot about it.\n\nTwo questions remain on my side:\n * the one about discountOverlaps (see above)\n * what kind of index-time boosts do people usually use? Too big a boost might cause problems if we just divide the length with it. Maybe we should take the logarithm or sth like that?",
            "date": "2011-08-06T11:14:54.526+0000",
            "id": 32
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Added a short explanation on the parameter for the Jelinek-Mercer method.",
            "date": "2011-08-06T11:30:15.117+0000",
            "id": 33
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Added discountOverlaps to EasySimilarity.",
            "date": "2011-08-08T20:16:11.711+0000",
            "id": 34
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Got rid of all but one nocommits.",
            "date": "2011-08-09T20:23:31.124+0000",
            "id": 35
        },
        {
            "author": "Robert Muir",
            "body": "Thanks David: I committed this.",
            "date": "2011-08-09T20:29:44.204+0000",
            "id": 36
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Robert: Since we use [LUCENE-3357|https://issues.apache.org/jira/browse/LUCENE-3357] for testing & bug fixing, I propose we close this issue. If we decide to implement other methods as well, we can do it under a new issue. Or do you have something else in mind (such as to rename EasySimilarity to SimilarityBase)?",
            "date": "2011-08-12T13:10:02.772+0000",
            "id": 37
        },
        {
            "author": "Robert Muir",
            "body": "+1, I do think we should consider naming and stuff (I sorta like SimilarityBase but we can discuss it)... but we should just open separate issues for that after we have worked out all the technical details first, its easy to refactor naming.\n\nAnd we also want to at the same time move it into src/java, we can open a separate issue for all of this \"integrate new similarities\" or something. Let's close this one!",
            "date": "2011-08-12T13:22:13.100+0000",
            "id": 38
        },
        {
            "author": "Robert Muir",
            "body": "Thanks David! Awesome work :)",
            "date": "2011-08-12T13:22:33.706+0000",
            "id": 39
        },
        {
            "author": "Fis Ka",
            "body": "Hi All,\n\npardon my ignorance, I'm new to this. What I need is the BM25 to implement in my current project (bachelor thesis), I'm using Lucene 3.0.2. \nCan you instruct me what do I need to do, so that I can add the bm25 to my project? Do I get a jar? or do I need to compile everything on my own?\nfurthermore, do I need to re-index sources in order to have BM25 working?\n\nbest,\n\n fiska",
            "date": "2012-02-17T15:29:15.913+0000",
            "id": 40
        }
    ],
    "component": "core/query/scoring, core/search",
    "description": "With [LUCENE-3174|https://issues.apache.org/jira/browse/LUCENE-3174] done, we can finally work on implementing the standard ranking models. Currently DFR, BM25 and LM are on the menu.\n\nDone:\n * {{EasyStats}}: contains all statistics that might be relevant for a ranking algorithm\n * {{EasySimilarity}}: the ancestor of all the other similarities. Hides the DocScorers and as much implementation detail as possible\n * _BM25_: the current \"mock\" implementation might be OK\n * _LM_\n * _DFR_\n * The so-called _Information-Based Models_\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3220",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Implement various ranking models as Similarities",
    "systemSpecification": true,
    "version": "flexscoring branch"
}