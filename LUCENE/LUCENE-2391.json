{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "Here's a patch to speed up the spellchecker build.\n\n* i wired the default RamMB to IWConfig's default\n* i didnt mess with the mergefactor for now (because the default is still to optimize)\n* but i added an additional 'optimize' parameter so you can update your spellcheck index without re-optimizing.\n* when updating, i changed the exists() to work per-segment, so its reasonable if the index isn't optimized.\n* the exists() check now bypasses the term dictionary cache, which is stupid and just slows it down.\n* we don't do any of the exists() logic if the index is empty (this is the case for i think solr which completely rebuilds\n  and doesnt do an incremental update)\n* the startXXX, endXXX, and word fields can only contain one term per document. I turned off norms, positions,\n  and tf for these.\n* the gramXXX field is unchanged, i didnt want to change spellchecker scoring in any way. But we could\n  reasonably in the future likely omit norms here too since i think its gonna be very short.\n\n{noformat}\ntrunk:\nscratch build time: 229,803ms\nindex size: 214,322,200 bytes\nno-op update time (updating but there is no new terms to add): 4,619ms\n\npatch:\nscratch build time: 99,214ms\nindex size: 177,781,273 bytes\nno-op update time: 2,504ms\n{noformat}\n\ni still left the optimize default on, but really i think for most users (e.g. solr) they should set \nmergefactor to be maybe a bit more reasonable, set optimize to false, and the scratch build \nis then must faster (60,000 ms), but the no-op update time is heavier (eg 16,000ms). Still, \nif you are rebuilding on every commit for smallish updates something like 20-30 seconds \nis a lot better than 100seconds, but for now I kept the defaults as is (optimizing every time).\n",
            "date": "2010-12-22T17:54:15.141+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks great Robert!\n\nDo we really need to handle subclasses that override exists?",
            "date": "2011-01-04T16:19:12.917+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "bq. Do we really need to handle subclasses that override exists?\n\nThe only reason i did this is because i want to backport this to branch_3x too, since it\nsignificantly speeds up spellchecker rebuilds.\n\nBut a simpler option would be to just mark the spellchecker final, does anyone actually\nsubclass this thing? It seems like a scary thing to subclass (the synchronization etc inside of it)",
            "date": "2011-01-04T16:34:41.827+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "Committed revision 1055285, 1055289 (3x).\n\nit would be good to make a follow-on-issue to allow solr users to control optimize-on-build, \nand also to control the clearIndex(), so they can reasonably use incremental update rather \nthan fully rebuilding the entire spellcheck index every time.\n\n",
            "date": "2011-01-05T03:46:16.394+0000",
            "id": 3
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:49:58.752+0000",
            "id": 4
        }
    ],
    "component": "modules/spellchecker",
    "description": "These settings seem odd - I'd like to investigate what makes most sense here.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2391",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Trivial",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Spellchecker uses default IW mergefactor/ramMB settings of 300/10",
    "systemSpecification": true,
    "version": ""
}