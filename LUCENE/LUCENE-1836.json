{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "gotta run off to a meeting, Uwe, I wonder if you could test the attached patch?",
            "date": "2009-08-21T12:23:02.987+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "I tried the same last night, did not work. I also tried to set the timezone to GMT, no change. Maybe its a bug in DateField?",
            "date": "2009-08-21T12:27:43.193+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, I saw several localization issues in the tests.\nThe best way is to make sure things such as Locales and Collators are being set to the queryparser in all the test utility methods.\n\nAlso, I think any hardcoded string dates should be converted to the local Locale before being parsed, rather than using Locale.US\nThis way, its really testing the localization.\n\nI can look at this later if no one beats me to it, sorry I have to run for a while.",
            "date": "2009-08-21T12:33:11.020+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "one last comment, I also think instead of depending upon the current Locale for the tests, we should iterate thru all (or at least some) available Locale's the jvm supports, and test each.\n\nLocale.getAvailableLocales() \n\nThis way, the tests test the localization, but will not fail depending upon the computer being used.\n",
            "date": "2009-08-21T12:41:08.519+0000",
            "id": 3
        },
        {
            "author": "Luis Alves",
            "body": "linking",
            "date": "2009-08-21T15:06:23.183+0000",
            "id": 4
        },
        {
            "author": "Luis Alves",
            "body": "{quote}\none last comment, I also think instead of depending upon the current Locale for the tests, we should iterate thru all (or at least some) available Locale's the jvm supports, and test each. This way, the tests test the localization, but will not fail depending upon the computer being used.\n{quote}\n\n+1 I really think that is much better testcase\n\nI'll see if I can look into this today. \n\nRobert when you have time to write that testcase,\ncan you upload the patch, I would like to give it a  try.",
            "date": "2009-08-21T15:18:01.681+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "Luis, no problem. I will take a look at this later today.",
            "date": "2009-08-21T16:16:05.108+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "i believe Uwe has found a real bug here.\ntake a look at my patch, in setUp() i set the default locale to German to duplicate his environment.\nwithout the change to ParametricRangeQuery, the test fails.\n\nif this looks ok, I will then think of a (clean) way to modify the tests so we don't have a future problem.\n\nunfortunately to really test it nice, I think you need to change the default locale as I did here... this is the only way I can think of to catch bugs like this.\nsetting it to a random available locale doesn't seem to be best either, i would rather run all the tests under each locale!",
            "date": "2009-08-21T21:47:06.490+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "when i say all the tests, i want to clarify, not limited to queryparser. \n\nwhat is some analyzer in contrib reads an input file with default platform encoding and gets strange results?\n\nIn my opinion, we should not make queryparser tests complicated when in reality it would be better to consider other options, setting up hudson to test under different locales or something?\nI will read up on others strategies for things like this.\n",
            "date": "2009-08-21T21:56:19.245+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, if you get a chance maybe you can confirm this fix to ParametricRange takes care of your problem?\n\nOne thought i had on the test problem was to do something like you did for LUCENE-1825, \nmake a base LocalizedTestCase or whatever that runs all tests with different default Locales.\n",
            "date": "2009-08-22T21:16:54.507+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. Uwe, if you get a chance maybe you can confirm this fix to ParametricRange takes care of your problem? \n\nI applied your patch (without the setting of the default locale), so only the ParametricRange  part and the test now passes. I think, this was it. Thanks!\n\nbq. One thought i had on the test problem was to do something like you did for LUCENE-1825, make a base LocalizedTestCase or whatever that runs all tests with different default Locales.\n\nGood idea! In my last patch for 1825 I also added a Set, that can be specified in the tests ctor to limit the multiple runs only to specific testmethods. See TestIndexWriter in LUCENE-1843 (which takes very long, so I only tested some methods two times). Running really all tests about 50 times (number of locales in a standard jvm) would take too long :-) I would only subclass local-aware tests and only a subset of testmethods, if there are too many long-time ones.",
            "date": "2009-08-22T21:35:26.718+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, yes only a few parts of lucene are sensitive to locales.\n\nSo I think the ones that are, they can subclass LocalizedTestCase or whatever.\n\nBut additionally I think in the future it would be nice if running ALL tests under a few different locales was part of the release process (basically what you have done here to find this issue!)\n",
            "date": "2009-08-22T21:46:32.415+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "fyi, I set this up, and found:\n\nTest failure of testLegacyDateRange occurred under a different Locale ko\nTest failure of testDateRange occurred under a different Locale ko\nTest failure of testLocalDateFormat occurred under a different Locale ja_JP_JP\n\nSo i don't think its completely fixed yet, will look at the rest of these and upload a new patch (using this LocalizedTestCase setup)\n",
            "date": "2009-08-22T22:23:14.075+0000",
            "id": 12
        },
        {
            "author": "Robert Muir",
            "body": "I played with this korean issue some, I am not sure what the fix should be (I am not too terribly familiar with the new qp, so that doesn't help).\n\nThe issue is that under the korean locale, the query cannot be parsed.\nI believe the problem is that korean date format for this date (2/1/2002) look like \"02. 2. 1\"\nso the qp gives parsing errors, cannot parse ranges like [ 02. 2. 1 TO 02. 2. 4]\n\nGuessing this is due to whitespace present in korean date format?\nSet your locale in setUp() to Locale.setDefault(Locale.KOREA) to see the problem...",
            "date": "2009-08-22T23:33:22.532+0000",
            "id": 13
        },
        {
            "author": "Adriano Crestani",
            "body": "Hi,\n\nI'm not being able to reproduce the problem, I tried to apply both patches and I got no error, it passes fine on my eclipse env. Am I missing something?\n\n{quote}\nThe issue is that under the korean locale, the query cannot be parsed.\nI believe the problem is that korean date format for this date (2/1/2002) look like \"02. 2. 1\"\nso the qp gives parsing errors, cannot parse ranges like [ 02. 2. 1 TO 02. 2. 4]\n{quote}\n\nYes, it seems a syntax limitation, the values cannot contain whitespace, if there is any whitespace it expects the \"TO\" token. So it's a syntax limitation, but I see no reason to remove it and allow whitespaces in the range values, considering anything between '[' or '{' to ' TO ' and between ' TO ' to ']' or '}' as the range values, example: [<anyt_sequence_of_chars> TO <any_sequence_of_chars>]\n\nThoughts?",
            "date": "2009-08-23T01:41:02.762+0000",
            "id": 14
        },
        {
            "author": "Robert Muir",
            "body": "Adriano, I can upload a specific patch for the korean issue tomorrow to make it easier.\n(i also want to see how old queryparser deals with this)\n\nthe last patch has the fix to ParametricRange for the german issue.\nit also modifies the test in setUp() to run under the german locale to demonstrate it is fixed:\n\nLocale.setDefault(Locale.GERMANY);\n\nto see the separate korean problem, change the line of code in setUp() from Locale.GERMANY to Locale.KOREAN\n\nI tried escaping the whitespace with \"\\\", but this didn't seem to resolve the problem.\n(I would think requiring escaped whitespace in this situation would be acceptable?)\n",
            "date": "2009-08-23T03:18:28.290+0000",
            "id": 15
        },
        {
            "author": "Adriano Crestani",
            "body": "Thanks for the quick response!\n\n{quote}\n(I would think requiring escaped whitespace in this situation would be acceptable?)\n{quote}\n\nI don't see any need to escape whitespaces, as I said, once the syntax parser finds '[' or '{' it should treat any sequence of chars as the value until it finds the token ' TO '. So, the only token needed to be escaped is 'TO' for the first range value, and ']' and '}' for the second range value.\n\n",
            "date": "2009-08-23T04:23:48.727+0000",
            "id": 16
        },
        {
            "author": "Robert Muir",
            "body": "attached is the fix for german, but also the utility base class \"LocalizedTestCase\". \n\nI changed TestQPHelper to extend this in the patch, so it will run tests under every locale, including the failing Korean.",
            "date": "2009-08-23T05:26:23.477+0000",
            "id": 17
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nI don't see any need to escape whitespaces, as I said, once the syntax parser finds '[' or '{' it should treat any sequence of chars as the value until it finds the token ' TO '. So, the only token needed to be escaped is 'TO' for the first range value, and ']' and '}' for the second range value.\n{quote}\n\nAdriano, even better. This would be more user-friendly. I attached what i did so far, let me know if I can help in any other way!",
            "date": "2009-08-23T05:29:27.741+0000",
            "id": 18
        },
        {
            "author": "Robert Muir",
            "body": "Adriano, also as I noted in LUCENE-1846, the old queryparser in core has this same issue.\n\nSo if you are able to figure out an improvement to the javacc grammar to fix this, I think we should consider applying it there as well.\n",
            "date": "2009-08-23T15:04:53.909+0000",
            "id": 19
        },
        {
            "author": "Adriano Crestani",
            "body": "If you double quote the values the syntax parser exits find: [ \"02. 2. 1\" TO \"02. 2. 4\"]\n\nMaybe, whoever formats the values should check if the values need to be double quoted or not, and double quote the formatted value when necessary.",
            "date": "2009-08-24T07:29:31.818+0000",
            "id": 20
        },
        {
            "author": "Uwe Schindler",
            "body": "Should we at least first commit the patch for ParametricRangeQueryNodeProcessor that fixes the error for standard locales without spaces in dates? I think tis one is separate.",
            "date": "2009-08-24T13:22:16.404+0000",
            "id": 21
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, it is up to you. i thought it might be considered all the same problem, but it doesn't matter.\n\nif we change the test as Adriano suggests, it fixes Korean problem. \nBut the tests do not pass under Thai locale for a different reason.\n",
            "date": "2009-08-24T13:34:19.049+0000",
            "id": 22
        },
        {
            "author": "Robert Muir",
            "body": "all tests pass under every locale with this patch...",
            "date": "2009-08-24T13:57:59.012+0000",
            "id": 23
        },
        {
            "author": "Uwe Schindler",
            "body": "Looks fine. So the Thai problem was also a whitespace problem?",
            "date": "2009-08-24T14:00:59.065+0000",
            "id": 24
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, no. The thai problem was that Calendar.getInstance() i think returns a BuddhistCalendar.\nThis would give some negative milliseconds for a date component in the tests.\n\nso this is why i changed it to use GregorianCalendar... it is still locale-sensitive (formatted differently according to locale).\nBut the test will not use calendar systems that really cannot be converted 1-1 with the gregorian system.\n",
            "date": "2009-08-24T14:02:58.171+0000",
            "id": 25
        },
        {
            "author": "Uwe Schindler",
            "body": "Aah, so the Thai locale would break DateTools before my patch, as it would use the wrong calendar to format the dates stored in index. Thanks for the info!",
            "date": "2009-08-24T14:07:05.825+0000",
            "id": 26
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, yes. I think because Buddhist years are > 2038 now and it will cause integer overflow :)",
            "date": "2009-08-24T14:08:57.190+0000",
            "id": 27
        },
        {
            "author": "Uwe Schindler",
            "body": "The Buddhist calendar is internally a subclass of GregorianCalendar with some offsets... Interesting. [http://www.docjar.com/html/api/sun/util/BuddhistCalendar.java.html]\n\nThe Java calendar will not overflow in 2038, as it uses a long (but the unix timestamp multiplied with 1000L), so it should last for several thousand/million years (I tested this), especially as the unix epoch is still always the same point in time (1970-01-01 expressed in the GregorianCalendar)\n\nThe problem with DateTools is more, that the values stored in index are not correctly normalized, so the index would not work on another locale (especially as parsing the dates may fail, because other number of days per month). All date/times with DateTools should be indexed as normalized values (gregorian with GMT/UTC TZ) to achieve interoperability. The same like indexing date/time with NumericField using the ms since unix epoch.",
            "date": "2009-08-24T14:23:41.918+0000",
            "id": 28
        },
        {
            "author": "Robert Muir",
            "body": "Uwe hmm, well then I am not sure. There was definitely a failure due to negative milliseconds values (and only with Thai calendar), so I assumed overflow.\n\nBut, I do not remember if the failure was in DateTools, or DateField (the tests use both)\n",
            "date": "2009-08-24T14:27:17.883+0000",
            "id": 29
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, i undid my change for curiousity : the issue was not DateTools, but i still believe it was an overflow\n\nor the other more likely possibility is since the date in the test (2002 in Thai calendar) is really 1459 in the gregorian calendar, you get negative time :)\n\n{noformat}\njava.lang.RuntimeException: time '-16122135600000' is too early, must be >= 0\n\tat org.apache.lucene.document.DateField.timeToString(DateField.java:95)\n\tat org.apache.lucene.document.DateField.dateToString(DateField.java:86)\n\tat org.apache.lucene.queryParser.standard.TestQPHelper.getLegacyDate(TestQPHelper.java:633)\n\tat org.apache.lucene.queryParser.standard.TestQPHelper.testLegacyDateRange(TestQPHelper.java:683)\n\t...\n{noformat}\n\nBut I agree, we should be consistent about use of GregorianCalendar and I think the patch is correct in that sense.\n",
            "date": "2009-08-24T14:34:38.219+0000",
            "id": 30
        },
        {
            "author": "Uwe Schindler",
            "body": "The general contract in lucene should be that all date/time types in lucene should be normalized to UTC and stored like that. Query parsing should be done in the locale specified by the user and should be handled out of Lucene.\n\nThe latest patch is ok and we should go forward with it.",
            "date": "2009-08-24T15:26:26.120+0000",
            "id": 31
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, ok. after this LocalizedTestCase is added, if you think it is a good idea, I can try to help resolve the same issues in the very similar test for the queryparser in core under a different issue.\n\nin my opinion 'ant test' should pass regardless of whether you happen to be on a Korean or Thai or German computer.",
            "date": "2009-08-24T15:56:54.411+0000",
            "id": 32
        },
        {
            "author": "Uwe Schindler",
            "body": "Should I assign to this issue and commit the testcase and the fix of the tests?",
            "date": "2009-08-24T16:50:52.192+0000",
            "id": 33
        },
        {
            "author": "Uwe Schindler",
            "body": "I modified the patch a little bit to only test locale-related tests (numbers, dates, farsi) with different default locales. This improved the time for the test by factor 3. I also reordered tearDown() to be reverse.",
            "date": "2009-08-24T17:07:24.204+0000",
            "id": 34
        },
        {
            "author": "Uwe Schindler",
            "body": "the test superclass should be abstract, everything else looks good! How to proceed?",
            "date": "2009-08-24T17:15:13.728+0000",
            "id": 35
        },
        {
            "author": "Luis Alves",
            "body": "{quote}\nthe test superclass should be abstract, everything else looks good! How to proceed? \n{quote}\nHi Uwe,\nI reviewed the patch, looks good. We should commit it.\nWe should open another JIRA issue with the remaining  issues.\n\nMichael Bush do you have time to review and commit  Uwe patch?",
            "date": "2009-08-24T23:43:42.337+0000",
            "id": 36
        },
        {
            "author": "Uwe Schindler",
            "body": "Here the patch again with the missing \"abstract\".\n\nI could also commit it, if you like. I only wanted to ask before commit, because it is assigned to you. After that we can make progress with the other localization problems.",
            "date": "2009-08-25T06:02:34.103+0000",
            "id": 37
        },
        {
            "author": "Michael Busch",
            "body": "I just reviewed the patch and was going to commit it now, Uwe. OK?",
            "date": "2009-08-25T06:07:37.903+0000",
            "id": 38
        },
        {
            "author": "Uwe Schindler",
            "body": "OK! If you also have the missing \"abstract\" in it, go!",
            "date": "2009-08-25T06:11:54.282+0000",
            "id": 39
        },
        {
            "author": "Michael Busch",
            "body": "Committed revision 807494.\n\n(with the missing \"abstract\")",
            "date": "2009-08-25T06:20:38.958+0000",
            "id": 40
        },
        {
            "author": "Luis Alves",
            "body": "{quote}\nI could also commit it, if you like. I only wanted to ask before commit, because it is assigned to you.\n{quote}\nI only realized I could have asked you, after I asked Michael. Next time :)",
            "date": "2009-08-25T07:40:59.820+0000",
            "id": 41
        }
    ],
    "component": "modules/other",
    "description": "I get the following error during the mentioned testcases on my computer, if I use the Locale de_DE (windows 32):\n\n{code}\n    [junit] Testsuite: org.apache.lucene.queryParser.standard.TestQPHelper\n    [junit] Tests run: 29, Failures: 1, Errors: 0, Time elapsed: 1,156 sec\n    [junit]\n    [junit] ------------- Standard Output ---------------\n    [junit] Result: (fieldX:xxxxx fieldy:xxxxxxxx)^2.0\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testLocalDateFormat(org.apache.lucene.queryParser.standard.TestQPHelper): FAILED\n    [junit] expected:<1> but was:<0>\n    [junit] junit.framework.AssertionFailedError: expected:<1> but was:<0>\n    [junit]     at org.apache.lucene.queryParser.standard.TestQPHelper.assertHits(TestQPHelper.java:1148)\n    [junit]     at org.apache.lucene.queryParser.standard.TestQPHelper.testLocalDateFormat(TestQPHelper.java:1005)\n    [junit]     at org.apache.lucene.util.LuceneTestCase.runTest(LuceneTestCase.java:201)\n    [junit]\n    [junit]\n    [junit] Test org.apache.lucene.queryParser.standard.TestQPHelper FAILED\n    [junit] Testsuite: org.apache.lucene.queryParser.standard.TestQueryParserWrapper\n    [junit] Tests run: 27, Failures: 1, Errors: 0, Time elapsed: 1,219 sec\n    [junit]\n    [junit] ------------- Standard Output ---------------\n    [junit] Result: (fieldX:xxxxx fieldy:xxxxxxxx)^2.0\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testLocalDateFormat(org.apache.lucene.queryParser.standard.TestQueryParserWrapper):       FAILED\n    [junit] expected:<1> but was:<0>\n    [junit] junit.framework.AssertionFailedError: expected:<1> but was:<0>\n    [junit]     at org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertHits(TestQueryParserWrapper.java:1120)\n    [junit]     at org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testLocalDateFormat(TestQueryParserWrapper.java:985)\n    [junit]     at org.apache.lucene.util.LuceneTestCase.runTest(LuceneTestCase.java:201)\n    [junit]\n    [junit]\n    [junit] Test org.apache.lucene.queryParser.standard.TestQueryParserWrapper FAILED\n{code}\n\nWith en_US as locale it works.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1836",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Flexible QueryParser fails with local different from en_US",
    "systemSpecification": true,
    "version": "2.9"
}