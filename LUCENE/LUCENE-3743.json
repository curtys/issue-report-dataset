{
    "comments": [
        {
            "author": "Steve Rowe",
            "body": "Patch addressing the problem",
            "date": "2012-02-01T00:11:44.608+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "definitely a bug... patch looks good to me.\n",
            "date": "2012-02-01T00:15:29.264+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "I am not sure, if this is really a bug... Why would one do an assume in a thread, you would d this at the beginning of your test to check preconditions, but if its inside a thread its in my opinion somehow too late?",
            "date": "2012-02-01T00:18:36.070+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "I think you can have a situation where you want to assume in another thread...\n\nit doesnt have to be a precondition... in fact the whole handling of assume doesnt\neven work best as a precondition [in setUp] because you get no messages about it if you do that.\ntry it... its because the TestWatchMan does not intercept anything coming from setUp :)\n\nanyway I think we should do the patch for consistency, and for those rare, crazy\nsituations where you want to make an assumption that isnt a precondition.",
            "date": "2012-02-01T00:22:02.006+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "With \"precondition\" I meant a precodnition of a test method like the ones we have for slow codecs...",
            "date": "2012-02-01T00:29:30.389+0000",
            "id": 4
        },
        {
            "author": "Steve Rowe",
            "body": "Robert and I were looking at https://builds.apache.org/job/Lucene-Solr-tests-only-3.x-java7/1685/testReport/junit/org.apache.lucene.analysis.charfilter/HTMLStripCharFilterTest/testRandom/ -- random data is generated that contains charcter U+FFFF, and tracking down all the locations where that character is generated in all the random generators looked hard; Robert suggested an Assume to ignore test data containing U+FFFF.\n\nFrom #lucene IRC:\n\n{noformat}\n  rmuir: maybe we should throw a junit assume or something\n         so it doesnt fail\n         but prevents you from wasting time \nsarowe1: makes sense\n  rmuir: i think we can just 'throw new AssumptionViolatedException'\nsarowe1: I'll give it a try\n         didn't work for me - it stops the run the same as assert\n[...]\nsarowe1: LuceneTestCase should ignore the failure???\n  rmuir: yeah\n         i think it should treat it as assume?\n         im not sure\n         hmm assume from another thread...\n         i think thats an LTC bug maybe\n         because from a single thread it works:\n[...]\n  rmuir: we should fix that\n{noformat}\n\n",
            "date": "2012-02-01T00:29:44.325+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "I really think this is the best solution for this U+FFFF issue, the problems:\n1. its only on 3.x becuase the indexer will replace it with U+FFFD (does not happen in trunk)\n2. there is likely no bug in an random generator, instead its generating escaped &#FFFF;, the assert happens at 'tokenizer' level (after charfilters processing)\n3. trying to stop generators from generating strings like that is hard, especially since we test this htmlstripfilter 'chained' with MockCharFilter. for example MockCharFilter doubles characters 'randomly', and we test HtmlStrip *with* MockCharFilter too (a charfilter chain), so a random generator could make &#FF;, then MockCharFilter doubles the F's into &#FFFF;, then HtmlStrip turns it into FFFF.\n\nfor these reasons assume is the best, I added this as 'assert' originally because otherwise\nits hard to track down why some random searching test fails. if the generators were really generating\nthis character tests would be failing left and right.\n\nI dont think they are, I think its the situation described in 2 and 3 above. This is ridiculous to\nspend a lot of time on, when we dont care to assert that this isn't happening, we just want to\nnot waste time on scary test failures.",
            "date": "2012-02-01T00:38:30.673+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "I understand and the fix is fine, my problem was simply, that one should also add a short description of the issue that lead to the failure - thats all :-) If Steven would have put that into the issue description, I would not have complained :-)",
            "date": "2012-02-01T00:43:15.085+0000",
            "id": 7
        },
        {
            "author": "Steve Rowe",
            "body": "bq. If Steven would have put that into the issue description, I would not have complained\n\nYou know, Uwe, I assumed that you would be asleep by now, rather than eagle-eye'ing JIRA in the middle of the night...\n\nBut seriously, I agree, I should have provided some rationale for this change.",
            "date": "2012-02-01T00:53:27.100+0000",
            "id": 8
        },
        {
            "author": "Steve Rowe",
            "body": "Committed to trunk and branch_3x.",
            "date": "2012-02-01T00:54:31.604+0000",
            "id": 9
        }
    ],
    "component": "general/test",
    "description": "As in single-threaded tests, {{LuceneTestCase}} should not trigger test failures for {{AssumptionViolatedException}}'s when they occur in multi-threaded tests.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3743",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "LuceneTestCase's uncaught exceptions handler should check for AssumptionViolatedExceptions and then not trigger test failure",
    "systemSpecification": true,
    "version": "3.5, 4.0-ALPHA"
}