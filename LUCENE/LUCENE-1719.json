{
    "comments": [
        {
            "author": "Steve Rowe",
            "body": "Patch containing notes to add to collation key filter/analyzer classes' javadocs.",
            "date": "2009-06-28T04:51:57.295+0000",
            "id": 0
        },
        {
            "author": "Steve Rowe",
            "body": "I also tested ICU4J version 4.2 (released 6 weeks ago), and the timings were nearly identical to those from ICU4J version 4.0 (the one that's in contrib/collation/lib/).\n\nThe timings given in the table above were not produced with the \"-server\" option to the JVM.  I separately tested all combinations using the \"-server\" option, but there was no difference for the 32-bit JVMs, though roughly 3-4% faster for the 64-bit JVMs.  I got the impression (didn't actually calculate) that although the best times of 5 runs were better for the 64-bit JVMs when using the \"-server\" option, the average times seemed to be slightly worse.  In any case, the performance improvement of the ICU4J implementation over the java.text.Collator implementation was basically unaffected by the use of the \"-server\" JVM option.\n",
            "date": "2009-06-28T05:05:03.190+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "steven, you are correct. \n\ni should have clarified, the gain is not as much when generating keys. but there is still huge gains for runtime comparison. see recent numbers here for a few languages:\n\nhttp://site.icu-project.org/charts/collation-icu4j-sun\n\nbut you should also mention that key size is smaller too!  (smaller term dictionary)",
            "date": "2009-06-28T11:08:12.589+0000",
            "id": 2
        },
        {
            "author": "Steve Rowe",
            "body": "Cool! Thanks for the link, Robert.\n\nKey comparison under Lucene when using *CollationKeyAnalyzer will utilize neither ICU4J's nor the java.text incremental collation facilities - the base-8000h-String-encoded raw collation keys will be directly compared (and sorted) as Strings.  So key generation time and, as you point out, key length are the appropriate measures here.\n\nI'll post a patch shortly that includes your ICU4J link, and mentions the key length aspect as well.  I'll also remove specific numbers from the javadoc notes - people can follow the ICU4J link if they're interested.",
            "date": "2009-06-28T17:35:10.648+0000",
            "id": 3
        },
        {
            "author": "Steve Rowe",
            "body": "Edited title to reflect addition of key length concerns, and switched performance improvement column to be percentage improvements rather than multipliers.",
            "date": "2009-06-28T18:13:20.412+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "steven, no thank you for running the calculations!\n\nyeah i think the sort key length is worth mentioning. in practice i wonder how much it helps lucene at runtime, maybe for things like SORT at least it would improve runtime performance by some small amount.",
            "date": "2009-06-28T19:28:28.913+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "steven, another note i thought i would mention.\n\nalong these same lines i searched lucene source code for java.text.Collator and found some uses of it (the incremental facility). I wonder if in the future we could find a way to allow usage of com.ibm.icu.text.Collator in these spots.\n\nthis could give some healthy performance improvements. I found it in:\n\nQueryParser (for localized RangeQuery)\nRangeQuery/RangeFilter/RangeTermEnum/ConstantScoreRangeQuery\nFieldComparator/FieldSortedHitQueue/FieldDocSortedHitQueue\n\n",
            "date": "2009-06-28T20:53:27.101+0000",
            "id": 6
        },
        {
            "author": "Steve Rowe",
            "body": "bq. [...] i searched lucene source code for java.text.Collator and found some uses of it (the incremental facility). I wonder if in the future we could find a way to allow usage of com.ibm.icu.text.Collator in these spots.\n\n+1\n\nI guess the way to go would be to make the implementation pluggable.",
            "date": "2009-06-29T03:55:17.236+0000",
            "id": 7
        },
        {
            "author": "Steve Rowe",
            "body": "Updated patch including information about ICU4J's shorter key length; adding a link to the ICU4J documentation's comparison of ICU4J and java.text.Collator key generation time and key length; and removing specific performance numbers.",
            "date": "2009-06-29T03:57:44.628+0000",
            "id": 8
        },
        {
            "author": "Simon Willnauer",
            "body": "Steven, patch looks good to me. I will look at it again in a day or two.\n\nsimon",
            "date": "2009-06-30T14:37:59.764+0000",
            "id": 9
        },
        {
            "author": "Simon Willnauer",
            "body": "I committed your patch and removed the last \"NB:\" in the ICUCollationKeyFilter.java for consistency.\n\nThanks Steven!",
            "date": "2009-07-01T16:52:11.684+0000",
            "id": 10
        }
    ],
    "component": "modules/other",
    "description": "contrib/collation's ICUCollationKeyFilter, which uses ICU4J collation, is faster than CollationKeyFilter, the JVM-provided java.text.Collator implementation in the same package.  The javadocs of these classes should be modified to add a note to this effect.\n\nMy curiosity was piqued by [Robert Muir's comment|https://issues.apache.org/jira/browse/LUCENE-1581?focusedCommentId=12720300#action_12720300] on LUCENE-1581, in which he states that ICUCollationKeyFilter is up to 30x faster than CollationKeyFilter.\n\nI timed the operation of these two classes, with Sun JVM versions 1.4.2/32-bit, 1.5.0/32- and 64-bit, and 1.6.0/64-bit, using 90k word lists of 4 languages (taken from the corresponding Debian wordlist packages and truncated to the first 90k words after a fixed random shuffling), using Collators at the default strength, on a Windows Vista 64-bit machine.  I used an analysis pipeline consisting of WhitespaceTokenizer chained to the collation key filter, so to isolate the time taken by the collation key filters, I also timed WhitespaceTokenizer operating alone for each combination.  The rightmost column represents the performance advantage of the ICU4J implemtation (ICU) over the java.text.Collator implementation (JVM), after discounting the WhitespaceTokenizer time (WST): (JVM-ICU) / (ICU-WST). The best times out of 5 runs for each combination, in milliseconds, are as follows:\n\n||Sun JVM||Language||java.text||ICU4J||WhitespaceTokenizer||ICU4J Improvement||\n|1.4.2_17 (32 bit)|English|522|212|13|156%|\n|1.4.2_17 (32 bit)|French|716|243|14|207%|\n|1.4.2_17 (32 bit)|German|669|264|16|163%|\n|1.4.2_17 (32 bit)|Ukranian|931|474|25|102%|\n|1.5.0_15 (32 bit)|English|604|176|16|268%|\n|1.5.0_15 (32 bit)|French|817|209|17|317%|\n|1.5.0_15 (32 bit)|German|799|225|20|280%|\n|1.5.0_15 (32 bit)|Ukranian|1029|436|26|145%|\n|1.5.0_15 (64 bit)|English|431|89|10|433%|\n|1.5.0_15 (64 bit)|French|562|112|11|446%|\n|1.5.0_15 (64 bit)|German|567|116|13|438%|\n|1.5.0_15 (64 bit)|Ukranian|734|281|21|174%|\n|1.6.0_13 (64 bit)|English|162|81|9|113%|\n|1.6.0_13 (64 bit)|French|192|92|10|122%|\n|1.6.0_13 (64 bit)|German|204|99|14|124%|\n|1.6.0_13 (64 bit)|Ukranian|273|202|21|39%|\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1719",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Trivial",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add javadoc notes about ICUCollationKeyFilter's advantages over CollationKeyFilter",
    "systemSpecification": true,
    "version": "2.4.1"
}