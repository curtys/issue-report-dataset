{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "This sounds like a good idea!  Grouping is hard to use now...\n\nWould it be something like this?\n\n{noformat}\nGroupSearch ctx = new GroupingSearch(groupByField);\n\nctx.setGroupSort(...);\nctx.setWithinGroupSort(...);\nctx.setNeedsAllGroups(...);\nctx.setNeedsAllGroupHeads(...);\nctx.setUseCaching(...);\n\ntopGroups = ctx.search(searcher, query, numGroups);\n{noformat}\n\n... and the search method figures out which first/second pass\ncollectors to make, whether to cache, etc.?\n\nWould you also handle block (single pass) grouping with the same\nclass...?\n\nI guess you'd then .getAllGroups(), .getAllGroupHeads() after\n.search(...)?\n\nHmm would we try to handle Term/BytesRef and Function/MutableValue\nwith the same class?\n",
            "date": "2012-02-15T15:54:42.688+0000",
            "id": 0
        },
        {
            "author": "Martijn van Groningen",
            "body": "Yes, it would look something like that.\n\nbq. Would you also handle block (single pass) grouping with the same class...?\nI think we can do this. The block grouping returns TopGroups as result.\n\nbq. I guess you'd then .getAllGroups(), .getAllGroupHeads() after .search(...)?\nYes, we need that. In the case of getAllGroups() the TopGroups#totalGroupCount field can be used when the user is only interested in the number of matching groups.\n\nbq. Hmm would we try to handle Term/BytesRef and Function/MutableValue with the same class?\nWith generics?\n{code}\nclass GroupingSearch {\n\n  public <T> TopGroups<T> search(IndexSearcher searcher, Query query, int numGroups) {\n    ...\n  }\n\n}\n{code}\n\nFunction usage:\n{code}\nGroupSearch ctx = new GroupingSearch(groupByFunction);\nctx.useFunction();\n...\nTopGroups<MutableValue> topGroups = ctx.search(searcher, query, numGroups);\n{code}\n\nThe same could work for grouping by docvalues types int and float, right?\n\nMaybe distributed grouping needs its own class? Since the usage is different from a non distributed grouping.",
            "date": "2012-02-15T22:11:18.097+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nbq. Would you also handle block (single pass) grouping with the same class...?\n\nI think we can do this. The block grouping returns TopGroups as result.\n{quote}\n\nNice.\n\n{quote}\nbq. I guess you'd then .getAllGroups(), .getAllGroupHeads() after .search(...)?\n\nYes, we need that. In the case of getAllGroups() the TopGroups#totalGroupCount field can be used when the user is only interested in the number of matching groups.\n{quote}\n\nOK.\n\n{quote}\nbq. Hmm would we try to handle Term/BytesRef and Function/MutableValue with the same class?\n\nWith generics?\n{quote}\n\nI think so... but I think it may get tricky.  Like, I think you should\nspecify up front (to GroupingSearch ctor) the required things about\nyour request (block join OR group field OR field + DV type OR function\nVS/ctx map), setters for the numerous optional things (sort,\ngroupSort, getScores, getMaxScores, maxDocsPerGroup) and maybe params\nto search for the per-requesty things (topNGroups, groupOffset,\nwithinGroupOffset).\n\nBut then the <T> will depend on which ctor you used...?  Not sure how\nit'd work...\n\nbq. Maybe distributed grouping needs its own class? Since the usage is different from a non distributed grouping.\n\nYeah...\n\nMaybe we can do this for join module too!\n",
            "date": "2012-02-16T18:47:16.873+0000",
            "id": 2
        },
        {
            "author": "Martijn van Groningen",
            "body": "Just a start, but it think this is the way to go.",
            "date": "2012-02-21T15:33:15.864+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "I really dislike the cancerous chaining (all setters returning\n{{this}}): it's poor API design because it creates unnecessary\nambiguity on how to consume it.  It amounts to a denial-of-service\nattack on the devs who consume our APIs....  We should strive to have\nless, not more, ambiguity in all of our APIs.\n\nBut, since others seem to love it, as a compromise, can you write all\nconsumption of the cancerous chaining as if the methods did not chain?\nIe minimize the cancer: contain it to the API definition, alone.\n\nThe litmus test is then simple: if I were to change all methods to\nreturn void instead, everything should compile / tests should pass.\n\nOtherwise, the patch looks great!\n\nOne can actually use GroupingSearch in a shard'd env, on each shard,\nright?  It's just that then you merge them like normal on the front\nend (ie, TopGroups.merge).  Is that the only reason for the \"... in a\nnon distributed environment\" javadoc warning?\n\nI think the jdocs for each ctor should explain what kind of grouping\nimpl will be used (ie, the ctor taking Filter groupEndDocs uses\nsingle-pass block collector, and requires you indexed doc blocks).\n\nMaybe the ctor should take docValuesType / diskResidentValues, instead\nof setters to change it?  Ie, so that you are stating up front what\nsource to group by (DocValues, FC (Term), function, block).\n\nMaybe you should pass the groupSort, groupsOffset, groupsLimit to the\nsearch method (instead of setters)?\n",
            "date": "2012-02-27T11:35:26.656+0000",
            "id": 4
        },
        {
            "author": "Martijn van Groningen",
            "body": "{quote}\nOne can actually use GroupingSearch in a shard'd env, on each shard,\nright? It's just that then you merge them like normal on the front\nend (ie, TopGroups.merge). Is that the only reason for the \"... in a\nnon distributed environment\" javadoc warning?\n{quote}\nIn a sharded env one needs to first execute all the first pass collector on all shards, merge the returned search groups, execute the second pass search (with the top N merged search groups as argument) on most of the shards and finally merge the TopGroups from all shards into a topN TopGroups. Also grouping by docblock and grouping features like allGroups and groupHead don't work in a normal sharded environment (unless you partition the groups properly). The docs caching also only makes sense when performing grouping on a local index. This usage is very different then non distributed grouping, that is why I think it is better to have a separate grouping convenience class for distributed grouping (DistributedGroupSearch?). \n\nbq. Maybe the ctor should take docValuesType / diskResidentValues\nMakes sense!\n\nbq. Maybe you should pass the groupSort, groupsOffset, groupsLimit to the search method (instead of setters)?\nMaybe we just should have defaults for these options? Sort.RELEVANCE, 0 and 10?",
            "date": "2012-03-05T14:33:58.601+0000",
            "id": 5
        },
        {
            "author": "Martijn van Groningen",
            "body": "Updated patch.\n* Added jdocs.\n* allGroups and allGroupHeads methods are implemented now.",
            "date": "2012-03-05T15:50:03.750+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good!\n\nbq. Also grouping by docblock and grouping features like allGroups and groupHead don't work in a normal sharded environment (unless you partition the groups properly).\n\nDoc block grouping should work well in a sharded env right?  As long\nas you send the whole block to a single shard...\n\nbq. This usage is very different then non distributed grouping, that is why I think it is better to have a separate grouping convenience class for distributed grouping (DistributedGroupSearch?).\n\nOK I agree.\n\n{quote}\nbq. Maybe you should pass the groupSort, groupsOffset, groupsLimit to the search method (instead of setters)?\n\nMaybe we just should have defaults for these options? Sort.RELEVANCE, 0 and 10?\n{quote}\n\nWell, I was trying to mirror IndexSearcher.search (for lack of any\nother guidance on what should be required arg to ctor, optional via\nsetter or required arg to .search).\n\nSo, yeah, I think default to Sort.RELEVANCE is good?  Maybe we have 1\nsearch method doing that and another taking the GroupSort?\n\nI think it's strange to have a default for the top N groups (10)?  I\nthink app should have to specify that as an arg to search...\n\nShould we name it GroupSearch?  GroupedSearch?  GroupingSearch...?  I don't\nhave a strong preference... I think GroupingSearch (current name) is OK?\n",
            "date": "2012-03-07T18:09:06.449+0000",
            "id": 7
        },
        {
            "author": "Martijn van Groningen",
            "body": "{quote}\nSo, yeah, I think default to Sort.RELEVANCE is good? Maybe we have 1\nsearch method doing that and another taking the GroupSort?\n\nI think it's strange to have a default for the top N groups (10)? I\nthink app should have to specify that as an arg to search...\n{quote}\nMakes sense.\n\nbq. I think GroupingSearch (current name) is OK?\nIn the join module we have the JoinUtil. Maybe rename it to GroupUtil? Just to be consistent? Or rename JoinUtil to JoinSearch?",
            "date": "2012-03-07T22:09:22.514+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "bq. In the join module we have the JoinUtil. Maybe rename it to GroupUtil? Just to be consistent? Or rename JoinUtil to JoinSearch?\n\nHmm, except in JoinUtil's case, it just has one static method... vs GroupingSearch which you instantiate, tweak, and use.  So I think it's good that they are named differently?",
            "date": "2012-03-08T11:25:25.757+0000",
            "id": 9
        },
        {
            "author": "Martijn van Groningen",
            "body": "bq. Hmm, except in JoinUtil's case, it just has one static method... vs GroupingSearch which you instantiate, tweak, and use. So I think it's good that they are named differently?\nTrue. Lets keep the current name then.\n\nI think that the package.html should also be updated? It should use the GroupSearch instead of all the different collectors. ",
            "date": "2012-03-08T11:30:50.567+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I think that the package.html should also be updated? It should use the GroupSearch instead of all the different collectors.\n\n+1, as long as GroupSearch covers all cases package.html now describes I guess?",
            "date": "2012-03-11T13:13:56.548+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "I took a quick glance and ... completely avoiding the chaining discussion, i have a few silly API suggestions:\n* methods like enableCaching(double maxCacheRAMMB, boolean cacheScores) and enableCaching(int maxDocsToCache, boolean cacheScores) \n  are confusing because the signature is overloaded by different primitive types... can we give those unique names?\n* methods like disableCaching(), includeScores(boolean includeScores) are a little confusing because the verb 'set' is missing?\n  In general I think getXXX and setXXX are useful, because otherwise its hard to consume the API since you don't\n  know if the method will have some unintended side effects. As an extreme example, imagine if instead of isClosed() if you \n  used closed(), which is very different from close() but confusable.",
            "date": "2012-03-11T16:42:43.535+0000",
            "id": 12
        },
        {
            "author": "Martijn van Groningen",
            "body": "bq. +1, as long as GroupSearch covers all cases package.html now describes I guess?\nI think the GroupSearch class covers all local cases, so that should be fine.\n\n{quote}\nmethods like disableCaching(), includeScores(boolean includeScores) are a little confusing because the verb 'set' is missing?\nIn general I think getXXX and setXXX are useful, because otherwise its hard to consume the API since you don't\nknow if the method will have some unintended side effects. As an extreme example, imagine if instead of isClosed() if you \nused closed(), which is very different from close() but confusable.\n{quote}\nKinda makes sense, lets make the method names more descriptives to avoid any confusion (although we have jdocs). \n\n{quote}\nmethods like enableCaching(double maxCacheRAMMB, boolean cacheScores) and enableCaching(int maxDocsToCache, boolean cacheScores)\nare confusing because the signature is overloaded by different primitive types... can we give those unique names?\n{quote}\nSure, we can do that. What would be good names? setCacheSizeInMb(Double,boolean) and setCacheSizeInDocs(Integer,boolean)? Setting null would disable the cache?",
            "date": "2012-03-13T09:05:43.119+0000",
            "id": 13
        },
        {
            "author": "Martijn van Groningen",
            "body": "Updated patch.\n* Changed package.html\n* The methods that set something now have a name that begins with set.",
            "date": "2012-03-15T16:22:53.464+0000",
            "id": 14
        },
        {
            "author": "Martijn van Groningen",
            "body": "Updated patch. Grouplimit and groupoffset are now parameters in the search methods. I think it is time to commit this.",
            "date": "2012-03-21T15:17:45.068+0000",
            "id": 15
        },
        {
            "author": "Michael McCandless",
            "body": "+1",
            "date": "2012-03-21T15:58:33.404+0000",
            "id": 16
        },
        {
            "author": "Martijn van Groningen",
            "body": "Committed to trunk. Feature work (distributed grouping, grouped facets etc.) will be done in new issues.",
            "date": "2012-03-22T16:17:17.415+0000",
            "id": 17
        }
    ],
    "component": "modules/grouping",
    "description": "Currently the grouping module has many collector classes with a lot of different options per class. I think it would be a good idea to have a GroupUtil (Or another name?) convenience class. I think this could be a builder, because of the many options (sort,sortWithinGroup,groupOffset,groupCount and more) and implementations (term/dv/function) grouping has.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3778",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Create a grouping convenience class",
    "systemSpecification": true,
    "version": ""
}