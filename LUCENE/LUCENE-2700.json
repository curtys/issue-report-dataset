{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "FunctionQuery already has a class called DocValues - perhaps we could call this one FieldValues?",
            "date": "2010-10-13T16:03:38.183+0000",
            "id": 0
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. FunctionQuery already has a class called DocValues - perhaps we could call this one FieldValues?\nAh I must have missed this comment - sry for the late response. I think you are right that we should use a different name. Maybe PerDocValues since FieldValues is doesn't sound right to me though.\n\nThe other question is if FunctionQuery should be in core at all or if we should move it out to module (solr uses its own anyway right so we can merge them). Then the name similarity would not matter IMO. But thats a different story\n",
            "date": "2010-10-26T08:46:05.934+0000",
            "id": 1
        },
        {
            "author": "Simon Willnauer",
            "body": "Some might have followed the recent commit on the [branch|https://svn.apache.org/repos/asf/lucene/dev/branches/docvalues/] some didn't so I will sum up what has happened so far.\nI integrated the currently named \"DocValues\" (we might need to rename it to something like \"PerDocValues\" due to the naming conflict with func queries - I will wait for other suggestions though) into the 4 dimensional Flex API and in turn changed the FieldsConsumer and FieldsProducer interface to accept a new \"DocValuesConsumer\" / \"DocValuesProducer\" (implementing Fields) receptively. We have a default implementation for both of them while none of them are used by the \"Term / Postings\" codecs yet. I added a DocValuesCodec  which wraps any other codec and forwards if there is a TermsConsumer / Producer requested. The test case already uses a random codec wrapped by DocValuesCodec so they are ultimately pluggable. \nDocValues are supported on a SegmentReader as well as DirectoryReader level i.e. they are integrated into MultiFields just the same way as Terms / DocsEnum etc. are.\n\n\nI run into one rather big issue while integrating a \"PerDoc\" consumer / producer into Codec. When a codec instantiates a FieldsConsumer most of the codecs already create all necessary \"resources\" to consumer terms and postings which is problematic since PerDocConsumers are created way before the segment is flushed while \"TermConsumer\" are created / needed only before / during flush. So in the case of DocValues I pass in the SegmentsWriteState into Codec#fieldsConsumer(..) and once the segment if flushed DocumentsWriter creates another one which in turn fails since the files for this codec / consumer have already been creates. Yet the solution I have implemented / hacked :) is that I initialize the wrapped codec lazily with the SegmentsWriteState passed to Codec#fieldsConsumer(..) before the flush. This only works as long as nobody tries to get a TermsConsumer before we are ready to flush which is kind of flaky. \n\nIMO we should not necessarily create all resources / files in directory etc. when a FieldsConsumer is created but move it one level down and do it onces a TermsConsumer is requested. We gonna need these facilities anyway to integrate StoredFields etc. since they are per doc too. \n\nComments welcome.",
            "date": "2010-10-30T12:11:35.102+0000",
            "id": 2
        },
        {
            "author": "Simon Willnauer",
            "body": "this is done since a while ago - closing",
            "date": "2010-11-25T10:41:28.295+0000",
            "id": 3
        }
    ],
    "component": "core/index",
    "description": "DocValues Reader are currently exposed / accessed directly via IndexReader. To integrate the new feature in a more \"native\" way we should expose the DocValues via Fields on a perSegment level and on MultiFields in the multi reader case. DocValues should be side by side with Fields.terms  enabling access to Source, SortedSource and ValuesEnum something like that:\n\n{code}\npublic abstract class Fields {\n...\n\n  public DocValues values();\n\n}\n\npublic abstract class DocValues {\n  /** on disk enum based API */\n  public abstract ValuesEnum getEnum() throws IOException;\n  /** in memory Random Access API - with enum support - first call loads values in ram*/\n  public abstract Source getSource() throws IOException;\n  /** sorted in memory Random Access API - optional operation */\n  public SortedSource getSortedSource(Comparator<BytesRef> comparator) throws IOException, UnsupportedOperationException;\n  /** unloads previously loaded source only but keeps the doc values open */\n  public abstract unload();\n  /** closes the doc values */\n  public abstract close();\n}\n{code}\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-2700",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Expose DocValues via Fields",
    "systemSpecification": true,
    "version": ""
}