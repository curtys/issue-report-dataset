{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "These issues were fixed in LUCENE-3147 and have been released w/ Lucene 3.2.0. I don't think we should backport those fixes to the 3.0.x branch, nor do we have the test-framework in place there to test them.",
            "date": "2011-06-29T19:09:14.689+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "just to followup, the changes here didn't make it until Lucene 3.3.0.\nThis isn't yet released, but should be any time soon (like within days)\n\nyou can try out the release candidate here: http://s.apache.org/lusolr330rc1\n\nfurthermore, if you want you can use lucene's test-framework jar in your own tests to help you track down any file leaks in your own application, by wrapping your directory with MockDirectoryWrapper, or by extending LuceneTestCase and using newDirectory() and newFSDirectory().",
            "date": "2011-06-29T19:12:50.890+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "I don't think \"won't\" fix is the correct \"resolution\". It's \"fixed in 3.3\", right?",
            "date": "2011-06-29T20:23:37.032+0000",
            "id": 2
        },
        {
            "author": "Shai Erera",
            "body": "Reopening to change resolution",
            "date": "2011-06-30T02:52:07.529+0000",
            "id": 3
        },
        {
            "author": "Shai Erera",
            "body": "Already fixed in 3.3",
            "date": "2011-06-30T02:52:53.465+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "bulk close for 3.3",
            "date": "2011-07-02T02:40:14.275+0000",
            "id": 5
        }
    ],
    "component": "core/index",
    "description": "I am not sure if this issue requires a fix due to the nature of its occurrence, or if it exists in other versions of Lucene.\n\nI am using Lucene Java 3.0.3 on a SUSE Linux machine with Java 6 and have noticed there are a number of file handles that are not being released from my java application. There are IOExceptions in my log regarding disk full, which causes a merge and the optimization to fail. The index is not currupt upon encountering the IOException. I am using CFS for my index format, so 3X my largest index size during optimization certainly consumes all of my available disk. \n\nI realize that I need to add more disk space to my machine, but I investigated how to clean up the leaking file handles. After failing to find a misuse of Lucene's IndexWriter in the code I have wrapping Lucene, I did a quick search for close() being invoked in the Lucene Jave source code. I found a number of source files that attempt to close more than one object within the same close() method. I think a try/catch should be put around each of these close() attempts to avoid skipping a subsequent closes. The catch may be able to ignore a caught exception to avoid masking the original exception like done in SimpleFSDirectory.close().\n\nLocations in Lucene Java source where I suggest a try/catch should be used:\n- org.apache.lucene.index.FormatPostingFieldsWriter.finish()\n- org.apache.lucene.index.TermInfosWriter.close()\n- org.apache.lucene.index.SegmentTermPositions.close()\n- org.apache.lucene.index.SegmentMergeInfo.close()\n- org.apache.lucene.index.SegmentMerger.mergeTerms() (The finally block)\n- org.apache.lucene.index.DirectoryReader.close()\n- org.apache.lucene.index.FieldsReader.close()\n- org.apache.lucene.index.MultiLevelSkipListReader.close()\n- org.apache.lucene.index.MultipleTermPositions.close()\n- org.apache.lucene.index.SegmentMergeQueue.close()\n- org.apache.lucene.index.SegmentMergeDocs.close()\n- org.apache.lucene.index.TermInfosReader.close()",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-3258",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "File leak when IOException occurs during index optimization.",
    "systemSpecification": true,
    "version": "3.0.3"
}