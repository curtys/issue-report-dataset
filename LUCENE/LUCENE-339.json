{
    "comments": [
        {
            "author": "Daniel Naber",
            "body": "I assume by \"some limitation\" you refer to the fact that no dates before 1970 \ncan be used, right? This has been solved in CVS (although in a different way \nthan you suggested). So I'll close this bug, feel free to re-open it if \nthere's more than this \"no dates before 1970\" issue. \n ",
            "date": "2005-01-26T17:13:43.000+0000",
            "id": 0
        }
    ],
    "component": "core/index",
    "description": "currently there is some limitation to date encoding in lucene. I think it's \nbecause dates should preserve lexicografical ordering, i.e. if one date precedes \nanother date then encoded values should keep same ordering.\n\nI know that it can be difficult to integrate it into existing version but there \nis way to remove this limitation.\nDate milliseconds can be encoded as unsigned values with prefix that indicates \npositive or negative value.\n\nIn more details:\nI used hex encoding and prefix &#8216;p&#8217; and &#8216;n&#8217; for positive and negative values. I \ngot following results:\n\nValue -10000 is encoded with nffffffffffffd8f0, \n-100\t- nffffffffffffff9c\n0\t- p0000000000000000\n100\t- p0000000000000064\n10000\t- p0000000000002710\n\nThis preserves ordering between values and theirs encoding.\n\nAlso hex encoding can be replaced with Character.MAX_RADIX encoding.\n\nPart of code that do this work:\n   final static char[] digits = {\n\t'0' , '1' , '2' , '3' , '4' , '5' ,\n\t'6' , '7' , '8' , '9' , 'a' , 'b' ,\n\t'c' , 'd' , 'e' , 'f' , 'g' , 'h' ,\n\t'i' , 'j' , 'k' , 'l' , 'm' , 'n' ,\n\t'o' , 'p' , 'q' , 'r' , 's' , 't' ,\n\t'u' , 'v' , 'w' , 'x' , 'y' , 'z'\n    };\n\n\n    char prefix;\n    if (time >= 0) {\n      prefix = 'p';\n    } else {\n      prefix = 'n';\n    }\n\n    char[] chars = new char[DATE_LEN + 1];\n    int index = DATE_LEN;\n    while (time != 0) {\n      int b = (int) (time & 0x0F);\n      chars[index--] = digits[b];\n      time = time >>> 4;\n    }\n\n    while (index >= 0) {\n      chars[index--] = '0';\n    }\n    chars[0] = prefix;\n\n    return new String(chars);",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-339",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "date encoding limitation removing",
    "systemSpecification": true,
    "version": "1.4"
}