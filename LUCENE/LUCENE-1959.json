{
    "comments": [
        {
            "author": "Jason Rutherglen",
            "body": "First cut of the index splitter which allows listing segments, copying segments to a new directory, and removing segments from a directory.",
            "date": "2009-10-08T00:21:34.913+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Looks great, thanks Jason!  I just tweaked the javadoc to this:\n\n/**\n * Command-line tool that enables listing segments in an\n * index, copying specific segments to another index, and\n * deleting segments from an index.\n *\n * <p><b>NOTE</b>: The tool is experimental and might change\n * in incompatible ways in the next release.  You can easily\n * accidentally remove segments from your index so be\n * careful!\n */\n\nMy inclination would be to commit this today (ie for 3.0), since it's such an isolated change, but we have said that 3.0 would only turnaround removal of deprecated APIs, cutover to Java 1.5 features, and bug fixes, so if anyone objects to my committing this for 3.0, please speak up soon!\n",
            "date": "2009-10-08T09:39:05.624+0000",
            "id": 1
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "I'm of a split mind about this splitter ;) in the sense that I'm not sure how useful it is - if your input is an optimized index then it has just 1 segment, so this tool won't be able to split it, right?\n\nAFAIK a similar functionality can be implemented also using two other methods that would work on indexes with any number of segments: one method is trivial, based on a \"delete/IndexWriter.addIndexes/undeletAll\" loop that requires multiple passes over input data, the other would use the same method as SegmentMerger uses, i.e. working with FieldsWriter, FormatPostings*Consumer, TermVectorsWriter, etc. for a single-pass splitting.\n\nSo I guess I'm -0 on this index splitting method, because I think we can do it better.\n",
            "date": "2009-10-08T10:03:02.971+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "I would put it into contrib (misc next to IndexNormModifier which is also command line), as it is a utility tool. I see no real reason to have it in core. We have then all flexibility to change and optimize it, as Andrzey suggested.\n\nOne thing against this tool in its current form: To copy the files it should use the directory abstraction lay and not use java.io directly. So open IndexInput/IndexOutput to copy the files.",
            "date": "2009-10-08T10:42:32.928+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I would put it into contrib\n\n+1, I'll do that.\n\nbq. To copy the files it should use the directory abstraction lay and not use java.io directly.\n\nI agree, that'd be nice, but I don't think really necessary before committing... it can be another future improvement.  But, we should not the limitations of the tool; I'll add javadocs.\n\nJason do you want to address any of these issues now (before committing to contrib)?",
            "date": "2009-10-08T11:53:18.933+0000",
            "id": 4
        },
        {
            "author": "Mark Miller",
            "body": "bq. To copy the files it should use the directory abstraction lay and not use java.io directly.\n\nI'd use Channels instead - generally much faster.",
            "date": "2009-10-08T12:03:51.647+0000",
            "id": 5
        },
        {
            "author": "Mark Miller",
            "body": "bq. So I guess I'm -0 on this index splitting method, because I think we can do it better.\n\nImprovements welcome :) No reason not to start somewhere though.",
            "date": "2009-10-08T12:05:22.174+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "bq. No reason not to start somewhere though.\n\n+1\n\nProgress not perfection!",
            "date": "2009-10-08T12:12:26.685+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "New patch attached: move to contrib/misc, renamed TestFileSplitter -> TestIndexSplitter, added javadocs noting the limitations, added CHANGES entry.  I'll commit shortly.",
            "date": "2009-10-08T12:19:45.502+0000",
            "id": 8
        },
        {
            "author": "Mark Miller",
            "body": "small opt - you might switch it to reuse the buffer between files.",
            "date": "2009-10-08T12:46:13.398+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "bq. small opt - you might switch it to reuse the buffer between files.\n\nOK I just committed that!",
            "date": "2009-10-08T12:52:31.853+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Jason!",
            "date": "2009-10-08T12:52:45.947+0000",
            "id": 11
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "Here's my submission to the index splitting race ;) This version implements the multi-pass method that uses loops of delete/addIndexes/undelete.",
            "date": "2009-10-08T20:28:13.016+0000",
            "id": 12
        },
        {
            "author": "Mark Miller",
            "body": "Nice! Lets add it to the mix - I'm guessing Jason's is quite a bit faster for splitting segs and this one nicer in that it can split indivd segs. Do we keep two tools or merge them into one with options?",
            "date": "2009-10-08T20:37:43.735+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "Really cool!",
            "date": "2009-10-08T20:38:49.991+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "Excellent!",
            "date": "2009-10-08T20:39:13.136+0000",
            "id": 15
        },
        {
            "author": "Uwe Schindler",
            "body": "Small optimization for this one: You even do not need a bitset or explicite delete/undelete operations, it can be done inline. Just put the logic into isDeleted() [e.g. modulo or range comparison] and let the TermPositions also check isDeleted().",
            "date": "2009-10-08T20:47:43.491+0000",
            "id": 16
        },
        {
            "author": "Uwe Schindler",
            "body": "Test fails here (I applied the patch to contrib/misc, but that should be no difference):\n{code}\n    [junit]\n    [junit] Testsuite: org.apache.lucene.index.TestMultiPassIndexSplitter\n    [junit] Tests run: 2, Failures: 0, Errors: 2, Time elapsed: 1,11 sec\n    [junit]\n    [junit] ------------- Standard Error -----------------\n    [junit] Writing part 1 ...\n    [junit] Writing part 1 ...\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testSplitRR(org.apache.lucene.index.TestMultiPassIndexSpli\ntter):  Caused an ERROR\n    [junit] null\n    [junit] java.lang.AssertionError\n    [junit]     at org.apache.lucene.index.SegmentMerger.mergeTermInfos(SegmentM\nerger.java:600)\n    [junit]     at org.apache.lucene.index.SegmentMerger.mergeTerms(SegmentMerge\nr.java:571)\n    [junit]     at org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.jav\na:152)\n    [junit]     at org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.jav\na:128)\n    [junit]     at org.apache.lucene.index.IndexWriter.addIndexes(IndexWriter.ja\nva:3367)\n    [junit]     at org.apache.lucene.index.MultiPassIndexSplitter.split(MultiPas\nsIndexSplitter.java:92)\n    [junit]     at org.apache.lucene.index.TestMultiPassIndexSplitter.testSplitR\nR(TestMultiPassIndexSplitter.java:60)\n    [junit]\n    [junit]\n    [junit] Testcase: testSplitSeq(org.apache.lucene.index.TestMultiPassIndexSpl\nitter): Caused an ERROR\n    [junit] null\n    [junit] java.lang.AssertionError\n    [junit]     at org.apache.lucene.index.SegmentMerger.mergeTermInfos(SegmentM\nerger.java:600)\n    [junit]     at org.apache.lucene.index.SegmentMerger.mergeTerms(SegmentMerge\nr.java:571)\n    [junit]     at org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.jav\na:152)\n    [junit]     at org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.jav\na:128)\n    [junit]     at org.apache.lucene.index.IndexWriter.addIndexes(IndexWriter.ja\nva:3367)\n    [junit]     at org.apache.lucene.index.MultiPassIndexSplitter.split(MultiPas\nsIndexSplitter.java:92)\n    [junit]     at org.apache.lucene.index.TestMultiPassIndexSplitter.testSplitS\neq(TestMultiPassIndexSplitter.java:102)\n    [junit]\n    [junit]\n    [junit] Test org.apache.lucene.index.TestMultiPassIndexSplitter FAILED\n    [junit] Testsuite: org.apache.lucene.index.TestTermVectorAccessor\n    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 1,079 sec\n{code}",
            "date": "2009-10-08T21:28:37.852+0000",
            "id": 17
        },
        {
            "author": "Uwe Schindler",
            "body": "Here is my inline version without OpenBitSet. The test results are the same (does not pass at same position), but shows, what I meant.\n\nPatch contains contrib/misc path prefix.",
            "date": "2009-10-08T22:01:06.815+0000",
            "id": 18
        },
        {
            "author": "Jason Rutherglen",
            "body": "I'm using the IndexSplitter to divide a 100GB index into roughly equals parts and deploying into production.  Then will clean up the patch.  \n\nI'm not sure why we'd want to use FSDir to copy files as the input parameters are filesystem paths?",
            "date": "2009-10-08T22:45:49.521+0000",
            "id": 19
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "Now, the mystery is why this test passed when executed in Eclipse - that assert should've tripped then as well. I remember now why I used bitsets - we actually need to know the number of deleted docs to return proper value in IR.numDocs(), and this value is not easy to calculate without actually doing this intersection. Your version looked more elegant, but it still tripped that assert (for good reason). I fixed my version so that it passes the tests when executed through ant (and it still passes in Eclipse, huh .. ;) ).",
            "date": "2009-10-09T00:05:30.573+0000",
            "id": 20
        },
        {
            "author": "Uwe Schindler",
            "body": "Ah ok, I didn't look into the test failure yesterday (was too late in the evening), I only wanted to make a quick design and if it would generally work.\nBut you are right, the numDocs() return value is incorrect, leading to a failure in this test. But as the test pass in your test environment, the assertion in the SegmentMerger seems not important for functionality. So in general my code and your first code would work correct. I do not know how costly the initial building of the BitSet used for the input reader's deleted docs is, but one possibility would be to only build/use the additional bitset, if hasDeletions() on the original index returns true.\n\nThanks for clarifying.",
            "date": "2009-10-09T08:51:38.600+0000",
            "id": 21
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "The test passed in Eclipse only - \"ant test\" ran from cmdline didn't pass without this fix, so I suspect my Eclipse is to blame for hiding the problem. Re: lazy allocation of bitset - good point, I'll make this change.",
            "date": "2009-10-09T09:28:58.682+0000",
            "id": 22
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "As suggested by Uwe, don't allocate the old deletions bitset if there are no deletions.",
            "date": "2009-10-09T09:47:59.959+0000",
            "id": 23
        },
        {
            "author": "Michael McCandless",
            "body": "Good progress!  Andrzej, how about you go ahead & commit yourself?",
            "date": "2009-10-09T10:00:39.068+0000",
            "id": 24
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "I moved the files in this patch to contrib/misc and updated the contrib/CHANGES.txt. If there are no objections I'll commit it soon.",
            "date": "2009-10-09T11:16:04.507+0000",
            "id": 25
        },
        {
            "author": "Koji Sekiguchi",
            "body": "I added small fix. If we have 13 docs (docid=0,1,2,...,12) and numParts=3, 12th doc is missing with -seq mode. I changed this:\n\n{code}\n// above range\nfor (int j = hi; j < maxDoc; j++) {\n   input.deleteDocument(j);\n}\n{code}\n\nto:\n\n{code}\n// above range\nif( i < numParts - 1 ){\n  for (int j = hi; j < maxDoc; j++) {\n     input.deleteDocument(j);\n  }\n}\n{code}\n",
            "date": "2009-10-10T07:41:47.156+0000",
            "id": 26
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "Indeed, thanks for the fix - I'll commit this.",
            "date": "2009-10-13T14:44:02.190+0000",
            "id": 27
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "Committed revision 824798.",
            "date": "2009-10-13T14:57:27.509+0000",
            "id": 28
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Andrzej!",
            "date": "2009-10-13T15:14:38.823+0000",
            "id": 29
        }
    ],
    "component": "core/index",
    "description": "If an index has multiple segments, this tool allows splitting those segments into separate directories.  ",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1959",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Trivial",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Index Splitter",
    "systemSpecification": true,
    "version": "2.9"
}