{
    "comments": [
        {
            "author": "Hoss Man",
            "body": "It's all yours Erick.",
            "date": "2009-11-13T21:58:16.819+0000",
            "id": 0
        },
        {
            "author": "Erick Erickson",
            "body": "LuceneTestCaseJ4 should replace LuceneTestCase. There's a bit of overkill here to emulate the override of runBare in LuceneTestCase, but I thought it was worth it to work out the mechanisms.\n\nWe'll need to put the lucene 4.7 jar in the right place.",
            "date": "2009-11-15T01:40:50.610+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "One thing that would also be good:\nWe have LocalizedTestCase, which has the possibility to run each test for all available Locales (it overrides currently runBare() and iterates while setting Locale.setDefault()). As this test should only be ran for specific methods, how about adding a annotation in addition to @Test (with Retention(\"method\") like @TestLocalized.\n\nWhat to do with BaseTokenStreamTestCase? In 2.9 it had also overridden runBare(), but not anymore (because we only have the new TS API anymore), but this is also a typical example when we want to rerun tests multiple times. One on our plan is that this test now runs all analyzer test for different default versions (iterate over Version enum constants). We need then something like @TestAllVersions or something like that. If we jump to JUnit4, we should use the new features for a more elegant solution of these multiple-run tests.\n\nOne note: It would be good to *not* reformat the whole tests with an Eclipse cleanup, just change the lines you modified, not reformat everything or organize imports and so on. Its hard to find out what has changed.",
            "date": "2009-11-15T11:15:50.157+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "Is there some way to use Junit4 parameterized tests to do this LocalizedTestCase-type thing, so we don't have to override runBare()?\n",
            "date": "2009-11-15T13:45:11.857+0000",
            "id": 3
        },
        {
            "author": "Erick Erickson",
            "body": "Well, it all depend on how you feel about 10 seconds as far as LocalizedTestCase is concerned.\n\nJUnit4 is really not built to run some tests in a class with the @Parameterized notation and some not, it runs all the tests in the class with all the parameters. In the case of TestQueryParser, which is the only test class I saw that made use of the \"include some tests but not others' in LocalizedTestCase, I hacked in running all the tests with all the locales available (152 in my case). Which pushes the number of tests in that one class up over 4,000 FWIW.\n\nRunning that test case went from around 5 seconds to around 15 seconds on my 2 year old Macbook Pro, from inside IntelliJ.\n\nI don't think it's worth trying to refactor that class into two classes, one that has all the tests run with all the locales and one that has the rest of the tests run only with the default locale (which is how I read the code in LocalizedTestcase) for 10 seconds worth of time savings. One could emulate the old process of excluding some tests by returning immediately from those tests that *weren't* intended to be run with all locales if the current locale wasn't the default, but I don't see that as worth the effort, although I could be convinced otherwise if people feel strongly.\n\nI'll provide a patch for this if there are no objections later this week, perhaps I'll get a chance to look at BaseTokenStreamTestCase before then.\n\nThis will make LocalizedTestCase obsolete and I'll remove it in the patch.\n\n",
            "date": "2009-11-18T01:48:39.779+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nI don't think it's worth trying to refactor that class into two classes, one that has all the tests run with all the locales and one that has the rest of the tests run only with the default locale (which is how I read the code in LocalizedTestcase) for 10 seconds worth of time savings. One could emulate the old process of excluding some tests by returning immediately from those tests that weren't intended to be run with all locales if the current locale wasn't the default, but I don't see that as worth the effort, although I could be convinced otherwise if people feel strongly.\n{quote}\n\nHi, the current behavior is a little silly.\nI thought it would be user-friendly to run the default locale first, then all the other locales (including a duplicate run of the default locale).\nThis way if you broke a test, you would see failures in your native language/format rather than some very strange language.\n\nOn the other hand, by using LocalizedTestCase, you are saying 'hey i am saying this thing has locale-sensitive behavior and it better work', so in my opinion, getting rid of this 'first run tests under default locale' doesn't harm a thing.\ninstead, just run under all locales, or maybe sort them so the default one is first, or something else?",
            "date": "2009-11-18T02:17:14.750+0000",
            "id": 5
        },
        {
            "author": "Erick Erickson",
            "body": "I was thinking more about TestQueryParser. One of the features of the\ncurrent setup is that you specify which tests in a class you want to have\nrun under all locales. Tests not in that list are run only under the default\nlocale.Always assuming I'm reading things right...\n\nI don't see a clean way to emulate that part of the behavior without either\nrefactoring or introducing a test in the tests we don't want to run under\nall locales and aborting early.\n\nBut I think we're finding different ways to agree here. I'm interpreting\nyour comments that running all the tests in the class is OK at least for\nnow...\n\nBut I did notice last night that a number of tests in contrib reference\nLocalizedTestCase (I have two separate projects, core and contrib so it\nwasn't obvious until I ran the ant task). I'll look into those tonight or\ntomorrow night.\n\nErick\n\n\n",
            "date": "2009-11-18T13:43:42.713+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nI was thinking more about TestQueryParser. One of the features of the\ncurrent setup is that you specify which tests in a class you want to have\nrun under all locales. Tests not in that list are run only under the default\nlocale.Always assuming I'm reading things right..\n{quote}\n\nErick, oh I am sorry, I completely misread your comment!\n\nThis feature that allows only a subset of tests to be run \"localized\" where the others will be run \"normally\" is just a performance optimization.\nall tests should (have not checked since 2.9) pass under all locales.\n\n{quote}\nBut I did notice last night that a number of tests in contrib reference\nLocalizedTestCase (I have two separate projects, core and contrib so it\nwasn't obvious until I ran the ant task). I'll look into those tonight or\ntomorrow night.\n{quote}\n\nYes, I do feel we should keep LocalizedTestCase. It is handy, we might use it in more places to prevent test failures in other locales for new code.\nBut this \"allowing only a subset of tests to be test in a localized way\" is only a performance optimization.\nIf there is some test class that is really slow because all the tests are run under every locale, perhaps the locale-sensitive tests should be refactored into a separate test class that extends LocalizedTestCase.\nThe ones that are not locale-sensitive could be in a test class that extends LuceneTestCase\n",
            "date": "2009-11-18T13:51:20.178+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "I already made a propsal for LocalizedTestCase: Just mark all test to run under all Locales with a Annotation like @AllLocales.",
            "date": "2009-11-18T14:27:48.620+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "bq. I already made a propsal for LocalizedTestCase: Just mark all test to run under all Locales with a Annotation like @AllLocales. \n\nlooks like Parameterized supports limiting params on a per-method basis via annotation?: http://junit.org/apidocs/org/junit/runners/Parameterized.Parameters.html",
            "date": "2009-11-18T15:10:50.633+0000",
            "id": 9
        },
        {
            "author": "Erick Erickson",
            "body": "I think you're mis-reading this. This is the annotation for the static\nmethod that return a list of parameters, not for a method that is an actual\ntest.....\n\nThe thing that causes the framework to gather the list and run test for each\nelement on the list is the @RunWith annotation on the class AFAIK.\n\nOr I'm misreading it....\n\nErick\n\n\n",
            "date": "2009-11-18T15:35:43.484+0000",
            "id": 10
        },
        {
            "author": "Erick Erickson",
            "body": "Frankly, I don't see how that would work without getting into the guts of\nthe @RunWith(value = Parameterized.class) Junit4 annotation. As I understand\nit, that annotation *on the class* causes the framework to make a call to\nthe static method that provides a list of parameters (annotated with\n@Parameters). The framework then takes the returned list and, *for each\nelement in the list* calls a constructor with that element and runs all the\ntests in the class.\n\nSo annotating a test with @AllLocales would somehow have to get in there and\nchange what the framework does. No doubt it's do-able, but until I see more\nthan 10 seconds difference in running the tests I'm not sure it's worth it.\nNor would I advocate altering the behavior of the framework for back-compat,\nI'd far rather refactor the tests into those that run for all locales and\nthose that don't.\n\nI suppose one could to the inverse, that is create an annotation\n@DefaultLocaleOnly that aborts early if the locale isn't the default, but\nagain I think the first approach I'd advocate would be to work within the\nframework until it was too painful....\n\nFWIW\nErick\n\n\n",
            "date": "2009-11-18T15:35:44.430+0000",
            "id": 11
        },
        {
            "author": "Erick Erickson",
            "body": "{quote}\nYes, I do feel we should keep LocalizedTestCase. It is handy, we might use\nit in more places to prevent test failures in other locales for new code.\n{quote}\n\nLight went off when walking around. I think I can just change the\nLocalizedTestCase class and put the @RunWith() and @Parameters *there*.\nWhich makes waaaaaay more sense than what I was doing which was putting\nthose in every subclass of the current LocalizedTestCase. Doh! I'll take a\npeek tonight. Although last night I was thinking \"Gee, this is\nrepetitive\"....\n\nThere are only two classes in core that use LocalizedTestCase, but there are\nseveral in contrib too. They'll all require the @Test annotation if I munge\nLocalizedTesCase, but that should be the only change necessary then,\nassuming we're content to run all the locales past all the test cases in all\nderived classes.....\n\nHmmmm, why was subclassing invented again? Something about putting common\nbehavior in one place or some nonsense like that <G>.\n\nErick\n\n\n",
            "date": "2009-11-18T17:11:40.731+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "We have a second place (I did not implement this for 3.0, because no time), we need to sometimes test something for all Version enum constants. So @Parameters would return EnumSet.allOf(Version.class) and the ctor of this TestCase would get the version, and store it per instance. Tests would then run for each possible version to test compatibility.\n\nProblem, it interferes with LoalizedTestCase, because e.g. QueryParser needs a test in all versions (n), but also in all Locales (m). Produces n x m test runs *arrrgh*. Any idea? On the other hand, TestHighlighter only needs the version iteration to test fully.",
            "date": "2009-11-18T17:21:26.072+0000",
            "id": 13
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, can you elaborate more on how the Version testing would work?\n\ndo you mean the case where you have unchanged behavior across all versions, and you want to run the test against all of them, but then some tests only apply to specific versions?\n\nbq. Problem, it interferes with LoalizedTestCase, because e.g. QueryParser needs a test in all versions , but also in all Locales (m). Produces n x m test runs arrrgh. Any idea?\n\nat least the old tokenstream api is done, imagine if you wanted to test version, locales, and tokenstream api :)\n",
            "date": "2009-11-18T17:27:54.622+0000",
            "id": 14
        },
        {
            "author": "Erick Erickson",
            "body": "Well, last night I changed LocalizedTestCase to do the @RunWith and\n@Parameterized thing and it works just fine with a minimal change to\nsubclasses, mainly adding @Test and a c'tor with a Locale parameter. Total,\nit adds probably a minute to the test run.\n\nAbout the cross product of versions and locales. The @Parameterized thingy\nreturns a list of Object[], where the elements of the list are matched\nagainst a c'tor. So if each object[] in your list has, say, an (int, float,\nint), then as long as you have a matching c'tor with a signature that takes\nan (int, float, int) you're good to go. So to handle the mXn case you\nmentioned, if your @Parameters method returned a list of object[], one\nobject[] for each <Locale, Version> pair, you'd get all your Locales run\nagainst all your versions.\n\nWhether we *want* this to happen or not is another question. It's a\nworthwhile question whether we really *need* to run all the possible locales\nor if there's a subset of locales that would serve.\n\nIt's kind of ironic that I have a patch waiting to be applied that cuts down\non the time it takes to run the unit tests and another patch that adds to\nthe time it takes. Two steps forward, one step back and a jink sideways just\nfor fun.....\n\nBest\nErick\n\n\n",
            "date": "2009-11-20T01:43:41.059+0000",
            "id": 15
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nIt's a worthwhile question whether we really need to run all the possible locales\nor if there's a subset of locales that would serve.\n{quote}\n\nI won't rant too much on this, except to say that before this localizedtestcase,\nvarious parts failed under say, only Korean, or only Thai locale, it was always a corner case.\n\nI think its important that someone from say Korea, can download lucene source code,\nand run 'ant test'. how else are they supposed to contribute if this does not work?",
            "date": "2009-11-20T02:37:19.968+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "Can we, for this issue, focus on not altering what's tested, ie, simply cutover to juni4?  And then open new issues for, eg, parameterizing tests across different Versions?  If we do that, then Erick if you post your latest patch (that cuts over LocalizedTestCase -> new junit4 capabilities), then is that committable?",
            "date": "2009-11-26T10:04:45.069+0000",
            "id": 17
        },
        {
            "author": "Erick Erickson",
            "body": "Hold off on this patch until I get a chance to submit a new one, we're straightening out LUCENE-1844 interdependencies between patches.....",
            "date": "2009-11-26T15:12:49.918+0000",
            "id": 18
        },
        {
            "author": "Erick Erickson",
            "body": "See JIRA comments",
            "date": "2009-11-29T17:58:43.000+0000",
            "id": 19
        },
        {
            "author": "Erick Erickson",
            "body": "Darn it! I'll get the comments right sometime and not have to retype them after making an attachment....\n\nAnyway, this patch allows us to use Junit4 constructs as well as Junit3 constructs. It includes a sibling class to LuceneTestCase called LuceneTestCaseJ4 that provides the functionality we used to get from LuceneTestCase.\n\nWhen creating Junit4-style tests, preferentially import from org.junit rather than from junit.framework.\n\nJunit-3.8.2.jar may (should?) be removed from the distro, all tests run just fine under Junit-4.7,jar, which is attached to this issue. I wrote a little script that compares the results of running the tests and we run exactly the same number of TestSuites and each runs exactly the same number of tests, so I'm pretty confident about this one. I may be wrong, but I'm not uncertain. Single data-points aren't worth much, but on my Macbook Pro, running under Junit4 took about a minute longer than Junit3 (about 23 1/2 minutes). Which could have been the result of my Time Machine running for all I know....\n\nAll the tests in test...search.function have been converted to use LuceneTestCaseJ4 as an exemplar. I've deprecated LuceneTestCase to prompt people. When you derive from LuceneTestCaseJ4, you *must* use the @Before, @After and @Test annotations to get the functionality you expect, as must *all* subclasses. So one gotcha people will surely run across is deriving form J4 and failing to put @Test.... \n\nConverting all the tests was my way of working through the derivation issues. I don't particularly see the value in doing a massive conversion just for the heck of it. Unless someone has a real urge. More along the lines of \"I'm in this test anyway, lets upgrade it and add new ones\".\n\nWhat about new tests? Should we encourage new patches to use Junit4 rather than Junit3? If so, how?\n\nI've noticed the convention of putting underscores in front of some tests to keep them from running. The Junit4 convention is the @Ignore annotation, which will cause the @Ignored tests to be reported (something like 1300 successful, 0 failures, 23 ignored), which is a nice way to keep these from getting lost in the shuffle.\n\nWhen this gets applied, I can put up the patch for LocalizedTestCase and we can give that a whirl....\n",
            "date": "2009-11-29T18:19:18.386+0000",
            "id": 20
        },
        {
            "author": "Michael McCandless",
            "body": "Anyone have any concerns upgrading to Junit4?  I plan to commit in a few days...",
            "date": "2009-12-03T17:34:11.552+0000",
            "id": 21
        },
        {
            "author": "Karthik K",
            "body": "+1 w.r.t JUnit 4 .\n\nUnrelated to this - but there is another patch - LUCENE-2065 to port the existing tests to Java 5 generics . May be - somebody can have a look at it before it becomes out of sync with the trunk altogether.",
            "date": "2009-12-03T18:57:35.089+0000",
            "id": 22
        },
        {
            "author": "Michael McCandless",
            "body": "bq.  but there is another patch - LUCENE-2065 to port the existing tests to Java 5 generics\n\nAhh thanks for the reminder -- I can take this one as well, but, there will be conflicts b/w the two patches, I think.  Should we do the generics first (simpler change, but touches many files), and then the junit4 upgrade?",
            "date": "2009-12-03T20:13:51.794+0000",
            "id": 23
        },
        {
            "author": "Karthik K",
            "body": "|  \t Ahh thanks for the reminder - I can take this one as well, but, there will be conflicts b/w the two patches, I think. Should we do the generics first (simpler change, but touches many files), and then the junit4 upgrade?\n\nPersonally I favor the generics patch can go in first since as mentioned - it is a large patchset but very simple in nature. I would be happy to rewire this patch ( 2037) once that goes into the tree,  just in case. ",
            "date": "2009-12-04T08:07:24.243+0000",
            "id": 24
        },
        {
            "author": "Karthik K",
            "body": "Revised patch in sync with trunk in place. \n\nTODO: \n\n* TestCustomScoreQuery\n* TestFieldScoreQuery\n* TestDocValues \n\npatches have been removed due to conflicts. \n\nShould be able to revisit them separately again soon. \n\n",
            "date": "2009-12-04T20:22:43.696+0000",
            "id": 25
        },
        {
            "author": "Karthik K",
            "body": "Submitting revised patch to fix test failure due to the necessity of no-arg ctor in TestCustomQuery . ",
            "date": "2009-12-04T20:32:04.486+0000",
            "id": 26
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Kay Kay.  Erick, once you've had a chance to review/iterate, I plan to commit... then we can make use of junit4 features in our tests.",
            "date": "2009-12-05T09:47:55.402+0000",
            "id": 27
        },
        {
            "author": "Erick Erickson",
            "body": "Had enough time this morning to reconcile this with Kay Kay's changes,\n\nAll tests pass.\n\nJunit 3.X no longer necessary, running with Junit 4.7 jar runs junit 3 style tests as well as annotated Junit4 style tests.\n\nIt's preferable (but not necessary) to import from org.junit rather than junit.framework.",
            "date": "2009-12-05T14:57:46.561+0000",
            "id": 28
        },
        {
            "author": "Michael McCandless",
            "body": "OK patch looks good, thanks Erick & Kay Kay!  I'll commit shortly.",
            "date": "2009-12-05T18:23:50.607+0000",
            "id": 29
        },
        {
            "author": "Erick Erickson",
            "body": "Removed unnecessary derivation from TestWatchman.\n\nCorrected minor typo in comment.",
            "date": "2010-02-26T02:05:10.411+0000",
            "id": 30
        },
        {
            "author": "Uwe Schindler",
            "body": "I just committed this.\n\nOne quetsion: In JUnit3, the call to getName() always created a correct testName (because JUnit3 took care about the current test running). If I inject one bug into a random test using newRandom() that is not using the ctor with name param, the additional error message about the random seed simply prints \"\" as test name. In the past this worked. Ideally it should print ot the current @Test method name as before.\n\nHow to do this? I would like to have this and remove the getName() stuff from the class.",
            "date": "2010-02-26T07:37:10.394+0000",
            "id": 31
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi Erik,\n\nI have [after I understood the code  :-) ] rewritten the TestWatchman code to now only work inside LuceneTestCaseJ4, no reflection use and added a startup(), that simply sets the correct test name in the enclosing class. I see no usage in making the InterceptTestCase public, as it is only used inside LuceneTestCaseJ4. If a subclass or localized one needs this watchman, too, you can siply create a second one. I also made the field final.\n\nNow the tests for random failures behave like before. I would like to commit this soon. This change also affects the uncaught exception handler.",
            "date": "2010-02-26T07:59:38.093+0000",
            "id": 32
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 916685",
            "date": "2010-02-26T14:02:24.965+0000",
            "id": 33
        },
        {
            "author": "Erick Erickson",
            "body": "Uwe:\n\nYou were asking about getName in LuceneTestCaseJ4. It appears that you've taken care of this, is there still anything to do? There's no longer a c'tor that takes the test name.\n\nBut I did some poking around and came up with the following from \"someplace on the web\". \n\nThe only two place I could find that used getName were TestFieldScoreQuery and TestOrdValues. This bit of code works if you put it in these classes.\n\n private String testName() {\n    return getClass().getName()+\".\"+ name.getMethodName(); // was getName() from LuceneTestCaseJ4...\n  }\n\n  @Rule\n  public final TestName name = new TestName();\n\nSee:\nhttp://kentbeck.github.com/junit/javadoc/4.7/org/junit/rules/TestName.html Note that this site is better than anything I could find at junit.org....\n\nOnce  I found that, I thought \"gee, if I put that in the base class, it would be available to everyone\". Which is exactly what you made LuceneTestCaseJ4.getName() do <G>. But at least I found Kent Beck's version of the docs, which is a plus...\n\nSo I guess there's nothing to do as far as getName is concerned.... If there is, let me know....\n\nErick\n",
            "date": "2010-02-27T01:58:35.754+0000",
            "id": 34
        },
        {
            "author": "Uwe Schindler",
            "body": "Erick,\n\nthats already fixed in trunk with my last commit, as you noticed! It exactly does what also rules.TestName does :-) -- I found this class later too and realized that it does the same -- only that lucene has the method in the base class for better migration experience :-).\n\nYesterday I also wrote an extra test assertion, that verifies, that the ported test class has all methods starting with \"test\" annotated with @Test. Robert and me wants to maybe apply this patch during the migration phase when developers are not yet using Junit4 so long and forget to add @Test. The path is very rough and maybe optimized (if @BeforeClass could be used, but cannot as static).\n\nThe string-ctors are not used in lucene, as the testName in Lucene should be automatically from the current method. The additional ctors in Lucene's tests were only very very very old junit3 relicts (later versions of junit3 also do not need it anymore, they set the test name after instantiating).",
            "date": "2010-02-27T08:16:02.820+0000",
            "id": 35
        },
        {
            "author": "Uwe Schindler",
            "body": "Here the patch for the additional assertion to test if all ported test classes have all @Test added to all methods starting with \"test\".",
            "date": "2010-02-27T08:18:26.685+0000",
            "id": 36
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed the assertion patch revision: 922887",
            "date": "2010-03-14T16:31:51.532+0000",
            "id": 37
        }
    ],
    "component": "core/other",
    "description": "Now that we're dropping Java 1.4 compatibility for 3.0, we can incorporate Junit4 in testing. Junit3 and junit4 tests can coexist, so no tests should have to be rewritten. We should start this for the 3.1 release so we can get a clean 3.0 out smoothly.\n\nIt's probably worthwhile to convert a small set of tests as an exemplar.\n\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2037",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Allow Junit4 tests in our environment.",
    "systemSpecification": true,
    "version": "3.1"
}