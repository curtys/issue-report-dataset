{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Patch.\n\nIt was a small change to Builder, to accept same input multiple times in a row.  I added an optional \"merge\" method to Outputs, and made a new UpToTwoIntOutputs class that handles one or two ints per input.",
            "date": "2011-04-30T21:00:31.694+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "New patch; no change -- just more friendly for \"patch\" (looks like svn diff not hg diff).",
            "date": "2011-04-30T22:08:29.513+0000",
            "id": 1
        },
        {
            "author": "Dawid Weiss",
            "body": "Looks good to me. One note: possible NPE here (-null passes all instanceofs-):\n{code}\n+    @Override\n+    public boolean equals(Object _other) {\n+      if (_other instanceof TwoLongs) {\n+        final TwoLongs other = (TwoLongs) _other;\n+        return first == other.first && second == other.second;\n+      } else {\n+        return false;\n+      }\n+    }\n{code}",
            "date": "2011-05-03T08:17:33.892+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. null passes all instanceofs\n\nDefinitely NOT! [http://stackoverflow.com/questions/2950319/is-null-check-needed-before-calling-instanceof]",
            "date": "2011-05-03T08:23:55.095+0000",
            "id": 3
        },
        {
            "author": "Dawid Weiss",
            "body": "Handslap! And this is why you should always refresh your memory before posting something that lasts for millenia... Crawling back to my cave right now.",
            "date": "2011-05-03T08:34:37.078+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": ":-) It always confuses me, too. But if you think more about it, it makes sense to return false. But it's the same always for me: Whenever I write equals() methods, this question pops up. But now I mostly copy code like the one above from other classes. But you have to note: The above equals() code is only 100% suitable for final classes, else it could happen that a subclass that extends some fields is equal. But thats more a theoretical discussion. E.g. Lucene's Queries always check this.getClass()==other.getClass().",
            "date": "2011-05-03T08:40:21.368+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Reopening -- this commit has generics violations in TestFSTs.",
            "date": "2011-05-13T20:36:47.640+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "I think we should just suppress the warning?  ",
            "date": "2011-05-13T20:42:21.104+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "After reviewing, this seems the only solution. The cast is guarded by the instanceof check, but compiler does not know this.\n\nOnly the (Object) cast in second param is not needed:\n\n{code}\n@SuppressWarnings(\"unchecked\") final Builder<Object> b = (Builder<Object>) builder;\nb.add(pair.input, _outputs.get(twoLongs.first));\nb.add(pair.input, _outputs.get(twoLongs.second));\n{code}",
            "date": "2011-05-13T21:23:44.567+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "OK thanks Uwe... I'll commit.",
            "date": "2011-05-13T21:27:45.172+0000",
            "id": 9
        }
    ],
    "component": "",
    "description": "For the block tree terms dict, it turns out I need this case.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3058",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "FST should allow more than one output for the same input",
    "systemSpecification": true,
    "version": ""
}