{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Attached patch.  Also adds an expert public String IndexReader.segString for debug purposes.",
            "date": "2009-12-15T10:48:43.112+0000",
            "id": 0
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Remove volatile from numDocs? All threads will hit some other sync sooner or later and see the value computed by the first (?few?).",
            "date": "2009-12-15T11:08:26.344+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Remove volatile from numDocs? All threads will hit some other sync sooner or later and see the value computed by the first (?few?).\n\nYeah I guess this would be fine.  Even if they don't see the value (ie they still see the stale -1), it's harmless if they recompute it and re-overwrite it.  So I'll remove volatile.",
            "date": "2009-12-15T11:20:08.412+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Backport",
            "date": "2010-05-30T12:27:37.682+0000",
            "id": 3
        },
        {
            "author": "Shay Banon",
            "body": "Mike, is there a reason why this is not backported to 3.0.2?",
            "date": "2010-05-30T19:34:49.633+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Shay it will be backported to 3.0.2.",
            "date": "2010-06-01T21:40:52.404+0000",
            "id": 5
        },
        {
            "author": "Shay Banon",
            "body": "Thanks!",
            "date": "2010-06-02T06:39:12.120+0000",
            "id": 6
        }
    ],
    "component": "core/index",
    "description": "Some concurrency improvements for NRT\n\nI found & fixed some silly thread bottlenecks that affect NRT:\n\n  * Multi/DirectoryReader.numDocs is synchronized, I think so only 1\n    thread computes numDocs if it's -1.  I removed this sync, and made\n    numDocs volatile, instead.  Yes, multiple threads may compute the\n    numDocs for the first time, but I think that's harmless?\n\n  * Fixed BitVector's ctor to set count to 0 on creating a new BV, and\n    clone to copy the count over; this saves CPU computing the count\n    unecessarily.\n\n  * Also strengthened assertions done in SR, testing the delete docs\n    count.\n\nI also found an annoying thread bottleneck that happens, due to CMS.\nWhenever CMS hits the max running merges (default changed from 3 to 1\nrecently), and the merge policy now wants to launch another merge, it\nforces the incoming thread to wait until one of the BG threads\nfinishes.\n\nThis is a basic crude throttling mechanism -- you force the mutators\n(whoever is causing new segments to appear) to stop, so that merging\ncan catch up.\n\nUnfortunately, when stressing NRT, that thread is the one that's\nopening a new NRT reader.\n\nSo, the first serious problem happens when you call .reopen() on your\nNRT reader -- this call simply forwards to IW.getReader if the reader\nwas an NRT reader.  But, because DirectoryReader.doReopen is\nsynchronized, this had the horrible effect of holding the monitor lock\non your main IR.  In my test, this blocked all searches (since each\nsearch uses incRef/decRef, still sync'd until LUCENE-2156, at least).\nI fixed this by making doReopen only sync'd on this if it's not simply\nforwarding to getWriter.  So that's a good step forward.\n\nThis prevents searches from being blocked while trying to reopen to a\nnew NRT.\n\nHowever... it doesn't fix the problem that when an immense merge is\noff and running, opening an NRT reader could hit a tremendous delay\nbecause CMS blocks it.  The BalancedSegmentMergePolicy should help\nhere... by avoiding such immense merges.\n\nBut, I think we should also pursue an improvement to CMS.  EG, if it\nhas 2 merges running, where one is huge and one is tiny, it ought to\nincrease thread priority of the tiny one.  I think with such a change\nwe could increase the max thread count again, to prevent this\nstarvation.  I'll open a separate issue....\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2161",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Some concurrency improvements for NRT",
    "systemSpecification": true,
    "version": ""
}