{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Patch.",
            "date": "2011-10-14T10:33:06.217+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "\nNew patch: I also added TermValDocValuesComparator, so you can\nsort-by-string when you indexed the non-sorted byte[] doc values types\n(var/fixed X straight/deref).  This is slower since it aways does a\n.compareTo on each ByteRef instead of using pre-sorted ords... but for\nsome apps this is a good tradeoff.  (This mirrors the two sort-by-Term\nfield comparators we have for field cache).\n\nI also cleaned up how we handle segments that had no doc values; this\nisn't necessarily an error condition because it could be the current\nsearch doesn't hit any docs in this segment.  I added methods in\nIndexDocValues to get a Source or SortedSource that always returns the\n\"default\" value for the type.\n\nI think this is ready!\n",
            "date": "2011-10-20T12:32:27.015+0000",
            "id": 1
        },
        {
            "author": "Simon Willnauer",
            "body": "mike, this looks good while I am not sure I understand all the comparators. I didn't look at it for too long but maybe you can add some comments how those readerGen arrays work?\n\nthere is one nocommit left in the patch though. I think you should go ahead though!\n\nsimon",
            "date": "2011-10-20T12:42:15.834+0000",
            "id": 2
        },
        {
            "author": "Simon Willnauer",
            "body": "mike, I looked at it again and found this api addition. You return a PackedInts.Reader from getDocToOrd() on SortedSource\n\n{code}\n/**\n * Returns the PackedInts.Reader impl that maps document to ord.\n */\npublic PackedInts.Reader getDocToOrd() {\n  return null;\n}\n\n{code}\n\nthis seems to be very specific to in-memory docvalues while we don't support direct source here. Can we maybe extract an interface from PackedInts.Reader & RandomAccessReaderIterator (those are already very similar) so we can simply use the reader interface for both on-disk and in-memory variants. then I think this API addition is fine. I don't like apis which are in-mem / on-disk only. ",
            "date": "2011-10-20T12:51:50.057+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Simon, I'll fix the nocommit and add some comments.. the\nord/BytesRef comparators are tricky...\n\nbq. this seems to be very specific to in-memory docvalues while we don't support direct source here. \n\nHmm, true; though I suspect sorting by a direct source will be rather\nslow.  Still I agree we should support it for completeness.\n\nbq. Can we maybe extract an interface from PackedInts.Reader & RandomAccessReaderIterator (those are already very similar) so we can simply use the reader interface for both on-disk and in-memory variants.\n\nOK I like your idea of using PackedInts.Reader for on-disk and\nin-memory variants; you shouldn't have to pull an enum from PackedInts\nif you just need the disk-based get.\n\nI'll open a new issue to do that refactoring first; I think we can\nremove the PackedInts.RandomAccessReaderIterator if we just let the\nReader.get throw IOE?  Lemme try to work up a patch.\n",
            "date": "2011-10-20T17:56:32.999+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Patch, syncing to trunk, and making it possible to sort off a direct source (though I don't think this is that useful in practice!).\n\nI think it's ready.",
            "date": "2011-11-07T19:19:23.207+0000",
            "id": 5
        }
    ],
    "component": "core/search",
    "description": "There are two sorted byte[] types with DocValues (BYTES_VAR_SORTED,\nBYTES_FIXED_SORTED), so you can index this type, but you can't yet\nsort by it.\n\nSo I added a FieldComparator just like TermOrdValComparator, except it\npulls from the doc values instead.\n\nThere are some small diffs, eg with doc values there are never null\nvalues (see LUCENE-3504).\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3518",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add sort-by-term with DocValues",
    "systemSpecification": true,
    "version": ""
}