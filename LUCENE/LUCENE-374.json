{
    "comments": [
        {
            "author": "Daniel Naber",
            "body": "Created an attachment (id=14735)\npatch to remove exception\n",
            "date": "2005-04-16T06:45:44.000+0000",
            "id": 0
        },
        {
            "author": "Daniel Naber",
            "body": "Are there objections against this patch? If not, I'm going to commit it.  \n  ",
            "date": "2005-04-17T08:57:35.000+0000",
            "id": 1
        },
        {
            "author": "Erik Hatcher",
            "body": "I'd like to have a test case added to Lucene that demonstrates this bug along with this patch that fixes \nit, but other than that I'm +1 on committing - looks reasonable to me.",
            "date": "2005-04-17T09:04:03.000+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "That fix was just a template.  The changes need to be made in multiple places.\nThere are currently 8 RuntimeExceptions thrown in FieldCacheImpl.java\nAfter a very quick look, it looks like only one is valid.\n\nThe only one I would leave in is: \"there are more terms than documents in field\"\n\nMost of them need the same fix.  getAuto() looks like it needs a different fix\n(a default fieldtype if there aren't any terms).\n\nFor tests, looks like one for each possible fieldtype + auto is needed. ",
            "date": "2005-04-17T09:54:22.000+0000",
            "id": 3
        },
        {
            "author": "Daniel Naber",
            "body": "I just see that there's another problem: the exception also occurs when you \nhave a field, but it isn't indexed. I think that's a common case and these \ncases should not be silently ignored. ",
            "date": "2005-04-17T19:43:04.000+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "> I just see that there's another problem: the exception also occurs when\n> you have a field, but it isn't indexed. I think that's a common case\n> and these cases should not be silently ignored. \n\nWhile this condition would be possible to check for, it would lead to some of\nthe same inconsistencies and problems as trying to ban sorting on a field that\ndoesn't exist.\n\nLucene doesn't restrict every field with the same name to be of the same type. \nField \"foo\" may be indexed for some documents and not indexed for others.  So we\nare back in the same situation of not knowing if the query is a bug, or if it's\njust that no documents with \"foo\" indexed currently exist in the index, but may\nin the future or may have in the past.\n\nSince Lucene is a search engine rather than a search server, we should strive to\nkeep it as flexible as possible to enable that many more applications to be\nbuilt on top of it. \n\nOnce this bug is fixed, I think FieldCacheImpl.java should have only one\nRuntimeException remaining.\n\n",
            "date": "2005-04-17T23:45:20.000+0000",
            "id": 5
        },
        {
            "author": "Daniel Naber",
            "body": "I now hesitate to commit this patch in its current form, as many people will \nbe confused when sorting doesn't give the right results (because a field isn't \nindexed) but doesn't return an error or warning either. I think we need a \nsmall logging framework inside Lucene to notify the developer about such \npotential problems. ",
            "date": "2005-04-18T01:59:35.000+0000",
            "id": 6
        },
        {
            "author": "cutting@apache.org",
            "body": "If someone searches for a field that has no values indexed then they will not\nfind anything, and no warning is issued.  Is it that different if they sort by a\nfield that has no values indexed?",
            "date": "2005-04-19T04:41:44.000+0000",
            "id": 7
        },
        {
            "author": "Daniel Naber",
            "body": "If we just remove the Exceptions, a non-indexed field will be ignored for \nsorting (i.e. it will be treated as if it was empty). So you'd get matches, \nbut they probably won't be sorted the way you expect. This is difficult to \ndebug without warnings, especially if there is more than one sort key and only \nsome of them are ignored. So yes, I think it's worse than getting 0 matches, \nwhich is at least a clear indication that something is wrong. ",
            "date": "2005-04-19T05:02:35.000+0000",
            "id": 8
        },
        {
            "author": "cutting@apache.org",
            "body": "Would it be more sensible to throw an exception only if both the sort field is\nunindexed and the search returns zero documents?  In other words, the exception\ncould be thrown when the sorter is used, not when it is constructed.\n",
            "date": "2005-04-19T05:14:45.000+0000",
            "id": 9
        },
        {
            "author": "Yonik Seeley",
            "body": "> This is difficult to debug without warnings\n\nI think these types of checks should be done in a separate place (or at least be\noptional somehow).  There are many other potential problems than sorting on a\nfield that doesn't exist... but all developers shouldn't have to pay the price\nin overhead or lack of flexibility.\n\nHow about a checkQuery() or a debugQuery() that could check for things like:\n  - searching on a non-indexed field\n  - sorting on a non-indexed field\n  - documents that have multiple terms for the sort field\n  - documents matching a query that have no term for the sort field\n",
            "date": "2005-04-19T09:57:00.000+0000",
            "id": 10
        },
        {
            "author": "Yonik Seeley",
            "body": "Updated my original patch from\nhttp://www.mail-archive.com/java-user@lucene.apache.org/msg00611.html\nwhich actually wasn't meant to be a complete patch, but just a template for one.\n\nThis patch removes the \"no terms in field\" exception for all the types except Auto, which people probably shouldn't use anyway.\nI think it's important for the reasons detailed in that thread.",
            "date": "2005-09-28T10:50:55.000+0000",
            "id": 11
        },
        {
            "author": "Yonik Seeley",
            "body": "Attaching latest version.\n\nI looked into TestSort to add some tests for this, and was surprised to see some tests that should have covered it: testEmptyIndex()\nIt turns out FieldCacheImpl special-cased an empty index with \"if (retArray.length > 0) {\"\n\nAfter removing only  those special-case checks from FieldCacheImpl, the tests fail (demonstrating the problem).\nAfter applying my full patch, all tests pass again.\n\nThis latest diff is a little hard to read because indentation changed due to the removal of the \"if\" test, but that's only difference between this and the last diff.\n",
            "date": "2005-09-28T11:33:44.000+0000",
            "id": 12
        },
        {
            "author": "Yonik Seeley",
            "body": "This patch is also needed  to ensure that searches on a multisearcher will be the same regardless of how documents are distributed among the subsearchers.",
            "date": "2005-10-21T11:07:37.000+0000",
            "id": 13
        },
        {
            "author": "Yonik Seeley",
            "body": "I cloned this bug to LUCENE-459 to capture the desire for warnings in certain circumstances.\nI don't think those concerns should hold up this patch, which fixes clearly inconsistent behavior.  If anyone still has concerns with this patch, speak up before it get's committed.",
            "date": "2005-11-10T11:45:40.000+0000",
            "id": 14
        },
        {
            "author": "Yonik Seeley",
            "body": "Patch applied.",
            "date": "2006-02-14T06:46:21.000+0000",
            "id": 15
        }
    ],
    "component": "core/search",
    "description": "While it's possible to search for fields that don't exist (you'll get 0 hits),  \nyou'll get an exception if you try to sort by a field that has no values. The  \nexception is this:  \n  \nif (termEnum.term() == null) {  \n  throw new RuntimeException (\"no terms in field \" + field);  \n}  \n  \nI'll attach a change suggested by Yonik Seeley that removes this exception. \n \nAlso, the if-condition above is incomplete anyway, so currently the exception \nis not always thrown (as termEnum .term() might well be != null but point to a \nterm in a different field already)",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-374",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "You cannot sort on fields that don't exist",
    "systemSpecification": true,
    "version": ""
}