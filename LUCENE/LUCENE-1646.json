{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "I agree it's bad that the root cause (stack trace) is discarded by the exception handler, so we should fix that, but I think adding the query text in the exception's message is in fact useful for debugging -- this exception will likely get captured & generically logged somewhere, only to be seen later at which point you really do want to know which query text caused it.",
            "date": "2009-05-20T11:03:27.258+0000",
            "id": 0
        },
        {
            "author": "Trejkaz",
            "body": "I guess that's true if you look at exceptions as a logging mechanism, but in our case it's a parsing exception for text coming from the user.  Because of this, our use case is for the user to get a useful error message, and it's not useful at all if we just tell them their entire query was bad.  Thus we have inserted improvements (in our subclass) to make it complain only about the fragment of the query which is actually a problem, so they know which part to fix.\n\nRelated, but is there any way it could at least be reduced to the portion of the query which caused the problem?   In a way it would be nice if ParseException had methods to get out the problematic fragment (my subclass has it...)  I'm guessing this is much easier for exceptions relating to values inside fields which otherwise parsed correctly, but a lot harder to do for exceptions from the parser proper.\n\n",
            "date": "2009-05-20T23:22:30.617+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I guess that's true if you look at exceptions as a logging mechanism, but in our case it's a parsing exception for text coming from the user. Because of this, our use case is for the user to get a useful error message, and it's not useful at all if we just tell them their entire query was bad. Thus we have inserted improvements (in our subclass) to make it complain only about the fragment of the query which is actually a problem, so they know which part to fix.\n\nI agree, in general an app ought to be catching this ParseException\nand messaging something much more succinct/digestible to the end\nuser.\n\nWhen QueryParser throws ParseException, it does attempt to explain\nwhat went wrong in many cases.  It sounds like you've modified it\nfurther to do a better job?  Is this something you could donate back?\n\nI agree we should make it easier to customize the ParseException, but\nI think by default having the exception message include the full query\nis useful for those apps that simply log the exception.  This way we\ncan have our cake and eat it too...\n\nbq. Related, but is there any way it could at least be reduced to the portion of the query which caused the problem? In a way it would be nice if ParseException had methods to get out the problematic fragment (my subclass has it...) I'm guessing this is much easier for exceptions relating to values inside fields which otherwise parsed correctly, but a lot harder to do for exceptions from the parser proper.\n\nIt seems like it already makes some effort here?  Eg it has\nattrs like currentToken, expectedTokenSequences,\netc., recorded when the exception is thrown.  And getMessage()\npulls from these attrs to build up the message?  Can you post a patch\nwith your improvements here?\n",
            "date": "2009-05-21T11:25:15.282+0000",
            "id": 2
        },
        {
            "author": "Trejkaz",
            "body": "Our improvements are (so far) specific to our subclass of QueryParser, in that we use it when getFieldQuery() gets a value which doesn't make sense for the given field.\n\nSo in a sense, in our case the query was parsed successfully by the parser, but the input was invalid within one of the fields.  As such our custom ParseException subclass has the field name and field value, but it isn't useful to the Lucene project as-is, as the only things throwing it are called from our subclass. :-(\n",
            "date": "2009-05-21T22:47:51.724+0000",
            "id": 3
        },
        {
            "author": "Hoss Man",
            "body": "As a general rule, code catching an execption and throwing a new exception with more details should (almost always) call initCause (unless the new Exception has a constructor that takes care of that part) to preserve all of the stack history.\n\nClient code that wants to get at the root exception can do so using getCause()\n\nIn QueryParser...\n{code}\n} catch (ParseException tme) {\n   // rethrow to include the original query:\n   ParseException e = new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n   e.initCause(tme);\n   throw e;\n}\n{code}\n\nIn Trejkaz's code, something like...\n{code}\n} catch (ParseException pexp) {\n   for (Throwable t = pexp; null != t; t = t.getCause()) {\n      if (t instanceof OurCustomException) {\n         takeActionOnCustomException((OurCustomException)t);\n      }\n      takeActionOnLuceneQueryParserException(exp)\n   }\n}\n{code}",
            "date": "2009-06-18T19:34:29.354+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "I agree Hoss; I'll fix QueryParser to initCause when it catches & rethrows.",
            "date": "2009-06-23T19:40:54.794+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Trejkaz and Hoss!",
            "date": "2009-06-23T19:55:48.717+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Mike: For LUCENE-1713, I recreated the QueryParser with javacc (because some changes in creation of RangeQueries), but the produced QueryParser.java did not contain your changes.\n\nI copied your initCause() lines to QueryParser.jj and then it worked, I commit this together with LUCENE-1713. \n\nBy the way: The query parser is only created correctly with JavaCC 4.1, version 4.2 produces some wrong escaped chars.",
            "date": "2009-07-04T09:08:12.630+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "Woops, thanks Uwe.",
            "date": "2009-07-04T09:33:22.405+0000",
            "id": 8
        }
    ],
    "component": "",
    "description": "We have subclassed QueryParser and have various custom fields.  When these fields contain invalid values, we throw a subclass of ParseException which has a more useful message (and also a localised message.)\n\nProblem is, Lucene's QueryParser is doing this:\n\n{code}\n    catch (ParseException tme) {\n        // rethrow to include the original query:\n        throw new ParseException(\"Cannot parse '\" +query+ \"': \" + tme.getMessage());\n    }\n{code}\n\nThus, our nice and useful ParseException is thrown away, replaced by one with no information about what's actually wrong with the query (it does append getMessage() but that isn't localised.  And it also throws away the underlying cause for the exception.)\n\nI am about to patch our copy to simply remove these four lines; the caller knows what the query string was (they have to have a copy of it because they are passing it in!) so having it in the error message itself is not useful.  Furthermore, when the query string is very big, what the user wants to know is not that the whole query was bad, but which part of it was bad.\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-1646",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "QueryParser throws new exceptions even if custom parsing logic threw a better one",
    "systemSpecification": true,
    "version": "2.4.1"
}