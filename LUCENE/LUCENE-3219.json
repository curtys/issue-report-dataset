{
    "comments": [
        {
            "author": "Simon Willnauer",
            "body": "+1",
            "date": "2011-06-20T08:54:18.122+0000",
            "id": 0
        },
        {
            "author": "Chris Male",
            "body": "First up patch which makes the majority of changes.\n\nI intend to commit SOLR-2533 first and then update this patch to incorporate the changes.\n\nAlso intend to change CachedArrayCreator.getSortTypeID() to CachedArrayCreator.getSortType()",
            "date": "2011-06-20T09:18:52.532+0000",
            "id": 1
        },
        {
            "author": "Chris Male",
            "body": "Patch updated to trunk.  Compiles and tests pass.  \n\nI intend to commit in the next day or so.",
            "date": "2011-06-20T17:14:46.640+0000",
            "id": 2
        },
        {
            "author": "Chris Male",
            "body": "Even better patch which CHANGES entry correct.",
            "date": "2011-06-20T17:17:34.457+0000",
            "id": 3
        },
        {
            "author": "Simon Willnauer",
            "body": "chris, patch looks good...\n\nsome minor comments:\n\n* I wonder if a parser could hold a Type so we could get rid of the if (parser instanceof FieldCache.$Parser) ?\n* in SearchWithSortTask I wonder if you could simply call Type.valueOf(typeString.toUpperCase()); - the less code the better :)\n\noverall looks good\n\nsimon",
            "date": "2011-06-20T18:33:52.558+0000",
            "id": 4
        },
        {
            "author": "Chris Male",
            "body": "Updated patch to incorporate Simon's suggestions:\n\n- SearchWithSortTask now uses SortField.Type.valueOf().  This changes the exception thrown to an IllegalArgumentException.\n- I haven't added Type to FieldCache.Parser since the constructor in SortField that accepts Parsers is deprecated and you can pull the Type from the CachedArrayCreator which is the preferred way of creating a SortField.  I did exploit this to reduce the code in the instanceof comparisons.",
            "date": "2011-06-21T02:37:47.391+0000",
            "id": 5
        },
        {
            "author": "Simon Willnauer",
            "body": "looks good to me. BTW. should we backport those changes?",
            "date": "2011-06-21T06:32:35.790+0000",
            "id": 6
        },
        {
            "author": "Chris Male",
            "body": "You'll have to guide me on the backwards compat issue since this is a break due to the fields being public and some methods changing from returning int to returning SortField.Type.",
            "date": "2011-06-21T06:51:14.635+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "This issue relates to LUCENE-3192, where I already proposed SortField.Type.\n\nIf we want to backport to 3.x this functionality, we should add deprecated references to the SortField.Type instances directly below SortField. This would make the code not binary backwards compatible, but in most cases a simple recompile should work (most usages are new SortField(\"priceInCent\", SortField.INT).",
            "date": "2011-06-21T07:05:11.897+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "At the end of the day, I am sure I will vote to leave it as it is in 3.x!\n\nSortField is heavy-used in Lucene client code and the backwards breaks without very sophisticated backwards layers are horrible to handle. It can be done, but I dont think its worth the work just for code beauty.",
            "date": "2011-06-21T07:10:03.850+0000",
            "id": 9
        },
        {
            "author": "Chris Male",
            "body": "For the reasons described above, I think its best we don't backport this change.  \n\nUwe, is the work here compatible with what you had planned in LUCENE-3192?  If so, I'll go ahead and commit this.",
            "date": "2011-06-21T07:34:32.736+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "Just commit this, the other issue is quite unrelated, I just had same idea.",
            "date": "2011-06-21T07:39:26.824+0000",
            "id": 11
        },
        {
            "author": "Chris Male",
            "body": "Committed revision 1138276.",
            "date": "2011-06-22T01:49:05.519+0000",
            "id": 12
        }
    ],
    "component": "core/search",
    "description": "When updating my SOLR-2533 patch, one issue was that the int value I had given my new type had been used by another change in the mean time.  Since we don't use these fields in a bitset kind of way, we can convert them to an enum.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3219",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Change SortField types to an Enum",
    "systemSpecification": true,
    "version": ""
}