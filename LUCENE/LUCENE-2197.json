{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "bq. Yet, according to the javadoc, the instance of CharArraySet should be passed to CharArraySet.copy (which is very fast for CharArraySet instances) instead of \"copied\" via \"new CharArraySet()\"\n\nWe shouldn't copy it at all.",
            "date": "2010-01-07T20:19:11.292+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "Comment from LUCENE-2094 the other issue:\nbq. To prevent provided set from being modified while they are in use in a filter the given set is copied and wrapped in an immutable instance of chararrayset.\n\nWe should really avoid this type of nannyism in Lucene.",
            "date": "2010-01-07T20:47:13.107+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "Here's a patch that reverts to the previous behavior of using the set provided.",
            "date": "2010-01-07T20:54:07.141+0000",
            "id": 2
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Here's a patch that reverts to the previous behavior of using the set provided. \nDoesn't seem to lead anywhere to discuss with the performance police when I look at the average size of your comments. :)\nThis was actually meant to be a \"pattern\" for analyzer subclasses so I won't be the \"immutability\" police here. Yonik, will you take this issue and commit?!\n\nbq. We should really avoid this type of nannyism in Lucene.\noh well this seems to me like a  void * is / isn't evil discussion - nevermind.",
            "date": "2010-01-08T09:11:58.881+0000",
            "id": 3
        },
        {
            "author": "Yonik Seeley",
            "body": "Sorry Simon... I think I just got fed up with stuff like this in the JDK over the years (that forces people to write their own implementations for best performance), and you happened to be the closest person at the time :-)\n\nRelated: I'm the one who added this to BooleanQuery some time ago:\n{code}\n  /** Returns the list of clauses in this query. */\n  public List<BooleanClause> clauses() { return clauses; }\n{code}\nYes, it probably should also say something like \"Don't modify - it may change the query\" to the comments.\nTo the software pedant, that's not safe and would probably be called bad design - but I strongly believe that our API should be for adults, and one should be able to introspect objects like Queries w/o suffering object allocations.  We should also continue to develop Lucene for *ourselves*, not for some mythic stupid user... I've seen too many bad design decisions based on \"this will confuse users\" arguments rather than \"this is confusing\".\n\nSometimes it comes down to people trying to solve a class of problems that others aren't even having issues with - I don't ever recall someone accidentally modifying the set after they passed it to the StopFilter, or someone accidentally modifying clauses() from BooleanQuery.\n\nI also disagree with checking all input parameters in many cases (things that could possibly be in someones inner loop and will throw an exception anyway).\n\nSay we have this piece of code:\n{code}\nboolean checkLength(String str) {\n  return str.length() < MY_MAX_LENGTH;\n}\n{code}\n\nI think it's silly to add an explicit null check like so (but you see plenty of code like that):\n{code}\nboolean checkLength(String str) {\n  if (str == null) {\n     throw new RuntimeException(\"Can't pass checkLength a null string\");\n  }\n  return str.length() < MY_MAX_LENGTH;\n}\n{code}\n\n\nThere.  Is that reply long enough for you ;-)",
            "date": "2010-01-08T15:10:51.642+0000",
            "id": 4
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Sorry Simon... I think I just got fed up with stuff like this in the JDK over the years (that forces people to write their own implementations for best performance), and you happened to be the closest person at the time \n:) no worries, thanks for the reply!\n\nbq. To the software pedant, that's not safe and would probably be called bad design - ...\nI understand and I can totally see your point. I was kind of separated due to the kind of short \"rants\" (don't get me wrong). I agree with you that we should not do that in a filter as this constructor could be called very very frequently especially if an analyzer does not implement reusableTokenStream. I would still argue that for an analyzer this is a different story and I would want to keep the code in analyzers copying the set. Classes, instantiated so frequently as filters should not introduce possible bottlenecks while analyzers are usually shared that won't be much of a hassle - any performance police issues with this? :)",
            "date": "2010-01-08T21:37:49.486+0000",
            "id": 5
        },
        {
            "author": "Simon Willnauer",
            "body": "Yonik, would you commit this issue please. I think we agreed on your solution.\nsimon",
            "date": "2010-01-10T17:49:55.558+0000",
            "id": 6
        },
        {
            "author": "Yonik Seeley",
            "body": "committed.",
            "date": "2010-01-13T18:08:21.467+0000",
            "id": 7
        }
    ],
    "component": "modules/analysis",
    "description": "With LUCENE-2094 a new CharArraySet is created no matter what type of set is passed to StopFilter. This does not behave as  documented and could introduce serious performance problems. Yet, according to the javadoc, the instance of CharArraySet should be passed to CharArraySet.copy (which is very fast for CharArraySet instances) instead of \"copied\" via \"new CharArraySet()\"",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2197",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Critical",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "StopFilter should not create a new CharArraySet if the given set is already an instance of CharArraySet",
    "systemSpecification": true,
    "version": "3.1"
}