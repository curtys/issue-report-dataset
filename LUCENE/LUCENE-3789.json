{
    "comments": [
        {
            "author": "Simon Willnauer",
            "body": "tiny simple patch against trunk... 3.x'd look slightly different and needs a changes entry to its pretty straight forward though. ",
            "date": "2012-02-15T20:50:16.011+0000",
            "id": 0
        },
        {
            "author": "Simon Willnauer",
            "body": "i will go ahead and commit if nobody objects? I will work on a 3.x port once this is in trunk",
            "date": "2012-02-18T20:01:00.322+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "Looks fine to me!",
            "date": "2012-02-18T20:04:44.052+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "Looks fine. I would make the access method final.",
            "date": "2012-02-18T20:50:02.376+0000",
            "id": 3
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Looks fine. I would make the access method final.\n\nwell, I actually didn't make this final on purpose. if you want to filter the enum used for rewriting you can now simply override and call super.getTermsEnum(...) otherwise you need to subclass all MTQ you want to filter and change QParsers etc. that way we can simply subclass one rewrite method and we are good to go. I have a usecase where I drop terms based on their DF so this would make this much easier...\n",
            "date": "2012-02-18T21:06:42.230+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "OK, I agree. I had a usecase exactly like you said (filtering the termsenum to only collect terms with a low/high docfreq,...). I did this by wrapping MTQ qith the protected problem in another variant. Here you only need a new rewrite method.",
            "date": "2012-02-18T21:19:34.087+0000",
            "id": 5
        }
    ],
    "component": "core/search",
    "description": "MTQ#getEnum() is protected and in order to access it you need to be in the o.a.l.search package. \n\nhere is a relevant snipped from the mailing list discussion\n\n{noformat}\ngetEnum() is protected so it is intended to be called *only* by subclasses (that's the idea behind protected methods). They are also accessible by other classes from the same package, but that's more a Java bug than a feature. The problem with MTQ is that RewriteMethod is a separate *class* and *not a subclass* of MTQ, so the method cannot be called (it can because of the \"java bug\" called from same package). So theoretically it has to be public otherwise you cannot call getEnum().\n\nAnother cleaner fix would be to add a protected final method to RewriteMethod that calls this method from MTQ. So anything subclassing RewriteMethod can get the enum from inside the RewriteMethod class which is the \"correct\" way to handle it. Delegating to MTQ is then \"internal\".\n{noformat}",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3789",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Expose FilteredTermsEnum from MTQ ",
    "systemSpecification": true,
    "version": "3.6, 4.0-ALPHA"
}