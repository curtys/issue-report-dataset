{
    "comments": [
        {
            "author": "Christian Kohlsch\u00fctter",
            "body": "Adds a \"maxmemory\" attribute to the javadoc task in common-build.xml.\n\nThe maximum memory for javadoc can be set via the property \"javadoc.maxmemory\", which is set to a reasonable default of 512m.\n",
            "date": "2009-12-08T08:34:46.208+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks reasonable.  I don't hit OOME with \"ant javadocs-all\" but I guess it's env/jre dependent.  I'll commit.",
            "date": "2009-12-08T10:16:41.034+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Christian!",
            "date": "2009-12-08T10:37:45.335+0000",
            "id": 2
        },
        {
            "author": "Christian Kohlsch\u00fctter",
            "body": "Hi Michael,\n\nyes, I forgot to mention that I used OS X 10.6 and java version \"1.6.0_15\"\nJava(TM) SE Runtime Environment (build 1.6.0_15-b03-219)\nJava HotSpot(TM) 64-Bit Server VM (build 14.1-b02-90, mixed mode)\n\nCheers,\nChristian",
            "date": "2009-12-08T10:42:20.531+0000",
            "id": 3
        }
    ],
    "component": "general/javadocs",
    "description": "Hi all,\n\nthe current nightly build's \"ant dist\" fails with an OutOfMemoryError at ant task javadocs-all (see below).\nApparently javadoc needs more memory.\n\nA similar case has been reported in HADOOP-5561 (add a maxmemory statement to the javadoc task), and I propose the same change for Lucene as well.\n\nCheers,\nChristian\n\n\njavadocs-all:\n  [javadoc] Generating Javadoc\n  [javadoc] Javadoc execution\n  [javadoc] Loading source files for package org.apache.lucene...\n  [javadoc] Loading source files for package org.apache.lucene.analysis...\n(...)\n  [javadoc] Loading source files for package org.apache.lucene.queryParser.standard.config...\n  [javadoc] Loading source files for package org.apache.lucene.queryParser.standard.nodes...\n  [javadoc] Loading source files for package org.apache.lucene.queryParser.standard.parser...\n  [javadoc] Loading source files for package org.apache.lucene.queryParser.standard.processors...\n  [javadoc] Constructing Javadoc information...\n  [javadoc] Standard Doclet version 1.6.0_15\n  [javadoc] Building tree for all the packages and classes...\n\n (takes a long time here until OOME)\n\n  [javadoc] java.lang.OutOfMemoryError: Java heap space\n  [javadoc] java.lang.OutOfMemoryError: Java heap space\n  [javadoc] \tat java.lang.Throwable.getStackTraceElement(Native Method)\n  [javadoc] \tat java.lang.Throwable.getOurStackTrace(Throwable.java:591)\n  [javadoc] \tat java.lang.Throwable.printStackTrace(Throwable.java:462)\n  [javadoc] \tat java.lang.Throwable.printStackTrace(Throwable.java:451)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder.build(AbstractBuilder.java:103)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.AbstractMemberBuilder.build(AbstractMemberBuilder.java:56)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.ClassBuilder.buildMemberSummary(ClassBuilder.java:279)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n  [javadoc] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n  [javadoc] \tat java.lang.reflect.Method.invoke(Method.java:597)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.ClassBuilder.invokeMethod(ClassBuilder.java:101)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder.build(AbstractBuilder.java:90)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.ClassBuilder.buildClassDoc(ClassBuilder.java:124)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n  [javadoc] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n  [javadoc] \tat java.lang.reflect.Method.invoke(Method.java:597)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.ClassBuilder.invokeMethod(ClassBuilder.java:101)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder.build(AbstractBuilder.java:90)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.ClassBuilder.build(ClassBuilder.java:108)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.HtmlDoclet.generateClassFiles(HtmlDoclet.java:155)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.AbstractDoclet.generateClassFiles(AbstractDoclet.java:164)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.AbstractDoclet.startGeneration(AbstractDoclet.java:106)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.AbstractDoclet.start(AbstractDoclet.java:64)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.HtmlDoclet.start(HtmlDoclet.java:42)\n  [javadoc] \tat com.sun.tools.doclets.standard.Standard.start(Standard.java:23)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n  [javadoc] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n  [javadoc] \tat java.lang.reflect.Method.invoke(Method.java:597)\n  [javadoc] \tat com.sun.tools.javadoc.DocletInvoker.invoke(DocletInvoker.java:269)\n  [javadoc] java.lang.OutOfMemoryError: Java heap space\n  [javadoc] \tat java.util.Arrays.copyOfRange(Arrays.java:3209)\n  [javadoc] \tat java.lang.String.<init>(String.java:215)\n  [javadoc] \tat com.sun.tools.javac.util.Convert.utf2string(Convert.java:131)\n  [javadoc] \tat com.sun.tools.javac.util.Name.toString(Name.java:164)\n  [javadoc] \tat com.sun.tools.javadoc.ClassDocImpl.getClassName(ClassDocImpl.java:341)\n  [javadoc] \tat com.sun.tools.javadoc.TypeMaker.getTypeName(TypeMaker.java:100)\n  [javadoc] \tat com.sun.tools.javadoc.ParameterizedTypeImpl.parameterizedTypeToString(ParameterizedTypeImpl.java:117)\n  [javadoc] \tat com.sun.tools.javadoc.TypeMaker.getTypeString(TypeMaker.java:121)\n  [javadoc] \tat com.sun.tools.javadoc.ExecutableMemberDocImpl.makeSignature(ExecutableMemberDocImpl.java:217)\n  [javadoc] \tat com.sun.tools.javadoc.ExecutableMemberDocImpl.signature(ExecutableMemberDocImpl.java:198)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap.getMemberKey(VisibleMemberMap.java:485)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap.access$1000(VisibleMemberMap.java:28)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap$ClassMembers.isOverridden(VisibleMemberMap.java:442)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap$ClassMembers.addMembers(VisibleMemberMap.java:316)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap$ClassMembers.build(VisibleMemberMap.java:278)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap$ClassMembers.access$100(VisibleMemberMap.java:230)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.util.VisibleMemberMap.<init>(VisibleMemberMap.java:93)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.ConstructorWriterImpl.<init>(ConstructorWriterImpl.java:38)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.WriterFactoryImpl.getConstructorWriter(WriterFactoryImpl.java:129)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.WriterFactoryImpl.getMemberSummaryWriter(WriterFactoryImpl.java:141)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.MemberSummaryBuilder.init(MemberSummaryBuilder.java:104)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.MemberSummaryBuilder.getInstance(MemberSummaryBuilder.java:64)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.BuilderFactory.getMemberSummaryBuilder(BuilderFactory.java:191)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.ClassWriterImpl.navSummaryLinks(ClassWriterImpl.java:474)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.ClassWriterImpl.printSummaryDetailLinks(ClassWriterImpl.java:456)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.HtmlDocletWriter.navLinks(HtmlDocletWriter.java:462)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.ClassWriterImpl.writeFooter(ClassWriterImpl.java:146)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.ClassBuilder.buildClassFooter(ClassBuilder.java:330)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n  [javadoc] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n  [javadoc] \tat java.lang.reflect.Method.invoke(Method.java:597)\n  [javadoc] java.lang.OutOfMemoryError: Java heap space\n  [javadoc] \tat java.util.LinkedHashMap.createEntry(LinkedHashMap.java:424)\n  [javadoc] \tat java.util.LinkedHashMap.addEntry(LinkedHashMap.java:406)\n  [javadoc] \tat java.util.HashMap.put(HashMap.java:385)\n  [javadoc] \tat sun.util.resources.OpenListResourceBundle.loadLookup(OpenListResourceBundle.java:118)\n  [javadoc] \tat sun.util.resources.OpenListResourceBundle.loadLookupTablesIfNecessary(OpenListResourceBundle.java:97)\n  [javadoc] \tat sun.util.resources.OpenListResourceBundle.handleGetObject(OpenListResourceBundle.java:58)\n  [javadoc] \tat sun.util.resources.TimeZoneNamesBundle.handleGetObject(TimeZoneNamesBundle.java:59)\n  [javadoc] \tat java.util.ResourceBundle.getObject(ResourceBundle.java:378)\n  [javadoc] \tat java.util.ResourceBundle.getObject(ResourceBundle.java:381)\n  [javadoc] \tat java.util.ResourceBundle.getStringArray(ResourceBundle.java:361)\n  [javadoc] \tat sun.util.TimeZoneNameUtility.retrieveDisplayNames(TimeZoneNameUtility.java:100)\n  [javadoc] \tat sun.util.TimeZoneNameUtility.retrieveDisplayNames(TimeZoneNameUtility.java:81)\n  [javadoc] \tat java.util.TimeZone.getDisplayNames(TimeZone.java:399)\n  [javadoc] \tat java.util.TimeZone.getDisplayName(TimeZone.java:350)\n  [javadoc] \tat java.util.Date.toString(Date.java:1025)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.markup.HtmlDocWriter.today(HtmlDocWriter.java:337)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.HtmlDocletWriter.printHtmlHeader(HtmlDocletWriter.java:281)\n  [javadoc] \tat com.sun.tools.doclets.formats.html.ClassWriterImpl.writeHeader(ClassWriterImpl.java:122)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.ClassBuilder.buildClassHeader(ClassBuilder.java:164)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n  [javadoc] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n  [javadoc] \tat java.lang.reflect.Method.invoke(Method.java:597)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.ClassBuilder.invokeMethod(ClassBuilder.java:101)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder.build(AbstractBuilder.java:90)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.ClassBuilder.buildClassDoc(ClassBuilder.java:124)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n  [javadoc] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n  [javadoc] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n  [javadoc] \tat java.lang.reflect.Method.invoke(Method.java:597)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.ClassBuilder.invokeMethod(ClassBuilder.java:101)\n  [javadoc] \tat com.sun.tools.doclets.internal.toolkit.builders.AbstractBuilder.build(AbstractBuilder.java:90)\n  [javadoc] java.lang.OutOfMemoryError: Java heap space\n  [javadoc] java.lang.OutOfMemoryError: Java heap space\n  [javadoc] java.lang.OutOfMemoryError: Java heap space\n  [javadoc] java.lang.OutOfMemoryError: Java heap space\n  [javadoc] java.lang.OutOfMemoryError: Java heap space\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2134",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Critical",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "[PATCH] ant-task \"javadocs-all\" fails with OutOfMemoryError",
    "systemSpecification": true,
    "version": "3.1"
}