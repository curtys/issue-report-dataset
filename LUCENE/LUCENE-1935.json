{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "Patch for Priority Queue. The usage is not yet generified, but the class itsself is. Now it works like a standard Java 5 Collection (and can for sure be used conventionally).\n\n(I also removed the tabs/whitespace in the test).",
            "date": "2009-10-01T14:26:00.165+0000",
            "id": 0
        },
        {
            "author": "Paul Elschot",
            "body": "Uwe, could you take a look at ScorerDocQueue?\n\nI derived that one from PriorityQueue in 2005 to avoid casts, but now such code duplication may not be necessary anymore.\n\nIn case you think ScorerDocQueue could indeed be removed by using generics instead, I'd gladly try and provide a patch for that.\n",
            "date": "2009-10-01T22:21:30.551+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Was it to avoid a perforance impact of casting or only for cleaner code? Because the generic version of PQ does noch change anything, the resulting byte code is identical (you can compare that with a decompilation using JAD). The casts are added by the Java Compiler automatically.\nThe lessThan method is covariant overloaded (passed through) in subclasses by javac (like in the test): lessThan(Integer, Integer) will appear as such in the class byte code of the subclass, but javac will add lessThan(Object, Object) that delgates to the covariant overload (which may be a small perf impact). It is called by the compiled code of PQ using the (Object, Object) signature (PQ does not know anything about generics in its byte code).",
            "date": "2009-10-01T22:29:53.809+0000",
            "id": 2
        },
        {
            "author": "Paul Elschot",
            "body": "It was to avoid the performance impact of casting, however I don't remember how big the performance impact was.\nI would hope that nowadays the added casts are optimized away by the JIT.\n",
            "date": "2009-10-01T22:37:34.653+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "I think it could be rewritten and the missing functionality with the funny name \"topSkipToAndAdjustElsePop\" added somewhere. The simpliest would be a subclass:\n\n{code}\npublic class ScorerDocQueue extends PriorityQueue<HeapedScorerDoc> {...}\n{code}\n\nI do not know how big the perf impact would be (if there is one). As mentioned before, there is a small oerhead, because the overriden abstract method lessThan(HeapedScorerDoc, HeapedScorerDoc) would be wrapped by javac as lessThan(Object, Object) - a small added cost (do not know how big or jvm optimizes away, which I hope)",
            "date": "2009-10-01T22:50:54.151+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "By the way, the covariant overload is optimized away by the compiler (not the JVM), if an anonymous or private (and therefore final) class is used. This is the code from the test:\n\n{code}\nprivate static class IntegerQueue extends PriorityQueue<Integer> {\n    public IntegerQueue(int count) {\n        super();\n        initialize(count);\n    }\n\n    protected boolean lessThan(Integer a, Integer b) {\n        return (a < b);\n    }\n}\n{code}\n\nIs compiled to the following code by Java 1.5 javac:\n\n{code}\nprivate static class TestPriorityQueue$IntegerQueue extends PriorityQueue {\n\n    protected boolean lessThan(Object a, Object b) {\n        return ((Integer)a).intValue() < ((Integer)b).intValue();\n    }\n\n    public TestPriorityQueue$IntegerQueue(int count) {\n        initialize(count);\n    }\n}\n{code}\n\nSo normal usage in Lucene would have no impact (would be the same as before). Only if you override a generified PQ with a lessThan method not final or somehow accessible, the compiler has to add the wrapper.\n\n*edit:*\n\nIf you want to see, what I mean with \"wrapper\", look into [https://issues.apache.org/jira/secure/attachment/12418140/AttributeSource.jad] and there in getAttributeImplIterator(). The inline Iterator overrides next(), but the return type is generic -> compiler adds a \"volatile\" method (how JAD identifies it).",
            "date": "2009-10-01T23:02:07.679+0000",
            "id": 5
        },
        {
            "author": "Mark Miller",
            "body": "Ive tried custom PQ's for use in sorting to avoid the casting not too long ago - I both mirco benched and used a profiler. I didn't see no win. Big fat waste of my time ;)\n\n*edit*\n\nactually non sorting too - tried em both. ",
            "date": "2009-10-01T23:04:26.931+0000",
            "id": 6
        },
        {
            "author": "Paul Smith",
            "body": "I shall perhaps regret asking this, but is there any reason not to use java.util.PriorityQueue instead? Seems like reinventing the wheel a bit there (I understand historically why Lucene has this class).\n\n(is Lucene 2.9+ now Java 5, or is that a different discussion altogether?)",
            "date": "2009-10-01T23:17:50.256+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "The implementation of Lucene's PriorityQueue is a little bit different and also its API. Would be some work to rewrite the collectors.\n\nThe biggest problem of Java's PQ: It does not let elements fall out when a higher prio entry is inserted and the list is full (no upper limit on list length). The Java list grows like a ArrayList.",
            "date": "2009-10-01T23:26:38.007+0000",
            "id": 8
        },
        {
            "author": "Paul Smith",
            "body": "thanks Uwe, I thought I would regret asking, good points there.  Shame the JDK doesn't have a fixed size PriorityQueue implementation, that seems a bit of a glaring omission. ",
            "date": "2009-10-01T23:43:30.586+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Paul Elschot: Do you want to provide a patch for ScorerDocQueue that it subclasses PQ<HeapedScorerDoc>?",
            "date": "2009-10-01T23:44:29.626+0000",
            "id": 10
        },
        {
            "author": "Mark Miller",
            "body": "bq. I thought I would regret asking\n\nWhy? Now a bunch of us know a bit more than we did. Information sharing is sweet.",
            "date": "2009-10-02T00:22:36.565+0000",
            "id": 11
        },
        {
            "author": "Paul Elschot",
            "body": "> Do you want to provide a patch for ScorerDocQueue that it subclasses PQ<HeapedScorerDoc>?\n\nYes, however that could also be done at a separate issue.\nThanks for reminding me of the topSkipToAndAdjustElsePop method.\nAt the time the JIT was not able to fully optimize two method calls to a ScorerDocQueue object, so I added that method to the class.\n\nBtw. ScorerDocQueue is used in disjunction queries when the docs should be scored in order, so it is sensitive to query performance, see LUCENE-365 .",
            "date": "2009-10-02T07:22:02.946+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 821104",
            "date": "2009-10-02T17:28:30.817+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi Paul Elschot: I opened LUCENE-1940 for the refactoring",
            "date": "2009-10-02T17:33:37.206+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "Just for reference: Here is the generated class (by javac) when overriding lessThan (as example HitQueue), decompiled from the resulting class file by JAD.",
            "date": "2010-02-20T16:30:43.714+0000",
            "id": 15
        }
    ],
    "component": "core/other",
    "description": "Priority Queue should use generics like all other Java 5 Collection API classes. This very simple, but makes code more readable.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1935",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "OTHER",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Generify PriorityQueue",
    "systemSpecification": true,
    "version": "2.9"
}