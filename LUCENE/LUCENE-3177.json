{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Patch.\n\nTests pass, but there are many nocommits.\n\nI was *almost* able to create only IndexableField, so that\nIW.addDocument took Iterable<IndexableField>, except for doc level\nboost, so I had to create IndexableDocument.\n\nI also cutover to a .binaryValue(BytesRef reuse) API here, replacing\ngetBinaryValue/Length/Offset.\n\nI would actually like to take IndexableDocument/Field further, so that\neg responsibiliity for analysis lies \"under\" the tokenStreamValue()\nmethod, but I think we should leave that for LUCENE-2309.  This is a\nbig enough change already...\n",
            "date": "2011-06-07T09:57:55.261+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "New patch, removing IndexableDocument so now we only have\nIndexableField and IW accepts Iterable<? extends IndexableField> to\nadd/updateDocument.\n\nThis breaks one Lucene core test (TestDocBoost), because indexer no\nlonger applies doc boost.\n\nI'd like to cut a new branch, and commit this starting patch there.\nI think (hopefully) the plan for the branch will be something like\nthis:\n\n  * Commit/iterate on this issue, which fully decouples indexer\n    (oal.index.*) from our current\n    Field/Fieldable/AbstractField/Document impl.  This gives\n    LUCENE-2308 more freedom to make concrete \"user space\" classes.\n\n  * Commit/iterate on LUCENE-2308, which collapses the *Field\n    hierarchy to one concrete class, and adds FieldType\n    hierarchy.\n\n  * Maybe: do LUCENE-2309 (decouple analyzers from indexer).  This\n    would mean IndexableField no longer needs isTokenized, nor the\n    string/readerValue() methods.  Indexer would just ask for the\n    tokenStream, and the doc/field impl would go and look at its flags\n    like NOT_ANALYZED, etc., to figure out what token stream to\n    create.\n",
            "date": "2011-06-09T17:46:13.783+0000",
            "id": 1
        }
    ],
    "component": "",
    "description": "I think we should define minimal iterator interfaces,\nIndexableDocument/Field, that indexer requires to index documents.\n\nIndexer would consume only these bare minimum interfaces, not the\nconcrete Document/Field/FieldType classes from oal.document package.\n\nThen, the Document/Field/FieldType hierarchy is one concrete impl of\nthese interfaces. Apps are free to make their own impls as well.\nMaybe eventually we make another impl that enforces a global schema,\neg factored out of Solr's impl.\n\nI think this frees design pressure on our Document/Field/FieldType\nhierarchy, ie, these classes are free to become concrete\nfully-featured \"user-space\" classes with all sorts of friendly sugar\nAPIs for adding/removing fields, getting/setting values, types, etc.,\nbut they don't need substantial extensibility/hierarchy. Ie, the\nextensibility point shifts to IndexableDocument/Field interface.\n\nI think this means we can collapse the three classes we now have for a\nField (Fieldable/AbstracField/Field) down to a single concrete class\n(well, except for LUCENE-2308 where we want to break out dedicated\nclasses for different field types...).\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3177",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Decouple indexer from Document/Field impls",
    "systemSpecification": true,
    "version": ""
}