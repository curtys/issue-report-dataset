{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "For 3.2 it would be a minor backwards break, but code using SegmentInfos whould still compile. Only drop-in replacements will not work.",
            "date": "2011-05-09T11:53:45.738+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Patch.",
            "date": "2011-05-09T12:24:52.977+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "I think the minor break for 3.2 is acceptable...",
            "date": "2011-05-09T12:26:12.318+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "After some discussion with Mike we decided, to make some further API changes in 4.0:\n\n- No longer subclass java.util.Vector, instead ArrayList\n- rename SegmentInfos.range to cloneSubList() and let it also return List<SegmentInfo>\n- make OneMerge's list unmodifiable to protect against changes in consumers of the MergeSpecification (this item should in my opionion also backported to 3.x)\n\nI'll atach simple patch.",
            "date": "2011-05-11T20:20:21.676+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "The above patch shows the problem with the current merge policy code: it seems that the list returned in OneMerge is sometimes modified, we should fix that (so patch not yet commitable)",
            "date": "2011-05-11T20:22:03.579+0000",
            "id": 4
        },
        {
            "author": "Earwin Burrfoot",
            "body": "* Speaking logically, merges operate on Sets of SIs, not List?\n* Let's stop subclassing random things? : ) SIS can contain a List of SIs (and maybe a Set, or whatever we need in the future), and only expose operations its clients really need.",
            "date": "2011-05-11T20:44:05.597+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "Different patch idea:\n- OneMerge clones the list, so all MergePolicys don't need to take care, that the list may change later (e.g. is it's based on SegmentInfos.subList() which changes later during merge)\n- Removed SIs.range() completely\n\n{quote}\n* Speaking logically, merges operate on Sets of SIs, not List?\n* Let's stop subclassing random things? : ) SIS can contain a List of SIs (and maybe a Set, or whatever we need in the future), and only expose operations its clients really need.\n{quote}\n\nMerges are ordered, so it must be an ordered Set like LinkedHashSet.\n\nSegmentInfos itsself must be list, as the segments of an index are ordered.\n\nAll tests pass with this patch.\n\nThe cloning should also be moved to OneMerge in 3.x. range() should simply delegate to subList (and no longer clone).",
            "date": "2011-05-11T21:29:15.570+0000",
            "id": 6
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. Merges are ordered\nHmm.. Why should they be?\n\nbq. SegmentInfos itself must be list\nIt may contain list as a field instead. And have a much cleaner API as a consequence.\n\nOn another note, I wonder, is the fact that Vector is internally synchronized used somewhere within SegmentInfos client code?",
            "date": "2011-05-11T21:48:22.892+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. It may contain list as a field instead. And have a much cleaner API as a consequence.\n\nI agree, I dont like subclassing ArrayList (this is the only class in Lucene that subclasses java collection classes left over. We should rmeove.\n\nProblem: List access is heavy used in code, I have to first review all places. Alternatively we could make ist simply implement List<SegmentInfo>, so it does not get the extra methods from ArrayList that go beyond List. This would be a good way in the middle.\n\nbq. On another note, I wonder, is the fact that Vector is internally synchronized used somewhere within SegmentInfos client code?\n\nThats safe, synchronization is not an issue here, all access to SegmentInfos is protected by IndexWriter synchronization (see e.g. mergeInit()). The use of Vector is just a relict from earlier days. I should have removed that for 3.0 already but missed that exactly because I did not know if synchronization was needed.",
            "date": "2011-05-11T22:03:04.299+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "{quote}\nbq. Merges are ordered\n\nHmm.. Why should they be?\n{quote}\n\nSee also LUCENE-1076, in trunk we may remove this, but 3.x - not sure. There is currently nothing in Lucene that guarantees that docIDs of MultiReaders are not reoredered during merges, but lots of people expect/rely on this.",
            "date": "2011-05-11T22:20:22.268+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "I would love to cutover to Set<SI>, but, I don't think we can.  There are apps out there that want merges to remain contiguous (so docIDs keep their monotonicity).\n\nBut I do think we should not keep that by default (I reopened LUCENE-1076 to switched to TieredMP in 3.x by default).",
            "date": "2011-05-11T22:28:50.342+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good -- thanks Uwe!",
            "date": "2011-05-11T22:32:32.311+0000",
            "id": 11
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Let's stop subclassing random things? : ) SIS can contain a List of SIs (and maybe a Set, or whatever we need in the future), and only expose operations its clients really need\n+1 we should if at all implement Iterable<SegmentInfo> instead of vector or arraylist.\n\nbq. I would love to cutover to Set<SI>, but, I don't think we can. There are apps out there that want merges to remain contiguous (so docIDs keep their monotonicity).\n\nI think this should be feasible with a sorted set? It might make sense is the SIS case to hold a NavigableSet and I personally would prever that much over subclassing some random collection. If we refactor this we should refactor towards an interface not an implementation.",
            "date": "2011-05-12T06:38:43.809+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "Just to note: \n\nCutover to Set<SegmentInfos> was not intended for SegmentInfos itsself, it was proposed for the merge code (MergePolicy.OneMerge) only that returns which segments to merge. And there currently the interface is List, because of ordering (see LUCENE-1076).\n\nNavigableSet ist Java 6. SortedSet only works if the set ordering is defined by its contents, which is not the case for SegmentInfos (the ordering is given by the file on disk). The only thing that could work is combination of List and Set, the Set only to check for duplicates. SegmentInfos is still required to be List-style, but should not allow to add the same SegmentInfo two times.\n\nThis is why I said let it implement List<SI>, this would also break no code.",
            "date": "2011-05-12T07:03:30.440+0000",
            "id": 13
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. NavigableSet ist Java 6. SortedSet only works if the set ordering is defined by its contents\nfair enough. I still think we can make it SortedSet as we know the ordering otherwise we could not build the list right?\n\nfor now I think we should implement Iterable<SI> and offer a method List<SI> asList() to make it consistent with FIS and Document (conclusion from the discussion with uwe on IRC).\n\nEventually I would prefer having a set here really.\n",
            "date": "2011-05-12T07:40:47.036+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "Here a patch that removes List interface.\n\nIt needs te readd lots of methods of List also IndexWriter uses the SegmentsInfos class in my opinion quite often in a way, that it should not be used, so I am not happy. There are some improvements to be done.\n\nAlso its stupid that addAll() does not accept Iterable, but that's a known problem (backwards compatibility of Java 5)!",
            "date": "2011-05-12T13:00:23.033+0000",
            "id": 15
        },
        {
            "author": "Uwe Schindler",
            "body": "Here updated patch that removes some List<SI> usage from DirectoryReader and IndexWriter for rollback when commit fails. I am still not happy with interacting of IndexWriter code directly with the list, but this should maybe fixed later.\n\nThis patch could also be backported to cleanup 3.x, but for backwards compatibility, the SegmentInfos class should still extend Vector<SI>, but we can make the fields \"segment\" simply point to this. I am not sure how to \"deprecated\" extension of a class? A possibility would be to add each Vector method as a overridden one-liner and deprecated, but thats a non-brainer and stupid to do :(",
            "date": "2011-05-16T16:35:40.113+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "Uwe, this looks like a great step forward?  Even if there are other things to fix later, we should commit this first (progress not perfection)?  Thanks!\n\nOn backporting, this is an experimental API, and it's rather \"expert\" for code to be interacting with SegmentInfos, so I think we can just break it (and advertise we did so)?",
            "date": "2011-05-16T16:44:00.372+0000",
            "id": 17
        },
        {
            "author": "Uwe Schindler",
            "body": "New patch that also has BalancedMergePolicy from contrib refactored to new API (sorry that was missing).",
            "date": "2011-05-16T17:18:57.101+0000",
            "id": 18
        },
        {
            "author": "Uwe Schindler",
            "body": "Further refactoring:\n- I was able to move more internal ArrayList-modifying code out of IndexWriter\n- the returned List \"view\" is now unmodifiable!\n- It's now possible to also add a Set view for better contains.\n\n...working...",
            "date": "2011-05-17T11:38:37.700+0000",
            "id": 19
        },
        {
            "author": "Uwe Schindler",
            "body": "Now I improved SegmentInfos more:\n\n- It now uses a Map/Set to enforce that the SI only contains each segment one time.\n- Faster contains() because Set-backed\n\nAs said before: asList() and asSet() are unmodifiable, so consistency between List and Set/Map is enforced.\n\nThe Set is itsself a Map<SI,Integer>. The values contain the index of segment in the infos. This speeds up indexOf() calls, needed for asserts and remove(SI). As on remove or reorder operations the indexes are no longer correct, a separate boolean is used to mark the Map as inconsistent. It is then regenerated on the next indexOf() call. IndexOf is seldom, butthe keySet() is still consistent, so delaying this update is fine.\n\nAll tests pass. I think the cleanup of SegmentInfos is ready to commit.",
            "date": "2011-05-17T19:51:07.557+0000",
            "id": 20
        },
        {
            "author": "Uwe Schindler",
            "body": "This patch only additionally has a cache of the unmodified collections (like Java's core collections do). This prevents creation of new instance on each asList() call.\n\nMike: Do you have any further comments, else I will commit in a day or two (before leaving to Lucene Rev).",
            "date": "2011-05-18T07:05:28.088+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "Looks awesome Uwe!  +1 to commit.  Some small variable naming\nsuggestions:\n\n  * Rename cloneChilds -> cloneChildren (sis.createBackupSIS)\n\n  * Maybe call it (and, invert) \"mapIndexesValid\" instead of\n    \"mapIndexesInvalid\" (in SIS.java)?  I generally prefer not putting\n    not into boolean variables when possible, for sanity...\n",
            "date": "2011-05-18T10:47:42.151+0000",
            "id": 22
        },
        {
            "author": "Uwe Schindler",
            "body": "OK! Thanks Mike\n\nbq. mapIndexesInvalid\n\nI will remove the map again and replace by a simple Set. Using a map that maps to indexes is too complicated and does not bring us anything. contains() works without and indexOf() needs to rebuild the map whenever an insert or remove is done. Especially on remove(SI) it will rebuild the map two times in the badest case.\n\nA linear scan for indexOf is in my opinion fine. We can only optimize by doing a contains on the set first.",
            "date": "2011-05-18T10:53:30.033+0000",
            "id": 23
        },
        {
            "author": "Uwe Schindler",
            "body": "New patch with the renaming and removal of Map in favour of a simple Set.\n\nAgain ready to commit.",
            "date": "2011-05-18T12:46:11.370+0000",
            "id": 24
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks great Uwe!  +1 to commit.  Thanks!",
            "date": "2011-05-18T12:51:23.266+0000",
            "id": 25
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 1124307, 1124316 (copy-paste error)\n\nNow backporting...",
            "date": "2011-05-18T16:16:47.737+0000",
            "id": 26
        },
        {
            "author": "Uwe Schindler",
            "body": "Merged patch. Will commit now.",
            "date": "2011-05-18T17:02:41.423+0000",
            "id": 27
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed 3.x revision: 1124339",
            "date": "2011-05-18T17:11:20.004+0000",
            "id": 28
        },
        {
            "author": "Robert Muir",
            "body": "Bulk closing for 3.2",
            "date": "2011-06-03T16:37:17.353+0000",
            "id": 29
        }
    ],
    "component": "",
    "description": "SegmentInfos carries a bunch of fields beyond the list of SI, but for merging purposes these fields are unused.\n\nWe should cutover to List<SI> instead.\n\nAlso SegmentInfos subclasses Vector<SI>, this should be removed and the collections be hidden inside the class. We can add unmodifiable views on it (asList(), asSet()).",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3084",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "MergePolicy.OneMerge.segments should be List<SegmentInfo> not SegmentInfos, Remove Vector<SI> subclassing from SegmentInfos & more refactoring",
    "systemSpecification": true,
    "version": ""
}