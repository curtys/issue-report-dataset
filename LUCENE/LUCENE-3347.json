{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "That's indeed a bug, your workaround is the correct fix. In my opinion, the original query's boost should be multiplied, else it makes it impossible on the other hand to modify the final score by a boost attribute:\n\n{code:java}\nq.setBoost(q.getBoost() * DOMUtils.getAttribute(e, \"boost\", 1.0f));\n{code}\n\nSo\n\n{noformat}\n<UserQuery fieldName=\"Vehicle.Colour\" boost=\"2.0\">black^0.01</UserQuery>\n{noformat}\n\nwould produce a boost of 0.02. This is especially important for combined queries.\n\nYou bug does not occur for the first clauses, as the userquery nodes produce itsself a BooleanQuery, but with boost 1.0 on top-level (see the additional brackets). But the fix behaves identical here.",
            "date": "2011-07-28T07:47:09.843+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Patch with test, I think it's ready to commit!",
            "date": "2011-07-29T21:49:41.735+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 1152525\nCommitted 3.x revision: 1152526",
            "date": "2011-07-30T22:09:29.734+0000",
            "id": 2
        }
    ],
    "component": "",
    "description": "The lucene XML parser seems to convert user defined boosting back to default 1.0 and thus boosting value is dropped from the query...\n\ne.g.\n\n{code:xml}\n<BooleanQuery>\n\t<Clause occurs=\"must\">\n\t\t<BooleanQuery>\n\t\t\t<Clause occurs=\"should\">\n\t\t\t\t<UserQuery fieldName=\"Vehicle.Colour\">red^66 blue~^8</UserQuery>\n\t\t\t</Clause>\n\t\t</BooleanQuery>\n\t</Clause>\n\t<Clause occurs=\"should\">\n\t\t<BooleanQuery>\n\t\t\t<Clause occurs=\"should\">\n\t\t\t\t<UserQuery fieldName=\"Vehicle.Colour\">black^0.01</UserQuery>\n\t\t\t</Clause>\n\t\t</BooleanQuery>\n\t</Clause>\n</BooleanQuery>\n{code}\n\nproduces a lucene query: +( ( Vehicle.Colour:red^66 Vehicle.Colour:blue~0.5^8 ) ) ( Vehicle.Colour:black )\n\nThe expected query : +( ( Vehicle.Colour:red^66 Vehicle.Colour:blue~0.5^8 ) ) ( Vehicle.Colour:black^0.01 )\n\nI have developed a work around by modifying line 77 of UserInputQueryBuilder.java \n\nfrom:\n\n{code:java}\nq.setBoost(DOMUtils.getAttribute(e,\"boost\",1.0f));\n{code}\n\nto:\n\n{code:java}\nq.setBoost( DOMUtils.getAttribute( e, \"boost\", q.getBoost() ) );\n{code}\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3347",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "XMLparser drops user boosting",
    "systemSpecification": true,
    "version": "3.1"
}