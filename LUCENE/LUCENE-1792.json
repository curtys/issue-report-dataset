{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Patch that just adds unit test showing the issue.\n\nWe already have a MultiTermRewriteMethodAttribute... so I think the fix here is in the processors that create these query nodes, to carry over that attribute's value?  Actually RangeQueryNodeBuilder seems to do so already, but the others don't.",
            "date": "2009-08-08T10:28:13.737+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Should it not set to AUTO REWRITE (even the old one)?",
            "date": "2009-08-08T10:28:31.721+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Sorry, right, I meant AUTO REWRITE.  That's what the old queryParser does today... the new queryParser should do the same.",
            "date": "2009-08-08T12:05:20.212+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch.\n\nI created MultiTermRewriteDefaultProcessor.java, and added it into the StandardQueryNodeProcessorPipeline.  It simply notices any Wildcard/PrefixWildcardQueryNode and sets their rewrite method to CONSTANT_SCORE_AUTO_REWRITE_DEFAULT.",
            "date": "2009-08-10T11:36:43.921+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "And then there were 6!  Eventually we'll get to zero...",
            "date": "2009-08-11T10:14:58.436+0000",
            "id": 4
        },
        {
            "author": "Luis Alves",
            "body": "linking JIRA issues",
            "date": "2009-08-14T16:52:00.667+0000",
            "id": 5
        },
        {
            "author": "Adriano Crestani",
            "body": "Hi Mike,\n\nMaybe we should create a special node just to hold the CONSTANT_SCORE_AUTO_REWRITE_DEFAULT value. That's what we do on StandardBooleanQueryNode, it was created to hold a setting that only belongs to the standard query parser: disableCoord, avoiding to add to core nodes settings that are specific to certain QP implementation. Check AnalyzerQueryNodeProcessor to see how it's used.\n\nAlso, we could tag the node with this setting, but I still prefer my first suggestion.",
            "date": "2009-08-14T17:08:52.893+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Urgh I see.  But then I'd also need to make a StandardPrefixWildcardQueryNode?  And then a two new builder classes corresponding to these new nodes?\n\nCould we then fix StandardSyntaxParser to never create WildcardQueryNode (ie, always create StandardWildcardQueryNode)?  And then remove WildcardQueryNodeBuilder?  (Though, why do we still have BooleanQueryNodeBuilder?).\n\nMaybe, instead, we should just make this fix in the builder (then it'd be like a 2-line change)?  I realize that violates the \"builders can't consult configuration\", but perhaps that rule is too strict.... in this case it means having to make 4 new classes instead of adding 2 lines into the existing classes (I think?).\n\nAlternatively, we could just revert my changes.  In 3.0, these queries will set their defaults to AUTO, anyway, at which point this is no longer an issue.  Plus, since we are no longer planning to aggressively swap the current QueryParser with this new one, this issue is less important to fix.",
            "date": "2009-08-14T17:38:00.019+0000",
            "id": 7
        },
        {
            "author": "Adriano Crestani",
            "body": "Could we then fix StandardSyntaxParser to never create WildcardQueryNode (ie, always create StandardWildcardQueryNode)? And then remove WildcardQueryNodeBuilder? (Though, why do we still have BooleanQueryNodeBuilder?).\n\nI completely agree with you, we could change the parser to generate directly StandardBooleanQN and StandardWildcardQN, that makes more sense. I can work on a patch for this approach if you want, just let me know.",
            "date": "2009-08-14T18:03:10.807+0000",
            "id": 8
        },
        {
            "author": "Luis Alves",
            "body": "I never liked wildcard and prefixwildcard inplementation in the StandartSyntaxParser.\n\nWe could remove the creation of WildcardQueryNode and PrefixWildcardQueryNode,\nfrom the StandardSyntaxParser and produce regular FieldQueryNode instead.\n\nSince we use UnescapedCharSequence in the FieldQueryNode values.\nWe can identify the wildcards in the Processors and have one simple\nprocessor that converts FieldQueryNode to StandardWildcardQueryNode and to StandardPrefixWildcardQueryNode,\nand we can remove WildcardQueryNode and PrefixWildcardQueryNode from the core.\n\nWhat do you guys think.?",
            "date": "2009-08-14T18:29:27.518+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nSince we use UnescapedCharSequence in the FieldQueryNode values.\nWe can identify the wildcards in the Processors and have one simple\nprocessor that converts FieldQueryNode to StandardWildcardQueryNode and to StandardPrefixWildcardQueryNode,\nand we can remove WildcardQueryNode and PrefixWildcardQueryNode from the core.\n{quote}\n\n+1\n\nbq. we could change the parser to generate directly StandardBooleanQN and StandardWildcardQN, that makes more sense. \n\n+1 too... whenever standard subclasses a core node for some reason, it seems like the core syntax parser shouldn't produce the core node anymore.\n\nLuis or Adriano do you want to take a crack at this?  Can you do this shortly (2.9 looks iminent)?  Else we can simply revert my changes and then move this to 3.1...",
            "date": "2009-08-14T18:57:49.062+0000",
            "id": 10
        },
        {
            "author": "Luis Alves",
            "body": "I'll work on that over the weekend, let me see if I can have that done by Monday.",
            "date": "2009-08-14T23:36:32.880+0000",
            "id": 11
        },
        {
            "author": "Luis Alves",
            "body": "- add the QueryParserMessages.properties, it was missing from trunk\n- change the _TERM_START_CHAR to allow \"?\" and \"*\" inside the StandartSyntaxParser.jj\n- remove wildcard and prefix detection from the StandartSyntaxParser, this is now done in a processor for terms and quoted strings.\n- PrefixWildcardQueryNode and WildcardQueryNode moved to standard.nodes.* package\n- new WildcardQueryNodeProcessor that replaces PrefixWildcardQueryNodeProcessor, to implement the wildcard logic that was in the .jj file.\n\nOne escape testcase is still failing I'll look at that tomorrow.\n\nMike, if you have time please review it,\nthis code does not contain your patch,\nI did it on the latest trunk\n",
            "date": "2009-08-15T02:39:36.858+0000",
            "id": 12
        },
        {
            "author": "Luis Alves",
            "body": "I only saw the resource folder you created on the contrib/queryparser folder now :)\nI'll remove that from the next patch.",
            "date": "2009-08-15T02:45:53.371+0000",
            "id": 13
        },
        {
            "author": "Michael McCandless",
            "body": "On quick glance the patch looks good, but I'm not going to have enough time to look more thoroughly!\n\nI think you used \"svn move\" to rename PrefixWildcardQueryNodeProcessore -> WildcardQueryNodeProcessor?  (because \"patch\" fails to apply the changes).",
            "date": "2009-08-15T10:13:31.576+0000",
            "id": 14
        },
        {
            "author": "Michael Busch",
            "body": "Luis,\n\ncould you provide a new patch that applies cleanly? If you want to move files from one package to another I think you need to copy manually and do \"svn delete\" on the old file and \"svn add\" on the new one.\n\n",
            "date": "2009-08-16T21:50:58.164+0000",
            "id": 15
        },
        {
            "author": "Luis Alves",
            "body": "This one is done :).\nThis patch is against the latest trunk.\n\nFrom my last patch here are the major changes\n- Changed MultiTermRewriteMethodProcessor, WildcardQueryNodeBuilder, RangeQueryNodeBuilder, PrefixWildcardQueryNodeBuilder, to use the MultiTermRewriteMethodAttribute.\n- Clean up the RangeQueryNode, PrefixWildcardQueryNode, WildcardQueryNode and ParametricRangeQueryNodeProcessor from use of setRewrteMethod.\n- Changed MultiTermRewriteMethodProcessor to use a setTAG to pass the MultiTermQuery.RewriteMethod value to the Builders",
            "date": "2009-08-18T05:28:23.134+0000",
            "id": 16
        },
        {
            "author": "Michael Busch",
            "body": "The new patch applies cleanly on trunk now. However, I'm getting this junit failure now:\n\n{noformat}\n    [junit] Testcase: testQueryValidator(org.apache.lucene.queryParser.spans.TestSpanQueryParser):\tFAILED\n    [junit] QueryNodeException was expected, wildcard queries should not be supported\n    [junit] junit.framework.AssertionFailedError: QueryNodeException was expected, wildcard queries should not be supported\n    [junit] \tat org.apache.lucene.queryParser.spans.TestSpanQueryParser.testQueryValidator(TestSpanQueryParser.java:177)\n    [junit] Test org.apache.lucene.queryParser.spans.TestSpanQueryParser FAILED\n{noformat}",
            "date": "2009-08-18T07:31:31.305+0000",
            "id": 17
        },
        {
            "author": "Luis Alves",
            "body": "- fix for span problem reported by Micheal\n- fix to WildcardQueryNodeProcessor to detect escaped wildcards",
            "date": "2009-08-18T08:07:33.169+0000",
            "id": 18
        },
        {
            "author": "Michael Busch",
            "body": "Besides the failing testcase, the patch looks good!\n\nThe TAG approach in MultiTermRewriteMethodProcessor looks a bit overly complicated (Attribute->MultiTermRewriteMethodProcessor->TAG->Builders), but I see that the big advantage will be to not having to deprecate/remove any APIs from the nodes in 3.0, when the QP won't have to set the rewrite method anymore.",
            "date": "2009-08-18T08:37:07.303+0000",
            "id": 19
        },
        {
            "author": "Luis Alves",
            "body": "The v3 file is the correct on with the changes.\nI just upload the old patch on v2.\nIt is late over here, sorry :)",
            "date": "2009-08-18T08:39:33.006+0000",
            "id": 20
        },
        {
            "author": "Michael Busch",
            "body": "OK with the v3 patch all tests pass now.\n\nOne question: wouldn't it be better if the WildcardQueryNode knew the positions of the wildcard characters? Then e.g. the AllowLeadingWildcardProcessor would not have to have knowledge about the wildcard chars * and ? and would not have to check again.\n\nI think this is not a big deal, we can make that optimization sometime later.\n\nI think I'm happy with the patch... I'll look a bit more tomorrow and commit then at the end of the day if I don't find any issues and nobody objects.",
            "date": "2009-08-18T08:52:20.048+0000",
            "id": 21
        },
        {
            "author": "Luis Alves",
            "body": "{quote}\nOne question: wouldn't it be better if the WildcardQueryNode knew the positions of the wildcard characters? Then e.g. the AllowLeadingWildcardProcessor would not have to have knowledge about the wildcard chars * and ? and would not have to check again.\n{quote}\nI like the idea, I'll create another JIRA for that, since WildcardQueryNode already knows about the wildcard positions,\nwe just need to add a method.\n\n{quote}\nI think I'm happy with the patch... I'll look a bit more tomorrow and commit then at the end of the day if I don't find any issues and nobody objects.\n{quote}\nThose are great news. One less issue for 2.9, almost there.",
            "date": "2009-08-18T08:57:17.109+0000",
            "id": 22
        },
        {
            "author": "Michael Busch",
            "body": "{quote}\nI like the idea, I'll create another JIRA for that, since WildcardQueryNode already knows about the wildcard positions,\nwe just need to add a method.\n{quote}\n\nOK, with fix version != 2.9 :)",
            "date": "2009-08-18T09:02:26.466+0000",
            "id": 23
        },
        {
            "author": "Michael Busch",
            "body": "Committed revision 805633.\n\nThanks, Luis!",
            "date": "2009-08-19T00:12:23.188+0000",
            "id": 24
        }
    ],
    "component": "modules/other",
    "description": "The old QueryParser defaults to constant score rewrite for Prefix,Fuzzy,Wildcard,TermRangeQuery, but the new one seems not to.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1792",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "new QueryParser fails to set AUTO REWRITE for multi-term queries",
    "systemSpecification": true,
    "version": "2.9"
}