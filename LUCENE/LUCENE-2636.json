{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "Patch w/ ChainingCollector, a matching test and CHANGES entry.",
            "date": "2010-09-08T13:58:07.938+0000",
            "id": 0
        },
        {
            "author": "Shai Erera",
            "body": "Committed revision 995373 (3x).\nCommitted revision 995375 (trunk).",
            "date": "2010-09-09T10:50:21.130+0000",
            "id": 1
        },
        {
            "author": "Shai Erera",
            "body": "I've received some offline comments about the name - MultiCollector (the original name in our code) seems to be more aligned w/ other Lucene classes, like MultiReader/Searcher. I personally think ChainingCollector is fine as well (and describes better what this class is about), however for consistency I think I'll rename it to MultiCollector. Any objections?",
            "date": "2010-09-10T10:01:22.845+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "Heh - Solr added a MultiCollector a few weeks ago (and it does exactly the same thing).\nAs far as naming, I agree this isn't a chaining collector, but a branching collector (and MultiCollector is a better name).\n\nSolr's version also has this, which simplifies building a list of collectors and then creating a single collector:\n{code}\n  public static Collector wrap(List<? extends Collector> collectors) {\n    return collectors.size() == 1 ? collectors.get(0) : new MultiCollector(collectors);  \n  }\n{code}\n\nWe should consolidate these two versions of course.",
            "date": "2010-09-10T12:07:59.424+0000",
            "id": 3
        },
        {
            "author": "Shai Erera",
            "body": "bq. Heh - Solr added a MultiCollector a few weeks ago\n\nNice :).\n\nbq. ... MultiCollector is a better name\n\nI will rename.\n\nbq. Solr's version also has this\n\nThat makes sense. If you eventually run w/ a single Collector, no need to have MultiCollector in the middle. I'll change MC then to have a private ctor and a static create method. I would like though for the method to receive a Collector... rather than List, because I think it simplifies matters on the application's end. And create will filter out all the null ones ...\n\nI'll post a patch soon.",
            "date": "2010-09-10T16:11:54.331+0000",
            "id": 4
        },
        {
            "author": "Shai Erera",
            "body": "Might need 1-2 iterations, so reopening.",
            "date": "2010-09-10T16:13:55.028+0000",
            "id": 5
        },
        {
            "author": "Shai Erera",
            "body": "Name changes + static wrap.",
            "date": "2010-09-10T16:37:04.525+0000",
            "id": 6
        },
        {
            "author": "Yonik Seeley",
            "body": "+1 looks good!",
            "date": "2010-09-10T16:41:47.315+0000",
            "id": 7
        },
        {
            "author": "Shai Erera",
            "body": "Committed revision 996058 (3x).\nCommitted revision 996060 (trunk).",
            "date": "2010-09-11T03:51:09.754+0000",
            "id": 8
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:49:53.503+0000",
            "id": 9
        }
    ],
    "component": "core/search",
    "description": "ChainingCollector allows chaining a bunch of Collectors, w/o them needing to know or care about each other, and be passed into Lucene's search API, since it is a Collector on its own. It is a convenient, yet useful, class. Will post a patch w/ it shortly.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2636",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Create ChainingCollector",
    "systemSpecification": true,
    "version": ""
}