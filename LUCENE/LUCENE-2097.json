{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Attached patch with test case that shows the issue.  Not yet sure what's the best way to fix it... probably we have to build the CFS before opening the reader we want to pool.",
            "date": "2009-11-29T11:07:33.169+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "This was separately fixed -- we now build the CFS before cutting over to it in the in-memory segments.",
            "date": "2011-03-10T18:25:54.118+0000",
            "id": 1
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:29.513+0000",
            "id": 2
        }
    ],
    "component": "core/index",
    "description": "Spinoff of java-user thread titled \"searching while optimize\"...\n\nIf IndexWriter is in NRT mode (you've called getReader() at least\nonce), and CFS is enabled, then internally the writer pools readers.\nHowever, after a merge completes, it opens the reader against het\nnon-CFS segment files, and pools that.  It then builds the CFS file,\nas well, thus tying up the storage for that segment twice.\n\nFunctionally the bug is harmless (it's only a disk space issue).\nAlso, when the segment is merged, the disk space is released again\n(though the newly merged segment will also be double-tied-up).\n\nSimple workaround is to use non-CFS mode, or, don't use getReader.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2097",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "In NRT mode, and CFS enabled, IndexWriter incorrectly ties up disk space",
    "systemSpecification": true,
    "version": "2.9, 2.9.1, 3.0"
}