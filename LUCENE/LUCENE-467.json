{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "Paul Smith's profiling shows that that encodeNorm() taking 20% of the total indexing time, with floatToIntBits registering all of that 20%!  almost hard to believe...\n\nThere should be some good gains with this change.\nIt would be nice to change the usage in Query.hashCode too.",
            "date": "2005-11-17T07:21:25.000+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "With -server mode, it's only 3 times as fast, and both are really fairly fast.\nI do wonder if the profiler had it's numbers right, or if the act of observation messed things up... 20% seems too high.",
            "date": "2005-11-17T13:26:54.000+0000",
            "id": 1
        },
        {
            "author": "Paul Smith",
            "body": "I probably didn't make my testing framework as clear as I should.  Yourkit was setup to use method sampling (waking up every X milliseconds).  I wouldn't use the 20% as a 'accurate' figure but suffice to say that improving this method would 'certainly' improve things.  Only testing the way you have will flush out the correct numbers.\n\nWe don't use -server (due to some Linux vagaries we've been careful with -server because of some stability problems)",
            "date": "2005-11-17T13:38:21.000+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "Fun with premature optimization!\nI know this isn't a bottleneck, but here is the fastest floatToByte() that I could come up with:\n\n  public static byte floatToByte(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    if (bits<=0) return 0;\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (bits >>> 24) - 63 + 15;\n    if ((exponent & ~0x1f)==0) return (byte)((exponent << 3) | mantissa);\n    else if (exponent<0) return 1;\n    return -1;\n  }\n\nHere is the original from Lucene for reference:\n\n  public static byte floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0) {                           // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n   }\n\n\nHere is the performance (in seconds) on my P4 to do 640M conversions:\n\n              JDK14-server  JDK14-client  JDK15-server  JDK15-client  JDK16-server  JDK16-client\norig       75.422               89.451            8.344                 57.631            7.656                 57.984\nnew      67.265               78.891            5.906                 22.172            5.172                 18.750\ndiff        12%                    13%                41%                   160%              48%                   209%\n\nSome decent gains... but the biggest moral of the story is: use Java>=1.5 and -server if you can!\n\n",
            "date": "2005-11-17T15:12:00.000+0000",
            "id": 3
        },
        {
            "author": "Yonik Seeley",
            "body": "Here is a new version that's faster by keeping the mantissa and exponent\ntogether.  It's fast-path does a single shift and a single add after\ngetting the float bits.\n\n  public  byte floatToByte(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> 21;  // only keep 3 highest bits in mantissa\n    if (smallfloat < (63-15)<<3) {\n      return (bits<=0) ? (byte)0 : (byte)1;  // 0 or underflow\n    }\n    if (smallfloat >= ((63-15)+32)<<3) {\n      return -1; // overflow\n    }\n    return (byte)(smallfloat - ((63-15)<<3));\n  }\n\n\n---JVM--- -CUR-- -NEW-- -DIFF-\n14-server 75.422 66.515 13%\n14-client 89.451 79.734 12%\n15-server 8.344  3.859 116%\n15-client 57.631 17.031 238%\n16-server 7.656  3.172 141%\n16-client 57.984 16.531 251%\n\nThese numbers include the overhead of a float loop and the method\ncall overhead.\n",
            "date": "2005-11-18T02:27:45.000+0000",
            "id": 4
        },
        {
            "author": "Doug Cutting",
            "body": "How fast can you make:\n\npublic byte floatToByte(float f, int numMantissaBits);\n\n?\n\nThat would be more reusable, and shouldn't be much slower...\n",
            "date": "2005-11-18T03:22:56.000+0000",
            "id": 5
        },
        {
            "author": "Yonik Seeley",
            "body": "> How fast can you make: public byte floatToByte(float f, int numMantissaBits);\n\nWith Java5 and -server -Xbatch, just  as fast as the specialized version!  That server JVM is amazing!\nWith Java5 -client,  it's 60% slower though...\nStill this code might be good to keep around for double checking implementations.\n\n   public static byte floatToByte(float f, int numMantissaBits) {\n     int rshift = 24-numMantissaBits;   // 21 in old func\n     int maxexp = 0xff >> numMantissaBits; // 31 in old func\n     int zeroexp = 0xff >> (numMantissaBits+1); // 15 in old func\n     // int overflowexp = 0x100 >> numMantissaBits; // 32 in old func\n     int overflowexp = maxexp+1;\n     int bits = Float.floatToRawIntBits(f);\n     int smallfloat = bits >> rshift;\n     if (smallfloat < (63-zeroexp)<<numMantissaBits) {\n       return (bits<=0) ? (byte)0 : (byte)1;  // 0 or underflow\n     } else if (smallfloat >= (63-zeroexp+overflowexp)<<numMantissaBits) {\n       return -1;\n     } else {\n       return (byte)(smallfloat - ((63-zeroexp)<<numMantissaBits));\n     }\n   }\n\n   public byte floatToByte(float f) {\n    return floatToByte(f,3);\n   }\n",
            "date": "2005-11-18T04:44:31.000+0000",
            "id": 6
        },
        {
            "author": "Paul Smith",
            "body": "If you can create a patch against 1.4.3 there is a reasonable possibility that I could create a 1.4.3 Lucene+ThisPatch jar and re-index in our test environment that was the source of the YourKit graph I provided earlier.  This should reflect how useful the change might be against a decent baseline?",
            "date": "2005-11-18T05:38:45.000+0000",
            "id": 7
        },
        {
            "author": "Yonik Seeley",
            "body": "Here's a version that further generalizes the exponent zero point (below are negative exponents, above are positive), and includes the reverse byteToFloat as well.\n\n  public static float byteToFloat(byte b, int numMantissaBits, int zeroExp) {\n    if (b == 0) return 0.0f;\n    int bits = (b&0xff) << (24-numMantissaBits);\n    bits += (63-zeroExp) << 24;\n    return Float.intBitsToFloat(bits);\n  }\n\n  public float byteToFloat(byte b) {\n    return byteToFloat(b, 3, 15);\n  }\n\n  public static byte floatToByte(float f, int numMantissaBits, int zeroExp) {\n    int shift = 24-numMantissaBits;   // 21 in old func\n    int maxexp = 0xff >> numMantissaBits; // 31 in old func\n    // int zeroExp = 0xff >> (numMantissaBits+1); // 15 in old func\n    // int overflowexp = 0x100 >> numMantissaBits; // 32 in old func\n    int overflowexp = maxexp+1;\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> shift;\n    if (smallfloat < (63-zeroExp)<<numMantissaBits) {\n      return (bits<=0) ? (byte)0 : (byte)1;  // 0 or underflow\n    } else if (smallfloat >= (63-zeroExp +overflowexp)<<numMantissaBits) {\n      return -1;\n    } else {\n      return (byte)(smallfloat - ((63-zeroExp)<<numMantissaBits));\n    }\n  }\n\n  public byte floatToByte(float f) {\n    return floatToByte(f,3,15);\n  }\n",
            "date": "2005-11-18T05:43:54.000+0000",
            "id": 8
        },
        {
            "author": "Yonik Seeley",
            "body": "Committed current implementation as SmallFloat\nhttp://svn.apache.org/viewcvs.cgi/lucene/java/trunk/src/java/org/apache/lucene/util/SmallFloat.java\n\nUnless I hear objections, I'll convert the norm encoding/decoding in Similarity to use it.",
            "date": "2005-11-20T05:50:47.000+0000",
            "id": 9
        }
    ],
    "component": "core/other",
    "description": "Copied From my Email:\n  Float.floatToRawIntBits (in Java1.4) gives the raw float bits without\nnormalization (like *(int*)&floatvar would in C).  Since it doesn't do\nnormalization of NaN values, it's faster (and hopefully optimized to a\nsimple inline machine instruction by the JVM).\n\nOn my Pentium4, using floatToRawIntBits is over 5 times as fast as\nfloatToIntBits.\nThat can really add up in something like Similarity.floatToByte() for\nencoding norms, especially if used as a way to compress an array of\nfloat during query time as suggested by Doug.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-467",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Use Float.floatToRawIntBits over Float.floatToIntBits",
    "systemSpecification": false,
    "version": "1.9"
}