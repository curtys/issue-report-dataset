{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Attached patch.  I plan to commit in a day or two.",
            "date": "2008-03-04T10:17:00.283+0000",
            "id": 0
        },
        {
            "author": "Hoss Man",
            "body": "targeted for 2.3.2 bug fix release",
            "date": "2008-03-11T19:29:22.795+0000",
            "id": 1
        }
    ],
    "component": "core/index",
    "description": "In somewhat rare cases it's possible for addIndexes to deadlock\nbecause it is a synchronized method.\n\nNormally the merges that are necessary for addIndexes are done\nserially (with the primary thread) because they involve segments from\nan external directory.  However, if mergeFactor of these merges\ncomplete then a merge becomes necessary for the merged segments, which\nare not external, and so it can run in the background.  If too many BG\nthreads need to run (currently > 4) then the \"pause primary thread\"\napproach adopted in LUCENE-1164 will deadlock, because the addIndexes\nmethod is holding a lock on IndexWriter.\n\nThis was appearing as a intermittant deadlock in the\nTestIndexWriterMerging test case.\n\nThis issue is not present in 2.3 (it was caused by LUCENE-1164).\n\nThe solution is to shrink the scope of synchronization: don't\nsynchronize on the whole method & wrap synchronized(this) in the right\nplaces inside the methods.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1200",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "IndexWriter.addIndexes* can deadlock in rare cases",
    "systemSpecification": true,
    "version": "2.4"
}