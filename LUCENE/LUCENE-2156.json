{
    "comments": [
        {
            "author": "Earwin Burrfoot",
            "body": "Did I miss you exploiting 'atomicity' of IW flags? For what I see you could declare them volatile with same result and less characters typed.",
            "date": "2009-12-14T19:53:18.492+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "You're right!  AtomicBoolean is overkill...\n\nHmm, I think even volatile is overkill -- ensureOpen is only on a \"best effort\" basis; it makes no guarantee that it will be \"immediate\".  So I'll revert the changes to IndexWriter and remove the \"synchronized\" from ensureOpen.",
            "date": "2009-12-14T20:22:47.143+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "New patch.",
            "date": "2009-12-14T20:31:42.578+0000",
            "id": 2
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. ensureOpen is only on a \"best effort\" basis; it makes no guarantee that it will be \"immediate\"\nEhm. If you're okay with the possible case of ensureOpen()-guarded code to fail in grotesque ways because IW was in fact closed, but your \"best effort\" failed - why not drop ensureOpen() completely? It no longer \"ensures\" anything, what is its purporse?",
            "date": "2009-12-14T20:39:06.943+0000",
            "id": 3
        },
        {
            "author": "Yonik Seeley",
            "body": "ensureOpen() is to help catch coding mistakes, not to act in a completely deterministic way.  It should be as light weight as possible so correct programs aren't penalized.",
            "date": "2009-12-14T20:48:03.624+0000",
            "id": 4
        }
    ],
    "component": "core/index",
    "description": "Less costly than synchronized methods we have now...",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2156",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "use AtomicInteger/Boolean to track IR.refCount and IW.closed",
    "systemSpecification": true,
    "version": ""
}