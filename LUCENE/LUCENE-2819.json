{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "I think this is the problem: lets say the main thread spawns 3 other threads (A,B,C).\nwhen A throws exception, our uncaught exception handler calls the test to fail.\n\nThere is nothing wrong with this... the problem in your example is i think B and C are still running and then fail later (even if its just a few ms)\nSo these get 'misattributed' to the next test method... we can't do anything about that either without doing insane amounts of buffering.\n\nSo we need to improve the thread handling in general for the tests.\n",
            "date": "2010-12-18T11:30:10.212+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Attaching current patch; includes lots of noise and does not work yet!!  (I still see collateral damage).",
            "date": "2010-12-18T12:19:37.588+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "I worked on mike's patch a bit... here's an updated version.\n\nI think lucenetestcase is ok, but there are tests that need fixing.\n\nFor example TestParallelMultiSearcher doesn't close() its searcher, so its executor never gets shutdown.\nbecause of this the test now fails.",
            "date": "2010-12-18T13:33:32.755+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "here's an updated patch, I think its much better.\nThe core tests are passing but still need to do contrib/solr.\n\nSome problems i found, were having to 'actually close' the executorservices because ParallelMultiShredder doesnt wait for the shutdown to actually happen in its close().\n\nAlso the TimeLimitingCollector creates a new thread...statically! This just seems really evil.\n\nI don't think tests should be creating threads and not cleaning up after themselves!\n\nYou might also ask why even bother killing the the threads if we will fail anyway? \nTrue we will already fail the test in this case, but this is just to try to\nprevent the fails from being attributed to other test cases (the original problem here).\n",
            "date": "2010-12-18T17:04:19.549+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "ok final patch.\n\nWe can't quite fail() yet (it just warns for now) but we should fix it to fail.\n\nFor the solr tests we only test this in afterClass, this is because many solr tests legitimately\nstart up threads in beforeClass and shut them down in afterClass.\n\nThis means we cant prevent 'collateral damage' in these solr tests, but we can for lucene.\n\nstill for the solr tests, we can prevent collateral damage across test classes, and find resource leaks.\n",
            "date": "2010-12-18T19:04:54.282+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "committed and merged to 3.x\n\nin 3.x i kept the test code in CMS (even though unused) as i dont trust the 3.0 backwards LuceneTestCase \nenough to handle the uncaught exceptions... \n\ni marked @deprecated for us to remove in 3.2, i think thats easiest.\n\nwe should try to resolve some of the rogue thread issues so we can make this stuff actually fail instead of warn.",
            "date": "2010-12-19T00:49:20.192+0000",
            "id": 5
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:23.041+0000",
            "id": 6
        }
    ],
    "component": "general/test",
    "description": "Eg see these failures:\n\n    https://hudson.apache.org/hudson/job/Lucene-3.x/214/\n\nMultiple test methods failed in TestIndexWriterOnDiskFull, but, I think only 1 test had a real failure but somehow our \"thread hit exc\" tracking incorrectly blames the other 3 cases?\n\nI'm not sure about this but it seems like something like that is going on...\n\nSo, one problem is that LuceneTestCase.tearDown fails on any thread excs, but if CMS had also hit a failure, then fails to clear CMS's thread failures.  I think we should just remove CMS's thread failure tracking?  (It's static so it can definitely bleed across tests).  Ie, just rely on LuceneTestCase's tracking.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2819",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "LuceneTestCase's check for uncaught exceptions in threads causes collateral damage?",
    "systemSpecification": true,
    "version": ""
}