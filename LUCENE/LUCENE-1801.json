{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "There is an additional problem (mentioned above):\nThere is currently defined the clear() in Attribute interface, but this leads to the problem, that it is really more the task of AttributeImpl. The porblem is, that e.g. one TokenFilter, that adds a new type of attribute must could clear it. On the other hand, Token, which implements *all* attributes could also provide clear(). By this, there is an inconsistency: clear shold be removed from the general Attribute interface and moved downto each separate interface with a separate name. E.g. if somebody calls TermAttribute.clear, but may think that it only clears the term attribute may be wrong, if the actual implementation is Token, whic clears everything.\n\nThe biggest problem is backwards compatibility. Lucene 2.4.1 states in JavaDocs of Token: \"public void clear(): Resets the term text, payload, flags, and positionIncrement to default. Other fields such as startOffset, endOffset and the token type are not reset since they are normally overwritten by the tokenizer.\"\n\nI would propose to change the whole thing:\n- Remove clear() from the superinterface Attribute.\n- Let do Token what it is used to (as of 2.4.1)\n- Define a clearTerm(), clearPositionIncrement(), clearFlags() method for each attribute type separate (Token/TokenWrapper must implement it).\n- clear() is only defined in AttributeImpl and clears the whole implementation. AttributeSource.clearAttributes calls this method. Current code calling clear() on the attribute interface will fail to compile, but these are the places that must be fixed.\n\nThe problem of backwards compatibility can be solved the following way:\n- TokenWrapper clears the complete delegate Token to be consistent with AttributeSource.clearAttributes() - complete reset to default values incl offset. A problem only occurs if somebody registers Token (not the wrapper around as Attribute), then clearAttributes() would not be consistent with the rest, as it would miss to clear the offset.\n\nHow will we handle the clearAttributes() call in Tokenizers then? Should we only clear those attributes we work on in a Tokenizer/TokenFilter?",
            "date": "2009-08-11T18:51:21.406+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Any comments here? I will be unavailable until the weekend, so please make some suggestions, especially about the clear() problem. The first part with clearAttributes is easy, its just adding some code, the second one is refactoring.\nMichael B., what do you think?",
            "date": "2009-08-12T21:03:44.334+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Attached is a patch that implements clearAttributes() in all Tokenizers and other source of Tokens. It also removes clear() from Attribute basic interface.\n\nI commit in a day or two if nobody objects.",
            "date": "2009-08-12T22:16:57.137+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, there is also a tokenizer in contrib/memory inside PatternAnalyzer.\n\ni only mention this because I am trying to hunt down all analyzers/tokenstreams to check reuse/reset at the moment :) ",
            "date": "2009-08-12T22:25:37.697+0000",
            "id": 3
        },
        {
            "author": "Michael Busch",
            "body": "Sorry, Uwe. I'm in meetings.\n\nI'll look into this tonight!",
            "date": "2009-08-12T22:26:09.816+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Thanks Robert!\n\nCan you look into this special \"Tokenizer\" for correct \"initialization\" according to Yonik's comments?",
            "date": "2009-08-12T22:32:52.224+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, I can supply updated patch to yours if you want, since I am already staring at it!\n\nIn order to support reuse, it will need to be changed a little bit, but for now, we can simply resolve the clearAttributes issue\n",
            "date": "2009-08-12T22:35:30.433+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "with clearAttributes for the secret and super-secret tokenizer inside memory/PatternAnalyzer",
            "date": "2009-08-12T22:51:28.362+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "uwe, sorry I see there is an encoding problem with my patch file... i will supply another.",
            "date": "2009-08-12T22:53:30.383+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "sorry for the bad encoding issue!",
            "date": "2009-08-12T22:55:06.306+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "No problem, thanks for the patch. I was not aware that there were two inner classes. But they are no Tokenizers but TokenStreams. As they are the source of tokens, they must call clearAttributes(), you are right, thanks!\n\nIf you find another one, please post a patch again, maybe I forgot more of them. I will go to bed now.\n\nUwe",
            "date": "2009-08-12T23:04:58.543+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, get some rest.\n\nI will double-check later and see. Personally I do not like things that behave as Tokenizer but are TokenStream, not Tokenizer... this is another issue for another day!",
            "date": "2009-08-12T23:10:00.022+0000",
            "id": 11
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. As they are the source of tokens, they must call clearAttributes()\n\nNote: I had assumed that restoreState() would be enough if there was saved state being restored... but after checking the docs, it's not.\n\nMakes me wonder if there could be a more efficient clearAndRestoreState(State) that clears attributes not in the state?\nPatch for another day I suppose...",
            "date": "2009-08-12T23:17:02.702+0000",
            "id": 12
        },
        {
            "author": "Michael Busch",
            "body": "Patch looks good, Uwe!\n\nWhen I change Token.clear() to also set the offsets to 0 and the type to DEFAULT_TYPE, then still 'test-core', 'test-contrib' and 'test-tag' all pass. \nI think we could make that change and add a comment to the backwards-compatibility section of CHANGES.txt? I think it is the right behavior to reset everything in Tokenizer. \n\nAlso the comment in Token.clear() suggests that the only reason offset and type are not cleared is that tokenizers usually overwrite them anyways; so we're not changing the suggested behavior, and I doubt that people are really relying on the fact that offsets and type are currently not cleared?\n\nSo in summary, if we:\n- change all tokenizers to call clearAttributes() first in incrementToken(),\n- remove clear() from Attribute and leave it in AttributeImpl,\n- change Token.clear() to reset all members and add a comment about that in CHANGES.txt,\n\nthen everything seems good, or is then there still a problem that I'm missing?",
            "date": "2009-08-13T02:57:13.377+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "Final patch with Michaels suggestion.\n\nPlease note: I also changed Token.clearNoTermBuffer() to work identical (please tell me if I should revert this). This method is not used anywhere inside Lucene, but I want to make it work consistent, too.\n\nI will commit at the end of the day.",
            "date": "2009-08-14T07:40:18.805+0000",
            "id": 14
        },
        {
            "author": "Michael Busch",
            "body": "Patch looks good, Uwe!\n\n{quote}\nI will commit at the end of the day.\n{quote}\n\n+1.",
            "date": "2009-08-14T08:25:25.386+0000",
            "id": 15
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision 804392. Thanks also to Michael and Robert!",
            "date": "2009-08-14T22:02:24.824+0000",
            "id": 16
        }
    ],
    "component": "",
    "description": "This is a followup for LUCENE-1796:\n{quote}\nToken.clear() used to be called by the consumer... but then it was switched to the producer here: LUCENE-1101 \nI don't know if all of the Tokenizers in lucene were ever changed, but in any case it looks like at least some of these bugs were introduced with the switch to the attribute API - for example StandardTokenizer did clear it's reusableToken... and now it doesn't.\n{quote}\n\nAs alternative to changing all core/contrib Tokenizers to call clearAttributes first, we could do this in the indexer, what would be a overhead for old token streams that itsself clear their reusable token. This issue should also update the Javadocs, to clearly state inside Tokenizer.java, that the source TokenStream (normally the Tokenizer) should clear *all* Attributes. If it does not do it and e.g. the positionIncrement is changed to 0 by any TokenFilter, but the filter does not change it back to 1, the TokenStream would stay with 0. If the TokenFilter would call PositionIncrementAttribute.clear() (because he is responsible), it could also break the TokenStream, because clear() is a general method for the whole attribute instance. If e.g. Token is used as AttributeImpl, a call to clear() would also clear offsets and termLength, which is not wanted. So the source of the Tokenization should rest the attributes to default values.\n\nLUCENE-1796 removed the iterator creation cost, so clearAttributes should run fast, but is an additional cost during Tokenization, as it was not done consistently before, so a small speed degradion is caused by this, but has nothing to do with the new TokenStream API.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1801",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "OTHER",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Tokenizers (which are the source of Tokens) should call AttributeSource.clearAttributes() first",
    "systemSpecification": true,
    "version": "2.9"
}