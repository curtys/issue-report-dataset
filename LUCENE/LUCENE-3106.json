{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "patch with the test modifications to produce the failure.",
            "date": "2011-05-17T01:51:15.056+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "here's the obvious solution, but there might be a cleaner way to rewrite its loop...",
            "date": "2011-05-17T02:39:58.257+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "bulk move 3.2 -> 3.3",
            "date": "2011-06-03T16:40:48.884+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "this was fixed in LUCENE-3113",
            "date": "2011-06-09T16:23:04.858+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "close issue, as fixed in already released version",
            "date": "2011-11-27T12:32:47.307+0000",
            "id": 4
        }
    ],
    "component": "modules/analysis",
    "description": "In LUCENE-3064, we beefed up MockTokenizer with assertions, and I started cutting over some analysis tests to use MockTokenizer for better coverage.\n\nThe commongrams tests fail, because they call incrementToken() after it already returns false. \n\nIn general its my understanding consumers should not do this (and i know of a few tokenizers that will actually throw exceptions if you do this, just like java iterators and such).",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3106",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "commongrams filter calls incrementToken() after it returns false",
    "systemSpecification": true,
    "version": ""
}