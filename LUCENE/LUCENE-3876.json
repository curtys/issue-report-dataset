{
    "comments": [
        {
            "author": "Simon Willnauer",
            "body": "this seems to be related to LUCENE-3874. The patch in LUCENE-3874 isn't actually working all the time since on very large positions is > Int.MAX >> 1 we can easily shift a leading 1 in FreqProxTermsWriterPerField#writeProx makeing the position value negative. I think we need to do something like:\n\n{code}\n--- a/lucene/core/src/java/org/apache/lucene/index/DocInverterPerField.java\n+++ b/lucene/core/src/java/org/apache/lucene/index/DocInverterPerField.java\n@@ -110,9 +110,9 @@ final class DocInverterPerField extends DocFieldConsumerPerField {\n \n             final int posIncr = posIncrAttribute.getPositionIncrement();\n             int position = fieldState.position + posIncr;\n-            if (position > 0) {\n+            if (position > 0 && position <= (Integer.MAX_VALUE>>1)) {\n               position--;\n-            } else if (position < 0) {\n+            } else if (position != 0) {\n               throw new IllegalArgumentException(\"position overflow for field '\" + field.name() + \"'\");\n             }\n{code} \n\nto make sure we have a leading 0 or rather two leading 0's to prevent the overflow.\n",
            "date": "2012-03-16T09:58:41.571+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Hmm I think we need a separate check in FreqProxTermsWriterPerField?\n\nIe, that class is \"private\" to the indexing chain; it's a like a codec, that's used to buffer postings in RAM until we write them to the \"real\" codec, and in theory an app could swap in a different indexing chain that didn't steal a bit from the posDelta...",
            "date": "2012-03-16T10:35:03.006+0000",
            "id": 1
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Hmm I think we need a separate check in FreqProxTermsWriterPerField?\nyeah I agree. I just made this patch up to show the problem though!",
            "date": "2012-03-16T10:42:02.842+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "it shoudl check exactly at the point before shifts any bits: and the exception should be UOE ",
            "date": "2012-03-16T11:44:08.949+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "By the way, the reason this doesnt fail always but only for certain codecs:\n\nsome codecs have assertions that get tripped, so they fail the test.\nother codecs don't have these asserts, so they pass the test, and checkindex happens to pass.\n\nbut this is only because checkindex ignores deleted docs in testPostings, the index really is corrumpt in those cases!\n\nattached is a new test demonstrating this: for some codecs it triggers an assert, for others it makes a corrumpt index. I havent tested this yet on 3.x but i suspect it fails!",
            "date": "2012-03-16T12:15:36.360+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "See my comment and test (which produces a corrumpt index on 3.x)\n\nThe fact this test doesnt fail on 3.x is a *bad thing* :)",
            "date": "2012-03-16T12:19:28.736+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "attached is a fix. I want to commit soon.\n\nWe just used the wrong shift. Our sign bit is free here to steal for payloads. So we don't need to limit positions to Integer.MAX_VALUE/2",
            "date": "2012-03-16T12:31:26.879+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "+1",
            "date": "2012-03-16T12:33:04.871+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "thanks everyone!",
            "date": "2012-03-16T12:44:54.695+0000",
            "id": 8
        }
    ],
    "component": "",
    "description": "{noformat}\nant test -Dtestcase=TestIndexWriterExceptions -Dtestmethod=testIllegalPositions -Dtests.seed=-228094d3d2f35cf2:-496e33eec9bbd57c:36a1c54f4e1bb32 -Dargs=\"-Dfile.encoding=UTF-8\"\n\n    [junit] junit.framework.AssertionFailedError: position=-2 lastPosition=0\n    [junit]     at org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.addPosition(Lucene40PostingsWriter.java:215)\n    [junit]     at org.apache.lucene.index.FreqProxTermsWriterPerField.flush(FreqProxTermsWriterPerField.java:519)\n    [junit]     at org.apache.lucene.index.FreqProxTermsWriter.flush(FreqProxTermsWriter.java:92)\n    [junit]     at org.apache.lucene.index.TermsHash.flush(TermsHash.java:117)\n    [junit]     at org.apache.lucene.index.DocInverter.flush(DocInverter.java:53)\n    [junit]     at org.apache.lucene.index.DocFieldProcessor.flush(DocFieldProcessor.java:81)\n    [junit]     at org.apache.lucene.index.DocumentsWriterPerThread.flush(DocumentsWriterPerThread.java:475)\n    [junit]     at org.apache.lucene.index.DocumentsWriter.doFlush(DocumentsWriter.java:422)\n    [junit]     at org.apache.lucene.index.DocumentsWriter.flushAllThreads(DocumentsWriter.java:553)\n    [junit]     at org.apache.lucene.index.IndexWriter.doFlush(IndexWriter.java:2640)\n    [junit]     at org.apache.lucene.index.IndexWriter.flush(IndexWriter.java:2616)\n    [junit]     at org.apache.lucene.index.IndexWriter.closeInternal(IndexWriter.java:851)\n    [junit]     at org.apache.lucene.index.IndexWriter.close(IndexWriter.java:810)\n    [junit]     at org.apache.lucene.index.IndexWriter.close(IndexWriter.java:774)\n    [junit]     at org.apache.lucene.index.TestIndexWriterExceptions.testIllegalPositions(TestIndexWriterExceptions.java:1517)\n    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    [junit]     at java.lang.reflect.Method.invoke(Method.java:597)\n    [junit]     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n    [junit]     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    [junit]     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n    [junit]     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n    [junit]     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    [junit]     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$SubclassSetupTeardownRule$1.evaluate(LuceneTestCase.java:729)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$InternalSetupTeardownRule$1.evaluate(LuceneTestCase.java:645)\n    [junit]     at org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:22)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$TestResultInterceptorRule$1.evaluate(LuceneTestCase.java:556)\n    [junit]     at org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:51)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$RememberThreadRule$1.evaluate(LuceneTestCase.java:618)\n    [junit]     at org.junit.rules.RunRules.evaluate(RunRules.java:18)\n    [junit]     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\n    [junit]     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n    [junit]     at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:164)\n    [junit]     at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:57)\n    [junit]     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n    [junit]     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n    [junit]     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n    [junit]     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n    [junit]     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n    [junit]     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    [junit]     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\n    [junit]     at org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:51)\n    [junit]     at org.apache.lucene.util.StoreClassNameRule$1.evaluate(StoreClassNameRule.java:21)\n    [junit]     at org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:22)\n    [junit]     at org.junit.rules.RunRules.evaluate(RunRules.java:18)\n    [junit]     at org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n    [junit]     at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:39)\n    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:518)\n    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052)\n    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:906)\n    [junit] \n{noformat}",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3876",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "TestIndexWriterExceptions fails (reproducible)",
    "systemSpecification": true,
    "version": ""
}