{
    "comments": [
        {
            "author": "Martijn van Groningen",
            "body": "All the current group collectors use currently DocTermsIndex. With function queries I think this can't be used. However changing this requires changing the collectors in many places. So I think the getGroupKey() method isn't enough. Solr uses the MutableValue to abstract away the source of the values. I'm not sure what we can use in Lucene to have this abstraction. ",
            "date": "2011-05-15T13:49:19.527+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "I was thinking we could parameterize the type of the group key for these collectors, ie today it's BytesRef, but Solr would use MutableValue instead, and would subclass to override the getGroupKey (and presumably also setNextReader).  Not sure it'll all work though until we try it... I agree there are alot of places that need to be touched.",
            "date": "2011-05-15T14:03:52.382+0000",
            "id": 1
        },
        {
            "author": "Martijn van Groningen",
            "body": "In order to avoid double FC usage we need to let the grouping collectors instantiate the right fieldcache for the right field. \nThe current collectors always create a StringIndex (3.x) or DocTermsIndex (4.0). When you sort on the same field as you group and this field is for example an int. Then a complete new StringIndex / DocTermsIndex is put in the FieldCache.",
            "date": "2011-05-26T00:19:52.818+0000",
            "id": 2
        },
        {
            "author": "Martijn van Groningen",
            "body": "Attached an initial idea of abstracting away the source of the group values.\n\nIn the patch there are four concepts:\n* GroupValue. An abstraction of a value.\n* GroupValueSource. An abstraction of the source of the group value.\n* GroupHolder. An abstract holder to get the groups in a efficient manner.\n* GroupSpecification. A factory class that glues all the above concepts together.\n\nI think with this infrastructure it is quite straight forward to add the ability to group by a function. The patch contains implementations for all fields (string, int, double etc.).\n\nSome concepts are look like with what is already in Lucene / Solr. For example Lucene's ValueSource and DocValues or Solr's DocValues and MutableValue. I just started from scratch to see what grouping really needs. The Lucene's DocValues for example didn't have all functionality grouping needs.\n\nFurthermore I have added research group collectors. I ported the MatchAllGroupsCollector and FirstPassGroupingCollector to use this new infrastructure. Just to get a feeling of how it all fits together.\n\nI also included a simple runner class that runs these research collectors and compares them to the variants already added to the code base. You can then easily check search times and the group results. ",
            "date": "2011-05-28T21:47:42.258+0000",
            "id": 3
        },
        {
            "author": "Martijn van Groningen",
            "body": "Also some initial performance indications. This data was created with the runner provided in the patch. A ran it on a index of 30M documents that has 7502 unique groups.\n{code}\n===== First pass collectors execution =====\nnumber   |collector                               |query                   |time (ms)   |Current mem usage (MB)  \n1        |FirstPassGroupingCollector              |country:es              |888         |170                     \n2        |ResearchFirstPassGroupingCollector      |country:es              |710         |170                     \n3        |FirstPassGroupingCollector              |country:es country:eg   |1448        |170                      \n4        |ResearchFirstPassGroupingCollector      |country:es country:eg   |1350        |170                      \n5        |FirstPassGroupingCollector              |country:it              |2           |170                    \n6        |ResearchFirstPassGroupingCollector      |country:it              |3           |170                     \n7        |FirstPassGroupingCollector              |country:gr              |45          |170                      \n8        |ResearchFirstPassGroupingCollector      |country:gr              |43          |170                    \n9        |FirstPassGroupingCollector              |country:it              |3           |170                    \n10       |ResearchFirstPassGroupingCollector      |country:it              |3           |170                    \n11       |FirstPassGroupingCollector              |country:it              |2           |170                    \n12       |ResearchFirstPassGroupingCollector      |country:it              |3           |170                    \n13       |FirstPassGroupingCollector              |country:eg              |67          |170                    \n14       |ResearchFirstPassGroupingCollector      |country:eg              |91          |171                     \n15       |FirstPassGroupingCollector              |country:es country:eg   |1387        |171                    \n16       |ResearchFirstPassGroupingCollector      |country:es country:eg   |1351        |171                     \n17       |FirstPassGroupingCollector              |country:e*              |2264        |173                    \n18       |ResearchFirstPassGroupingCollector      |country:e*              |1036        |176                     \n19       |FirstPassGroupingCollector              |country:it              |2           |176                     \n20       |ResearchFirstPassGroupingCollector      |country:it              |3           |176                      \n21       |FirstPassGroupingCollector              |*:*                     |526         |176                     \n22       |ResearchFirstPassGroupingCollector      |*:*                     |410         |176                     \n23       |FirstPassGroupingCollector              |country:gr              |50          |177                      \n24       |ResearchFirstPassGroupingCollector      |country:gr              |45          |177                      \n25       |FirstPassGroupingCollector              |country:es country:eg   |1397        |177                     \n26       |ResearchFirstPassGroupingCollector      |country:es country:eg   |1362        |177                     \n27       |FirstPassGroupingCollector              |*:*                     |544         |177                      \n28       |ResearchFirstPassGroupingCollector      |*:*                     |411         |177                    \n29       |FirstPassGroupingCollector              |country:tr              |54          |177                     \n30       |ResearchFirstPassGroupingCollector      |country:tr              |52          |177                      \n31       |FirstPassGroupingCollector              |*:*                     |531         |177                    \n32       |ResearchFirstPassGroupingCollector      |*:*                     |413         |177                     \n33       |FirstPassGroupingCollector              |*:*                     |534         |177                     \n34       |ResearchFirstPassGroupingCollector      |*:*                     |416         |177                      \n35       |FirstPassGroupingCollector              |country:eg              |67          |177                    \n36       |ResearchFirstPassGroupingCollector      |country:eg              |64          |177                    \n37       |FirstPassGroupingCollector              |country:gr              |45          |177                     \n38       |ResearchFirstPassGroupingCollector      |country:gr              |47          |177                      \n39       |FirstPassGroupingCollector              |country:e*              |1109        |181                     \n40       |ResearchFirstPassGroupingCollector      |country:e*              |965         |185                      \n41       |FirstPassGroupingCollector              |country:us              |56          |185                      \n42       |ResearchFirstPassGroupingCollector      |country:us              |62          |185                      \n43       |FirstPassGroupingCollector              |country:gr              |44          |185                      \n44       |ResearchFirstPassGroupingCollector      |country:gr              |42          |185                      \n45       |FirstPassGroupingCollector              |country:es              |872         |185                      \n46       |ResearchFirstPassGroupingCollector      |country:es              |723         |185                     \n47       |FirstPassGroupingCollector              |country:es              |804         |185                      \n48       |ResearchFirstPassGroupingCollector      |country:es              |717         |185                      \n49       |FirstPassGroupingCollector              |country:es              |747         |185                      \n50       |ResearchFirstPassGroupingCollector      |country:es              |723         |185                      \n\n\n\n===== All groups collectors execution =====\nnumber   |collector                     |query                   |time (ms)   |count       |Current mem usage (MB)\n1        |AllGroupsCollector            |country:us              |54          |11          |185         \n2        |ResearchAllGroupsCollector    |country:us              |53          |11          |169         \n3        |AllGroupsCollector            |country:it              |2           |9           |169         \n4        |ResearchAllGroupsCollector    |country:it              |2           |9           |169         \n5        |AllGroupsCollector            |country:tr              |64          |1700        |170         \n6        |ResearchAllGroupsCollector    |country:tr              |67          |1700        |170         \n7        |AllGroupsCollector            |*:*                     |454         |7502        |170         \n8        |ResearchAllGroupsCollector    |*:*                     |471         |7502        |170         \n9        |AllGroupsCollector            |country:tr              |51          |1700        |171         \n10       |ResearchAllGroupsCollector    |country:tr              |61          |1700        |171         \n11       |AllGroupsCollector            |country:es              |717         |3012        |171         \n12       |ResearchAllGroupsCollector    |country:es              |755         |3012        |171         \n13       |AllGroupsCollector            |country:es              |691         |3012        |172         \n14       |ResearchAllGroupsCollector    |country:es              |765         |3012        |172         \n15       |AllGroupsCollector            |*:*                     |411         |7502        |172         \n16       |ResearchAllGroupsCollector    |*:*                     |462         |7502        |173         \n17       |AllGroupsCollector            |country:es              |685         |3012        |173         \n18       |ResearchAllGroupsCollector    |country:es              |743         |3012        |173         \n19       |AllGroupsCollector            |country:eg              |57          |646         |173         \n20       |ResearchAllGroupsCollector    |country:eg              |63          |646         |173         \n21       |AllGroupsCollector            |country:tr              |51          |1700        |173         \n22       |ResearchAllGroupsCollector    |country:tr              |54          |1700        |174         \n23       |AllGroupsCollector            |country:it              |2           |9           |174         \n24       |ResearchAllGroupsCollector    |country:it              |3           |9           |174         \n25       |AllGroupsCollector            |*:*                     |433         |7502        |174         \n26       |ResearchAllGroupsCollector    |*:*                     |709         |7502        |175         \n27       |AllGroupsCollector            |country:tr              |50          |1700        |175         \n28       |ResearchAllGroupsCollector    |country:tr              |59          |1700        |175         \n29       |AllGroupsCollector            |country:gr              |44          |2061        |175         \n30       |ResearchAllGroupsCollector    |country:gr              |43          |2061        |175         \n31       |AllGroupsCollector            |country:us              |17          |11          |176         \n32       |ResearchAllGroupsCollector    |country:us              |27          |11          |176         \n33       |AllGroupsCollector            |country:tr              |55          |1700        |176         \n34       |ResearchAllGroupsCollector    |country:tr              |55          |1700        |176         \n35       |AllGroupsCollector            |country:e*              |941         |3658        |180         \n36       |ResearchAllGroupsCollector    |country:e*              |1087        |3658        |184         \n37       |AllGroupsCollector            |country:es              |706         |3012        |184         \n38       |ResearchAllGroupsCollector    |country:es              |747         |3012        |184         \n39       |AllGroupsCollector            |country:eg              |57          |646         |185         \n40       |ResearchAllGroupsCollector    |country:eg              |61          |646         |185         \n41       |AllGroupsCollector            |country:es country:eg   |1507        |3658        |170         \n42       |ResearchAllGroupsCollector    |country:es country:eg   |1512        |3658        |171         \n43       |AllGroupsCollector            |country:gr              |38          |2061        |171         \n44       |ResearchAllGroupsCollector    |country:gr              |41          |2061        |172         \n45       |AllGroupsCollector            |country:us              |17          |11          |172         \n46       |ResearchAllGroupsCollector    |country:us              |19          |11          |172         \n47       |AllGroupsCollector            |country:es              |708         |3012        |172         \n48       |ResearchAllGroupsCollector    |country:es              |742         |3012        |172         \n49       |AllGroupsCollector            |country:us              |17          |11          |172         \n50       |ResearchAllGroupsCollector    |country:us              |19          |11          |173         \n{code}",
            "date": "2011-05-28T21:54:23.771+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch, with a possible more minimal approach to enabling Solr trunk to cutover to the grouping module.",
            "date": "2011-05-29T17:07:06.141+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "\nThat patch is totally untested, and has at least 2 generics\nwarnings!  But hopefully the approach can work...\n\nBasically the idea of the 2nd patch is to just make minimal extensions\npoints to the current grouping collectors, so that Solr could subclass\nthese and use its MutableValue/DocValues to manage the group keys.  I\nthink this would then mean Solr trunk and Solr 3.x could fully cutover\nand not lose any functionality (and gain the benefits of the grouping\nmodule).\n\nSeparately, we should merge the cool GroupValue, GroupValueSource,\nGroupHolder, etc., from the first patch here, with Solr's equivalents,\nfactored out I think into a shared \"common\" module that the FQ module\n(LUCENE-2883) can also use.\n",
            "date": "2011-05-29T17:16:02.109+0000",
            "id": 6
        },
        {
            "author": "Martijn van Groningen",
            "body": "Attached a new patch that is based on Mike's patch.\n* All existing grouping tests pass\n* AllGroupsCollector has also been included in this infrastructure.\n\nOnly the TermSecondPassGroupingCollector didn't work. The size groupDocs array was too small.\n\nI think the following things need to be done:\n* Update the documentation in package.html\n* Backport to 3x\n\nShould we rename all abstract collectors to Abstract*? To make it clear that these classes are abstract.",
            "date": "2011-05-29T20:31:40.877+0000",
            "id": 7
        },
        {
            "author": "Martijn van Groningen",
            "body": "{quote}\nSeparately, we should merge the cool GroupValue, GroupValueSource,\nGroupHolder, etc., from the first patch here, with Solr's equivalents,\nfactored out I think into a shared \"common\" module that the FQ module\n(LUCENE-2883) can also use.\n{quote}\n+1! We need to find out what fq and grouping really needs under the hood. Performance can not be harmed by moving this into common module.\nYou think that we already should open a new issue for this?",
            "date": "2011-05-29T20:34:30.059+0000",
            "id": 8
        },
        {
            "author": "Martijn van Groningen",
            "body": "Attached an updated patch.\n\nI'm currently busy with integrating the grouping module in trunk Solr. I noticed that FirstPassGroupingCollector and SecondPassGroupingCollector still has groupField as field and constructor argument. So I moved this to TermsFirstPassGroupingCollector and TermSecondPassGroupingCollector. Also made a small change in GroupDocs regarding generics.",
            "date": "2011-05-29T21:59:11.039+0000",
            "id": 9
        },
        {
            "author": "Martijn van Groningen",
            "body": "I think the SecondPassGroupingCollector class needs the following two methods instead of getDocSlot:\n{code:java}\n  public void collect(int doc) throws IOException {\n    totalHitCount++;\n    if (gatherGroupedDocs(doc)) {\n      retrieveGroup(doc).collector.collect(doc);\n    }\n  }\n\n  protected abstract boolean gatherGroupedDocs(int doc) throws IOException;\n\n  protected abstract SearchGroupDocs<GROUP_VALUE_TYPE> retrieveGroup(int doc) throws IOException;\n{code}\n\nWhen working with fqs the slot is not practical, since there is no ords (like DocTermsIndex).\nThis setup works nicely in both impls. Downside is that for the Terms impl the ord key has to be looked up twice when gatherGroupedDocs(..) returns true.",
            "date": "2011-05-29T22:38:55.008+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "\nbq. Should we rename all abstract collectors to Abstract*? To make it clear that these classes are abstract.\n\n+1\n\nbq. You think that we already should open a new issue for this?\n\nI think we can take this up under LUCENE-2883?  There's already an\ninitial patch there, starting to factor out Mutable*...\n\nShould we name it TermAllGroupsCollector (instead of Terms...)?  Or,\nfix the others to be TermsFirst/SecondPassCollector?\n\nbq. I noticed that FirstPassGroupingCollector and SecondPassGroupingCollector still has groupField as field and constructor argument. So I moved this to TermsFirstPassGroupingCollector and TermSecondPassGroupingCollector\n\nAhh, excellent -- these abstract base classes don't need to know it's\na feild we are grouping on.\n\nbq. When working with fqs the slot is not practical, since there is no ords (like DocTermsIndex).\n\nOK I agree.\n\nMaybe, instead, we can have only retrieveDocGroup?  And if it returns\nnull that means the group for this doc isn't being collected?  Then we\ndon't double the ord lookup for TermSecondPass.\n",
            "date": "2011-05-30T18:51:32.900+0000",
            "id": 11
        },
        {
            "author": "Martijn van Groningen",
            "body": "bq. I think we can take this up under LUCENE-2883?\nI thought that 2883 was more about integrating fq, not a general module for value source and docvalues that both grouping and fq can share. But I might have been mistaken.\n\nbq. Should we name it TermAllGroupsCollector\n+1 I'll rename it\n\n{quote}\nMaybe, instead, we can have only retrieveDocGroup? And if it returns\nnull that means the group for this doc isn't being collected? Then we\ndon't double the ord lookup for TermSecondPass.\n{quote}\nThat seems reasonable to me. That also saves a key lookup for the TermSecondPassGroupingCollector.",
            "date": "2011-05-30T19:16:04.225+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I thought that 2883 was more about integrating fq, not a general module for value source and docvalues that both grouping and fq can share. But I might have been mistaken.\n\nRight LUCENE-2883 is about FQ, but I'm thinking we should simply \"birth\" the commons module under LUCEEN-2883, meeting only the needs of FQ, initially.\n\nAfter FQ is relatively done/stabilized, then we should look into grouping offering collectors for all filed types, using the infrastructure from that common module, and extending the common module at that time if there are needs of grouping not yet met, ie merging in the GroupValue, GroupValueSource, GroupHolder from this patch.",
            "date": "2011-05-30T19:28:39.541+0000",
            "id": 13
        },
        {
            "author": "Martijn van Groningen",
            "body": "{quote}\nAfter FQ is relatively done/stabilized, then we should look into grouping offering collectors for all filed types, using the infrastructure from that common module, and extending the common module at that time if there are needs of grouping not yet met, ie merging in the GroupValue, GroupValueSource, GroupHolder from this patch.\n{quote}\nThat makes sense to me.",
            "date": "2011-05-30T19:35:25.737+0000",
            "id": 14
        },
        {
            "author": "Martijn van Groningen",
            "body": "Attached a new patch with the discussed changes. The AbstractMatchAllGroupCollector changed a lot. Most code is pushed to implementation classes. During development of fq impl I noticed that the abstraction was still too specific for terms impl.",
            "date": "2011-05-31T22:58:17.700+0000",
            "id": 15
        },
        {
            "author": "Martijn van Groningen",
            "body": "Previous patch was wrong. Here a new one.",
            "date": "2011-05-31T23:00:16.334+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "I think we are close here!  It's great to see you're able to cutover\nSolr trunk to the grouping module based on this.\n\nRandom things:\n\n  * I think we can in fact use Map<...> instead of HashMap<...> in 2nd\n    pass abstract collector?\n\n  * Can you add @SuppressWarnings(\"unchecked\") for the generic array\n    creations?\n\n  * Can you fix the other generics warnings?  Eg the copy-ctor in\n    TopGroups, and TestGrouping has a few warnings.  (\"ant clean\n    compile-test\" should show all these warnings).\n\n  * The class in AllGroupsCollectorTest needs to be renamed\n\n  * OK, let's leave groupDocs as protected in the 2nd pass collector\n    (remove the nocommit/your response).\n\n  * For AbstractAllGroupsCollector, can we impl the getGroupCount in\n    the base class as getGroups.size()?\n",
            "date": "2011-06-01T19:25:33.028+0000",
            "id": 17
        },
        {
            "author": "Martijn van Groningen",
            "body": "Attached an updated version of the patch with the Mike's points. When building the module no generic warnings occur any more in the ant build. I also updated some documentation.\n\n{quote}\nFor AbstractAllGroupsCollector, can we impl the getGroupCount in\nthe base class as getGroups.size()?\n{quote}\nCertainly! Much better. Since the method is syntactical sugar anyway.",
            "date": "2011-06-02T12:41:00.784+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks great -- I think it's ready to commit!\n\nLooks like LUCENE-3097 snuck into the patch (AllGroupHeadsCollector).\n",
            "date": "2011-06-02T15:05:32.347+0000",
            "id": 19
        },
        {
            "author": "Martijn van Groningen",
            "body": "bq. Looks like LUCENE-3097 snuck into the patch (AllGroupHeadsCollector).\n\noops... Yes it did. My change lists collide. Maybe it is time use git...",
            "date": "2011-06-02T15:29:23.154+0000",
            "id": 20
        },
        {
            "author": "Martijn van Groningen",
            "body": "Updated patch to trunk. Previous patch can't be applied on the current trunk without issues.",
            "date": "2011-06-02T21:17:38.932+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Martijn!",
            "date": "2011-06-03T16:05:09.075+0000",
            "id": 22
        },
        {
            "author": "Robert Muir",
            "body": "bulk close for 3.3",
            "date": "2011-07-02T02:40:12.361+0000",
            "id": 23
        }
    ],
    "component": "",
    "description": "The new grouping module can only group by a single-valued indexed field.\n\nBut, if we make the 'getGroupKey' a method that a subclass could override, then I think we could refactor Solr over to the module, because it could do function queries and normal queries via subclass (I think).\n\nThis also makes the impl more extensible to apps that might have their own interesting group values per document.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3099",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Grouping module should allow subclasses to set the group key per document",
    "systemSpecification": true,
    "version": ""
}