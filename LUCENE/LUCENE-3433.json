{
    "comments": [
        {
            "author": "Simon Willnauer",
            "body": "yonik, do we really need random access? we already have an enum for on disk lookups which is essentially a DocIDSetIterator.",
            "date": "2011-09-13T21:07:46.350+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "Simon: I think it would be a really nice feature.\n\nImagine someone that has a large collection and maybe quite a few docvalues fields:\nit would be nice if you have a fixed int64 docvalues for it to just be a mmap'ed readLong() for example.\n\nI think in a lot of cases the memory resident random-access that we have now is going to be great, e.g.\nif someone wants to use it for a scoring factor and its going to be super-hot.\n\nbut in other more advanced cases (especially if you have many of them or access is relatively infrequent)\nit would be a nice option to have available where currently you have to deal with the downsides of \n'fake terms' with a payload or stored fields.\n",
            "date": "2011-09-13T22:37:28.068+0000",
            "id": 1
        },
        {
            "author": "Jason Rutherglen",
            "body": "This is somewhat funny, as it seems the opinion has changed on MMap'ing and the potential for page faults:\n\nhttp://www.lucidimagination.com/search/document/8951a336dffa9535/storing_and_loading_the_fst_directly_from_disk#8951a336dffa9535",
            "date": "2011-09-13T23:40:41.889+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "no opinion has changed: traversing on disk automata in the way you describe is inefficient. \n\nhere I describe accessing a fixed long value: 1 seek per access.\n\nhow many seeks will an fst lookup take? hint: its more than 1!",
            "date": "2011-09-14T00:15:22.366+0000",
            "id": 3
        },
        {
            "author": "Jason Rutherglen",
            "body": "Here's another thread discussing MMap'ing and field caches, where the consensus is against it:\n\nhttp://www.lucidimagination.com/search/document/70623ef5879bca38/fst_and_fieldcache#45006a7fe2847c09 posted in \"1969-12-31 19:00\" :)",
            "date": "2011-09-14T02:05:18.503+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "this isn't the field cache.",
            "date": "2011-09-14T02:38:43.820+0000",
            "id": 5
        },
        {
            "author": "Simon Willnauer",
            "body": "I looked at the code and figured that there is actually not much difference implementation wise to random access vs. advance(). I basically renamed int advance(int) to int seek(int) which has similar semantics as advance has but can do seek forward and backwards. I think we can go with such an approach since we still have advance etc. and implementation wise there is not much overhead.",
            "date": "2011-10-04T10:40:52.535+0000",
            "id": 6
        },
        {
            "author": "Simon Willnauer",
            "body": "any comments on the patch here? If nobody objects I am going to commit this later today.",
            "date": "2011-10-05T07:32:23.152+0000",
            "id": 7
        },
        {
            "author": "Chris Male",
            "body": "I don't have any particular comments on the implementation, but I really like the seek() API, its nice and clear so +1 to committing.",
            "date": "2011-10-05T07:44:35.780+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "Do we have any DV enum impls that cannot move backwards?  If not, maybe we should just remove advance() and only have seek()?",
            "date": "2011-10-05T10:02:36.424+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "Maybe we should take a look at the bigger picture: perhaps DocValues should really just be\na ByteBuffer where offsets are docids, maybe even just using ByteBuffer etc API?\n\nPersonally i think the seek() versus advance() is overkill, I think having DISI-like enums\ndoesn't really make sense for CSF (which is random access by definition), it only\nneeds get(int) apis.\n\n",
            "date": "2011-10-05T10:10:54.654+0000",
            "id": 10
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Maybe we should take a look at the bigger picture: perhaps DocValues should really just be\na ByteBuffer where offsets are docids, maybe even just using ByteBuffer etc API?\n\nthis looks like a very big change to me. you should open an issue and uplaod a patch so we can see how that looks like for variable bytes etc.\n\nbq. Personally i think the seek() versus advance() is overkill, I think having DISI-like enums\ndoesn't really make sense for CSF (which is random access by definition), it only\nneeds get(int) apis.\n\nI figured adding this is a quick win. I'd rather refine the API in a different issue?",
            "date": "2011-10-05T10:24:10.719+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nthis looks like a very big change to me. you should open an issue and uplaod a patch so we can see how that looks like for variable bytes etc.\n{quote}\n\nWell this is just discussion? Basically I'm trying to shoot for some simplification here.\n\nAs far as variable bytes, maybe DocValues shouldn't actually implement variable bytes,\nbut instead is used only to implement the docid -> offset part. In other words, the variable bytes\nis basically like stored fields today, and docvalues just does the FDX part. This means\ndocvalues doesnt need a variable bytes impl at all, you just use a Long impl.\n\nFor the \"FDT\" part of variable bytes we could have something else? then this would simplify\nDocValues some more and narrow its scope.\n",
            "date": "2011-10-05T10:31:27.011+0000",
            "id": 12
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Well this is just discussion? Basically I'm trying to shoot for some simplification here.\nto this seems like a major rewrite and far more than this issue, no? Can you create a new issue for this & the discussion",
            "date": "2011-10-05T10:50:31.574+0000",
            "id": 13
        },
        {
            "author": "Robert Muir",
            "body": "I don't know, to me it seems to fit this issue perfectly.\n\nIf we are looking at CSF as a random-access per-doc value, then I'm just suggesting perhaps\nthe APIs should reflect its random-access-ness... just a get(int docid) basically.\n\nwe dont have to do this immediately, we can add seek to the enums like you did for now,\nthough i'm slightly concerned this would make it more difficult to nuke the enums later if\nwe decide to try to simplify the APIs much later down the road, but this isn't a big deal.\n",
            "date": "2011-10-05T10:59:12.562+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "I agree, the DocValues should be designed to be random access from the beginning, Iterators just look wrong. We can supply them on top, but the basic API should look like ByteBuffer, FloatBuffer, IntBuffer,...",
            "date": "2011-10-05T11:29:24.228+0000",
            "id": 15
        },
        {
            "author": "Yonik Seeley",
            "body": "A faster short-term \"expert level\" API for fixed width values would be to just allow the retrieval of the underlying IndexInput (and return null if not supported so we don't box ourselves in).  Then a getLong() for example, would go right to ByteBuffer.getLong() (for the mmap directory) and avoid extra checking and copying to another BytesRef.\n\nAnyway, it would be nice to eventually have something closer to the metal in the spirit of the bulk-api branch that doesn't impose per-call bounds checking and other book keeping like advance() currently does (I can see Uwe cringing now ;-)\n\nAside: in FixedStraightBytesEnum, I see:\n{code}\n      if (target >= maxDoc || size == 0) {\n{code}\n\nThe size==0 check shouldn't be needed, right?\n",
            "date": "2011-10-05T12:41:41.100+0000",
            "id": 16
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "Random access is also important if we want to use DocValues instead of norms.",
            "date": "2011-10-05T12:55:34.667+0000",
            "id": 17
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Random access is also important if we want to use DocValues instead of norms.\nwe have random access already for in memory source.\n\nTo simplify this here a bit we could remove ValuesEnum and use Source also for on disk access. The source API is already pretty much like ByteBuffer etc but provides the flexibility we need on the impl level.\n\n",
            "date": "2011-10-05T16:48:48.208+0000",
            "id": 18
        },
        {
            "author": "Simon Willnauer",
            "body": "This patch removes all uses of ValuesEnum and adds a IndexDocValues#getDirectSource() which provides direct access without loading into memory. This patch also removes all bounds checks and improves on disk access on several variants. \n\nits still a bit rough but reflects the idea. However, this patch also removes the sorted variant for efficiency reasons. Currently those variant require a lot of memory during merge as well as a sep. interface (sortedSource) which adds another complexity to the API. With this patch we only have a single API (Source) which is a good start to further improve this.",
            "date": "2011-10-05T16:55:52.940+0000",
            "id": 19
        },
        {
            "author": "Robert Muir",
            "body": "I like the direction of this patch!",
            "date": "2011-10-05T17:06:10.894+0000",
            "id": 20
        },
        {
            "author": "Michael McCandless",
            "body": "bq. However, this patch also removes the sorted variant for efficiency reasons. \n\nWait, we lose SortedSource entirely?  Or just for getDirectSource?\n\nCan we break out that lossage as a separate issue?  (I don't think we\nshould drop it?).  Or is it somehow coupled to removal of the enums?\n\nThis value type is useful for apps that want to sort by string field,\nwithout paying the high uninversion-on-reader-init that you now pay\n(to use FieldCache).  Grouping should also cutover to this (away\nfrom FieldCache).\n",
            "date": "2011-10-05T17:21:28.804+0000",
            "id": 21
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nThis value type is useful for apps that want to sort by string field,\nwithout paying the high uninversion-on-reader-init that you now pay\n(to use FieldCache). Grouping should also cutover to this (away\nfrom FieldCache).\n{quote}\n\nI think this is bogus? If you have high-turnaround/NRT you are gonna pay the price to uninvert somewhere,\nso it doesnt matter where you do it.\n\nIf you don't, then you shouldnt be closing your IndexReader and reopening the same one again.\n\n+1 to drop SortedSource",
            "date": "2011-10-05T17:23:45.954+0000",
            "id": 22
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Wait, we lose SortedSource entirely? Or just for getDirectSource?\nSortedSource or rather its impls. are hairy and horribly inefficient during merge. They only support 2GB max. and load everything into heap memory during merge. I think we can make this more efficient but as long as it is using so much memory we shouldn't release this. I am going to create another issue we can pick up later with a patch that contains the sorted source impls we have today. we can then pick it up from there.\n\n",
            "date": "2011-10-05T18:54:41.958+0000",
            "id": 23
        },
        {
            "author": "Michael McCandless",
            "body": "bq. SortedSource or rather its impls. are hairy and horribly inefficient during merge. \n\nWell let's address that (\"remove SortedSource\") under a different issue?  I don't think we should remove them here because it's unrelated (there are other great simplifications here).\n\nI'm all for simplifying, but not if we lose good functionality (cut into the bone).\n\nLoading everything into heap can be solved, but, I think is relatively low priority because that's how the search app would use sorted DV at search time anyway.  Ie, an app sets this on their \"country\" field because they know they want to sort by \"country\" at search time, and they will load the DV into RAM at search time.  We only hold this RAM allocated while we merge the one field, then it's freed, so if multiple DV sort fields are used, merging takes less RAM than searching.  I think the merge RAM usage is relatively minor.\n\nThe SortedSource has a simple API (just like FC.DocTermsIndex): getOrd(int docID), getValue(int ord).  I don't see why this is adding complexity to DV.",
            "date": "2011-10-05T19:59:21.030+0000",
            "id": 24
        },
        {
            "author": "Robert Muir",
            "body": "I agree with simon here, can't we spin off a different issue for these?\n\nSeems like this is really a higher level thing that belongs on a fieldcache issue, in my opinion docvalues should just be per-document values... \n(i think its great if we can use it under the covers to speed up some use case: not sure one exists here...)\n\nI would rather we simplify docvalues behind the scenes, allow it to grow and mature iteratively on its own without shoving fieldcache into it.",
            "date": "2011-10-05T20:05:07.709+0000",
            "id": 25
        },
        {
            "author": "Simon Willnauer",
            "body": "here is a new patch containing a bunch of cleanup and javadocs. \n\nI also attached a patch that adds back the sorted source so we can spin off a new issue and make them efficient without writing it from the scratch.\n\nthis one seems close / ready.",
            "date": "2011-10-06T10:22:50.159+0000",
            "id": 26
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I agree with simon here, can't we spin off a different issue for these?\n\n+1: I agree removal of SortedSource is unrelated to this issue.  We\nshould discuss it under a new issue (it's obviously contentious), and\nfor this issue do the nice cleanups we all agree on.  It shouldn't be\nremoved under this one.\n\nOne shouldn't have to pay such a high price (uninversion on searcher\nstartup) to sort or group by a string field, which we do today.  It's\nsilly to re-invert on every searcher startup when we can sort once\nduring indexing and record that in the doc values, and SortedSource\ngives us that.\n\nBesides the merge RAM usage (which I think is minor) is there a\ntechnical/code complexity reason that SortedSource should be removed?\nDoes it somehow require the enums or something?  I'm trying to\nunderstand how/why it suddenly got coupled into this issue...\n\nI think sorting and grouping by string fields are first class\nfunctions for Lucene.\n",
            "date": "2011-10-06T10:53:21.593+0000",
            "id": 27
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I also attached a patch that adds back the sorted source so we can spin off a new issue and make them efficient without writing it from the scratch.\n\nSimon, can you invert this patch, and open a new issue for removing\nSortedSource?",
            "date": "2011-10-06T10:54:13.547+0000",
            "id": 28
        },
        {
            "author": "Martijn van Groningen",
            "body": "bq. I think sorting and grouping by string fields are first class functions for Lucene.\nAnd faceting too!\n\nMaybe we should have DocTermIndex that is independent of source and have impls for DV and impls for indexed values.\nMaybe the name DocTermIndex doesn't make sense then, because it suggests that values come from the inverted index which might not be the case.",
            "date": "2011-10-06T11:03:18.902+0000",
            "id": 29
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nI think sorting and grouping by string fields are first class\nfunctions for Lucene.\n{quote}\n\nI disagree: if you aren't sorting by score, then go use a database.",
            "date": "2011-10-06T11:34:22.506+0000",
            "id": 30
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Simon, can you invert this patch, and open a new issue for removing SortedSource?\n\nactually my plan was to have one iterface for now and then open an issue to add back the SortedSource with an impl that we all agree on. Currently, the sorted variants are somewhat flaky and heavy I think we should simply remove it here and then go and work out a plan how to implement this. The technical reason here is simply to rethink the interface, we now have one which is simple so let see what we can do to make this work with sorted variants. \n\nsimon",
            "date": "2011-10-06T11:36:47.624+0000",
            "id": 31
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\n+1: I agree removal of SortedSource is unrelated to this issue. We\nshould discuss it under a new issue (it's obviously contentious), and\nfor this issue do the nice cleanups we all agree on. It shouldn't be\nremoved under this one.\n{quote}\n\nThats not what i meant by spin off a different issue, i think we should\nspin off a different issue to add back SortedSource.\n\nDocvalues really needs to be simplified, Simon has done just that, and I think\nits great as a part of that that it focuses on what it should be, thats per-document values,\nnot being some precomputed FieldCache.\n\n",
            "date": "2011-10-06T11:44:03.197+0000",
            "id": 32
        },
        {
            "author": "Mark Miller",
            "body": "{quote}I agree removal of SortedSource is unrelated to this issue. We\nshould discuss it under a new issue (it's obviously contentious), and\nfor this issue do the nice cleanups we all agree on. It shouldn't be\nremoved under this one.{quote}\n\n+1 - something contentious should not be removed in an unrelated issue like this. If it's already in, but some want it out, let's make an a new issue to discuss. Once something is in, there should be a clear and dedicated issue discussing it's removal if there is dispute. I don't agree with simply pulling it and putting the onus on those who want it to make an issue to get it back in.",
            "date": "2011-10-06T12:34:46.817+0000",
            "id": 33
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. +1 - something contentious should not be removed in an unrelated issue like this. If it's already in, but some want it out, let's make an a new issue to discuss. Once something is in, there should be a clear and dedicated issue discussing it's removal if there is dispute. I don't agree with simply pulling it and putting the onus on those who want it to make an issue to get it back in.\n\nthere is no dispute here If you'd have looked at the API and the code you'd know what I talk about though. We cut over to a new api where sorted source doesn't fit in nicely. We had ValuesEnum used for merging as the LCD between SortedSource and Source. Now we only have Source as a RandomAccess API. To keep this at a reasonable size we should try to add the missing part in a different issue. We should also rethink how to merge sortd sources since they are quite mem heavy (I think this is a potential issue). Adding back SortedSource is going to be tough without a new issue since lots of stuff has changed. To make this dev process easier backing out and re-adding seems best to me. Don't worry we gonna add it back though.",
            "date": "2011-10-06T13:11:03.076+0000",
            "id": 34
        },
        {
            "author": "Mark Miller",
            "body": "bq. there is no dispute here\n\nIf there is no dispute, what exactly is Mike talking about?",
            "date": "2011-10-06T13:17:26.704+0000",
            "id": 35
        },
        {
            "author": "Robert Muir",
            "body": "Here is the way i see the problem:\n* Currently docvalues is a bit confusing... I think a lot of this is due to the current API\n* no offense to simon but i think in a way this forces him to feel responsible for doing all work on it. The complexity makes it hard for others to get involved.\n* with this patch, the api becomes a lot simpler: i'm sure its not perfect but the API seems to correspond to what DV does, at least it makes sense to me.\n\ncan we temporarily drop SortedSource, open a new issue to add it back (mark it blocker for 4.0 even?!). This way, we can rethink how to implement this functionality (maybe it doesnt even belong as docvalues but something on top of it, or something else entirely).\n",
            "date": "2011-10-06T13:25:08.810+0000",
            "id": 36
        },
        {
            "author": "Simon Willnauer",
            "body": "here we go.. the make everybody happy patch! I added SortedSource back and integrated it into the Source pattern for random access. we now have an entirely disk resident SortedSource impl for both variants and a single interface in the first place. SortedSource instance can be obtained via Source#asSortedSource() which returns null if the source is not sorted. With this random access DirectSortedSource we can also improve the merging for sorted sources which was one of my major issues here.",
            "date": "2011-10-06T16:12:51.532+0000",
            "id": 37
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Simon!  I'll look through the patch... it's a great cleanup.",
            "date": "2011-10-06T18:17:39.674+0000",
            "id": 38
        },
        {
            "author": "Michael McCandless",
            "body": "Patch is awesome Simon; thank you.\n\nOnly thing I noticed: can you fix SortedSource.numOrds back to .getValueCount?\n\n+1 to commit!",
            "date": "2011-10-06T21:23:33.599+0000",
            "id": 39
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Only thing I noticed: can you fix SortedSource.numOrds back to .getValueCount?\nyeah thats the better name though - no idea why I changed that though.... anyway I will commit this soon if nobody objects.\n\nsimon",
            "date": "2011-10-07T08:27:33.318+0000",
            "id": 40
        },
        {
            "author": "Chris Male",
            "body": "Having the simpler interface seems like a great achievement.  I love that we can keep SortedSource.\n\n+1 to committing.",
            "date": "2011-10-07T08:57:18.077+0000",
            "id": 41
        },
        {
            "author": "Simon Willnauer",
            "body": "committed in rev. 1179970",
            "date": "2011-10-07T09:06:09.421+0000",
            "id": 42
        }
    ],
    "component": "",
    "description": "There should be a way to get specific IndexDocValues by going through the Directory rather than loading all of the values into memory.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3433",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Random access non RAM resident IndexDocValues (CSF)",
    "systemSpecification": true,
    "version": "4.0-ALPHA"
}