{
    "comments": [
        {
            "author": "Bernhard Messer",
            "body": "Created an attachment (id=12477)\n[PATCH] new version of TermVectorsReader without synchronized code.\n",
            "date": "2004-08-19T02:54:30.000+0000",
            "id": 0
        },
        {
            "author": "Bernhard Messer",
            "body": "Created an attachment (id=12478)\n[PATCH] new version of SegmentReader using ThreadLocal for accessing TermVectorsReader\n",
            "date": "2004-08-19T02:55:22.000+0000",
            "id": 1
        },
        {
            "author": "Bernhard Messer",
            "body": "Created an attachment (id=12479)\n[PATCH} new multithreaded TermVectors test class\n",
            "date": "2004-08-19T02:55:56.000+0000",
            "id": 2
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Bernhard,\n\nThanks for the patch.  The unit test requires class o.a.lucene.util.English. \nThis is not in CVS.  Is this something that should be in the CVS?  What is it?\n\nI am also wondering about this piece of code:\n\n-      termVectorsReader = new TermVectorsReader(cfsDir, segment, fieldInfos);\n+       final Directory dir = cfsDir;\n+       termVectorsLocal = new ThreadLocal() {\n+               protected synchronized Object initialValue() {\n+                       try {\n+                               return new TermVectorsReader(dir, segment,\nfieldInfos);\n+                       } catch (IOException ioe) {\n+                               ioe.printStackTrace();\n+                               return null;\n+                       }\n+               }\n+       };\n\nIs is a good thing to 'eat' that IOException and quietly return null?  The\nmethod where this code is, is already throwing IOException, so why not let the\nIOException pop up?\n\nFinally, it looks like diffs contain tabs.  Could you please change tabs to 2\nspaces?\n\nThanks,\nOtis",
            "date": "2004-08-19T18:47:49.000+0000",
            "id": 3
        },
        {
            "author": "Bernhard Messer",
            "body": "Created an attachment (id=12501)\n[PATCH] all source and diff files necessary for the patch\n",
            "date": "2004-08-22T02:15:29.000+0000",
            "id": 4
        },
        {
            "author": "Bernhard Messer",
            "body": "Otis,\n\nhere is the patch to get rid of synchronized parts in TermVectorsReader. As\ndescribed in my previous mail, TermVectorReader is cloneable now. In\nSegmentReader there is still the original TermVectorReader object created,. This\nobject is necessary so that we can close opened streams. All threads get there\nown local copy, which is a clone from the original and stored within the\nThreadLocal.\n\nThere is also a change in Exception handling. I noticed that IndexReader already\nthrows an IOException in the two getTermFreqVectors(...) methods. In the\nimplementation of the cvs version, TermVectorsReader class catches all\nexceptions and prints either stacktrace or swallowed it. Exception within\nTermVecvtorsReader never popped up at the caller. The patch now catches all\npossible exceptions in TermVectorsReader and is throwing a new IOException which\nis passed to SegmentReader.\n\nThe zip attachment includes 5 files:\nTermVectorsReader.diff\nSegmentReader.diff\nTestMultiThreadTermVectors.java -- this is a new junit test to test multithreading\nTestSegmentReader.diff -- IOException has to be caught\nTestTermVectorsReader.diff -- adjust to the new behaviour\n\nall junit tests passed fine. Although a test indexing 25.000 text files passed.\n\nbest regards\nBernhard\n",
            "date": "2004-08-22T02:15:50.000+0000",
            "id": 5
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Bernhard,\n\nI'll try looking at this some time this week.  Did you run your performance\ntests against the code with these changes applied?  What is the performance gain\nnow?\n\nThanks.",
            "date": "2004-08-23T20:18:30.000+0000",
            "id": 6
        },
        {
            "author": "Bernhard Messer",
            "body": "yes i did. The performance improve will be visible having multiple threads\nfetching term vectors and sharing the same IndexReader. It's hardly to test on a\nsingle processor machine and thats all i have for the moment. The tests i did, \nruns against an index with 25.000 text files (avg. 4KB per file). The test is\nfiring 500 calls per thread to fetch term vectors with a random generated\ndocument id. Before i start the real measurement, i'm running several thousand\nqueries against the index to warm up lucene and the file system cache. What you\nsee is that the performance boost is between 0% running a single thread and 30%\nrunning 10 threads. I'm sure it would be even better running it on a multiple\nprocessor machine.\nWhere i have no explanation for, is that the index creation process is about 10%\nfaster using the patch.\n\nbest regards\nBernhard",
            "date": "2004-08-24T03:57:22.000+0000",
            "id": 7
        },
        {
            "author": "Christoph Goller",
            "body": "Thank you very much for your patch. \nI reviewed and applied it.\n\nbest regards,\nChristoph",
            "date": "2004-10-06T18:43:03.000+0000",
            "id": 8
        }
    ],
    "component": "core/index",
    "description": "Otis,\n\nhere the latest and last patch to get rid of all synchronized code from\nTermVectorsReader. It should include at least 3 files, TermVectorsReader.diff,\nSegmentReader.diff and the new junit test case TestMultiThreadTermVectors.java.\nThe patch was generated against the current CVS version of TermVectorsReader and\nSegmentReader. All lucene related junit tests pass fine.\n\nbest regards\nBernhard",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-265",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "[PATCH] to remove synchronized code from TermVectorsReader",
    "systemSpecification": false,
    "version": ""
}