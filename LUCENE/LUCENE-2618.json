{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "I'm guessing that this line fails (which is 126 in my most recent checkout):\n\n{code}\n      assertTrue(reader.isOptimized());\n{code}\n\nIs this the one that's pointed by your code Mike? If so, I suggest we include a message to the assertion, something like \"index should be optimized\". It's annoying that JUnit does not print \"should be true but was false\", or something like that, and instead prints 'null', which is more intimidating :).\n\nPerhaps we should also add some more info to the print, like the number of segments in and index and whether there are deletions, so we'd have a better clue why the test failed?\n\nI've tried to run the test a couple of times, but it passed ...",
            "date": "2010-08-24T19:03:10.710+0000",
            "id": 0
        },
        {
            "author": "Shai Erera",
            "body": "Sorry, I've missed the part about this happening in backwards tests. The line numbers match for me, and I see the assertion messages. I do think though that additional info such as the number of segments and deleted docs would be useful, since reader.isOptimize() will return false if either of these two is wrong.\n\nAnd we can add the same message to the regular test as well ...",
            "date": "2010-08-24T19:11:30.227+0000",
            "id": 1
        },
        {
            "author": "Mark Miller",
            "body": "I'm catching something similar on current tests I think:\n{code}\n   [junit] Testsuite: org.apache.lucene.index.TestThreadedOptimize\n    [junit] Testcase: testThreadedOptimize(org.apache.lucene.index.TestThreadedOptimize):\tFAILED\n    [junit] expected:<248> but was:<256>\n    [junit] junit.framework.AssertionFailedError: expected:<248> but was:<256>\n    [junit] \tat org.apache.lucene.index.TestThreadedOptimize.runTest(TestThreadedOptimize.java:119)\n    [junit] \tat org.apache.lucene.index.TestThreadedOptimize.testThreadedOptimize(TestThreadedOptimize.java:142)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase.runBare(LuceneTestCase.java:380)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase.run(LuceneTestCase.java:372)\n    [junit] \n    [junit] \n    [junit] Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 0.733 sec\n{code}",
            "date": "2010-08-25T18:13:16.987+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "I think I found this!\n\nAfter a merge completes, IW then checks w/ the merge policy to see if followon merges are now necessary.\n\nBut this check is skipped if IW.close is pending (ie has been called and is waiting for merges to complete).\n\nHowever, if that merge is an optimize, then we should in fact consult the merge policy even when a close is pending, which we are not doing today.\n\nTiny patch (attached) should fix it.",
            "date": "2010-10-21T10:28:45.665+0000",
            "id": 3
        },
        {
            "author": "Shai Erera",
            "body": "For education purposes - why should we consult the MP if it's an optimize, even while closing? If close(false) is called after optimize() was called, it means the app would like to abort merges ASAP. If so, why would we consult the MP if we're instructed to abort?\n\nAre you talking about a different use case?",
            "date": "2010-10-21T10:50:10.929+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nIf close(false) is called after optimize() was called, it means the app would like to abort merges ASAP. If so, why would we consult the MP if we're instructed to abort?\n\nAre you talking about a different use case?\n{quote}\n\nSorry, different use case.\n\nThis use case is you call .optimize(doWait=false) then you call a normal .close() (ie, wait for merges).  In this case we wait for all running merges to finish, but don't start any new ones.  My patch would still allow new ones to start if the merges are due to a running optimize.\n\nYour use case, where .close(false) is called, will in fact abort all running merges and close quickly.  Ie we will not start new merges, even for optimize, if you pass false to close, with this pattch.",
            "date": "2010-10-21T12:52:04.493+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "thanks for tracking this down...! \n\nI think if we fix this one, then we are really into the long tail of random test fails (at least for now)\n",
            "date": "2010-10-21T12:56:11.187+0000",
            "id": 6
        },
        {
            "author": "Shai Erera",
            "body": "Ok Mike, that makes sense. You want to allow optimize() to finish all possible merges. Why then not let regular merges finish all the way through, even if we're closing? I mean, the application wants to wait for all running merges, so why is optimize() different than maybeMerge()?",
            "date": "2010-10-21T13:04:53.357+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "We do allow all running merges to run to completion.\n\nBut, we don't allow new merges to start, unless it's part of an ongoing optimize (as of this patch).\n\nI think this distinction makes sense?  Since optimize was an explicit call, it should run until completion.  But merging can simply pick up the next time the index is opened?\n\nIf an app really wants to allow all merges to run before closing (even new ones starting) it can call waitForMerges and then close.",
            "date": "2010-10-21T18:40:46.286+0000",
            "id": 8
        },
        {
            "author": "Shai Erera",
            "body": "I don't personally mind either way. Just want to point out that calling maybeMerge is as explicit as calling optimize. You can argue for both that if an app wants to wait for merges it can call waitForMerges. In fact, an app calling close() already stated it wants to wait for merges - it's as if it called waitForMerges followed by close.\n\nI think you're trying to distinguish merges that started because the MP decided they should run following a certain commit to those triggered by explicit call to optimize. So IMO maybeMerge and optimize are the same as both were explicitly initiated by the application.\n\nThis test fails because it assumes optimize will run to completion. What if the test assumed maybeMerge runs to completion? Isn't that a valid expectation from an application calling close()? We're also distinguishing the first round of merges from subsequent rounds, only when maybeMerge is called, but not optimize...",
            "date": "2010-10-21T19:19:46.566+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Just want to point out that calling maybeMerge is as explicit as calling optimize.\n\nBut: apps don't normally call maybeMerge?  This is typically called within IW, eg on segment flush.\n\nI mean, it is public so apps can call it, but I expect very few do (vs optimize which apps use alot).  It's the exception not the rule...\n\nI guess I feel that close should try to close quickly -- an app would not expect close to randomly take a long time (it's already bad enough since a large merge could be in process...).   So, allowing other merges to start up, which could easily be large merges since they are follow-on ones, would make that worse.\n\nAlternatively, we could define the semantics of close as being allowed to prevent a running optimize from actually completing?  Then we'd have to change this test, eg to call .waitForMerges before close.",
            "date": "2010-10-21T22:14:31.315+0000",
            "id": 10
        },
        {
            "author": "Shai Erera",
            "body": "Ok - I agree maybeMerge is probably less frequently called than optimize. And perhaps we can look at it that way: when you call optimize, you know exactly what to expect. You control the # of final segments. When you call maybeMerge lucene does not guarantee the final result. Unless you know exactly the state of all the segments in the index (which except than from unit tests I think it's very unlikely) and exactly what your MP is doing, you cannot expect any guaranteed outcome from calling maybeMerge, except for it \"doing the best effort\".\n\nWhat bothered me is that even if maybeMerge and optimize may go through several levels of merging following one call to them, one is guaranteed to complete and the other isn't. But since optimize is more common in apps than the other, I'm willing to make that exception. Perhaps then add to maybeMerge docs that if you want to guarantee merges finish when close is called, you should wait for merges? Or should we add it to close?\n\nI'm fine now with this fix. +1 to commit.",
            "date": "2010-10-22T05:38:29.954+0000",
            "id": 11
        },
        {
            "author": "Michael McCandless",
            "body": "OK thanks Shai... I'll commit shortly.",
            "date": "2010-10-22T14:13:01.850+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "This commit sometimes fails TestBackwards because IndexWriter.close() now also throws IndexFormatTooOldException if the previous call to optimize() have thrown it already.",
            "date": "2010-10-22T16:55:29.838+0000",
            "id": 13
        },
        {
            "author": "Michael McCandless",
            "body": "Hmm.... indeed you can repro with:\n\n{noformat}ant test-core -Dtestcase=TestBackwardsCompatibility -Dtestmethod=testUnsupportedOldIndexes -Dtests.seed=-7202471693621265890:9015568443891620555{noformat}\n\nI'll revert until I can figure this out... sorry!",
            "date": "2010-10-22T17:55:46.182+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "OK so I think we should fix this test to also accept an IndexTooOldExc during close.\n\nThe .optimize() call for only the 29.nocfs case (for some reason) enrolls 2 pending merges to IW.\n\nThe 1st merge hits an exception, throwing up through the .optimize() to the test.  But the 2nd merge remains queued, and in IW.close() we give MS a chance to run any merges it needs to, and that 2nd merge then also hits an exc.",
            "date": "2010-10-22T19:36:43.406+0000",
            "id": 15
        },
        {
            "author": "Shai Erera",
            "body": "Does this mean I'll need to catch that exception every time I close an IW, or at least prepare to catch it? If so, shouldn't we document it? Is it only relevant to the test?\n\nSomehow this change / fix starts to get complicated. Can IW swallow those exceptions internally, and relieve the application from all this? When I close(false), I should be prepared to hit MergeAbortedException, it's kinda part of the API contract. But when I close(true), why do I need to be prepared to handle any exception, except for real IO ones?",
            "date": "2010-10-22T19:44:11.936+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Does this mean I'll need to catch that exception every time I close an IW, or at least prepare to catch it?\n\nWell, IndexFormatTooOldExc subclasses IOE... but, yes, if there's a risk you'll open a too-old index, you should try to handle this.\n\nIW.close does alot... flush the last segment, let MS run any pending merges, do commit, delete now-not-need files, etc.  So there's plenty of chances for interested excs.\n\nbq. Is it only relevant to the test?\n\nWell, this test opens an IW on a too-old index... so if your app may do that....\n\nbq. Can IW swallow those exceptions internally, and relieve the application from all this?\n\nWhoa no way!",
            "date": "2010-10-22T19:57:57.891+0000",
            "id": 17
        },
        {
            "author": "Shai Erera",
            "body": "I see. It's just that you describe this exception as being thrown because close is called while optimize was running over an old index - but I don't understand why it has to be thrown in this case - namely, what's the connection between optimize + close and an old index? If my app knowingly opened a too old index, would it get this exception always, if it will call optimize followed by close? Or is it a special scenario hit by the test?",
            "date": "2010-10-22T20:11:22.051+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "bq.  If my app knowingly opened a too old index, would it get this exception always, if it will call optimize followed by close? Or is it a special scenario hit by the test?\n\nNot always.  It's only if the MP registered more than 1 merge for the optimize, and, you're using SMS.\n\nBut, really if your app has risk of opening a too-old index, it should be prepared for this exc...\n\nbq. namely, what's the connection between optimize + close and an old index?\n\nMP enrolled 2 merges for the optimize... the first one hits exc... then test calls close... and close lets MS run... and MS is SMS... and it runs the 2nd merge, which this the exc.",
            "date": "2010-10-22T20:21:12.632+0000",
            "id": 19
        },
        {
            "author": "Michael McCandless",
            "body": "I think there's a separate issue open (Uwe?) to have IW immediately throw this exc on open, instead of during optimize/close.",
            "date": "2010-10-22T20:22:08.956+0000",
            "id": 20
        },
        {
            "author": "Shai Erera",
            "body": "OK Mike .I understood the sequence of operations that led to this exception before. What didn't add up is why is it thrown during optimize, and not say up front when IW is opened, or when the Directory was added through addIndexes.\n\nWe should fix the code to throw the exception immediately. Is there a way to check a Directory if it's old or not? If not, such exception could really throw you off your chair, when you hit it at a point in time not remotely related to when it was added to the index.\n\nI don't mind if you continue w/ the fix to the test as you did, but IMO it just hides the real problem. I.e., allowing all merges caused by optimize() to finish is a correct fix. But catching that exception upon IW.close() is a bad one IMO - people who read the code learn how to use Lucene, and catching that exception on close() makes absolutely no sense, at least to me. Could you plz add a TODO there to get rid of that code when we fix IW to detect old indexes up front? That way, if someone reads the code, he'll at least understand that this is a temporary solution.",
            "date": "2010-10-23T08:12:25.185+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "bq. We should fix the code to throw the exception immediately. Is there a way to check a Directory if it's old or not?\n\nI agree -- IW.open should fail immediately if any of the segments are too old.\n\nUnfortunately, I don't see a simple way to do this.  We can't just look at the version of the segments_N file, for example, because one segment could be from 2.9, and [say] 3.1 had last opened the index and written the 3.x file format for segments_N.  See, IW does not go and open all SegmentReaders on open.  It's only on merge, applying deletes, or opening an NRT reader, that we go and open segments for reading.\n\nI think to do this correctly we should modify segments_N format to record the oldest segment in the index?  Then IW can check this easily on open.\n\nbq. I don't mind if you continue w/ the fix to the test as you did, but IMO it just hides the real problem. I.e., allowing all merges caused by optimize() to finish is a correct fix. \n\nI agree.\n\nThere is already a pre-existing TODO in the test stating that we should fix IW to throw this exc on open.  I'll also add a TODO to IW's ctor and go open an issue...",
            "date": "2010-10-23T09:59:57.689+0000",
            "id": 22
        },
        {
            "author": "Michael McCandless",
            "body": "OK I opened LUCENE-2720.",
            "date": "2010-10-23T10:03:50.283+0000",
            "id": 23
        },
        {
            "author": "Shai Erera",
            "body": "Thanks Mike.",
            "date": "2010-10-23T10:41:41.721+0000",
            "id": 24
        },
        {
            "author": "Michael McCandless",
            "body": "Ugh -- last night's 3.x build just failed again!  So this was not the [only] cause.  Hmm.  I'll leave this reopened....",
            "date": "2010-10-24T09:00:02.390+0000",
            "id": 25
        },
        {
            "author": "Michael McCandless",
            "body": "Patch.\n\nI think I found this -- it's a thread safety issue, that happens when a \"normal\" merge is kicking off at the same time that another thread calls optimize.\n\nIn this case it's possible that merge fails to mark itself as an optimizing merge, which means any merges that cascade from it will also fail to be optimized.\n\nI also modified MockDirWrapper to randomly call Thread.yield to see if we can tease out any more thread bugs.",
            "date": "2010-11-15T00:38:28.939+0000",
            "id": 26
        },
        {
            "author": "Jason Rutherglen",
            "body": "Are we going to fix this in trunk as well?",
            "date": "2010-11-15T16:09:53.095+0000",
            "id": 27
        },
        {
            "author": "Michael McCandless",
            "body": "Jason, I did commit to trunk (I edited issue summary to remove \"3.x backward\" since the issue happened everywhere.",
            "date": "2010-11-15T16:13:53.050+0000",
            "id": 28
        }
    ],
    "component": "core/index",
    "description": "Failure looks like this:\n\n{noformat}\n    [junit] Testsuite: org.apache.lucene.index.TestThreadedOptimize\n    [junit] Testcase: testThreadedOptimize(org.apache.lucene.index.TestThreadedOptimize):\tFAILED\n    [junit] null\n    [junit] junit.framework.AssertionFailedError: null\n    [junit] \tat org.apache.lucene.index.TestThreadedOptimize.runTest(TestThreadedOptimize.java:125)\n    [junit] \tat org.apache.lucene.index.TestThreadedOptimize.testThreadedOptimize(TestThreadedOptimize.java:149)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase.runBare(LuceneTestCase.java:253)\n{noformat}\n\nI just committed some verbosity so next time it strikes we'll have more details.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2618",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Intermittent failure in TestThreadedOptimize",
    "systemSpecification": true,
    "version": ""
}