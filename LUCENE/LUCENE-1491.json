{
    "comments": [
        {
            "author": "Todd Feak",
            "body": "The NGramTokenFilter is affected by the same bug.",
            "date": "2008-12-15T22:39:57.919+0000",
            "id": 0
        },
        {
            "author": "Todd Feak",
            "body": "Patch includes test to highlight broken EgdeNGramTokenFilter and NGramTokenFilter. Fixes for both.",
            "date": "2008-12-15T22:41:19.577+0000",
            "id": 1
        },
        {
            "author": "Hoss Man",
            "body": "patch looks good ... the one question i have is whether the fix meets user expectations: the patch as posted \"skips\" any input tokens that are shorter then the minimum ngram length ... is that what most people will expect, or will people expect shorter tokens to be passed through?\n\nie: should \"min\" be the minimum token size produced by the filters (a hard min), or should it be the minimum ngram size produced by the filter (a soft min)?\n\neither way this patch is an improvement, i'm just wondering what we want to define the semantics to be (or if we want to make an additional option for this)",
            "date": "2008-12-20T18:36:19.841+0000",
            "id": 2
        },
        {
            "author": "Otis Gospodnetic",
            "body": "I agree this is an improvement, but like Hoss I'm worried about silently skipping shorter-than-specified-min-ngram-size tokens.\n\nPerhaps we need boolean keepSmaller somewhere, so we can explicitly control the behaviour?\n",
            "date": "2009-06-02T15:27:44.153+0000",
            "id": 3
        },
        {
            "author": "Karl Wettin",
            "body": "bq. Perhaps we need boolean keepSmaller somewhere, so we can explicitly control the behaviour?\n\nI'm not sure. Is there a use case for this or is it an XY-problem?\n\n",
            "date": "2009-06-02T16:19:11.460+0000",
            "id": 4
        },
        {
            "author": "Otis Gospodnetic",
            "body": "I'm not 100% sure - I'm not using ngrams at the moment, so I have no place to test this out, but skipping a shorter than minimal ngrams seems like it would result in silent data loss.\n\nAh, here, example:\nWhat would happen to \"to be or not to be\" if min=4 and we relied on ngrams to perform phrase queries?\n\nAll of those terms would be dropped, so a search for \"to be or not to be\" would result in 0 hits.\n\nIf the above is correct, I think this sounds like a bad thing that one wouldn't expect...",
            "date": "2009-06-02T20:26:27.238+0000",
            "id": 5
        },
        {
            "author": "Karl Wettin",
            "body": "Although you have a valid point I'd like to argue this a bit. \n\nMy arguments are probably considered silly by some. Perhaps it's just me that use ngrams for something completly different than what everybody else does, but here we go: Adding the feature as suggested by this patch is, according to me, to fix symptoms from bad use of character ngrams.\n\nBOL, EOL, whitespace and punctuation are all valid parts of character ngrams than can increase precision/recall quite a bit. EdgeNGrams could sort of be considered such data too. So what I'm saying here is that I consider your example a bad use of charachter ngrams, that the whole sentance should have been grammed up. So in the case of 4-grams the output would end up as: \"to b\", \"o be\", \" be \", \"be o\", and so on. Perhaps even \"$to \", \"to b\", \"o be\", and so on.\n\nSupporting what I suggest will of course mean quite a bit of more work. A whole new filter that also does input text normalization such as removing double spaces and what not. That will probably not be implemented anytime soon. But adding the features in the patch to the filter actually means that this use is endorsed by the community and I'm not sure that's a good idea. I thus think it would be better with some sort of secondary filter that did the exact same thing as the patch.\n\nPerhaps I should leave this issue alone and do some more work with LUCENE-1306 ",
            "date": "2009-06-02T21:51:16.181+0000",
            "id": 6
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Karl - LUCENE-1306 - I agree, I think the existing edge and non-edge ngram stuff should be folded into LUCENE-1306 (or the other way around, if it's easier).\n\nBut won't question of what we do with the chunks shorter than min ngram remain?  Does adding that boolean hurt anything? (other than an if test for every ngram :) ).",
            "date": "2009-06-03T00:38:11.714+0000",
            "id": 7
        },
        {
            "author": "viobade",
            "body": "I think is better to keep the main goal of ngram: groups of characters between min and max.  If is need in any practical situation for minimum ngram equals with one or two characters, this can be done setting the minimum....otherwise the filter must  work in the way that is expected.. If I expect subword with minimum 3 length why do I get a token with two characters while it is not accomplish the condition?",
            "date": "2009-06-03T07:29:59.902+0000",
            "id": 8
        },
        {
            "author": "Otis Gospodnetic",
            "body": "I'm getting convinced to just drop ngrams < minNgram.\nIf nobody complains by the end of the week, I'll commit.\n",
            "date": "2009-06-03T20:29:08.072+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "Otis this one looks ready to commit?",
            "date": "2009-07-14T18:38:11.381+0000",
            "id": 10
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Thanks Todd & Co.\n\nSending        CHANGES.txt\nSending        analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java\nSending        analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java\nSending        analyzers/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest.java\nSending        analyzers/src/test/org/apache/lucene/analysis/ngram/NGramTokenFilterTest.java\nTransmitting file data .....\nCommitted revision 794034.\n",
            "date": "2009-07-14T19:46:15.861+0000",
            "id": 11
        }
    ],
    "component": "modules/analysis",
    "description": "If a token is encountered in the stream that is shorter in length than the min gram size, the filter will stop processing the token stream.\n\nWorking up a unit test now, but may be a few days before I can provide it. Wanted to get it in the system.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1491",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "EdgeNGramTokenFilter stops on tokens smaller then minimum gram size.",
    "systemSpecification": true,
    "version": "2.4, 2.4.1, 2.9, 3.0"
}