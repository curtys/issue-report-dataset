{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Patch w/ test case showing the problem.\n\nIf you set slop to 0 for the PhraseQuery, the test passes.  The MultiPhraseQuery passes with slop or no slop because it handles the same-position case itself (Union*Enum).\n\nThat got me thinking... maybe any time a *PhraseQuery has overlapping positions, we should rewrite to a MultiPhraseQuery and let it handle the same positions...?  Is there any downside to that?",
            "date": "2011-05-04T10:04:36.118+0000",
            "id": 0
        },
        {
            "author": "Doron Cohen",
            "body": "bq. specifically when the doc itself has tokens at the same position.\n\nI am not convinced yet that there is a bug here - I think the code does allow this? \n\nThere is another assumption in the code, that any two different PPs are in different TPs - which underlines the assumption that originally each PP differs in position, This seems a valid assumption, because QP will create MFQ if there are two terms in the (phrase) query with same position. \n\nbq. maybe any time a *PhraseQuery has overlapping positions, we should rewrite to a MultiPhraseQuery and let it handle the same positions...? Is there any downside to that?\n\nI think this is the correct behavior - in particular this will be the query that a QP will create. The only way to create a PQ (not MPQ) for PPs in same positions is to create it manually. But why would anyone do that? And they did, wouldn't such a rewrite be a surprise to them?\n\nA patch to follow with a revised version of this test - one that uses the QP. In this patch the QP indeed creates an MFQ, and I am yet unable to make it fail. Still trying.",
            "date": "2011-05-04T18:59:02.529+0000",
            "id": 1
        },
        {
            "author": "Doron Cohen",
            "body": "Attached modified version of the test - one that invokes the query parser to create an MFQ. The test passes.",
            "date": "2011-05-04T19:05:58.275+0000",
            "id": 2
        },
        {
            "author": "Doron Cohen",
            "body": "This is more complex than I originally thought.\n\n# QueryParser creates a MultiplePhraseQuery (MPQ) when one of the (phrase) query positions is a multi-term.\n# MPQ has an implicit OR behavior - it is used for e.g. wildcarding a phrase query.\n# PhraseQuery (PQ) sloppy scorer assumes each query position has a single term.\n# PQ with several terms in same position cannot be created by parsing it with a QP, only manual.\n  Manually created, it would have an AND semantics: only docs with ALL the terms in pos N should match.\n  In other words, assume doc D terms and positions are: \n  a:0 b:1 c:1 d:2\n  MPQ for (a,b):0 d:1 should match D, finding the phrase b:1 d:2 (OR semantics)\n  PQ for (a,b):0 d:1 should not match D, because it does not contain 'a' and 'b' in the same position (AND semantics).\n\n\nTherefore, rewriting PQ into MPQ is not a valid fix, because it would turn the AND logic assumed by creating the PQ this way, by an OR logic as assumed in MPQ. \n\n{code:title=TestPositionIncrement.testSetPosition has a test for this case exactly}\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n{code}\n\nAlthough QP by default will not create this PQ, I think we need to support it, for applications needing to be strict with the search results, with slop. \n\nSo fixing this would need to take place inside SloppyScorer, digging further...",
            "date": "2011-05-05T06:06:23.762+0000",
            "id": 3
        },
        {
            "author": "Doron Cohen",
            "body": "Attached patch fixes this bug by excluding fro the repeats check those PPs originated fro same offset in the query. \n\nThis allows more strict phrase queries: strict on terms in same position (AND logic) but still sloppy.\n\nAll tests pass, this is ready to go in (unless there are reservations).",
            "date": "2011-05-05T07:57:57.247+0000",
            "id": 4
        },
        {
            "author": "Shai Erera",
            "body": "Patch looks good to me.\n\nOne comment about the test - perhaps use the LTC methods that do random tests, like newDirectory(), newIndexWriterConfig() etc.? If you don't think it's appropriate for this test, that's ok with me.",
            "date": "2011-05-05T08:22:23.209+0000",
            "id": 5
        },
        {
            "author": "Doron Cohen",
            "body": "Thanks for reviewing Shai!\nI'll updated the patch with random newDirectory and newICFG - not the focus here, but may improve coverage anyhow,\nI added tests for the combined case - some AND some OR - that is, using MPQ, some add() with a single term (AND), some with an array longer than 1 (OR). Also refactored the tests a bit so that now there's a small test method for each test case.",
            "date": "2011-05-05T10:42:40.583+0000",
            "id": 6
        },
        {
            "author": "Doron Cohen",
            "body": "Patch with more test cases - AND/OR logic for MPQ is combined, and test code made simpler.",
            "date": "2011-05-05T10:53:56.630+0000",
            "id": 7
        },
        {
            "author": "Doron Cohen",
            "body": "fixed in trunk in r1124293.",
            "date": "2011-05-18T15:00:08.497+0000",
            "id": 8
        },
        {
            "author": "Doron Cohen",
            "body": "fix merged to 3x in r1124302.",
            "date": "2011-05-18T15:37:23.453+0000",
            "id": 9
        },
        {
            "author": "Doron Cohen",
            "body": "I wonder if this should be fixed also in 3.1 branch?\nProbably so only if we make a 3.1.1, but not needed if its gonna be a 3.2. \nWhat's the best practice then? Reopen until decision?\nOr rely on rescanning all 3.2 changes in case its gonna be 3.1.1?",
            "date": "2011-05-18T20:21:03.974+0000",
            "id": 10
        },
        {
            "author": "Doron Cohen",
            "body": "Looking at http://people.apache.org/~mikemccand/lucenebench/SloppyPhrase.html (Mike this is a great tool!) I see no particular slowdown at the last runs.\n\nA thought about these benchmarks, it would be helpful if the checked revision would be shown - perhaps as part of the hover text when hovering the mouse on a graph point...",
            "date": "2011-05-19T10:36:56.476+0000",
            "id": 11
        },
        {
            "author": "Michael McCandless",
            "body": "bq. A thought about these benchmarks, it would be helpful if the checked revision would be shown - perhaps as part of the hover text when hovering the mouse on a graph point..\n\nGood idea!  I'll try to do this...\n\nNote that if you go back to the root page, and click on a given day, it tells you the svn rev and also hg ref (of luceneutil), so that's a [cumbersome] way to get the svn rev.",
            "date": "2011-05-19T10:50:59.516+0000",
            "id": 12
        },
        {
            "author": "Doron Cohen",
            "body": "bq. Note that if you go back to the root page, and click on a given day, it tells you the svn rev and also hg ref (of luceneutil)\n\nGreat, thanks!\n\nSo, this commit to trunk in r1124293 falls between these two:\n\n- Tue 17/05/2011 Lucene/Solr trunk rev 1104671\n- Wed 18/05/2011 Lucene/Solr trunk rev 1124524\n\n... No measurable degradation, good!",
            "date": "2011-05-19T11:09:25.126+0000",
            "id": 13
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Looking at http://people.apache.org/~mikemccand/lucenebench/SloppyPhrase.html (Mike this is a great tool!) I see no particular slowdown at the last runs.\nI love it! good that all the work on LuceneUtil pays off!!!!!",
            "date": "2011-05-19T12:11:40.144+0000",
            "id": 14
        },
        {
            "author": "Robert Muir",
            "body": "Bulk closing for 3.2",
            "date": "2011-06-03T16:37:10.361+0000",
            "id": 15
        }
    ],
    "component": "core/search",
    "description": "In LUCENE-736 we made fixes to SloppyPhraseScorer, because it was\nmatching docs that it shouldn't; but I think those changes caused it\nto fail to match docs that it should, specifically when the doc itself\nhas tokens at the same position.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3068",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "The repeats mechanism in SloppyPhraseScorer is broken when doc has tokens at same position",
    "systemSpecification": true,
    "version": "3.0.3, 3.1, 4.0-ALPHA"
}