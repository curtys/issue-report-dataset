{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "Test cases to illustrate the issue.",
            "date": "2008-11-24T11:02:37.773+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "I would tend to agree -- Directory should try to be a \"simple conduit\" to the filesystem.  It should not filter things in some methods and not others.\n\nIt should be up to the caller to pick & choose which files are of interest.\n\nEG in LUCENE-638, RamDir should pick & choose to copy over only those files referenced by all live commit points.\n\nLUCENE-385 was another issue where filtering was added to FSDir so that when you opened an index with create=true, Lucene would only remove files that look like index files.  This one should already be fixed (I haven't yet tested though), because we have now deprecated the create=true argument to FSDir in favor of IndexWriter's create=true.  IndexWriter is smarter and careful (uses IndexFileDeleter; retries delete; keeps old commit points around if the deletion policy says so; etc.) about which files should be deleted.\n\nEspecially as we move towards flexible indexing (LUCENE-1458), what is and is not an index file is up to the particular codec(s) in use and is no longer a simple list of file extensions.  I had to change quite a few \"interesting\" places when I created the first codec that used new file extensions.\n\nSo I agree neither list(), nor any other methods in FSDir, should do any filtering.  But because of back compatibility: I don't think we can suddenly change list() to return all files.  I think we'd have to deprecate list and then add eg \"fullList\" or \"listAll\" instead.",
            "date": "2008-11-24T13:14:05.149+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "\nAttached patch.  I think it's ready to commit.  I'll wait a day or\ntwo.\n\nI deprecated Directory.list() in favor of the new\nDirectory.listAll().  listAll does no filtering, and, never returns\nnull (instead throws more meaningful IOExceptions).\n\nI added a new NoSuchDirectoryException in o.a.l.store, and\nFSDirectory.listAll throws this if the directory does not exist, or if\nit exists but isn't a directory, so you now get a clearer exception on\nopening an IndexReader an an invalid directory.\n\nI fixed all places in Lucene core & contrib that called list() to call\nlistAll() instead.  I also added test cases to make sure LUCENE-385\nand LUCENE-638 remain fixed.\n",
            "date": "2008-12-02T12:02:38.657+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Committed revision 723789.\n\nThanks Marcel!",
            "date": "2008-12-05T17:03:23.522+0000",
            "id": 3
        }
    ],
    "component": "core/store",
    "description": "LUCENE-638 added a check to the FSDirectory.list() method to only return files that are Lucene related. I think this change made the FSDirectory implementation inconsistent with all other methods in Directory. E.g. you can create a file with an arbitrary name using FSDirectory, fileExists() will report that it is there, deleteFile() will remove it, but the array returned by list() will not contain the file.\n\nThe actual issue that was reported in LUCENE-638 was about sub directories. Those should clearly not be listed, but IMO it is not the responsibility of a Directory implementation to decide what kind of files can be created or listed. The Directory class is an abstraction of a directory and it should't to more than that.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1468",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "FSDirectory.list() is inconsistent",
    "systemSpecification": true,
    "version": "2.1, 2.2, 2.3, 2.3.1, 2.3.2, 2.4"
}