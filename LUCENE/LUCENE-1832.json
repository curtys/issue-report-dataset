{
    "comments": [
        {
            "author": "Michael Busch",
            "body": "enumerator can never be null there. I'll commit the simple fix.",
            "date": "2009-08-21T16:13:58.824+0000",
            "id": 0
        },
        {
            "author": "Michael Busch",
            "body": "Committed revision 806637.",
            "date": "2009-08-21T16:48:22.751+0000",
            "id": 1
        }
    ],
    "component": "",
    "description": "Some code flagged by a bytecode static analyzer - I guess a nitpick, but we should just drop the null check in the if? If its null it will fall to the below code and then throw a NullPointer exception anyway. Keeping the nullpointer check implies we expect its possible - but then we don't handle it correctly.\n\n{code}\n  /** Returns the nth term in the set. */\n  final Term get(int position) throws IOException {\n    if (size == 0) return null;\n\n    SegmentTermEnum enumerator = getThreadResources().termEnum;\n    if (enumerator != null && enumerator.term() != null &&\n        position >= enumerator.position &&\n\tposition < (enumerator.position + totalIndexInterval))\n      return scanEnum(enumerator, position);      // can avoid seek\n\n    seekEnum(enumerator, position/totalIndexInterval); // must seek\n    return scanEnum(enumerator, position);\n  }\n\n{code}",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-1832",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Trivial",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "minor/nitpick TermInfoReader bug ?",
    "systemSpecification": true,
    "version": ""
}