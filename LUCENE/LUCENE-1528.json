{
    "comments": [
        {
            "author": "Luis Alves",
            "body": "LUCENE-1528 - Add support for Ideographic Space to the queryparser",
            "date": "2009-01-26T08:02:11.630+0000",
            "id": 0
        },
        {
            "author": "Michael Busch",
            "body": "Looks good, Luis!\n\nI was just wondering if you can do something like the following to avoid defining the whitespace chars in two places:\n{noformat}\n| <#_WHITESPACE: ( \" \" | \"\\t\" | \"\\n\" | \"\\r\") >\n| <#_TERM_START_CHAR: ( ~( <_WHITESPACE> | [ \"+\", \"-\", \"!\", \"(\", \")\", \":\", \"^\",\n                           \"[\", \"]\", \"\\\"\", \"{\", \"}\", \"~\", \"*\", \"?\", \"\\\\\" ])\n                       | <_ESCAPED_CHAR> ) >\n{noformat}\n\nThis does not compile... is there another way to achieve this in javacc?\nIf not, it's not a big deal and I can commit this patch as is.",
            "date": "2009-01-27T01:14:21.407+0000",
            "id": 1
        },
        {
            "author": "Luis Alves",
            "body": "Hi Michael,\n\nI checked the book \"Generating parser with JavaCC\" and I checked the javacc website (https://javacc.dev.java.net/doc/javaccgrm.html)\nfor grammar, here is the syntax for a character list:\n\ncharacter_list \t::= \t[ \"~\" ] \"[\" [ character_descriptor ( \",\" character_descriptor )* ] \"]\"\ncharacter_descriptor \t::= \tjava_string_literal [ \"-\" java_string_literal ]\n\nalso the '|' character in javacc syntax is used like an XOR, and there is no OR or AND operator to be used in the javacc syntax that I'm aware.\nSo the expression <_WHITESPACE> | [ \"+\", ... ]  would have to look like ~(<_WHITESPACE> & [ \"+\", ... ]) but this is not possible in javacc grammar.\n\nSo I think the best option for now, is to keep the current syntax.\n\nIf you like, I can change \n\n<#_WHITESPACE: ( \" \" | \"\\t\" | \"\\n\" | \"\\r\") >\n\nto a character_list to make it more consistent, but that would not help to remove the duplicated list of characters.\n\n<#_WHITESPACE: [ \" \", \"\\t\", \"\\n\", \"\\r\" ] >\n\n",
            "date": "2009-01-27T22:32:54.711+0000",
            "id": 2
        },
        {
            "author": "Michael Busch",
            "body": "Committed revision 738592.\n\nThanks, Luis.",
            "date": "2009-01-28T19:25:45.641+0000",
            "id": 3
        }
    ],
    "component": "core/queryparser",
    "description": "The Ideographic Space is a space character that is as wide as a normal CJK character cell.\nIt is also known as wide-space or fullwith space.This type of space is used in CJK languages.\n\nThis patch adds support for the wide space, making the queryparser component more friendly\nto queries that contain CJK text.\n\nReference:\n'http://en.wikipedia.org/wiki/Space_(punctuation)' - see Table of spaces, char U+3000.\n\nI also added a new testcase that fails before the patch.\nAfter the patch is applied all junits pass.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1528",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add support for Ideographic Space to the queryparser - also know as fullwith space and wide-space",
    "systemSpecification": true,
    "version": "2.4"
}