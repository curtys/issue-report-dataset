{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "TestCustomScoreQuery appears to be the longest test - its about a minute or worse.\n\nThe test can be set to log output, where it may display explain info - on many, many loops this explain info is calculated, only to be *not* logged because logging is off by default.\n\n1. Excessive explain calculations turned off if logging is off.\n\nIn a logging call, QueryUtils.check(query, searcher) is called (overall ends up in a tight loop) - but it keeps getting called with the same query objects and the same searcher.\n\n2. QueryUtils.check(query, searcher) moved out of loop and only tested once for each query.\n\n\nTest from approx 60 seconds to approx 5 seconds.",
            "date": "2009-08-23T05:42:52.072+0000",
            "id": 0
        },
        {
            "author": "Mark Miller",
            "body": "Should also be able to speed up TestBooleanMinShouldMatch somehow. Its nearly a minute as well (30s in attached list, but nearly a min on other hardware I have).\n\nIn a loop of 1000 random queries, this is called each time:\n\n        QueryUtils.check(q1,s);\n        QueryUtils.check(q2,s);\n\nTake it out and the test is like 2-5 seconds. Must be some way to optimize this down without losing coverage.",
            "date": "2009-08-23T14:22:34.885+0000",
            "id": 1
        },
        {
            "author": "Erick Erickson",
            "body": "moved/skipped calls to CheckUtils.check\n\n\nIn TestCustomScoreQuery, there was no purpose served that I could see by testing the same query over and over and over.\n\nIn TestBooleanMinShouldMatch, arbitrarily stopped calling check after 100 queries on the theory that we'd reached diminishing returns.\n\nDrops test time by 3-4 minutes total...\n\n\n\n\n\n\n",
            "date": "2009-11-04T23:36:50.703+0000",
            "id": 2
        },
        {
            "author": "Erick Erickson",
            "body": "This supersedes the first patch I submitted. Apply after LUCENE-2037.\n\nRender judgment on whether TestBooleanMinShouldMatch it's really OK to cut off checking the queries after 100.\n ",
            "date": "2009-11-15T01:51:44.084+0000",
            "id": 3
        },
        {
            "author": "Erick Erickson",
            "body": "Saves 3-4 minutes overall. Arbitrarily limited the TestBooleanMinShouldMatch to stop checking queries after 100.\n\nI don't see much point in checking the *same* queries again and again in TestCustomScoreQuery, so I just moved the check outside the loop.\n\nApply this patch *after* LUCENE-2037 since TestCustomScoreQuery happens to be common to both patches.\n\nSorry about the noise with the license grant...",
            "date": "2009-11-15T01:55:12.626+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Is this ready to go in?  I'd really love to see unit tests run faster :)",
            "date": "2009-11-25T16:48:24.655+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "Will we also speed up back-compat tests?",
            "date": "2009-11-26T01:42:51.093+0000",
            "id": 6
        },
        {
            "author": "Erick Erickson",
            "body": "Speeds up TestBooleanMinShouldMatch and TestCustomScoreQuery without using JUnit4",
            "date": "2009-11-26T15:08:20.396+0000",
            "id": 7
        },
        {
            "author": "Erick Erickson",
            "body": "OK, fire when ready Gridley. Pretty soon I'll understand when to comment and how to keep from multiple comments.... \n\nThis patch does NOT use the Java5 features like generics etc. I've done that work and it'll be included in the TestCustomScoreQuery changes for JUnit4.....\n\n",
            "date": "2009-11-26T15:11:28.085+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "OK I started from Erick's last patch, and trimmed back some more tests -- patch attached.\n\nAlso I temporarily instrumented the tests to print msec per case -- with the attached patch, here are the test times that are > 1 sec:\n\n{code}\nTest times:\n  17.489 sec TestIndexWriter [test-tag]\n  17.315 sec TestIndexWriter\n  9.952 sec TestQualityRun\n  9.163 sec TestIndexWriterReader [test-tag]\n  9.008 sec TestIndexWriterReader\n  8.508 sec TestTimeLimitingCollector\n  8.410 sec TestTimeLimitingCollector [test-tag]\n  6.982 sec TestIndexReader\n  6.930 sec TestIndexReader [test-tag]\n  6.756 sec TestAtomicUpdate\n  6.740 sec TestAtomicUpdate [test-tag]\n  6.596 sec TestAtomicUpdate:testAtomicUpdates [test-tag]\n  6.303 sec TestTransactions\n  6.290 sec TestTransactions [test-tag]\n  6.287 sec TestIndexWriterExceptions\n  6.277 sec TestIndexWriterExceptions [test-tag]\n  6.140 sec TestTransactions:testTransactions [test-tag]\n  5.759 sec TestNRTReaderWithThreads\n  5.694 sec TestNRTReaderWithThreads [test-tag]\n  5.630 sec TestBooleanMinShouldMatch\n  5.622 sec TestBooleanMinShouldMatch [test-tag]\n  5.599 sec TestIndexReaderReopen [test-tag]\n  5.552 sec TestNRTReaderWithThreads:testIndexing [test-tag]\n  5.399 sec TestIndexReaderReopen\n  5.254 sec TestNumericRangeQuery64\n  5.099 sec TestSnapshotDeletionPolicy\n  5.081 sec TestIndexReaderClone\n  5.056 sec TestIndexReaderClone [test-tag]\n  4.962 sec TestSnapshotDeletionPolicy [test-tag]\n  4.852 sec TestBasics\n  4.836 sec TestBasics [test-tag]\n  4.813 sec TestNumericRangeQuery64 [test-tag]\n  4.525 sec TestPerfTasksLogic\n  4.494 sec TestStressIndexing\n  4.468 sec TestBoolean2\n  4.465 sec TestStressIndexing [test-tag]\n  4.358 sec TestSnapshotDeletionPolicy:testSnapshotDeletionPolicy [test-tag]\n  4.323 sec TestStressIndexing:testStressIndexAndSearching [test-tag]\n  4.297 sec TestBoolean2 [test-tag]\n  4.233 sec TestCustomScoreQuery\n  4.172 sec TestBooleanMinShouldMatch:testRandomQueries [test-tag]\n  4.115 sec TestCustomScoreQuery [test-tag]\n  3.981 sec TestNumericRangeQuery32\n  3.847 sec TestNumericRangeQuery32 [test-tag]\n  3.810 sec TestTimeLimitingCollector:testModifyResolution [test-tag]\n  3.708 sec TestDeletionPolicy\n  3.701 sec TestDeletionPolicy [test-tag]\n  3.613 sec TestIndexWriterReader:testDuringAddIndexes [test-tag]\n  3.605 sec TestSimpleExplanations [test-tag]\n  3.556 sec TestIndexWriter:testAddIndexOnDiskFull [test-tag]\n  3.491 sec TestLockFactory\n  3.478 sec TestLockFactory [test-tag]\n  3.381 sec TestSimpleExplanations\n  3.297 sec TestIndexWriterReader:testDuringAddDelete [test-tag]\n  3.181 sec TestComplexExplanations [test-tag]\n  3.125 sec TestIndexWriterExceptions:testRandomExceptions [test-tag]\n  3.028 sec TestIndexReader:testLockObtainFailed [test-tag]\n  3.020 sec TestDeletionPolicy:testExpirationTimeDeletionPolicy [test-tag]\n  3.008 sec TestIndexWriterExceptions:testRandomExceptionsThreads [test-tag]\n  2.938 sec TestIndexableBinaryStringTools [test-tag]\n  2.922 sec TestComplexExplanations\n  2.815 sec TestIndexableBinaryStringTools\n  2.686 sec TestQueryParserWrapper\n  2.626 sec TestQPHelper\n  2.547 sec TestMultiTermConstantScore [test-tag]\n  2.543 sec TestMultiTermConstantScore\n  2.527 sec TestMultiValuedNumericRangeQuery [test-tag]\n  2.510 sec TestIndicesEquals\n  2.489 sec TestHugeRamFile [test-tag]\n  2.444 sec TestHugeRamFile\n  2.435 sec MemoryIndexTest\n  2.383 sec TestTermRangeFilter [test-tag]\n  2.379 sec TestMultiValuedNumericRangeQuery:testMultiValuedNRQ [test-tag]\n  2.372 sec TestBoolean2:testRandomQueries [test-tag]\n  2.355 sec TestSpanExplanations [test-tag]\n  2.332 sec TestHugeRamFile:testHugeFile [test-tag]\n  2.328 sec TestBackwardsCompatibility [test-tag]\n  2.291 sec TestBackwardsCompatibility\n  2.277 sec JEStoreTest\n  2.245 sec TestSpanExplanations\n  2.239 sec TestMultiValuedNumericRangeQuery\n  2.207 sec TestSort [test-tag]\n  2.125 sec TestThreadedOptimize [test-tag]\n  2.122 sec TestIndexReaderReopen:testThreadSafety [test-tag]\n  2.107 sec TestSort\n  2.101 sec TestQueryParser\n  2.082 sec TestQueryParser [test-tag]\n  2.057 sec TestTermRangeFilter\n  2.055 sec TestThreadedOptimize\n  2.024 sec TestIndexReader:testLastModified [test-tag]\n  1.981 sec TestThreadedOptimize:testThreadedOptimize [test-tag]\n  1.937 sec TestStressIndexing2\n  1.932 sec TestStressIndexing2 [test-tag]\n  1.831 sec TestLazyBug [test-tag]\n  1.817 sec TestLazyBug\n  1.811 sec TestPhraseQuery\n  1.801 sec TestPhraseQuery [test-tag]\n  1.762 sec TestBufferedIndexInput\n  1.754 sec TestBufferedIndexInput [test-tag]\n  1.744 sec TestConcurrentMergeScheduler\n  1.729 sec TestCrash\n  1.716 sec TestCrash [test-tag]\n  1.702 sec TestFieldsReader [test-tag]\n  1.700 sec TestIndexReaderCloneNorms\n  1.698 sec TestFieldsReader\n  1.684 sec TestIndexReaderCloneNorms [test-tag]\n  1.678 sec TestStringIntern\n  1.644 sec TestIndexableBinaryStringTools:testEncodedSortability [test-tag]\n  1.615 sec TestConcurrentMergeScheduler [test-tag]\n  1.606 sec TestStringIntern [test-tag]\n  1.567 sec TestCustomScoreQuery:testCustomScoreByte [test-tag]\n  1.560 sec TestTermAttributeImpl\n  1.525 sec TestFieldMaskingSpanQuery\n  1.496 sec TestFieldMaskingSpanQuery [test-tag]\n  1.486 sec TestPayloadTermQuery\n  1.484 sec TestToken [test-tag]\n  1.484 sec TestToken\n  1.465 sec TestPayloadTermQuery [test-tag]\n  1.460 sec TestStringIntern:testStringIntern [test-tag]\n  1.456 sec TestTermAttributeImpl [test-tag]\n  1.424 sec TestBufferedIndexInput:testReadBytes [test-tag]\n  1.414 sec TestTimeLimitingCollector:testTimeoutGreedy [test-tag]\n  1.366 sec TestIndexWriterReader:testAddIndexesAndDoDeletesThreads [test-tag]\n  1.364 sec TestSpans [test-tag]\n  1.361 sec TestPayloadSpans [test-tag]\n  1.328 sec TestSort:testStringSort [test-tag]\n  1.327 sec TestSpans\n  1.323 sec TestDisjunctionMaxQuery [test-tag]\n  1.300 sec TestNorms [test-tag]\n  1.297 sec TestToken:testGrow [test-tag]\n  1.288 sec TestTimeLimitingCollector:testTimeoutMultiThreaded [test-tag]\n  1.281 sec TestTermAttributeImpl:testGrow [test-tag]\n  1.280 sec TestNorms\n  1.269 sec TestTimeLimitingCollector:testTimeoutNotGreedy [test-tag]\n  1.269 sec TestDisjunctionMaxQuery\n  1.265 sec TestPayloadSpans\n  1.244 sec TestPrefixInBooleanQuery [test-tag]\n  1.177 sec TestLockFactory:testStressLocks [test-tag]\n  1.154 sec TestNorms:testNorms [test-tag]\n  1.150 sec TestFieldsReader:testLazyPerformance [test-tag]\n  1.144 sec TestFieldCacheRangeFilter\n  1.141 sec TestPrefixInBooleanQuery\n  1.124 sec TestIndexableBinaryStringTools:testRandomBinaryRoundTrip [test-tag]\n  1.111 sec TestFieldCacheRangeFilter [test-tag]\n  1.105 sec TestIndexWriterMergePolicy [test-tag]\n  1.098 sec TestIndexReaderClone:testParallelReader [test-tag]\n  1.089 sec TestIndexWriter:testNoWaitClose [test-tag]\n  1.070 sec TestIndexWriterMergePolicy\n  1.064 sec TestIndexReaderClone:testCloneWriteToClone [test-tag]\n  1.060 sec TestCustomScoreQuery:testCustomScoreFloat [test-tag]\n  1.057 sec TestIndexWriter:testThreadInterruptDeadlock [test-tag]\n  1.049 sec TestIndexReaderClone:testMixedReaders [test-tag]\n  1.047 sec TestThreadSafe\n  1.039 sec TestIndexReaderCloneNorms:testNormsRefCounting [test-tag]\n  1.023 sec TestThreadSafe [test-tag]\n  1.012 sec TestIndexReader:testLock [test-tag]\n  1.012 sec TestFieldCacheSanityChecker [test-tag]\n  1.011 sec TestIndexReaderClone:testSegmentReaderDelDocsReferenceCounting [test-tag]\n  1.010 sec TestLockFactory:testDefaultRAMDirectory [test-tag]\n  1.009 sec TestLockFactory:testStressLocksNativeFSLockFactory [test-tag]\n  1.005 sec TestFieldCacheSanityChecker\n  1.003 sec TestStressIndexing2:testMultiConfig [test-tag]\n{code}",
            "date": "2009-11-27T01:03:14.475+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "New patch, trims a few more tests.  I'm done for now... if nobody objects I'll commit in a day or two.",
            "date": "2009-11-27T11:08:56.446+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Erick & Mark!  Next step is to find some generic way to parallelize the tests...",
            "date": "2009-11-29T11:31:39.735+0000",
            "id": 11
        },
        {
            "author": "Michael McCandless",
            "body": "Ugh -- I forgot to also commit the speedups on the back compat branch.",
            "date": "2009-12-07T17:23:36.781+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "Mark, if I were to also commit this to flex's back compat branch, will that cause conflicts when you next merge?  How good is your svn merge process at not freaking out when it sees that some changes had already been merged in...?\n\n(I'm eager to also speed up running \"ant test-tag\" on flex...).",
            "date": "2009-12-07T17:32:08.100+0000",
            "id": 13
        },
        {
            "author": "Mark Miller",
            "body": "It should work fine.",
            "date": "2009-12-07T17:35:47.829+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "OK fixed on back-compat tests, for trunk & flex, too.",
            "date": "2009-12-07T18:09:06.581+0000",
            "id": 15
        },
        {
            "author": "Robert Muir",
            "body": "reopening as i have some ideas to speed up some tests.",
            "date": "2010-02-21T09:56:44.744+0000",
            "id": 16
        },
        {
            "author": "Robert Muir",
            "body": "i sorted all tests on reverse time, and looked at a few of the slowest tests, especially ones > 10 seconds.\n\n* TestQualityRun is > 10 seconds, fixed to be < 1 second in LUCENE-2268 (will commit later)\n* TestNorms is > 10 seconds, yet if it uses RAMDirectory instead of FSDirectory, its < 1 second.\n\nattached is a patch, is there any reason TestNorms needs FSDirectory for good testing?!",
            "date": "2010-02-21T09:58:49.304+0000",
            "id": 17
        },
        {
            "author": "Michael McCandless",
            "body": "TestNorms fix looks great Robert!",
            "date": "2010-02-21T10:30:08.123+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "This is fixed right?",
            "date": "2010-03-31T17:27:00.568+0000",
            "id": 19
        }
    ],
    "component": "",
    "description": "As Lucene grows, so does the number of JUnit tests. This is obviously a good thing, but it comes with longer and longer test times. Now that we also run back compat tests in a standard test run, this problem is essentially doubled.\n\nThere are some ways this may get better, including running parallel tests. You will need the hardware to fully take advantage, but it should be a nice gain. There is already an issue for this, and Junit 4.6, 4.7 have the beginnings of something we might be able to count on soon. 4.6 was buggy, and 4.7 still doesn't come with nice ant integration. Parallel tests will come though.\n\nBeyond parallel testing, I think we also need to concentrate on keeping our tests lean. We don't want to sacrifice coverage or quality, but I'm sure there is plenty of fat to skim.\n\nI've started making a list of some of the longer tests - I think with some work we can make our tests much faster - and then with parallelization, I think we could see some really great gains.",
    "hasPatch": true,
    "hasScreenshot": true,
    "id": "LUCENE-1844",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Speed up junit tests",
    "systemSpecification": true,
    "version": ""
}