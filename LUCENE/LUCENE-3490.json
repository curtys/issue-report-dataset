{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "Another thing, I would like to remove CodecProvider completely. \n\nI think Uwe has a good idea in LUCENE-2915.\n\nThe idea would be that we use this for index reading, when we read the \ncodec name from the segments file, we use the ServiceLoader mechanism\nto map that back to a Codec. Parameters should be no problem, when *reading*\nall codecs should be able to use a no-arg ctor and any necessary parameters\nshould really be written into the index (otherwise the index does not document\nhow it should be read!)\n\nFor writing, I think IndexWriter would just optionally take Codec, what is to\nbe used for writing new segments.",
            "date": "2011-10-30T15:52:59.714+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "A good example how this could work is Unicode Policeman's java.nio.charset.Charset and java.nio.charset.spi.CharsetProvider. We can copy lots of stuff from there. The lookup of a codec by string-name is exactly like looking up a charset by name. Also for Luke we can provide the iterator of all codecs available, that appends all registered SPIs codecs. And so on.\n\nOnce Robert have cleaned up the branch I will happily help here. The code is already in my head, I just need a working base to implement it.\n\nNOTE: As we are on Java 1.6 for trunk, we can use the now public java.util.ServiceLoader discovery and don't need to use sun.misc or java.awt.image.spi classes.",
            "date": "2011-10-30T16:38:24.081+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "Thanks Uwe, I think once we get tests passing in the branch we should look at this. Maybe we merge it, and just recreate the branch to fix it, or\nmaybe we fix it before merging... doesn't matter to me.\n\nI think this would simplify a lot of stuff in lucene too:\n* tests-framework currently contains additional codecs that are used only in testing, this would work much nicer \n  because when running tests the test codecs would get loaded.\n* luke would be able to read your index, as long as you had the right stuff in classpath. e.g. if i am debugging\n  a test fail and I want to inspect the index with luke, it should all just work as the tests codecs would be available.\n* we could remove codecprovider arguments to all these reading apis (e.g. IndexReader). This is dumb right now, \n  its almost like fixing default charset problems trying to track down how many places are using CodecProvider.getDefault(),\n  when you have some custom codecs and you only want the String->Codec mappings to be visible so that your index can be read!",
            "date": "2011-10-30T16:46:53.490+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "We should make the API like for Charsets, just replace Charset by Codec :-)\n\nThe Codec class gets a static method \"Codec.forName(String name)\", that is invoked by SegmentReader and returns the Codec instance with that name. Internally it uses java.util.ServiceLoader<org.apache.lucene.index.codec.spi.CodecProvider> to lookup codecs. Every JAR file could implement one or more org.apache.lucene.index.codecs.spi.CodecProvider that supply a lookup method and iterator (like spi.CharsetProvider). CodecProvider is just an internal class (expert) that needs to be implemented by JAR file manufacturers. For Lucene there would be one impl named CoreCodecProvider, the resource file would be located at src/resources/META-INF/services/org.apache.lucene.index.codecs.spi.CodecProvider containing only the binary class name of CoreCodecProvider.\n\nContrib/misc would provide one of those files at same location, but listing ContribMiscCodecProvider as impl. We can do the same for PostingsFormats and other things in the index that needs to be looked up by name. This could be done all by CodecProvider, it could also provide lookup methods for postings,.... (this minimizes implementation cost).\n\nIf we want to keep Preflex codec read-only in core, but RW in test-framework, the trick is simple: Just list test-framework classes/JAR before the core classes/JAR in classpath -> the test-framework CodecProvider would be seen first by ServiceLoader and take care of name \"preflex\", core's CodecProvider would not even be asked (as it comes later in classpath).",
            "date": "2011-10-30T18:29:52.203+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "SPI version of CodecProvider. I cannot commit this to the branch as SVN is not working... trying...",
            "date": "2011-11-01T00:28:52.156+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed lucene2621-branch revision 1195725.\n\nRobert: It's your turn now for test-framework, you must maybe move test-framework classpath before the core classpath to override the default 3x codec to be rw",
            "date": "2011-11-01T00:47:16.197+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "Just some comments:\nThe current impl is identical to how nio.Charset and nio.spi.CharsetProvider works in JDK's NIO classes. This differs from TIKA, where no \"*Provider\" class is used and all Parsers are listed in META-INF.\n\nFor nio.Charsets we generally have lots of different charset names and many of them can be implemented by same classes with different parameters (e.g. there is a single class for all ISO8859 charsets that just gets the table name as ctor param).\n\nIf we decide for Codecs, that the part that can read an index is always implemented by only one class (PulsingPostingsFormat is currently the only problematic one) with a default ctor, we can remove the whole CodecProvider interface and its implementations and instead use ServiceLoader<Codec> and ServiceLoader<PostigsFormat> and list all codec classes in META-INF separately (and not only the provider class). In that case the CodecLoader static helper class would initialize the map name->Codec on init and will do lookup and list of all codec names using that map. This would simplyfy the implementation, but would remove the possibility to e.g. encode parameters into codec names (e.g., \"pulsingLucene40\" -> new PulsingPostingsFormat(new Lucene40PostingsFormat()) versus \"pulsingPFOR\" -> new PulsingPostingsFormat(new PFORDeltaPostingsFormat()).\n\nAny suggestions? If we want to simplify and remove CodecProvider, I can recode this with minimal effort. In that case, the Chicken-And-Egg problem in Lucene40Codec using PostingsFormat.forName() would also be solved [its the same problem like the Java7-ICU-bug] :-)",
            "date": "2011-11-01T01:59:43.660+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nIf we decide for Codecs, that the part that can read an index is always implemented by only one class (PulsingPostingsFormat is currently the only problematic one) with a default ctor,\n{quote}\n\n+1\n\nIn my opinion (i added nocommit already), its fine for Pulsing(PostingsFormat wrapped) to be abstract. But we should have Pulsing40 or something that is a concrete implementation.\n\nAll codecs/postings formats should be able to be instantiated with a no-arg ctor for reading. If they took parameters for writing, they should also store these in the index so that the index documents what its format is... this is really important. Currently we do this with all parameters, we just need to fix pulsing. If someone wants to make PulsingHuperCodec we allow them to do this, they just make a concrete one and they are done. I think we need only provide Pulsing40 out of box and just leave the abstract wrapper API available for anyone to use themselves.\n\nThanks for doing all this work Uwe... its a really good step forward... if you feel like doing the simplification I am all for it :)\n",
            "date": "2011-11-01T02:23:54.483+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nRobert: It's your turn now for test-framework, you must maybe move test-framework classpath before the core classpath to override the default 3x codec to be rw\n{quote}\n\nThis works! I added TestImpersonation, and it passes.\n\nremains to factor out all these little embedded codecs from tests and move them to test-framework, register them, etc.",
            "date": "2011-11-01T04:03:20.912+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. remains to factor out all these little embedded codecs from tests and move them to test-framework, register them, etc.\n\nYou can also leave them inside the tests and add a meta-inf there.\n\nbq. Thanks for doing all this work Uwe... its a really good step forward... if you feel like doing the simplification I am all for it \n\nI think I will do it and require all codecs to have no-arg Ctor. The whole spi.* package/folder can then go away. This reduces the amount of code to 20% and makes it easier for users implementing own codecs. They just have to list the class names in META-INF. We will have 2 meta-inf files: META-INF/services/o.a.l.index.codecs.Codec and META-INF/services/o.a.l.index.codecs.PostingsFormat that list all classes - done. No more magic needed.\n\nI will change the branch to use this and add a Lucene40Pulsing codec (named \"Lucene40Pulsing\") based on abstract PulsingCodec.",
            "date": "2011-11-01T07:44:13.452+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "I removed CodecProvider again in revision: 1195963\n\nThe new code uses a simple loader mechanism that can load any no-arg ctor based Codec or PostingsFormat using a new interface NamedSPI that simply defines the getName() method.",
            "date": "2011-11-01T12:48:12.671+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "All the nocommits have been cleared up, the branch is synced up with trunk, and I think is ready for merging back.\n\nThanks for all the help here Mike and Uwe!\n\nIn my opinion we should merge this refactoring back, and then continue on with issues like LUCENE-2621 (making stored fields more extensible), etc.",
            "date": "2011-11-03T17:46:29.749+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "tweak description to reality",
            "date": "2011-11-03T17:52:06.002+0000",
            "id": 12
        },
        {
            "author": "Andrzej Bialecki ",
            "body": "Awesome work, guys! +1 to merging it to trunk.",
            "date": "2011-11-03T18:13:37.316+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "+1 to merge back, maybe as always create a diff for review.\n\nI was only doing the SPI stuff so most work was done by Robert and Mike. I am mostly happy about the fact that you can plugins any codec to the classpath and any index can be read after that. This is how Java should work.",
            "date": "2011-11-03T18:34:05.795+0000",
            "id": 14
        },
        {
            "author": "Robert Muir",
            "body": "I'll create a diff. it will look ugly though, because of some svn moves we did.",
            "date": "2011-11-03T18:36:33.312+0000",
            "id": 15
        },
        {
            "author": "Uwe Schindler",
            "body": "I have Svn 1.7.1, there its much better. Should I create one after merging?",
            "date": "2011-11-03T18:39:36.002+0000",
            "id": 16
        },
        {
            "author": "Robert Muir",
            "body": "patch from dev-tools/scripts/diff-sources.py",
            "date": "2011-11-03T18:40:34.761+0000",
            "id": 17
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nI have Svn 1.7.1, there its much better. Should I create one after merging?\n{quote}\n\nIf it can make a readable patch that would be great? the problem is moving src/test-framework/* to src/test-framework/java, and renaming preflex to lucene3x, etc, etc.",
            "date": "2011-11-03T18:41:34.201+0000",
            "id": 18
        },
        {
            "author": "Uwe Schindler",
            "body": "I'll merge and try, give me some time...",
            "date": "2011-11-03T18:52:05.680+0000",
            "id": 19
        },
        {
            "author": "Uwe Schindler",
            "body": "Does not look better. It puts all moves into the patch, but still thousands of files ----- and files ++++.\n\nUseless for review.",
            "date": "2011-11-03T19:18:04.761+0000",
            "id": 20
        },
        {
            "author": "selckin",
            "body": "seems mostly readable to me\n\n(git diff -D -B --minimal -C -M20 origin/lucene2621..trunk > lucene2621-trunk.patch)\n\n",
            "date": "2011-11-04T07:12:14.147+0000",
            "id": 21
        },
        {
            "author": "Robert Muir",
            "body": "thanks selckin, the problem is that patch is a little misleading in some ways:\ne.g.\n{noformat}\ndiff --git a/lucene/src/java/org/apache/lucene/index/codecs/lucene3x/Lucene3xCodec.java b/solr/core/src/java/org/apache/solr/core/SchemaCodecProvider.java\n{noformat}\n\nThese two files are totally unrelated! which one of those options to git (die git, die) is short for --pull-shit-out-of-my-ass?! :)\n",
            "date": "2011-11-04T07:17:12.476+0000",
            "id": 22
        },
        {
            "author": "selckin",
            "body": "yeah i turned on really aggressive rename detection, only 20% of the file needs to be the same, can tone it down a bit  :)",
            "date": "2011-11-04T07:20:37.011+0000",
            "id": 23
        },
        {
            "author": "Robert Muir",
            "body": "ahh thanks... but this patch is 'reversed' (can it be changed to trunk->2621) ?",
            "date": "2011-11-04T07:37:01.799+0000",
            "id": 24
        },
        {
            "author": "selckin",
            "body": "Strange, i did check a hunk at one point with the svn diff to make sure it was in the right order (i always mess it up), ",
            "date": "2011-11-04T07:44:09.468+0000",
            "id": 25
        },
        {
            "author": "Robert Muir",
            "body": "ok this one is pretty good for review, thanks!\n\ninstead before where it connected unrelated files across a rename, this one just shows\nthe complete new file (as if it was created from scratch)... but thats fine for review here",
            "date": "2011-11-04T07:53:44.574+0000",
            "id": 26
        },
        {
            "author": "Robert Muir",
            "body": "here is svn diff --no-diff-deleted after a merge --reintegrate.\n\n(so uwe can police)",
            "date": "2011-11-04T10:44:42.374+0000",
            "id": 27
        },
        {
            "author": "Uwe Schindler",
            "body": "+1 I see no merge problems, so no unrelated changes caused by missing merges. This is not a code review, of course.",
            "date": "2011-11-04T11:16:47.753+0000",
            "id": 28
        },
        {
            "author": "Robert Muir",
            "body": "Thanks for the policework Uwe... I think I would like to merge to trunk later today.\n\nIf anyone has objections just please list them, or even afterwards. \n\nI would rather back it out later if needed than maintain this fork much longer.",
            "date": "2011-11-04T11:26:45.687+0000",
            "id": 29
        },
        {
            "author": "Robert Muir",
            "body": "thanks again for the help here guys.",
            "date": "2011-11-04T16:02:58.034+0000",
            "id": 30
        }
    ],
    "component": "",
    "description": "Spinoff of LUCENE-2621. (Hoping we can do some of the renaming etc here in a rote way to make progress).\n\nCurrently Codec.java only represents a portion of the index, but there are other parts of the index \n(stored fields, term vectors, fieldinfos, ...) that we want under codec control. There is also some \ninconsistency about what a Codec is currently, for example Memory and Pulsing are really just \nPostingsFormats, you might just apply them to a specific field. On the other hand, PreFlex actually\nis a Codec: it represents the Lucene 3.x index format (just not all parts yet). I imagine we would\nlike SimpleText to be the same way.\n\nSo, I propose restructuring the classes so that we have something like:\n* CodecProvider <-- dead, replaced by java ServiceProvider mechanism. All indexes are 'readable' if codecs are in classpath.\n* Codec <-- represents the index format (PostingsFormat + FieldsFormat + ...)\n* PostingsFormat: this is what Codec controls today, and Codec will return one of these for a field.\n* FieldsFormat: Stored Fields + Term Vectors + FieldInfos?\n\nI think for PreFlex, it doesnt make sense to expose its PostingsFormat as a 'public' class, because preflex\ncan never be per-field so there is no use in allowing you to configure PreFlex for a specific field.\nSimilarly, I think in the future we should do the same thing for SimpleText. Nobody needs SimpleText for production, it should\njust be a Codec where we try to make as much of the index as plain text and simple as possible for debugging/learning/etc.\nSo we don't need to expose its PostingsFormat. On the other hand, I don't think we need Pulsing or Memory codecs,\nbecause its pretty silly to make your entire index use one of their PostingsFormats. To parallel with analysis:\nPostingsFormat is like Tokenizer and Codec is like Analyzer, and we don't need Analyzers to \"show off\" every Tokenizer.\n\nwe can also move the baked in PerFieldCodecWrapper out (it would basically be PerFieldPostingsFormat). Privately it would\nwrite the ids to the file like it does today. in the future, all 3.x hairy backwards code would move to PreflexCodec. \nSimpleTextCodec would get a plain text fieldinfos impl, etc.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3490",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Restructure codec hierarchy",
    "systemSpecification": true,
    "version": ""
}