{
    "comments": [
        {
            "author": "Daniel Naber",
            "body": "Could you please provide some code which triggers this \nArrayIndexOutOfBoundsException? I don't fully understand the problem, so some \ncode might help. ",
            "date": "2004-09-04T05:06:01.000+0000",
            "id": 0
        },
        {
            "author": "sam",
            "body": "I tested again against 1.4-final and cant reproduce the problem.\n\nLooking at the source it is totally different from the code that\nI had the problem with.\n\nSo no problem remaining as far as I am concerned.\n",
            "date": "2004-09-04T14:32:20.000+0000",
            "id": 1
        }
    ],
    "component": "core/search",
    "description": "In StringSortedHitQueue - generateSortIndex seems to mistake \nthe TermEnum having values as indicating that the sort field \nhas entries in the index.\n\nIn the case where the search has matching results an ArrayIndexOutOfBounds\nexception is thrown in sortValue (line 177 StringSortedHitQueue)\nas generateSortIndex creates a terms array of zero length and fieldOrder\ncontains 0 for all documents.\n\nIt would seem more helpful if:\na) generateSortIndex catches the lack of any documents with the sort field.\n\nor\n\nb) reserve terms[0] as a special value for documents that do not have\nmatching sort field values. ie Change the current implementation to add 1\nto the index and change terms[0] to ensure it sorts \"untagged\" documents to\nfirst or last.\n\nFor my application Id much prefer solution (b) as it allows much smaller \nindexes and make searching using sort values less brittle.\n\nThats the best my communication skills can muster just now. Could change\ncurrent code to something like:\n\nprivate final int[] generateSortIndex()\nthrows IOException {\n\n\tfinal int[] retArray = new int[reader.maxDoc()];\n\tfinal String[] mterms = new String[reader.maxDoc() + 1];  // guess length\n\tif (retArray.length > 0) {\n\t\tTermDocs termDocs = reader.termDocs();\n\t\t// change this value to control if documents without sort field come first or last\n\t\tmterms[0] = \"\";  // XXXXXXXXX change\n\t\tint t = 1;  // current term number  XXXXXXXXXXXXX change\n\t\ttry {\n\t\n\n\t\t\tdo {\n\t\t\t\tTerm term = enumerator.term();\n\t\t\t\tif (term.field() != field) break;\n\n\t\t\t\t// store term text\n\t\t\t\t// we expect that there is at most one term per document\n\t\t\t\tif (t >= mterms.length) throw new RuntimeException (\"there are more terms\nthan documents in field \\\"\"+field+\"\\\"\");\n\t\t\t\tmterms[t] = term.text();\n\n\t\t\t\t// store which documents use this term\n\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\tretArray[termDocs.doc()] = t;\n\t\t\t\t}\n\n\t\t\t\tt++;\n\t\t\t} while (enumerator.next());\n\t\t} finally {\n\t\t\ttermDocs.close();\n\t\t}\n\n\t\t// if there are less terms than documents,\n\t\t// trim off the dead array space\n\t\tif (t < mterms.length) {\n\t\t\tterms = new String[t];\n\t\t\tSystem.arraycopy (mterms, 0, terms, 0, t);\n\t\t} else {\n\t\t\tterms = mterms;\n\t\t}\n\t}\n\treturn retArray;\n}\n\nHaving very quick look at IntegerSortedHitQueue would seem possible\nto do same thing. Maybe creating Integer wrapper objects once.\n\nHope that made some sort of sense. Im not very familiar with the code\nor Lucene terminology.\nIf the above seems like a useful approach Id be glad to generate patches\nfor a cleaned up version.\n\nThanks\n\nSam",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-220",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Inconsistent behaviour sorting against field with no related documents",
    "systemSpecification": true,
    "version": ""
}