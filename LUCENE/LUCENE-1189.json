{
    "comments": [
        {
            "author": "Tomer Gabel",
            "body": "The patch to correct the query parser behavior.\n",
            "date": "2008-02-25T10:22:44.202+0000",
            "id": 0
        },
        {
            "author": "Michael Busch",
            "body": "Thanks for your patch, Tomer! Your approach certainly seems \ncorrect to me.\n\nThe file I'm attaching has your fix to QueryParser.jj and also\na testcase similar to your example that fails before and passes\nafter applying the patch.\n\nI'm planning to commit this in a day or so.",
            "date": "2008-05-27T07:17:38.593+0000",
            "id": 1
        },
        {
            "author": "Michael Busch",
            "body": "Committed. Thanks, Tomer!",
            "date": "2008-05-27T19:56:13.216+0000",
            "id": 2
        }
    ],
    "component": "core/queryparser",
    "description": "The Lucene query parser incorrectly handles escaped characters inside quoted strings; specifically, a quoted string that ends with an (escaped) backslash followed by any additional quoted string will not be properly tokenized. Consider the following example:\n\nbq. {{(name:\"///mike\\\\\\\\\\\\\") or (name:\"alphonse\")}}\n\nThis is not a contrived example -- it derives from an actual bug we've encountered in our system. Running this query will throw an exception, but removing the second clause resolves the problem. After some digging I've found that the problem is with the way quoted strings are processed by the lexer: you'll notice that Mike's name is followed by three escaped backslashes right before the ending quote; looking at the JavaCC code for the query parser highlights the problem:\n\n{code:title=QueryParser.jj|borderStyle=solid}\n<DEFAULT> TOKEN : {\n  <AND:       (\"AND\" | \"&&\") >\n| <OR:        (\"OR\" | \"||\") >\n| <NOT:       (\"NOT\" | \"!\") >\n| <PLUS:      \"+\" >\n| <MINUS:     \"-\" >\n| <LPAREN:    \"(\" >\n| <RPAREN:    \")\" >\n| <COLON:     \":\" >\n| <STAR:      \"*\" >\n| <CARAT:     \"^\" > : Boost\n| <QUOTED:     \"\\\"\" (~[\"\\\"\"] | \"\\\\\\\"\")* \"\\\"\">\n...\n{code}\n\nTake a look at the way the QUOTED token is constructed -- there is no lexical processing of the escaped characters within the quoted string itself. In the above query the lexer matches everything from the first quote through all the backslashes, _treating the end quote as an escaped character_, thus also matching the starting quote of the second term. This causes a lexer error, because the last quote is then considered the start of a new match.\n\nI've come to understand that the Lucene query handler is supposed to be able to handle unsanitized human input; indeed the lexer above would handle a query like {{\"blah\\\"}} without complaining, but that's a \"best-guess\" approach that results in bugs with legal, automatically generated queries. I've attached a patch that fixes the erroneous behavior but does not maintain leniency with malformed queries; I believe this is the correct approach because the two design goals are fundamentally at odds. I'd appreciate any comments.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1189",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "QueryParser does not correctly handle escaped characters within quoted strings",
    "systemSpecification": true,
    "version": "2.2, 2.3, 2.3.1"
}