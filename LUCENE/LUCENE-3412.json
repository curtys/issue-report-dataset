{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "This issue could also be related to LUCENE-3215: in some cases with repeats, sloppy phrasescorer returns scores of Infinity... what scores are you getting?\n\nHowever, I don't think its a duplicate issue, with LUCENE-3215 the issue is when you have sloppyphrasequery + repeats + positionIncrements > 1 (e.g. stopwords and enablePositionIncrements=true, the default)\n",
            "date": "2011-09-02T21:20:28.586+0000",
            "id": 0
        },
        {
            "author": "Michael Ryan",
            "body": "Here's the debugQuery output from when it matched both docs:\n{noformat}\n<lst name=\"explain\"><str name=\"2\">\n1.1890696 = (MATCH) weight(text:\"dog dog dog dog\"~1 in 1) [DefaultSimilarity], result of:\n  1.1890696 = score(doc=1,freq=1.0 = phraseFreq=1.0\n), product of:\n    0.99999994 = queryWeight, product of:\n      2.3781395 = idf(), sum of:\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n      0.42049676 = queryNorm\n    1.1890697 = fieldWeight in 1, product of:\n      1.0 = tf(freq=1.0), with freq of:\n        1.0 = phraseFreq=1.0\n      2.3781395 = idf(), sum of:\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n      0.5 = fieldNorm(doc=1)\n</str><str name=\"1\">\n0.8407992 = (MATCH) weight(text:\"dog dog dog dog\"~1 in 0) [DefaultSimilarity], result of:\n  0.8407992 = score(doc=0,freq=0.5 = phraseFreq=0.5\n), product of:\n    0.99999994 = queryWeight, product of:\n      2.3781395 = idf(), sum of:\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n      0.42049676 = queryNorm\n    0.8407993 = fieldWeight in 0, product of:\n      0.70710677 = tf(freq=0.5), with freq of:\n        0.5 = phraseFreq=0.5\n      2.3781395 = idf(), sum of:\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n      0.5 = fieldNorm(doc=0)\n</str></lst>\n{noformat}\n\nSometimes when it matches both docs I'll get \"no matching term\" for the second one:\n{noformat}\n<lst name=\"explain\"><str name=\"2\">\n1.1890696 = (MATCH) weight(text:\"dog dog dog dog\"~1 in 1) [DefaultSimilarity], result of:\n  1.1890696 = score(doc=1,freq=1.0 = phraseFreq=1.0\n), product of:\n    0.99999994 = queryWeight, product of:\n      2.3781395 = idf(), sum of:\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n      0.42049676 = queryNorm\n    1.1890697 = fieldWeight in 1, product of:\n      1.0 = tf(freq=1.0), with freq of:\n        1.0 = phraseFreq=1.0\n      2.3781395 = idf(), sum of:\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n        0.5945349 = idf(docFreq=2, maxDocs=2)\n      0.5 = fieldNorm(doc=1)\n</str><str name=\"1\">\n0.0 = (NON-MATCH) no matching term\n</str></lst>\n{noformat}",
            "date": "2011-09-02T21:46:08.564+0000",
            "id": 1
        },
        {
            "author": "Doron Cohen",
            "body": "I am able to see this inconsistent behavior!\n\nAttached patch contains a test that fails on this. The test currently prints the trial number, and the first loop always pass in all 30 trials (expected) while the second loop always fail (for me) but is inconsistent about when it fails. Sometimes, it fails on the first iteration. Some other times it fails on the 3rd, 9th, etc.\n\nQuite peculiar... investigating...",
            "date": "2011-09-06T07:44:00.837+0000",
            "id": 2
        },
        {
            "author": "Doron Cohen",
            "body": "Attached patch with fix to this bug.\n\nThe fix is rather simple, - just process PP's in offset order. That is, when avoiding conflicts (a conflict means: more than a single query PP is landing on the same doc TP), make sure to handle PPs in a specific order: from first in query to last in query. \n\nThis is crucial because the check for conflicts returns the PP with greater offset, and that one is advanced.\n\nIt was pretty quick to fix this, but took longer to justify the fix.\n\nI added some explanations in the code so that next time justification would be faster :) and also renamed termPositionsDiffer() to termPositionsConflict() which more accurately describes the logic of that method.\n\nnow need to see if this fix is also related to LUCENE-3215.",
            "date": "2011-09-07T12:03:29.208+0000",
            "id": 3
        },
        {
            "author": "Michael Ryan",
            "body": "Thanks, Doron. I've tried applying your patch to Solr 3.2 and it is working well so far.",
            "date": "2011-09-07T22:43:31.549+0000",
            "id": 4
        },
        {
            "author": "Doron Cohen",
            "body": "Thanks Michael for verifying this, I'll go ahead and commit.",
            "date": "2011-09-08T06:11:00.397+0000",
            "id": 5
        },
        {
            "author": "Doron Cohen",
            "body": "Fix committed:\n- r1166541 - trunk\n- r1166563 - 3x\n\n(fix not included in 3.4 RC, therefore marked as 3.5 above)",
            "date": "2011-09-08T08:23:53.092+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Bulk close after release of 3.5",
            "date": "2011-11-27T12:29:32.380+0000",
            "id": 7
        }
    ],
    "component": "core/search",
    "description": "Proximity queries with many repeats (four or more, based on my testing) return non-deterministic results. I run the same query multiple times with the same data set and get different results.\n\nSo far I've reproduced this with Solr 1.4.1, 3.1, 3.2, 3.3, and latest 4.0 trunk.\n\nSteps to reproduce (using the Solr example):\n1) In solrconfig.xml, set queryResultCache size to 0.\n2) Add some documents with text \"dog dog dog\" and \"dog dog dog dog\". http://localhost:8983/solr/update?stream.body=%3Cadd%3E%3Cdoc%3E%3Cfield%20name=%22id%22%3E1%3C/field%3E%3Cfield%20name=%22text%22%3Edog%20dog%20dog%3C/field%3E%3C/doc%3E%3Cdoc%3E%3Cfield%20name=%22id%22%3E2%3C/field%3E%3Cfield%20name=%22text%22%3Edog%20dog%20dog%20dog%3C/field%3E%3C/doc%3E%3C/add%3E&commit=true\n3) Do a \"dog dog dog dog\"~1 query. http://localhost:8983/solr/select?q=%22dog%20dog%20dog%20dog%22~1\n4) Repeat step 3 many times.\n\nExpected results: The document with id 2 should be returned.\n\nActual results: The document with id 2 is always returned. The document with id 1 is sometimes returned.\n\nDifferent proximity values show the same bug - \"dog dog dog dog\"~5, \"dog dog dog dog\"~100, etc show the same behavior.\n\nSo far I've traced it down to the \"repeats\" array in SloppyPhraseScorer.initPhrasePositions() - depending on the order of the elements in this array, the document may or may not match. I think the HashSet may be to blame, but I'm not sure - that at least seems to be where the non-determinism is coming from.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3412",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "SloppyPhraseScorer returns non-deterministic results for queries with many repeats",
    "systemSpecification": true,
    "version": "3.1, 3.2, 3.3, 4.0-ALPHA"
}