{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "Attached is a patch: imagine a regexp with lots of \"optionals\" e.g. [abcd]e?f?[gh]a?b? ...\n\nIn this case the code is not linear in number of states... if we are at state A, and it has a transition to B, we determine that B is finite, then later if we are at C and it leads to B too, we need not determine if B is finite again, as we already did so. So, I keep \"visited\" for this.\n\nAdditionally I changed it to use a Bitset instead of a HashSet, which helps the speed (but just a constant-time speedup).\n\nI took the old code, dumped it into AutomatonTestUtil as \"isFiniteSimple\" and the test just generates random automata and compares this versus the new implementation.\n\nI'd appreciate any reviews/suggestions any automaton-hackers want to give here.\n",
            "date": "2011-03-16T13:06:37.671+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks correct to me!\n\nThe algo you impl'd is the same one described in Cormen, Leiserson, Rivest Algorithms book, as a side effect of doing a depth-first walk through the DFA.  Their description of DFS colors the nodes -- white is unvisited, black is visited, gray is \"being visited\" (ie on my current path).  A DFA then has a cycle if every you recurse and find a gray node.\n\nIn your patch, the combination of \"path\" and \"visited\" maps to these colors, and you detect a cycle when path is set and visited is not.\n\nMaybe rename the test-only isFiniteSimple to isFiniteSLOW or something?\n\nDoes the new random test case tend not to hit the super-slow cases...?",
            "date": "2011-03-16T14:36:51.087+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "bq. A DFA then has a cycle if every you recurse and find a gray node\n\nwell it seems it might work for an NFA too? Though i'm not sure how \"great\" of NFAs AutomatonTestUtil.randomAutomaton generates?\nif all else fails we can det as a side effect (this won't hurt lucene), but I'd like to know for sure, and to send the patch upstream.\n\n{quote}\nMaybe rename the test-only isFiniteSimple to isFiniteSLOW or something?\n\nDoes the new random test case tend not to hit the super-slow cases...?\n{quote}\n\nThe test definitely got faster, but maybe the type of DFAs i generate are not represented fairly by the random generator? In other words they are \"worst-case\" for the old method, but they are \"reasonable\" as far as queries, finite and contained as far as the number of terms they accept.\n\n\n",
            "date": "2011-03-16T15:31:57.009+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "bq. well it seems it might work for an NFA too?\n\nSorry, yes -- the algo doesn't care if it's N or D.  It works for both.",
            "date": "2011-03-16T15:47:05.287+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "Ok, i feel better now.\n\nI think i have an explanation why the test doesn't \"hang\".\nI think its because the automata we generate are pretty damn small (might are significantly larger).\nI think for our testing this is just fine, and actually desirable, as it helps debugging.\n\nThe only largeish automata lucene tests through this stuff are for levenshtein, and we supply 'true' \nhere (since we know its finite) and avoid this method entirely... and even those are \"special\" in that\nthey always have the same general \"shape\"\n",
            "date": "2011-03-16T15:59:11.285+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "i ran the random test for a good hour:\n{noformat}\njunit-sequential:\n    [junit] Testsuite: org.apache.lucene.util.automaton.TestSpecialOperations\n    [junit] Tests run: 10000, Failures: 0, Errors: 0, Time elapsed: 3,908.995 sec\n    [junit]\n{noformat}\n\nI'll rename the old method (in the testUtil for testing correctness) to *Slow as Mike suggested,\nwith an additional warning that if we ever start generating larger automata for testing, it will\nblow up, and commit.\n",
            "date": "2011-03-16T16:10:13.503+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "Committed revision 1082200.\n\nThanks for the review Mike!",
            "date": "2011-03-16T16:54:57.242+0000",
            "id": 6
        }
    ],
    "component": "",
    "description": "in an application of mine, i experienced some very slow query times with finite automata (all the DFAs are acyclic)\n\nIt turned out, the slowdown is some terrible runtime in SpecialOperations.isFinite <-- this is used to determine if the DFA is acyclic or not.\n\n(in this case I am talking about even up to minutes of cpu).\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2970",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "SpecialOperations.isFinite can have TERRIBLE TERRIBLE runtime in certain situations",
    "systemSpecification": true,
    "version": "4.0-ALPHA"
}