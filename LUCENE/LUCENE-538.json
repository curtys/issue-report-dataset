{
    "comments": [
        {
            "author": "Helen Warren",
            "body": "Suite of Junit tests illustrating the problem described in this issue.",
            "date": "2006-04-04T18:33:10.000+0000",
            "id": 0
        },
        {
            "author": "Paul Elschot",
            "body": "With this code in doSearch():\n\n\t\tSystem.err.println(\"Executing query: \"+overallQuery);\n\t\tQuery qrw = overallQuery.rewrite(reader);\n\t\tSystem.err.println(\"rewritten      : \"+qrw);\n\t\tHits results = searcher.search(qrw);\n\nthe test passes.\n\nDuring searcher.search(), the query is once more rewritten, under the covers.\nI don't know why rewriting the overallQuery twice does not work, this may\nbe a bug.\n\nAnyway, there should be no need to rewrite it explicitly.\n\nFor convenience, I put the test in package org.apache.lucene.search,\nso I could run the  test by:\nant -Dtestcase=TestMultiSearchWildCard test\n\nRegards,\nPaul Elschot\n",
            "date": "2006-04-05T04:53:54.000+0000",
            "id": 1
        },
        {
            "author": "Michael Busch",
            "body": "The reason for this problem is how the MultiSearcher rewrites queries. It calls rewrite() on all Searchables and combines the rewritten queries thereafter. \n\nAnd here is the bug: \nLets say we have the query +a -b* and two Searchables. The dictionary of the first Searchable's index has two expansions for b*, so calling rewrite on the first Searchable results in the query +a -(b1 b2). However the dictionary of the second Searchable's index does not have any expansions, so the second rewritten query is +a -(). To combine these two queries the MultiSearcher now creates a new BooleanQuery and adds both rewritten queries as SHOULD clauses, so the combined query looks like: (+a -(b1 b2)) (+a -()). This query is used to search in both indexes. So now all documents that contain 'a' are found, because the negative clause within the second SHOULD clause is empty. Thats why too many results from the first index are returned, the -b* has no effect at all anymore.\n\nThe workaround Paul suggested works, because it calls rewrite on MultiReader instead MultiSearcher. Then the b* is expanded using the merged dictionaries from both indexes. So this workaround simply hides the problem in MultiSearcher.",
            "date": "2006-11-21T19:17:01.000+0000",
            "id": 2
        },
        {
            "author": "Mark Miller",
            "body": "So my dream is to remove Remote from contrib and fix this issue ;)",
            "date": "2009-12-06T20:17:39.159+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "This is now fixed by Mike's cleanup to MultiSearcher etc, which fixes this combine/rewrite bug",
            "date": "2011-01-25T13:21:40.142+0000",
            "id": 4
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:13.817+0000",
            "id": 5
        }
    ],
    "component": "core/search",
    "description": "We are searching across multiple indices using a MultiSearcher. There seems to be a problem when we use a WildcardQuery to exclude documents from the result set. I attach a set of unit tests illustrating the problem.\n\nIn these tests, we have two indices. Each index contains a set of documents with fields for 'title',  'section' and 'index'. The final aim is to do a keyword search, across both indices, on the title field and be able to exclude documents from certain sections (and their subsections) using a\nWildcardQuery on the section field.\n \n e.g. return documents from both indices which have the string 'xyzpqr' in their title but which do not lie\n in the news section or its subsections (section = /news/*).\n \nThe first unit test (testExcludeSectionsWildCard) fails trying to do this.\n If we relax any of the constraints made above, tests pass:\n \n* Don't use WildcardQuery, but pass in the news section and it's child section to exclude explicitly (testExcludeSectionsExplicit)</li>\n* Exclude results from just one section, not it's children too i.e. don't use WildcardQuery(testExcludeSingleSection)</li>\n* Do use WildcardQuery, and exclude a section and its children, but just use one index thereby using the simple\n   IndexReader and IndexSearcher objects (testExcludeSectionsOneIndex).\n* Try the boolean MUST clause rather than MUST_NOT using the WildcardQuery i.e. only include results from the /news/ section\n   and its children.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-538",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Using WildcardQuery with MultiSearcher, and Boolean MUST_NOT clause",
    "systemSpecification": true,
    "version": "1.9"
}