{
    "comments": [
        {
            "author": "John Wang",
            "body": "2.4.0 branch: IndexWriter.java, method: resolveExternalSegments, line 3072:\n  final MergePolicy.OneMerge newMerge = new MergePolicy.OneMerge(segmentInfos.range(i, 1+i), info.getUseCompoundFile());\n\ninfo.getUseCompoundFile() seems to be wrong, this is on the src index, not the target index, should be getUseCompoundFile() instead.",
            "date": "2009-05-19T05:54:30.142+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Good catch!  That's in the resolveExternalSegments method, which simply copies over (one for one) any segments from the source index that didn't \"need\" merging according to the merge policy.  Were there any other places in addIndexesNoOptimize where we don't preserve CFS properly?\n\nYasuhiro/John, could you work up a unit test showing the problem, w/ patch showing that the test passes?",
            "date": "2009-05-19T09:42:49.333+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "I added the test case & committed.  Thanks Yasuhiro!",
            "date": "2009-06-11T12:52:43.358+0000",
            "id": 2
        }
    ],
    "component": "core/index",
    "description": "IndexWriter.addIndexesNoOptimize(Directory[]) ignores the compound file setting of the destination index. It is using the compound file flags of segments in the source indexes.\nThis sometimes causes undesired increase of the number of files in the destination index when non-compound file indexes are added until merge kicks in.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-1642",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "IndexWriter.addIndexesNoOptimize ignores the compound file setting of the destination index",
    "systemSpecification": true,
    "version": ""
}