{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "Awesome stuff Michael!\n \nThis looks like it should speed up most phrase seaches.  Do you have any performance numbers?\nIs the slowdown measurable in the worst case of a phrase query with both terms in every document?\n\nI'll try and review it more in-depth soon.",
            "date": "2006-10-18T17:27:50.000+0000",
            "id": 0
        },
        {
            "author": "Michael Busch",
            "body": "Hi Yonik,\n\nthanks for the quick reply! I'm going to do performance tests and will give you some numbers soon.",
            "date": "2006-10-18T19:41:19.000+0000",
            "id": 1
        },
        {
            "author": "Michael Busch",
            "body": "I made some performance experiments with phrase searches. For every query I measured the search time as well as the number of invocations of IndexInput.readVint(). While the search time is very specific for my test environment, the number of Vints should tell us how much I/O we safe independent from the actual hardware.\n\nTest environment:\n2x Intel Xeon CPU 2.80GHz\n4GB RAM\n280GB SCSI HD\nWindows Server 2003\n\n\nMy index contains about 460,000 documents from different websites like www.cnn.com, www.joelonsoftware.com,..., also German sites like www.heise.de.\nThe search times below are average values over 10 searches.\n\nTests:\n- Query: \"the der\" \n  This should be a hard query, because \"the\" appears in almost every English document whereas \"der\" in almost every German document.\n  Number of hits: 15\n  Execution time in ms (old, new, improvement): 651.3, 472.1, 28%\n  # if VInts (old, new, improvement): 25786474, 16007634, 38%\n  \n- Query: \"joel on software\"\n  \"joel\" only appears in a small subset of documents, \"on\" in all English documents, and \"software\" can appear in German and English documents.\n  Number of hits: 1613\n  Execution time in ms (old, new, improvement): 33.0, 20.1, 39%\n  # if VInts (old, new, improvement): 950243, 256481, 73%\n  \n- Query: \"much much more\"\n  This is an example where we don't save so much I/O, because it is likely that all terms appear in the most English documents.\n  Number of hits: 76\n  Execution time in ms (old, new, improvement): 228.2, 215.5, 6%\n  # if VInts (old, new, improvement): 3580288, 3067693, 14%\n  \nI think these numbers look pretty good. In the future, when we hopefully have proximity scoring, every search would benefit from this improvement. (I actually have a running version of proximity scoring in my local code and verified this). \n\nDid you have some time to look into the patch yet, Yonik? Let me know if you need more information, please.",
            "date": "2006-10-30T18:35:23.000+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "I did some quick synthetic tests of my own.... Java5 -server\n\n100,000 documents, 25 different terms, prob of term in doc = 1/term_number, sloppy phrase on 2 random terms\nImprovement: -3.1%\n\nChange term probability to 1/(term_number**2)\nImprovement: 10.0%\n\nTest only terms 24,25 with term probability=1/term_number (so probabilities were 0.5 and 1.0)\nImprivement: -8.4%\n\nI think your patch is still worth applying because the likely distribution of terms, but I just wish that the performance hit was smaller in the worst-case scenario.",
            "date": "2006-10-30T20:33:41.000+0000",
            "id": 3
        },
        {
            "author": "Yonik Seeley",
            "body": "Oh, those synthetic tests were done on a RAMDirectory, so that also reduces the benefits of your patch.",
            "date": "2006-10-30T20:43:01.000+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "Reviewed and committed.  Thanks Michael!",
            "date": "2006-10-30T22:01:02.000+0000",
            "id": 5
        },
        {
            "author": "Michael Busch",
            "body": "Yonik,\n\nthanks for committing the patch!\nAbout the performance tests you did: I think even on a RAMDirectory the patch should not slow down any queries significantly. I did some profiling and I think that the frequent calls of lazySkip() are quite expensive. I attach a small patch that uses a boolean variable \"needsSkip\" to check whether lazySkip() actually needs to be called. Could you rerun your experiments with this version?\n\nAll unit tests pass with this patch.\n",
            "date": "2006-10-31T00:08:54.000+0000",
            "id": 6
        },
        {
            "author": "Yonik Seeley",
            "body": "I tried with the boolean, but it made no difference with 1.5 or 1.6 server JVMs.  The overhead is probably due to increased state in the object as well as an unpredictable branch in the inner loop.\nI'm not too worried though... my artificial test isn't really representative if the common usecases of phrase queries on  full-text fields which have more varied term frequencies and more positions per document.\n",
            "date": "2006-10-31T18:04:36.000+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "Closing all issues that were resolved for 2.1.",
            "date": "2007-02-27T18:10:35.039+0000",
            "id": 8
        }
    ],
    "component": "core/index",
    "description": "Hello,\n\nI'm proposing a patch here that changes org.apache.lucene.index.SegmentTermPositions to avoid unnecessary skips and reads on the proximity stream. Currently a call of next() or seek(), which causes a movement to a document in the freq file also moves the prox pointer to the posting list of that document.  But this is only necessary if actual positions have to be retrieved for that particular document. \n\nConsider for example a phrase query with two terms: the freq pointer for term 1 has to move to document x to answer the question if the term occurs in that document. But *only* if term 2 also matches document x, the positions have to be read to figure out if term 1 and term 2 appear next to each other in document x and thus satisfy the query. \n\nA move to the posting list of a document can be quite expensive. It has to be skipped to the last skip point before that document and then the documents between the skip point and the desired document have to be scanned, which means that the VInts of all positions of those documents have to be read and decoded. \n\nAn improvement is to move the prox pointer lazily to a document only if nextPosition() is called. This will become even more important in the future when the size of the proximity file increases (e. g. by adding payloads to the posting lists).\n\nMy patch implements this lazy skipping. All unit tests pass. \n\n\nI also attach a new unit test that works as follows:\nUsing a RamDirectory an index is created and test docs are added. Then the index is optimized to make sure it only has a single segment. This is important, because IndexReader.open() returns an instance of SegmentReader if there is only one segment in the index. The proxStream instance of SegmentReader is package protected, so it is possible to set proxStream to a different object. I am using a class called SeeksCountingStream that extends IndexInput in a way that it is able to count the number of invocations of seek(). \n\nThen the testcase searches the index using a PhraseQuery \"term1 term2\". It is known how many documents match that query and the testcase can verify that seek() on the proxStream is not called more often than number of search hits.\n\nExample:\nNumber of docs in the index: 500\nNumber of docs that match the query \"term1 term2\": 5\n\nInvocations of seek on prox stream (old code): 29\nInvocations of seek on prox stream (patched version): 5\n\n- Michael\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-687",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Performance improvement: Lazy skipping on proximity file",
    "systemSpecification": true,
    "version": ""
}