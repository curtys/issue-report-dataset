{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "Here is a patch that adds in 7 new bits (the rightmost bit is destroyed to make the number odd) when calculating the incrementor via\n              final int inc = ((code>>8)+code)|1;\nAnd thus gives 128 different possible paths to follow *per slot* on the first collision on that slot.\nIdeally we would shift log2(size_of_hashtable), but it's probably not worth calculating that and I chose a small shift so it would work well for small hashCodes (say from a very short string).\n\nGiven that equals() in these cases is probably pretty fast, the average speedup is probably relatively minimal.\n\nComments?\n",
            "date": "2007-08-11T13:56:52.420+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "This is an excellent change and makes complete sense that it will resolve conflicts faster than the first way.  I say commit it!",
            "date": "2007-08-11T14:47:36.719+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "committed.",
            "date": "2007-08-13T14:59:20.835+0000",
            "id": 2
        }
    ],
    "component": "",
    "description": "Internal power-of-two closed hashtable traversal in DocumentsWriter and CharArraySet could be better.\n\nHere is the current method of resolving collisions:\n    if (text2 != null && !equals(text, len, text2)) {\n      final int inc = code*1347|1;\n      do {\n        code += inc;\n        pos = code & mask;\n        text2 = entries[pos];\n      } while (text2 != null && !equals(text, len, text2));\n\nThe problem is that two different hashCodes with the same lower bits will keep picking the same slots (the upper bits will be ignored).\nThis is because multiplication (*1347) only really shifts bits to the left... so given that the two codes already matched on the right, they will both pick the same increment, and this will keep them on the same path through the table (even though it's being added to numbers that differ on the left).  To resolve this, some bits need to be moved to the right when calculating the increment.\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-977",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "internal hashing improvements",
    "systemSpecification": true,
    "version": ""
}