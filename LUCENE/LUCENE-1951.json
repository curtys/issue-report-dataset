{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "here are some stats for rewriting wildcards that should be prefix.\ni query on a field with about ~10M numeric terms (a unique database id), average length 10 characters or so.\ni copied this into ramdirectory to try to rule out i/o a bit (its only 1GB index and i use 4GB heap)\n\nI look for all the ones starting with \"1\" (about 1.5 million of these). I did 3 runs, 100 queries each.\nhere are average times for each.\n\n||Run||wildcardquery(\"1*\")||prefixquery(\"1\")\n|1|1181ms|973ms\n|2|1179ms|966ms\n|3|1079ms|963ms\n\nSo, its not a big optimization, but seems consistent, and maybe more important if avg term length is longer: in this case wildcard's comparison function might have to do even more work.\n\nI'll work on a patch to fix the boost/constant score and include a prefixquery rewrite for this case.\n",
            "date": "2009-10-07T16:47:13.849+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "patch for these issues.\nnote: the existing TestWildCardQuery.testTermWithoutWildcard had a bad test, and needs to be fixed for bw-compat branch.\n\nit did the following:\n{code}\nQuery wq = new WildcardQuery(new Term(\"field\", \"nowildcard\"));\nwq = searcher.rewrite(wq);\nassertTrue(wq instanceof TermQuery);\n{code}\n\nthis is not correct, it should only be TermQuery when rewriteMethod is SCORING_BOOLEAN_QUERY_REWRITE. and this is not the default, constant score is.\n\neasiest way to fix the old test is to setRewriteMethod(SCORING_BOOLEAN_QUERY_REWRITE), its the only time it should rewrite to TermQuery.\n",
            "date": "2009-10-07T21:40:08.985+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "patch to the back compat branch to fix the buggy wildcard rewrite test.",
            "date": "2009-10-07T22:13:13.955+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good, thanks Robert!  And those are good perf numbers;\nrewriting to PrefixQuery seems a clear win.\n\nThe only thing that makes me nervous here is we've baked-in MTQ's\nrewrite logic into WildcardQuery.rewrite.  Ie, MTQ in general accepts\nany rewrite method, and so conceivably one could create their own\nrewrite method and then see that it's unused in the special case where\nWildcardQuery is a single term.\n\nAnd while it's true today that if the rewrite method != scoring\nboolean query, it must be a constant scoring one, that could\nconceivably some day change.\n\nMaybe a different approach would be to make a degenerate\n\"SingleTermEnum\" (subclasses FilteredTermEnum) that produces only a\nsingle term?  Then in getEnum we could return that, instead, so the\nrewrite method remains intact?",
            "date": "2009-10-08T09:29:31.610+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "Michael, I thought about this problem too, but didnt know what to do.\n\nI rather like the SingleTermEnum idea. I'll do it.\n",
            "date": "2009-10-08T12:34:25.481+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "think there would be objection to making this proposed SingleTermEnum public?\n\nI would like to use it in LUCENE-1606 (contrib) to have consistency there as well.",
            "date": "2009-10-08T14:44:54.246+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "bq. think there would be objection to making this proposed SingleTermEnum public?\n\nI think that's fine.",
            "date": "2009-10-08T15:26:51.026+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "updated patch, using SingleTermEnum instead of TermQuery rewrite when there are no wildcards to preserve all the MultiTermQuery semantics.\n",
            "date": "2009-10-08T15:36:25.428+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good Robert!  Thanks.  I'll commit soon.",
            "date": "2009-10-08T17:26:10.814+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "Michael, cool. The bw_compat patch is still valid with these changes.\n\nI will mention one concern, just for the record (you can tell me if it is an issue).\n\nThese tests test that for example, a WildcardQuery with SCORING_REWRITE rewrites to a TermQuery, which is correct, but now its a bit wierd how this happens.\n\nSingleTermEnum -> MultiTermQuery -> BooleanQuery with one term -> TermQuery.\n\nI couldnt think of a better way to test the correct behavior, but it is testing a bit more than just what happens in WildcardQuery...\n",
            "date": "2009-10-08T17:29:46.750+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "That is a rather roundabout way to arrive at the TermQuery, but I think the test is fine?",
            "date": "2009-10-08T17:56:26.690+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "bq. That is a rather roundabout way to arrive at the TermQuery, but I think the test is fine? \n\nOk, that was my only concern, the test. I like the SingleTermEnum otherwise, I think it will reduce maintenance.",
            "date": "2009-10-08T18:01:57.396+0000",
            "id": 11
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Robert!",
            "date": "2009-10-08T21:13:09.158+0000",
            "id": 12
        }
    ],
    "component": "core/query/scoring",
    "description": "wildcardquery has logic to rewrite to termquery if there is no wildcard character, but\n* it needs to pass along the boost if it does this\n* if the user asked for a 'constant score' rewriteMethod, it should rewrite to a constant score query for consistency.\n\nadditionally, if the query is really a prefixquery, it would be nice to rewrite to prefix query.\nboth will enumerate the same number of terms, but prefixquery has a simpler comparison function.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1951",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "wildcardquery rewrite improvements",
    "systemSpecification": true,
    "version": ""
}