{
    "comments": [
        {
            "author": "Steve Rowe",
            "body": "Patch implementing the idea.\n\nThis patch just creates a new class named {{JFlexHTMLStripCharFilter}}.  All of the {{HTMLStripCharFilterTest}} tests are copied over to {{JFlexHTMLStripCharFilterTest}}; Robert's random test is un-{{@Ignore}}'d, and several more tests are added.\n",
            "date": "2012-01-12T05:40:03.666+0000",
            "id": 0
        },
        {
            "author": "Steve Rowe",
            "body": "Left to do:\n\n# Accept supplementary characters in HTML tag names.\n# Recognize uppercase character entity variants for \"quot\", \"copy\", \"gt\", \"lt\", \"reg\", and \"amp\" (from Dawid Weiss's SOLR-882 patch)\n# Rename current {{HTMLStripCharFilter}} to {{ClassicHTMLStripCharFilter}}\n# Rename {{JFlexStripCharFilter}} to {{HTMLStripCharFilterImpl}}\n# Make a back-compat-enabling wrapper class (like {{StandardTokenizer}}) that will use {{ClassicHTMLStripCharFilter}} for Version.LUCENE_35 and earlier, and {{HTMLStripCharFilterImpl}} otherwise.\n\nThis would be the first back-compat enabled CharFilter.  Should the existing HTMLStripCharFilter instead vanish off the face of the earth?\n",
            "date": "2012-01-12T06:04:30.790+0000",
            "id": 1
        },
        {
            "author": "Steve Rowe",
            "body": "This JFlex-based {{HTMLStripCharFilter}} replacement will fix LUCENE-2208.",
            "date": "2012-01-12T06:08:23.261+0000",
            "id": 2
        },
        {
            "author": "Steve Rowe",
            "body": "One other thing left to do: I added javadocs to {{BaseCharFilter.addOffCorrectMap()}}, but I think they should be moved to the package javadocs for {{o.a.l.analysis.charfilter}}, and maybe add some examples.  (This package has basically zero documentation currently.)",
            "date": "2012-01-12T06:14:00.999+0000",
            "id": 3
        },
        {
            "author": "Steve Rowe",
            "body": "Added a {{<!\\[CDATA\\[...\\]\\]>}} section test, and fixed the CDATA section handling.",
            "date": "2012-01-12T07:00:17.065+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nRobert's random test is un-@Ignore'd\n{quote}\n\n+1!\n\n",
            "date": "2012-01-12T12:30:03.422+0000",
            "id": 5
        },
        {
            "author": "Brian Meidell",
            "body": "Any idea how quickly this will be rolled into a new version?",
            "date": "2012-01-12T12:37:10.697+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nThis would be the first back-compat enabled CharFilter. Should the existing HTMLStripCharFilter instead vanish off the face of the earth?\n{quote}\n\nWhat would be the motivation? Are there some features of the previous one that don't make sense in this implementation?\nI don't think fixing offsets bugs like LUCENE-2208 counts as breaking index backwards compat, because it won't change search results.\nIt will just prevent highlighters from throwing exceptions.\n\n(LUCENE-3642 and LUCENE-3668 fixed lots of offset bugs already, we didn't spend time on any back compat).\n",
            "date": "2012-01-12T12:45:15.588+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "Also I don't know how Version etc would work here, since the old HtmlStripCharFilter was never part of lucene.\n\nfrom lucene's perspective, its a new feature.",
            "date": "2012-01-12T12:47:12.050+0000",
            "id": 8
        },
        {
            "author": "Steve Rowe",
            "body": "Here's another to-do, from [comment-12625835 in SOLR-42|https://issues.apache.org/jira/browse/SOLR-42?focusedCommentId=12625835&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12625835]: handle MS-Word-generated broken processing instructions {{<? ... />}} (instead of {{<? ... ?>}}.",
            "date": "2012-01-12T13:55:51.917+0000",
            "id": 9
        },
        {
            "author": "Steve Rowe",
            "body": "{quote}\nbq. This would be the first back-compat enabled CharFilter.\n\nWhat would be the motivation?\n{quote}\n\nThere are differences in the behavior, but I guess all of these could be characterized as bug fixes:\n\n# Supplementary characters in tags will be recognized.  The old version doesn't do this.\n# CDATA sections are recognized.  The old version doesn't; people have requested this, e.g. [http://www.lucidimagination.com/search/document/48fcd906e39764ec#48fcd906e39764ec])\n# No space is substituted for inline tags (e.g. {{<b>}}, {{<i>}}, {{<span>}}).  The old version substitutes spaces for all tags; people have complained e.g. [on SOLR-1343|https://issues.apache.org/jira/browse/SOLR-1343?focusedCommentId=13096839&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13096839]\n# Broken MS-Word-generated processing instructions {{<? ... />}} will be handled.\n# Uppercase character entities \"quot\", \"copy\", \"gt\", \"lt\", \"reg\", and \"amp\" will be recognized (from Dawid Weiss's SOLR-882 patch); the old version doesn't do this.\n\nbq. Are there some features of the previous one that don't make sense in this implementation?\n\nNo, not as far as I can tell.  I think all features of the previous one are included.\n\nbq. Also I don't know how Version etc would work here, since the old HtmlStripCharFilter was never part of lucene.  from lucene's perspective, its a new feature.\n\nGood point.  Should I make it a new Lucene feature on 3.X?  That is, should I remove Solr's HTMLStripCharFilter and have it refer to a new Lucene HTMLStripCharFilter?\n",
            "date": "2012-01-12T14:19:07.081+0000",
            "id": 10
        },
        {
            "author": "Steve Rowe",
            "body": "AFAICT, SOLR-2891 will be fixed by this implementation.",
            "date": "2012-01-12T14:24:03.389+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nThere are differences in the behavior, but I guess all of these could be characterized as bug fixes:\n{quote}\n\nThis sounds awesome!\n\n{quote}\nGood point. Should I make it a new Lucene feature on 3.X? That is, should I remove Solr's HTMLStripCharFilter and have it refer to a new Lucene HTMLStripCharFilter?\n{quote}\n\nI think so.\n\nIf you want to, you can make it package-private + deprecated inside o.a.solr.analysis. The Solr factory could respect\nthe luceneMatchVersion parameter for backwards compatibility, and instantiate the old version in that case.\n\nSo you would then move the old charfilter from modules/analysis to the same place in trunk, too... its purely a solr\nback-compat issue. For lucene users its just a new feature and they don't see any of this.\n\nThis is what we did with Synonyms.\n",
            "date": "2012-01-12T14:24:37.006+0000",
            "id": 12
        },
        {
            "author": "Steve Rowe",
            "body": "This patch contains a feature-complete version.  Changes from the previous patch:\n\n# Now substituting newlines instead of spaces for block-level elements; this corresponds more closely to on-screen layout, enables sentence segmentation, and doesn't change offsets.\n# Supplementary characters are now accepted in tags.\n# Switched accepted tag names from {{[:XID_Start:]}} and {{[:XID_Continue:]}} Unicode properties to the more relaxed {{[:ID_Start:]}} and {{[:ID_Continue:]}} properties, in order to broaden the range of recognizable input.  (The improved security afforded by the {{XID_*}} properties is irrelevant to what a {{CharFilter}} does.)\n# Uppercase character entity variants for \"quot\", \"copy\", \"gt\", \"lt\", \"reg\", and \"amp\" (from Dawid Weiss's SOLR-882 patch) are now accepted.\n# MS-Word-generated broken processing instructions ({{<? ... />}} instead of {{<? ... ?>}}) are now accepted.\n# Added several tests, including parsing a full MS-Word-2010-generated HTML file.\n\nLeft to do:\n\n# Move javadocs from {{BaseCharFilter.addOffCorrectMap()}} to {{o.a.l.analysis.charfilter}} package level javadoc file.\n# Rename the existing {{HTMLStripCharFilter}} to {{ClassicHTMLStripCharFilter}}; move it to Solr {{o.a.s.analysis}} package; deprecate it; and make it package private.\n# Rename {{JFlexHTMLStripCharFilter}} to {{HTMLStripCharFilter}}.\n# Enable Solr back-compat (but not Lucene back-compat, since {{HTMLStripCharFilter}} has never been released as part of Lucene) by making {{HTMLStripCharFilterFactory}} instantiate {{ClassicHTMLStripCharFilter}} if the {{luceneMatchVersion}} parameter is {{LUCENE_35}} or earlier, and otherwise instantiate the new {{HTMLStripCharFilter}}.",
            "date": "2012-01-13T19:04:11.618+0000",
            "id": 13
        },
        {
            "author": "Steve Rowe",
            "body": "Forgot to mention two more change in the latest patch from the previous version: \n\n7. The generated scanner's parse method now returns the next available character if one is available; this simplifies/clarifies the processing flow. (Previously the parse method returned an enum indicating whether to copy a char directly from the input buffer -- {{OutputSource.DIRECT}} -- or from another location -- {{OutputSource.INDIRECT}} -- the {{read()}} method would then have to go fetch the next character from the given source.)\n8. Renamed the generated scanner's parse method from the default {{yylex()}} to {{nextChar()}}.",
            "date": "2012-01-13T19:18:54.927+0000",
            "id": 14
        },
        {
            "author": "Hoss Man",
            "body": "bq. I don't think fixing offsets bugs like LUCENE-2208 counts as breaking index backwards compat, because it won't change search results.\nbq. It will just prevent highlighters from throwing exceptions.\n\nFWIW: If i understand the issue correctly, then the one risk i can imagine here is that people don't reindex, and get the new behavior for new docs, so they'll get diff behavior are query time depending on when the doc is re-indexed.  that seems significant enough to definitely warrant the luceneMatchVersion toggle sarowe has on his todo list -- which seems fairly straight forward.\n\nThe only concern i really have is...\n\nbq. A JFlex-based HTMLStripCharFilter replacement would be more performant...\n\n..before deprecating \"ClassicHTMLStripCharFilter\" we should actually test that the Jlex version is faster ... because if it winds up being noticible slower in some cases, some people may prefer the the \"classic\" mode to the JFlex mode if the \"warts\" of the existing one don't affect them -- in which case i might almost suggest actually using multiple factories in solr instead of making it versionMatch dependent.  \n\n(fingers crossed it's a non-issue)",
            "date": "2012-01-13T19:35:06.253+0000",
            "id": 15
        },
        {
            "author": "Yonik Seeley",
            "body": "Let's be conservative and keep around HTMLStripCharFilter, and name this one something else?\nThe original was meant to handle all sorts of bad, partial, and weird input.\nOr are we really confident that this implementation handles everything the current one does?",
            "date": "2012-01-13T19:41:32.236+0000",
            "id": 16
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nLet's be conservative and keep around HTMLStripCharFilter, and name this one something else?\nThe original was meant to handle all sorts of bad, partial, and weird input.\n{quote}\n\nI call bullshit. It fails on all kinds of bad/partial/and weird input.\n\nIn fact ill go remove my @Ignore now. Lets see if anyone can fix the bugs in it. That should settle this.",
            "date": "2012-01-13T19:44:43.195+0000",
            "id": 17
        },
        {
            "author": "Steve Rowe",
            "body": "bq. are we really confident that this implementation handles everything the current one does?\n\nYes, this implementation's bad/partial/weird HTML handling capabilities are a superset of the current implementation.  The tests for the new implementation are a superset of the old implementation's tests.\n\nI welcome more examples of junk HTML to add to the tests :)",
            "date": "2012-01-13T19:47:26.244+0000",
            "id": 18
        },
        {
            "author": "Steve Rowe",
            "body": "{quote}\nThe only concern i really have is...\n\nbq. A JFlex-based HTMLStripCharFilter replacement would be more performant...\n\n..before deprecating \"ClassicHTMLStripCharFilter\" we should actually test that the Jlex version is faster ... \n{quote}\n\n+1.  I'll do this before committing anything.",
            "date": "2012-01-13T19:50:30.918+0000",
            "id": 19
        },
        {
            "author": "Dawid Weiss",
            "body": "bq. I welcome more examples of junk HTML to add to the tests \n\nJulien Nioche (Nutch) may have access to realistic large HTML crawls... there's nothing wilder and weirder than real-life HTML :)",
            "date": "2012-01-13T19:52:35.311+0000",
            "id": 20
        },
        {
            "author": "Hoss Man",
            "body": "bq. +1.  I'll do this before committing anything.\n\ni wouldn't be shy about committing the new impl + tests, i would just wait to change the solr factory default behavior until we prove the perf is as good as the existing one in some common cases, and if it's not, then re-evaluate the names of the classes.\n\nand by common cases i'm thinking...\n\n* some test docs using typical wellformed html markup\n* some test docs using malformed markup that require backtracking\n* some test docs that contain almost no HTML at all (this is the one that i have a hunch may be a big differentiator -- i've seen lots of people who use the HTML stripper not becuase they expect HTML, but because they want to be sure it doesn't get indexed if some stray html encoding sneaks into their data) \n",
            "date": "2012-01-13T20:06:25.500+0000",
            "id": 21
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. The tests for the new implementation are a superset of the old implementation's tests.\n\nUnfortunately I'm not sure how much of a story the tests tell (and yes, that would be my fault ;-)\nMy memory is rusty, but back in '05 when I coded this thing, I threw a lot stuff we had lying around CNET at it, and also a lot of stuff downloaded from the web (which I couldn't just copy-n-paste into a unit test obviously).  I had a heck of a time handling all the weird stuff that could appear inside script tags, for example, and I don't think I see much of a test for that (again... my fault.)\n\nbq. I welcome more examples of junk HTML to add to the tests\n\nNot saying the new one isn't great (and matching a lot of crap from the old one is quite an achievement).\nOne can be sure that the current implementation doesn't always do the right thing, but unfortunately \"right\" isn't well defined here considering the domain.\nThe cost to keeping around the current version for a little while seems minimal.\n",
            "date": "2012-01-13T20:07:26.436+0000",
            "id": 22
        },
        {
            "author": "Steve Rowe",
            "body": "bq. I had a heck of a time handling all the weird stuff that could appear inside script tags, for example, and I don't think I see much of a test for that (again... my fault.)\n\nI added tests with the following snippets:\n\n{noformat}\none<script><!-- <!--#config comment=\"<!-- \\\"comment\\\"-->\"--> --></script>two\n\n=> 'one\ntwo'\n{noformat}\n{noformat}\none<script attr= bare><!-- action('<!-- comment -->', \"\\\"-->\\\"\"); --></script>two\n\n=> 'one\ntwo'\n{noformat}\n{noformat}\nhello<script><!-- f('<!--internal--></script>'); --></script>\n\n=> 'hello\n'\n{noformat}\n\nbq. One can be sure that the current implementation doesn't always do the right thing, but unfortunately \"right\" isn't well defined here considering the domain.\n\nI agree - the \"right\" thing IMHO is: get as much content from as varied a range of sources as possible, and never ever allow the input to bork processing.\n\nbq. The cost to keeping around the current version for a little while seems minimal.\n\nMy proposal would do this, though under a different name, and requiring a luceneMatchVersion of 3.5 or earlier for the factory to use it.  Do you object to this?  \n\nI have two issues with not switching over now:\n\n# It's a chicken and egg problem: how will people know if there is a problem with the new implementation if they don't use it?\n# The current version has several long standing bugs that nobody has fixed.  I personally wouldn't attempt it with the current implementation: it's difficult to understand.  This is one of my main motivations for making this new version: when people find issues, fixing them should be much easier with the new implementation.\n",
            "date": "2012-01-13T20:34:55.001+0000",
            "id": 23
        },
        {
            "author": "Steve Rowe",
            "body": "From [#lucene-dev IRC|http://colabti.org/irclogger/irclogger_log/lucene-dev?date=2012-01-13#l130]:\n\n{quote}\nyonik_:\tsarowe: if we change the name of the current html strip stuff, it seems like doing anything with luceneMatchVersion isn't needed (or overkill?)\n\nsarowe:\tbut then people will need to take action to use the (non-broken) new impl\n        me no likey\n\nyonik_:\tbut if the name is changed, they won't use it by accident\n\nsarowe:\toh, you mean: don't even attempt back-compat - just provide the ability to use the previous implementation\n\nyonik_:\tyeah\n\nsarowe:\tvia a new/different name\n        I'm definitely okay with that\n{quote}",
            "date": "2012-01-13T21:10:00.747+0000",
            "id": 24
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. In fact ill go remove my @Ignore now. Lets see if anyone can fix the bugs in it. That should settle this.\n\nI see you've done this.  Purposely breaking the build really isn't necessary to make a point about a known bug.",
            "date": "2012-01-13T22:09:08.093+0000",
            "id": 25
        },
        {
            "author": "Hoss Man",
            "body": "bq. sarowe: oh, you mean: don't even attempt back-compat - just provide the ability to use the previous implementation\n\nright, this is what we did with DateField a while back, note the CHANGES.txt entry on r658003.  now that we have luceneMatchVersion though i kind of go back and forth on when to use it to pick an impl vs when to do stuff like this. dealers choice...\n\nhttps://svn.apache.org/viewvc?view=revision&revision=658003",
            "date": "2012-01-13T22:22:04.372+0000",
            "id": 26
        },
        {
            "author": "Steve Rowe",
            "body": "bq. some test docs using malformed markup that require backtracking\n\nI set up a quick test for this in both of the test classes using output from the synthetic broken HTML generator {{o.a.l.util._TestUtil.randomHtmlishString()}} and ran 100K iterations of it - here's the HTMLStripCharFilterTest version:\n\n{code:java}\n  public void testRandomBrokenHTML() throws Exception {\n    int maxNumElements = 10000;\n    String text = _TestUtil.randomHtmlishString(random, maxNumElements);\n    Reader reader\n        = new HTMLStripCharFilter(CharReader.get(new StringReader(text)));\n    while (reader.read() != -1);\n  }\n{code}\n\nBest/worst of 5 (as reported by Ant for the individual test, rather than for the entire Ant invocation):\n\n* {{HTMLStripCharFilter}}: best: 73.4 sec, worst: 76.5 sec\n* {{JFlexHTMLStripCharFilter}}: best: 73.5 sec, worst: 76.0 sec\n\nI'm going to increase the evilness of {{_TestUtil.randomHtmlishString()}} and re-run to see if the numbers shift.",
            "date": "2012-01-14T00:04:51.344+0000",
            "id": 27
        },
        {
            "author": "Steve Rowe",
            "body": "bq. I'm going to increase the evilness of {{_TestUtil.randomHtmlishString()}} and re-run to see if the numbers shift.\n\nI did this, and it uncovered a bug in handling of Server Side Includes in {{JFlexHTMLStripCharFilter}} - hooray for evil tests.\n\nThe timings, this time for 10K iterations:\n\n* {{HTMLStripCharFilter}}: best: 48.6 sec, worst: 49.7 sec\n* {{JFlexHTMLStripCharFilter}}: best: 15.5 sec, worst: 17.3 sec\n",
            "date": "2012-01-14T07:10:31.595+0000",
            "id": 28
        },
        {
            "author": "Steve Rowe",
            "body": "bq. some test docs that contain almost no HTML at all\n\nI used the following to test the zero-markup case in both test classes (the {{JFlexHTMLStripCharFilter}} version is given below):\n\n{code:java}\n  public void testRandomText() throws Exception {\n    StringBuilder text = new StringBuilder();\n    int minNumWords = 10;\n    int maxNumWords = 10000;\n    int minWordLength = 3;\n    int maxWordLength = 20;\n    int numWords = _TestUtil.nextInt(random, minNumWords, maxNumWords);\n    switch (_TestUtil.nextInt(random, 0, 4)) {\n      case 0: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomUnicodeString(random, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      case 1: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomRealisticUnicodeString\n              (random, minWordLength, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      default: { // ASCII 50% of the time\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomSimpleString(random));\n          text.append(' ');\n        }\n      }\n    }\n    Reader reader = new JFlexHTMLStripCharFilter\n        (CharReader.get(new StringReader(text.toString())));\n    while (reader.read() != -1);\n  }\n{code}\n\nThe results for 10K iterations (best/worst of 5):\n\n* {{HTMLStripCharFilter}}: best: 23.7 sec, worst: 24.8 sec\n* {{JFlexHTMLStripCharFilter}}: best: 22.0 sec, worst: 24.7 sec\n\n",
            "date": "2012-01-14T07:24:42.208+0000",
            "id": 29
        },
        {
            "author": "Steve Rowe",
            "body": "bq. some test docs using typical wellformed html markup\n\nI have access to [ClueWeb09|http://lemurproject.org/clueweb09.php].  For performance testing I used the first WARC file for the English and Chinese languages ({{en0000/00.warc.gz}} and {{zh0000/00.warc.gz}}), each of which when uncompressed contains about 1GB of text (including a small amount of non-HTML metadata: WARC information and HTTP headers).  The English WARC contains about 35,000 documents from about 2,100 unique domains.  The Chinese WARC contains about 33,000 documents from about 550 unique domains.\n\nI compared {{JFlexHTMLStripCharFilter}}'s output with that of {{HTMLStripCharFilter}} for several hundred documents.  In the course of this comparison, I found several problems with the JFlex implementation (e.g. no {{<STYLE>}} tag handling; no MS conditional tag handling, e.g. {{<!\\[if ! IE]>}}; and some problems handling creative attribute values), which the attached patch fixes.  I re-ran the text-only and malformed HTML performance tests on the final implementation, and the numbers aren't significantly different from those prior to these fixes.  The new patch also contains the more-evil {{_TestUtils.randomHtmlishString()}};  shifts the {{CharFilter}} javadocs from {{BaseCharFilter.addOffCorrectMapping()}} to {{package.html}}; and adds several more tests to {{JFlexHTMLStripCharFilterTest.java}}.\n\nI have attached the three classes I used to test performance over the ClueWeb09 subset.  {{BaselineWarcTest.java}} uses [the WarcRecord class supplied with the ClueWeb09 collection|http://boston.lti.cs.cmu.edu/clueweb09/wiki/tiki-index.php?page=Working+with+WARC+Files] to read the compressed WARC files; looks for a declared charset first in each document's content in the Content-Type {{<meta>}} tag, and then in the HTTP header; feeds this charset, if any, to the ICU4J charset detector, which instantiates a Reader using the detected charset; and then {{read()'s}} all content.  The other two classes add the respective CharFilter on top of {{BaselineWarcTest}}'s functionality.\n\nThe performance numbers (best of 5 trials):\n\n||Language||Baseline||Classic||JFlex||\n|English|156s|179s|171s|\n|Chinese|155s|180s|172s|\n\nExcluding charset detection and I/O (measured by {{BaselineWarcTest}}), {{JFlexHTMLStripCharFilter}} appears to improve on {{HTMLStripCharFilter}}'s throughput by about 50% in both languages.\n\nI found a few problems with {{HTMLStripCharFilter}}:\n\n# The following exception was thrown for six of the English documents:\n{noformat}\njava.io.IOException: Mark invalid\n        at java.io.BufferedReader.reset(BufferedReader.java:485)\n        at org.apache.lucene.analysis.CharReader.reset(CharReader.java:69)\n        at org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.restoreState(HTMLStripCharFilter.java:171)\n        at org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.read(HTMLStripCharFilter.java:734)\n        at HTMLStripCharFilterWarcTest.main(HTMLStripCharFilterWarcTest.java:86)\n{noformat}\n# {{&amp;apos;}} is not decoded.\n# Content between some <script> tags is not stripped out.\n# Unbalanced quotation marks in opening tags cause the tag to not be stripped out.\n\nLeft to do:\n\n# Rename {{HTMLStripCharFilter}} to {{ClassicHTMLStripCharFilter}}; move it to Solr {{o.a.s.analysis}} package; deprecate it; and create a new Solr Factory for it.\n# Rename JFlexHTMLStripCharFilter to HTMLStripCharFilter.\n# Commit to trunk\n# Backport and commit to branch_3x.",
            "date": "2012-01-16T09:45:45.560+0000",
            "id": 30
        },
        {
            "author": "Hoss Man",
            "body": "+1 ... to everything.",
            "date": "2012-01-16T23:27:15.057+0000",
            "id": 31
        },
        {
            "author": "Steve Rowe",
            "body": "bq. AFAICT, SOLR-2891 will be fixed by this implementation.\n\nI misspoke, having misread that issue - despite the reference to {{HTMLStripCharFilter}} in the most recent comment on the issue, SOLR-2891 is not about {{HTMLStripCharFilter}}.",
            "date": "2012-01-22T02:56:06.131+0000",
            "id": 32
        },
        {
            "author": "Steve Rowe",
            "body": "Here is the final patch.\n\n{quote}\nbq. sarowe: oh, you mean: don't even attempt back-compat - just provide the ability to use the previous implementation\n\nright, this is what we did with DateField a while back, note the CHANGES.txt entry on r658003. now that we have luceneMatchVersion though i kind of go back and forth on when to use it to pick an impl vs when to do stuff like this. dealers choice...\n\nhttps://svn.apache.org/viewvc?view=revision&revision=658003\n{quote}\n\nI took the same approach - here are the changes from the previous version of the patch:\n\n# The previous {{HTMLStripCharFilter}} implementation is moved to Solr, renamed to {{LegacyHTMLStripCharFilter}}, and deprecated, and a Factory is added for it.\n# {{JFlexHTMLStripCharFilter}} is renamed to {{HTMLStripCharFilter}}.\n# Support for {{HTMLStripCharFilter}}'s \"escapedTags\" functionality is added to {{HTMLStripCharFilterFactory}}.\n# Added {{TestHTMLStripCharFilterFactory}}.\n# Solr and Lucene {{CHANGES.txt}} entries are added.\n\nRun the following svn copy script before applying the patch:\n\n{noformat}\nsvn cp modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilter.java\nsvn cp modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/htmlStripReaderTest.html solr/core/src/test/org/apache/solr/analysis/\nsvn cp modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest.java solr/core/src/test/org/apache/solr/analysis/LegacyHTMLStripCharFilterTest.java\nsvn cp solr/core/src/java/org/apache/solr/analysis/HTMLStripCharFilterFactory.java solr/core/src/java/org/apache/solr/analysis/LegacyHTMLStripCharFilterFactory.java\n{noformat}\n\nI plan to commit to trunk shortly, then backport and commit to branch_3x.",
            "date": "2012-01-22T05:17:32.569+0000",
            "id": 33
        },
        {
            "author": "Robert Muir",
            "body": "Here's a standalone testcase for the fail from jenkins",
            "date": "2012-01-22T15:57:40.029+0000",
            "id": 34
        },
        {
            "author": "Robert Muir",
            "body": "By the way: \"expected\" in that test is wrong. its just the same input string to trigger the assert in MockTokenizer...",
            "date": "2012-01-22T16:11:18.239+0000",
            "id": 35
        },
        {
            "author": "Steve Rowe",
            "body": "Patch (excluding the re-generated .java scanner) that addresses the unpaired surrogate numeric character entity failures uncovered by random testing, by outputting REPLACEMENT CHARACTER U+FFFD, and adds the ability to interpret properly paired UTF-16 surrogates as an above-BMP codepoint.  Added tests to cover all four combinations of hex & decimal surrogate numeric character entities in surrogate pairs.\n\nAlso added {{@SuppressWarnings(\"fallthrough\")}} to the JFlex-generated scanner class, so that the 40+ warnings about switch case fall-throughs don't clutter the output.\n\n*Edit*: committing to trunk shortly.",
            "date": "2012-01-23T07:30:12.816+0000",
            "id": 36
        },
        {
            "author": "Steve Rowe",
            "body": "Committed the fixed UTF-16 numeric character reference surrogates handling to trunk in r1234687.",
            "date": "2012-01-23T07:43:55.883+0000",
            "id": 37
        },
        {
            "author": "Steve Rowe",
            "body": "Thanks Robert for your help diagnosing and fixing the surrogates problem!",
            "date": "2012-01-23T07:46:21.295+0000",
            "id": 38
        },
        {
            "author": "Steve Rowe",
            "body": "Backported to branch_3x.",
            "date": "2012-01-24T15:53:46.212+0000",
            "id": 39
        }
    ],
    "component": "modules/analysis",
    "description": "A JFlex-based HTMLStripCharFilter replacement would be more performant and easier to understand and maintain.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3690",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "JFlex-based HTMLStripCharFilter replacement",
    "systemSpecification": true,
    "version": "3.5, 4.0-ALPHA"
}