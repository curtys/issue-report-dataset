{
    "comments": [
        {
            "author": "Steve Rowe",
            "body": "synched to current trunk, after the LUCENE-2124 move",
            "date": "2009-12-26T06:06:49.096+0000",
            "id": 0
        },
        {
            "author": "Steve Rowe",
            "body": "Atached collation.benchmark.tar.bz2, which contains stuff to run an analysis-only contrib benchmark for the (ICU)CollationKeyAnalyzers over 4 languages: English, French, German, and Ukrainian.\n\nIncluded are:\n\n# For each language, a line-doc containing the most frequent 100K words from a corresponding Wikipedia dump from November 2009;\n# For each language, Java code for a no-argument analyzer callable from a benchmark alg, that specializes (ICU)CollationKeyAnalyzer and uses PerFieldAnalyzerWrapper to only run it over the line-doc body field\n# A script to compile and jarify the above analyzers\n# A benchmark alg running 5 iterations of 10 repetitions of analysis only over the line-doc for each language\n# A script to find the minimum elapsed time for each combination, and output the results as a JIRA table\n# A script to run the previous two scripts once for each of three JDK versions\n# A script to compare the output of the above script before and after applying the attached patch removing Char/ByteBuffer wrapping, and output the result as a JIRA table\n",
            "date": "2009-12-26T06:25:26.570+0000",
            "id": 1
        },
        {
            "author": "Steve Rowe",
            "body": "To run the benchmark:\n\n# Unpack {{collation.benchmark.tar.bz2}} in a full Lucene-java tree into the {{contrib/benchmark/}} directory.  All contents will be put under a new directory named {{collation/}}.\n# Compile and jarify the localized (ICU)CollationKeyAnalyzer code: from the {{collation/}} directory, run the script {{build.test.analyzer.jar.sh}}.\n# From an unpatched {{java/trunk/}}, build Lucene's jars: {{ant clean package}}.\n# From the {{contrib/benchmark/}} directory, run the collation benchmark: {{collation/run-benchmark.sh > unpatched.collation.bm.table.txt}}\n# Apply the attached patch to the Lucene-java tree\n# From {{java/trunk/}}, build Lucene's jars: {{ant clean package}}.\n# From the {{contrib/benchmark/} directory, run the collation benchmark: {{collation/run-benchmark.sh > patched.collation.bm.table.txt}}\n# Produce the comparison table:  {{collation/compare.collation.benchmark.tables.pl unpatched.collation.bm.table.txt patched.collation.bm.table.txt > collation.diff.bm.table.txt}}\n\n",
            "date": "2009-12-26T06:47:03.159+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "Steven this looks cool. trying to coerce my little netbook into running this thing now but I took a glance already.\n\nDo you think after this issue is resolved (whether it helps or doesn't help/won't fix either way) that we should open a separate issue to work on committing the benchmark so we have collation benchmarks for the future? Seems like it would be good to have in the future.\n",
            "date": "2009-12-26T06:54:32.582+0000",
            "id": 3
        },
        {
            "author": "Steve Rowe",
            "body": "Here are the unpatched results I got - these look quite similar to the results I posted from a custom (non-contrib-benchmark) benchmark in [the description of LUCENE-1719|https://issues.apache.org/jira/browse/LUCENE-1719#description-open] :\n\n||Sun JVM||Language||java.text||ICU4J||KeywordAnalyzer||ICU4J Improvement||\n|1.5.0_15 (32-bit)|English|9.00s|4.89s|2.90s|207%|\n|1.5.0_15 (32-bit)|French|10.64s|5.12s|2.95s|254%|\n|1.5.0_15 (32-bit)|German|10.19s|5.19s|2.97s|225%|\n|1.5.0_15 (32-bit)|Ukrainian|13.66s|7.20s|2.96s|152%|\n||Sun JVM||Language||java.text||ICU4J||KeywordAnalyzer||ICU4J Improvement||\n|1.5.0_15 (64-bit)|English|5.97s|2.55s|1.50s|326%|\n|1.5.0_15 (64-bit)|French|6.86s|2.74s|1.56s|349%|\n|1.5.0_15 (64-bit)|German|6.85s|2.76s|1.59s|350%|\n|1.5.0_15 (64-bit)|Ukrainian|9.56s|4.01s|1.56s|227%|\n||Sun JVM||Language||java.text||ICU4J||KeywordAnalyzer||ICU4J Improvement||\n|1.6.0_13 (64-bit)|English|3.04s|2.06s|1.07s|99%|\n|1.6.0_13 (64-bit)|French|3.58s|2.04s|1.14s|171%|\n|1.6.0_13 (64-bit)|German|3.35s|2.22s|1.14s|105%|\n|1.6.0_13 (64-bit)|Ukrainian|4.48s|2.94s|1.21s|89%|\n\nHere are the results after applying the synced-to-trunk patch:\n\n||Sun JVM||Language||java.text||ICU4J||KeywordAnalyzer||ICU4J Improvement||\n|1.5.0_15 (32-bit)|English|8.73s|4.61s|2.90s|241%|\n|1.5.0_15 (32-bit)|French|10.38s|4.87s|2.94s|285%|\n|1.5.0_15 (32-bit)|German|9.95s|4.94s|2.97s|254%|\n|1.5.0_15 (32-bit)|Ukrainian|13.37s|6.91s|2.90s|161%|\n||Sun JVM||Language||java.text||ICU4J||KeywordAnalyzer||ICU4J Improvement||\n|1.5.0_15 (64-bit)|English|5.78s|2.65s|1.57s|290%|\n|1.5.0_15 (64-bit)|French|6.74s|2.74s|1.64s|364%|\n|1.5.0_15 (64-bit)|German|6.69s|2.86s|1.66s|319%|\n|1.5.0_15 (64-bit)|Ukrainian|9.40s|4.18s|1.62s|204%|\n||Sun JVM||Language||java.text||ICU4J||KeywordAnalyzer||ICU4J Improvement||\n|1.6.0_13 (64-bit)|English|3.06s|1.82s|1.09s|170%|\n|1.6.0_13 (64-bit)|French|3.36s|1.88s|1.16s|206%|\n|1.6.0_13 (64-bit)|German|3.40s|1.95s|1.14s|179%|\n|1.6.0_13 (64-bit)|Ukrainian|4.33s|2.65s|1.21s|117%|\n\nAnd here is a comparison of the two:\n\n||Sun JVM||Language||java.text improvement||ICU4J improvement||\n|1.5.0_15 (32-bit)|English|5.1%|16.8%|\n|1.5.0_15 (32-bit)|French|3.8%|12.9%|\n|1.5.0_15 (32-bit)|German|3.9%|13.1%|\n|1.5.0_15 (32-bit)|Ukrainian|2.6%|6.2%|\n||Sun JVM||Language||java.text improvement||ICU4J improvement||\n|1.5.0_15 (64-bit)|English|6.6%|-2.2%|\n|1.5.0_15 (64-bit)|French|4.4%|7.7%|\n|1.5.0_15 (64-bit)|German|5.0%|-2.0%|\n|1.5.0_15 (64-bit)|Ukrainian|3.3%|-3.7%|\n||Sun JVM||Language||java.text improvement||ICU4J improvement||\n|1.6.0_13 (64-bit)|English|0.5%|36.1%|\n|1.6.0_13 (64-bit)|French|11.4%|25.5%|\n|1.6.0_13 (64-bit)|German|-1.7%|33.8%|\n|1.6.0_13 (64-bit)|Ukrainian|5.3%|20.6%|\n\nIt's not unequivocal, but there is a definite overall improvement in the patched version; I'd say these results justify applying the patch.\n\nI won't post them here, (mostly  because I didn't save them :) ) but I've run the same benchmark (with some variation in the number of iterations) and noticed that while there are always a couple of places where the unpatched version appears to do slightly better, the place at which this occurs is not consistent, and the cases where the patched version improves throughput always dominate.",
            "date": "2009-12-26T07:05:51.384+0000",
            "id": 4
        },
        {
            "author": "Steve Rowe",
            "body": "TopTFWikipediaWords.tar.bz2 contains a Maven2 project to parse unpacked Wikipedia dump files, create a Lucene index from the tokens produced by the contrib WikipediaTokenizer, iterate over the indexed tokens' term docs, accumulating term frequencies, store the results in a bounded priority queue, then output contrib benchmark LineDoc format, with the title field containing the collection term frequency, the date containing the date the file was generated, and the body containing the term text.\n\nThis code knows how to handle English, German, French, and Ukrainian, but could be extended for other languages.\n\nI used this project to generate the line-docs for the 4 languages' 100k most frequent terms, in the collation benchmark archive attachment on this issue.",
            "date": "2009-12-26T07:19:31.837+0000",
            "id": 5
        },
        {
            "author": "Steve Rowe",
            "body": "Fixed up version of {{collation.benchmark.tar.bz2}} that removes printing of progress from the {{collation/run-benchmark.sh}} script - otherwise the same as the previous version.",
            "date": "2009-12-26T07:27:05.575+0000",
            "id": 6
        },
        {
            "author": "Steve Rowe",
            "body": "bq. Do you think after this issue is resolved (whether it helps or doesn't help/won't fix either way) that we should open a separate issue to work on committing the benchmark so we have collation benchmarks for the future? Seems like it would be good to have in the future.\n\nYeah, I don't know quite how to do that - the custom code wrapping ICU/CollationKeyAnalyzer is necessary because the contrib benchmark alg format can only handle zero-argument analyzer constructors (or those that take Version arguments).  I think it would be useful to have a general-purpose alg syntax to handle this case without requiring custom code, and also, more generally, to allow for the construction of aribitrary analysis pipelines without requiring custom code (a la Solr schema).  The alg parsing code is a bit dense though - I think it could be converted to a JFlex-generated grammar to simplify this kind of syntax extension.\n\nCan you think of an alternate way to package this benchmark that fits with current practice?",
            "date": "2009-12-26T07:49:38.341+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nI think it would be useful to have a general-purpose alg syntax to handle this case without requiring custom code, and also, more generally, to allow for the construction of aribitrary analysis pipelines without requiring custom code (a la Solr schema). The alg parsing code is a bit dense though - I think it could be converted to a JFlex-generated grammar to simplify this kind of syntax extension.\n{quote}\n\nthat would be a great improvement to the benchmark package!\n\nalternatively in the short term, i wonder if we can we somehow abuse a system property for the locale, setting it with the alg file to change the locale?\n",
            "date": "2009-12-26T15:52:41.980+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "In my opinion in the committed patch and also before there is an error in handling the ByteBuffer/CharBuffer arrayOffset() value. It calculated the length using limit()-arrayOffset() which is wrong. The length available in the buffer is simple remaining() - this is how all other encoders/decoders in the JDK work (see src). array() and arrayOffset() simply give the offset of the wrapped array, but do not say anything about the length. The starting position to decode must be also customized and is arrayOffset()+position() - The code fails, if you wrap an array with offset!=0 and some length or if you pass an not 0-positioned buffer. \n\nFor correct usage of NIO Buffers see my latest improvements in the payload.IdentityEncoder (issue LUCENE-2157). Any code getting a buffer for encoding/decoding should assume, that it should read from the buffer starting at postion(), reading remaining() items.",
            "date": "2009-12-26T17:24:45.026+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, another thing is that currently the indexablebinarystringcode requires that the buffer have a backing array, which is optional.\n\none idea is that if we implement the code with byte[]/char[] as this patch does, perhaps we can make the buffer code (which is just helper methods around this) to remove this restriction\n\nafter all, now we have a benchmark so we can measure this and make sure it does not hurt performance for the charbuffer/bytebuffer case,  although with this patch these buffer methods are not used by any collation filters.",
            "date": "2009-12-26T17:47:03.886+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "Steve, I ran the benchmark, worked like a charm. here are my numbers.\nsome differences are: very slow computer, newer jvm versions, etc.\n\nUnpatched:\n\n||Sun JVM||Language||java.text||ICU4J||KeywordAnalyzer||ICU4J Improvement||\n|1.5.0_22 (32-bit)|English|31.61s|21.34s|10.66s|96%|\n|1.5.0_22 (32-bit)|French|34.11s|22.59s|11.12s|100%|\n|1.5.0_22 (32-bit)|German|34.59s|22.69s|10.84s|100%|\n|1.5.0_22 (32-bit)|Ukrainian|50.72s|30.19s|11.09s|107%|\n||Sun JVM||Language||java.text||ICU4J||KeywordAnalyzer||ICU4J Improvement||\n|1.6.0_16 (32-bit)|English|26.42s|19.98s|10.11s|65%|\n|1.6.0_16 (32-bit)|French|28.48s|20.14s|10.30s|85%|\n|1.6.0_16 (32-bit)|German|28.41s|21.38s|9.78s|61%|\n|1.6.0_16 (32-bit)|Ukrainian|40.55s|28.56s|9.70s|64%|\n\nPatched:\n\n||Sun JVM||Language||java.text||ICU4J||KeywordAnalyzer||ICU4J Improvement||\n|1.5.0_22 (32-bit)|English|29.59s|19.33s|10.56s|117%|\n|1.5.0_22 (32-bit)|French|32.38s|21.02s|10.88s|112%|\n|1.5.0_22 (32-bit)|German|32.92s|20.58s|10.66s|124%|\n|1.5.0_22 (32-bit)|Ukrainian|49.59s|27.05s|10.77s|138%|\n||Sun JVM||Language||java.text||ICU4J||KeywordAnalyzer||ICU4J Improvement||\n|1.6.0_16 (32-bit)|English|24.91s|18.28s|9.72s|77%|\n|1.6.0_16 (32-bit)|French|26.30s|19.12s|10.25s|81%|\n|1.6.0_16 (32-bit)|German|26.70s|19.23s|10.48s|85%|\n|1.6.0_16 (32-bit)|Ukrainian|38.48s|25.66s|9.80s|81%|\n\nComparison:\n\n||Sun JVM||Language||java.text improvement||ICU4J improvement||\n|1.5.0_22 (32-bit)|English|10.5%|22.2%|\n|1.5.0_22 (32-bit)|French|7.4%|13.6%|\n|1.5.0_22 (32-bit)|German|7.1%|19.9%|\n|1.5.0_22 (32-bit)|Ukrainian|2.5%|17.8%|\n||Sun JVM||Language||java.text improvement||ICU4J improvement||\n|1.6.0_16 (32-bit)|English|7.8%|15.8%|\n|1.6.0_16 (32-bit)|French|13.7%|11.4%|\n|1.6.0_16 (32-bit)|German|15.3%|33.0%|\n|1.6.0_16 (32-bit)|Ukrainian|8.0%|19.4%|\n",
            "date": "2009-12-27T05:30:59.527+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "bq. In my opinion in the committed patch and also before there is an error in handling the ByteBuffer/CharBuffer arrayOffset() value. It calculated the length using limit()-arrayOffset() which is wrong\n\nUwe, I think you might be wrong here. \nIn this class, the javadocs state the buffer must have a backing array.\nTherefore, limit - offset is a correct way to calculate length of the entire buffer, which is what this class has always used.\n\nbq. The length available in the buffer is simple remaining() - this is how all other encoders/decoders in the JDK work (see src).\n\nThis is not correct, this is the remaining relative length, as remaining() is based upon position: Returns the number of elements between the current position and the limit.\nUnlike typical jdk code, this code always ignored relative position and instead encodes/decodes entire buffers.\n\nWe should not change this under this issue... it is unrelated. I do not think we should change the semantics of this encode/decode to take any relative position into account.\n",
            "date": "2009-12-27T06:50:06.011+0000",
            "id": 12
        },
        {
            "author": "Robert Muir",
            "body": "updated patch:\n* deprecate the now unused CharBuffer/ByteBuffer methods.\n* add tests to test the char[]/byte[] based methods (keep the old NIO ones, but deprecate them)\n* change getEncodedLength to take byte[],int,int consistent with getDecodedLength. even though it only needs to know the number of bytes, in the future if we want to modify this encoding, we will not need to break the api.\n* javadocs fixes\n",
            "date": "2009-12-27T09:35:05.339+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. Therefore, limit - offset is a correct way to calculate length of the entire buffer, which is what this class has always used.\n\nThis is exactly wrong: The lengthz of the \"valid\" area inside the buffer is always limit()-position() [see javadocs of wrap()]. If arrayOffset()!=0, position() may still be 0 (because the arrayoffset is only used when wrapping byte arrays. The arrayOffset() defines the postion in the underlying array that defines the buffer's position()==0 (see javadocs).\n\nThis error is mostly no problem for dynamical allocated array buffers (as most users use), because arrayOffset() is always 0 (I have never seen a buffer with offset != 0)\n\nA problem also occurs if you wrap an array with wrap([], offset, length). the offset there is *not* the arrayOffset(), it is the position()! And length is after wrapping remaining(). The capacity() is the array length. Therefore it is really a bug. You deprecated it, that's good, but it should be fixed, it does not work correct.\n\nFor verifying, read the source code of ByteBuffer and HeapByteBuffer from src.zip in your jdk distrib and of course the javadocs.\n\nSo just to repeat, the correct code would be:\n- start postion in array=arrayOffset()+position()\n- length=remaining()\n\nThis is how the IdentityEncode for Payloads works. So deprecate *and* fix it.\nIf we really want to work with buffers, the correct way to implement this would be that the whole class implements CharsetEncoder.",
            "date": "2009-12-27T09:57:15.350+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "I found one place where the arrayOffset() bug occurs:\n- Create an ByteBuffer by wrapping another byte[] with offset and length.\n- use ByteBuffer.slice() to create an independednt buffer which position()==0 the current position of the prev ByteBuffer (which is the wrapped byte[]). This buffer will have an arrayOffset() of the original offset (which is position=0 in this buffer). The limit/cpacity of this buffer is the above length, which is remaining() on the original buffer.\n\nThe length formula is the definitely wrong, if would sometimes undeflow and give negative numbers, e.g. if the position() of the sliced buffer if e.g. 5 (so arrayoffset==5 in the slice) and the remaining bytes are e.g. 3 => length in the code before/after tha patch is -2.\n\nI will provide a testcase later that shows both bugs (position() and arrayOffset() misuse).",
            "date": "2009-12-27T12:36:41.623+0000",
            "id": 15
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, can we please do any nio bugfixes under another issue? \n\nIts not related to this one. This issue is about *not* using NIO since it only makes collation slower.",
            "date": "2009-12-27T16:08:47.897+0000",
            "id": 16
        },
        {
            "author": "Robert Muir",
            "body": "in this patch, preserve the javadoc at the beginning of this class which describes in detail the previous behavior of this class: exactly how the length is calculated from arrayOffset() and limit()\n\nthe only difference is i change the text from\n*This class's operations* are defined over CharBuffers and ByteBuffers ...\nto\n*Some methods in this class* are defined over CharBuffers and ByteBuffers ..\n\nimho, this existing nio behavior is documented and now deprecated and should not be changed, and definitely not changed in this issue.",
            "date": "2009-12-27T16:27:35.178+0000",
            "id": 17
        },
        {
            "author": "Robert Muir",
            "body": "Hi, this is a simple, straightforward performance improvement between 10% and 20% on average it looks, with no backwards problems.\n\nWhat Uwe describes as a problem is not introduced here, but exists already and is documented as such in the class javadocs, and preserved for backwards compatibility.\n\nSo, I think such backwards-breakage should be under a separate issue.\n\nI will commit this one in a few days if no one objects. ",
            "date": "2009-12-27T16:59:31.508+0000",
            "id": 18
        },
        {
            "author": "Uwe Schindler",
            "body": "+1\n\nAnd please add a note that the Char/ByteBuffer methods are completely broken. I have two test here that broke with negativeArraySize and so on. The person who wrote the orginbal CharBuffer code misunderstood the indeed complicated logic behind ByteBuffers.\n\nSo the only requirement from my side is to write in the deprecated message or the docs on top:\n\ninstead:\n{noformat}\n * Note that this class calls array() and arrayOffset()\n * on the CharBuffers and ByteBuffers it uses, so only wrapped arrays may be\n * used.  This class interprets the arrayOffset() and limit() values returned by\n * its input buffers as beginning and end+1 positions on the wrapped array,\n * respectively; similarly, on the output buffer, arrayOffset() is the first\n * position written to, and limit() is set to one past the final output array\n * position.\n{noformat}\n\nplease:\n{noformat}\n * The methods operating on CharBuffers and ByteBuffers are\n * deprecated in favour of methods that directly operate on byte[] and char[]\n * arrays. Note that this class calls array() and arrayOffset()\n * on the CharBuffers and ByteBuffers it uses, so only wrapped arrays may be\n * used. Furthermore, the deprecated methods are only working\n * correctly, if you simply use Buffer.wrap on an array without any offsets != 0\n * and not work on buffers that are returned by the slice() method.\n * Buffers wrapped with an offset completely ignore the offset and transform\n * limit() bytes. Buffer slices are completely broken and calculate\n * the length of the buffer sometimes as negative.\n{noformat}\n\nMaybe in better english.",
            "date": "2009-12-27T17:05:23.308+0000",
            "id": 19
        },
        {
            "author": "Robert Muir",
            "body": "Thanks Uwe, I will incorporate some of this wording into the javadocs and upload a new patch.\n\nlater, if we want we can discuss changing how the nio works, perhaps it is best to break the back compat, but i am just trying to avoid doing this within the same issue as a performance improvement that is trying to preserve all back compat :)\n",
            "date": "2009-12-27T17:14:35.714+0000",
            "id": 20
        },
        {
            "author": "Uwe Schindler",
            "body": "OK.\n\nI do not want to discuss further, the correct way for both directions according to NIO would be:\n\n{code}\nfinal int inputOffset = input.arrayOffset() + input.position();\nfinal int inputLength = input.remaining();\nfinal int outputOffset = output.arrayOffset() + output.position();\nfinal int outputLength = getEncodedLength(input.array(), inputOffset, inputLength);\noutput.limit(outputLength + output.position());\n//bogus: output.position(0);\n{code}\n\nThe same the other way round (only with getEncodedLength()).\n\nIf we want to fix this, put this into the new issue. But as the methods are deprecated, with the big warning we do not need to fix it.",
            "date": "2009-12-27T17:28:36.685+0000",
            "id": 21
        },
        {
            "author": "Robert Muir",
            "body": "updated patch with uwe's javadoc suggestions",
            "date": "2009-12-27T21:59:23.692+0000",
            "id": 22
        },
        {
            "author": "Steve Rowe",
            "body": "Hi Robert, I took a look at the patch and found a couple of minor issues:\n\n# The newly deprecated methods should get @Deprecated annotations (in addition to the @deprecated javadoc tags)\n# IntelliJ tells me that the \"final\" modifier on some of the public static methods is not cool - AFAICT, although static implies final, it may be useful to leave this anyway, since unlike the static modifier, the final modifier disallows hiding of the method by sublasses?  I dunno.  (Checking Lucene source, there are many \"static final\" methods, so maybe I should tell IntelliJ it's not a problem.)\n# Unlike getEncodedLength(byte[],int,int), getDecodedLength(char[],int,int) doesn't protect against overflow in the int multiplication by casting to long.\n",
            "date": "2009-12-28T03:40:21.998+0000",
            "id": 23
        },
        {
            "author": "Robert Muir",
            "body": "Steve, thanks for pointing these out.\n\n#3 concerns me somewhat, this is an existing problem in trunk (i guess only for enormous terms, though). Should we consider backporting a fix?\n\nI will upload a new patch, takes a couple tries for one this large on my internet connection...",
            "date": "2009-12-28T04:32:47.847+0000",
            "id": 24
        },
        {
            "author": "Robert Muir",
            "body": "updated patch, with Steven's additions.",
            "date": "2009-12-28T09:05:16.128+0000",
            "id": 25
        },
        {
            "author": "Robert Muir",
            "body": "for the record, i think in the future we should decide on some consistency with @Deprecated annotation in lucene. \n\nPersonally, I think it is useless :)",
            "date": "2009-12-28T09:09:52.685+0000",
            "id": 26
        },
        {
            "author": "Uwe Schindler",
            "body": "It is somehow useless, because you always have to add a @deprecated also to javadocs with an explanation. If we want to add it, wen can use eclipse to do it automatically with the cleanup function (like I added @Override).",
            "date": "2009-12-28T09:23:14.844+0000",
            "id": 27
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, I think if we are going to add it here, then we should add it everywhere separately in a later issue. \n\notherwise, we should not add it here, and remove it anywhere it is found.\n\nits 100% definitely useless if we do not consistently use it for all deprecations.",
            "date": "2009-12-28T09:26:29.633+0000",
            "id": 28
        },
        {
            "author": "Uwe Schindler",
            "body": "It is now used also in new commits (not only this issue). And flex uses it very often.",
            "date": "2009-12-28T09:29:36.317+0000",
            "id": 29
        },
        {
            "author": "Steve Rowe",
            "body": "{quote}\nbq. 3. Unlike getEncodedLength(byte[],int,int), getDecodedLength(char[],int,int) doesn't protect against overflow in the int multiplication by casting to long.\n\n#3 concerns me somewhat, this is an existing problem in trunk (i guess only for enormous terms, though). Should we consider backporting a fix?\n{quote}\n\nThe current form of this calculation will correctly handle original binary content of lengths up to 136MB.  IMHO the likelihood of encoding terms this enormous with IndexableBinaryStringTools is so miniscule that it's not worth the effort to backport.",
            "date": "2009-12-30T15:47:24.991+0000",
            "id": 30
        },
        {
            "author": "Robert Muir",
            "body": "Committed revision 895341.\n\nThanks Steven and Uwe",
            "date": "2010-01-03T09:23:19.937+0000",
            "id": 31
        }
    ],
    "component": "modules/other",
    "description": "We can remove the overhead of ByteBuffer and CharBuffer wrapping in CollationKeyFilter and ICUCollationKeyFilter.\n\nthis patch moves the logic in IndexableBinaryStringTools into char[],int,int and byte[],int,int based methods, with the previous Byte/CharBuffer methods delegating to these.\nPreviously, the Byte/CharBuffer methods required a backing array anyway.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2084",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "remove Byte/CharBuffer wrapping for collation key generation",
    "systemSpecification": true,
    "version": ""
}