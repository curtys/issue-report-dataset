{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "+1!",
            "date": "2010-10-09T14:48:17.248+0000",
            "id": 0
        },
        {
            "author": "Grant Ingersoll",
            "body": "What's with all of the test dependencies on IndexWriter.getReader() that seemingly don't have anything to do with NRT?  For instance, TestQueryParser.testPositionIncrements() or TestCachingSpanFilter?  \n\nIf we insist on those, then it seems we'll have to add an IndexReader.open(IndexWriter) method (plus, I suppose a couple of variations).  This concerns me b/c there are already more than enough variations on that method, but what's one more?",
            "date": "2010-10-09T15:14:04.842+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "bq. What's with all of the test dependencies on IndexWriter.getReader() that seemingly don't have anything to do with NRT? For instance, TestQueryParser.testPositionIncrements() or TestCachingSpanFilter?\n\nThis is just because those tests need a reader having just built the index... ie, as long as there's no other reason to .commit, getting the reader from the writer is perfectly fine.\n\nPlus this only increases test coverage of NRT.\n\nRandomIndexWriter's .getReader method now randomly picks to either get the reader from the writer, or, to .commit and then open a new reader.",
            "date": "2010-10-09T15:55:18.280+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "bq. we'll have to add an IndexReader.open(IndexWriter) method (plus, I suppose a couple of variations). \n\n+1\n\nI think IR.open(IW) makes sense.",
            "date": "2010-10-09T15:56:03.025+0000",
            "id": 3
        },
        {
            "author": "Grant Ingersoll",
            "body": "Patch that makes the change.  Adds open and reopen methods to IndexReader while making it package protected on IndexWriter.\n\nShould be good to go, but may need a few doc improvements.",
            "date": "2010-10-09T16:28:36.238+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "patch looks great Grant!\n\nI think we don't need the IR.open that takes a termInfosIndexDivisor... and we also don't need the IW.getReader that takes one too.  We had added these before adding IWC.set/getReaderTermsIndexDivisor...",
            "date": "2010-10-09T19:33:44.525+0000",
            "id": 5
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Should be good to go, but may need a few doc improvements.\n\nI think docs are fine though at least what I read on IR but I wonder why we need to synchronize on the iIR here since this call only forwards to the given writer? \n{code}\n public synchronized IndexReader reopen(IndexWriter writer) throws CorruptIndexException, IOException {\n   return writer.getReader();\n }\n{code}\n\nI would guess calling writer.getReader() in there should not block other actions like concurrent searches on this reader since a NRT getRearder call can take its time. If at all we should sync on the writer though (which is already done inside IW) or do I miss something?",
            "date": "2010-10-10T05:01:05.358+0000",
            "id": 6
        },
        {
            "author": "Grant Ingersoll",
            "body": "Simon, I think you are right, as the necessary sync blocks are in the underlying getReader() call on IW.  I just copied the signatures.  I will put up a new patch.",
            "date": "2010-10-10T11:31:42.974+0000",
            "id": 7
        },
        {
            "author": "Grant Ingersoll",
            "body": "Ready to go.",
            "date": "2010-10-10T12:01:26.821+0000",
            "id": 8
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Ready to go.\n\n+1 looks good to me",
            "date": "2010-10-10T16:55:24.727+0000",
            "id": 9
        },
        {
            "author": "Grant Ingersoll",
            "body": "Committed revision 1006280.",
            "date": "2010-10-11T00:17:29.689+0000",
            "id": 10
        },
        {
            "author": "Earwin Burrfoot",
            "body": "What's up with intentionally twisted APIs?\n\nThe method you introduced makes it perfectly fine to open a reader on some directory, and then try reopening it on IW, and then on another IW. Later you're going to add a heap of guards on this method, and runtime exceptions if user does some pointless reopen sequence?\n\nWhat was wrong with old parameterless reopen() call?\nIf you've got a reader over Directory, it reopens looking for new segments there, if you got a reader from IW, it reopens by asking said IW for the segments.",
            "date": "2010-10-13T13:58:29.918+0000",
            "id": 11
        },
        {
            "author": "Yonik Seeley",
            "body": "I think I agree Earwin... it's not clear what functionality was added with this patch, just a vague notion of consolidating semantics.  Adding more ways to do the same thing in this case just seems to complicate the API.",
            "date": "2010-10-13T14:27:41.234+0000",
            "id": 12
        },
        {
            "author": "Grant Ingersoll",
            "body": "bq. The method you introduced makes it perfectly fine to open a reader on some directory, and then try reopening it on IW, and then on another IW. Later you're going to add a heap of guards on this method, and runtime exceptions if user does some pointless reopen sequence?\n\nI don't see that.  All we did was move the call from IW to IR where the reopen method was already located.  Nothing is preventing a user from doing exactly what you described above with the old way either.\n\nbq. What was wrong with old parameterless reopen() call?\n\nNothing.  That's why it is still there.  This is about user comprehension and usability of the API, not about some functionality.  Having trained hundreds of people on this, it's confusing to people (just like it's confusing that a \"Reader\" can do deletes).  Why would a Writer object give me a Reader?  Why would a Reader do write functionality?  \n\nbq. if you got a reader from IW, it reopens by asking said IW for the segments.\n\nYep, and if you (re)open a Reader with an IW you get a Reader based on those segments.\n\nbq. Adding more ways to do the same thing in this case just seems to complicate the API. \n\nWe didn't add any more ways to do this.  The exact same number of ways exist now.  All we've done is kept Reader semantics on the Reader and Writer semantics on the Writer.  ",
            "date": "2010-10-13T14:36:54.294+0000",
            "id": 13
        },
        {
            "author": "Grant Ingersoll",
            "body": "I guess, however, to assuage you guys, perhaps we could drop the reopen(IW) all together and just have IR.open(IW).  That satisfies my semantic/explanation need.  Although, I would suspect that over time, reopen(IW) could still make sense.",
            "date": "2010-10-13T14:38:57.796+0000",
            "id": 14
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Okay, let's go at it with an example.\n\n{code}\nDirectory d = Directory.open(\"/path/to/somewhere\"); // Nice\nIndexReader r = IndexReader.open(d); // Nice\n\nDirectory d2 = new RAMDirectory(); // Okay\nIndexWriter w = new IndexWriter(d2); // Sure\n\nr = r.reopen(w) // WTF?!\n{code}\n\nParameterless reopen does not allow you to \"rebase\" IndexReader, an overload you introduced with this patch - allows this.\nI'm somewhat okay with IR.open(iw). Despite being questionable it is at least not frikkin' broken like ir.reopen(iw).",
            "date": "2010-10-13T15:00:18.351+0000",
            "id": 15
        },
        {
            "author": "Grant Ingersoll",
            "body": "Again, how is that any different?  You are getting back a new Reader and assigning it to the same variable name.  \n{code}\nDirectory d = Directory.open(\"/path/to/somewhere\"); // Nice\nIndexReader r = IndexReader.open(d); // Nice\n\nDirectory d2 = new RAMDirectory(); // Okay\nIndexWriter w = new IndexWriter(d2); // Sure\n\nr = w.getReader() // WTF Indeed!\n{code}\n\n",
            "date": "2010-10-13T15:03:28.543+0000",
            "id": 16
        },
        {
            "author": "Grant Ingersoll",
            "body": "The semantics of reopen is you get a new Reader.  If an optimize was done between open and reopen of the IR, you are getting an all new Reader.  Should that get rid of reopen, too?\n\nAs I said above, though, I'm fine w/ dropping the reopen one and just keeping open(IW).  I care more about the fact that it is non-intuitive to ask a Writer for a Reader and this silly notion we have right now that if you want \"fast reopen\" you should reopen off of the IR, but if you want \"really fast reopen\" you should open off the Writer.  In fact, maybe we should just drop reopen all together and simply have all points go through the open() method, by adding:  open(IndexReader)\n\n",
            "date": "2010-10-13T15:09:17.018+0000",
            "id": 17
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. As I said above, though, I'm fine w/ dropping the reopen one and just keeping open(IW). \nLet's do this.\n\nIn my ideal world the semantics of each method is encoded in its name.\nSo 'open' - always gets you a brand new reader on a given target, while 'reopen' updates the one you have.\nDue to snapshot nature of readers, you don't do update inplace and get a new instance instead, but that doesn't make these two methods' semantics the same.",
            "date": "2010-10-13T15:19:41.742+0000",
            "id": 18
        },
        {
            "author": "Grant Ingersoll",
            "body": "bq. So 'open' - always gets you a brand new reader on a given target, while 'reopen' updates the one you have.\n\nIt doesn't update the one you have.  You do get a new instance and you have to properly close the old one (see http://lucene.apache.org/java/3_0_2/api/core/org/apache/lucene/index/IndexReader.html#reopen%28%29).  It is not just \"updating\" the internal memory of the old one, it is instead transferring that internal memory to a new instance and combining it with any changed segments.  To me, that's what the IW case feels like too.\n\n",
            "date": "2010-10-13T15:29:56.534+0000",
            "id": 19
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. Again, how is that any different? You are getting back a new Reader and assigning it to the same variable name. \n\nYou could defend BitSet.doSomethingFunky(IndexReader reader, IndexWriter writer) with that same logic ;-)\nIt's not about functionality (this patch doesn't add any functionality), it's about API.\n\nbq. It doesn't update the one you have.\n\nEarwin knows that - he even said \"Due to snapshot nature of readers, you don't do update inplace and get a new instance instead\".\n\nI also agree with the statement: \"So 'open' - always gets you a brand new reader on a given target, while 'reopen' updates the one you have.\"  It's a logical update of the reader, hence the added reopen() method makes no sense.",
            "date": "2010-10-13T16:12:14.645+0000",
            "id": 20
        },
        {
            "author": "Michael McCandless",
            "body": "Reopen until we settle the API question...",
            "date": "2010-10-28T18:59:32.315+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "I also think we shouldn't add a reopen(IW) here, since you can just IR.open(IW) and then call its .reopen().  It's confusing to IR.open(Dir) and then later IR.reopen(IW) on it.",
            "date": "2010-11-19T13:38:47.448+0000",
            "id": 22
        },
        {
            "author": "Grant Ingersoll",
            "body": "I don't have a problem with it, but I don't see how it is any more confusing that reopening on a IndexCommit.  In my mind, the thing you are reopening is a set of segments.  Unfortunately, we don't have a access in a clean way to get  the IndexWriter's segment, so we pass in the IW.  The whole point of IR.reopen is you are getting a new reader on an index.  Presumably, the IW is on the same Directory, just like presumably the CommitPoint is on the same Directory. ",
            "date": "2010-11-24T15:03:21.631+0000",
            "id": 23
        },
        {
            "author": "Michael McCandless",
            "body": "OK, I agree -- the analogy to reopen on an IndexCommit makes sense: you are simply reopening the reader on a different set of segments.  So IW is just being used (abused) as a \"proxy\" for the \"current live segments on the index\".",
            "date": "2010-11-24T16:46:43.988+0000",
            "id": 24
        },
        {
            "author": "Earwin Burrfoot",
            "body": "You're still okay with an API that allows you to reopen IRs on different directories?\nLet us introduce then, instead of bothering with APIs, a single class with method 'void doStuff(Object... args)' that, inside, has an elaborate logic validating and interpreting said arguments and then doing a fat switch to execute corresponding computations.\n\nI think reopen should have no parameters, and IR.reopen(IC) moved elsewhere.\n\nI'd personally like to see a special subclass of DIR that is returned from IW.getReader(), that knows about specifics of being opened over an active writer.\nSomething along the lines of - https://gist.github.com/d5a197a001c24fccb1b5\nThis also removes said specifics in form of of stupid if-checks and unnecessary fields from actual DIR. Modes should be done with subclasses, not switches, dammit! :)\n\nIf we allow reopen to switch readers between modes, we're introducing yet more checking and switching around.\nAlso we'll get irreversible circular dependency between readers and writers, which is also a sign of things going wrong.",
            "date": "2010-11-24T23:29:13.648+0000",
            "id": 25
        },
        {
            "author": "Michael McCandless",
            "body": "bq. You're still okay with an API that allows you to reopen IRs on different directories?\n\nWell, that's no good - we can catch this and throw an exc?\n\nbq. I think reopen should have no parameters, and IR.reopen(IC) moved elsewhere.\n\nBut where would you move IR.reopen(IC)?\n\nbq. I'd personally like to see a special subclass of DIR that is returned from IW.getReader(), that knows about specifics of being opened over an active writer.\n\nThat sounds great!\n\n{quote}\nIf we allow reopen to switch readers between modes, we're introducing yet more checking and switching around.\nAlso we'll get irreversible circular dependency between readers and writers, which is also a sign of things going wrong.\n{quote}\n\nReally, there are two separate \"things\" open/reopen needs:\n\n  # The SegmentInfos -- either by finding the latest & greatest in the\n    Directory, latest & greatest via IW, or explicitly via an\n    IndexCommit.\n\n  # A prior pool of readers so that anything needing a reader (IW\n    doing a merge, IW applying deletes, app opening new readers, etc.)\n    can re-use any already open sub readers.\n\nMaybe we can split these out.\n\nEG we've wanted for a while now to factor out the reader pool hidden\ninside IW.  If we did this, and then allowed optionally passing a pool\nto IR.open, I think we could do away with IR.reopen entirely?  We'd\nhave variants of IR.open taking IW, Dir, IndexCommit, to say where the\nSegmentInfos come from, and then optionally also taking the explicit\nreader pool.\n\n",
            "date": "2010-11-25T14:13:36.955+0000",
            "id": 26
        },
        {
            "author": "Eks Dev",
            "body": "strictly speaking not really this issue, but somehow fits into discussion about  IR.reopen() semantics.\n\nWhat would be the best way to support the following case? (Imo, very often needed. )\n\n\nDirectory d = FSDirectory.open(\"/path/to/somewhere\"); // Nice\nd_ram = RAMDirectory(d); \nr_ram = IndexReader.open(d_ram);  \nr_ram.reload(); //Here we want to reload from the  FSDirecotory?\n\nPoint being, reload need not only IR/IW semantics consideration, but Directory as well.\n\nDoes this make sense?\nA solution that looks doable would be to have \"DiskBoundRAMDirectory extends RAMDirectory\", that would remain read-only and keep a reference to FSDirectory (or whatewer Directory). \nWhat is missing is a \"signal\" from IR.reload() to RAMdirectory to slurp fresh information from FSDirecory? \n\n\n \n",
            "date": "2010-11-25T14:44:12.637+0000",
            "id": 27
        },
        {
            "author": "Earwin Burrfoot",
            "body": "{quote}\nbq. You're still okay with an API that allows you to reopen IRs on different directories?\nWell, that's no good - we can catch this and throw an exc?\n{quote}\nI don't understand why should we bother with checking and throwing exceptions, when we can prevent such things from compiling at all.\nBy using an API, that doesn't support reopening on anything different from original source.\n\nbq. Really, there are two separate \"things\" open/reopen needs:\nThat's not true. Take a look at my WriterBackedReader above (or DirectoryReader in trunk). It requires writer at least to call deleteUnusedFiles(), nrtIsCurrent().\nSo you can't easily reopen between Directory-backed and Writer-backed readers without much switching and checking.\n\nbq. r_ram.reload(); //Here we want to reload from the FSDirecotory?\nUse MMapDirectory? It's only a bit slower for searches, while not raping your GC on big indexes.\nAlso check this out - https://gist.github.com/715617 , it is a RAMDirectory offspring that wraps any other given directory and basically does what you want (if I guessed right).\nIt doesn't use blocking for files, so file size limit is 2Gb, but this can be easily fixed. On the up side - it reads file into memory only after the size is known (unlike RAMDir), which allows you to use huge precisely-sized blocks, lessening GC pressure.\nI used it for a long time, but then my indexes grew, heaps followed, VM exploded and I switched to MMapDirectory (with minor patches).\n\nbq. What is missing is a \"signal\" from IR.reload() to RAMdirectory to slurp fresh information from FSDirecory? \nThere is zero need for any such signal. If a reader requests non-existing file from RAMDirectory, it should check backing dir before throwing exception. If backing dir does have the file - it is loaded and opened.\nWhy do you people love complicating things that much? :)",
            "date": "2010-11-25T16:58:39.420+0000",
            "id": 28
        },
        {
            "author": "Michael McCandless",
            "body": "We should backport this to 3.1?",
            "date": "2011-01-20T16:58:33.793+0000",
            "id": 29
        },
        {
            "author": "Michael McCandless",
            "body": "I'll backport...",
            "date": "2011-01-20T17:42:23.021+0000",
            "id": 30
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:49:58.269+0000",
            "id": 31
        }
    ],
    "component": "",
    "description": "We should consolidate the IndexWriter.getReader and the IndexReader.reopen semantics, since most people are already using the IR.reopen() method, we should simply add::\n{code}\nIR.reopen(IndexWriter)\n{code}\n\nInitially, it could just call the IW.getReader(), but it probably should switch to just using package private methods for sharing the internals",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2691",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Consolidate Near Real Time and Reopen API semantics",
    "systemSpecification": true,
    "version": ""
}