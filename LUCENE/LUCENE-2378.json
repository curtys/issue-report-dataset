{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Attached rather big patch, cutting over all pre-flex API usage to flex, and removing the back compat layer that emulates pre-flex API on a flex index.\n\n",
            "date": "2010-06-10T10:58:13.934+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "I plan to commit this one soon!",
            "date": "2010-06-14T20:47:09.775+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "I'm getting an error compiling after this patch (missing svn add?)\n    [javac] C:\\code\\lusolr\\lucene\\contrib\\queries\\src\\java\\org\\apache\\lucene\\search\\regex\\RegexQuery.java:64: cannot find symbol\n    [javac] symbol  : class RegexTermsEnum\n    [javac] location: class org.apache.lucene.search.regex.RegexQuery\n    [javac]     return new RegexTermsEnum(reader, term, regexImpl);\n",
            "date": "2010-06-15T16:58:53.107+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Woops sorry -- new patch attached.",
            "date": "2010-06-15T17:01:27.336+0000",
            "id": 3
        },
        {
            "author": "Yonik Seeley",
            "body": "Looking good - an amazing amount of work!\n\nHere's some changes to FileFloatSource to make it a bit more byte oriented rather than string oriented.\n",
            "date": "2010-06-16T01:18:34.644+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Yonik -- your changes to FileFloatSource look good!  I'll merge w/ my patch, and commit soon...",
            "date": "2010-06-16T09:41:36.320+0000",
            "id": 5
        },
        {
            "author": "Yonik Seeley",
            "body": "Here's the same sort of patch to UnInvertedField - it avoids the String based conversion and thus will work better if any terms are true binary.\n\nI think we're good to commit!\nI will still do some performance tests - but that shouldn't hold this up IMO.",
            "date": "2010-06-16T14:30:02.471+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Great!  I'll commit now...",
            "date": "2010-06-16T14:58:10.109+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "Woops -- see LUCENE-2380 for the commit (I typed the wrong issue).",
            "date": "2010-06-16T15:22:01.705+0000",
            "id": 8
        },
        {
            "author": "Yonik Seeley",
            "body": "OK, I tested UnInvertedField faceting on branch_3x vs trunk:\n\nphase1 building the UnInvertedField (involves iterating all terms and docs for a field): trunk is 31% slower\ncomplete facet request, including returning top 1000 facets (exercises NumberedTermsEnum - seeking + iterating over terms): trunk is 10% slower.",
            "date": "2010-06-16T19:01:49.537+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "Reopening to make sure we get to the bottom of the perf loss...",
            "date": "2010-06-16T19:31:51.629+0000",
            "id": 10
        },
        {
            "author": "Yonik Seeley",
            "body": "Attaching TestEnumPerf.java which tests the performance of iterating over all of the terms in an index.\n\nindexing in trunk is ~19% faster\nenumerating in trunk is ~9% slower\n\nJava6 -server\nParams: 1000000 999 100000 100\nWhich is 1M docs, maxBufferedDocs=999, unique terms=100,000\n(this results in 21 segments)\n\nI haven't tried enumerating docs yet... that's up next.\n\n",
            "date": "2010-06-16T21:47:33.919+0000",
            "id": 11
        },
        {
            "author": "Yonik Seeley",
            "body": "OK, here's an updated TestEnumPerf.java that tests iteration over docs.  It's obviously the culprit.\nArgs: 1000000 999 100000 10  (same as before, just fewer iterations).\n\ntrunk=11146ms, branch_3x=4271ms.  trunk is 160% slower!",
            "date": "2010-06-16T22:22:53.534+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Yonik, I'll track this down...",
            "date": "2010-06-17T09:10:01.230+0000",
            "id": 13
        },
        {
            "author": "Yonik Seeley",
            "body": "A little more info on this.  I originally thought that it was going to be a MultiFields issue only... but I stuck in an optimize and the performance on 3x is still much better.\n\nSingle segment performance:\ntrunk bulk read: 1823ms\ntrunk nextDoc: 1473ms\nbranch_3x bulk read:647ms",
            "date": "2010-06-17T17:50:33.624+0000",
            "id": 14
        },
        {
            "author": "Yonik Seeley",
            "body": "Here's an updated test that iterates over the docs (the biggest slowdown) with the optimize stuck in (to test single-segment performance).",
            "date": "2010-06-17T18:01:49.103+0000",
            "id": 15
        },
        {
            "author": "Yonik Seeley",
            "body": "Here's a small improvement that lets one get BytesRef objects from PagedBytes as they are written.  UnInvertedField now uses this to avoid the allocation of a new byte[] per BytesRef.",
            "date": "2010-06-17T21:55:16.197+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "That looks good Yonik!  Can you commit?",
            "date": "2010-06-17T22:07:33.316+0000",
            "id": 17
        },
        {
            "author": "Michael McCandless",
            "body": "I found the source of the massive slowdown when enum'ing docs -- attached patch fixes it.  I messed up the logic on whether the incoming DocsEnum can be reused, thus causing a new DocsEnum to be created for each sub-segment on each .docs() call!\n\nWith this I'm seeing trunk (6432 msec) slightly faster than 3x (6659 msec), for term + docs enum.\n\nBut terms enum alone is still slightly slower (trunk is 5312; 3x is 5019 msec).",
            "date": "2010-06-17T22:11:52.014+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "Same patch as before, but also fixed reuse of DocsAndPositionsEnum.  I'll commit shortly.\n\nAlso: I tested temporarily cutting over BytesRef to unicode sort order, and with that change, the MultiTermsEnum on trunk is faster (5120 msec) than 3x (5337 msec).\n\nSo... I think we are done here (at least on these perf issues), and once we do the cutover to unicode term sort order (LUCENE-2426) we'll be faster than 3x.",
            "date": "2010-06-17T22:33:17.183+0000",
            "id": 19
        },
        {
            "author": "Yonik Seeley",
            "body": "Yay, I've confirmed that this fixes both the test program, and the faceting first-time-uninvert!\n\nNow I'm seeing something else though... the actual facet requests themselves are slower now than they were w/o the fix.\n~35% slower than branch_3x now.  This probably involves the NumberedTermsEnum class (looking up a term by number over a mult-segment index).  I'll see if I can reproduce with a lower level test.",
            "date": "2010-06-18T00:14:10.944+0000",
            "id": 20
        },
        {
            "author": "Yonik Seeley",
            "body": "Good news (partially) is that I can't reproduce the slowdown with low level tests... throwing in seeks or seeks + nexts all result in trunk being slightly faster.",
            "date": "2010-06-18T00:58:23.358+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Yay, I've confirmed that this fixes both the test program, and the faceting first-time-uninvert!\n\nGreat!\n\n{quote}\nNow I'm seeing something else though... the actual facet requests themselves are slower now than they were w/o the fix.\n~35% slower than branch_3x now. This probably involves the NumberedTermsEnum class (looking up a term by number over a mult-segment index). I'll see if I can reproduce with a lower level test.\n{quote}\n\nUgh.\n\nbq. Good news (partially) is that I can't reproduce the slowdown with low level tests... throwing in seeks or seeks + nexts all result in trunk being slightly faster.\n\nHmm, that's partially good... but then where is the 35% slowdown?",
            "date": "2010-06-18T09:36:30.330+0000",
            "id": 22
        },
        {
            "author": "Yonik Seeley",
            "body": "Got it... It was a pre-flex index! Rebuilding the index yields speedups across the board!\n\nfirst time uninvert (phase1): trunk is 23% faster than branch_3x\nfull facet requests: trunk is 15% faster ",
            "date": "2010-06-18T14:50:14.660+0000",
            "id": 23
        }
    ],
    "component": "core/index",
    "description": "A number of places still use the pre-flex APIs.\n\nThis is actually healthy, since it gives us ongoing testing of the back compat emulation layer.\n\nBut we should at some point cut them all over to flex.  Latest we can do this is 4.0, but I'm not sure we should do them all for 3.1... still marking this as 3.1 to \"remind us\" :)",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2378",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Cutover remaining usage of pre-flex APIs",
    "systemSpecification": true,
    "version": ""
}