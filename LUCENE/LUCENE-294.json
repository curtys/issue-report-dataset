{
    "comments": [
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=13147)\nDisjunctionScorer.java\n",
            "date": "2004-10-20T01:14:39.000+0000",
            "id": 0
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=13148)\nDisjunctionSumScorer.java\n",
            "date": "2004-10-20T01:15:26.000+0000",
            "id": 1
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=13149)\nDisjunctionSumCoordScorer.java\n",
            "date": "2004-10-20T01:16:47.000+0000",
            "id": 2
        },
        {
            "author": "cutting@apache.org",
            "body": "This looks great to me!\n\nHave you had a chance to benchmark it against BooleanScorer?  I'd expect it to\nbe faster with rare terms and slower with common terms.  Differences might not\nbe significant on small indexes.\n\nAlso, have you thought about keeping track of which scorers matched, so that\nthis could implement boolean logic?  For example, if we kept an int or long\nbitmask with bits for prohibited and/or required sub-scorers, then this could\nfully replace BooleanQuery.",
            "date": "2004-10-27T03:36:50.000+0000",
            "id": 3
        },
        {
            "author": "Paul Elschot",
            "body": "I have not yet tested it on bigger indexes, sorry. \nThe thing is under development, currently it prepares \nan array of scores for the abstract combineScores() method \nwith a Float.NaN for subscorers not at the current document. \n \nI don't see performance bottlenecks in the Java code, \nbut I know I can't predict a profiler... \n \nI expect it to be somewhat slower than BooleanScorer. \nThe main reason to implement it is that I need skipTo() \nto allow very sparse filters. So sparse that the advantage \nof skipTo() outweighs the disadvantage of the PriorityQueue. \n \nFor required subscorers Lucene's ConjunctionScorer does well. \nFor prohibited subscorers I have a scorer for required/excluded, \nwhich follows the required scorer and does skipTo() on the \nexcluded scorer. \nFor optional subscorers I'm using a required/optional scorer, \nwhich delays skipTo() on the optional subscorers until score() \nis called. \n \nThese four scorers (Conjunction, Disjunction, ReqExcl, ReqOpt) can \nimplement all boolean queries. They were designed for boolean \noperators (AND, OR, NOT and an operator for required/optional) \nso they don't fit directly on queries from Lucene's parser \nwhere each clause can be required/prohibited/optional. \n \nI wouldn't mind contributing the required/optional scorer and the  \nrequired/excluded scorer as well. \n ",
            "date": "2004-10-27T05:00:01.000+0000",
            "id": 4
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=13358)\nA replacement for BooleanQuery using ao DisjunctionScorer.\n",
            "date": "2004-11-09T04:45:07.000+0000",
            "id": 5
        },
        {
            "author": "Paul Elschot",
            "body": "The tgz attachment can be extracted in the top directory of \na current lucene working copy. This will add new files and \noverwrite some existing ones, see below. \n \nI tried this new code on an index of around 1.4 MB, \nand saw no difference in performance. In case someone else \ncould report performance on something of more decent size \nI'd be happy to know how that went. \n \n \nNew code, all under Apache Licence Version 2: \n \nTest for BooleanScorer2, with some example code \noverriding QueryParser to construct queries with \nBooleanQuery2: \nsrc/test/org/apache/lucene/search/TestBoolean2.java \n \nAs BooleanQuery, but directly using BooleanScorer2: \nsrc/java/org/apache/lucene/search/BooleanQuery2.java \n \nReplacement for BooleanScorer, using the scorers below: \nsrc/java/org/apache/lucene/search/BooleanScorer2.java \n \nCounterpart of ConjunctionScorer, allowing a minimal nr of matchers: \nsrc/java/org/apache/lucene/search/DisjunctionSumScorer.java \n \nHelper for case of only prohibited subscorers: \nsrc/java/org/apache/lucene/search/NonMatchingScorer.java \n \nExtension to Scorer to allow coordination factor over \nmultiple levels of subscorers: \nsrc/java/org/apache/lucene/search/NrMatchersScorer.java \n \nFor required and prohibited subscorers: \nsrc/java/org/apache/lucene/search/ReqExclScorer.java \n \nFor required and optional subscorers: \nsrc/java/org/apache/lucene/search/ReqOptSumScorer.java \n \nSome \"Expert:\" annotations may still be needed in the javadocs. \n \n \nChanges to existing code, also APL 2: \n \nRedirect BooleanQuery to BooleanScorer2 for testing \nwith current Lucene tests. The tests pass with \nthis modification. Not recommended for other purposes: \nsrc/java/org/apache/lucene/search/BooleanQuery.java \n \nAdded some helping code for tests by TestBoolean2: \nsrc/test/org/apache/lucene/search/CheckHits.java \n \nConjunctionScorer: explicit imports, extend NrMatchersScorer: \nsrc/java/org/apache/lucene/search/ConjunctionScorer.java \n \n \nRegards, \nPaul Elschot \n ",
            "date": "2004-11-09T04:58:28.000+0000",
            "id": 6
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=13739)\nThe replacement for BooleanScorer built into BooleanQuery\n\nAdding BooleanScorer2 to Lucene, 12 Dec 2004.\n\nThe previous version of 8 Nov 2004 also contained BooleanQuery2,\nthis is now merged into BooleanQuery.\n\n\nNew code, all under Apache Licence Version2, mostly unchanged\nfrom 8 November 2004:\n\nNote: some \"Expert:\" annotations may still be needed in the javadocs.\n\nTest for BooleanScorer, with some example code\nusing both 1.4 scorer and new BooleanScorer2:\nsrc/test/org/apache/lucene/search/TestBoolean2.java\n\nAlternative for BooleanScorer, using the scorers below:\nsrc/java/org/apache/lucene/search/BooleanScorer2.java\n\nCounterpart of ConjunctionScorer, allowing a minimal nr of matchers:\nsrc/java/org/apache/lucene/search/DisjunctionSumScorer.java\n\nHelper for case of only prohibited subscorers:\nsrc/java/org/apache/lucene/search/NonMatchingScorer.java\n\nExtension to Scorer to allow coordination factor over\nmultiple levels of subscorers, this could be merged\ninto the current Scorer with a default of 1 for nrMatchers():\nsrc/java/org/apache/lucene/search/NrMatchersScorer.java\n\nFor required and prohibited subscorers:\nsrc/java/org/apache/lucene/search/ReqExclScorer.java\n\nFor required and optional subscorers:\nsrc/java/org/apache/lucene/search/ReqOptSumScorer.java\n\n\nChanges to existing code, all three changed from\nthe previous version of 8 November 2004: \n\nRedirect BooleanQuery to BooleanScorer2 under\ncontrol of static methods setUseScorer14 and getUseScorer14,\ndefault using BooleanScorer2, as requested by Doug:\nsrc/java/org/apache/lucene/search/BooleanQuery.java\n\nAdded some helping code for tests by TestBoolean2,\nThis uses the setUseScorer14 method to test both versions:\nsrc/test/org/apache/lucene/search/CheckHits.java\n\nConjunctionScorer: explicit imports, extend NrMatchersScorer:\nsrc/java/org/apache/lucene/search/ConjunctionScorer.java\n",
            "date": "2004-12-13T03:29:03.000+0000",
            "id": 7
        },
        {
            "author": "Paul Elschot",
            "body": "Correction to a small mistake: \nThe setUseScorer14 method is used in TestBoolean2.java \nand not in CheckHits.java. ",
            "date": "2004-12-13T03:32:40.000+0000",
            "id": 8
        },
        {
            "author": "Christoph Goller",
            "body": "Hi Paul,\n\nI finally found time to look into your code in detail and I think\nit's really excellent work. Before committing it, I have a few questions.\n\n*) In your source files you have included a copyright statement referring\nto yourself. Of course you include the Apache License. However, I haven't seen\nother source files in Lucene with similar copyright statements. I don't know the\nlegal consequences of that. Maybe someone else on the list knows more. The\nsimplest solution would be to substitute \"Copyright 2004 Paul Elschot\" with\n\"Copyright 2004 The Apache Software Foundation\". Would you agree?\n\n*) BooleanScorer2 extends NrMatchersScorer and nrMatchers() always returns 1. \nIs there a reason for that? I think it should either only extend Scorer or\ndeliver the correct values. I opt for extending Scorer only.\n\n*) All NrMatchersScorers except for BooleanScorer2 and ConjunctionScorer don't\nuse a similarity implementation. They compute raw scores and nrMatches.\nConjunctionScorer is a hybrid. It uses coord-factors and is is used as\nNrMatchersScorer. This could lead to incorrect results with Similarity\nimplementations other than DefaultSimilarity. A ConjunctionScorer used as\nNrMathesScorer should compute raw scores, if used as standard Scorer it \nshould use coord-factors. How can we achieve this in an elegant way?\n\nChristoph",
            "date": "2005-01-20T04:55:40.000+0000",
            "id": 9
        },
        {
            "author": "cutting@apache.org",
            "body": "Yes, copyright must be assigned to the Apache Software Foundation.\n\nIs that okay, Paul?",
            "date": "2005-01-20T05:55:37.000+0000",
            "id": 10
        },
        {
            "author": "Paul Elschot",
            "body": "(In reply to comment #10) \n> Hi Paul, \n>  \n> I finally found time to look into your code in detail and I think \n> it's really excellent work. Before committing it, I have a few questions. \n>  \n> *) In your source files you have included a copyright statement referring \n> to yourself. Of course you include the Apache License. However, I haven't \nseen \n> other source files in Lucene with similar copyright statements. I don't know \nthe \n> legal consequences of that. Maybe someone else on the list knows more. The \n> simplest solution would be to substitute \"Copyright 2004 Paul Elschot\" with \n> \"Copyright 2004 The Apache Software Foundation\". Would you agree? \n \nThe intention is to allow the Apache Software Foundation to take over the \ncopyright in case they want to.  \nAs I understand the Apache Licence, taking over the copyright is \nallowed by the licence. So I used my own copyright, and it could be changed \nwhen taken over into an Apache project. \nHowever, the relevant documentation \nhttp://apache.org/dev/apply-license.html \nsais that contributed files should have the copyright \nassigned to the Apache Software Foundation. \nI'll try and do that the next time. \nCould you change the copyright notices accordingly this time? \n \n> *) BooleanScorer2 extends NrMatchersScorer and nrMatchers() always returns 1.  \n> Is there a reason for that? I think it should either only extend Scorer or \n> deliver the correct values. I opt for extending Scorer only. \n \nThe reason is that a BooleanQuery can be scored by a few cooperating \n(nested) scorers, and that it should still be possible to compute the \ncoordination factor from the number of matching scorers of the originally \nadded clauses. \n \nBy default nrMatchers() returns 1, and this is for the case when the scorer is \ngiven to the BooleanScorer2 as a scorer of an added clause. \n(At the moment these are wrapped in a NrMatchersScorer. (*)) \nThe cooperating scorers implementing the boolean behaviour \nadd these numbers for their subscorers to make it work in the same way \nas scoring a single BooleanQuery. \nThe idea is is to either sum nrMatchers(), or to use nrMatchers() \nfor the coordination factor in the score and return 1 for nrMatchers(). \nIt might be worthwhile to add something like this in the javadocs. \n  \n> *) All NrMatchersScorers except for BooleanScorer2 and ConjunctionScorer \ndon't \n> use a similarity implementation. They compute raw scores and nrMatches. \n> ConjunctionScorer is a hybrid. It uses coord-factors and is is used as \n> NrMatchersScorer. This could lead to incorrect results with Similarity \n> implementations other than DefaultSimilarity. A ConjunctionScorer used as \n> NrMathesScorer should compute raw scores, if used as standard Scorer it  \n> should use coord-factors. How can we achieve this in an elegant way? \n>  \n> Christoph \n \nYour're right that ConjunctionScorer has a double role here: \nit can be used as a full replacement for BooleanScorer when all clauses  \nare required, and it can also be used to score only the required \nclauses combined with ReqOptScorer or ReqExclScorer for the other  \nclauses. \n \nThe implementation could only fail when ConjunctionScorer \nprovides a nrMatchers bigger than 1, and computes the coordination \nfactor into it's score. The implementation prevents \nthis by using a top level scorer that always returns 1 for nrMatchers, \nand uses nrMatchers() of it's subscorers for the coordination factor. \n \nThis is somewhat tricky, so I hope I got all the details right. \n \nIt also means that the changed ConjunctionScorer should not multiply \na coordination factor into its score() value. I don't remember \nwhether or not it does that, but it shouldn't. \n \nOne way to solve this would be to use another name for the changed \nConjunctionScorer, or to explicitly document that it should be \nwrapped in a scorer that returns 1 for nrMatchers() when implementing \na full BooleanQuery. \n \nRegards, \nPaul Eschot. \n \n(*) In case nrMatchers() is added to Scorer, this wrapping would not \nbe necessary, and it should be documented that it is expected that \nthe scorers for the clauses implement their own coordination factor \ninto their score and return 1 for nrMatchers(). \nThere may be a better way to implement this 'decoupling' \nof the coordination factor from the cooperating scorers enterely within \nBooleanScorer2, for example by maintaining the \nnumber of matching subscorers in the top level scorer, invisible \nfrom the outside, and having all the cooperating scorers maintain \nthis attribute of the top level scorer instead of their own. \n \n ",
            "date": "2005-01-20T06:34:22.000+0000",
            "id": 11
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=14067)\nA patch to the current BooleanQuery that forms the \"built into\"\n\nUsing this patch instead of BooleanQuery.java from attachment 13739\nalso incorporates the intermediate javadoc addition to BooleanQuery.\n\nI think I can find some time in the coming weeks to remove the\nNrMatchersScorer from attachment 13739.\nSo, in case this gets into the Lucene dev branch before that,\nplease avoid using NrMatchersScorer and the nrMatchers() method\nit provides.\n\nRegards,\nPaul Elschot",
            "date": "2005-01-22T21:07:20.000+0000",
            "id": 12
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=14069)\nReworked BooleanScorer2 to drop NrMatchersScorer.\n\nAdding BooleanScorer2 to Lucene, 22 Jan 2005.\n\nThe main difference with the previous patch of 12 Dec 2004\nis that all counting of matching scorers is now done\nlocally in BooleanQuery2 using a wrapper and a few\ninline subclasses.\n\nThis allowed to get rid of NrMatchersScorer completely.\nConjunctionScorer is used as a summing scorer by passing\nit a default similarity.\n\nThe copyright is now assigned to the Apache Software Foundation.\n\nThe implementation of explain() is still in its infancy.\nSome \"Expert:\" annotations may still be needed in the javadocs.\n\n\nThe code, all under Apache Licence Version 2:\n\nTest for BooleanScorer, with some example code\nusing both 1.4 scorer and new BooleanScorer2:\nsrc/test/org/apache/lucene/search/TestBoolean2.java\n(Functionality unchanged from 12 Dec 2004)\n\nAlternative for BooleanScorer, using the scorers below:\nsrc/java/org/apache/lucene/search/BooleanScorer2.java\n(Functionality changed heavily, see above).\n\nCounterpart of ConjunctionScorer, also allowing a\nminimal nr of matchers:\nsrc/java/org/apache/lucene/search/DisjunctionSumScorer.java\n(Functionality unchanged from 12 Dec 2004, keeping\nthe nrMatchers() method but not implementing NrMatchersScorer.)\n\nHelper for case of only prohibited subscorers:\nsrc/java/org/apache/lucene/search/NonMatchingScorer.java\nI would suggest to also use this in other places instead of\na null Scorer, that's why it is in a separate java file.\n\nFor required and prohibited subscorers:\nsrc/java/org/apache/lucene/search/ReqExclScorer.java\n(Functionality unchanged from 12 Dec 2004, except\nfor removing the nrMatchers() method.)\n\nFor required and optional subscorers:\nsrc/java/org/apache/lucene/search/ReqOptSumScorer.java\n(Functionality unchanged from 12 Dec 2004, except\nfor removing the nrMatchers() method. The score()\nmethod was simplified a bit.)\n\n\nChanges to existing code:\n\nRedirect BooleanQuery to BooleanScorer2 under\ncontrol of static methods setUseScorer14 and getUseScorer14,\ndefault using BooleanScorer2, as requested by Doug:\nsrc/java/org/apache/lucene/search/BooleanQuery.java\n(Unchanged from the previous version of 12 Dec 2004)\n\nAdded some helping code for tests by TestBoolean2,\nThis uses the setUseScorer14 method to test both versions:\nsrc/test/org/apache/lucene/search/CheckHits.java\n(Unchanged from the previous version of 12 Dec 2004)\n\nConjunctionScorer is no more declared final,\nand the imports are explicit:\nsrc/java/org/apache/lucene/search/ConjunctionScorer.java\n\nRegards,\nPaul Elschot\n",
            "date": "2005-01-23T07:25:08.000+0000",
            "id": 13
        },
        {
            "author": "Christoph Goller",
            "body": "Eliminating NrMatchersScorer and putting all coord stuff into\nBoolean2Scorer is very elegant. I committed your patch.\n\nChristoph",
            "date": "2005-01-25T04:24:12.000+0000",
            "id": 14
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=14116)\nReqExclScorer.java simplified\n\nThis obsoletes the recently introduced ReqExclScorer.java .\nIt also defines the class package private instead of public.\n\nDefining the other scorers for BooleanScorer2 also package private\nwould be in line with the rest of the package.\n\nThere is one thing left to do in BooleanScorer2: an implementation\nof explain().\n\nRegards,\nPaul Elschot\n",
            "date": "2005-01-28T04:59:09.000+0000",
            "id": 15
        },
        {
            "author": "Paul Elschot",
            "body": " \nI'm trying to get explain() to work in BooleanScorer2 and I stumbled \non the following. \nIn a first attempt to get explain() to work in BooleanScorer2, I need to call \nTermScorer.explain() which gives a smaller result than TermWeight.explain(), \nwhich also explains the query weight and the idf. \n \nThe private TermWeight class in TermQuery.java has an explain() method \nthat calls TermScorer.explain() to explain the term frequency. \n \nI'd like to move the explain() functionality from TermWeight to TermScorer to \nfix this. However, a similar situation exists for MultiPhraseQuery, \nPhrasePrefixQuery, PhraseQuery and SpanWeight, so that would be a lot of work. \n \nThere are some alternatives: \n \nKeep the Weight close to each scorer in BooleanScorer2 which is also lot \nof work. \n \nUse the existing BooleanScorer.explain() also for BooleanScorer2. \nThis is the current situation. \n \nI prefer the last option. \n \nRegards, \nPaul Elschot. \n ",
            "date": "2005-02-01T06:04:11.000+0000",
            "id": 16
        },
        {
            "author": "Paul Elschot",
            "body": "I was about to close this bug, but then I saw that the \nsimplified ReqExclScorer.java of Jan 27 is not in the trunk. \n \nRegards, \nPaul Elschot \n ",
            "date": "2005-05-26T03:13:41.000+0000",
            "id": 17
        }
    ],
    "component": "core/search",
    "description": "This disjunction scorer can match a minimum nr. of docs, \nit provides skipTo() and it uses skipTo() on the subscorers. \nThe score() method is abstract in DisjunctionScorer and implemented \nin DisjunctionSumScorer as an example.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-294",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "DisjunctionScorer",
    "systemSpecification": true,
    "version": ""
}