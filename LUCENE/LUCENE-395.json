{
    "comments": [
        {
            "author": "Mark Harwood",
            "body": "Created an attachment (id=15346)\nCoordConstrainedBooleanQuery class\n",
            "date": "2005-06-09T20:05:03.000+0000",
            "id": 0
        },
        {
            "author": "Mark Harwood",
            "body": "Created an attachment (id=15347)\nCustomQueryParserExample class\n",
            "date": "2005-06-09T20:05:38.000+0000",
            "id": 1
        },
        {
            "author": "Mark Harwood",
            "body": "Damn. This coord trick works nicely on its own, eg\n  authors:(min_coord:2 Erik Otis Doug)\n\nbut doesnt work when combined with other queries like this:\n\n  title:\"lucene in action\" AND authors:(min_coord:3 Erik Otis Doug)\n\nA result is returned even thought the coord restriction of 3 is NOT satisfied\n(Doug was not an author). Needs some more investigation.....\n",
            "date": "2005-06-09T20:53:41.000+0000",
            "id": 2
        },
        {
            "author": "Mark Harwood",
            "body": "(From update of attachment 15346)\nDoes not work - have rewritten\n",
            "date": "2005-06-11T06:23:36.000+0000",
            "id": 3
        },
        {
            "author": "Mark Harwood",
            "body": "Created an attachment (id=15371)\nCoordConstrainedBooleanQuery\n\nFixed issues so will work when nested in other Boolean queries - thanks to Paul\nfor the scorer tips.",
            "date": "2005-06-11T06:28:59.000+0000",
            "id": 4
        },
        {
            "author": "Mark Harwood",
            "body": "(From update of attachment 15347)\nNew version supports analysis better\n",
            "date": "2005-06-11T06:54:51.000+0000",
            "id": 5
        },
        {
            "author": "Mark Harwood",
            "body": "Created an attachment (id=15372)\nCustomQueryParserExample\n\nAdded automatic support for preserving min_coord numeric parameters in query\nstring whatever users' choice of analyzer is",
            "date": "2005-06-11T06:56:23.000+0000",
            "id": 6
        },
        {
            "author": "Paul Elschot",
            "body": "In the trunk this could be implemented by adding a minimumNrShouldMatch \nattribute to BooleanQuery and passing this as a minimum number of \nmatchers to the DisjunctionSumScorer that is used to combine the \nclauses that should match, ie. the optional clauses. \nThis minimumNrShouldMatchwould would have a role similar to the minimum \nrequired overlap in the CoordConstrainedBooleanQuery here, \nwhen disregarding the required and prohibited clauses. \n \nRegards, \nPaul Elschot \n \n ",
            "date": "2005-06-12T05:32:15.000+0000",
            "id": 7
        },
        {
            "author": "Hoss Man",
            "body": "I don't really understand BooleanScorer2 very much, but i thought I understaood it enough to take a stab at the changes paul suggested to incorperate this type offunctionality into BooleanQuery using DisjunctionSumScorer.\n\nNot suprisingly, some of the new tests I wrote for this functionality don't pass.  I can't figure out what the problem is.  perhaps It will come to me later, but in the mean time I wanted to post what I had in case the problem is something really silly and trivial that I'm overlooking.",
            "date": "2005-09-28T03:19:57.000+0000",
            "id": 8
        },
        {
            "author": "Paul Elschot",
            "body": "I glanced through the code quickly, I'll give it a try in a week or so.\n\nBooleanScorer2 has one catch for which I did not see a check in the patch:\nA) when there is at least one required clause, none of the optional clauses need to match, but\nB) when there are no required clauses, at least one of the optional clauses needs to match.\n\nFrom what I saw (very quickly), only case B is implemented,\nbut what should happen in case A?\n\nRegards,\nPaul Elschot",
            "date": "2005-09-28T04:25:38.000+0000",
            "id": 9
        },
        {
            "author": "Hoss Man",
            "body": "Paul: i thought i had accounted for both situations, but you're right -- it's not enough to make sure that all of the existing usages of DisjunctionSumScorer now use the min cut-off, because when there are required scorers, the existing uses of DisjunctionSumScorer are allways treated as optional.  the internal logic in makeCountingSumScorer basically needs to be \"turned inside out\" so that if the min value is set, a DisjunctionSumScorer is constructed, and treated as a required scorer.\n\nI started trying to do this but i haven't really made any progress, and now i have to go get on a plane, so unless someone else takes a stab at it, I'll try to post an updated patch on monday.\n\nin the mean time, here is a revised version of the test class that accounts for more possible code paths in the existing logic (particularly, the difference in behavior when there is one required vs more then one required, and/or one prohibited vs more then one prohibited.",
            "date": "2005-09-30T07:21:30.000+0000",
            "id": 10
        },
        {
            "author": "Hoss Man",
            "body": "Okay - a new patch, and this one (amazingly) seems to work.  All existing tests in SVN pass, as well as the new ones I've attached to this bug.\n\nThe one thing still not quite accounted for is what the behavior should be if/when clients set the minNrShouldMatch to be a value higher then the number of optional clauses -- or what the behavior should be if there is only one optional clause, and minNrShouldMatch==1 ... should it be treated as if it's required, or is that a miss-use of the api?   Should these cases be checked in BooleanScorer2, or in BooleanQuery?\n\n",
            "date": "2005-10-04T04:12:55.000+0000",
            "id": 11
        },
        {
            "author": "Yonik Seeley",
            "body": "> if there is only one optional clause, and minNrShouldMatch==1 ... should it be treated as if it's required\n\nThat would be my vote... it requires less special case checking when generating queries.\n\n>  if/when clients set the minNrShouldMatch to be a value higher then the number of optional clauses\n\nEither treat all optional clauses as required, or don't match any clauses.  I guess I would lean toward being literal and not match anything.",
            "date": "2005-10-04T05:11:13.000+0000",
            "id": 12
        },
        {
            "author": "Paul Elschot",
            "body": "I agree with Yonik here.\n\n> Should these cases be checked in BooleanScorer2, or in BooleanQuery? \n\nThe easiest place is BooleanScorer2 since it already does a lot of checking to decide\nwhich scorers to use. It has this at line 180:\n        return new NonMatchingScorer();  // only prohibited scorers\nwhich is a nice fit for the case when minNrShouldMatch is too high.\n\nI'll try the new code in a few days.\n",
            "date": "2005-10-04T05:27:30.000+0000",
            "id": 13
        },
        {
            "author": "Hoss Man",
            "body": "Here is:\n\n1) Revised version of TestBooleanMinShouldMatch with new methods to to test for the border cases of:\n   a) min is higher then the number of optional clauses\n   b) min is equal to the number of optional clauses\n   c) min and number of clauses are both 1\n   d) there are no optional clauses, but a min is specified\n\n2) Revised version of patch that works against these new tests\n",
            "date": "2005-10-04T08:48:48.000+0000",
            "id": 14
        },
        {
            "author": "Paul Elschot",
            "body": "The patch applies cleanly and all tests pass including the new TestBooleanMinShouldMatch.\n\nThe code to tranform the optional scorers into a single required one with a minimum number of matches\nlooks good, it's easy to understand and the tests pass.\nI'm not really happy with the place of this code, it would be better in the initCountingSumScorer()\nmethod of BooleanScorer2.\n\nAlso I don't think maxCoord should be increased when this extra required scorer is introduced,\nbecause this new required scorer can be completely ignored for coordination, it is only a way to\nget the minimum number of required scorers. I'm not sure about this, though.\nPerhaps a testcase could be added that compares the score with and without a minimum\nnumber of matches on documents that match anyway.\n\nI'll keep this in my working copy and work on the code a bit, probably during next week.\nPlease feel free to beat me to it.\n\nRegards,\nPaul Elschot\n\n",
            "date": "2005-10-07T03:28:02.000+0000",
            "id": 15
        },
        {
            "author": "Hoss Man",
            "body": "I freely admit that I didn't give a lot of thought to incrimenting maxCoord.  I did it only because if I didn't, coordinator.coordFactor() generated ArrayIndexOutOfBoundsExceptions  -- it assumes that the number of counted matches (nrMatchers) should be used to determine which element of coordFactor should be used, so I assumed that maxCoord allways needed to be equal the the maximum number of potential counted matches.\n\nLikewise, I put the code in Coordinator.init() instead of initCountingSumScorer() for the sole reason that since i was incrimenting maxCoord, I needed to do it before coordFactors[] was initialized.  (allthough, I suppose it could have happened in initCountingSumScorer(), prior to the call to coordinator.init()).\n\n\nDid I mention I'm way over my head as far as this patch goes? ... I don't honestly understand the meaning/purpose of \"coordination\" -- I just kind of did what I did because it seemed to work (and made some sense in the context of hte existing code).",
            "date": "2005-10-07T05:46:04.000+0000",
            "id": 16
        },
        {
            "author": "Paul Elschot",
            "body": "Some refactoring to make things more compact, no functional changes.",
            "date": "2005-10-09T00:53:45.000+0000",
            "id": 17
        },
        {
            "author": "Paul Elschot",
            "body": "This a continuation of the earlier patch.\nThe basic ideas are now built deep into the logic of determining the actual scorer to be used.\nFor this logic needed quite a few changes, simplifying in many places, but also\none more case (a conjunction scorer over (a) the required scorers and (b) a disjunction\nscorer over optional scorers with a minimum number that should match).\n\nThis obsoletes another patch that splits off the coordination logic when it is not needed.\nI'll note this there later.\n\nSome tests for unchanged scoring behaviour are still needed, but those can\nbe added later, since this is probably going to work well.\n\nAgain, thanks for this idea and for the test cases.\n\nRegards,\nPaul Elschot\n",
            "date": "2005-10-09T01:01:53.000+0000",
            "id": 18
        },
        {
            "author": "Paul Elschot",
            "body": "The code that is obsoleted by this BooleanScorer2 is at issue LUCENE-364.",
            "date": "2005-10-09T04:08:36.000+0000",
            "id": 19
        },
        {
            "author": "Hoss Man",
            "body": "fixed a one character typo in a test name that caused the test to not be run...\n\n",
            "date": "2005-10-21T06:21:57.000+0000",
            "id": 20
        },
        {
            "author": "Hoss Man",
            "body": "To recap: \n\n * The orriginal bug proposed a new Query class, and provided a sample query parser that leveraged it.\n * subsequent discussions have led to a patch for BooleanQuery and BooleanScorer to support this functionality without needing a new class\n\nLooking at the example query parser for the first time today, I don't think it's a very clean way to proceed - if for no other reason then those provided by the other...\n\n        //Note (mis)use of fieldname \"min_coord\" to pass the required parameter - a more formal\n        //support for passing query function_names and parameters to user-defined query factories \n        //would be a very useful addition to the QueryParser base class\n\n\nOne idea that occured to me earlier today, is that \"~\" could be used to indicate the  minNrShouldMatch.  This occured to me becuase specifying a \"tolerance\" in the number of optional subclauses seems similar to me to specifying the slop in a phrase query.\n\nI don't have a patch for this, i just wanted to post it (in case i get hit by a bus).\n",
            "date": "2005-11-02T05:56:02.000+0000",
            "id": 21
        },
        {
            "author": "Paul Elschot",
            "body": "Another way would be to override getBooleanQuery in QueryParser\nand check there whether one of the given clauses has a special form,\nfor example _min2 or _min3  indicating the minimum number of remaining\nclauses that should match for this boolean query.\n\nRegards,\nPaul Elschot\n",
            "date": "2005-11-02T07:06:47.000+0000",
            "id": 22
        },
        {
            "author": "Yonik Seeley",
            "body": "I've been reviewing this patch along with BooleanScorer2 in general since It's my first exposure to it (it's certaily more complex than the original).\n\nThere are so many decision points in the creation of the scorers that I wrote a test to create random boolean queries to verify that things match the original.\nOne thing I found is that when minNrShou ldMatch>0 with nested boolean queries, the scores may not match for those documents that match the same query with minNrShou ldMatch=0.  Is this expected?",
            "date": "2005-11-04T14:10:14.000+0000",
            "id": 23
        },
        {
            "author": "Hoss Man",
            "body": ": One thing I found is that when minNrShouldMatch>0 with \n: nested boolean queries, the scores may not match for those\n: documents that match the same query with \n: minNrShouldMatch=0.  Is this expected?\n\n...hmm.  assuming you mean that you only set minNrShouldMatch in the root query, and the nested queries are vanilla BooleanQueries -- then no, that doesn't sound expected.\n\nIf the subqueries had minNrShouldMatch set (regardless of wether or not the root query did), then yes i can imagine some cases where the scores would be different (even if the result set is the same).  Consider the following nesting scenerio...\n\n   ( (A B X) (C D Y) (E W Z) )\n\nIf document #42 matches A, B, C, D, and E, but does NOT match X, Y or Z, then it will easily match this query.  Even if all of the subqueries are modified so that minNrShouldMatch=2, the result set will be the same -- but the score for document#42 *SHOULD* be different, because it no longer matches enough individual clauses in the third sub query to get a score contribution from it (ie: the match on E no longer improves the score)\n\nBut, if all you do is set minNrShouldMatch > 0 on the outermost query ... I can't think of any reason why the score would chance if the document still matches (other then a bug)\n\nCan you post your test?\n\n\n",
            "date": "2005-11-04T15:15:25.000+0000",
            "id": 24
        },
        {
            "author": "Paul Elschot",
            "body": ">There are so many decision points in the creation of the scorers that I wrote a test to\n> create random boolean queries to verify that things match the original. \n\nThank you very much. I think there are not enough tests for boolean queries, so\nsuch tests are very welcome.\n\n> One thing I found is that when minNrShou ldMatch>0 with nested boolean queries, the\n> scores may not match for those documents that match the same query with\n> minNrShouldMatch=0. Is this expected? \n\nYes, see also Hoss Mann's comment.\nThis can happen in the case that a nested query (eg. (E W Z) above) does\nnot match because of its minNrShould match,\nwhile the full query still matches because it has enough\nmatching subqueries left.\nIn that case the full query has a smaller score because fewer of its subqueries match.\n\nBtw. once this has settled I'd like to redo the splitting off the coordation part when\nit is not needed, but that is only for performance.\n",
            "date": "2005-11-04T17:16:19.000+0000",
            "id": 25
        },
        {
            "author": "Yonik Seeley",
            "body": "Thanks for the scoring clarification guys... if I only set minNrShouldMatch>0 on the top level query, all the scores match!\n\nChanges:\n- added BooleanQuery.getMinimumNumberShouldMatch()\n- added the syntax Chris (Hoss) suggested to BooleanQuery.toString()... but it's not too late to change if someone has a better idea\n- added random boolean query testing with variable minMrShouldMatch to TestBooleanMinShouldMatch\n",
            "date": "2005-11-05T07:01:01.000+0000",
            "id": 26
        },
        {
            "author": "Paul Elschot",
            "body": "Patch to TestBoolean2.java to use try/finally to reset the static useScorer14 flag in BooleanQuery\neven when a test fails.\nThis has bitten me once when one of the tests started failing...\n",
            "date": "2005-11-06T23:57:57.000+0000",
            "id": 27
        },
        {
            "author": "Yonik Seeley",
            "body": "attaching new BooleanQuery.patch that fixes a toString() typo and syncs with head.",
            "date": "2005-11-10T06:31:09.000+0000",
            "id": 28
        },
        {
            "author": "Yonik Seeley",
            "body": "I like this patch, and I'd like to see it committed before 1.9 is released.\nOnly two outstanding issues:\n  1) Deciding on a syntax and adding QueryParser support... I think that's a separate issue and can be addressed later.\n  2) Performance optimizations when coord isn't needed... that also looks like a separate issue that can be dealt with later.\n\nSo it looks to me like this is ready to be committed.  Does anyone see a reason why it shouldn't be?\n\n",
            "date": "2005-11-11T04:02:08.000+0000",
            "id": 29
        },
        {
            "author": "Yonik Seeley",
            "body": "fixed BooleanQuery hashCode/equals and committed patches.",
            "date": "2005-11-17T01:42:23.000+0000",
            "id": 30
        }
    ],
    "component": "core/search",
    "description": "Attached 2 new classes:\n\n1) CoordConstrainedBooleanQuery\nA boolean query that only matches if a specified number of the contained clauses\nmatch. An example use might be a query that returns a list of books where ANY 2\npeople from a list of people were co-authors, eg:\n\"Lucene In Action\" would match (\"Erik Hatcher\" \"Otis Gospodneti&#263;\" \"Mark Harwood\"\n\"Doug Cutting\") with a minRequiredOverlap of 2 because Otis and Erik wrote that.\nThe book \"Java Development with Ant\" would not match because only 1 element in\nthe list (Erik) was selected.\n\n2) CustomQueryParserExample\nA customised QueryParser that allows definition of\nCoordConstrainedBooleanQueries. The solution (mis)uses fieldnames to pass\nparameters to the custom query.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-395",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "CoordConstrainedBooleanQuery + QueryParser support",
    "systemSpecification": true,
    "version": ""
}