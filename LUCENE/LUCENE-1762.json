{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "As Token is not yet deprecated, I think, this patch should also apply to Token.java?\nCan you prepare that, too?\n\n(This is important, because if the backwards-compatibility layer is enabled with setOnlyUseNewAPI(false)), the TermAttributeImpl is never used and a Token instance is used instead - if no tests fail, this may also be the case :-] )",
            "date": "2009-07-25T13:57:39.579+0000",
            "id": 0
        },
        {
            "author": "Eks Dev",
            "body": "made the changes in Token along the same lines, \n\n- had to change one constant in TokenTest as I have changed initial allocation policy of termBuffer to be consistent with Arayutils.getnextSize()\n\nif(termBuffer==null)\n\nNEW:\n termBuffer = new char[ArrayUtil.getNextSize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize)]; \n\nOLD:\ntermBuffer = new char[newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize]; \n\nnot sure if this is better, but looks more consistent to me (buffer size is always determined via getNewSize())\n\nUwe, \nsetOnlyUseNewAPI(false) does not exist, it was removed with some of the patches lately. It gets automatically detected via reflection?\n\n",
            "date": "2009-07-25T22:51:59.206+0000",
            "id": 1
        },
        {
            "author": "Eks Dev",
            "body": "- made allocation in initTermBuffer() consistent with ArrayUtil.getNextSize(int) -  this is ok not to start with MIN_BUFFER_SIZE, but rather with ArrayUtil.getNextSize(MIN_BUFFER_SIZE)... e.g. if getNextSize gets very sensitive to initial conditions one day...\n \n- null-ed  termText on switch to termBuffer in resizeTermBuffer (as it was before!) . This was a bug in previous patch  ",
            "date": "2009-07-25T23:12:43.351+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. setOnlyUseNewAPI(false) does not exist, it was removed with some of the patches lately. It gets automatically detected via reflection?\n\nNo, this is a static global switch in TokenStream. If you switch it on, TokenStreams and Filters use only the new API forcefully and therefore use the separate Attribute implementations from o.a.l.analysis.tokenattributes. If it is switched off, a old Token instance is used instead, see [http://hudson.zones.apache.org/hudson/job/Lucene-trunk/javadoc/core/org/apache/lucene/analysis/TokenStream.html#setOnlyUseNewAPI(boolean)]. The red color bug is fixed in trunk now :)\n\nThere is one problem with the 6 new single attribute instances: They are code duplicates from Token but have no Test. I also think, I should add a missing test similar to TestToken.java and do the same test with 6 Attribute instances.\n\nI will review the other changes later, I have no time today.",
            "date": "2009-07-26T07:35:35.733+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "Extended patch. It adds also tests for the basic attributes (in trunk only token was tested). The new tests check every impls basic functionality and clone/copyTo. It also contains the buffer tests of Token for TermAttribute.\n\nTo apply the patch you must first do a:\n{code}\nsvn copy src/test/org/apache/lucene/analysis/TestToken.java src/test/org/apache/lucene/analysis/tokenattributes/TestTermAttributeImpl.java\n{code}\n\nIt also modified the AttributeImpls default toString() to only print instance fields, not static fields.",
            "date": "2009-07-27T21:51:29.179+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "Eks, the original patch looked good, I did not change anything in your code, I only added the above mentioned tests and other changes.\n\nOne thing: As TestToken checks the buffer sizes, the test in the backwards-branch for Token must also be changed. I will do this before commit.",
            "date": "2009-07-27T21:53:10.675+0000",
            "id": 5
        },
        {
            "author": "Eks Dev",
            "body": "cool, thanks for the review.   ",
            "date": "2009-07-27T22:20:58.951+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Here the modified BW-test to apply on backwards-branch. It respects the new default buffer size.",
            "date": "2009-07-28T07:56:11.804+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "Slightly modified patch (some small refactoring). I also fixed a bug in Token, because the Payload was not deep cloned in copyTo(), which is done by the simple attributes and needed for restoring the state in AttributeSource. Also added tests for this.\n\nI think it is ready for commit. I will do this in a day or two.",
            "date": "2009-07-28T10:53:28.029+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 799025\nThis is without CHANGES.txt updates, because nothing was changed that is visible to the outside :-)\n\nThanks Eks!",
            "date": "2009-07-29T19:15:38.480+0000",
            "id": 9
        }
    ],
    "component": "modules/analysis",
    "description": "No big deal. \n\ngrowTermBuffer(int newSize) was using correct, but slightly hard to follow code. \n\nthe method was returning null as a hint that the current termBuffer has enough space to the upstream code or reallocated buffer.\n\nthis patch simplifies logic   making this method to only reallocate buffer, nothing more.  \nIt reduces number of if(null) checks in a few methods and reduces amount of code. \nall tests pass.\n\nThis also adds tests for the new basic attribute impls (copies of the Token tests).",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1762",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Trivial",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Slightly more readable code in Token/TermAttributeImpl",
    "systemSpecification": true,
    "version": "2.9"
}