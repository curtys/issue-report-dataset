{
    "comments": [
        {
            "author": "Hoss Man",
            "body": "Just a thought, but in the same spirit as SpanQuery, these classes may make sense in their own sub package ... ie: org.apache.lucene.search.fq",
            "date": "2005-10-05T13:27:16.000+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "Perhaps not  a bad idea considering that the number of classes may top 12 after adding a few more function types.\n\nAnyone else have package name suggestions/preferences?\n\nsearch.fq?\nsearch.func?\nsearch.function?",
            "date": "2005-10-06T08:49:08.000+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "Added ReciprocalFloatFunction, a/(mx+b), a natural choice for date boosting,\nand ReverseOrdFieldSource, which numbers terms in reverse order as OrdFieldSource",
            "date": "2005-10-07T22:29:54.000+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "attaching newest version",
            "date": "2005-12-01T02:56:44.000+0000",
            "id": 3
        },
        {
            "author": "Yonik Seeley",
            "body": "This newest version simplifies a lot of cruft from the previous version.\n\nA FunctionQuery takes a ValueSource.\nThe ValueSource produces a DocValues object for a specific IndexReader (It's like a lucene scorer).\nThe ValueSource is also used as input to functions, which are ValueSources themselves.\n\nSo, you can do things (symbolically), like\n\nint(fieldx)\nfloat(fieldx)\nord(fieldx)\nrord(fieldx)\nlinear(fieldx,1,2)\nlinear(rord(fieldx),1,2,3)\nreciprocal(linear(fieldx,1,2),3,4,5)\n\nA useful one for boosting more recent dates might be:\nreciprocal(rord(mydatefield),1,1000,1000)\n\nI'm not sure if this is the final form yet... perhaps the division between ValueSource and Query  could be erased such that every value source is a query already (so that you don't need to pass it to a FunctionQuery).\n\nIt would also be nice to freely mix a lucene Query and a ValueSource so that you could do something like:\nproduct(luceneQuery, val(fieldx))\n  or even\nproduct(luceneQuery1, luceneQuery2)\n\nOf course, I haven't done the \"product\" function yet... right now, the normal way tocombine with other queries to influence the score is to put it in a boolean query:\n+other_lucene_query_clauses +function_query^.1\nthe score from the function query is added to the other query.\n",
            "date": "2005-12-01T03:14:33.000+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "changed getSimpleName() to getName() to preserve Java1.4 compatability.",
            "date": "2005-12-01T04:56:39.000+0000",
            "id": 5
        },
        {
            "author": "Kelvin Tan",
            "body": "Yes, I've independently come up with something similar. What's interesting is that you can also perform filtering (like date filtering) by simply returning negative Float.MAX_VALUE. This pretty much guarantees that the document's final score is < 0.\n\nI've also come across the need to be able to modify the final score of a document, and have done this via a score-modifying query wrapper which delegates the scoring to the functionquery it wraps, then applying an additional function to it. Is that similar to the product function you mention?",
            "date": "2006-02-14T14:48:09.000+0000",
            "id": 6
        },
        {
            "author": "Yonik Seeley",
            "body": "This version is now slightly out of date.\nFor now, consider the definitive version to be in Solr:\nhttp://incubator.apache.org/solr\nhttp://svn.apache.org/viewcvs.cgi/incubator/solr/trunk/src/java/org/apache/solr/search/function/\n\nSolr currently has a QueryParser hack to parse a FunctionQuery...  you use _val_ as the fieldName to create a FunctionQuery\nExamples:\n  _val_:myfield\n _val_:\"max(myfield,2.0)\"\n _val_:\"max(linear(myfield,1.0,.1), 5.0)\"\n",
            "date": "2006-03-03T03:54:54.000+0000",
            "id": 7
        },
        {
            "author": "Grant Ingersoll",
            "body": "Is there any motivation out there to push this down from Solr to Lucene?  I see from time to time on java-user that it comes in handy for people using Lucene.  What do the Solr people think about moving it into Lucene core?",
            "date": "2007-03-18T13:39:01.474+0000",
            "id": 8
        },
        {
            "author": "Erik Hatcher",
            "body": "+1 to FunctionQuery being brought into Lucene proper.",
            "date": "2007-03-18T14:38:34.855+0000",
            "id": 9
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Grant: Yeah, I think so.  7 votes and 5 watchers so far tells me people want this in Lucene.\n",
            "date": "2007-03-19T01:42:51.975+0000",
            "id": 10
        },
        {
            "author": "Hoss Man",
            "body": "I'm in favor ... i think once upon a time Yonik held off because he wasn't sure if he liked the API, but since it's been in Apache Solr for over a year now, i think it's safe.\n\nI don't suppose you'd be interested in opening a sister Solr issue and submitting a patch to deprecate those instances and make them subclass the ones you'll be migrating to Lucene would you? :)",
            "date": "2007-03-20T00:23:28.269+0000",
            "id": 11
        },
        {
            "author": "Hoss Man",
            "body": "I just remembered one of the reasons why i didn't do this the last time i looked at it: i don't think FunctionQuery has any good unit tests in the Solr code base -- there might be some tests that use the SOlrTestHarness to trigger function queries, but they aren't really portable.",
            "date": "2007-03-20T02:19:13.677+0000",
            "id": 12
        },
        {
            "author": "Yonik Seeley",
            "body": "> i think once upon a time Yonik held off because he wasn't sure if he liked the API\n\nRight... it's just never been at the top of my list to revisit.\n\nThe main thing I was wondering is if I should have a whole ValueSource thing... perhaps FunctionQuery should be able to use other Queries directly.  For example, one could have\nMultiplyFunctionQuery(MyNormalQuery, MyFieldFunctionQuery) to boost a query by another query (in this case a function query).\n\nRight now, increasing the score of a document based on a field value is done in an additive way by adding a FunctionQuery clause to a BooleanQuery.  One could create a ValueSource that wraps another query to get a multiplicative effect, but is that the simplest approach?\n",
            "date": "2007-03-24T20:38:10.329+0000",
            "id": 13
        },
        {
            "author": "Mike Klaas",
            "body": "I've often wanted to multiply the scores of two queries.  I looked at FunctionQuery but didn't really see an easy way of getting around the ValueSource thing.\n\nSee LUCENE-850 for my eventual solution",
            "date": "2007-03-26T19:13:47.279+0000",
            "id": 14
        },
        {
            "author": "Doron Cohen",
            "body": "I intend to take a shot at this, with the approach of two parts/steps -\n  1)  simple scoring based on values of stored field.\n  2)  composing a document score as (some / math / extensible)  function of one or more scores of sub queries.\n\nThinking of a new package:    o.a.l.search.function.\n\nThis would seem to bring together LUCENE-446 and LUCENE-850 and I think would be handy for trying various scoring techniques.\n\n(Background/motivation:  I was considering using payloads for trying some static scoring alternatives (e.g. link info based), but I realized that function queries are much more suitable for this, and would be a handy addition to Lucene core.)",
            "date": "2007-04-27T19:32:15.835+0000",
            "id": 15
        },
        {
            "author": "Doron Cohen",
            "body": "Attached function.patch.txt adds three new queries:\n\n1. ValueSourceQuery -  an Expert type of query, more or less same as \n    in original patch. It is very flexible - takes a ValueSource as input - so it\n    could be extended to do additional things (ie not only indexed fields).\n\n2. FieldScoreQuery - subclass of ValueSourceQuery. It is easier\n    to use, and operates on cached indexed field. A doc score is set \n    by the value of that field. There are 4 field parser types for this: float, int,\n    short, and byte. They require different size in RAM when cached: 8, 4, 2, \n    and 1 bytes respectively per document. The cache was modified to \n    accommodate this. (Seems worth to save RAM where possible.)\n\n3. CustomScoreQuery - this query allows to custom the score of its contained \n    sub-query by implementing a customScore() function. Any computation is \n    possible, as long as it is based on the original score of the sub-query, \n    the (optional) score of an (optional) sub-valueSourceQuery, and the docid.\n    This query also covers (somewhat differently) LUCENE-850\n\nThe patch Included tests and javadocs. \nAll tests pass.\n\nI will later put the javadocs somewhere, to allow commenting on the API without \napplying the patch.\n\nThe tests found quite a few bugs for me, and I hope I got the scorers and weight \ncorrect now - I would very much appreciate review comments on these delicate\nparts.,,",
            "date": "2007-05-03T03:09:20.217+0000",
            "id": 16
        },
        {
            "author": "Doron Cohen",
            "body": "Modifying the issue name to reflect its current content. ",
            "date": "2007-05-03T03:19:03.596+0000",
            "id": 17
        },
        {
            "author": "Doron Cohen",
            "body": "javadocs for the new org.apache.lucene.search.function package \ncan now be reviewed at http://people.apache.org/~doronc/api ",
            "date": "2007-05-03T06:59:31.854+0000",
            "id": 18
        },
        {
            "author": "Doron Cohen",
            "body": "Updated patch to current trunk. \n\nAlso:\n- moved TYPE consts in FieldScoreQuery to FieldScoreQuery.Type (e.g. FieldScoreQuery.Type.BYTE).\n- some documentation fixes.\n\nUpdated patch javadocs in  http://people.apache.org/~doronc/api/ ",
            "date": "2007-05-05T07:04:04.452+0000",
            "id": 19
        },
        {
            "author": "Doron Cohen",
            "body": "Yonik (and other Solr's search.function people), \n\nI omitted some of the original functions/sources that were in your code: \n -   LinearFloatFunction,   MaxFloatFunction,   ReciprocalFloatFunction, \n -   OrdFieldSource,   ReverseOrdFieldSource\n\nThe first 3 should be straightforward to implemented by extending CustomScoreQuery, like the code samples show. Do you think such implementations should be included, ready to use?\n\nThe last 2 Ord ones can be implemented as before, i.e. with the \"expert\" class ValueSource that was kept. But they seemed spooky to me, with that comment regarding multi-searchers. Are these just examples, or are they really useful? Do you think they should be included?\n\nThanks,\nDoron",
            "date": "2007-05-05T07:20:29.246+0000",
            "id": 20
        },
        {
            "author": "Hoss Man",
            "body": "Doron: I haven't really been able to keep up with the way this issue has evolved, or dig into your new patches, but to answer your question about the Ord functions: yes they are very useful, and it active use in Solr.  I believe the warning about MultiSearcher mainly has to do with the fact that the MultiSearcher/FieldCache APIs give us know way to know the \"lowest\" of \"highest\" value in a field cache across an entire logical index, so the Ord functions can't really be queried against a MultiSearcher.",
            "date": "2007-06-04T02:36:49.548+0000",
            "id": 21
        },
        {
            "author": "Doron Cohen",
            "body": "ok, so I will add in the two ord classes in, so that Solr can move to use this package.\n",
            "date": "2007-06-04T22:24:00.158+0000",
            "id": 22
        },
        {
            "author": "Doron Cohen",
            "body": "Updated patch:\n- fixes explanation and toString() issues.\n- adds the Ord and ReverseOrd valueSource classes that are in use in Solr\n- warn in the javadocs from the experimental state of this package\n\nJavadocs were updated at http://people.apache.org/~doronc/api \n\nI will commit this later today of there are no objections.\n\n",
            "date": "2007-06-05T02:33:04.361+0000",
            "id": 23
        },
        {
            "author": "Doron Cohen",
            "body": "committed (experimental mode).",
            "date": "2007-06-05T16:39:49.179+0000",
            "id": 24
        }
    ],
    "component": "core/search",
    "description": "FunctionQuery can return a score based on a field's value or on it's ordinal value.\n\nFunctionFactory subclasses define the details of the function.  There is currently a LinearFloatFunction (a line specified by slope and intercept).\n\nField values are typically obtained from FieldValueSourceFactory.  Implementations include FloatFieldSource, IntFieldSource, and OrdFieldSource.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-446",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "search.function - (1) score based on field value, (2) simple score customizability",
    "systemSpecification": true,
    "version": ""
}