{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "Attached patch against 3x adds the test to TestFilterIndexReader.\n\nEven if there are methods which you don't think need to be overridden by FIR, I prefer that we still override them and call super.(), with a comment why we don't delegate.",
            "date": "2011-12-06T16:03:29.631+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi Shai, thats wanted that e.g. reopen/clone are not delegated. Because reopen/openIfChanged must return a new instance of the current IndexReader (which extends FilterIndexReader). By simply delegating it would violate this.\n\nJust a comment to your previous mail: If you call super.reopen() you would confuse the backwards layer (using VirtualMethod) for the transition to doOpenIfChanged, so please don't do it. Just leave it unimplemented.\n\nI would extends the test to add the \"wanted\" methods in a HashSet so it will not check them.\n\n- reopen(), doOpenIfChanged(), clone(): see above\n- numDeletedDocs should be final in IndexReader\n- deleteDocument & similar may be delegated (but i am not sure)",
            "date": "2011-12-06T16:12:58.811+0000",
            "id": 1
        },
        {
            "author": "Shai Erera",
            "body": "Then why don't we make FilterIndexReader abstract class, and declare reopen/doOpenIfChanged/clone abstract? I don't think it's useful to just init FilterIndexReader right? And clearly those methods need to be overridden by sub-classes, or they would already receive UnsupportedOperationException no?\n\nbq. numDeletedDocs should be final in IndexReader\n\nOk. Is it an acceptable backwards-break?\n\nI will post a patch which updates FIR and the test.",
            "date": "2011-12-06T18:40:45.797+0000",
            "id": 2
        },
        {
            "author": "Shai Erera",
            "body": "How about making those methods final on IR:\ngetRefCount\nincRef\ntryIncRef\ndecRef\nThey reference refCount, and I cannot think of an IR extension that would want to override any of these methods?\n\nnumDeletedDocs -- should be made final, per Uwe's proposal.\n\nThese methods, IMO, can be made final as well, because they delegate to other abstract methods:\ndocument(int) -- delegates to document(int, FieldSelector)\nsetNorm -- delegates to doSetNorm.\nsetNorm -- deprecated, but delegates to setNorm above.\ntermPositions(Term) -- calls termPositions().\ndeleteDocument(int) -- delegates to doDelete.\ndeleteDocuments -- calls deleteDocument.\nundeleteAll -- delegates to doUndeleteAll().\n\nIf you disagree, then I will override them in FIR.",
            "date": "2011-12-06T19:04:04.309+0000",
            "id": 3
        },
        {
            "author": "Shai Erera",
            "body": "Patch against 3x:\n* Adds a HashSet of methods that should not be overridden by FilterIndexReader.\n** If a method appears there and is not overridden, it is an error.\n** If a method appears there and is overridden, it is an error as well.\n* Override more methods by FIR.\n\nsee previous comment for the rest of the methods.",
            "date": "2011-12-06T19:06:30.745+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. Then why don't we make FilterIndexReader abstract class, and declare reopen/doOpenIfChanged/clone abstract? I don't think it's useful to just init FilterIndexReader right? And clearly those methods need to be overridden by sub-classes, or they would already receive UnsupportedOperationException no?\n\nIt would be abstract already on IndexReader if it would not be optional - thats the reason, to not make it abstract. So FIR should reflect this behaviour. We already have some FIRs that explicitely do not support reopen (like SlowMultiReaderWrapper).\n\nI agree with making all those methods final you mentioned above.",
            "date": "2011-12-06T22:30:42.800+0000",
            "id": 5
        },
        {
            "author": "Shai Erera",
            "body": "Patch makes the mentioned methods final, modifies SolrIndexReader and other IR extensions (ParallelReader, Instantiated, MemoryIndex) to not override them.\n\nAlso added a CHANGES entry under backwards compatibility.\n\nIf there are no objections, I will commit it later today.",
            "date": "2011-12-07T08:02:09.582+0000",
            "id": 6
        },
        {
            "author": "Shai Erera",
            "body": "Committed rev 1211413 to 3x. Porting to trunk",
            "date": "2011-12-07T12:26:43.970+0000",
            "id": 7
        },
        {
            "author": "Shai Erera",
            "body": "Patch adds the test to TestFilterIndexReader. Uwe asked that I do not commit these changes (test + FIR/IR fixes) until he merges in the branch on IR-read-only. We decided that Uwe will apply that patch to the branch, fix FIR/IR there and merge the branch afterwards.",
            "date": "2011-12-07T14:45:48.047+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "I added the patch to the LUCENE-3606 branch and fixed FilterIndexReader there (was missing 2 methods: getIndexCommit and getTermInfosIndexDivisor). The CHANGES.txt was merged to trunk.",
            "date": "2011-12-07T17:40:34.582+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "In general like reopen, getSequentialSubReaders should default to return null in FilterIndexReader. If it delegates, the filter has no chance to filter the segments - leading to bugs...",
            "date": "2011-12-07T17:42:18.899+0000",
            "id": 10
        },
        {
            "author": "Shai Erera",
            "body": "bq. I added the patch to the LUCENE-3606 branch and fixed FilterIndexReader there\n\nThat's great, thanks ! So can I resolve this issue?",
            "date": "2011-12-07T18:44:51.099+0000",
            "id": 11
        },
        {
            "author": "Uwe Schindler",
            "body": "I will do it once the branch is merged back.",
            "date": "2011-12-07T18:50:16.619+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed to trunk through merge of LUCENE-3606.",
            "date": "2011-12-09T10:18:49.769+0000",
            "id": 13
        }
    ],
    "component": "core/search",
    "description": "FilterIndexReader does not override all of IndexReader methods. We've hit an error in LUCENE-3573 (and fixed it). So I thought to write a simple test which asserts that FIR overrides all methods of IR (and we can filter our methods that we don't think that it should override). The test is very simple (attached), and it currently fails over these methods:\n{code}\ngetRefCount\nincRef\ntryIncRef\ndecRef\nreopen\nreopen\nreopen\nreopen\nclone\nnumDeletedDocs\ndocument\nsetNorm\nsetNorm\ntermPositions\ndeleteDocument\ndeleteDocuments\nundeleteAll\ngetIndexCommit\ngetUniqueTermCount\ngetTermInfosIndexDivisor\n{code}\n\nI didn't yet fix anything in FIR -- if you spot a method that you think we should not override and delegate, please comment.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3620",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "FilterIndexReader does not override all of IndexReader methods",
    "systemSpecification": true,
    "version": ""
}