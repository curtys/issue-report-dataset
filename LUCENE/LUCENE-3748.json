{
    "comments": [
        {
            "author": "David Croley",
            "body": "patch to address bug and add unit test for same.",
            "date": "2012-02-02T20:20:28.335+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "I agree with the patch. We can easily add backwards compat here, no problem.\n\nAs far as any potential others, the only possibility from my perspective is U+FF07 FULLWIDTH APOSTROPHE, \nthough I could go either way on that (since its a compatibility character)\n\nAny other opinions?",
            "date": "2012-02-02T20:30:18.866+0000",
            "id": 1
        },
        {
            "author": "Steve Rowe",
            "body": "+1, and +1 to include U+FF07.\n\nThere are several other characters listed with U+0027 APOSTROPHE in http://www.unicode.org/charts/PDF/U0000.pdf that could be interpreted visually as an English apostrophe, e.g. U+02BC MODIFIER LETTER APOSTROPHE, but it would be unusual for people to use those characters as apostrophes in English text, so I think it would be fine to exclude them.  (By contrast, the Unicode standard says that U+2019 is the *preferred* apostrophe form.)",
            "date": "2012-02-02T20:47:49.492+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "Thats my thoughts exactly Steven.\n\nI think by default we should go with U+0027 and U+2019 (and as i mentioned, either FF07 or not, its less important). \n\nAs far as other look-alikes, sure it could happen, BUT the user could just place ASCIIFoldingFilter before\nEnglishPossessiveFilter if they want that more brutal behavior... thats a more lossy normalization that I \ndon't think we should do by default...",
            "date": "2012-02-02T21:01:55.140+0000",
            "id": 3
        },
        {
            "author": "David Croley",
            "body": "If you want to preserve backwards compatibility, I guess I could pass matchVersion in from the calling Analyzer, but that crufts it up a bit. Is that necessary?",
            "date": "2012-02-02T21:49:13.868+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "I think we should do it (despite the cruft).\n\nOne of these days we will realize our goal of a stable interface between indexwriter etc and analyzers such\nthat if you are really worried about this with old indexes, you just use lucene-analyzers-ancient-version.jar\nand it works with the newer lucene-core.jar\n\nBut until then, i think we need it (e.g. we add a deprecated ctor for api compatibility that forwards to VERSION.LUCENE_35)\nand conditionalize the handling based on Version.\n\nIf you dont want to cruft-it-up lemme know, otherwise feel free to add a patch :)\n",
            "date": "2012-02-02T21:54:23.513+0000",
            "id": 5
        },
        {
            "author": "David Croley",
            "body": "newer patch that preserve backwards compatibility. Not sure if I've done that the best way, so feel free to change as needed.",
            "date": "2012-02-02T22:22:22.609+0000",
            "id": 6
        },
        {
            "author": "Walter Underwood",
            "body": "Why make separate patches for characters instead of using Unicode normalization? Converting to NFKC would also solve this for the prime character (U+2032) and any other codepoint that is equivalent.\n\nCompatibility normalization is designed for precisely this purpose, equivalence ignoring appearance.",
            "date": "2012-02-03T00:13:48.339+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "Walter: U+2019 does not decompose at all (see http://unicode.org/cldr/utility/character.jsp?a=2019&B1=Show)\n\nThis is because its not a compatibility character of any reason, in fact its the single quote (U+0027) \nthats ambiguous, U+2019 is the correct one here.\n\nFrom a pedantic point of view, we should be forcing you to disambiguate the very ambiguous single quote (U+0027)\non your keyboard and *ONLY* handling U+2019 in this filter, but I realize some people might find this opinion a \ntad extreme :)\n\n\n",
            "date": "2012-02-03T00:20:12.234+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "updated patch: thanks again David.\n\nI added some javadocs, CHANGES.txt, an assertion to the solr factory, and (somewhat reluctantly) FF07.\n",
            "date": "2012-02-03T00:23:36.399+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "Thanks David!",
            "date": "2012-02-10T11:10:34.595+0000",
            "id": 10
        }
    ],
    "component": "modules/analysis",
    "description": "The current EnglishPossessiveFilter (used in EnglishAnalyzer) removes possessives using only the '\\'' character (plus 's' or 'S'), but some common systems (German?) insert the Unicode \"\\u2019\" (RIGHT SINGLE QUOTATION MARK) instead and this is not removed when processing UTF-8 text. I propose to change EnglishPossesiveFilter to support '\\u2019' as an alternative to '\\''.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3748",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "EnglishPossessiveFilter should work with Unicode right single quotation mark",
    "systemSpecification": true,
    "version": "3.1, 3.2, 3.4, 3.5"
}