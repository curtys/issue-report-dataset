{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "Are you sure, this works correct? If the indexState is changed in the synchronized block, another thread not synchronizing on the lock may still see the old indexState. At least, the indexState must be volatile, but this only works correct with Java 1.5 (and Lucene only needs Java 1.4 as requirement).",
            "date": "2009-04-23T16:00:38.593+0000",
            "id": 0
        },
        {
            "author": "Earwin Burrfoot",
            "body": "The problem is not with indexState not being volatile. You can unsafely publish objects that have no internal state, or their state is consistent enough for you under any memory visibility/reordering effects. See working example of it in LUCENE-1607, Yonik's hash for interning strings.\n\nThe problem is that indexState guards indexTerms, indexInfos, indexPointers, which aren't volatile too and aren't guarded by the lock. It is possible that one thread does load these fields and then sets indexState = new IndexRead(), but another thread sees only the last write and dies with NPE.\n\nThe thing I don't get, is why do we want lazy loading here at all? Is there any usage for TermInfosReader that prevents it from initializing in constructor?",
            "date": "2009-04-23T16:36:50.865+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "You could fix this, if you put all these field into the state object, too (an abstract class instead of interface containing these variables) and cloning those on creating the new state. But then you have the mentioned problem, that one thread may exchange the state object to a IndexRead, but another one still sees the reference to the IndexNotRead object, not used any longer. As log as you not also sychronize the state object change or make it volatile in Java 1.5 it will still not work. That was, what I meant.\nIn my opinion, this is not fixable in any case with these type of state objects, yes?",
            "date": "2009-04-23T16:52:41.200+0000",
            "id": 2
        },
        {
            "author": "Earwin Burrfoot",
            "body": "You cannot put all these fields into state object, because you introduce state to it and it can no longer be unsafely published.\n\n> one thread may exchange the state object to a IndexRead, but another one still sees the reference to the IndexNotRead object\nNothing terrible here, a thread hitting stale IndexNotRead synchronizes and short-circuits in the beginning of the method. The problem is that seeing proper state object doesn't guarantee seeing fields it is supposed to guard :)\n\nYes, it's not fixable here without volatile or proper synchronization. But I still have a feeling that lazy loading (and consequent synchronization) is not needed here at all.",
            "date": "2009-04-23T17:04:46.678+0000",
            "id": 3
        },
        {
            "author": "Yonik Seeley",
            "body": "Re: why the lazy load\nhttp://www.lucidimagination.com/search/document/97e73361748808b/terminfosreader_lazy_term_index_reading#2a73aaca25d516ec",
            "date": "2009-04-24T14:16:52.289+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "If it's only for segment merging, couldn't we up front conditionalize the loading of the index?",
            "date": "2009-04-24T15:09:54.303+0000",
            "id": 5
        },
        {
            "author": "Dan Rosher",
            "body": "I've added the TermInfosReader object to the constructor of the IndexNotRead object so that it can be synchronised  on during readIndex, and then protect indexTerms, indexInfos, indexPointer",
            "date": "2009-05-01T15:32:44.918+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Could we instead change TermInfosReader (it's package private so that's OK) to take \"boolean loadIndex\", and fix callers to thread down that argument?",
            "date": "2009-05-01T21:56:17.595+0000",
            "id": 7
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. If it's only for segment merging, couldn't we up front conditionalize the loading of the index?\n\nSince the indexWriter now does deletes, doesn't it sometimes need the term index too?",
            "date": "2009-05-02T13:33:18.649+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Since the indexWriter now does deletes, doesn't it sometimes need the term index too?\n\nTrue, so when IW opens the SR in order to apply deletes it should request that the terms index be loaded?\n\nThough, because iW now internally pools open SR's (for NRT search), it's entirely possible that an SR already opened for merging is re-used when it's time to apply deletes (even in the NRT case).  To handle that we could add a package private method to load the terms index, which only IW would call (we do something similar with the doc stores).  IW's synchronization ensures only one thread would call the method.\n\nIt would then not be necessary to check on every Term lookup whether the index was loaded.\n\nIn general I prefer up-front initialization when possible.  Ie, when I call IndexReader.open, it should do as much initializing as it can instead of deferring initialization until the first query.",
            "date": "2009-05-04T10:06:59.440+0000",
            "id": 9
        },
        {
            "author": "Jed Wesley-Smith",
            "body": "We get hit by this too. We'd love to see a fix and we'd agree that up-front initialisation would work for us.\n\nAFAICT there are a number of other potential subtle concurrency issues with {{TermInfosReader}}:\n\n# lack of {{final}} on fields - a number of fields ({{directory}}, {{segment}}, {{fieldInfos}}, {{origEnum}}, {{enumerators}} etc.) are never written to after construction and should be declared {{final}} for better publication semantics\n# unsafe publication of {{indexDivisor}} and {{totalIndexInterval}} these fields are not written to under lock and in a worst-case could be unstable under use.\n# {{close()}} calls {{enumerators.set(null)}} which only clears the value for the calling thread.\n\nMaking the {{TermInfosReader}} more immutable would address some of these issues.\n\nAs far as the root problem goes, uncontended synchronisation is generally _very fast_, but significantly slows down once a lock becomes contended. The kind of pattern employed here (do something quite expensive but only once) is not an ideal use of synchronisation as it commonly leads to a contended lock, which remains a slow lock well after it is required\\*. That being said, it isn't easy to do correctly and performantly under 1.4. \n\n\\* An alternative approach is something like this [LazyReference|http://labs.atlassian.com/source/browse/CONCURRENT/trunk/src/main/java/com/atlassian/util/concurrent/LazyReference.java?r=2242] class, although this kind of thing really requires Java5 for full value.",
            "date": "2009-06-04T01:03:15.280+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "I agree, we need to fix this for 2.9.  I'll explore the \"initialize up front\" approach.",
            "date": "2009-06-04T10:50:29.967+0000",
            "id": 11
        },
        {
            "author": "Yonik Seeley",
            "body": "It would be nice to fix, but I wonder how important it is (i.e. a must fix for 2.9 vs 3.0 where we can use Java5)\nWouldn't an application that hit contention on this very fast test, simply go on to hit a different contention point after this one is removed?\n\nA much better application fix is to simply limit the number of threads executing queries.",
            "date": "2009-06-04T19:29:51.537+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "I agree we could ship 2.9 without this fix (in fact I think most of\nthe issues marked 2.9 could be postponed until 3.x), but...\n\nBecause the ability of the JRE to downgrade an inflated lock back to a\nlightweight lock seems to be very implementation/version dependent,\ncoupled with the fact that term info lookup is very frequently called\n(especially for MultiTermQuery), makes me think this is indeed\nsomething rather important to fix.\n\nAnd a nice side effect of up-front init is that it front-loads\ninitialization more, ie, the work is done in IndexReader.open instead\nof the first query.  (Other things, like populating FieldCache,\nloading norms, still happen on the first query of course...).\n\nbq. A much better application fix is to simply limit the number of threads executing queries.\n\nWell... if your hardware has concurrency, is it really the case that\nLucene never gets in the way?  I'd love to see this confirmed\nempirically.  Ie you should ideally be able to run as many threads as\nwill saturate your hardware, and see it scale properly.\n",
            "date": "2009-06-05T12:19:22.319+0000",
            "id": 13
        },
        {
            "author": "Michael McCandless",
            "body": "Alas... the big problem with doing this up-front is the IndexReader.setTermIndexInterval, which relies on the fact that the index is loaded lazily.\n\nSo, maybe we need to wait until 3.0 to do this up-front.\n\nBut perhaps for this issue we should make it possible to pass in the termIndexInterval to IndexReader.open, and deprecate the current methods, and then in 3.0 we could switch to up-front loading.",
            "date": "2009-06-10T20:08:33.483+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch.  This addresses this issue and LUCENE-1718.\n\nI added 2 new static IndexReader.open expert methods that allow you to\npass in the TermInfos index divisor.  You can pass in -1 to disable\nloading of the index entirely (eg, IndexWriter does this when merging\nsegments).  I also added the param to IndexWriter.getReader, so you\ncan get an NRT reader w/ subsampled index terms.\n\nThis replaces the set/getTermInfosIndexDivisor methods (they are now\ndeprecated), ie you now must specify the divisor when opening the\nreader.  If these methods are called, an UnsupportedOperationException\nis thrown.  This is technically a break in back compat (previously you\ncould call it before the terms index was used, eg if no searches had\nbeen run) but I think we should make an exception here.  Very few\nusers make use of these expert methods, and having these users switch\nto specifying the index divisor up front is a small code change in\nexchange for removing all synchronization from the terms dict.\n\nI also made all attrs in TermInfosReader final, and there is no longer\nany synchronization.  To handle the case in IndexWriter, where a merge\nfirst opens a segment (which does not need the index) and then an NRT\nreader (or, applyDeletes) needs to share the same pooled reader and\nneeds the terms index, I added a PrivateTermsDict static class to\nSegmentReader.  This class just wraps a no-index-loaded\nTermInfosReader, which merging will use, and then can open a new\nindex-is-loaded TermInfosReader when/if needed.\n",
            "date": "2009-07-06T19:17:55.481+0000",
            "id": 15
        },
        {
            "author": "Michael McCandless",
            "body": "Updated patch to resolve conflicts after LUCENE-1726... I plan to commit soon.",
            "date": "2009-07-10T18:10:17.496+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "Reopening to un-deprecate getTermInfosIndexDivisor.",
            "date": "2009-07-22T23:38:20.596+0000",
            "id": 17
        }
    ],
    "component": "core/index",
    "description": "synchronized method ensureIndexIsRead in TermInfosReader causes contention under heavy load\n\nSimple to reproduce: e.g. Under Solr, with all caches turned off, do a simple range search e.g. id:[0 TO 999999] on even a small index (in my case 28K docs) and under a load/stress test application, and later, examining the Thread dump (kill -3) , many threads are blocked on 'waiting for monitor entry' to this method.\n\nRather than using Double-Checked Locking which is known to have issues, this implementation uses a state pattern, where only one thread can move the object from IndexNotRead state to IndexRead, and in doing so alters the objects behavior, i.e. once the index is loaded, the index nolonger needs a synchronized method. \n\nIn my particular test, this uncreased throughput at least 30 times.\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1609",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Eliminate synchronization contention on initial index reading in TermInfosReader ensureIndexIsRead ",
    "systemSpecification": true,
    "version": "2.9"
}