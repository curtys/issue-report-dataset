{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "the logic of this class is broken: the field parameter taken here is just to specify the fieldname passed to the Analyzer when analyzing the tokens (e.g. some analyzers behave differently depending upon field).\n\nThere should be no loop across fields... instead you should be forced to provide this fieldname as an argument if you pass in a reader (analyze this content with my analyzer using field X)\n\nAs far as I can tell, this has been broken for a long time: if your analyzer works the same way across all fields you would previously never notice a problem, because it would analyze the text with the \"first\" one, but didnt close the reader, passing an exhausted reader across other field names.",
            "date": "2011-07-18T07:40:40.716+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "here is a patch, that requires fieldname.\n\nplaces using this Reader method before such as Solr and xml-query-parser just pass field[0], to get the old effect of the non-reader-closing version, but really they should separately have configurable what field is passed to the analyzer for analysis.\n\nalso i nuked these File, URL methods, because for example the MoreLikeThisQuery was using default charset!",
            "date": "2011-07-18T08:08:58.217+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "+1 nuke default charset shit!",
            "date": "2011-07-18T08:16:09.825+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "thanks for reporting this Trejkaz!",
            "date": "2011-07-18T14:25:09.885+0000",
            "id": 3
        },
        {
            "author": "Carl Austin",
            "body": "In case you were unaware (as the JIRA says affects 3.3) this also affects 3.2 as I have just reproduced it.\nThanks.",
            "date": "2011-07-28T13:38:07.033+0000",
            "id": 4
        }
    ],
    "component": "modules/other",
    "description": "MoreLikeThis has a fatal bug whereby it tries to reuse a reader for multiple fields:\n\n{code}\n    Map<String,Int> words = new HashMap<String,Int>();\n    for (int i = 0; i < fieldNames.length; i++) {\n        String fieldName = fieldNames[i];\n        addTermFrequencies(r, words, fieldName);\n    }\n{code}\n\nHowever, addTermFrequencies() is creating a TokenStream for this reader:\n\n{code}\n    TokenStream ts = analyzer.reusableTokenStream(fieldName, r);\n    int tokenCount=0;\n    // for every token\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    ts.reset();\n    while (ts.incrementToken()) {\n        /* body omitted */\n    }\n    ts.end();\n    ts.close();\n{code}\n\nWhen it closes this analyser, it closes the underlying reader.  Then the second time around the loop, you get:\n\n{noformat}\nCaused by: java.io.IOException: Stream closed\n\tat sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:27)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:128)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:167)\n\tat com.acme.util.CompositeReader.read(CompositeReader.java:101)\n\tat org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzRefill(StandardTokenizerImpl.java:803)\n\tat org.apache.lucene.analysis.standard.StandardTokenizerImpl.getNextToken(StandardTokenizerImpl.java:1010)\n\tat org.apache.lucene.analysis.standard.StandardTokenizer.incrementToken(StandardTokenizer.java:178)\n\tat org.apache.lucene.analysis.standard.StandardFilter.incrementTokenClassic(StandardFilter.java:61)\n\tat org.apache.lucene.analysis.standard.StandardFilter.incrementToken(StandardFilter.java:57)\n\tat com.acme.storage.index.analyser.NormaliseFilter.incrementToken(NormaliseFilter.java:51)\n\tat org.apache.lucene.analysis.LowerCaseFilter.incrementToken(LowerCaseFilter.java:60)\n\tat org.apache.lucene.search.similar.MoreLikeThis.addTermFrequencies(MoreLikeThis.java:931)\n\tat org.apache.lucene.search.similar.MoreLikeThis.retrieveTerms(MoreLikeThis.java:1003)\n\tat org.apache.lucene.search.similar.MoreLikeThis.retrieveInterestingTerms(MoreLikeThis.java:1036)\n{noformat}\n\nMy first thought was that it seems like a \"ReaderFactory\" of sorts should be passed in so that a new Reader can be created for the second field (maybe the factory could be passed the field name, so that if someone wanted to pass a different reader to each, they could.)\n\nInterestingly, the methods taking File and URL exhibit the same issue.  I'm not sure what to do about those (and we're not using them.)  The method taking File could open the file twice, but the method taking a URL probably shouldn't fetch the same URL twice.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3326",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "MoreLikeThis reuses a reader after it has already closed it",
    "systemSpecification": true,
    "version": "3.3"
}