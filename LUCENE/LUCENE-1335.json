{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "\nAttached patch.  Here're the changes:\n\n  * Only one addIndexes can run at once, so call to 2nd or more\n    addIndexes just blocks until the one is done.\n\n  * close() and rollback() wait for any running addIndexes to finish\n    and then blocks new addIndexes calls\n\n  * commit() waits for any running addIndexes, or any already running\n    commit, to finish, then quickly takes a snapshot of the segments\n    and syncs the files referenced by that snapshot.  While syncing is\n    happening addIndexes are then allowed to run again.\n\n  * optimize() is allowed to run concurrently with addIndexes; the two\n    simply wait for their respective merges to finish.\n\nI think we should not make any API promises about what it means when\nthese methods (commit, close, rollback, optimize, addIndexes) are\ncalled concurrently from different threads, except that the methods\nall work correctly, IndexWriter won't throw an errant exception, and\nyour index won't become corrupt.\n\nI made one additional change which is technically a break in backwards\ncompatibility, but I think (?) a minor acceptable one: I no longer\nallow the same Directory to be passed into addIndexes* more than once.\nThis was necessary because we identify a SegmentInfo by its\nDirectory/name pair, and passing in the same Directory allowed dup\nSegmentInfo instances to enter SegmentInfos, which is dangerous.\n\nI'll wait a few days before committing.\n",
            "date": "2008-08-05T10:08:40.812+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "{quote}I think we should not make any API promises about what it means when\nthese methods (commit, close, rollback, optimize, addIndexes) are\ncalled concurrently from different threads, except that the methods\nall work correctly, IndexWriter won't throw an errant exception, and\nyour index won't become corrupt.{quote}\n\nAgree... higher level synchronization by the user is the right way to ensure/enforce an ordering.",
            "date": "2008-08-05T14:14:28.626+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "I've just started reviewing this patch.\nSince doWait() can return after 1 sec, the pattern is to use a while loop with the condition that caused it to be called.\nBut in some cases, it's hard to tell if the code is correct.... for example copyExternalSegments() is hard because of the other non-trival code code in the loop where  it's not clear if it's safe/correct to call that code again.  Perhaps registerMerge() detects the conflict with another merge with the same segments and that's what keeps things correct?  Comments to the effect of why it's OK to run certain code more than once would be very welcome.",
            "date": "2008-08-07T18:41:43.473+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks, Yonik.  I'll add a comment there, and any other places where I call doWait that look similarly confusing...",
            "date": "2008-08-07T19:28:34.812+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Improved comments in expungeDeletes & copyExternalSegments.",
            "date": "2008-08-07T19:44:26.903+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Yonik, any more feedback on this patch?",
            "date": "2008-08-12T11:14:23.220+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "I plan to commit this in a day or two.",
            "date": "2008-08-19T20:02:02.787+0000",
            "id": 6
        },
        {
            "author": "Ning Li",
            "body": "Hi Mike, could you update the patch? I cannot apply it. Thanks!",
            "date": "2008-08-22T14:40:36.975+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "OK, attached refreshed patch to trunk.",
            "date": "2008-08-22T15:23:49.406+0000",
            "id": 8
        },
        {
            "author": "Ning Li",
            "body": "I agree that we should not make any API promises about what\nit means when the methods (commit, close, rollback, optimize,\naddIndexes) are called concurrently from different threads.\nThe discussion below is on their current behavior.\n\n> Only one addIndexes can run at once, so call to 2nd or more\n> addIndexes just blocks until the one is done.\n\nThis is achieved by the read-write lock.\n\n> close() and rollback() wait for any running addIndexes to finish\n> and then blocks new addIndexes calls\n\nJust to clarify: close(waitForMerges=false) and rollback() make\nan ongoing addIndexes[NoOptimize](dirs) abort, but wait for\naddIndexes(readers) to finish. It'd be nice if they make any\naddIndexes* abort for a quick shutdown, but that's for later.\n\n> commit() waits for any running addIndexes, or any already running\n> commit, to finish, then quickly takes a snapshot of the segments\n> and syncs the files referenced by that snapshot. While syncing is\n> happening addIndexes are then allowed to run again.\n\ncommit() and commit(long) use the read-write lock to wait for\na running addIndexes. \"committing\" is used to serialize commit()\ncalls. Why isn't it also used to serialize commit(long) calls?\n\n> optimize() is allowed to run concurrently with addIndexes; the two\n> simply wait for their respective merges to finish.\n\nThis is nice.\n\nMore detailed comments:\n- In finishMerges, acquireRead and releaseRead are both called.\n  Isn't addIndexes allowed again?\n\n- In copyExternalSegments, merges involving external segments\n  are carried out in foreground. So why the changes? To relax\n  that assumption? But other part still makes the assumption.\n\n- addIndexes(readers) should optimize before startTransaction, no?\n\n- The newly added method segString(dir) in SegmentInfos is\n  not used anywhere.",
            "date": "2008-08-22T23:15:25.710+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "\n{quote}\nJust to clarify: close(waitForMerges=false) and rollback() make\nan ongoing addIndexes[NoOptimize](dirs) abort, but wait for\naddIndexes(readers) to finish. It'd be nice if they make any\naddIndexes* abort for a quick shutdown, but that's for later.\n{quote}\n\nTrue, agreed.\n\n{quote}\ncommit() and commit(long) use the read-write lock to wait for\na running addIndexes. \"committing\" is used to serialize commit()\ncalls. Why isn't it also used to serialize commit(long) calls?\n{quote}\n\nIt's because commit() calls prepareCommit(), which throws a\n\"prepareCommit was already called\" exception if the commit was already\nprepared.  Whereas commit(long) doesn't call prepareCommit (eg, it\ndoesn't need to flush).  Without this, I was hitting exceptions in one\nof the tests that calls commit() from multiple threads at the same\ntime.\n\n{quote}\n    * In finishMerges, acquireRead and releaseRead are both called.\n      Isn't addIndexes allowed again?\n{quote}\nThis is to make sure any just-started addIndexes cleanly finish or\nabort before we enter the wait loop.  I was seeing cases where the\nwait loop would think no more merges were pending, but in fact an\naddIndexes was just getting underway and was about to start merging.\nIt's OK if a new addIndexes call starts up, because it'll be forced to\ncheck the stop conditions (closing=true or stopMerges=true) and then\nabort the merges.  I'll add comments to this effect.\n\n{quote}\n    * In copyExternalSegments, merges involving external segments\n      are carried out in foreground. So why the changes? To relax\n      that assumption? But other part still makes the assumption.\n{quote}\nThis method has always carried out merges in the FG, but it's in fact\npossible that a BG merge thread on finishing a previous merge may pull\na merge involving external segments.  So I changed this method to wait\nfor all such BG merges to complete, because it's not allowed to return\nuntil there are no more external segments in the index.\n\nIt is tempting to fully schedule these external merges (ie allow them\nto run in BG), but there is a problem: if there is some error on doing\nthe merge, we need that error to be thrown in the FG thread calling\ncopyExternalSegments (so the transcaction above unwinds).  (Ie we\ncan't just stuff these external merges into the merge queue then wait\nfor their completely).  So I think we need to leave is as is?\n\n{quote}\n    * addIndexes(readers) should optimize before startTransaction, no?\n{quote}\n\nI had to move the optimize() inside the transaction because it could\nhappen that after the optimize() is finished, some other thread sneaks\nin a call to addIndexes* and gets additional segments added to the\nindex such that by the time we start the transaction we now have more\nthan one segment.\n\nBut this change will tie up more disk space than addIndexes used to\n(since it will also rollback the optimize on hitting an exception).\nReally I just need to pre-acquire the write lock, then I can leave\noptimize() out of the transaction.  I'll do that.\n\n{quote}\n    * The newly added method segString(dir) in SegmentInfos is\n      not used anywhere.\n{quote}\n\nYeah I was using this for internal debugging, and I think it's\ngenerally useful for future debugging, so I left it in.\n",
            "date": "2008-08-23T12:47:11.046+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "New patch incorporating Ning's comments (thanks Ning!).",
            "date": "2008-08-23T13:00:25.432+0000",
            "id": 11
        },
        {
            "author": "Ning Li",
            "body": "> It's because commit() calls prepareCommit(), which throws a\n> \"prepareCommit was already called\" exception if the commit was already\n> prepared.  Whereas commit(long) doesn't call prepareCommit (eg, it\n> doesn't need to flush).  Without this, I was hitting exceptions in one\n> of the tests that calls commit() from multiple threads at the same\n> time.\n\nIs it better to simplify things by serializing all commit()/commit(long) calls?\n\n> This is to make sure any just-started addIndexes cleanly finish or\n> abort before we enter the wait loop.  I was seeing cases where the\n> wait loop would think no more merges were pending, but in fact an\n> addIndexes was just getting underway and was about to start merging.\n> It's OK if a new addIndexes call starts up, because it'll be forced to\n> check the stop conditions (closing=true or stopMerges=true) and then\n> abort the merges.  I'll add comments to this effect.\n\nI wonder if we can simplify the logic... Currently in setMergeScheduler,\nmerges can start between finishMerges and set the merge scheduler.\nThis one can be fixed by making setMergeScheduler synchronized.\n\n> This method has always carried out merges in the FG, but it's in fact\n> possible that a BG merge thread on finishing a previous merge may pull\n> a merge involving external segments.  So I changed this method to wait\n> for all such BG merges to complete, because it's not allowed to return\n> until there are no more external segments in the index.\n\nHmm... so merges involving external segments may be in FG or BG?\nSo copyExternalSegments not only copies external segments, but also\nwaits for BG merges involving external segments to finish. We need\na better name?\n\n> It is tempting to fully schedule these external merges (ie allow them\n> to run in BG), but there is a problem: if there is some error on doing\n> the merge, we need that error to be thrown in the FG thread calling\n> copyExternalSegments (so the transcaction above unwinds).  (Ie we\n> can't just stuff these external merges into the merge queue then wait\n> for their completely).\n\nThen what about those BG merges involving external segments?",
            "date": "2008-08-23T15:49:58.677+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "\n{quote}\n\n> It's because commit() calls prepareCommit(), which throws a\n> \"prepareCommit was already called\" exception if the commit was already\n> prepared. Whereas commit(long) doesn't call prepareCommit (eg, it\n> doesn't need to flush). Without this, I was hitting exceptions in one\n> of the tests that calls commit() from multiple threads at the same\n> time.\n\nIs it better to simplify things by serializing all commit()/commit(long) calls?\n{quote}\n\nI don't think so: with autoCommit=true, the merges calls commit(long)\nafter finishing, and I think we want those commit calls to run\nconcurrently?\n\n{quote}\n> This is to make sure any just-started addIndexes cleanly finish or\n> abort before we enter the wait loop. I was seeing cases where the\n> wait loop would think no more merges were pending, but in fact an\n> addIndexes was just getting underway and was about to start merging.\n> It's OK if a new addIndexes call starts up, because it'll be forced to\n> check the stop conditions (closing=true or stopMerges=true) and then\n> abort the merges. I'll add comments to this effect.\n\nI wonder if we can simplify the logic... Currently in setMergeScheduler,\nmerges can start between finishMerges and set the merge scheduler.\nThis one can be fixed by making setMergeScheduler synchronized.\n{quote}\n\nGood catch -- I'll make setMergeScheduler synchronized.\n\n{quote}\n> This method has always carried out merges in the FG, but it's in fact\n> possible that a BG merge thread on finishing a previous merge may pull\n> a merge involving external segments. So I changed this method to wait\n> for all such BG merges to complete, because it's not allowed to return\n> until there are no more external segments in the index.\n\nHmm... so merges involving external segments may be in FG or BG?\nSo copyExternalSegments not only copies external segments, but also\nwaits for BG merges involving external segments to finish. We need\na better name?\n{quote}\n\nSure we can change the name -- do you have one in mind?  Maybe\n\"resolveExternalSegments\" or \"waitForExternalSegments\"?\n\n{quote}\n> It is tempting to fully schedule these external merges (ie allow them\n> to run in BG), but there is a problem: if there is some error on doing\n> the merge, we need that error to be thrown in the FG thread calling\n> copyExternalSegments (so the transcaction above unwinds). (Ie we\n> can't just stuff these external merges into the merge queue then wait\n> for their completely).\n\nThen what about those BG merges involving external segments?\n{quote}\n\nWhat'll happen is the BG merge will hit an exception, roll itself\nback, and then the FG thread will pick up the merge and try again.\nLikely it'll hit the same exception, which is then thrown back to the\ncaller.  It may not hit an exception, eg say it was disk full: the BG\nmerge was probably trying to merge 10 segments, whereas the FG merge\nis just copying over the 1 segment.  So it may complete successfully\ntoo.\n",
            "date": "2008-08-23T16:11:39.908+0000",
            "id": 13
        },
        {
            "author": "Ning Li",
            "body": "> I don't think so: with autoCommit=true, the merges calls commit(long)\n> after finishing, and I think we want those commit calls to run\n> concurrently?\n\nAfter we disable autoCommit, all commit calls will be serialized, right?\n\n\n> What'll happen is the BG merge will hit an exception, roll itself\n> back, and then the FG thread will pick up the merge and try again.\n> Likely it'll hit the same exception, which is then thrown back to the\n> caller.  It may not hit an exception, eg say it was disk full: the BG\n> merge was probably trying to merge 10 segments, whereas the FG merge\n> is just copying over the 1 segment.  So it may complete successfully\n> too.\n\nBack to the issue of running an external merge in BG or FG.\nIn ConcurrentMergeScheduler.merge, an external merge is run in FG,\nnot in BG. But in ConcurrentMergeScheduler.MergeThread.run,\nwhether a merge is external is no longer checked. Why this difference?\n",
            "date": "2008-08-25T18:36:21.840+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\n> I don't think so: with autoCommit=true, the merges calls commit(long)\n> after finishing, and I think we want those commit calls to run\n> concurrently?\n\nAfter we disable autoCommit, all commit calls will be serialized, right?\n{quote}\n\nRight.\n\n{quote}\nBack to the issue of running an external merge in BG or FG.\nIn ConcurrentMergeScheduler.merge, an external merge is run in FG,\nnot in BG. But in ConcurrentMergeScheduler.MergeThread.run,\nwhether a merge is external is no longer checked. Why this difference?\n{quote}\nGood point!  We no longer need to check for isExternal in CMS's merge() method -- we can run all merges in the BG.  In fact I think it's no longer necessary to even compute & record isExternal (this was its only use).  Hmmm, except when I take this out I'm seeing testAddIndexOnDiskFull hang.  I'll dig.",
            "date": "2008-08-25T21:30:33.173+0000",
            "id": 15
        },
        {
            "author": "Michael McCandless",
            "body": "OK new patch attached with changes discussed above.\n\nI did fix CMS to happily perform merges involving external segments\nwith its BG threads.  The hang I was seeing before was because as each\nBG thread hit the disk-full exception (in the test), it would abort\nthat thread, and eventually no threads were doing merges even though\nmerges were still pending.  So copyExternalSegments would then\nwait forever.\n\nThe fix was simple: I changed resolveExternalSegments (renamed from\ncopyExternalSegments) to pick up any pending merges that involve\nexternal segments and run the merge itself, only falling back to the\n\"wait\" call when all such merges were already in progress in CMS.\nThis way the disk full error is hit in the FG and the transaction (in\naddIndexesNoOptimize) unwinds.\n",
            "date": "2008-08-26T16:06:37.889+0000",
            "id": 16
        },
        {
            "author": "Ning Li",
            "body": "Maybe this should be a separate JIRA issue. In doWait(), the comment says \"as a defense against thread timing hazards where notifyAll() falls to be called, we wait for at most 1 second...\" In some cases, it seems that notifyAll() simply isn't called, such as some of the cases related to runningMerges. Maybe we should take a closer look at and possibly simplify the concurrency control in IndexWriter, especially when autoCommit is disabled?",
            "date": "2008-08-27T15:23:24.668+0000",
            "id": 17
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Maybe we should take a closer look at and possibly simplify the concurrency control in IndexWriter, especially when autoCommit is disabled?\n\nI agree -- I'm looking forward to taking autoCommit=true case out in 3.0.  I'll try to simplify the concurrency control at that point, and test for any deadlocks if doWait is replaced with the \"real\" wait(), to catch any missing notifyAll()'s.",
            "date": "2008-08-27T22:21:21.368+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "Ning (or anyone), any more feedback on this one?  Else I plan to commit soon...",
            "date": "2008-08-29T00:19:21.980+0000",
            "id": 19
        },
        {
            "author": "Michael McCandless",
            "body": "Committed revision 690537",
            "date": "2008-08-30T17:17:04.840+0000",
            "id": 20
        }
    ],
    "component": "core/index",
    "description": "Spinoff from here:\n\n    http://mail-archives.apache.org/mod_mbox/lucene-java-dev/200807.mbox/%3Cc7b302c50807111018j58b6d08djd56b5889f6b3780d@mail.gmail.com%3E",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1335",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Correctly handle concurrent calls to addIndexes, optimize, commit",
    "systemSpecification": true,
    "version": "2.3, 2.3.1"
}