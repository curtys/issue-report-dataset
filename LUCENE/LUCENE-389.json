{
    "comments": [
        {
            "author": "John Wang",
            "body": "Created an attachment (id=15064)\nNullQuery, which just returns all documents in the index each with initial\nscore of 1.0f\n\nAn implementation of a \"NUllQuery\" that returns all documents in the index each\nwith initial score of 1.0f.",
            "date": "2005-05-18T10:50:16.000+0000",
            "id": 0
        },
        {
            "author": "John Wang",
            "body": "Created an attachment (id=15074)\nNulQuery, which just returns all documents in the index, each with initial\nscore of 1,0f\n\nForgot the same before attaching :)",
            "date": "2005-05-19T01:39:09.000+0000",
            "id": 1
        },
        {
            "author": "Paul Elschot",
            "body": "A query returning all docs can indeed be useful on occasion, it was the subject \nof some recent messages on the java-user list. \n \nSome remarks: \n- MatchAllDocsQuery might be a better name, NullQuery could also to suggest \n  not matching any docs at all (which can also be useful on occasion btw.) \n- The scorer uses an int[] for all the non deleted docs which can be \n  a rather high burden on memory and initialisation. This could be avoided \n  by using the information on deleted docs from the reader directly \n  in the scorer. \n- The score value is a constant, and queries with this property are \n  currently under discussion on java-dev. This might become a special \n  case of the filters discussed there. \n \nRegards, \nPaul Elschot   ",
            "date": "2005-05-19T02:59:10.000+0000",
            "id": 2
        },
        {
            "author": "John Wang",
            "body": "Created an attachment (id=15092)\nmade changes as specified by previous suggestions.\n\nExcellent points!\nBoth 1) and 2) are fixed as specified.\n\nI am not sure I understand #3.\n",
            "date": "2005-05-21T01:37:46.000+0000",
            "id": 3
        },
        {
            "author": "Tony Smith-Grieco",
            "body": "I think there is a bug in the skipTo() method of the Scorer.  Shouldn't the \nfirst line be:\n\n_count = target - 1;\n\nBecause next() will automatically increment _count.\n\nAs it stands, skipTo() will actually skip *over* target, which is wrong.\n",
            "date": "2005-07-09T07:19:48.000+0000",
            "id": 4
        },
        {
            "author": "Daniel Naber",
            "body": "Thanks, I just committed this class plus a test case. I also added Tony's \nsuggested fix, removed the underscores from the variable names and removed the \ncall the super(). ",
            "date": "2005-08-21T21:27:11.000+0000",
            "id": 5
        }
    ],
    "component": "core/search",
    "description": "It would be nice to have a type of query just return all documents from an index.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-389",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "MatchAllDocsQuery to return all documents",
    "systemSpecification": false,
    "version": ""
}