{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "Sounds like a good idea!",
            "date": "2006-12-05T01:45:05.000+0000",
            "id": 0
        },
        {
            "author": "Doron Cohen",
            "body": "I tried two implementations:\n(1) writing d-gaps for ids of deleted docs, and \n(2) writing d-gaps for indexes of non zero bytes in the \"byte bits []\" array, plus the non-zero byte itself. \n\nI favor (2) because it needs less CPU and because its code is simpler. \n\nI ran the following performance test (Win XP, ~2GHz, 2GB RAM):\n- create an index with 2,000,000 short docs.\n- delete 4,000 docs in steps of 8: 0, 8, 16, 24, ...\n(\"steps of 8\" is worst case for the new code, because this way a single written byte never covers more than one deleted doc.)\n\nResults for original code:\n\nOperation......runCnt...recsPerRun........rec/s..elapsedSec\nDeletions_4000......1........12000........232.1.......51.70\nOpenReader.-..-..4000.-..-..-..-.1.-..-...150.0.-..-..26.67\nDeleteDoc........4000............1......1,542.6........2.59\nCloseReader.-....4000.-..-..-..-.1.-..-...180.0.-..-..22.23\n\nSize of the .del file was 245KB.\n\nResults for new code:\n\nOperation......runCnt...recsPerRun........rec/s..elapsedSec\nDeletions_4000......1........12000........263.8.......45.49\nOpenReader.-..-..4000.-..-..-..-.1.-..-...173.3.-..-..23.08\nDeleteDoc........4000............1......1,679.3........2.38\nCloseReader.-....4000.-..-..-..-.1.-..-...201.4.-..-..19.86\n\nSize of .del file was (at the end) 8KB. \n\nSo the improvement in this somewhat artificial scenario was 13%. \n(I initially thought it would be higher).\n\nI noticed when running repeatedly that the new code run time is more steady, while the original code run time fluctuates - e.g. 58.8, 51.7, 56.0, 51.8 (reported above are the best times.)\n\nWe should ask: is this improvement sufficient to justify making BitVector code less simple?\nIs a shorter .del file an advantage by itself?\nI tend to \"yes\" for both questions, but would like to hear more opinions.\n\nChange is backwards compatible - when opening a .del file (actually a bit-vector file) that was written with older version, it identifies that and reads it correctly. Existing backwards compatibility tests (of lock-less commits) have .del files that are opened correctly with new code.\n\nI added a test case to BitVectorTest - it tests the switch from writing d-gaps to writing bits as the number of set bits increases or decreases.\nThis test also shows for what range of values d-gaps are written:\n- size=100: never\n- size=1,000: count < 6\n- size=10,000: count < 42\n- size=100,000: count < 417\n- size=1,000,000: count < 3125\n\nAll tests pass.\n",
            "date": "2006-12-06T21:19:35.000+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "Doron, I agree with what you have described so far.\nOne question... are d-gaps written as a 4 byte integer or as a variable vInt, and what\ndrove the decision behind that?",
            "date": "2006-12-06T21:35:01.000+0000",
            "id": 2
        },
        {
            "author": "Doron Cohen",
            "body": "Patch added: \"del.dgap.patch.txt\" for the above optn \"(1) writing d-gaps for ids of deleted docs\".\n\nPatch changes index format, but is backwards compatible.\n\nI still need to update the FileFormats document - will add that part of the patch later.\n",
            "date": "2006-12-06T21:40:52.000+0000",
            "id": 3
        },
        {
            "author": "Doron Cohen",
            "body": "> are d-gaps written as a 4 byte integer or as a variable vInt, \n> and what drove the decision behind that? \n\nVints are used, to save space. Vints (max) size is taken into acount in isSparse().",
            "date": "2006-12-06T21:43:40.000+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "Did a quick code review, everything looks good to me.\n+1",
            "date": "2006-12-06T22:15:35.000+0000",
            "id": 5
        },
        {
            "author": "Doron Cohen",
            "body": "FileFormat document updated to reflect this format change.",
            "date": "2006-12-07T08:14:34.000+0000",
            "id": 6
        },
        {
            "author": "Yonik Seeley",
            "body": "Committed.  Thanks Doron!",
            "date": "2006-12-11T02:06:14.000+0000",
            "id": 7
        }
    ],
    "component": "core/store",
    "description": ".del file of a segment maintains info on deleted documents in that segment. The file exists only for segments having deleted docs, so it does not exists for newly created segments (e.g. resulted from merge). Each time closing an index reader that deleted any document, the .del file is rewritten. In fact, since the lock-less commits change a new (generation of) .del file is created in each such occasion.\n\nFor small indexes there is no real problem with current situation. But for very large indexes, each time such an index reader is closed, creating such new bit-vector seems like unnecessary overhead in cases that the bit vector is sparse (just a few docs were deleted). For instance, for an index with a segment of 1M docs, the sequence: {open reader; delete 1 doc from that segment; close reader;} would write a file of ~128KB. Repeat this sequence 8 times: 8 new files of total size of 1MB are written to disk.\n\nWhether this is a bottleneck or not depends on the application deletes pattern, but for the case that deleted docs are sparse, writing just the d-gaps would save space and time. \n\nI have this (simple) change to BitVector running and currently trying some performance tests to, yet, convince myself on the worthiness of this.\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-738",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "read/write .del as d-gaps when the deleted bit vector is sufficiently sparse",
    "systemSpecification": true,
    "version": "2.1"
}