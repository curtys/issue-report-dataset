{
    "comments": [
        {
            "author": "Simon Willnauer",
            "body": "Maybe I miss something but IndexWriter#setMaxBufferedDeleteTerms can be used to set an upper bound for those terms. Once you hit the upper bound BufferedDeletes should be flushed to disc by calling IndexWriter#flush(). This can happend with either a add or a delete. Maybe I do not completely understand what you mean by materialized.",
            "date": "2009-06-25T10:19:44.236+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Sorry, you are correct -- that's the obvious workaround here.\n\nBut we default that to unlimited (meaning, flush when RAM limit is hit), which I think is a good default once we fix the accounting in IndexWriter to properly account for buffered delete's RAM usage.",
            "date": "2009-06-25T10:23:05.352+0000",
            "id": 1
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. But we default that to unlimited (meaning, flush when RAM limit is hit), which I think is a good default once we fix the accounting in IndexWriter to properly account for buffered delete's RAM usage.\nI agree we should track the ram usage of BufferedDeletes too.  \nOne other thing I wonder about is why deletesInRam is only cleared on abort. Once IndexWriter#doFlushInternal is executed the DocWriter pushes deletes from deletesInRam to deletesFlushed. Shouldn't this call deletesInRam#clear() to free the memory in this instance of BufferedDeletes. That could at least help a bit if I do not miss anything important.\n\n",
            "date": "2009-06-25T11:09:19.764+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "deletesInRAM is in fact cleared, on calling deletesFlushed.update(deletesInRAM).  Ie, that call \"transfers\" the deletesInRAM to deletesFlushed.\n\nThen, when applyDeletes is called, we clear deletesFlushed.",
            "date": "2009-06-25T11:15:59.776+0000",
            "id": 3
        },
        {
            "author": "Simon Willnauer",
            "body": "HA, true! I missed that. Nevermind!\nI did not catch it as it calls the clear methods directly instead of using BufferedDocs#clear(). Might be easier to catch if people look into that if we would call clear() instead. I will attach a patch for this beautification.",
            "date": "2009-06-25T11:25:25.376+0000",
            "id": 4
        },
        {
            "author": "Simon Willnauer",
            "body": "Regarding buffered delete's RAM usage, accounting an exact number is quite difficult in this case as there are many strings involved (Terms with field and value) . BufferedDeletes#terms stores <Term, Num> and BufferedDeletes#queries stores <Query, Num> in both cases the value part is easy to account while especially for query the memory consumption is hard to guess similarly the amount of memory a Term takes.\n\nOn the other hand I would like to have a notion of memory consumption os BufferedDeletes but the IndexWriters#setRAMBufferSizeMB javaDoc clearly says that this does not include the memory used by buffered deletes. I would rather tend to leave it as it is and make it clear in javadoc / wiki that setMaxBufferedDeleteTerms is the way to go if you run into memory problems. Feels quite ambiguous to estimate the memory of buffered deletes.\n\nbq. I think is a good default once we fix the accounting in IndexWriter to properly account for buffered delete's RAM usage.\nis there already an issue to fix the RAM usage? ",
            "date": "2009-06-25T12:55:36.747+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "bq. is there already an issue to fix the RAM usage?\n\nThis is the issue.\n\nI think even if our measure is not perfect we should try to take a stab at accounting for RAM usage of deletes; it's a trap, now.  We shouldn't set traps.",
            "date": "2009-06-25T13:32:24.526+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch.\n\nI made an estimate of RAM usage for buffered delete terms and docIDs that I think should be fairly close.  Buffered delete Query instances, however, are undercounted (I say this in the javadocs) since measuring that would be rather challenging.",
            "date": "2009-07-07T16:27:36.433+0000",
            "id": 7
        }
    ],
    "component": "",
    "description": "IndexWriter, with autoCommit false, is able to carry buffered deletes for quite some time before materializing them to docIDs (thus freeing up RAM used).\n\nIt's only on triggering a merge (or, commit/close) that the deletes are materialized and the RAM is freed.\n\nI expect this in practice is a smallish amount of RAM, but we should still fix it.\n\nI don't have a patch yet so if someone wants to grab this, feel free!!",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1717",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "IndexWriter does not properly account for the RAM consumed by pending deletes",
    "systemSpecification": true,
    "version": "2.4, 2.4.1"
}