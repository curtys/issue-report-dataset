{
    "comments": [
        {
            "author": "Kyle Maxwell",
            "body": "Here's the patch!  BTW, I'll edit the docs as soon as someone signs off that this is a good idea!",
            "date": "2007-10-05T01:06:50.776+0000",
            "id": 0
        },
        {
            "author": "Hoss Man",
            "body": "this class seems to assume that the ValueSourceQueries should be multipled ... but it would be just as easy to assume the should be added, or averaged.\n\nIt seems like it might make more sense if instead of a CustomMultiScoreQuery there was just a \"ProductValueSource\" class that took in a ValueSource[] and multiplied them",
            "date": "2007-10-05T01:50:01.907+0000",
            "id": 1
        },
        {
            "author": "Kyle Maxwell",
            "body": "Here's a slightly simpler version of the diff (v1).\n\nThe default behavior of CustomScoreQuery with multiple ValueSourceQueries does not matter to me.  I really want to be able to override it with custom logic.  Also note that multiplying twice is currently as simple as CustomScoreQuery(CustomScoreQuery(subQuery, value1), value2).  But what about things that aren't linear combinations?\n\nUse case:  I want the score to fall off exponentially as content ages, with a decay rate that varies on a per document basis.  \n\nEach document has three fields: \"text,\" \"created-at,\" and \"half-life.\"  Created-at is represented as a UNIX timestamp, and half-life in seconds.  I'm not sure that the following query is able to be expressed as nested queries.  There may be another way to do this, but this seems simple and elegant to me.\n\n{code:java}\npublic class DateDecayQuery extends CustomScoreQuery {\n\tpublic final double LOG2 = Math.log(2);\n\tprivate long now;\n\n\tpublic DateDecayQuery(Query subQuery) {\n\t\tsuper(subQuery, new ValueSourceQuery[] {\n\t\t\t\tnew FieldScoreQuery(\"created-at\", Type.INT),\n\t\t\t\tnew FieldScoreQuery(\"half-life\", Type.INT) });\n\t\tnow = new Date().getTime() / 1000; // UNIX timestamp;\n\t\tsetStrict(true);\n\t}\n\n\tpublic float customScore(int doc, float score, float fields[]) {\n\t\tfloat date = fields[0];\n\t\tfloat halfLife = fields[1];\n\t\tfloat dateScore = (float) Math.exp(LOG2 * (date - now) / halfLife);\n\t\treturn score * dateScore;\n\t}\n}\n{code}",
            "date": "2007-10-05T22:34:23.387+0000",
            "id": 2
        },
        {
            "author": "Doron Cohen",
            "body": "You could put this logic in your implementation of ValueSource, \npossibly constructed over multiple FieldCacheSources - \n\n{code:title=DateDecayQuery over multiple value sources}\npublic class DateDecayQuery extends CustomScoreQuery {\n\n  public DateDecayQuery(Query subQuery) {\n    super(subQuery, createValSrceQuery());\n    setStrict(true);\n  }\n\n  private static ValueSourceQuery createValSrceQuery() {\n    return new ValueSourceQuery(new HalfLifeValSrc());\n  }\n  \n  private static class HalfLifeValSrc extends ValueSource {\n    final ValueSource createdAt  = new IntFieldSource(\"created-at\");\n    final ValueSource halfLife  = new IntFieldSource(\"half-life\");\n    final long now = new Date().getTime() / 1000; // UNIX timestamp;\n    final double LOG2 = Math.log(2);\n\n    public DocValues getValues(final IndexReader reader) throws IOException {\n      final DocValues valsCreated = createdAt.getValues(reader);\n      final DocValues valsHalfLife = halfLife.getValues(reader);\n      return new DocValues(reader.maxDoc()) {\n        public float floatVal(int doc) {\n          float vCreated = valsCreated.floatVal(doc);\n          float vHalfLife = valsHalfLife.floatVal(doc);\n          return (float) Math.exp(LOG2 * (vCreated - now) / vHalfLife);\n        }\n      };\n    }\n  }\n}\n{code}\n\nThough usage is much simpler if this is added to the query.\n",
            "date": "2007-10-11T13:41:22.338+0000",
            "id": 3
        },
        {
            "author": "Kyle Maxwell",
            "body": "Ok, I'm satisfied with Doron's solution.  It'd be nice to see something like this in some documentation, somewhere.  The wiki is prolly appropriate.",
            "date": "2007-11-06T23:27:28.975+0000",
            "id": 4
        },
        {
            "author": "Kyle Maxwell",
            "body": "Hi, after trying out the combined valuesource implementation suggested by Doron, I've found it to be _extremely_ cumbersome and brittle in practice.  Therefore, I am reopening this ticket.  \n\n- Trying to get explain information from the sub-ValueSources was quite difficult.\n- There is much more code in my queries, leading to increased brittleness.\n- The way in which caching is handled is now unclear.\n\nCan this ticket please be reconsidered?  Thanks!",
            "date": "2007-12-02T00:17:48.460+0000",
            "id": 5
        },
        {
            "author": "Doron Cohen",
            "body": "{quote}\n    * The way in which caching is handled is now unclear.\n{quote}\n\nFor e.g. IntFieldSource caching is done in that level, so I am not sure \nI understand about what is unclear here.\n\n{quote}\n    *  Trying to get explain information from the sub-ValueSources was quite difficult.\n    * There is much more code in my queries, leading to increased brittleness.\n{quote}\n\nYes I agree about this part.\nI had the similar experience when combining field values, and decided to just live with that. \nIn a glance, the v2 patch seems to solve this nicely so I will look into committing this.\n\nThanks for bringing this up,\nDoron",
            "date": "2007-12-02T21:48:22.581+0000",
            "id": 6
        },
        {
            "author": "Doron Cohen",
            "body": "lucene-1019-multi-vsq.patch:\n* modified version2: \n** fixed hash() and equals()\n** added a multi vsq form of customExplain()\n** more documentation in customScore() and customExplain()\n** added test of multi vsq\n* fixed a bug in search.function tests\n\nAll tests pass. \nI intend to commit this in a few days. ",
            "date": "2007-12-05T10:50:03.937+0000",
            "id": 7
        },
        {
            "author": "Grant Ingersoll",
            "body": "Somewhat related, but any thoughts on some of the newer functionality in Solr?  I really hate to see such a divergence.",
            "date": "2007-12-06T11:54:45.155+0000",
            "id": 8
        },
        {
            "author": "Doron Cohen",
            "body": "When working on this I hoped that Solr would move to\nuse it, but by SOLR-192 it never happen. If someone in\nSolr is committed to do this I will definitely work on it\n(hoping there's nothing with the ne functionality in Solr\nthat breaks with our changes so far). I will ask in Solr.",
            "date": "2007-12-06T12:27:22.622+0000",
            "id": 9
        },
        {
            "author": "Doron Cohen",
            "body": "Committed, thanks Kyle!",
            "date": "2007-12-13T06:32:38.457+0000",
            "id": 10
        }
    ],
    "component": "core/search",
    "description": "CustomScoreQuery's constructor currently accepts a subQuery, and a ValueSourceQuery.  I would like it to accept multiple ValueSourceQueries.  The workaround of nested CustomScoreQueries works for simple cases, but it quickly becomes either cumbersome to manage, or impossible to implement the desired function.\n\nThis patch implements CustomMultiScoreQuery with my desired functionality, and refactors CustomScoreQuery to implement the special case of a CustomMultiScoreQuery with 0 or 1 ValueSourceQueries.  This keeps the CustomScoreQuery API intact.\n\nThis patch includes basic tests, more or less taken from the original implementation, and customized a bit to cover the new cases.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1019",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "CustomScoreQuery should support multiple ValueSourceQueries",
    "systemSpecification": true,
    "version": "2.2"
}