{
    "comments": [
        {
            "author": "Marc Zampetti",
            "body": "Adding patch file with complete changes. All tests passed and included additional test cases to test new functionality.",
            "date": "2009-07-15T17:11:06.763+0000",
            "id": 0
        },
        {
            "author": "Marc Zampetti",
            "body": "What is the status of having this patch reviewed and commited to the next 2.x release?",
            "date": "2009-07-30T18:52:49.075+0000",
            "id": 1
        },
        {
            "author": "Marc Zampetti",
            "body": "Incorrectly added the \"Fixed Version\" in the last update.",
            "date": "2009-07-30T18:53:43.017+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good Marc; I plan to commit shortly.\n\nI think it's unlikely we'll do a 2.4.2 release, since 2.9 is just around the corner (this will be included in 2.9).",
            "date": "2009-07-31T17:37:11.311+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Marc!",
            "date": "2009-07-31T17:41:18.417+0000",
            "id": 4
        },
        {
            "author": "Marc Zampetti",
            "body": "Thanks Michael. Look forward to getting my hands on 2.9 when its released.",
            "date": "2009-07-31T17:56:32.647+0000",
            "id": 5
        }
    ],
    "component": "modules/other",
    "description": "The Jakarta Regexp and Java Util Regex packages both support the ability to provides flags that alter the matching behavior of a given regular expression. While the java.util.regex.Pattern implementation supports providing these flags as part of the regular expression string, the Jakarta Regexp implementation does not.  Therefore, this improvement request is to add the capability to provide those modification flags to either implementation. \n\nI've developed a working implementation that makes minor additions to the existing code. The default constructor is explicitly defined with no arguments, and then a new constructor with an additional \"int flags\" argument is provided. This provides complete backwards compatibility. For each RegexCapabilties implementation, the appropriate flags from the regular expression package is defined as  FLAGS_XXX static fields. These are pass through to the underlying implementation. They are re-defined to avoid bleeding the actual implementation classes into the caller namespace.\n\nProposed changes:\n\nFor the JavaUtilRegexCapabilities.java, the following is the changes made.\n\n  private int flags = 0;\n  \n  // Define the optional flags from Pattern that can be used.\n  // Do this here to keep Pattern contained within this class.\n  \n  public final int FLAG_CANON_EQ = Pattern.CANON_EQ;\n  public final int FLAG_CASE_INSENSATIVE = Pattern.CASE_INSENSATIVE;\n  public final int FLAG_COMMENTS = Pattern.COMMENTS;\n  public final int FLAG_DOTALL = Pattern.DOTALL;\n  public final int FLAG_LITERAL = Pattern.LITERAL;\n  public final int FLAG_MULTILINE = Pattern.MULTILINE;\n  public final int FLAG_UNICODE_CASE = Pattern.UNICODE_CASE;\n  public final int FLAG_UNIX_LINES = Pattern.UNIX_LINES;\n  \n  /**\n   * Default constructor that uses java.util.regex.Pattern \n   * with its default flags.\n   */\n  public JavaUtilRegexCapabilities()  {\n    this.flags = 0;\n  }\n  \n  /**\n   * Constructor that allows for the modification of the flags that\n   * the java.util.regex.Pattern will use to compile the regular expression.\n   * This gives the user the ability to fine-tune how the regular expression \n   * to match the functionlity that they need. \n   * The {@link java.util.regex.Pattern Pattern} class supports specifying \n   * these fields via the regular expression text itself, but this gives the caller\n   * another option to modify the behavior. Useful in cases where the regular expression text\n   * cannot be modified, or if doing so is undesired.\n   * \n   * @flags The flags that are ORed together.\n   */\n  public JavaUtilRegexCapabilities(int flags) {\n    this.flags = flags;\n  }\n  \n  public void compile(String pattern) {\n    this.pattern = Pattern.compile(pattern, this.flags);\n  }\n\n\nFor the JakartaRegexpCapabilties.java, the following is changed:\n\n  private int flags = RE.MATCH_NORMAL;\n\n  /**\n   * Flag to specify normal, case-sensitive matching behaviour. This is the default.\n   */\n  public static final int FLAG_MATCH_NORMAL = RE.MATCH_NORMAL;\n  \n  /**\n   * Flag to specify that matching should be case-independent (folded)\n   */\n  public static final int FLAG_MATCH_CASEINDEPENDENT = RE.MATCH_CASEINDEPENDENT;\n \n  /**\n   * Contructs a RegexCapabilities with the default MATCH_NORMAL match style.\n   */\n  public JakartaRegexpCapabilities() {}\n  \n  /**\n   * Constructs a RegexCapabilities with the provided match flags.\n   * Multiple flags should be ORed together.\n   * \n   * @param flags The matching style\n   */\n  public JakartaRegexpCapabilities(int flags)\n  {\n    this.flags = flags;\n  }\n  \n  public void compile(String pattern) {\n    regexp = new RE(pattern, this.flags);\n  }\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1745",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add ability to specify compilation/matching flags to RegexCapabiltiies implementations",
    "systemSpecification": true,
    "version": "2.4.1"
}