{
    "comments": [
        {
            "author": "Erik Hatcher",
            "body": "Yes, please elaborate on why you need to subclass Token.",
            "date": "2005-09-23T08:43:59.000+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "Mostly to convey information across TokenFilters, and the single type string isn't sufficient.\nFor exampe, I'd like to have an int or long that can be used as 32 or 64 independent flags.\n\nIn general, having attributes you can dynamically attach to tokens allows to you decompose token filters to more basic functions and thus gives greater power to filter chains.\n\nSome use cases I can think of:\n - conditionals... mark tokens in one filter and conditionally act on them in another.\n\n - decouple the marking of tokens from the transformation of tokens... one could have a \n  TokenMatcherFilter that would tag certain tokens that matched a regex, for example.\n\n - protected tokens: mark certain words as \"do not change\", \"do not stem\", \"do not lowercase\" for instance.\n\n - mark tokens that are split from a larger token (for example when a camelCase filter splits \"fooBar\" into \"foo Bar\") so they may be treated differently by other filters\n \n - performance (hey it comes for free).  You can do things like StandardTokenFilter, which checks the type of the token and doesn't have to re-parse every single token.\n\nI've already had to implement TokenFilter functionality (protected tokens, token splitting and combining)  where I've had to stuff more functionallity than I'd like into a single filter because of then inability of one filter to provide more info to another.\n\nSo I think there's a strong case for being able to dynamically add attributes (set bit flags) on a token.  I planned on subclassing Token to achieve that.  But because I don't know what other people may need/want in the future, making it so one can provide extensions to Token via inheritance seems like a good thing.\n\n",
            "date": "2005-09-23T11:55:45.000+0000",
            "id": 1
        },
        {
            "author": "Mark Harwood",
            "body": ">>Mostly to convey information across TokenFilters\n\nCould you not achieve this communication using ThreadLocals?\n\nDo we know what the performance cost is of making Token non-final?\n\n",
            "date": "2005-09-23T16:57:32.000+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "> Could you not achieve this communication using ThreadLocals? \nYes, but it would make me queasy :-)\nPerformance would also be less than desirable because you would have to stick every token in a HashMap in that thread local and then retrieve them again in the next TokenFilter.\n\n> Do we know what the performance cost is of making Token non-final?\nThat is the key question.  There is no reason not to make it non-final if there isn't a performance impact.\n\nIn my general experience with recent hotspot JVMs, final on classes almost never make a difference.  \"final\" applied to variables, however, can still make a big difference.  I think the JVMs can tell if there are any loaded subclasses, and if not, treat it as final.\n\nIn the context of indexing, I couldn't detect any difference in speed.  I'll try and isolate it more.\n",
            "date": "2005-09-23T22:19:48.000+0000",
            "id": 3
        },
        {
            "author": "Mark Harwood",
            "body": "Yes it is slower/uglier. I was hoping you could spare the CPU cycles and solve your specific communication problem this ThreadLocal way rather than inflicting extra CPU cycles on everyone else :-)\nWould be interesting to know exactly what removing final is going to cost.",
            "date": "2005-09-24T01:07:10.000+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "As expected, I haven't been able to find a performance difference after applying this patch with 1.4.2 or 1.5 JVMs.\n\njava5 -server 10000000 TokCreate\ntime=10636\ntime=10636\ntime=10575\ntime=10705\ntime=10706\n\njava5 -server 10000000 TokCreate  // Token patch applied (non-final)\ntime=10595\ntime=10516\ntime=10575\ntime=10515\ntime=10525\n\njava5 -server 2000000 TokChain \ntime=9484\ntime=9473\ntime=9514\ntime=9494\ntime=9502\n\njava5 -server 2000000 TokChain  // Token patch applied (non-final)\ntime=9494\ntime=9434\ntime=9444\ntime=9443\ntime=9444\n\njava4 -server 10000000 TokCreate\ntime=9294\ntime=9323\ntime=9274\ntime=9344\ntime=9384\n\njava4 -server 10000000 TokCreate  // Token patch applied (non-final)\ntime=9254\ntime=9233\ntime=9283\ntime=9283\ntime=9224\n\njava4 -server 2000000 TokChain\ntime=7150\ntime=7171\ntime=7171\ntime=7120\ntime=7160\n\njava4 -server 2000000 TokChain // Token patch applied (non-final)\ntime=7101\ntime=7150\ntime=7140\ntime=7160\ntime=7110\n\njava5 -client 10000000 TokCreate  \ntime=23384\ntime=23253\ntime=23534\n\njava5 -client 10000000 TokCreate  // Token patch applied (non-final)\ntime=23373\ntime=23694\ntime=23384\n",
            "date": "2005-09-24T06:47:16.000+0000",
            "id": 5
        },
        {
            "author": "Yonik Seeley",
            "body": "token performance tests",
            "date": "2005-09-24T06:49:19.000+0000",
            "id": 6
        },
        {
            "author": "Doug Cutting",
            "body": "+1  This sounds like a good change.",
            "date": "2006-05-10T02:20:21.000+0000",
            "id": 7
        },
        {
            "author": "Yonik Seeley",
            "body": "committed.",
            "date": "2006-06-02T04:15:39.000+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "Closing all issues that were resolved for 2.1.",
            "date": "2007-02-27T18:10:32.753+0000",
            "id": 9
        }
    ],
    "component": "",
    "description": "The Token class should be more friendly to classes not in it's package:\n  1) add setTermText()\n  2) remove final from class and toString()\n  3) add clone()\n\nSupport for (1):\n  TokenFilters in the same package as Token are able to do things like \n   \"t.termText = t.termText.toLowerCase();\" which is more efficient, but more importantly less error prone.  Without the ability to change *only* the term text, a new Token must be created, and one must remember to set all the properties correctly.  This exact issue caused this bug:\nhttp://issues.apache.org/jira/browse/LUCENE-437\n\nSupport for (2):\n  Removing final allows one to subclass Token.  I didn't see any performance impact after removing final.\nI can go into more detail on why I want to subclass Token if anyone is interested.\n\nSupport for (3):\n  - support for a synonym TokenFilter, where one needs to make two tokens from one (same args that support (1), and esp important if instance is a subclass of Token).",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-438",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "add Token.setTermText(), remove final",
    "systemSpecification": false,
    "version": ""
}