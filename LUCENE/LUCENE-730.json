{
    "comments": [
        {
            "author": "Paul Elschot",
            "body": "This patches BooleanScorer2 to use BooleanScorer in the score(HitCollector) method.\nThis also patches BooleanScorer to accept a minimum number of optional matchers.\n\nThe patch also disables some test code: the use of checkSkipTo in QueryUtils\ncaused a test failure in TestBoolean2 with the above changes. I think this\ncould be expected because of the changed document scoring order\nfor top level disjunction queries.\nAt the moment I don't know how to resolve this.\n\nWith the complete patch, all tests pass here.\n",
            "date": "2006-11-27T20:37:45.000+0000",
            "id": 0
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Just a quick note that I contacted Stanislav Jordanov about Paul's patch here.  Stanislav only used BooleanScorer.setUseScorer14() and that restored performance for him, but he did not try this patch (and won't be doing that as he's not working with Lucene at the moment).\n",
            "date": "2007-04-14T21:44:24.578+0000",
            "id": 1
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Paul, what is special about the number 32 here (BooleanScorer2):\n\n+    if ((requiredScorers.size() == 0) &&\n+        prohibitedScorers.size() < 32) {\n+      // fall back to BooleanScorer, scores documents somewhat out of order\n+      BooleanScorer bs = new BooleanScorer(getSimilarity(), minNrShouldMatch);\n\nWhy can we use BooleanScorer if there are less than 32 prohibited clauses, but not otherwise?  Thanks.\n",
            "date": "2007-04-16T19:15:44.464+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "32 is the max number of required + prohibited clauses in the orig BooleanScorer (because it uses an int as a bitfield for each document in the current id range being considered).",
            "date": "2007-04-16T19:32:07.540+0000",
            "id": 3
        },
        {
            "author": "Paul Elschot",
            "body": "Further to Yonik's answer, I have not done any tests with prohibited scorers comparing BooleanScorer and BooleanScorer2.\n\nIt is quite possible that using skipTo() on any prohibited scorer (via BooleanScorer2) is generally faster than using BooleanScorer. Prohibited clauses in queries are quite seldom, so it is going to be difficult to find out whether a smaller value than 32 would be generally optimal.\n\n\n",
            "date": "2007-04-16T21:01:10.951+0000",
            "id": 4
        },
        {
            "author": "Otis Gospodnetic",
            "body": "I've committed this (changed a few minor things in the patch)...without benchmarking BS vs. BS2 with < 32 prohibited clauses.\n\nHm, if I exposed that 32 as a static setter method, then one could easily benchmark and compare BS vs. BS2 with Doron's contrib/benchmark.\n",
            "date": "2007-04-17T22:04:05.790+0000",
            "id": 5
        },
        {
            "author": "Michael Busch",
            "body": "As discussed on java-dev the default behavior of BooleanScorer should be to return the documents in order, because there are people who rely in their apps on that. Docs out of order should only be allowed if BooleanQuery.setUseScorer14(true) is set explicitly.",
            "date": "2007-05-24T20:39:22.997+0000",
            "id": 6
        },
        {
            "author": "Michael Busch",
            "body": "With this patch the old BooleanScorer is only used if BooleanQuery.setUseScorer14(true) is set. It also enables the tests in QueryUtils again that check if the docs are returned in order.\n\nAll tests pass.",
            "date": "2007-05-25T00:11:15.826+0000",
            "id": 7
        },
        {
            "author": "Paul Elschot",
            "body": "The patch applies cleanly here, all core tests pass.\nAnd I like the allowDocsOutOfOrder approach.\n",
            "date": "2007-05-26T07:45:08.728+0000",
            "id": 8
        },
        {
            "author": "Michael Busch",
            "body": "Thanks for reviewing, Paul!\n\nI will commit this soon if nobody objects...",
            "date": "2007-05-26T16:14:32.230+0000",
            "id": 9
        },
        {
            "author": "Paul Elschot",
            "body": "No objection, only some remarks.\n\nOne bigger issue:\n\nThe latest patch defaults to docs in order above performance,\nbut my personal taste is to have performance by default.\n\nAnd some smaller ones:\n\nOne could still adapt QueryUtills to take the possibility\nof docs out of order into account.\n\nSome performance tests with prohibited scorers could still\nbe needed to find out which of the boolean scorers does better\non them.\n",
            "date": "2007-05-26T19:17:54.666+0000",
            "id": 10
        },
        {
            "author": "Doron Cohen",
            "body": "Two comments: \n\nWith this patch the class BooleanWeight is not\nin (direct) use anymore - it is extended by \nBooleanWeight2 and then only the latter is used, \nand creates either Scorer2 or Scorer. We could \nget rid of BolleanWeight2, and have a single \nclass BooleanWeight.\n\nJavadocs for useScorer14 methods:\n  /**\n   * Indicates that 1.4 BooleanScorer should be used.\n   * Being static, This setting is system wide.\n   * Scoring in 1.4 mode may be faster.\n   * But note that unlike the default behavior, it does \n   * not guarantee that docs are collected in docid\n   * order. In other words, with this setting, \n   * {@link HitCollector#collect(int,float)} might be\n   * invoked first for docid N and only later for docid N-1. \n   */\n  public static void setUseScorer14(boolean use14) {\n\n  /**\n   * Whether 1.4 BooleanScorer should be used.\n   * @see #setUseScorer14(boolean)\n   */\n  public static boolean getUseScorer14() {\n",
            "date": "2007-05-26T22:38:42.214+0000",
            "id": 11
        },
        {
            "author": "Hoss Man",
            "body": "\n> The latest patch defaults to docs in order above performance,\n> but my personal taste is to have performance by default.\n\nI think it makes more sense to \"default\" to the most consistent rigidly defined behavior (docs in order), since that behavior will work (by definition) for any caller regardless of whether the caller expects the docs in order or not.\n\npeople who find performance lacking can then assess their needs and make a conscious choice to change the setting, and see if it actually improves performance in their use cases.\n\n(ie: \"avoid premature optimization\" and all that)",
            "date": "2007-05-26T23:42:22.395+0000",
            "id": 12
        },
        {
            "author": "Michael Busch",
            "body": "> The latest patch defaults to docs in order above performance,\n> but my personal taste is to have performance by default.\n\nI agree with Hoss here. IMO allowing docs out of order is a big\nAPI change. I think if people switch to 2.2 they just want it\nto work as before without having to add special settings. If \nthey need better performance for certain types of queries and \nthey know that their application can deal with docs out of order\nthey can enable the faster scoring. \nSo my vote is +1 for docs in order by default.\n\n> Some performance tests with prohibited scorers could still\n> be needed to find out which of the boolean scorers does better\n> on them. \n\nThat'd be helpful. However, I'm currently working on some other\nissues. Maybe you or others would have some time to run those\ntests?",
            "date": "2007-05-27T01:58:38.513+0000",
            "id": 13
        },
        {
            "author": "Michael Busch",
            "body": "> With this patch the class BooleanWeight is not\n> in (direct) use anymore - it is extended by \n> BooleanWeight2 and then only the latter is used, \n> and creates either Scorer2 or Scorer. We could \n> get rid of BolleanWeight2, and have a single \n> class BooleanWeight.\n\nAgree. Will do.\n\n> Javadocs for useScorer14 methods:\n\nThis is good! Thanks Doron, I will add the javadocs\nto my patch.",
            "date": "2007-05-27T02:00:37.594+0000",
            "id": 14
        },
        {
            "author": "Michael Busch",
            "body": "New patch with the following changes:\n\n- Removes BooleanWeight2\n- Javadocs for useScorer14 methods provided by Doron",
            "date": "2007-05-27T02:08:25.092+0000",
            "id": 15
        },
        {
            "author": "Paul Elschot",
            "body": "(Is the patch reversed? It did not apply at the first attempt,\nprobably because my working copy is not the same as the trunk.)\nAfter ant clean, the boolean tests still pass here:\nant -Dtestcase='TestBool*' test-core\n\nA slight improvement for the javadocs of BooleanQuery.java.\nIn the javadocs of the scorer() method it is indicated that a BooleanScorer2\nwill always be used, so it is better to mention here that BooleanScorer2\ndelegates to a 1.4 scorer in some cases:\n\n  /**\n   * Indicates that BooleanScorer2 will delegate\n   * the scoring to a 1.4 BooleanScorer\n   * for most queries without required clauses.\n   * Being static, this setting is system wide.\n   * Scoring in 1.4 mode may be faster.\n   * But note that unlike the default behavior, it does\n   * not guarantee that docs are collected in docid\n   * order. In other words, with this setting,\n   * {@link HitCollector#collect(int,float)} might be\n   * invoked first for docid N and only later for docid N-1.\n   */\n  public static void setUseScorer14(boolean use14) {\n    useScorer14 = use14;\n  }\n",
            "date": "2007-05-27T08:49:18.104+0000",
            "id": 16
        },
        {
            "author": "Michael Busch",
            "body": "> A slight improvement for the javadocs of BooleanQuery.java.\n> In the javadocs of the scorer() method it is indicated that a BooleanScorer2\n> will always be used, so it is better to mention here that BooleanScorer2\n> delegates to a 1.4 scorer in some cases:\n\nMaybe we should just deprecate the useScorer14 methods and add new methods\nallowDocsOutOfOrder. That should be easier to understand for the users. \nAnd probably most users don't know (or don't care about) the differences\nbetween BooleanScorer and BooleanScorer2 anyway.",
            "date": "2007-05-27T17:08:13.456+0000",
            "id": 17
        },
        {
            "author": "Michael Busch",
            "body": "New patch that deprecates the useScorer14 methods and adds new\nmethods:\n\n  /**\n   * Indicates whether hit docs may be collected out of docid\n   * order. In other words, with this setting, \n   * {@link HitCollector#collect(int,float)} might be\n   * invoked first for docid N and only later for docid N-1.\n   * Being static, this setting is system wide.\n   * If docs out of order are allowed scoring might be faster\n   * for certain queries (disjunction queries with less than\n   * 32 prohibited terms). This setting has no effect for \n   * other queries.\n   */\n  public static void setAllowDocsOutOfOrder(boolean allow);\n  \n  /**\n   * Whether hit docs may be collected out of docid order.\n   * @see #setAllowDocsOutOfOrder(boolean)\n   */\n  public static boolean getAllowDocsOutOfOrder();\n  \n\nI think this is easier to understand for the users because it \ntells them what they need to know (docs in or out of order) \nand hides technical details (BooleanScorer vs. BooleanScorer2).\n\nAll tests pass.\n",
            "date": "2007-05-27T19:20:07.791+0000",
            "id": 18
        },
        {
            "author": "Michael Busch",
            "body": "I just committed the latest patch. Thanks everyone!",
            "date": "2007-05-28T19:34:27.236+0000",
            "id": 19
        }
    ],
    "component": "core/search",
    "description": "This patch restores the performance of top level disjunctions. \nThe introduction of BooleanScorer2 had impacted this as reported\non java-user on 21 Nov 2006 by Stanislav Jordanov.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-730",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Restore top level disjunction performance",
    "systemSpecification": true,
    "version": ""
}