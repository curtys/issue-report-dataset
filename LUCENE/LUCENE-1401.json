{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "\nAchieving the migration from autoCommit=true to autoCommit=false is somewhat tricky.  As things stand now, all ctors that don't take autoCommit param still default autoCommit to true.\n\nMaybe we could  flip the autoCommit default to false, now, with the new ctors (the ones that take a MaxFieldLength).  This may be better since you have to explicitly update your code, anyway, to switch to IndexWriter's new ctors and so if we call this change out in the javadocs, users are more likely to catch it.  Whereas if we suddenly flip the default for autoCommit to false in 3.0, since there's no API signature change, users may not realize this had happened.\n\nOK I like that approach better.  Are there any objections?\n\nbq. But there are new constructors with this \"IndexWriter.MaxFieldLength mfl\" in it, that appear new in 2.4 but are deprecated\n\nI agree: we should not introduce new deprecated ctors.  I'll eliminate these.  This happened because there were two separate changes (addition of MaxFieldLength, and, deprecation of autoCommit).\n\n",
            "date": "2008-09-23T09:40:09.876+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch that removes the new deprecated ctors, and sets autoCommit=false for the new ctors (that take MaxFieldLength).\n\nThe bulk of the patch is fixing all places where we were calling the new deprecated ctors.",
            "date": "2008-09-23T22:02:47.878+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "This patch seems to work, the IndexWriters created by the MaxFieldLength ctors are with autocommit=false, I have seen this, because the segment file does not change during indexing.\n\nThere is on small thing (was also there before your patch):\nI use writer.setUseCompoundFile(true) to use compound files (which is also the default). It generates normally always only CFS files (on index creation, when optimizing,...). There is only one use case, when cfs and cfx files are generated:\n\n- Use IndexWriter with create=true\n- add documents to the index\n- optimize the index (without closing in between)\n\nAfter that the optimized index contains of one cfs and one cfx. During indexing (before optimization), I always see only cfs files for new segments (and for short times as usual the contents tfx,...).\n\nWhen optimizing the index after closing it or later after adding documents, i got only one cfs file.\n\nTwo questions:\n- Is this a small bug, which would be not release critical - but it is strange?\n- How can I enable creation of doc store (cfx) and cfs always, I found nothing in the docs. In my opinion the separate cfs/cfx files are good for search performance (right?).",
            "date": "2008-09-24T08:14:07.696+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "\nThat (cfx/cfs file creation) is actually \"normal\" behavior for\nLucene.\n\nWith autoCommit=false, in a single session of IndexWriter, Lucene\nwill share the doc store files (stored fields, term vectors) across\nmultiple segments.  This saves alot of merge time because those files\ndon't need to be merged if we are merging segments that all share the\nsame doc store files.  When building up a large index anew this saves\nalot of time.\n\nA cfx file is the compound-file format of the doc store files.\n\nHowever, when segments spanning multiple doc stores are merged, then\nthe doc store files are in fact merged, and written privately for that\none segment, and then folded into that segment's cfs file.  When all\nsuch segments reference a given doc store segment are merged away,\nthen that doc store segment is deleted.\n\nSo it's currently only the \"level 0\" segments that may share a cfx\nfile.  As a future optimization we could consider extending Lucene's\nindex format so that a single segment could reference multiple doc\nstores.  This would require logic in FieldsReader and\nTermVectorsReader to do a binary search when locating which doc store\nsegment holds a given document, but, would enable merging non level 0\nsegments to skip having to merge the doc store.  This is an invasive\noptimization.\n\nSo you can't separately control when Lucene uses cfx file; it's the\nmerge policy that indirectly controls this.",
            "date": "2008-09-24T10:02:15.096+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "Thanks for the info, it did not know this!",
            "date": "2008-09-24T14:31:45.462+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "Committed revision 698932 on trunk (2.9) and 698933 on 2.4.  Thanks Uwe!",
            "date": "2008-09-25T12:07:46.848+0000",
            "id": 5
        }
    ],
    "component": "core/index",
    "description": "I am currently changing my code to be most compatible with 2.4. I switched on deprecation warnings and got a warning about the autoCommit parameter in IndexWriter constructors.\n\nMy code *should* use autoCommit=false, so I want to use the new semantics. The default of IndexWriter is still autoCommit=true. My problem now: How to disable autoCommit whithout deprecation warnings?\n\nMaybe, the \"old\" constructors, that are deprecated should use autoCommit=true. But there are new constructors with this \"IndexWriter.MaxFieldLength mfl\" in it, that appear new in 2.4 but are deprecated:\n\nIndexWriter(Directory d, boolean autoCommit, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, IndexWriter.MaxFieldLength mfl) \n          Deprecated. This will be removed in 3.0, when autoCommit will be hardwired to false. Use IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength) instead, and call commit() when needed.\n\nWhat the hell is meant by this, a new constructor that is deprecated? And the hint is wrong. If I use the other constructor in the warning, I get autoCommit=true.\n\nThere is something completely wrong.\n\nIt should be clear, which constructors set autoCommit=true, which set it per default to false (perhaps new ones), and the Deprecated text is wrong, if autoCommit does not default to false.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1401",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Trivial",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Deprecation of autoCommit in 2.4 leads to compile problems, when autoCommit should be false",
    "systemSpecification": true,
    "version": "2.4, 2.9"
}