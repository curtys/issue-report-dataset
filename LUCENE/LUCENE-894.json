{
    "comments": [
        {
            "author": "Michael Busch",
            "body": "This patch adds the new file \"build-demo.xml\" to the root directory. It \nbecomes included in the binary distributions during packaging as \"build.xml\".\n\nIt offers the targets \"compile-demo\", \"jar-demo\", \"war-demo\". This patch also \nincludes \"common-build.xml\" in the binary distributions because \n\"build-demo.xml\" imports it. \n\nOne drawback might be the following (or maybe not a big deal?):\nif you enter \"ant -projecthelp\" it shows you also the imported targets from\ncommon-build.xml like \"common.jar-core\", which are not needed (and not \nworking) for the binaries. Is there a way to hide a subset of the imported \ntargets? I admit that I am not the greatest ant expert ever ;), so help is \nhighly appreciated.\n",
            "date": "2007-05-29T07:28:42.653+0000",
            "id": 0
        },
        {
            "author": "Hoss Man",
            "body": "minor notes...\n\n1) common-build.xml is a better name then \"build-common.xml\" like some other projects use because auto completion of file names on \"b...\" only result in build.xml ... perhaps this new file could be \"demo-build.xml\"\n\n2) as i recall, older versions of ant don't include the targets from imported files, but newer versions do ... the only way i know to supress them is to no provide them a description, which doesn't work well sicne we want them to have descriptions when imported by build.xml.  a simple solution may be to keep the demo-build.xml file extremly simple, with no imports, and use <ant> or <antcall> to exec targets in common-build.xml (perhaps even new targets written explicitly for the demo)",
            "date": "2007-05-29T18:32:54.147+0000",
            "id": 1
        },
        {
            "author": "Michael Busch",
            "body": "> minor notes...\n\nThanks for reviewing!\n\n> 1) common-build.xml is a better name then \"build-common.xml\" like some \n> other projects use because auto completion of file names on \"b...\" only \n> result in build.xml ... perhaps this new file could be \"demo-build.xml\"\n\nI see - will do.\n\n> 2) as i recall, older versions of ant don't include the targets from \n> imported files, but newer versions do ... the only way i know to supress \n> them is to no provide them a description, which doesn't work well sicne \n> we want them to have descriptions when imported by build.xml. a simple \n> solution may be to keep the demo-build.xml file extremly simple, with no \n> imports, and use <ant> or <antcall> to exec targets in common-build.xml \n> (perhaps even new targets written explicitly for the demo)\n\nIf we want to use <ant> we have to move the demo targets from build.xml\nto common-build.xml. And demo-build.xml would have to overwrite some of\nthe properties of common-build.xml like the classpath of the core \nclasses, because build.xml builds from the sources, whereas demo-build.xml\nhas to use the binary jar file. \n\nActually I don't even need to import any targets from common-build.xml in \ndemo-build.xml, all I need are some properties like version and build dir.\nA simpler solution which comes to my mind is it therefore to add a new \nfile common-build.properties and to move some properties from \ncommon-build.xml to this new file. Then common-build.xml and \ndemo-build.xml import the properties file and we're fine. I tried this out\nalready and it seems to work fine. I will attach a patch with this \napproach. Would be nice if you could take another look, Hoss! (others are\nwelcome too of course!)",
            "date": "2007-05-30T02:34:40.000+0000",
            "id": 2
        },
        {
            "author": "Michael Busch",
            "body": "New patch:\n\n- renamed build-demo.xml to demo-build.xml\n- demo-build.xml does not import common-build.xml anymore\n- added a new file common-build.properties, imported by \n  common-build.xml and demo-build.xml\n- demo-build.xml gets renamed to build.xml when packaged\n- binaries contain common-build.properties, not\n  common-build.xml\n  \ndemo-build.xml has the following 4 targets:\n- clean\n- compile-demo\n- jar-demo\n- war-demo",
            "date": "2007-05-30T02:40:06.489+0000",
            "id": 3
        },
        {
            "author": "Michael Busch",
            "body": "After updating my patch to the current trunk I noticed that something is\nnot working correctly. It seems that the build.xml files of the contrib\nmodules that import common-build.xml don't import the properties correctly\nthat I moved to the new properties file. I actually have no idea why.\n\nBut I'm not desperate yet ;) and I got a new idea how to do this more\nelegant: In this new patch I add a file to the root dir called\ndemo-build.template which has placeholder strings for the property values\nthat are needed in the build.xml file of the binary package like \n\"version\". While packaging this template file becomes copied to the build\ndir and via the ant task <replace> the placeholder strings are replaced by\nthe actual values. Then this file is included as build.xml in the binary\npackages. \n\nThe advantage of this approach is that we don't have to include \ncommon-build.xml or a property file in the binaries. Just a very simple \nbuild.xml is included with the 4 targets \"clean\", \"compile-demo\",\n\"jar-demo\", \"war-demo\". I decided not to dig into the problem with the \nprevious patch described above because I believe this is the better \napproach. Thoughts?",
            "date": "2007-05-31T01:53:37.501+0000",
            "id": 4
        },
        {
            "author": "Michael Busch",
            "body": "Has anybody objections against the approach in the latest\npatch? If not, I will commit this in a day or two.",
            "date": "2007-06-02T00:45:37.867+0000",
            "id": 5
        },
        {
            "author": "Hoss Man",
            "body": "Michael: this approach seems great.  I couldn't help but make a few tweaks...\n\n1) used a filterset to do the token replacements as part of hte copy (isntead of after the fact)\n2) since the demo build file is now just a template (and can't be run until it's pacakged) it now seems more like \"source\" then part of the build system, so i moved it into \"src/demo\" (which has the added benefit of keeping the root dir a little cleaner)",
            "date": "2007-06-03T23:42:56.702+0000",
            "id": 6
        },
        {
            "author": "Hoss Man",
            "body": "whoops ... forgot to svn add src/demo/demo-build.template after i moved it .. it has some minor changes because of how i setup the <filterset> ",
            "date": "2007-06-03T23:57:00.278+0000",
            "id": 7
        },
        {
            "author": "Michael Busch",
            "body": "> I couldn't help but make a few tweaks...\n\nThanks for reviewing! \n\n> 1) used a filterset to do the token replacements as part of hte copy \n> (isntead of after the fact)\n\nNeat!\n\n> 2) since the demo build file is now just a template (and can't be run \n> until it's pacakged) it now seems more like \"source\" then part of the \n> build system, so i moved it into \"src/demo\" (which has the added benefit \n> of keeping the root dir a little cleaner)\n\nGood! Yes I agree that src/demo is a better place for the template file.",
            "date": "2007-06-04T02:29:19.018+0000",
            "id": 8
        },
        {
            "author": "Michael Busch",
            "body": "Works great, Hoss! Thanks again. I just committed this.",
            "date": "2007-06-04T04:07:08.814+0000",
            "id": 9
        }
    ],
    "component": "general/build",
    "description": "The binary files of a distribution come with the demo sources\nand a build.xml file. However, the build.xml doesn't work for\nthe binary distribution, so it can't be used to build the \ndemos.\n\nThis problem was notices the first time when release 2.1 was\nmade. Before we ship 2.2 we should fix this.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-894",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Custom build.xml for binary distributions",
    "systemSpecification": true,
    "version": "2.1"
}