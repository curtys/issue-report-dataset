{
    "comments": [
        {
            "author": "Karl Wettin",
            "body": "Committed in revision 733064",
            "date": "2009-01-09T15:38:54.185+0000",
            "id": 0
        }
    ],
    "component": "modules/analysis",
    "description": "ShingleMatrixFilter#next makes a recursive function invocation when the current permutation iterator is exhausted or if the current state of the permutation iterator already has produced an identical shingle. In a not too complex matrix this will require a gigabyte sized stack per thread.\n\nMy solution is to avoid the recursive invocation by refactoring like this:\n\n{code:java}\npublic Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    return token;\n  }\n\n  \n  private static final Token request_next_token = new Token();\n\n  /**\n   * This method exists in order to avoid reursive calls to the method\n   * as the complexity of a fairlt small matrix then easily would require\n   * a gigabyte sized stack per thread.\n   *\n   * @param reusableToken\n   * @return null if exhausted, instance request_next_token if one more call is required for an answer, or instance parameter resuableToken.\n   * @throws IOException\n   */\n  private Token produceNextToken(final Token reusableToken) throws IOException {\n\n{code}\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-1514",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "ShingleMatrixFilter eaily throws StackOverFlow as the complexity of a matrix grows",
    "systemSpecification": true,
    "version": "2.4"
}