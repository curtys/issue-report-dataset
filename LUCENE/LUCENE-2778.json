{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "Trivial patch. I plan to commit shortly",
            "date": "2010-11-25T18:37:48.722+0000",
            "id": 0
        },
        {
            "author": "Simon Willnauer",
            "body": "LGTM",
            "date": "2010-11-25T19:28:37.212+0000",
            "id": 1
        },
        {
            "author": "Shai Erera",
            "body": "Committed revision 1039151 (3x).\nCommitted revision 1039156 (trunk).",
            "date": "2010-11-25T19:45:32.236+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "Simon: What means LGTM?",
            "date": "2010-11-25T20:29:59.786+0000",
            "id": 3
        },
        {
            "author": "Shai Erera",
            "body": "Looks Good To Me I believe :).",
            "date": "2010-11-25T20:36:23.840+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "Why was this committed to 3x and then merged to trunk?\nCould we try to not merge to trunk and instead merge to 3x?   We're destroying the usefulness of our history.\nI thought Tokenizer just changed in trunk... I went to look at the history and the last 17 revisions are all identical (except for mergeprops I assume).  And I can't tell at a glance what are real vs fake changes in the history.",
            "date": "2010-11-26T16:14:06.244+0000",
            "id": 5
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Looks Good To Me I believe .\ncorrect!",
            "date": "2010-11-26T16:18:21.035+0000",
            "id": 6
        },
        {
            "author": "Shai Erera",
            "body": "That's how I worked so far ... I usually develop on 3x and then merge to trunk. I didn't think it will cause troubles :). I don't mind developing on trunk and merging to 3x if that will improve anything, but would the history of 3x look like then? Perhaps we should avoid merging on a regular basis and instead apply the patch on both, and then once in a while we do a big mergeprops merge?",
            "date": "2010-11-26T20:32:57.344+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "Here's my take: personally i don't see any problem with how Shai works here, as long\nas its still a proper merge. The mergeprops on things like Tokenizer aren't his fault, its because\nsomeone merged incorrectly before.\n\nI just suggest we do the following:\n* always svn update before merging\n* always merge from top-level svn root (if you merged from some other location, then merge again from top level before committing)\n\nI cleaned up the mergeprops yesterday so the problems Yonik sees shouldn't happen anymore.\nbut: its important people do proper merging so that we don't end up in this situation.\n",
            "date": "2010-11-29T11:39:12.369+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Here's my take: personally i don't see any problem with how Shai works here, as long as its still a proper merge.\n\n+1\n\nI don't think we should allow limitations of our current SCMS to dictate how we develop...",
            "date": "2010-11-30T09:33:04.270+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "bq. I don't think we should allow limitations of our current SCMS to dictate how we develop...\n\nThere was never due to a limitation? Again, whether shai merges from 3x->trunk or trunk->3x was never the problem.\nThe problem is in the past someone merging individual files etc (such as Tokenizer.java) and never merged from the top level before committing.\n",
            "date": "2010-11-30T10:53:02.102+0000",
            "id": 10
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:27.931+0000",
            "id": 11
        }
    ],
    "component": "core/store",
    "description": "RAMDirectory uses RAMFiles to store the data. RAMFile offers a newBuffer() method for extensions to override and allocate buffers differently, from e.g. a pool or something. However, RAMDirectory always allocates RAMFile and doesn't allow allocating a RAMFile extension, which makes RAMFile.newBuffer() unusable.\n\nI think we can simply introduce a newRAMFile() method on RAMDirectory and make the RAMFiles map protected, and it will allow really extending RAMDir.\n\nI will post a patch later.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2778",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Allow easy extension of RAMDirectory",
    "systemSpecification": true,
    "version": ""
}