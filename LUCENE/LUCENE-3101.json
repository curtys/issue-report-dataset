{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "Thanks! What to do?",
            "date": "2011-05-15T12:55:30.513+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "{quote}\n[14:08]\ts1monw: that automaton has 94201 states\n[14:08]\ts1monw: :D\n[14:08]\ts1monw: 450 MB long[]\n[14:08]\ts1monw: selckin: can you open an issue?\n{quote}",
            "date": "2011-05-15T12:58:19.587+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "an explicit test case",
            "date": "2011-05-16T09:11:22.785+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "the problem appears to be splitblock[] and partition[]. these are using n^2 space... \nthe rest of the datastructures seem ok (either just #states or sigma * #states)\n\nthese two were cut over from arraylist to bitset in revision 1026190, but it looks like they are \nsparse and we should use a better datastructure (just for these two, i think the other bitsets are all fine).\n",
            "date": "2011-05-16T10:13:57.795+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "I will look into reverting parts of the last commit on that issue - and move back to LinkedList<State>. The overhead should be small, I checked the cardinalities of those bit sets... LOW! And it only uses LinkedLists of pointers to state structures, in contrast to a naive LinkedList<Integer>.",
            "date": "2011-05-16T10:41:21.663+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "This patch reverts splitblock[], partition[] and reverse[][] to state before r1026190, the BitSets on top-level (not in inner loops are unchanged)",
            "date": "2011-05-16T11:36:43.588+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "After some perf analysis, it showed, that replacing the LinkedList in partition[] by HashSet makes it faster. Order is unimportant and the b1.remove()/b2.add() combi in inner loop no longer uses linear scan.",
            "date": "2011-05-16T11:57:41.064+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "Thanks for looking into this Uwe, looks like a good solution to me.",
            "date": "2011-05-16T12:02:58.428+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "Some more cleanup, I will commit this now.\n\nIf somebody else has a better idea how to optimize this on memory usage (maybe use Mike's SortedIntSet), go go go :-)",
            "date": "2011-05-16T12:13:25.009+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 1103711\n\nThanks Robert for help with this horrible monster!",
            "date": "2011-05-16T12:16:20.929+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "Thanks for reporting this selckin, this is a great find, definitely amazed we randomly generated this one :)",
            "date": "2011-05-16T13:04:59.328+0000",
            "id": 10
        },
        {
            "author": "Dawid Weiss",
            "body": "There is a lot of power in randomness, huh? :) I really like these randomized tests... this should be a built-in functionality in JUnit (call it 'repeatable randomness')...",
            "date": "2011-05-16T13:09:03.939+0000",
            "id": 11
        }
    ],
    "component": "",
    "description": "{code}\n    [junit] Testsuite: org.apache.lucene.util.automaton.TestMinimize\n    [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 3.792 sec\n    [junit] \n    [junit] ------------- Standard Error -----------------\n    [junit] NOTE: reproduce with: ant test -Dtestcase=TestMinimize -Dtestmethod=testAgainstBrzozowski -Dtests.seed=-7429820995201119781:1013305000165135537\n    [junit] NOTE: test params are: codec=PreFlex, locale=ru, timezone=America/Pangnirtung\n    [junit] NOTE: all tests run in this JVM:\n    [junit] [TestMinimize]\n    [junit] NOTE: Linux 2.6.37-gentoo amd64/Sun Microsystems Inc. 1.6.0_25 (64-bit)/cpus=8,threads=1,free=294745976,total=310378496\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testAgainstBrzozowski(org.apache.lucene.util.automaton.TestMinimize):     Caused an ERROR\n    [junit] Java heap space\n    [junit] java.lang.OutOfMemoryError: Java heap space\n    [junit]     at java.util.BitSet.initWords(BitSet.java:144)\n    [junit]     at java.util.BitSet.<init>(BitSet.java:139)\n    [junit]     at org.apache.lucene.util.automaton.MinimizationOperations.minimizeHopcroft(MinimizationOperations.java:85)\n    [junit]     at org.apache.lucene.util.automaton.MinimizationOperations.minimize(MinimizationOperations.java:52)\n    [junit]     at org.apache.lucene.util.automaton.RegExp.toAutomaton(RegExp.java:502)\n    [junit]     at org.apache.lucene.util.automaton.RegExp.toAutomatonAllowMutate(RegExp.java:478)\n    [junit]     at org.apache.lucene.util.automaton.RegExp.toAutomaton(RegExp.java:428)\n    [junit]     at org.apache.lucene.util.automaton.AutomatonTestUtil.randomAutomaton(AutomatonTestUtil.java:256)\n    [junit]     at org.apache.lucene.util.automaton.TestMinimize.testAgainstBrzozowski(TestMinimize.java:43)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1282)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1211)\n    [junit] \n    [junit] \n    [junit] Test org.apache.lucene.util.automaton.TestMinimize FAILED\n\n\n{code}",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3101",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "TestMinimize.testAgainstBrzozowski reproducible seed OOM",
    "systemSpecification": true,
    "version": ""
}