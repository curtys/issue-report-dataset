{
    "comments": [
        {
            "author": "Yonik Seeley",
            "body": "One issue here is the different purposes for lucene and solr function queries.\nSolr's function queries have always evolved at a rapid pace (and are continuing to evolve) to support higher level features and interfaces in Solr.  They are able to evolve rapidly because they are seen more as an implementation detail rather than interface classes, and I'd hate to lose that.  So if we do try to make Solr's function queries more accessible to lucene users (again), it should be as a Solr module.  As we can see from history and usage, function queries are critically important to Solr, but are obviously not to Lucene.",
            "date": "2011-01-25T16:30:25.454+0000",
            "id": 0
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. One issue here is the different purposes for lucene and solr function queries.\nYonik, if that is your only issue then we are good to go. I don't think that moving stuff to modules changes anything how we develop software. Modularization, decoupling, interfaces etc. you know how to work with those ey? so hey what is really the point here, this modularization is a key point of merging development with lucene and everytime somebody proposes something like this you fear that that monolithic thing under /solr could become more modular and decoupled. I don't know why this is the case but we should and will move on with modularization. Folks will use it once its there, thats for sure. Same is true for faceting, replication, queryparsers, functionparser... those are on the list!",
            "date": "2011-01-25T17:23:18.140+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Can't we consolidate them under a new toplevel module?  modules/queries?\n\nWe can mark the classes as lucene.experimental?  Then we are free to iterate quickly.  Does that address your concern Yonik?\n",
            "date": "2011-01-25T18:04:25.504+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "Not sure if I communicated the issue clearly: taking what is essentially implementation and trying to make it interface clearly has a cost.\nFunction queries and the solr qparser architecture are constantly evolving, and wind all through solr.\n\nIf we attempt to make this easier to use by lucene users by moving it out to a module then:\n - it should be a solr module... keep the solr package names and make it clear that it's primary purpose is supporting higher level features in solr\n - we should make it such that java interface back compatibility is not a requirement, even for point releases\n\nThe other approach is to make a Lucene function query module (actually, we already have that), try to update it with stuff from solr, but make it's primary purpose to support the Java interfaces.",
            "date": "2011-01-25T18:08:07.066+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "Wait, why again did we merge lucene and solr? This is crazy-talk.\n\nI don't see a single valid reason why queries should be in solr-only.\n",
            "date": "2011-01-25T18:13:56.696+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. We can mark the classes as lucene.experimental?\n\nIf they remain experimental I suppose, but lucene.internal would be a more accurate description.",
            "date": "2011-01-25T18:14:30.950+0000",
            "id": 5
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Can't we consolidate them under a new toplevel module? modules/queries?\nThis was the entire plan for this issue. \n\nbq. it should be a solr module... keep the solr package names and make it clear that it's primary purpose is supporting higher level features in solr\nAre you serious? If you need to change something or make additions to such an interface / abstract class or whatever you should be able to do this. But I am totally against it if you say this is you internal playground and If I decide to change it entirely I will do so. I start getting the impression that this anti-modularization thing has nothing todo with code and development.. Lots of software has been evolving even with bwcompat etc. but hey this is not core - deprecation and changes should not be super hard to do and we always decided case by case. if it was easy / doable with bw compat we did it - if not we broke it so what it the big deal again? Seriously, I don't want to have this discussion everything somebody comes up with a /modules suggestion - the is the way to go, we agreed and voted on it and it passed.  ",
            "date": "2011-01-26T07:15:56.110+0000",
            "id": 6
        },
        {
            "author": "Michael Busch",
            "body": "bq.  Seriously, I don't want to have this discussion everything somebody comes up with a /modules suggestion - the is the way to go, we agreed and voted on it and it passed.\n\n+1.  I agree with Simon and Robert.  ",
            "date": "2011-01-26T17:16:51.845+0000",
            "id": 7
        },
        {
            "author": "Mark Miller",
            "body": "I'm trying to follow this thread. If I extract the somewhat off topic bitterness I seem to see:\n\n1. There is interest in trying to unify function queries again.\n\n2. There is a concern - currently the Solr function queries are part of Solr - java code in Solr is changed on a whim. In Lucene, the bar is higher - java code is generally considered an impl detail in Solr, unless it's a plugin api. This has been an attractive quality in the past. Moving it to Lucene changes it to more of a supported API. Valid point if you ask me.\n\n3. A response was made about marking it experimental.\n\n4. A response was made about perhaps internal.\n\nThe rest does not add much. We have not voted on this issue - we voted on broad topics - to be sorted out as we go. Lets discuss it for a bit before everyone just gets pissed off.",
            "date": "2011-01-26T17:57:49.734+0000",
            "id": 8
        },
        {
            "author": "Yonik Seeley",
            "body": "One concern some people have had is that lucene not become too tailored just for solr - a very valid point, and I've tried hard not to add anything to lucene that's solr specific or that only solr would benefit from.  Nevertheless, there have been a number of occasions (normally on IRC) where there has been disagreement/debate and I've had statements of the form \"solr's not the only lucene user you know\" type of arguments thrown up.\n\nI'm not against modularizing some solr functionality so lucene users can use it, but hopefully you understand why I think it should retain the solr package namespace and be a solr module (or at a minimum perhaps a lucene/solr module).  It just wouldn't be fair to downgrade solr support for such a large core piece of solr, and have people cry foul when something is added that only solr can benefit from (as is done fairly regularly today since it's just part of solr).\n",
            "date": "2011-01-26T18:33:34.042+0000",
            "id": 9
        },
        {
            "author": "Simon Willnauer",
            "body": "{quote}\n\nI'm not against modularizing some solr functionality so lucene users can use it, but hopefully you understand why I think it should retain the solr package namespace and be a solr module (or at a minimum perhaps a lucene/solr module). It just wouldn't be fair to downgrade solr support for such a large core piece of solr, and have people cry foul when something is added that only solr can benefit from (as is done fairly regularly today since it's just part of solr).\n{quote}\n\nI don't give a sh.. about the package name -  /modules is shared space - some is more luceneish some is more solrish. I also think that bwcomap is not a super big deal with modules either. Why don't we get a proposal patch wise and see how that goes... Still - the concerns are super minor IMO and should not keep us from making progress on the modularization side of things.",
            "date": "2011-01-26T18:52:41.742+0000",
            "id": 10
        },
        {
            "author": "Yonik Seeley",
            "body": "Let me try to recap my concerns here (2 main ones):\n1) changing implementation to interface\n  - a different back compat policy for the module (i.e. the java interfaces only) could partially address this.\n  - marking as lucene.internal could mostly address, but that's prob not what direct module users would prefer.\n\n2) downgrading of solr support for this core piece of solr\n  - making it a solr module (retaining the solr package naming, etc) should mostly handle this issue.",
            "date": "2011-01-26T19:47:04.852+0000",
            "id": 11
        },
        {
            "author": "Chris Male",
            "body": "Hey Yonik,\n\nI'm just trying to understand what you mean by 2).  How is Solr's support of function queries downgraded if they dont have the Solr package name?  \n\nI can appreciate the need to be able to make changes easily but with function queries becoming so widely used in Solr, Solr users and probably Lucene users, I think having a stable interface is a good thing.",
            "date": "2011-01-26T20:15:58.458+0000",
            "id": 12
        },
        {
            "author": "Yonik Seeley",
            "body": "Chris: #2 is just an attempted recap of this comment: https://issues.apache.org/jira/browse/LUCENE-2883?focusedCommentId=12987146&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12987146\n",
            "date": "2011-01-26T20:29:00.486+0000",
            "id": 13
        },
        {
            "author": "Chris Male",
            "body": "Hi,\n\nHmm I don't really understand that part either.  You're concerned that you'll lose the freedom to add functionality that'd benefit Solr only?",
            "date": "2011-01-26T20:38:08.893+0000",
            "id": 14
        },
        {
            "author": "Simon Willnauer",
            "body": "Really back in the days where stuff like that was moved to solr there was a good reason for duplicating the func - lucene was  on a totally different release schedule, bw. compat etc. But now since we are aligned with releases and we have the modules area there is really no good reason for stuff like that. If solr needs some feature in FuncQuery & friends we are going to add it. If we can fix it without breaking BWCompat we should do it - if not we discuss case by case! I have actually written some FuncQuery related code for customers and they would not be happy if we break bwcompat codewise (I exclude package naming here) - just saying that keeping it internal so that we can hack it as we like is not an option anyway!!\n\njust my $0.05\n\nsimon",
            "date": "2011-01-26T22:28:58.308+0000",
            "id": 15
        },
        {
            "author": "Grant Ingersoll",
            "body": "I think it makes sense to make function queries a module and expose them more to Lucene users for a number of reasons.\n\nFirst off, though, I get the concern about implementation detail versus interface, but I think the tradeoff is worth it for several reasons.  \n* Function queries (FQs) already have a pretty stable interface and we have already worked hard to maintain BWC for them since they are one of the more common areas that people actually do extend in Solr.  In other words,  FQs are already more interface than implementation.\n* I've always been stumped as to why more Lucene users don't use them and instead re-invent the wheel.  The fact that it has taken this long frankly mystifies me\n* As a corollary of that, more light on them will make them better, improve performance, etc.\n* I agree with most here that the ability to do this kind of thing is exactly why we merged.\n\nbq. Hmm I don't really understand that part either. You're concerned that you'll lose the freedom to add functionality that'd benefit Solr only?\n\nI don't think that is the concern.  I think the concern is that if one only has to worry about implementation details and not about backwards compat, public API, etc. then it is a lot easier to innovate.  It's the equivalent of refactoring IndexWriter public methods versus the underlying DocumentsWriter.   Remember, in Solr, 99% of the public API is in the Request parameters, not in Java interface.  As long as we maintain BWC for the Request interface (i.e. &start=0&rows=10&q=foo), we are more or less free to do what we want in the implementation layer.  \n\nIn the end, I'm +1 on moving it, but with the distinction that changes in modules need to account for Solr as well as Lucene.",
            "date": "2011-01-27T13:23:03.267+0000",
            "id": 16
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Function queries (FQs) already have a pretty stable interface and we have already worked hard to maintain BWC for them since they are one of the more common areas that people actually do extend in Solr. In other words, FQs are already more interface than implementation.\n\nYES! +1\n\nbq. As a corollary of that, more light on them will make them better, improve performance, etc.\nagain +1\n\nI think we can maintain the interface and innovations side by side - that said, lets look at a patch and discuss further once we see code / moving paths etc.\n\nsimon",
            "date": "2011-01-27T13:32:39.866+0000",
            "id": 17
        },
        {
            "author": "Robert Muir",
            "body": "bq. but with the distinction that changes in modules need to account for Solr as well as Lucene.\n\nI thought this was understood about modules anyway, that we move the code there, all committers\nhave access and its shared code to support both projects.\n\nhopefully we didnt screw this up in anyway for modules/analysis, I don't think Solr lost anything here.\n\nSeparately, for the record, we didnt merge ALL of Solr's analysis stuff into modules/analysis.\nSome of this stuff really is solr-specific (e.g. ReverseWildCard support that needs some schema + qp integration).\nThis really solr-specific stuff that isn't generally useful stayed in Solr.\n\nSo I think we should always consider this for future modules, it doesn't have to be a binary decision,\nbut instead what is general and makes sense.\n",
            "date": "2011-01-27T13:39:44.799+0000",
            "id": 18
        },
        {
            "author": "Grant Ingersoll",
            "body": "bq. I thought this was understood about modules anyway, that we move the code there, all committers\nhave access and its shared code to support both projects.\n\nCool.  I was just re-iterating it.  As such, I don't think it makes sense to mark it as lucene.internal, but experimental does make sense.",
            "date": "2011-01-27T14:25:53.579+0000",
            "id": 19
        },
        {
            "author": "Michael McCandless",
            "body": "bq. As such, I don't think it makes sense to mark it as lucene.internal, but experimental does make sense.\n\n+1",
            "date": "2011-01-27T14:44:19.798+0000",
            "id": 20
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. hopefully we didnt screw this up in anyway for modules/analysis, I don't think Solr lost anything here.\n\nRight, modules/analysis never concerned me since the filters moved there were nice and self contained, they only already relied on the lucene analysis interfaces, would easy to make a solr-specific copy of one if really needed in the future, and left some of the solr specific stuff where it was.  It all made sense and was a win-win.\n\nWe've hung a lot of features on function queries in Solr, and I've had plans for more to come - which is why it's not acceptable for it to suddenly not be a core part of Solr.\n\nbq. its shared code to support both projects.\n\nThe \"status\" and expectations for the code are one of the big issues here - it's not just about the technical issues of what a patch looks like.  I would expect, for example, to be able to add a feature that probably only made sense for solr (as long as it didn't prevent lucene users from using function queries in general of course).  Is that acceptable to everyone?  I would not necessarily have the same expectation for other things in modules - it really depends on what it is.  Does that make sense?\n\n",
            "date": "2011-01-27T15:07:22.254+0000",
            "id": 21
        },
        {
            "author": "Grant Ingersoll",
            "body": "bq. Does that make sense?\n\nI think it does.  I think, as usual, it can be handled case by case.  Just as Robert pointed out, some analysis things stayed in Solr, I don't think anyone is going to argue that we should put things where they most make sense.  In general, though, I think the modules affords us a lot of opportunity through more exposure at the loss of a little bit of flexibility in Solr, which, as you said can still be handled by doing that little piece in just Solr.\n",
            "date": "2011-01-27T15:27:57.447+0000",
            "id": 22
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nThe \"status\" and expectations for the code are one of the big issues here - it's not just about the technical issues of what a patch looks like. I would expect, for example, to be able to add a feature that probably only made sense for solr (as long as it didn't prevent lucene users from using function queries in general of course). Is that acceptable to everyone? I would not necessarily have the same expectation for other things in modules - it really depends on what it is. Does that make sense?\n{quote}\n\nDo you have an example of what type of feature you are talking about? I think it would really clarify things.\n",
            "date": "2011-01-27T15:32:33.604+0000",
            "id": 23
        },
        {
            "author": "Chris Male",
            "body": "bq. I would expect, for example, to be able to add a feature that probably only made sense for solr (as long as it didn't prevent lucene users from using function queries in general of course).\n\nDoes any of these features you allude to rely on stuff that thats in Solr core? This impacts the dependencies this module will have.",
            "date": "2011-01-27T22:48:33.037+0000",
            "id": 24
        },
        {
            "author": "Chris Male",
            "body": "Patch that factors out the core FunctionQuery stuff into a queries module.  Theres alot of issues here but it does compile.  \n\nThe following issues need to be addressed:\n\n- MutableValue & MutableFloatValue are used in the FunctionQuery code so I've pulled them into the module too.  Should all the other Mutable*Value classes come too? Should they go into some other module?\n\n- What to return in ValueSource#getSortField which currently returns a SortField which implements SolrSortField.  This is currently commented out so we can determine what best to do.  Having this commented out breaks the Solr tests.\n\n- Many of the ValueSources and DocValues in Solr could be moved to the module, but not all of them.  Some have dependencies on Solr dependencies / Solr core code.\n\n- Module isn't full integrated into the build.xmls and dev-tools.\n\n- Lucene core's FunctionQuery stuff needs to be removed.\n\nI'll add a script that needs to be run before adding this patch shortly.",
            "date": "2011-05-18T12:06:18.407+0000",
            "id": 25
        },
        {
            "author": "Chris Male",
            "body": "Script needed to run to use patch:\n\n{code}\nsvn mkdir --parents modules/queries/src/java/org/apache/lucene/queries/function\nsvn move solr/src/java/org/apache/solr/search/function/FunctionQuery.java modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.java\nsvn move solr/src/java/org/apache/solr/search/function/ValueSource.java modules/queries/src/java/org/apache/lucene/queries/function/ValueSource.java\nsvn move solr/src/java/org/apache/solr/search/function/DocValues.java modules/queries/src/java/org/apache/lucene/queries/function/DocValues.java\nsvn move solr/src/java/org/apache/solr/search/MutableValue.java modules/queries/src/java/org/apache/lucene/queries/function/MutableValue.java\nsvn move solr/src/java/org/apache/solr/search/MutableValueFloat.java modules/queries/src/java/org/apache/lucene/queries/function/MutableValueFloat.java\n{code}\n\n",
            "date": "2011-05-18T12:06:56.884+0000",
            "id": 26
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Chris!  The patch applies cleanly for me (after running the svn\ncommands) and everything compiles.\n\nI think the patch is a great start, ie, we will need the low level\ninfra used by FQs in the module.\n\nbq. MutableValue & MutableFloatValue are used in the FunctionQuery code so I've pulled them into the module too. Should all the other Mutable*Value classes come too? Should they go into some other module?\n\nI think we should move Mutable* over?  Grouping module will need all\nof these, I think?  (Ie if we want to allow users to group by\narbitrary typed field).\n\nbq. What to return in ValueSource#getSortField which currently returns a SortField which implements SolrSortField. This is currently commented out so we can determine what best to do. Having this commented out breaks the Solr tests.\n\nHmm good question.  This looks to be related to sorting by FQ\n(SOLR-1297) because some FQs need to be weighted.  Not sure what to do\nhere yet... which FQs in particular require this?\n\nbq. Many of the ValueSources and DocValues in Solr could be moved to the module, but not all of them. Some have dependencies on Solr dependencies / Solr core code.\n\nI think apply 90/10 rule here?  Start with the easy-to-move queries?\nWe don't need initial go to be perfect... progress not perfection.\n\nbq. Lucene core's FunctionQuery stuff needs to be removed.\n\nDo you have a sense of whether Solr's FQs are a superset of Lucene's?\nIe, is there anything Lucene's FQs can do that Solr's can't?\n\nProbably, as a separate issue, we should also move contrib/queries ->\nmodules/queries.  And I think the cool nested queries (LUCENE-2454)\nwould also go into this module...\n",
            "date": "2011-05-18T17:37:11.090+0000",
            "id": 27
        },
        {
            "author": "Chris Male",
            "body": "bq. I think we should move Mutable* over? Grouping module will need all of these, I think? (Ie if we want to allow users to group by arbitrary typed field).\n\nYup okay.\n\nbq. Hmm good question. This looks to be related to sorting by FQ (SOLR-1297) because some FQs need to be weighted. Not sure what to do here yet... which FQs in particular require this?\n\nBoth all of them and not many of them (complicated).  The sorting of FQ\nfunctionality is necessary for all FQs in Solr since the user can sort\nby any FQ.  However the extension made by the SolrSortField is the ability\nto create a 'weighted' SortField by passing in a IndexSearcher and having\nit stored in a Map.  The Map is then made available to any DocValues when\nthey create their values.  \n\nThis is when the 'not many' comes into effect.  Only a few DocValues implementations\nuse the contents of the Map.  DocFreqValueSource for example uses the IndexSearcher\nin the Map.  But I suppose there could be many user implementations that do.\n\nSolrSortField is currently used in SolrIndexSearcher to 'weight' the Sorts.  I wonder\nwhether we can simplify this? When ValueSource#getSort is called (which is only in 1\nplace really), we can pass in the IndexSearcher, meaning the SortField can be 'weighted'\nthen and there.\n\nSince SolrSortField is only used in this 1 place currently, we can then revisit dropping it?\n\nDo you think its worth opening an issue to address this first?\n\nbq. I think apply 90/10 rule here? Start with the easy-to-move queries? We don't need initial go to be perfect... progress not perfection.\n\nCould we sort the initial commit out and then I can move them over in batches?\nAlready have a 108k patch, I'd say moving what we can will push it towards 300k\n\nbq. Do you have a sense of whether Solr's FQs are a superset of Lucene's? Ie, is there anything Lucene's FQs can do that Solr's can't?\n\nSolr FQs are hugely more advanced than the ValueSourceQuery based stuff in Lucene.\nIts not a full 1 to 1 change since the APIs are slightly different, but I'd say\nthat we'd want users to use the FQ line of classes.  I cant see anything in Lucene's\nVSQs that you couldn't do using FQs.",
            "date": "2011-05-19T03:33:49.293+0000",
            "id": 28
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nbq. Hmm good question. This looks to be related to sorting by FQ (SOLR-1297) because some FQs need to be weighted. Not sure what to do here yet... which FQs in particular require this?\n\nBoth all of them and not many of them (complicated). The sorting of FQ\nfunctionality is necessary for all FQs in Solr since the user can sort\nby any FQ. However the extension made by the SolrSortField is the ability\nto create a 'weighted' SortField by passing in a IndexSearcher and having\nit stored in a Map. The Map is then made available to any DocValues when\nthey create their values.\n{quote}\n\nSo the goal here is to make the top-level searcher (IR) visible to the\nFQ's getValues?  I think this pre-dated the cutover to\nAtomicReaderContext, which now provides the top reader?  Maybe this\nisn't needed anymore...?\n\n{quote}\nThis is when the 'not many' comes into effect. Only a few DocValues implementations\nuse the contents of the Map. DocFreqValueSource for example uses the IndexSearcher\nin the Map. But I suppose there could be many user implementations that do.\n{quote}\n\nEG DocFreqValueSource could pull docFreq from the top reader?\n\nThough QueryValueSource needs a searcher (but, seems to make one, from\nthe top reader, if it wasn't provided one).\n\n{quote}\nSolrSortField is currently used in SolrIndexSearcher to 'weight' the Sorts. I wonder\nwhether we can simplify this? When ValueSource#getSort is called (which is only in 1\nplace really), we can pass in the IndexSearcher, meaning the SortField can be 'weighted'\nthen and there.\n\nSince SolrSortField is only used in this 1 place currently, we can then revisit dropping it?\n{quote}\n\nThat seems good too?\n\nbq. Do you think its worth opening an issue to address this first?\n\nYes can you do that, and mark this issue as depending in it?\n\n{quote}\nbq. I think apply 90/10 rule here? Start with the easy-to-move queries? We don't need initial go to be perfect... progress not perfection.\n\nCould we sort the initial commit out and then I can move them over in batches?\nAlready have a 108k patch, I'd say moving what we can will push it towards 300k\n{quote}\n\nGood question... maybe we can do this on a branch?\n\n{quote}\nbq. Do you have a sense of whether Solr's FQs are a superset of Lucene's? Ie, is there anything Lucene's FQs can do that Solr's can't?\n\nSolr FQs are hugely more advanced than the ValueSourceQuery based stuff in Lucene.\nIts not a full 1 to 1 change since the APIs are slightly different, but I'd say\nthat we'd want users to use the FQ line of classes. I cant see anything in Lucene's\nVSQs that you couldn't do using FQs.\n{quote}\n\nOK then once we finally have the \"superset\" moved into the module we\nshould remove Lucene's (deprecate on 3.x).\n",
            "date": "2011-05-19T21:22:48.246+0000",
            "id": 29
        },
        {
            "author": "Yonik Seeley",
            "body": "Regarding weighting - function queries can contain normal queries, so anywhere a function query is used, it must be weighted first.\n\nbq. When ValueSource#getSort is called (which is only in 1 place really), we can pass in the IndexSearcher, meaning the SortField can be 'weighted' then and there.\n\nSort instances are like Query instances, and for many reasons should not be bound to any particular searcher.",
            "date": "2011-05-19T21:38:12.092+0000",
            "id": 30
        },
        {
            "author": "Chris Male",
            "body": "{quote}\nSo the goal here is to make the top-level searcher (IR) visible to the\nFQ's getValues? I think this pre-dated the cutover to\nAtomicReaderContext, which now provides the top reader? Maybe this\nisn't needed anymore...?\n{quote}\n\nIts very intentional (as Yonik has pointed out).  It allows any Querys in the ValueSources to be weighted.\n\n{quote}\nThough QueryValueSource needs a searcher (but, seems to make one, from\nthe top reader, if it wasn't provided one).\n{quote}\n\nIs this desirable? IndexSearcher is pretty thin I know but is it fast enough to create that it has a nominal effect? If its faster than passing down the IndexSearcher then maybe its a good idea for anybody wanting an IndexSearcher to do this.\n\n{quote}\nGood question... maybe we can do this on a branch?\n{quote}\n\nAbsolutely, can you create one?\n",
            "date": "2011-05-20T02:22:30.444+0000",
            "id": 31
        },
        {
            "author": "Chris Male",
            "body": "Hey Yonik,\n\nIts super to hear from you on this, it'll be a real help.\n\n{quote}\nRegarding weighting - function queries can contain normal queries, so anywhere a function query is used, it must be weighted first.\n{quote}\n\nYup I've come to understand that.  So the challenge is how to do this when a FunctionQuery is used to sort and not Query? Okay.  I'm going to open an issue to see if we can address this better, maybe by extending SortField or something.\n\n{quote}\nSort instances are like Query instances, and for many reasons should not be bound to any particular searcher.\n{quote}\n\nYeah that is true.  But ValueSource#getSort actually returns a SortField.  Does the same apply to SortField instances?  Also, ValueSource#weight(IndexSearcher) returns a new SortField as well, with a context containing the IndexSearcher.  Consequently the new SortField is bound to that particular searcher.",
            "date": "2011-05-20T02:34:43.588+0000",
            "id": 32
        },
        {
            "author": "Chris Male",
            "body": "I've opened SOLR-2533 to look at ways to standardise the ValueSource sort weighting API.",
            "date": "2011-05-20T02:43:43.563+0000",
            "id": 33
        },
        {
            "author": "Chris Male",
            "body": "{quote}\nIs this desirable? IndexSearcher is pretty thin I know but is it fast enough to create that it has a nominal effect? If its faster than passing down the IndexSearcher then maybe its a good idea for anybody wanting an IndexSearcher to do this.\n{quote}\n\nActually one flaw in this is that SolrIndexSearcher has overridden some functionality in IndexSearcher, such as SimilarityProvider, which is used NormValueSource.",
            "date": "2011-05-20T03:09:13.818+0000",
            "id": 34
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. > Sort instances are like Query instances, and for many reasons should not be bound to any particular searcher.\n\nbq. Yeah that is true. But ValueSource#getSort actually returns a SortField. Does the same apply to SortField instances?\n\nYeah, that's part of a Sort.\n\nbq. Also, ValueSource#weight(IndexSearcher) returns a new SortField as well, with a context containing the IndexSearcher. Consequently the new SortField is bound to that particular searcher.\n\nValueSourceSortField.weight(IndexSearcher) - right.  That's sort of how queries can be re-written too... and the returned temporary SortField is never retained.  I guess I should have said that it should always be possible for Query and Sort instances to be independent of searchers and readers... but temporary ones can be created for the purposes of actually executing the query.\n\nNote that Solr's query cache uses Sort as part of the cache key too.\n",
            "date": "2011-05-20T15:42:40.728+0000",
            "id": 35
        },
        {
            "author": "Michael McCandless",
            "body": "OK I created branch https://svn.apache.org/repos/asf/lucene/dev/branches/fqmodule_2883",
            "date": "2011-05-20T16:12:35.736+0000",
            "id": 36
        },
        {
            "author": "Chris Male",
            "body": "Rather than doing all the work in this issue, I'm going to spin off a few subtasks and resolve this one by one.",
            "date": "2011-06-23T00:40:11.983+0000",
            "id": 37
        },
        {
            "author": "Chris Male",
            "body": "Committed revision 1141749.\n\nIts done.  Finally.",
            "date": "2011-06-30T23:31:03.106+0000",
            "id": 38
        },
        {
            "author": "Robert Muir",
            "body": "Thanks for all your hard refactoring work here Chris!",
            "date": "2011-06-30T23:59:51.425+0000",
            "id": 39
        },
        {
            "author": "Michael McCandless",
            "body": "+1, this is great Chris!",
            "date": "2011-07-01T13:25:54.399+0000",
            "id": 40
        }
    ],
    "component": "core/search",
    "description": "Spin-off from the [dev list | http://www.mail-archive.com/dev@lucene.apache.org/msg13261.html]  ",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2883",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "OTHER",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Consolidate Solr  & Lucene FunctionQuery into modules",
    "systemSpecification": true,
    "version": "4.0-ALPHA"
}