{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Rough first patch attached....",
            "date": "2010-04-11T17:30:11.482+0000",
            "id": 0
        },
        {
            "author": "Robert Muir",
            "body": "Mike, I don't think overlapTermCount should really exist in the Stats.\nTrying to implement some concrete FieldSimProviders, it starts getting messy.\nWhen using term unique pivoted length norm, i don't want to count these positionIncrement=0 terms either...\nso do we need a uniqueOverlapTermCount?\nEven when using non-unique (BM25) pivoted length norm, we don't want to count these when summing to calculate \naverages either.\n\nSo i know you probably see this as 'baking something into the index' but I think positionIncrement=0 means \n\"doesn't contribute to the document length\" by definition, and the discountOverlaps=false (no longer the default)\nshould be considered deprecated compatibility behavior :)",
            "date": "2010-04-12T01:11:45.594+0000",
            "id": 1
        },
        {
            "author": "Shai Erera",
            "body": "Mike - it'll also be great if we can store the length of the document in a custom way. I think what I'm saying is that if we can open up the norms computation to custom code - that will do what I want, right? Maybe we can have a class like DocLengthProvider which apps can plug in if they want to customize how that length is computed. Wherever we write the norms, we'll call that impl, which by default will do what Lucene does today?\nI think though that it's not a field-level setting, but an IW one?",
            "date": "2010-04-12T07:35:40.895+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Mike, I don't think overlapTermCount should really exist in the Stats.\n\nOK I will remove it -- I was unsure whether it was overkill :)  So\nit's purely an index time decision, whether the posIncr 0 tokens\n\"count\".\n\nHmm, but... we have a problem, which is that these posIncr 0 tokens\nare now counted in the unique token count.  Have to mull how to avoid\nthat...hmm... to do it correctly, I think means \"count this token as\n+1 on the unique tokens for this doc if ever it has non-zero posIncr\"?\n\nReally, maybe somehow we should be using at attr about the token\nitself?  Instead of posIncr == 0?  I mean a broken synonym injector\ncould conceivably provide the synonyms first (w/ first one having\nposIncr 1), followed by the real term (w/ posIncr 0)?\n\nBTW the cost of storing the stats isn't that bad -- it increases index\nsize by 1.5%, on a 10M wikipedia index where each doc is 1KB of text\n(~171 words per doc on avg).\n",
            "date": "2010-04-12T09:48:59.425+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I think what I'm saying is that if we can open up the norms computation to custom code - that will do what I want, right? \n\nI'm calling the norms \"boost bytes\" :)  This was Marvin's term.. I\nlike it.\n\nThis patch makes boost byte computation completely private to the\nsim (see the *FieldSimProvider).  Ie the sim providers walk the stats\nand do whatever they want to \"prepare\" for real searching.  EG if you\nhave the RAM maybe you want to use a true float[] not boost bytes.  Or\nif you really don't have the RAM maybe you use only 4 bits per-doc,\nnot 8.  The FieldSim just provides a \"float boost(int docID)\" so what\nit does under the hood is private.\n\nbq. Maybe we can have a class like DocLengthProvider which apps can plug in if they want to customize how that length is computed.\n\nSo... I'm actually trying to avoid extensibility on the first go, here\n(this is the \"baby steps\" part of the original thread).\n\nIe, the IR world seems to have converged on a smallish set of \"stats\"\nthat are commonly required, so I'd like to make those initial stats\nwork well, for starters.  Commit that (it enables all sorts of state\nof the art scoring models), and perhaps cutover to the default Robert\ncreated in LUCENE-2187 (which needs stats to work correctly).  And\nthen (phase 2) work out plugability so you can put your own stats\nin....\n\nbq. Wherever we write the norms, we'll call that impl, which by default will do what Lucene does today?\n\nRight, this is the DefaultSimProvider in my current patch -- it simply\ncomputes the same thing Lucene does today, but uses the stats at IR\nopen time (once it's hooked up) to do, instead of doing so during\nindexing.\n\nbq. I think though that it's not a field-level setting, but an IW one?\n\nIt's field level now and I think we should keep it that way.  EG\nTerrier was apparently document oriented in the past but has now\ndeprecated that and moved to per-field.\n\nYou can always make a catch-all field if you \"really\" want aggregated\nstats across the entire doc?\n",
            "date": "2010-04-12T09:57:35.871+0000",
            "id": 4
        },
        {
            "author": "Shai Erera",
            "body": "I'd like to withdraw my request from above. I misunderstood that the stats I need are stored per-field per-doc. So that will allow me to compute the docLength as I want.",
            "date": "2010-04-12T10:18:12.547+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nReally, maybe somehow we should be using at attr about the token\nitself? Instead of posIncr == 0? I mean a broken synonym injector\ncould conceivably provide the synonyms first (w/ first one having\nposIncr 1), followed by the real term (w/ posIncr 0)?\n{quote}\n\nRight, its my opinion all along (others disagree with me) that since\nwe have this 'ordered (incrementToken) Attributesource' / Token*Stream* that \nthis sorta broken filter isn't a valid equivalent..., its definitely a different\nTokenStream,even if its treated in some ways today as the same... we gotta\nbreak away from this for reasons like this.\n\notherwise why have it ordered at all?\n",
            "date": "2010-04-12T11:49:47.564+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "i brought the patch up to trunk: didn't fix any problems \n(e.g. some tests still fail, things outside of core lucene won't even compile)\n",
            "date": "2010-10-18T14:52:39.672+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "here's a really really rough \"take 2\" at the problem.\n\nThe general idea is to take a smaller \"baby-step\" as Mike calls it, to the problem.\nReally we have been working our way towards this anyway, exposing additional statistics,\nmaking Similarity per-field, fixing up inconsistencies... and this is the way I prefer, as we\nget things actually committed and moving.\n\nSo whatever is in this patch (which is full of nocommits, but all tests pass and all queries work with it),\nwe could possibly then split up into other issues and continue slowly proceeding, or maybe\ncreate a branch, whatever.\n\nMy problem with the other patch is it requires a ton more work to make any progress on it...\nand things don't even compile with it, forget about tests.\n\nThe basics here are to:\n# Split the \"matching\" and \"scoring calculations\" of Scorer. All responsibility of calculations belongs\nin the Similarity, the Scorer should be matching positions, working docsEnums, etc etc.\n# Similarity as we know it now, gets a more low-level API, and TFIDFSimilarity implements this API,\nbut exposes its customizations via the tf(), idf(), etc we know now.\n# Things like score-caching and specialization of calculations are the responsibility of the Similarity,\nas these depend upon the formula being used. For TFIDFSimilarity, i added some optimizations here,\nfor example it specializes its norms == null case away to remove the per-doc \"if\".\n# Since all Weights create PerReaderTermState (<-- this one needs a new name), to separate the\nseeking/stats collection from the calculations, i also optimized PhraseQuery's Weight/Scorer construction\nto be single-pass. \n\nAlso I like to benchmark every step of the way, so we don't come up with\nthis design that won't be performant: here are the scores for lucene's default Sim with the patch:\n||Query||QPS trunk||QPS patch||Pct diff||||\n|spanNear([unit, state], 10, true)|3.04|2.92|{color:red}-4.0%{color}|\n|doctitle:.*[Uu]nited.*|4.00|3.99|{color:red}-0.1%{color}|\n|+unit +state|8.11|8.12|{color:green}0.2%{color}|\n|united~2.0|4.36|4.40|{color:green}1.0%{color}|\n|united~1.0|18.70|18.93|{color:green}1.2%{color}|\n|unit~2.0|8.54|8.71|{color:green}2.1%{color}|\n|spanFirst(unit, 5)|11.35|11.59|{color:green}2.2%{color}|\n|unit~1.0|8.69|8.91|{color:green}2.6%{color}|\n|unit state|7.03|7.23|{color:green}2.8%{color}|\n|\"unit state\"~3|3.74|3.86|{color:green}3.2%{color}|\n|u*d|16.72|17.30|{color:green}3.5%{color}|\n|state|19.24|20.04|{color:green}4.1%{color}|\n|un*d|49.42|51.55|{color:green}4.3%{color}|\n|\"unit state\"|5.99|6.31|{color:green}5.3%{color}|\n|+nebraska +state|140.74|151.85|{color:green}7.9%{color}|\n|uni*|10.66|11.55|{color:green}8.4%{color}|\n|unit*|18.77|20.41|{color:green}8.7%{color}|\n|doctimesecnum:[10000 TO 60000]|6.97|7.70|{color:green}10.4%{color}|\n\nAll Lucene/Solr tests pass, but there are lots of nocommits, especially\n# No Javadocs\n# Explains need to be fixed: in general the explanation of \"matching\" belongs where it is now,\nbut the explanation of \"score calculations\" belongs in the Similarity.\n# need to refactor more out of Weight, currently we pass it to the docscorer, but\nits the wrong object, as it can only \"hold\" a single float.\n\nAnyway, its gonna take some time to rough all this out I'm sure, but I wanted\nto show some progress/invite ideas, and also show we can do this stuff\nwithout losing performance.\n\nI have separate patches that need to be integrated/relevance tested e.g. \nfor average doc length... maybe i'll do that next so we can get some concrete\nalternate sims in here before going any further.\n\n",
            "date": "2011-01-25T17:24:38.525+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "Updated patch, i brought the patch to trunk, cleaned up, enabled some more of the stats in scoring (e.g. totalTermFreq/sumOfTotalTermFreq).\n\nIn src/test i added a MockLMSimilarity, that implements \"Bayesian smoothing using Dirichlet priors\" from http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.136.8113\n\nThis one is interesting, as its faster than lucene's scoring formula today :)\n\nI want to get some of this stuff in shape for David (or any other GSOC students) to be able to implement their algorithms, but there is a lot of refactoring (e.g. explains) to do.\n\nI'll create a branch under https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring with this infrastructure in a bit.\n\nTonight i'll see if i can get the avg doc length stuff in the branch too.\n",
            "date": "2011-03-28T02:49:26.317+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "I think we need to commit the refactoring portions (separating TF-IDF out) to trunk very soon, because its really difficult\nto keep this branch in sync with trunk, e.g. lots of activity and refactoring going on.\n\nI'd like to get this merged in as quickly as possible. I don't think the svn history is interesting, especially given\nall the frustrations I am having with merging... The easiest way will be to commit a patch, I'll get everything in shape\nand upload one soon, like, today.\n",
            "date": "2011-07-07T14:10:28.836+0000",
            "id": 10
        },
        {
            "author": "Simon Willnauer",
            "body": "{quote}\nI'd like to get this merged in as quickly as possible. I don't think the svn history is interesting, especially given\nall the frustrations I am having with merging... The easiest way will be to commit a patch, I'll get everything in shape\nand upload one soon, like, today.\n{quote}\n\n+1 even if this is not entirely in shape we can still iterate on trunk. ",
            "date": "2011-07-07T16:32:20.892+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "Attached is a patch, with this CHANGES entry:\n\n{noformat}\n* LUCENE-2392: Decoupled vector space scoring from Query/Weight/Scorer. If you\n  extended Similarity directly before, you should extend TFIDFSimilarity instead.\n  Similarity is now a lower-level API to implement other scoring algorithms.\n  See MIGRATE.txt for more details.\n{noformat}\n\nI would like to commit this, and then proceed onward with issues such as LUCENE-3220 and LUCENE-3221",
            "date": "2011-07-07T16:45:49.841+0000",
            "id": 12
        },
        {
            "author": "Robert Muir",
            "body": "Committed revision 1144158.",
            "date": "2011-07-08T05:08:44.281+0000",
            "id": 13
        }
    ],
    "component": "core/search",
    "description": "This is a first step (nowhere near committable!), implementing the\ndesign iterated to in the recent \"Baby steps towards making Lucene's\nscoring more flexible\" java-dev thread.\n\nThe idea is (if you turn it on for your Field; it's off by default) to\nstore full stats in the index, into a new _X.sts file, per doc (X\nfield) in the index.\n\nAnd then have FieldSimilarityProvider impls that compute doc's boost\nbytes (norms) from these stats.\n\nThe patch is able to index the stats, merge them when segments are\nmerged, and provides an iterator-only API.  It also has starting point\nfor per-field Sims that use the stats iterator API to compute boost\nbytes.  But it's not at all tied into actual searching!  There's still\ntons left to do, eg, how does one configure via Field/FieldType which\nstats one wants indexed.\n\nAll tests pass, and I added one new TestStats unit test.\n\nThe stats I record now are:\n\n  - field's boost\n\n  - field's unique term count (a b c a a b --> 3)\n\n  - field's total term count (a b c a a b --> 6)\n\n  - total term count per-term (sum of total term count for all docs\n    that have this term)\n\nStill need at least the total term count for each field.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2392",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Enable flexible scoring",
    "systemSpecification": true,
    "version": ""
}