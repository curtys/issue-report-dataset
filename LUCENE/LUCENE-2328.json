{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Anyone wanna cons up a patch here...?",
            "date": "2010-03-18T09:26:22.646+0000",
            "id": 0
        },
        {
            "author": "Shai Erera",
            "body": "Would that mean removing files from synced whenever 'deleter' (which is an IndexFileDeleter) calls delete*? Are there other places to look for?",
            "date": "2010-03-18T09:59:40.261+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Yes I think that's it.",
            "date": "2010-03-18T10:16:59.280+0000",
            "id": 2
        },
        {
            "author": "Earwin Burrfoot",
            "body": "A shot in the sky (didn't delve deep into the problem, could definetly miss stuff):\n\nWhat about tracking 'syncidness' from within Directory?\nThere shouldn't be more than one writer anyway (unless your locking is broken), so that's a single set of 'files-to-be-synced' for each given moment of time. Might as well keep track of it inside the directory, and have a syncAllUnsyncedGuys() on it.\n\nThis will also remove the need to transfer that list around when transferring write lock (IR hell).\n\nAnd all-round that sounds quite logical, as the need/method of syncing depends solely on directory. If you're working with RAMDirectory, you don't need to keep track of these files at all.\nProbably same for some of DB impls.\nAlso some filesystems sync everything, when you ask to sync a single file, so if you're syncing a batch of them in a row, that's some overhead that you can theoretically work around with a special flag to FSDir.",
            "date": "2010-03-18T10:44:36.566+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "I like this idea!\n\nBut, we don't want to simply sync all new files.  When IW commits,\nit's possibly a subset of all new files.  EG running merges (or any\nstill-open files) should not be sync'd.\n\nNot necessarily all closed files should be sync'd either -- eg any\nfiles that were opened & closed while we were syncing (since syncing\ncan take some time) should not then be sync'd.\n\nMaybe we change Dir.sync to take a Collection<String>?\n\nThen dir would be the one place that keeps track of what's already\nbeen sync'd and what hasn't.\n\nOr... I wonder if calling sync on a file that's already been sync'd is\nreally that wasteful... I mean it's technically a no-op, so it's just\nthe overhead of a no-op system call from way up in javaland.\n",
            "date": "2010-03-18T12:23:06.157+0000",
            "id": 4
        },
        {
            "author": "Earwin Burrfoot",
            "body": "> EG running merges (or any still-open files) should not be sync'd.\nFiles that are still being written should not be synced, that's kinda obvious.\n\n> Not necessarily all closed files should be sync'd either - eg any files that were opened & closed while we were syncing (since syncing can take some time) should not then be sync'd.\nThis one is not so obvious.\nI assume that on calling syncEveryoneAndHisDog() you should sync all files that have been written to, and were closed, and not yet deleted.\n\n> Maybe we change Dir.sync to take a Collection<String>?\nWhat does that alone give us over the current situation? You can call Dir.sync() repeatedly, it's all the same.\n\n> Or... I wonder if calling sync on a file that's already been sync'd is really that wasteful... \nIt can be on these systems, that just sync down everything. I don't believe in people writing good software : }",
            "date": "2010-03-18T12:41:17.844+0000",
            "id": 5
        },
        {
            "author": "Shai Erera",
            "body": "ok so let me see if I understand this. Before Earwin suggested adding synced to Directory, the approach (as I understood it) was - whenever deleter deletes a file, remove it from synced as well.\n\nAfter Earwin's suggestion, which I like very much, as it moves more stuff out of IW, which could use some simplification, I initially thought that we should do this: when dir.sync is called, add that file to dir.synced. Then when dir.delete is called, remove it from there. When dir.commit is called, add all changed/synced files to the set (probably all of them). Something very straightforward and simple.\n\nHowever, the last two posts seem to try to complicate it ... and I don't understand why. So I'd appreciate if you can explain what am I missing.",
            "date": "2010-03-18T13:15:53.984+0000",
            "id": 6
        },
        {
            "author": "Earwin Burrfoot",
            "body": "I'm proposing something even more dead simple.\n\n1. We remove Directory.sync(String) completely.\n2. Each time you call IndexOutput.close(), Dir adds this file to its internal set (if it cares about it at all).\n3. If you call Directory.delete(), it also removes file from the set (though not strictly necessary).\n4. When you commit at IW, it calls Directory.sync() and everything in its internal set gets synced. ",
            "date": "2010-03-18T13:39:25.898+0000",
            "id": 7
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Btw, initial problem stems from the fact that IW/IR keeps track of the files it *has already* synced, instead of the files it *has not yet* synced. Which is kinda upside down, and requires upkeep, unlike straightforward approach in which this set gets cleared anew after each commit call.\n\nI can conjure up a patch in a day or two.",
            "date": "2010-03-18T13:43:35.167+0000",
            "id": 8
        },
        {
            "author": "Shai Erera",
            "body": "How would IndexInput report back to the Directory when its close() was called? I've checked a couple of Directories and when they openInput, they don't pass themselves to the IndexInput. I think what you say makes sense, but I don't see how this can be implemented w/ the current implementations (and w/o relying on broken Directory impls out there). Broken in the sense that they don't expect to get any notification from IndexInput.close().\n\nOther than that, I like that approach. Also, what you wrote about IW keeping track on already synced files - I guess you'll change that when it moves into Directory, so that it will track the files it hasn't synced yet?",
            "date": "2010-03-18T14:04:12.322+0000",
            "id": 9
        },
        {
            "author": "Earwin Burrfoot",
            "body": "> How would IndexInput report back to the Directory when its close() was called? I've checked a couple of Directories and when they openInput, they don't pass themselves to the IndexInput.\nHmm. I guess I have to change IndexOutput impls?\n\n> so that it will track the files it hasn't synced yet?\nSure",
            "date": "2010-03-18T14:41:30.908+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "Keeping track of not-yet-sync'd files instead of sync'd files is\nbetter, but it still requires upkeep (ie when file is deleted you have\nto remove it) because files can be opened, written to, closed, deleted\nwithout ever being sync'd.\n\nAnd I like moving this tracking under Dir -- that's where it belongs.\n\nbq. I assume that on calling syncEveryoneAndHisDog() you should sync all files that have been written to, and were closed, and not yet deleted.\n\nThis will over-sync in some situations.\n\nIe, causing commit to take longer than it should.\n\nEG say a merge has finished with the first set of files (say _X.fdx/t,\nsince it merges fields first) but is still working on postings, when\nthe user calls commit.  We should not then sync _X.fdx/t because they\nare unreferenced by the segments_N we are committing.\n\nOr the merge has finished (so _X.* has been created) but is now off\nbuilding the _X.cfs file -- we don't want to sync _X.*, only _X.cfs\nwhen its done.\n\nAnother example: we don't do this today, but, addIndexes should really\nrun fully outside of IW's normal segments file, merging away, and then\nonly on final success alter IW's segmentInfos.  If we switch to that,\nwe don't want to sync all the files that addIndexes is temporarily\nwriting...\n\nThe knowledge of which files \"make up\" the transaction lives above\nDirectory... so I think we should retain the per-file control.\n\nI proposed the bulk-sync API so that Dir impls could choose to do a\nsystem-wide sync.  Or, more generally, any Dir which can be more\nefficient if it knows the precise set of files that must be sync'd\nright now.\n\nIf we stick with file-by-file API, doing a system-wide sync is\nsomewhat trickier... because you can't assume from one call to the\nnext that nothing had changed.\n\nAlso, bulk sync better matches the semantics IW/IR require: these\nconsumers don't care the order in which these files are sync'd.  They\njust care that the requested set is sync'd.  So it exposes a degree of\nfreedom to the Dir impls that's otherwise hidden today.\n",
            "date": "2010-03-18T14:57:22.112+0000",
            "id": 11
        },
        {
            "author": "Earwin Burrfoot",
            "body": "> Keeping track of not-yet-sync'd files instead of sync'd files is better, but it still requires upkeep (ie when file is deleted you have to remove it) because files can be opened, written to, closed, deleted without ever being sync'd.\nYou can just skip this and handle FileNotFound exception when syncing. Have to handle it anyway, no guarantees some file won't be snatched from under your nose.\n\n> This will over-sync in some situations.\nDon't feel this is a serious problem. If you over-sync (in fact sync some files a little bit earlier than strictly required), in a few seconds you will under-sync, so total time is still the same.\n\nBut I feel you're somewhat missing the point. System-wide sync is not the original aim, it's just a possible byproduct of what is the original aim - to move sync tracking code from IW to Directory. And I don't see at all how adding batch-syncs achieves this.\nIf you're calling sync(Collection<String>), damn, you should keep that collection somewhere :) and it is supposed to be inside!",
            "date": "2010-03-18T15:23:34.096+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nbq. Keeping track of not-yet-sync'd files instead of sync'd files is better, but it still requires upkeep (ie when file is deleted you have to remove it) because files can be opened, written to, closed, deleted without ever being sync'd.\nYou can just skip this and handle FileNotFound exception when syncing. Have to handle it anyway, no guarantees some file won't be snatched from under your nose.\n{quote}\n\nIW & IR do in fact guarantee they will never ask for a deleted file to\nbe sync'd.  If they ever do that we have more serious problems ;)\n\n{quote}\nbq. This will over-sync in some situations.\nDon't feel this is a serious problem. If you over-sync (in fact sync some files a little bit earlier than strictly required), in a few seconds you will under-sync, so total time is still the same.\n{quote}\n\nI think this is important -- commit is already slow enough -- why make\nit slower?\n\nFurther, the extra files you sync'd may never have needed to be sync'd\n(they will be merged away).  My examples above include such cases.\n\nTurning this around... what's so bad about keeping the sync per file?\n\nbq. System-wide sync is not the original aim, it's just a possible byproduct of what is the original aim\n\nI know this is not the aim of this issue, rather just a nice\nby-product if we switch to a \"global sync\" method.\n\nbq. to move sync tracking code from IW to Directory.\n\nRight this is a great step forward, as long as long as we don't slow\ncommit by dumbing down the API :)\n\nbq. And I don't see at all how adding batch-syncs achieves this.\n\nYou're right: this doesn't achieve / is not required for \"moving\nsync'd file tracking\" down to Dir.  It's orthogonal, but, is another\nway that we could allow Dir impls to do global sync.\n\nI'm proposing this as a different change, to make the API better match\nthe needs of its consumers.  In fact, really the OS ought to allow for\nthis as well (but I know of none that do) since it'd give the IO\nscheduler more freedom on which bytes need to be moved to disk.\n\nWe can open this one as a separate issue...\n",
            "date": "2010-03-18T15:47:32.847+0000",
            "id": 13
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Okay, summing up.\n\n1. Directory gets a new method - sync(Collection<String>), it will become abstract in 4.0, but now by default delegates to current sync(String), which is deprecated.\n2. FSDirectory tracks newly written, closed and not deleted files, by changing FSD.IndexOutput accordingly.\n3. sync() semantics changes from \"sync this now\" to \"sync this now, if you think it's needed\". Noop sync() impls like RAMDir continue to be noop, FSDir syncs only those files that exist in its tracking set and ignores all others.\n4. IW/IR stop tracking synced files completely (lots of garbage code gone from IW), and instead call sync(Collection) on commit with a list of all files that constitute said commit.\n\nThese steps preserve back-compatibility (Except for cases of custom Directory impls in which calling sync on the same file sequentially is costly. They will suffer performance degradation), ensure that for each commit only strictly requested subset of files is synced (thing Mike insisted on), and will completely remove sync-tracking code from IW and IR.\n\n5. We open another issue to experiment with batch syncing and various filesystems. Some relevant fun data: http://www.humboldt.co.uk/2009/03/fsync-across-platforms.html\n",
            "date": "2010-03-18T16:47:08.588+0000",
            "id": 14
        },
        {
            "author": "Shai Erera",
            "body": "bq. .... changing FSD.IndexOutput accordingly\n\nThis worries me a bit. If only FSD.IndexOutput will do that, I'm afraid other Directory implementations won't realize that they should do so as well (NIO?). I'd prefer if IndexOutput in its contract is supposed to callback on Directory upon close ... not sure - maybe just put some heave documentation around createOutput? If we could enforce this API-wise, and let the Dirs that don't care simply ignore, then it'd be better. It'll also allow for someone to extend FSD.createOutput, return his own IndexOutput and not worry (or do, but knowingly) about calling back to Dir.\n\nOther than that - this looks great.",
            "date": "2010-03-18T16:57:57.220+0000",
            "id": 15
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Every Directory implementation decides how to handle sync() calls on its own. The fact that FSDir (and descendants) do this performance optimization is their implementation details.\nI don't want to bind this somehow into the base class. But, I will note in javadocs to sync() that clients may pass the same file over and over again, so you might want to optimize for this.",
            "date": "2010-03-18T17:22:54.804+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "Must the Dir insist the file is closed in order to sync it?\n\nWhy not enroll newly created files in the \"to be sync'd\" set?",
            "date": "2010-03-18T17:43:22.508+0000",
            "id": 17
        },
        {
            "author": "Shai Erera",
            "body": "Yeah I guess I wasn't clear enough. So suppose someone sub-classes FSDir and overrides createOutput. How should he know his IndexOutput should call dir.sync()? How should he know he needs to pass the Dir to his IndexOutput? So I suggested to either mention it in the Javadocs, or somehow make all of FSDir's outputs know about that, API-wise ...\n\nSo today a file is closed only upon commit (?), and it's then that it's synced? If so, why would you want to sync a file that is still open? I guess it cannot harm, but what's the use case?",
            "date": "2010-03-18T18:09:49.648+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "In the current proposal, IndexOutput won't call dir.sync.  All it will do is notify the dir when it was closed so the dir will record that filename as \"eligible for commit\".\n\nLucene today never syncs a file until after it's closed, but, conceivably some day it could.  Or others who use the Dir API to write their own files could.\n\nAt the OS level this is perfectly fine (in fact you have to pass an open fd to fsync).  It seems presumptuous of the directory to silently ignore a call to sync just because the file hadn't been closed yet...",
            "date": "2010-03-18T18:25:25.829+0000",
            "id": 19
        },
        {
            "author": "Earwin Burrfoot",
            "body": "> Must the Dir insist the file is closed in order to sync it?\nWell, no, this can be relaxed.\nBecause default Directory clients - IW+IR will never call sync() on a file they didn't close yet.\nAlso this client behaviour is guaranteed with current implementation - if someone calls current sync() on an open file, it will fail on 'new RandomAccessFile'?\n\nShai:\nCurrently, if someone subclasses FSDir, he already always needs to call initOutput(name) before creating IndexOutput. This class is obviously not designed for easy extension :)\nPlus, someone might extend FSDir to change syncing behaviour, so we should allow this and not force people?\n\nMy hands are itching to do minor cleanups on classes touched by the patch, like moving fields to the beginning of the class, so you damn know what it contains from the first glance, declaring most of said fields final (will help with \"Sync on non-final field\" warnings too), replacing HEX_DIGITS voodoo with Integer.toHexString, moving createIndexOutput to FSDir, as it is a copypasted in all three child classes and has ugly \"always call initOutput\" comment.\nIs that acceptable or should be rolled into another issue?",
            "date": "2010-03-18T18:29:24.381+0000",
            "id": 20
        },
        {
            "author": "Michael McCandless",
            "body": "Yes please clean as you go Earwin -- those sound great.\n\n{quote}\nbq. Must the Dir insist the file is closed in order to sync it?\nWell, no, this can be relaxed.\nBecause default Directory clients - IW+IR will never call sync() on a file they didn't close yet.\nAlso this client behaviour is guaranteed with current implementation - if someone calls current sync() on an open file, it will fail on 'new RandomAccessFile'?\n{quote}\n\nI'd like to allow for this to work in the future, even if current FSDir impls cannot sync an open file.  EG conceivably they could reach in and get the RAF that IndexOutput has open and sync it.\n\nSo I think we just note this as a limitation of FSDir impls today, but, the API allows for it?",
            "date": "2010-03-18T18:45:49.902+0000",
            "id": 21
        },
        {
            "author": "Shai Erera",
            "body": "Earwin, I agree that sub-classing FSDir is not that easy. So I guess you'll add another piece of jdoc to createOutput, to notify Dir when it's closed? This seems reasonable.",
            "date": "2010-03-19T17:07:51.492+0000",
            "id": 22
        },
        {
            "author": "Michael McCandless",
            "body": "When it's opened, not closed, right?",
            "date": "2010-03-19T18:13:16.969+0000",
            "id": 23
        },
        {
            "author": "Earwin Burrfoot",
            "body": "I'll either jdoc this, or move createOutput to FSDir, as all three current impls are a copy of each other. In such a case someone overriding createOutput can look at the original and decide for himself if he wants to keep and call this functionality, or not.\n\n> When it's opened, not closed, right? \nMike, I thought about it once again. If you allow sync()ing open files, you still need to track when they are closed. Or the following may happen:\n\nio = dir.createIndexOutput(name); // registers 'name' as a stale file\ndir.sync(name) // syncs 'name', removes it from registry\n... // do stuff\nio.close()\ndir.sync(name) // does not sync 'name', as it is no longer in the registry\n... // BZZWHAM!!\n... // crash happens, the data is lost",
            "date": "2010-03-19T18:55:20.889+0000",
            "id": 24
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Thus, I think we should officially disallow syncing open files. This operation is impossible right now and pointless, anyway.",
            "date": "2010-03-19T18:57:49.963+0000",
            "id": 25
        },
        {
            "author": "Michael McCandless",
            "body": "bq. If you allow sync()ing open files, you still need to track when they are closed. Or the following may happen:\n\nAhh right.\n\nOK so let's disallow that in the API.  You can only sync a file after it's been closed.  Trying to sync a file that hasn't yet been closed will be undefined.  (and it sounds like *FSDir will silently ignore the request).",
            "date": "2010-03-19T19:37:16.726+0000",
            "id": 26
        },
        {
            "author": "Shai Erera",
            "body": "bq. Trying to sync a file that hasn't yet been closed will be undefined\n\nCan we avoid 'undefined'? We have an issue open about SegmentInfos.fileLength() not clearly defined and it causes confusion. If it's undefined, then someone might attempt to call sync before he closes the file, and only then close ... can we throw an exception in that case?\n\nWe can have close(), sync() and closeAndSync(). Would the latter make sense?\n\nI prefer if the API will be explicit,, and I think that throwing an exception (StillOpenException?) if sync() is called before close() is very explicit, and reasonable if accompanied by a proper jdoc.",
            "date": "2010-03-19T21:21:34.595+0000",
            "id": 27
        },
        {
            "author": "Michael McCandless",
            "body": "bq. We can have close(), sync() and closeAndSync(). Would the latter make sense?\n\nI don't think closeAndSync could be used by Lucene, at least today.  Typically, at the time these files are closed, Lucene has no idea whether sync is needed (ie, whether a commit() will be called by the app before the segment gets merged).  So I don't think we should add it now?  (Design for today).\n\nbq. I prefer if the API will be explicit,, and I think that throwing an exception (StillOpenException?) if sync() is called before close() is very explicit, and reasonable if accompanied by a proper jdoc.\n\nThis would be great... I think, especially, for something as important as sync(), we should not silently ignore you when you think you've sync'd an open file.",
            "date": "2010-03-19T23:09:39.107+0000",
            "id": 28
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Okay, dirty patch go!\n\nI threw in FSyncStrategy, so we choose to sync like before, don't sync at all or do ext3-geared sync.\nTell me what you think? We can allow subclasses to define sync strategy or maybe user himself (it's hardwired now). We can also just inline default and if people want action - they override.",
            "date": "2010-03-22T12:32:24.550+0000",
            "id": 29
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Ah, patch is based off LUCENE-2339. If applied over trunk, there may be some import conflicts in Directory.java",
            "date": "2010-03-22T12:34:06.264+0000",
            "id": 30
        },
        {
            "author": "Michael McCandless",
            "body": "BTW on the sync of still-open files non-supported case, if we ever did want to support, I think we'd add sync to IndexOutput.\n\nIe it makes sense that this dir-level sync only works after the file is closed.",
            "date": "2010-03-22T15:15:49.581+0000",
            "id": 31
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks great -- what a sweet cleanup!  I love all the code removed from IW  & DR :)\n\nCan we remove NoFSync & Ext3StyleFSync?  People can write these if they want...\n\nAlso, you moved SimpleFSDir.SimpleFSIndexOutput -> FSDir.FSIndexOutput... but this is a break in back-compat right?  Ie subclasses \"out there\" may be using this?\n\nCan you add a CHANGES entry?",
            "date": "2010-03-22T17:13:45.399+0000",
            "id": 32
        },
        {
            "author": "Earwin Burrfoot",
            "body": "New patch.\nFSyncStrategy removed, default inlined. All our Directory impls override deprecated sync() to preserve back-compat.\nPreserving back-compat for IO move is impossible, mentioned in CHANGES.txt, which probably needs some love.\n",
            "date": "2010-03-22T19:58:37.971+0000",
            "id": 33
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Clean patch against trunk",
            "date": "2010-03-22T20:19:30.635+0000",
            "id": 34
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks great Earwin -- I'll commit in a day or two.  Thanks!",
            "date": "2010-03-22T20:44:25.333+0000",
            "id": 35
        },
        {
            "author": "Shai Erera",
            "body": "Earwin, can you add a deprecation message to sync(String)? When I upgraded from 2.9 to 3.0 some methods were deprecated w/o any explanation as to what I should use instead. I think a message like \"@deprecated use #sync(Collection) instead. For easy migration you can change your code to call sync(Colllections.singleton(name))\" ... or something along those lines.\n\nOther than that, patch looks great! I really like the code cleanup from IW.",
            "date": "2010-03-22T21:15:38.246+0000",
            "id": 36
        },
        {
            "author": "Earwin Burrfoot",
            "body": "added comment to jdocs",
            "date": "2010-03-22T22:04:57.444+0000",
            "id": 37
        },
        {
            "author": "Uwe Schindler",
            "body": "Ahm,\n\none question, why does this patch reimplement the deprecated and removed FSIndexInput/FSIndexOutput? They have to be and are in SimpleFSIndexOutput. You are reverting to the pre-2.9 state. This is not obvious to me, so I am -1 about this patch without explanation.",
            "date": "2010-03-22T22:07:07.128+0000",
            "id": 38
        },
        {
            "author": "Earwin Burrfoot",
            "body": "I do not touch *IndexInput, these should stay where they are.\nFSIndexOutput is used in *all* child classes, without changes, so it's only logical to move it to parent. It is also tied in now with sync tracking logic, and required for it to work properly.\nPreserving backwards-compatibility here is impossible because we need FSIO to call back its parent, whether it's by declaring it non-static, or passing a new explicit parameter to constructor, it is required and it is a break.",
            "date": "2010-03-22T23:05:45.974+0000",
            "id": 39
        },
        {
            "author": "Michael McCandless",
            "body": "I think it's OK to make an exception to back-compat here.  Users who subclass FSDir, and also \"borrow\" SimpleFDDir's IndexOutput impl, are very advanced and can change their code.  The break will also be very clear -- compilation error, which you must fix to move on -- so we're not making a trap here.\n\nUwe are you OK with the rename?  I think it actually does make sense that it be in the base class...",
            "date": "2010-03-23T09:22:59.613+0000",
            "id": 40
        },
        {
            "author": "Uwe Schindler",
            "body": "I am fine now! Go for it! Policeman is happy.",
            "date": "2010-03-23T16:15:26.196+0000",
            "id": 41
        },
        {
            "author": "Michael McCandless",
            "body": "OK I will commit shortly!  Thanks Earwin :)",
            "date": "2010-03-23T16:35:00.734+0000",
            "id": 42
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Mike, you missed latest patch, with Shai-requested comment:\n\n{code}\n@@ -85,6 +85,8 @@\n    * stable storage.  Lucene uses this to properly commit\n    * changes to the index, to prevent a machine/OS crash\n    * from corrupting the index.\n+   * @deprecated use {@link #sync(Collection)} instead.\n+   * For easy migration you can change your code to call sync(Collections.singleton(name))\n    */\n   @Deprecated\n   public void sync(String name) throws IOException { // TODO 4.0 kill me\n{code}\n",
            "date": "2010-03-24T00:07:48.998+0000",
            "id": 43
        },
        {
            "author": "Michael McCandless",
            "body": "Woops, fixed, thanks!",
            "date": "2010-03-24T06:25:17.277+0000",
            "id": 44
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch with a simpler fix for 3.0/2.9.\n\nIndexWriter and IndexReader now pass the synced set to IndexFileDeleter, which in turn removes files from it once they are deleted.  This means the set can only be as big as the number of sync'd but not yet deleted files in the index.",
            "date": "2010-10-29T23:52:34.332+0000",
            "id": 45
        },
        {
            "author": "Michael McCandless",
            "body": "Reopen for backport.",
            "date": "2010-10-30T09:46:05.819+0000",
            "id": 46
        }
    ],
    "component": "core/index",
    "description": "I am running into a strange OutOfMemoryError. My small test application does\nindex and delete some few files. This is repeated for 60k times. Optimization\nis run from every 2k times a file is indexed. Index size is 50KB. I did analyze\nthe HeapDumpFile and realized that IndexWriter.synced field occupied more than\nhalf of the heap. That field is a private HashSet without a getter. Its task is\nto hold files which have been synced already.\n\nThere are two calls to addAll and one call to add on synced but no remove or\nclear throughout the lifecycle of the IndexWriter instance.\n\nAccording to the Eclipse Memory Analyzer synced contains 32618 entries which\nlook like file names \"_e065_1.del\" or \"_e067.cfs\"\n\nThe index directory contains 10 files only.\n\nI guess synced is holding obsolete data ",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2328",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "IndexWriter.synced  field accumulates data leading to a Memory Leak",
    "systemSpecification": true,
    "version": "2.9.1, 2.9.2, 3.0, 3.0.1"
}