{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "This sounds good Shai!\n\nThis is technically a back-compat break, but, these are experimental APIs, and this is an easy fix for users who have impl'd their own MPs, so I think it's OK to make an exception.  Make sure you note it in the bw break section in CHANGES...",
            "date": "2010-03-14T10:16:25.354+0000",
            "id": 0
        },
        {
            "author": "Shai Erera",
            "body": "Ok, I'll update that part of CHANGES. The conversion is very straightforward - instead of calling writer.doXYZ(), the code becomes writer.get().doXYZ().",
            "date": "2010-03-14T13:28:40.332+0000",
            "id": 1
        },
        {
            "author": "Shai Erera",
            "body": "Patch with the proposed changes including:\n* SetOnce (+ test)\n* Deprecations in IW\n* Adds MP to IWC\n* Changes needed in MP and extensions\n* Converted tests code to not use the deprecated API.\n\nAll tests pass, including core, contrib and backwards",
            "date": "2010-03-14T15:46:28.253+0000",
            "id": 2
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Or, maybe, we should think of MergePolicy API that doesn't require one to keep a reference to IW?\nThe more you struggle to control such circular multistage initializations and check their validity, the more their ugliness stands out and screams - refactor meee!",
            "date": "2010-03-15T01:59:38.647+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Or, maybe, we should think of MergePolicy API that doesn't require one to keep a reference to IW?\n\nLooks like IW is used pretty widely: for messaging (when infoStream is set), for retrieving the merges, for getting the Directory, and for getting number of deleted docs for a given segment.  I guess an option would be to simply pass it around everywhere.  Then we wouldn't have to break the circular dependendy.\n\nThis is what MergeScheduler appears to do -- it's passed to .merge, and then each bg thread in CMS holds a reference to the writer (since it needs to ask for followon merges).",
            "date": "2010-03-15T15:44:15.356+0000",
            "id": 4
        },
        {
            "author": "Shai Erera",
            "body": "The thing is that we were at that position already, before I changed it so that MP requires writer up front. The reason was, like Mike mentioned, that writer had to be passed on all method calls, for really no good reason. A MP is usually coupled w/ an IW instance and I don't think we should opt for decoupling them.\n\nMost of this patch removes MP setting from IW to IWC (and hence changes test code to use the new API). The SetOnce juggling is done only to ensure an IW is set exactly once on MP, and allows us to resolve that circular dependency. We can do two things:\n# Continue w/ SetOnce as introduced in this patch.\n# Introduce a setIndexWriter on MP which anyone can call, even more than once.\n\nWith (1) I don't think we complicate anything, and SetOnce can be useful in other places as well. (2) is really like passing writer on all method calls, so let's at least not have it as part of all methods signature. I prefer (1) slightly over (2) but am fine w/ (2) as well. I wouldn't want to change MP back to require IW on all its methods.",
            "date": "2010-03-15T20:05:15.717+0000",
            "id": 5
        },
        {
            "author": "Earwin Burrfoot",
            "body": "We could split MergePolicy in two - class that represents the policy (config/factory) and class that acts on that policy (instance).\n\nSo IW gets a MergePolicy that has no outside references, and creates a MergePoliceman from it, supplying 'this' on construction.\nThus, circular reference still exists, but is contained for good.\n\nNot sure I totally love the idea myself though.",
            "date": "2010-03-15T21:13:54.099+0000",
            "id": 6
        },
        {
            "author": "Shai Erera",
            "body": "But it's MP which requires IW. So how will your policeman (like the name :)) proposal prevent it? I think that setting IW on MP is not such a bad thing. If MP needs it then it needs. The question now is to what length do we want to go w/ it: make it sort of final (in which case SetOnce makes sense) or settle w/ a setIW which is simpler.\n\nThis issue is more about moving MP into IWC than refactor MP. I'd like to keep it focused on that as much as possible. I don't mean that we should stop discussing the refactoring, just to say it can be done separately. After MP moves to IWC and all code is converted to use the new API, refactoring MP internally should not affect the API level, right?\n\nIf u agree w/ that, then how do u propose to continue? W/ SetOnce or a simple setter?  ",
            "date": "2010-03-16T15:14:40.150+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good Shai!  I'd rather go with the SetOnce approach than introduce a single-use factory for IW to create the MP.\n\nBut, I don't think we should keep the MP ctors that take IW?  Ie, you make the MP then call .setIW on it?  We can just remove them (and advertise this in the CHANGES bw break entry) since it's an experimental API...",
            "date": "2010-03-17T16:17:01.807+0000",
            "id": 8
        },
        {
            "author": "Shai Erera",
            "body": "Attached patch w/ removing the IW-related ctors from MPs, as well as fixing backwards. All tests pass, including javadocs",
            "date": "2010-03-17T20:53:37.993+0000",
            "id": 9
        },
        {
            "author": "Shai Erera",
            "body": "Updating to the latest revision. This should be ok now.",
            "date": "2010-03-17T21:24:31.216+0000",
            "id": 10
        },
        {
            "author": "Shai Erera",
            "body": "Sorry ... I generated the patch on the wrong backwards folder (the one before Uwe's changes) :). I hope this time it's ok ...",
            "date": "2010-03-17T21:57:53.989+0000",
            "id": 11
        },
        {
            "author": "Uwe Schindler",
            "body": "Its normally not the idea of backwards tests to change the src/java part of the backwards part, as this would hide a backwards break. You should only change only src/tests in backwards! src/java is only for compiling a JAR file of the old lucene version, if you change it, you test against the wrong classes!\n\nUwe",
            "date": "2010-03-17T22:06:51.653+0000",
            "id": 12
        },
        {
            "author": "Shai Erera",
            "body": "Uwe, I'm pretty familiar w/ how backwards goes .. I've had a lot of bw breaks in my contributions history :). This patch + issue removes the MP ctor which accepts IW and exposes the default ctor only. That's a bw break, which is documented in CHANGES as well as was agreed on here because MP is experimental and gives us the freedom to do that (not that it's such a drastic change). Therefore I had to update the src/java section of bw, so that its tests would compile against MPs that expose the default ctor, and not the one accepting IW.",
            "date": "2010-03-17T22:10:27.096+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "In that case just remove the test in backwards. If you just replicate it in the same way like in trunk, it does not make sense.",
            "date": "2010-03-17T22:15:43.039+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "I think it's OK to add stubs to src/* under backwards branch, in cases like this?  Ie when an experimental API is changed.\n\nJust removing the tests that use the affected API isn't really an option here -- eg some tests explicitly set up a LogDocMergePolicy (not sure exactly why) and we in general can't just remove that.",
            "date": "2010-03-17T22:23:27.679+0000",
            "id": 15
        },
        {
            "author": "Mark Miller",
            "body": "+1 - I've had to do this in the past too. Just dropping tests doesn't seem like the way to go in many cases.",
            "date": "2010-03-17T22:29:54.747+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "Shai this patch looks good -- thanks!  Somehow you keep getting yourself sucked into the issues that need big patches to fix....",
            "date": "2010-03-17T23:25:59.719+0000",
            "id": 17
        },
        {
            "author": "Shai Erera",
            "body": "Fixed a copy-paste comment error in IndexWriter (introduced in LUCENE-2294).",
            "date": "2010-03-18T09:29:56.156+0000",
            "id": 18
        },
        {
            "author": "Shai Erera",
            "body": "Mike - are you reviewing it? I think I fixed all mentioned comments.",
            "date": "2010-03-18T16:58:54.124+0000",
            "id": 19
        },
        {
            "author": "Michael McCandless",
            "body": "The patch looks great Shai -- I plan to commit in a day or two.\n\nI added @lucene.experimental to SetOnce's jdocs, and also removed stale javadoc in MP and MS saying that you need access to package-private APIs (unrelated to this issue but spotted it ;).",
            "date": "2010-03-18T17:19:08.955+0000",
            "id": 20
        },
        {
            "author": "Shai Erera",
            "body": "Thanks Mike !",
            "date": "2010-03-18T18:04:31.452+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Shai!",
            "date": "2010-03-19T22:34:11.394+0000",
            "id": 22
        }
    ],
    "component": "core/index",
    "description": "Now that IndexWriterConfig is in place, I'd like to move MergePolicy to it as well. The change is not straightforward and so I've kept it for a separate issue. MergePolicy requires in its ctor an IndexWriter, however none can be passed to it before an IndexWriter actually exists. And today IW may create an MP just for it to be overridden by the application one line afterwards. I don't want to make iw member of MP non-final, or settable by extending classes, however it needs to remain protected so they can access it directly. So the proposed changes are:\n\n* Add a SetOnce object (to o.a.l.util), or Immutable, which can only be set once (hence its name). It'll have the signature SetOnce<T> w/ *synchronized set<T>* and *T get()*. T will be declared volatile, so that get() won't be synchronized.\n* MP will define a *protected final SetOnce<IndexWriter> writer* instead of the current writer. *NOTE: this is a bw break*. any suggestions are welcomed.\n* MP will offer a public default ctor, together with a set(IndexWriter).\n* IndexWriter will set itself on MP using set(this). Note that if set will be called more than once, it will throw an exception (AlreadySetException - or does someone have a better suggestion, preferably an already existing Java exception?).\n\nThat's the core idea. I'd like to post a patch soon, so I'd appreciate your review and proposals.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2320",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add MergePolicy to IndexWriterConfig",
    "systemSpecification": true,
    "version": ""
}