{
    "comments": [
        {
            "author": "Bernhard Messer",
            "body": "Created an attachment (id=12686)\n[PATCH] to store binary fields with compression\n",
            "date": "2004-09-10T02:36:09.000+0000",
            "id": 0
        },
        {
            "author": "Christoph Goller",
            "body": "Hi Bernhard,\n\nI reviewed your patch. Looks great for me. However, I wonder why we need\nisCompressed in FieldInfo? Beeing compressed or not seems to be a property of an\nindividual field more than of all fields in the index with a given name.\nFurthermore, the isCompressed flag in FieldInfo is currently not used anywhere\noutside FieldInfo and FieldInfos. Is it really needed?\n\nFurther idea: Wouldn't it be great to have a stored stringValued field that\nhas the property \"compressed\" meaning that if the field is written with\nFieldsWriter, it automatically is compressed and if it's read by FieldsReader,\nit is automatically decompressed and transformed into a String? The field could\nbut does not have to be indexed/tokenized. This would mean that compressed\nbecomes a property of stored fields (binary or stringValued ones).\n\nWith your current implementation a field that is indexed has to be dublicated\nif it is stored in compressed form.\n\nregards,\nChristoph",
            "date": "2004-09-15T23:04:12.000+0000",
            "id": 1
        },
        {
            "author": "Bernhard Messer",
            "body": "Created an attachment (id=12895)\n[PATCH] all diffs and one additional testcase for the compression enhancement\n",
            "date": "2004-09-30T01:08:28.000+0000",
            "id": 2
        },
        {
            "author": "Bernhard Messer",
            "body": "hi,\n\nthe zip file added today contains the improved version for the compression patch\nbased on the latest source from cvs with new features discussed on the mailing\nlist implemented. The patch contains three diff files (Field.diff,\nFieldsReader.diff and FieldsWriter.diff) and one new Testcase to test the\ncompression functionality.\n\nThis patch does allow now compression either on binary or string value fields.\n\nThere also is a small cleanup in FieldsReader and FieldsWriter using static\nmembers referencing the bit values which makes the code more readable (Doug\nasked for it).\n\nThe Field class now stores all 3 possible data values (reader, string or byte[])\nwithin single member. This change was also asked by Doug and makes things easier\nto handle, but is not directly related to compression.\n\nActivating compression, the index size can be reduced to 60% of the original\nsize when storing whole documents within the index. Increasing index time round\nabout 50-70%. Regarding the query performance, i saw no differences between an\ncompressed or uncompressed index. What may take a bit longer is fetching the hit\ndocuments.\n\nAll lucene test cases works well. So maybe the lucene committers can have a look\non it and decide if it will be part of the next version.\n\nIf there are any questions regarding the changes, leave a note on the developer\nlist.\n\nregards and fun with it\nbernhard\n",
            "date": "2004-09-30T01:36:46.000+0000",
            "id": 3
        },
        {
            "author": "Christoph Goller",
            "body": "Thank you very much for the excellent patch.\nIt's reviewed and committed.\n\nChristoph",
            "date": "2004-09-30T19:48:00.000+0000",
            "id": 4
        }
    ],
    "component": "core/index",
    "description": "hi all,\n\nas promised here is the enhancement for the binary field patch with optional\ncompression. The attachment includes all necessary diffs based on the latest\nversion from CVS. There is also a small junit test case to test the core\nfunctionality for binary field compression. The base implementation for binary\nfields where this patch relies on, can be found in patch #29370. The existing\nunit tests pass fine.\n\nFor testing binary fields and compression, I'm creating an index from 2700 plain\ntext files (avg. 6kb per file) and store all file content within that index\nwithout using compression. The test was created using the IndexFiles class from\nthe demo distribution. Setting up the index and storing all content without\ncompression took about 60 secs and the final index size was 21 MB. Running the\nsame test, switching compression on, the time to index increase to 75 secs, but\nthe final index size shrinks to 13 MB. This is less than the plain text files\nthem self need in the file system (15 MB)\n\nHopefully this patch helps people dealing with huge index and want to store more\nthan just 300 bytes per document to display a well formed summary.\n\nregards\nBernhard",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-274",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "[PATCH] to store binary fields with compression",
    "systemSpecification": false,
    "version": ""
}