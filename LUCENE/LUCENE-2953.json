{
    "comments": [
        {
            "author": "Hoss Man",
            "body": "patch to TestPriorityQueue demonstrating bug",
            "date": "2011-03-08T01:34:25.073+0000",
            "id": 0
        },
        {
            "author": "Dawid Weiss",
            "body": "There seems to be no consensus on how to deal with generic arrays. Even the JDK has two different implementations -- one in ArrayDeque (uses T[]), the other in ArrayList (uses Object[]). Creating an array of a given component type is (can be?) more costly than keeping an array Object[] because it needs to be done via call to Array.newArray (haven't checked though). Theoretically having a concrete-type array should speed up iterators (because no additional casts are needed), but I don't think this is the case. \n\nIn fact, I just wrote a simple Caliper benchmark that compares these (attached), my results show the runtime times is nearly identical (probably within stddev).:\n\n{noformat}\n 0% Scenario{vm=java, trial=0, benchmark=Generic, size=1000000} 8985430.93 ns; \u03c3=257329.28 ns @ 10 trials\n33% Scenario{vm=java, trial=0, benchmark=GenericSubclass, size=1000000} 8989486.27 ns; \u03c3=207151.20 ns @ 10 trials\n67% Scenario{vm=java, trial=0, benchmark=Object, size=1000000} 8767324.34 ns; \u03c3=218235.97 ns @ 10 trials\n\n      benchmark   ms linear runtime\n        Generic 8.99 =============================\nGenericSubclass 8.99 ==============================\n         Object 8.77 =============================\n\nvm: java\ntrial: 0\nsize: 1000000\n{noformat}",
            "date": "2011-03-08T08:20:29.096+0000",
            "id": 1
        },
        {
            "author": "Dawid Weiss",
            "body": "A Google Caliper benchmark comparing iteration over a class with a generic T[] (real T[] type), its concrete-type subclass and a class using Object[] and (T) casts for accessing array elements.",
            "date": "2011-03-08T08:22:37.364+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "The easy and most simply way to handle this is osing Object[] like in ArrayList.\n\nThe problem with then always casting from Object to T is thousands of unchecked warnings in PriorityQueue. I would propose the following:\nIn general the final T[] heap variable should be private to the PQ and used only there. For performance yonik wanted the heap[] protected and that caused the issue. As long as the heap[] array is private it can never be accessed incorrectly.\n\nSo my proposal is to internally use the T[] as a private field and simply use another Object[] thats protected (pointing to the same array). This would fix the problem. The most correct idea would be to add a setHeapSlot(int, T o) and T getHeapSlot(int) method and hiding the T[] heap completely, but I know, Yonik will disagree :-)\n\nThere is some other problem: the heap array should be final, but it cannot, because of the stupid initialize() method. I would like to remove this method and simply move the code to PQ's ctor. I don't understand why the initialize() method is there, which is a problem: Every guide on Java programming tells you to never call protected overrideable methods from ctors, as this can break easily. If the heap[] is final, the problem of having two references to the same object is not a problem anymore.",
            "date": "2011-03-08T09:04:01.519+0000",
            "id": 3
        },
        {
            "author": "Dawid Weiss",
            "body": "> The problem with then always casting from Object to T is thousands of unchecked warnings in PriorityQueue.\n\nYou could erase the type in internal methods of PriorityQueue and use Object instead of T then.\n\n> So my proposal is to internally use the T[] as a private field and simply use another Object[] thats protected (pointing to the same array).\n\nOr a protected getter method that would do the cast (why bother with having two fields):\n{noformat}\nprotected Object[] getStorageArray() { return (Object[]) heap; }\n{noformat}\nIf Yonik wants access to that array I'm sure he copies it to a local var. prior to doing any intensive loops...",
            "date": "2011-03-08T09:17:07.363+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. Or a protected getter method that would do the cast (why bother with having two fields)\n\nGood idea, I am currently fixing the whole stuff (I was the one who added the generics in Lucene 3.0). But I am now also removing initialize(int), this construct is very broken. In trunk we can break backwards for this.",
            "date": "2011-03-08T09:30:50.375+0000",
            "id": 5
        },
        {
            "author": "Dawid Weiss",
            "body": "I remember using pq at some point for other things and hating that initialize method, so I'm all for it.",
            "date": "2011-03-08T09:36:30.589+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Here my patch, that also removes initialize(int), which is bad design.\n\nFor 3.x we can simply leave out this change and only make the heap variable private and expose as Object[] using a getter method.",
            "date": "2011-03-08T09:53:14.882+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. I remember using pq at some point for other things and hating that initialize method, so I'm all for it.\n\nThe inititalize method was only there for one single reason in Lucene (a hack): The getSentinelObject() method was used in HitQueue like that: it should return null for some special corner case. To enable this special case, a boolean field was used. But the ctor had to populate that field before the prepoulating in super() was done, and thats impossible. I changed that by adding a boolean ctor to the PQ base class to enable/disable pre-populating like HitQueue did before.",
            "date": "2011-03-08T09:56:58.114+0000",
            "id": 8
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 1079707\n\nI will backport the getHeapArray() method to 3.2, but for now this is not a problem, as Solr's class is not yet generified in 3.x.",
            "date": "2011-03-09T09:19:59.536+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed 3.x revision: 1079711 (only private heap and getter, initialize unchanged for backwards compatibility).\n\nIf we want to backport also the initialize() changes to 3.x (as PQ is a @lucene.internal class), we should reopen this issue.",
            "date": "2011-03-09T09:36:31.634+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "Bulk closing for 3.2",
            "date": "2011-06-03T16:37:21.531+0000",
            "id": 11
        }
    ],
    "component": "",
    "description": "as discovered in SOLR-2410 the fact that the protected \"heap\" variable in PriorityQueue is initialized using an Object[] makes it impossible for subclasses of PriorityQueue to exist and access the \"heap\" array unless they bind the generic to Object.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2953",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "PriorityQueue is inheriently broken if subclass attempts to use \"heap\" w/generic T bound to anything other then \"Object\"",
    "systemSpecification": true,
    "version": ""
}