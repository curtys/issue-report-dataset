{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "sounds like Uwe is working on a patch so that you can tell the CachingWrapperFilter to cache the results as a bitset (optionally), which will allow you to duplicated the deprecated QueryFilter.",
            "date": "2009-09-16T17:51:22.365+0000",
            "id": 0
        },
        {
            "author": "Mark Miller",
            "body": "whether we do an RC or not after this I don't know.\n\nTechnically, if we don't want to - its not required. All thats required is that we get the 3 votes and no -1 votes with valid tech arguments.",
            "date": "2009-09-16T18:01:59.779+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Here a patch, that implements my proposal.\n\nThomas Becker: Could you apply this patch and test if itr resolves your speed problem?",
            "date": "2009-09-16T18:03:36.157+0000",
            "id": 2
        },
        {
            "author": "Mark Miller",
            "body": "Very nice Uwe! Patch looks very good. Nicely takes care of the QueryFilter issue as well.",
            "date": "2009-09-16T18:08:41.055+0000",
            "id": 3
        },
        {
            "author": "Uwe Schindler",
            "body": "By the way, the added IOException to the protected method is no BW break, as the method is new in 2.9.",
            "date": "2009-09-16T18:12:56.879+0000",
            "id": 4
        },
        {
            "author": "Mark Miller",
            "body": "bq. the protected method \n\nIts funny, because literally this morning, I was looking at CachingWrapperFilter for other reasons and I saw that method and briefly wondered what it was for - it just return what was passed to it by default. I moved on without thinking too much of it - but it makes perfect sense now ;)",
            "date": "2009-09-16T18:17:13.174+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "I will post a new patch later with some added tests. I will also add SortedVIntList to the cacheable implementations.\n\nMaybe in 3.1 we could add a DocIdSet.isCacheable() method (like the proposed isRandomAccess()), that defaults to false. The 4 utils impls of DocIdSet could then return true here. This would be cleaner than the instanceof check.\n\nOr do somebody want isCacheable to DocIdSet added for 2.9, too?",
            "date": "2009-09-16T18:38:06.338+0000",
            "id": 6
        },
        {
            "author": "Mark Miller",
            "body": "Could we commit now Uwe? Its easy to tweak if we have to. Its likely to work and stick like this though - so if we commit, I can make the release artifcats and run tests and all that jazz - then if we are good, it will be a very fast turnaround. Otherwise I have to start all that much later in either case. I'd prefer to be optimistic and get everything ready by tonight.\n\nI'll leave it up to you though.",
            "date": "2009-09-16T18:51:18.263+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "I understand you, but:\n\nAfter reviewing other DocIdSets, I found more of them, that could be easily cached, like e.g. one of the DocIdSets returned by FieldCacheRangeFilter (the only-FieldCache-non-TermDocs-backed one). You cannot check all of them with instanceof and may some of them twice, which is a bad idea. A simple check with DocIdSet.isCacheable() looks like a good solution. If we default it to false, we have no backwards-problem.\n\nIf we do not want to do this, I will add at least SortedVIntList to the cacheable implementations.",
            "date": "2009-09-16T19:01:29.727+0000",
            "id": 8
        },
        {
            "author": "Mark Miller",
            "body": "Okay - no problem - if we already know theres more to do, no point yet. Lets not do it before it makes sense.",
            "date": "2009-09-16T19:05:34.515+0000",
            "id": 9
        },
        {
            "author": "Mark Miller",
            "body": "I guess I would lean toward isCacheable myself. Its much cleaner than trying to juggle a list and overrides. \n\nI guess the downside is that someone could be using a custom one that was cacheable, and so it would be copied. But they can\nupdate to the new API as a workaround.\nAnd you get that with the other solution in certain cases too (unless the user updates to use the new API and does the override).\nThat also requires tracking which CachingWrapperFilters get passed what Filters and its just much uglier right?\n\n+1 on isCacheable.\n\nYou could argue to keep the override too - if someone was using a jar that says its not cachaeable, but it is, and can't change the source. A\nLikely scenario I'm sure ;) But worth the method it would seem. It still becomes much less necessary though.",
            "date": "2009-09-16T19:16:15.859+0000",
            "id": 10
        },
        {
            "author": "Michael McCandless",
            "body": "bq. we could add a DocIdSet.isCacheable() method\n\n+1 to this, and to keeping docIdSetToCache() for overriding.  This is much cleaner than trying to check for every known DocIdSet impl.\n\nThanks for fixing this Uwe!",
            "date": "2009-09-16T19:33:18.076+0000",
            "id": 11
        },
        {
            "author": "Mark Miller",
            "body": "Now I regret not pushing for the isCachable route to fix the Highlighter caching issue :(\n\n",
            "date": "2009-09-16T19:56:17.203+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "What do you mean?",
            "date": "2009-09-16T20:07:32.473+0000",
            "id": 13
        },
        {
            "author": "Mark Miller",
            "body": "Remember the CachingTokenFilter issue that first popped with the Highlighter? And you suggested we add the isCachable? I was hoping the RC process was going to be smoother at the time, so I just pushed to have the simple override for now. But looking back with what I know now, I wish we had gone for it.",
            "date": "2009-09-16T20:09:28.649+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "Here the implementation with isCacheable(). It also has an extra test, checking cacheable on various filter with/without CachingWrapperFilter. The switch was removed from CachingWrapperFilter, as the DocIdSet now says, if it should be cached or not.\n\nI scanned through all DocIdSets and checked, if cacheable (in general: Do they do disk I/O during iteration or are else very slow). I looked in core and contrib looking for \"extends DocIdSet\" and \"new DocIdSet()\" anon inner classes.\n\nIf somebody knows another DocIdSet, that is cacheable, please tell!\n\nAll tests pass.",
            "date": "2009-09-16T20:53:56.172+0000",
            "id": 15
        },
        {
            "author": "Uwe Schindler",
            "body": "Here an updated patch, with a test that QueryWrapperFilter's DocIdSet is cached correctly and the copy to BitSet code works as exspected (TestCachingWrapperFilter does not check this).\n\nI think this is ready to commit now.",
            "date": "2009-09-16T21:13:58.490+0000",
            "id": 16
        },
        {
            "author": "Uwe Schindler",
            "body": "Mark/Yonik: Do you know if Solr has possible DocIdSet impls that are cacheable and are used for filtering. It would be good to also overide isCacheable() to return true.",
            "date": "2009-09-16T21:17:33.628+0000",
            "id": 17
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. Mark/Yonik: Do you know if Solr has possible DocIdSet impls that are cacheable and are used for filtering.\n\nDoesn't really matter too much - Solr doesn't use CachingWrapperFilter at all.  But I'll handle any instances on upgrade of the Lucene libs.",
            "date": "2009-09-16T22:10:39.863+0000",
            "id": 18
        },
        {
            "author": "Mark Miller",
            "body": "There are a couple - including the deprecated Solr version of OpenBitSet itself (only used in tests in Solr right now) - then a couple that use an underlying OpenBitSet -\n\nbut as Yonik says - it doesn't appear it would end up being an issue - CachingWrapperFilter isn't likely ever going to be used with them - nice to have them correct anyhow though.",
            "date": "2009-09-16T22:13:05.367+0000",
            "id": 19
        },
        {
            "author": "Uwe Schindler",
            "body": "- Added CHANGES.txt entry.\n- Added a test to FieldCacheRangeFilter, that the iterators work correct and isCacheable() is false, when the index contains deleted docs and the range contains 0 (in this case TermDocs must be visited to test if a doc is deleted or has value 0 in cache).\n\nI will go to bed now and commit tomorrow!",
            "date": "2009-09-16T22:29:26.184+0000",
            "id": 20
        },
        {
            "author": "Mark Miller",
            "body": "Patch looks good to me - just looked for any you might have missed and didn't see a one.",
            "date": "2009-09-16T22:31:56.394+0000",
            "id": 21
        },
        {
            "author": "Uwe Schindler",
            "body": "bq. Doesn't really matter too much - Solr doesn't use CachingWrapperFilter at all. But I'll handle any instances on upgrade of the Lucene libs\n\nThanks!\n\nbq. then a couple that use an underlying OpenBitSet \n\nThese are easy, because OpenBitSet has isCacheable()==true -> nothing to do\n\nbq. but as Yonik says - it doesn't appear it would end up being an issue - CachingWrapperFilter isn't likely ever going to be used with them - nice to have them correct anyhow though.\n\nCorrect. And nothing breaks if you have a cacheable DocIdSet not marked as such. It will simply be copied to an OpenBitSet (with some perf and memory cost on the first call to CachingWrapperFilter.getDocIdSet()).",
            "date": "2009-09-16T23:01:43.809+0000",
            "id": 22
        },
        {
            "author": "Mark Miller",
            "body": "bq. These are easy, because OpenBitSet has isCacheable()==true -> nothing to do\n\nThey (or was it just one?) does it with delegation though - so it will reg as just a DocIdSet (if it mattered).\n\nI've lost the code right now, but I think it was still cacheable.",
            "date": "2009-09-16T23:07:28.225+0000",
            "id": 23
        },
        {
            "author": "Uwe Schindler",
            "body": "{quote}\nbq. These are easy, because OpenBitSet has isCacheable()==true -> nothing to do\n\nThey (or was it just one?) does it with delegation though - so it will reg as just a DocIdSet (if it mattered).\n{quote}\n\nOK, I misunderstood. In principle the same like FilteredDocIdSet (see my patch).",
            "date": "2009-09-16T23:12:07.706+0000",
            "id": 24
        },
        {
            "author": "Thomas Becker",
            "body": "Thanks for the patch. Issue can be closed I guess.\n\nAttached you'll find a hotspot list for the same request with a patched 2.9-RC4. With the old api it's as fast as 2.4. Maybe a tad faster. With the new api it's a bit slower. Most probably due to not caching sorted resultsets anymore in our implementation. \n\nGreat work guys. Nice patch @Uwe. And big thanks for your support.\n\nWas a pleasure. Now it's time to find a way to contribute something back to the community. ",
            "date": "2009-09-17T09:19:19.837+0000",
            "id": 25
        },
        {
            "author": "Thomas Becker",
            "body": "HotSpots - lucene 2.9-RC4 patched ",
            "date": "2009-09-17T09:25:09.280+0000",
            "id": 26
        },
        {
            "author": "Uwe Schindler",
            "body": "Thanks Thomas!\n\nAttached is a improved patch, that uses OpenBitSetDISI, a subclass of OpenBitSet, which does the copying of the iterator to the bit set by itsself. Why duplicate the code?\n\nIt also handles the null return value of iterator(), which is allowed. It caches an EMPTY_DOCIDSET in this case.\n\nI will commit soon!",
            "date": "2009-09-17T10:33:08.755+0000",
            "id": 27
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed revision: 816154. Thanks Thomas for reporting this!",
            "date": "2009-09-17T12:03:41.792+0000",
            "id": 28
        }
    ],
    "component": "",
    "description": "there is a large performance cost to this.\n\nThe old impl for this type of thing, QueryFilter, recommends :\n\n@deprecated use a CachingWrapperFilter with QueryWrapperFilter\n\nThe deprecated QueryFilter itself also suffers from the problem because its now implemented using a CachingWrapperFilter and QueryWrapperFilter.\n\nsee http://search.lucidimagination.com/search/document/7f54715f14b8b7a/lucene_2_9_0rc4_slower_than_2_4_1",
    "hasPatch": true,
    "hasScreenshot": true,
    "id": "LUCENE-1911",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "When using QueryWrapperFilter with CachingWrapperFilter, QueryWrapperFilter returns a DocIdSet that creates a Scorer, which gets cached rather than a bit set",
    "systemSpecification": true,
    "version": ""
}