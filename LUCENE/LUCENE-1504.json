{
    "comments": [
        {
            "author": "patrick o'leary",
            "body": "Moved both ISerialChainFilter and SerialChainFilter to package o.a.l.s\nAdded getDocIdSet to SerialChainFilter, still calls bits on the filters, should remain until bits is\nremoved from Filter.java? ",
            "date": "2009-01-05T17:36:26.973+0000",
            "id": 0
        },
        {
            "author": "Paul Elschot",
            "body": "In trunk, there is no more need to call Filter.bits().\n\nBut the same functions are also  present in contrib/queries/.../BooleanFilter.java and in contrib/misc*/.../ChainedFilter.java, and these were already adapted to use Filter.getDocIdSet().\nThese also use o.a.l.util.OpenBitSet which is normally slightly faster than java's BitSet.\n\nIn case you prefer to use one of these, a dependency on the corresponding contrib module may have to be added in the build process of the spatial contrib.\n\n",
            "date": "2009-01-05T18:28:13.164+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Hi Patrick,\n\nas the spatial contrib was included into Lucene after 2.4 where the old API is already deprecated, there is no need to implement bits() at all. Just leave the default, that get removed on 3.0. As the code was not released before the deprecation, there would be nobody using it and it does not make sense to add APIs that are deprecated from the beginning.\n\nTrieRangeFilter was also included after the change and never implemented bits() [it implemented it in the past, but at this time it was in another package outside of lucene, so deprecation is out of responsibility for lucene].\n\nPaul:\nbq. In case you prefer to use one of these, a dependency on the corresponding contrib module may have to be added in the build process of the spatial contrib.\n\nVery interesting, on thinking about how to include TrieRangeQuery with spatial contrib, I was thining about a dependency, but I was not sure, if it is possible. How can it be done in the build.xml of the contrib?",
            "date": "2009-01-05T19:21:19.827+0000",
            "id": 2
        },
        {
            "author": "patrick o'leary",
            "body": "Changed filter calls from bits to getDocIdSet, the ISerialChainFilter will maintain\na method called bits(IndexReader, BitSet)\n",
            "date": "2009-01-05T20:13:15.346+0000",
            "id": 3
        },
        {
            "author": "Paul Elschot",
            "body": "On dependencies between contrib modules, I think I spoke a bit too soon.\nThere is an addtional.dependencies path a.o. in contrib/regex/build.xml, and this is what I was thinking would do the trick, but that does not appear to refer to another contrib module.\nIt is probably better to ask on java-dev how to do this.",
            "date": "2009-01-05T22:01:15.485+0000",
            "id": 4
        },
        {
            "author": "Mark Miller",
            "body": "I think there is contrib dependency examples in the xml query parser and in the highlighter (which depends on MemoryIndex).",
            "date": "2009-01-06T18:41:06.655+0000",
            "id": 5
        },
        {
            "author": "Mark Miller",
            "body": "Looks like we are close on this? Someone want to assign this to themselves so we can be sure to get it into 2.9?",
            "date": "2009-06-11T03:22:55.755+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Hllo Ryan,\nI will try to get this into 2.9, but before some comments on the current patch:\n- You are still using BitSet in ISerialChainFilter. When we move this to core, I suggest to use OpenBitSet here. Just change the method signature, it is unreleased code and so we can change it easily. But you must then rewrite spatial to also use OpenBitSet (but it is just a search'n'replace).\n- ISerialChainFilter seems to be a strange name, I have never seen such in Lucene Core. Do you mean \"I\"nterface with it (but its an abstract class). I would suggest to use SerialChainFilter as it is, and for the chained filters itsself use ChainFilter.\n- There are some of these autogenerated catch blocks in the code, please remove them and pass the Exception through the method declaration. So bits() should throw IOException and so on (this is one of the things, why I hate Eclipse..., searching through the internet you see everywhere this code with these auto-generated blocks!)",
            "date": "2009-06-16T09:35:08.421+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "And other things:\n- Use a o.a.l.util.Parameter for the enumeration to be type safe (which is the same like Java's enum)\n- Remove the Java 5 annotations, core is 1.4 only. ",
            "date": "2009-06-16T09:41:11.600+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "Patrick are you going to have time soon to iterate w/ Uwe on this?  (He has alot of feedback on the last patch).\n\nAlso, it looks like SerialChainFilter is roughly a copy of ChainFilter but with \"some improvement to allow a narrowed down filtering\" (from the javadocs).  Would it be possible to somehow fold that improvement into the original ChainFilter instead?",
            "date": "2009-07-28T17:42:14.771+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "I've emailed Patrick privately and it looks like he's pretty swamped, so I'll take a stab at cutting over to DocIdSet, here.\n\nActually I think we can use FilteredDocIdSet to do the \"serial\" chaining (I think it has the same motivation as \"SERIALAND\": to efficiently AND two filters together such that the 2nd filter only \"does work\" if the first filter accepted the doc).  FilteredDocIdSet doesn't handle the SERIALOR case, but, nothing uses SERIALOR now (I think?) so I think that's OK.  I'll change LatLong/GeoHashDistanceFilter to extend FilteredDocIdSet.",
            "date": "2009-07-31T10:26:50.604+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "So you mean we should simply kick this new class and use whats already in Lucene? I would like this.\n\nI think the idea behind Ryans patch was, to create a Filter using a BitSet and do the chaining directly on *one* instance of the BitSet. In my opinion, this is not, what the new DocIdSet should do. The Filter chaining should be done in the iterator.\n\nAnother approach would be to use the BooleanFilter from contrib/search! It has all the functionality provided by Ryans class. We would only need to have build dependency between contrib/spatial and contrib/queries.",
            "date": "2009-07-31T11:20:22.038+0000",
            "id": 11
        },
        {
            "author": "Ryan McKinley",
            "body": "Don't try to read much into anything I did here (the patch here is from patrick)...  my understanding of the reason for BitSet vs DocIdSet is slim.   I just noted that SerialChainFilter relies on a deprecated API.\n\n----\n\nIf it is possible to merge this with the exiting FilteredDocIdSet, that seems like the best approach.\n\n----\n\nAlso, the spatial contrib will be marked \"experimental\" for 2.9, so the back-compatibility contract should not be as strict .  If this improvement can not get the attention it deserves before 2.9 release, the SerialChainFilter could still be removed/moved/modified at a later release.",
            "date": "2009-07-31T15:03:55.258+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "\nOK I reworked a number of things about distance filtering:\n\n  - Switched to FilteredDocIdSet to do \"serial anding\"\n\n  - DistanceFilter now requires a starting filter; normally in spatial\n    there is already a starting filter (using geohash or lat/lng\n    tiers), so I think this should be fine.  And one can always do\n    QueryWrapperFilter(MatchAllDocsQuery()) as a no-op filter.\n\n  - Moved stuff into the base class, DistanceFilter\n\n  - Fixed one bug, where the saved distances were getting overwritten\n    per-segment\n\n  - Fixed another bug where GeoHashDistanceFilter was adding a\n    distance into the distances hash even if it didn't pass the filter\n    (ie distance was too big); this required a fix to one of the tests\n\n  - Use Double.toString\\(n) instead of new Double\\(n).toString()\n\n  - Added DistanceFilter.reset, which you must call before reusing the\n    filter across searches\n\n  - Commented out the precision-defaulting logic: it was buggy (used\n    the segment maxDoc() instead of per-reader), and, it wasn't\n    actually used (the code that applies precision was commented out\n    for both LatLong and GeoHash)\n\n  - Removed some logging calls (I know there's another issue open to\n    do more cleanups)\n",
            "date": "2009-07-31T15:54:00.799+0000",
            "id": 13
        },
        {
            "author": "Michael McCandless",
            "body": "bq. So you mean we should simply kick this new class and use whats already in Lucene?\n\nRight, that's what I did on first cut patch above: I use FilteredDocIdSet to efficiently AND the approx distance filter w/ the precise filter, and then ChainedFilter to combine an incoming Query-as-filter with the approx+precise distance filter.\n\nWe really need a random-access Filter API (LUCENE-1536); if we had that then we could have better support for efficiently ANDing filters.  I suppose FilteredDocIdSet is in fact a start at a random access Filter API: it exposes only the method boolean match(int doc).",
            "date": "2009-07-31T16:03:46.699+0000",
            "id": 14
        },
        {
            "author": "Michael McCandless",
            "body": "Fixes the javadoc warnings (most pre-existing).\n\nI also added \"throws IOException\" to FilteredDocIdSet/Iterator.match.",
            "date": "2009-07-31T17:26:51.943+0000",
            "id": 15
        },
        {
            "author": "Uwe Schindler",
            "body": "I had no time to review the whole patch yet, but it seems to fit much better in the new DocIdSet API. I will look into this after my holiday (Thursday+).",
            "date": "2009-08-02T09:32:09.780+0000",
            "id": 16
        },
        {
            "author": "Michael McCandless",
            "body": "New patch:\n\n  * Also switched over CartesianShapeFilter and BoundaryBoxFilter from BitSet -> DocIdSet\n\n  * Added floor of 1 to \"int miles\" (this is to fix LUCENE-1777) in CartesianPolyFilterBuilder\n\n  * Some small code cleanups",
            "date": "2009-08-03T09:54:31.966+0000",
            "id": 17
        },
        {
            "author": "Uwe Schindler",
            "body": "I updated the issue's description.\nMike, do you want to take this issue or should I commit later?",
            "date": "2009-08-03T10:28:37.116+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "I'll take it.",
            "date": "2009-08-03T12:05:57.901+0000",
            "id": 19
        },
        {
            "author": "Michael McCandless",
            "body": "OK new patch:\n\n  * Improved TestCartesian to test 6.0, 1.5, 0.001, and 0.0 miles\n\n  * Implemented flooring logic as described in LUCENE-1777\n\nI think it's ready to commit... I'll wait a day or two!",
            "date": "2009-08-03T12:13:13.378+0000",
            "id": 20
        },
        {
            "author": "Michael McCandless",
            "body": "And then, there were 8!",
            "date": "2009-08-04T18:08:18.333+0000",
            "id": 21
        }
    ],
    "component": "modules/spatial",
    "description": "Contrib-Spatial should be rewritten to use the new DocIdSet Filter API with OpenBitSets instead of j.u.BitSets. FilteredDocIdSet can be used to replace (I)SerialChainFilter.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1504",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Contrib-Spatial should use DocSet API rather then deprecated BitSet API",
    "systemSpecification": true,
    "version": ""
}