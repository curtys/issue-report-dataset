{
    "comments": [
        {
            "author": "Hoss Man",
            "body": "https://issues.apache.org/jira/browse/LUCENE-1749?focusedCommentId=12741479#action_12741479 \n{quote}\nFieldCacheImpl.Cache.get could use the FieldCacheSanityChecker to inspect itself immediately after calling createValue, and could even test if any of the Insanity instances returned are related to the current call (by comparing the CacheEntry with the Entry it's using) ... it could even log a useful stack trace since the sanity check would be happening in the same call stack as at least one of the CacheEntries in the Insanity object.\n{quote}",
            "date": "2009-08-10T18:39:43.444+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch.  I added get/setInfoStream to FieldCache, then, in FieldCacheImpl.Cache.get, if we hit a cache miss and infoStream is enabled, I gather the Insanity[] before  the cache entry is added and after, then print out any change involving the entry just added.  It produces this output to the infoStream:\n\n{noformat}\n    [junit] WARNING: new FieldCache insanity created\n    [junit] Details: VALUEMISMATCH: Multiple distinct value objects for org.apache.lucene.index.DirectoryReader@da3a1e+theDouble\n    [junit] \t'org.apache.lucene.index.DirectoryReader@da3a1e'=>'theDouble',float,org.apache.lucene.search.FieldCache.DEFAULT_FLOAT_PARSER=>[F#7896426 (size =~ 3.9 KB)\n    [junit] \t'org.apache.lucene.index.DirectoryReader@da3a1e'=>'theDouble',double,org.apache.lucene.search.FieldCache.DEFAULT_DOUBLE_PARSER=>[D#5503831 (size =~ 7.8 KB)\n    [junit] \t'org.apache.lucene.index.DirectoryReader@da3a1e'=>'theDouble',double,null=>[D#5503831 (size =~ 7.8 KB)\n    [junit] \n    [junit] \n    [junit] Stack:\n    [junit] \n    [junit] java.lang.Throwable\n    [junit] \tat org.apache.lucene.search.FieldCacheImpl$Cache.printNewInsanity(FieldCacheImpl.java:263)\n    [junit] \tat org.apache.lucene.search.FieldCacheImpl$Cache.get(FieldCacheImpl.java:228)\n    [junit] \tat org.apache.lucene.search.FieldCacheImpl.getFloats(FieldCacheImpl.java:494)\n    [junit] \tat org.apache.lucene.search.FieldCacheImpl$FloatCache.createValue(FieldCacheImpl.java:509)\n    [junit] \tat org.apache.lucene.search.FieldCacheImpl$Cache.get(FieldCacheImpl.java:223)\n    [junit] \tat org.apache.lucene.search.FieldCacheImpl.getFloats(FieldCacheImpl.java:494)\n    [junit] \tat org.apache.lucene.search.FieldCacheImpl.getFloats(FieldCacheImpl.java:487)\n    [junit] \tat org.apache.lucene.search.TestFieldCache.testInfoStream(TestFieldCache.java:70)\n    [junit] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    [junit] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    [junit] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    [junit] \tat java.lang.reflect.Method.invoke(Method.java:597)\n    [junit] \tat junit.framework.TestCase.runTest(TestCase.java:164)\n    [junit] \tat junit.framework.TestCase.runBare(TestCase.java:130)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase.runBare(LuceneTestCase.java:206)\n    [junit] \tat junit.framework.TestResult$1.protect(TestResult.java:106)\n    [junit] \tat junit.framework.TestResult.runProtected(TestResult.java:124)\n    [junit] \tat junit.framework.TestResult.run(TestResult.java:109)\n    [junit] \tat junit.framework.TestCase.run(TestCase.java:120)\n    [junit] \tat junit.framework.TestSuite.runTest(TestSuite.java:230)\n    [junit] \tat junit.framework.TestSuite.run(TestSuite.java:225)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:420)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:911)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:768)\n{noformat}",
            "date": "2009-08-23T15:00:31.820+0000",
            "id": 1
        },
        {
            "author": "Hoss Man",
            "body": "i haven't looked at the patch, but i don't think you need two calls to the sanity checker. \n\nWhy not just a single call after the val has been created and log if any of the Insanity  objects contain the new val?",
            "date": "2009-08-24T03:39:39.452+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Why not just a single call after the val has been created and log if any of the Insanity objects contain the new val?\n\nI was worried about over-printing of previously created insanities, but you're right: since the new entry was just created, there's no way any insanity involving this entry would have been printed before (duh!).  So I'll simplify it...",
            "date": "2009-08-24T09:27:56.434+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "New patch attached.",
            "date": "2009-08-24T10:11:59.165+0000",
            "id": 4
        },
        {
            "author": "Hoss Man",
            "body": "Michael: reading the patch you commited, i only have two concerns...\n\n1) a PrintStream doesn't really seem like the ideal callback API for this situation ... with IndexWriter it makes some sense because we ant to be able to log all sorts of misc info that will be unstructured, but in the field cache checkign case we already have a fairly robust data structure (Insanity) that we can provide ... so instead of a setInfoStream(PritStream) method, why not have a callback interface that takes Insanity objects (and the Entry that triggered the problem)\n\n{code}\n  /** \n   * If non-null, this monitor will be notify anytime an entry is created \n   * which are not sane according to {@link FieldCacheSanityChecker}.\n   * @param monitor The Monitor to notify, if it throws a RuntimeException then the cache method will throw a RuntimeException.\n   */\n  public void setInsanityMonitor(InsanityMonitor monitor)\n  ...\n  public interface InsanityMonitor {\n    public void notify(CacheEntry e, Instanty[] i);\n  }\n{code}\n\n2) it seems like we should change LuceneTestCase to use this new hook instead of just calling the FieldCacheSanityChecker in tearDown() ... that way we can be sure we're checking all FieldCache usages (the current approach risks IndexReader weak refs getting gc'ed after they go out of scope in the test and before the checker runs in tearDown)\n\n\n....thoughts?\n",
            "date": "2009-08-25T18:24:54.760+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "I think that may be over-designing things...\n\nIe, I'm thinking by far the most common use here is a user who can't\nunderstand why their FieldCache memory has increased so much, and,\nthey want a simple & fast way to debug it.\n\nIf we switch to the InsanityMonitor API then they'll have to implement\na class w/ that interface and a chunk of code that does the for loop,\nprinting out details?\n\nIs there any other use case besides \"help me debug\" that would merit a\nprogrammatic API?\n\nI suppose we could switch to InsanityMonitor but then provide a\nPrintStreamInstanityMonitor impl... still seems kinda overkill though.\n\nBut I don't feel strongly.  Do you want to take a crack at it?\n\nI think what's important here is there's a one-line means for a user\nwho's having problems to \"turn on FieldCache debugging\" and see\njuicy details when insanity increases.\n\nI agree we could make LuceneTestCase.tearDown more robust if tap into\nthis, though the simple infoStream could also be used for that?\n",
            "date": "2009-08-25T18:49:46.456+0000",
            "id": 6
        },
        {
            "author": "Hoss Man",
            "body": "bq. I suppose we could switch to InsanityMonitor but then provide a PrintStreamInstanityMonitor impl... still seems kinda overkill though.\n\n...that was what i had in mind, but you're right -- it is overkill.  a PrintStream is a nice quick and easy way to get this info -- if they really want robust data structures they can use the sanity checker directly (possibly even from a mock PrintStream)\n\nbq. I agree we could make LuceneTestCase.tearDown more robust if tap into this, though the simple infoStream could also be used for that? ... sure, because if *anything* gets written to that stream, it indicates a bug ... unless they expect it, in which case they can catch an exception an ignore it.\n\nbut the LuceneTestCase changes are less urgent ... i was mainly worried about making surewe were happy with the API.  You've convinced me.",
            "date": "2009-08-25T18:56:58.641+0000",
            "id": 7
        }
    ],
    "component": "core/search",
    "description": "As suggested by McCandless in LUCENE-1749, we can make FieldCacheImpl a client of the FieldCacheSanityChecker and have it sanity check itself each time it creates a new cache entry, and log a warning if it thinks there is a problem.  (although we'd probably only want to do this if the caller has set some sort of infoStream/warningStream type property on the FieldCache object.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1798",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "FieldCacheSanityChecker called directly by FieldCache.get*",
    "systemSpecification": true,
    "version": ""
}