{
    "comments": [
        {
            "author": "Uwe Schindler",
            "body": "Patch that allows to write own DirectoryReader implementations (e.g. as a filter). It basically does the same like before. DirectoryReader is abstract (but this time all methods are *really* abstract and a subclass (the default is StandardDirectoryReader) *must* implement them. So if you write a DirectoryReader, it *must* support openIfChanged and so on.\n\nDirectoryReader also have the static open() methods that return StandardDirectoryReader behind the scenes.\n\nA custom DirectoryReader must provide only a minimum of directory-related methods on top of a fixed set of AtomicReaders (unchangeable, of course). All methods are delegated to the corresponding subreader as MultiReader does, but things like reopening the reader and returning information about versioning is left to the subclass. By this, a custom class can simply hook into reopen logic or maybe emulate a ParallelDirectoryReader by using ParallelReader (with a fake, e.g. toplevel directory). It can even filter subreaders using FilterIndexReader.\n\nThis patch also improves type safety. getSequentialSubReaders of DirectoryReader returns AtomicReader[], it also removes as much as possible from the termInfosIndexDivisor (only the static open() take care anymore). It also makes the rest of method implementations final, so subclasses can *only* implement abstract methods and not intercept other stuff. If you want to filter lowlevel, wrap a FilterIndexReader using MultiReader.\n\nI think thats ready to commit!",
            "date": "2012-01-31T18:07:01.423+0000",
            "id": 0
        },
        {
            "author": "Jason Rutherglen",
            "body": "The issues mentioned were brought up in LUCENE-3498 and LUCENE-3497 thus yielding a +1 from me.",
            "date": "2012-01-31T18:21:57.625+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 1239043",
            "date": "2012-02-01T10:42:08.328+0000",
            "id": 2
        }
    ],
    "component": "core/index",
    "description": "DirectoryReader is final and has only static factory methods. It is not possible to subclass it in any way.\n\nThe problem is mainly Solr, as Solr accesses directory(), IndexCommits,... and therefore cannot work on abstract IndexReader anymore. This should be changed, by e.g. handling reopening in the IRFactory, also versions, commits,... Currently its not possible to implement any other IRFactory that returns something else.\n\nOn the other hand, it should be possible to \"wrap\" a DirectoryReader / CompositeReader to handle filtering of collection based information (subreaders, reopening hooks,...). This can be done by making DirectoryReader abstract and let DirectoryReader.open return a internal hidden class \"StandardDirectoryReader\". This is similar to the relatinship between IndexReader and hidden DirectoryReader in the past.\n\nDirectoryReader will have final implementations of most methods like getting document stored fields, global docFreq and other statistics, but allows hooking into doOpenIfChanged. Also it should not be limited to SegmentReaders as childs - any AtomicReader is fine. This allows users to create e.g. a Directory-based ParallelReader (see LUCENE-3736) that supports reopen and (partially commits).",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3734",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Allow customizing/subclassing of DirectoryReader",
    "systemSpecification": true,
    "version": ""
}