{
    "comments": [
        {
            "author": "Paul Elschot",
            "body": "I fully agree, but IndexSearcher.java at line 107 does not conform,\nit will only provide a hit when its score is positive.\n\nImplementing Explanation.matched() could be more than a bit of work, because\nmany existing explain() methods will be need to be adapted.\nExplanation.setMatched() would also be needed, although such a flag\ncould be set to true by default.\n\nRegards,\nPaul Elschot.\n",
            "date": "2005-10-12T03:13:54.000+0000",
            "id": 0
        },
        {
            "author": "Hoss Man",
            "body": "LUCENE-605 will add suport for Explanation.isMatch()",
            "date": "2006-06-17T08:15:56.000+0000",
            "id": 1
        },
        {
            "author": "Hoss Man",
            "body": "some test cases demonstrating discrepencies when a BooleanQuery has clauses of various types with boosts of 0.0.  Some of these test cases may not be things we really want to commit (since the score is \"NaN\") but they still serve as a good example for the problem.\n\n(much of this patch is modified from some other tests I had orriginally attached to LUCENE-557 but did not commit)",
            "date": "2006-06-20T08:49:18.000+0000",
            "id": 2
        },
        {
            "author": "Hoss Man",
            "body": "a revised version of hte previous tst patch ... this fixes a lot of the things that made the tests \"invalid\" before -- cheifly by:\n  1) using a Similarity that doesn't choke on boosts of 0.0\n  2) using a HitCollector to check matching (which is neccessary when matching docs have scores of 0)\n\n..also in this patch is a tweak to the way the expected results are tested -- first by looking at the set of matching documents *then* look at the explanations for those documents (which makes it obvious when your assumptions about what matches are wrong before you look at why the explanation doesn't equal what it should)",
            "date": "2006-06-21T08:02:23.000+0000",
            "id": 3
        },
        {
            "author": "Hoss Man",
            "body": "slight bug in test2 - the old method of checking the results using Hits had a differnet set of matching docs because of negatively scoring matches.  This version makes sense when using a HitCollector.",
            "date": "2006-06-22T05:06:04.000+0000",
            "id": 4
        },
        {
            "author": "Hoss Man",
            "body": "With the code from LUCENE-605 all tests pass (and have been commited)",
            "date": "2006-06-27T01:40:13.000+0000",
            "id": 5
        }
    ],
    "component": "core/search",
    "description": "BooleanWeight.explain() uses the returned score of subweights to determine if a clause matched.\nIf any required clause has boost==0, the returned score will be zero and the explain for the entire BooleanWeight will be simply  Explanation(0.0f, \"match required\").\n\nI'm not sure what the correct fix is here.  I don't think it can be done based on score alone, since that isn't how scorers work.   Perhaps we need a new method \"boolean Explain.matched()\" that returns true on a match, regardless of what the score may be? \n\nRelated to the problem above, even if no boosts are zero, it it sometimes nice to know *why* a particular query failed to match.  It would mean a longer explanation, but maybe we should include non matching explains too?",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-451",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "BooleanQuery explain with boost==0",
    "systemSpecification": false,
    "version": ""
}