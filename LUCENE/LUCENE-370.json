{
    "comments": [
        {
            "author": "Paul Elschot",
            "body": "Yonik, \n \nPlease have a look at bug 33019. \n \nThe point you make here is not mentioned there. \nWith term doc enumerator implementing skipTo, all scorers \ncan implement skipTo efficiently. \nDuring development of a new scorer one can temporarily use the code \nshown in the javadocs of Scorer that implements skipTo with \nnext() and doc(). \nBtw. it also possible to implement next() as skipTo(doc() + 1). \n \nA bit of history: \nThe early versions of Lucene did not have skipTo on term doc enumerators. \nAt some point (1.2 ?) Doug added this and used it in ConjunctionScorer, which \nproved to be a great speedup for a BooleanQuery that requires all terms. \n \nFor a smooth transition of adding skipTo on the remaining scorers it \nmight be worthwhile to add the code mentioned in the javadocs of Scorer \nas the default implementation of skipTo. \nThis needs to be investigated, so I'm making bug 33019 dependent on this \none. \n \nThanks for bringing this up, \n \nRegards, \nPaul Elschot \n ",
            "date": "2005-04-12T16:00:19.000+0000",
            "id": 0
        },
        {
            "author": "Yonik Seeley",
            "body": "Thanks for the reference Paul, looks like some pretty cool stuff!\n\n> With term doc enumerator implementing skipTo, all scorers \n> can implement skipTo efficiently. \nWell, maybe all scorers currently in Lucene that is.  The Scorer hierarchy looks\nlike it means to be open (users can implement their own).  Requiring all scorers\nto implement skipTo is a pretty high hurdle, esp when there is a backup\nexecution plan already implemented that works without it.\n\n> During development of a new scorer one can temporarily use the code \n> shown in the javadocs of Scorer that implements skipTo with \n> next() and doc(). \n\nI'm not sure I can do that.\nWhat I'm trying to do is develop a replacement for RangeQuery that is fast and\n*always* works (no expanding to BooleanQuery).  I don't even care about scoring\nsince it almost never makes sense for a RangeQuery.  Using the same techniques\nas RangeFilter, I think it should be pretty easy to do, except for implementing\nskipTo.\n\nIt seems like skipTo for UnscoredRangeQuery would require either enumerating\n*all* docs beforehand (store in a BitSet or whatever), or keeping a termdoc\nenumerator open for every term in the range.  Neither option seems attractive.\n\n-Yonik\n\n",
            "date": "2005-04-13T00:32:16.000+0000",
            "id": 1
        },
        {
            "author": "Paul Elschot",
            "body": "(In reply to comment #2) \n... \n>  \n> > During development of a new scorer one can temporarily use the code  \n> > shown in the javadocs of Scorer that implements skipTo with  \n> > next() and doc().  \n>  \n> I'm not sure I can do that. \n> What I'm trying to do is develop a replacement for RangeQuery that is fast \nand \n> *always* works (no expanding to BooleanQuery).  I don't even care about \nscoring \n> since it almost never makes sense for a RangeQuery.  Using the same \ntechniques \n> as RangeFilter, I think it should be pretty easy to do, except for \nimplementing \n> skipTo. \n \nA scorer that is only used in isolation or on the top level \nwill only have next() called. \nFor these it is safe to throw an UnsupportedOperationException \nfrom skipTo(). \n \nFor an OR like query one could use the same technique as RangeFilter \nby using the scorers of the clauses separately. You might call this \na DisjunctionFilter. \n \nEach of the separate scorers could implement skipTo(), but it wouldn't \nnormally be used. \nUsing skipTo would be only useful for very dense results to skip to \nthe doc corresponding to the next unset bit in the BitSet. \nHowever, such dense results are not normal for text searching. \n \nOnce a BitSet filter is available bug 32965 can also be useful. \nThis uses skipTo on the scorer of the filtered query \nto skip over documents not present in the filter. \n \n>  \n> It seems like skipTo for UnscoredRangeQuery would require either enumerating \n> *all* docs beforehand (store in a BitSet or whatever), or keeping a termdoc \n> enumerator open for every term in the range.  Neither option seems \nattractive. \n \nskipTo() requires that the documents are accessed in order. That means some \nform of sorting is needed: for example a PriorityQueue with all termdoc \nenumerators open, or a BitSet for distribution sort. \nBooleanScorer with skipTo allowed uses a form of distribution sort \n(the buckets) combined with local sorting. \nOther methods are also  possible, eg. merge sort, but these are currently \nnot used in Lucene scorers. \n \nBooleanScorer without skipTo uses distribution and an incomplete form \nof sorting by working over intervals of document numbers. \nI don't think scoring disjunctions can be made faster than that. \nSince the sorting is not complete, the next() method does not guarantee \nthat documents are accessed in order. BooleanScorers without skipTo \nusing the same interval can be nested nicely, though. \n \nRegards, \nPaul Elschot \n ",
            "date": "2005-04-13T03:46:02.000+0000",
            "id": 2
        },
        {
            "author": "Yonik Seeley",
            "body": "Paul, thanks for the reference to 32965... more very interesting stuff.  I'm new\nat this scorer stuff - trying to wrap my mind around it all...\n\nMy motivation for a RangeQuery is not making it faster for the average case,\nit's making it possible in any scenario (any place in a query, any number of\nterms, etc).\n\nWe have some search collections with over 100M documents.  Now imagine a range\nquery on a unique id field... I don't think any method utilizing 100M termdoc\nenumerators is really feasible (am I understanding correctly?)\n\nAs for speed, I guess I could have my planned UnscoredRangeQuery.rewrite()\nreturn a BooleanQuery if the number of terms are small enough, otherwise use\nanother method such as a simple scorer that doesn't implement skipTo().\n\n-Yonik\n",
            "date": "2005-04-13T05:57:13.000+0000",
            "id": 3
        },
        {
            "author": "Paul Elschot",
            "body": "(In reply to comment #4) \n.. \n>  \n> My motivation for a RangeQuery is not making it faster for the average case, \n> it's making it possible in any scenario (any place in a query, any number of \n> terms, etc). \n>  \n> We have some search collections with over 100M documents.  Now imagine a \nrange \n> query on a unique id field... I don't think any method utilizing 100M termdoc \n> enumerators is really feasible (am I understanding correctly?) \n \nThis is very similar to a date range. Try searching for this on the web: \n \nyyyy yyyymm yyyymmdd lucene \n \nThe results are getting dense in this way, and for performance \nyou might consider caching (intermediate) results in (BitSet) filters. \nLucene itself is meant for smaller numbers of results. \n \n100M docs means about 12Mbyte per BitSet filter. When your filters  \ncontain fewer docs than 12M and you need many filters you might \nconsider the sparse filters of bug 32921 . However, these filters \nrequire skipTo on all their filtered scorers, meaning that they require \nthe development version of BooleanQuery at the moment. \n \nRegards, \nPaul Elschot \n \nP.S. Perhaps someone is interested in writing a story about \nLucene and the ordered document skippers. It's getting a bit involved. \n ",
            "date": "2005-04-13T16:03:37.000+0000",
            "id": 4
        },
        {
            "author": "Paul Elschot",
            "body": "I think all scorers in the trunk implement skipTo() now, so this can be closed.\n\nRegards,\nPaul Elschot",
            "date": "2005-10-15T23:51:54.000+0000",
            "id": 5
        }
    ],
    "component": "core/search",
    "description": "skipTo seems to be optional functionality on the Scorer class (BooleanScorer\ndoesn't implement it).  BooleanQuery.scorer() tests all subclauses using\n\"instanceof BooleanQuery\" to determine if it can use a ConjunctionScorer that\nrequires skipTo functionality.\n\nThis means that any other new Query/Scorer that don't implement skipTo will get\ninto trouble when included in a BooleanQuery.\n\nIf skipTo is really optional, then there should be some way of telling by the\nScorer or the Query in a more generic manner.\n\nSome options:\n1) have a \"boolean Scorer.hasSkipTo()\" method\n2) have a \"boolean Query.hasSkipTo()\" method\n3) remove Scorer.skipTo and have a \"public interface ScorerSkipTo{boolean\nskipTo(int doc)}\" that scorers may implement",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-370",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "BooleanQuery assumes everything else implements skipTo",
    "systemSpecification": true,
    "version": "1.4"
}