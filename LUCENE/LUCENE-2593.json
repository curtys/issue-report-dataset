{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Attached patch; I ended up making a number of defensive fixes on how\nIW/DW/SR handle exceptions:\n\n  * Generally I moved the error recover down lower, eg SegmentReader\n    now restores its SegmentInfo and deletes the partially written\n    file, on hitting an exception writing changed norms or deletes.\n  \n  * IW's ReaderPool no longer forcefully drops changes if it hits an\n    exception committing an SR.  The SR now remains pooled, holding\n    onto its changes, in case a future commit is attempted and the SR\n    is able to commit.\n\n  * We checkpoint with IndexFileDeleter more \"finely\" now, so that as\n    soon as a new file is referenced (eg from writing deletes), IFD\n    knows about it.  This prevents incorrect deletion of a file eg if\n    a merge IncRefs and then DecRefs before we can checkpoint.\n\nI believe this issues goes back to 2.9, when we added reader pooling\n(for NRT).\n",
            "date": "2010-08-10T14:58:27.245+0000",
            "id": 0
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Yeehaw! This looks very much like a bug I was experiencing, which we earlier attributed to me fiddling with fsync.",
            "date": "2010-08-11T16:20:43.938+0000",
            "id": 1
        }
    ],
    "component": "core/index",
    "description": "Robert uncovered this nasty bug, in adding more randomness to\noal.index tests...\n\nI got a standalone test to show the issue; the corruption path is\nas follows:\n\n  * The merge hits an initial exception (eg disk full when merging the\n    postings).\n\n  * In handling this exception, IW closes all the sub-readers,\n    suppressing any further exceptions.\n\n  * If one of these sub-readers has pending deletions, which happens\n    if readers are pooled in IW, it will flush them.  If that flush\n    hits a 2nd exception (eg disk full), then SegmentReader\n    [incorrectly] leaves the SegmentInfo's delGen advanced by 1,\n    referencing a corrupt file, yet the SegmentReader is still\n    forcefully closed.\n\n  * If enough disk frees up such that a later IW.commit/close\n    succeeds, the resulting segments file will reference an invalid\n    deletions file.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2593",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "disk full can cause index corruption in certain cases",
    "systemSpecification": true,
    "version": ""
}