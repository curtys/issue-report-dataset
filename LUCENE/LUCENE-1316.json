{
    "comments": [
        {
            "author": "Todd Feak",
            "body": "My version of MatchAlldocsQuery.java which has the modification in it.",
            "date": "2008-06-25T15:58:56.719+0000",
            "id": 0
        },
        {
            "author": "Todd Feak",
            "body": "Further investigation indicates that the ValueSourceQuery$ValueSourceScorer may suffer from the same issue and benefit from a similar optimization.",
            "date": "2008-06-25T16:43:09.919+0000",
            "id": 1
        },
        {
            "author": "Yonik Seeley",
            "body": "Although this doesn't solve the general problem, this probably still makes sense to do now for the no-deletes case.\nTodd, can you produce a patch?  See http://wiki.apache.org/lucene-java/HowToContribute",
            "date": "2008-06-25T18:00:47.675+0000",
            "id": 2
        },
        {
            "author": "Hoss Man",
            "body": "rather then attempting localized optimizations of individual Query classes, a more generalized improvements would probably be to change SegmentReader.isDeleted so that instead of the entire method being synchronized, it first checks if the segment has any deletions, and if not then enters a synchronized block to check deletedDocs.get(n).",
            "date": "2008-06-25T18:01:23.260+0000",
            "id": 3
        },
        {
            "author": "Todd Feak",
            "body": "I like Hoss' suggestion better. I'll try that fix locally and if it provides the same improvement, I will submit a patch for you.",
            "date": "2008-06-25T18:08:01.311+0000",
            "id": 4
        },
        {
            "author": "Yonik Seeley",
            "body": "> a more generalized improvements would probably be to change SegmentReader.isDeleted so that instead of the entire method being synchronized\n\nRight, but that's not totally back compatible.  Code that depended on deletes being instantly visible across threads would no longer be guaranteed.",
            "date": "2008-06-25T18:13:51.249+0000",
            "id": 5
        },
        {
            "author": "Hoss Man",
            "body": "bq. Code that depended on deletes being instantly visible across threads would no longer be guaranteed.\n\nyou lost me there ... why would deletes be stop being instantly visible if we changed this...\n\n{code}\n  public synchronized boolean isDeleted(int n) {\n    return (deletedDocs != null && deletedDocs.get(n));\n  }\n{code}\n\n...to this...\n\n{code}\n  public boolean isDeleted(int n) {\n    if (null == deletedDocs) return false;\n    synchronized (this) { return (deletedDocs.get(n)); }\n  }\n{code}\n\n?",
            "date": "2008-06-25T18:23:26.923+0000",
            "id": 6
        },
        {
            "author": "robert engels",
            "body": "According to the java memory model, hasDeletions() would need to be synchronized as well , since if another thread did perform a deletion, it would need to be up to date.\n\nThis might work in later JVMs by declaring the deletedDocs variable volatile, but no guarantees.\n\nSeems better to ALLOW this behavior, that a reader might not see up to date deletions made during a query, and do a single synchronized check of deletions at the start.\n\n",
            "date": "2008-06-25T18:42:37.900+0000",
            "id": 7
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. why would deletes be stop being instantly visible\n\nIt's minor, but before, if thread A deleted a document, and then thread B checked if it was deleted, thread B was guaranteed to see that it was in fact deleted.\n\nIf the check for deletedDocs == null were moved outside of the synchronized, there's no guarantee when thread B will see (if ever) that deletedDocs has been set (no memory barrier).\n\nIt's not a major issue since client code shouldn't be written that way IMO, but it's worth factoring into the decision.\n",
            "date": "2008-06-25T18:42:52.479+0000",
            "id": 8
        },
        {
            "author": "robert engels",
            "body": "According to\n\nhttp://www.ibm.com/developerworks/java/library/j-jtp06197.html\n\ndeclaring the deletedDocs volatile should do the trick.",
            "date": "2008-06-25T18:44:54.380+0000",
            "id": 9
        },
        {
            "author": "robert engels",
            "body": "The Pattern#5 referenced (cheap read-write lock) is exactly what is trying to be accomplished.",
            "date": "2008-06-25T18:49:20.991+0000",
            "id": 10
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. declaring the deletedDocs volatile should do the trick.\n\nRight... that would be cheaper when no docs were deleted.  But would it be more expensive when there were deleted docs (a volatile + a synchronized?)  I don't know if lock coarsening could do anything with this case...",
            "date": "2008-06-25T19:23:20.065+0000",
            "id": 11
        },
        {
            "author": "Mark Miller",
            "body": "If I remember correctly, volatile does not work correctly until java 1.5. At best I think it was implementation dependent with the old memory model.\n\n*edit*\n\nmaybe its ok under certain circumstances:\n\nhttp://www.ibm.com/developerworks/library/j-jtp02244.html\n\nProblem #2: Reordering volatile and nonvolatile stores\n",
            "date": "2008-06-25T19:28:55.162+0000",
            "id": 12
        },
        {
            "author": "Hoss Man",
            "body": "bq. if thread A deleted a document, and then thread B checked if it was deleted, thread B was guaranteed to see that it was in fact deleted.\n\nHmmm.... i'll take your word for it, but i don't follow the rational: the current synchronization just ensured that either the isDeleted() call will complete before the delete() call started or vice versa -- but you have no guarantee that thread B would run after thread A and get true.   .... unless... is your point that without synchronization on the null check there's no garuntee that B will ever see the change to deletedDocs even if it does execute after delete() ?\n\neither way: robert's point about hasDeletions() needing to be synchronized seems like a bigger issue -- isn't that a bug in the current implementation?  assuming we fix that then it seems like the original issue is back to square one: synchro bottlenecks when there are no deletions.\n\n\n\n",
            "date": "2008-06-25T20:49:30.646+0000",
            "id": 13
        },
        {
            "author": "robert engels",
            "body": "Hoss, that is indeed the case, another thread would see deletedDocs as null, even though another thread has set it\n\nhasDeletions does not need to be synchronized if deletedDocs is volatile",
            "date": "2008-06-25T21:01:42.330+0000",
            "id": 14
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. is your point that without synchronization on the null check there's no garuntee that B will ever see the change to deletedDocs even if it does execute after delete()\n\nRight... it's about the memory barrier.\n\nThe reality is that there is normally a need for higher level synchronization anyway.  That's why it was always silly for things like StringBuffer to be synchronized.\n\nbq. assuming we fix that then it seems like the original issue is back to square one: synchro bottlenecks when there are no deletions.\n\nA scorer could just check once when initialized... there's never been any guarantees about in-flight queries immediately seeing deleted docs changes - now that *really* doesn't make sense.  TermScorer grabs the whole bit vector at the start and never checks again.",
            "date": "2008-06-25T21:03:11.838+0000",
            "id": 15
        },
        {
            "author": "Todd Feak",
            "body": "I wanted to share my micro load test results with you, to make sure you all understand scale of the bottleneck as we are experiencing it.\n\nFor an optimized index with 4700+ documents (ie small), a NOT query varies by a factor of 35 under heavy load. Using 2.3.0 release I got 20 tps. With the volatile/synchronized fix suggested, I got 700 tps. The limiting factor on the 700 tps was the CPU on the computer throwing load, so this may be even worse. Furthermore, the more documents that exist in the index, the worse this may get, as it synchonizes on every single iteration through the loop.\n\nAn argument can be made that this is just a necessary evil, and that we *must* synchronize on this for the possibility of updates during reads. I have 2 questions regarding that.\n\n1. What is the cost of a dirty read in that case? Is it stale data, incorrect data, or a corrupted system?\n2. What is more prevalent in a production system. Indexes with no deletes, indexes with *some* deletes, or indexes with frequent deletes?\n\nDo we need to have 1 class that does it all, or should we consider 2 different implementation for 2 different uses. What about a read-only SegmentReader for read-only slaves in production environments?\n\n\n",
            "date": "2008-06-26T15:25:34.827+0000",
            "id": 16
        },
        {
            "author": "Yonik Seeley",
            "body": "20tps (queries per second?) for 4700 docs is *very* slow... how many threads were you testing with?",
            "date": "2008-06-26T15:43:54.786+0000",
            "id": 17
        },
        {
            "author": "Todd Feak",
            "body": "10 threads in JMeter throwing load at the Tomcat as fast as possible. The Tomcat was on a separate machine with more then 10 worker threads, though only 10 were in use at any one time.\n\nTo eliminate any differences, the tests were run back to back. The only difference was the lucene-core JAR and a Tomcat bounce between the tests. Otherwise, the same exact test is run in both cases. What you have is threads all trying to synchronize on isDeleted() 4700+ times per request. Lock contention goes through the roof. At any point during the test I can take a thread stack snapshot and they are all blocked waiting for isDeleted().",
            "date": "2008-06-26T15:54:32.261+0000",
            "id": 18
        },
        {
            "author": "Yonik Seeley",
            "body": "Attaching prototype patch (needs javadoc + tests if approach is acceptable) that avoids all synchronization when iterating over all documents.\n\nIf IndexReader.termDocs(Term term) is called with null, a TermDocs implementation is returned that matches all documents.  This is the same approach used by TermScorer via SegmentTermDocs to avoid synchronization by grabbing the BitVector of deleted docs at instantiation.\n\nThis patch also updates MatchAllDocuments to use this TermDocs to iterate over all documents.\n\nAdvantages:\n  - adds no new methods or interfaces, simply adds extra semantics to an existing method\n  - works from the bottom-up... no need to instantiate a big BitVector\n  - exposes the functionality to expert users for use in custom queries\n  - avoids a binary search to find the correct IndexReader in a MultiReader for each call (it leverages all the TermDocs code in all IndexReader implementations such as MultiTermDocs).\n\nDisadvantages:\n  - TermDocs instance returned cannot be used to seek to a different term.  However, this is minor and not a back compatibility concern since \"null\" was not previously a supported value.\n\nOn balance, I think it's 10% hack, 90% useful.  Thoughts?",
            "date": "2008-06-26T17:44:18.956+0000",
            "id": 19
        },
        {
            "author": "Todd Feak",
            "body": "I applied that patch locally to a 2.3.0 build. Test results show this solution performs equally as the other solution did. I'd be happy with it for that reason alone. I cannot argue as to the quality of the proposed solution. I will leave that to those more knowledgeable on Lucene itself. Thank you for the time you guys have put into this issue for me.",
            "date": "2008-06-26T18:21:50.953+0000",
            "id": 20
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. Test results show this solution performs equally as the other solution did.\n\nThat's good news (as I assume this was for an optimized index).\nWould it be possible for you to try the same test on a non-optimized index (multi-segment) with a couple deletions?\n",
            "date": "2008-06-26T18:42:26.536+0000",
            "id": 21
        },
        {
            "author": "Todd Feak",
            "body": "I don't think that patch provides correct functionality. I went to run the load tests this morning against an un-optimized index and the query results do not match what an unpatched version does. Simply swapping the JAR and restarting returns different results for the same query. Specifically, empty (incorrect) results.",
            "date": "2008-06-27T16:53:57.127+0000",
            "id": 22
        },
        {
            "author": "Yonik Seeley",
            "body": "I'll look into it (that's why it was marked as \"prototype\")",
            "date": "2008-06-27T17:00:19.442+0000",
            "id": 23
        },
        {
            "author": "Yonik Seeley",
            "body": "I saw and fixed a bug that would affect multireaders.... patch attached.\nI've not yet written tests, so no guarantees.\nEdit: I reproduced... it still doesn't work, so hold off using this.",
            "date": "2008-06-27T17:06:36.447+0000",
            "id": 24
        },
        {
            "author": "Yonik Seeley",
            "body": "Sigh... the problem is that things are done in a two step process by default.\nA TermDocs is created, and then seek is called (by which time the impl is set already). \n\n{code}\n  public TermDocs termDocs(Term term) throws IOException {\n    ensureOpen();\n    TermDocs termDocs = termDocs();\n    termDocs.seek(term);\n    return termDocs;\n  }\n\n  public abstract TermDocs termDocs() throws IOException;\n{code}\n\n So a full solution down this road would be slightly more involved  (overriding termDocs(Term) in all the sublcasses rather than just termDocs())\n\n",
            "date": "2008-06-27T17:25:12.651+0000",
            "id": 25
        },
        {
            "author": "Yonik Seeley",
            "body": "Here's an updated patch that should work correctly.",
            "date": "2008-06-27T19:47:49.667+0000",
            "id": 26
        },
        {
            "author": "Todd Feak",
            "body": "I applied the patch to the 2.3.0 file. I ran against an optimized and non-optimized (12 segment) index with 4700 entries.\n\n2.3.0 non-optimized index  *104 tps*\n2.3.0 patched non-optimized index *482 tps*\n\n2.3.0 optimized index *21 tps*\n2.3.0 patched optimized index *718 tps*\n\nThe patch provided improvements in both optimized and unoptimized indexes. Thanks again Yonik.\n",
            "date": "2008-06-27T20:22:17.984+0000",
            "id": 27
        },
        {
            "author": "Hoss Man",
            "body": "bq. TermDocs instance returned cannot be used to seek to a different term. However, this is minor and not a back compatibility concern since \"null\" was not previously a supported value.\n\nso essentially this approach only improves MatchAllDocsQuery correct? .... Other use cases where lots of termDoc enumeration take place (RangeFilter and PrefixFilter type code) wouldn't' benefit from this at all.\n\nAssuming the genuinely eliminating the synchronization is infeasible, the other approach that occurred to me along the lines of a \"read only\" IndexReader is that if we started providing a public method for getting the list of all deleted docs (either as a BitVector or as a DocIdSet or something) then it would be easy to implement a SnapshotFilteredIndexReader that on construction cached the current list of all deleted docs in the IndexReader it's wrapping, used it for all isDeleted() methods, and proxied all other methods to the underlying reader.\n\nthen things like MatchAllDocs, RangeFilter, and PrefixFilter could (optionally?) construct one of those prior to their big iteration loops, and use it in place of the original IndexReader.  Trade the syncro bottleneck for deletion data as of the moment the query was started (a fair trade for most people)",
            "date": "2008-06-28T00:56:56.561+0000",
            "id": 28
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. so essentially this approach only improves MatchAllDocsQuery correct?\n\nIt would essentially simulate a term indexed for every document, and improve any query that could use that (i.e. that needed to iterate over all documents).  For things like MatchAllDocuments and FunctionQuery on a MultiReader, it should actually be superior to the elimination of all synchronization on isDeleted() since it also removes  the binary search to find the correct reader for a document.\n\nbq. Other use cases where lots of termDoc enumeration take place (RangeFilter and PrefixFilter type code) wouldn't' benefit from this at all.\n\nRight, but using TermDocs, they already have the same style of optimization and hence suffer no synchronization overhead.\n\nbq. the other approach that occurred to me along the lines of a \"read only\" IndexReader is that if we started providing a public method for getting the list of all deleted docs\n\nRight... that could be more useful for someone that needs random access to isDeleted(), at the cost of greater setup cost, and greater memory usage.  However the TermDocs approach solves the use-cases we have today in lucene-core.",
            "date": "2008-07-03T01:25:29.759+0000",
            "id": 29
        },
        {
            "author": "Hoss Man",
            "body": "\nbq. Right, but using TermDocs, they already have the same style of optimization and hence suffer no synchronization overhead.\n\nArggg.... sorry, my bad: i was thinking reader.isDeleted was used in those\ncases as well -- I was totally missing that SegmentTermDocs takes care of\nit directly.\n\nbut ... thinking about how SegmentTermDocs are constructed for a moment,\nisn't the (unsynchronized) usage of deletedDocs in SegmentTermDocs.next\nprone to the same concern you had about removing (or reducing) the\nsynchronization in SegmentReader.isDeleted ... \"deletes aren't instantly\nvisible across threads\" ... are they?\n\nIs SegmentTermDocs.next too lax in how it deals with deletedDocs, or is\nSegmentReader.isDeleted to paranoid?\n\n",
            "date": "2008-07-03T04:48:38.973+0000",
            "id": 30
        },
        {
            "author": "Yonik Seeley",
            "body": "{quote}but ... thinking about how SegmentTermDocs are constructed for a moment,\nisn't the (unsynchronized) usage of deletedDocs in SegmentTermDocs.next\nprone to the same concern you had about removing (or reducing) the\nsynchronization in SegmentReader.isDeleted ... \"deletes aren't instantly\nvisible across threads\" ... are they?\n{quote}\n\nNo, deletes aren't instantly visible across threads (when one thread has started a query and the other thread does a delete).  AFAIK it's always been that way, so I think it's probably acceptable.  On a practical level, seeking on a TermDocs crosses synchronization points, so deletes won't go unrecognized by other threads forever either.\n\nBut there is a thread-safety issue I've been mulling over since I wrote this patch.\nSegmentTermDocs.next() is fine... unsynchronized reads look benign on the BitVector class since writes just change a byte at a time.  \"count\" could be off, but that's OK too... it will simply be a stale value since updates to it are atomic.\n\nThe issue is the possibility of grabbing a partially constructed BitVector object to begin with.  Notice how I synchronize to avoid this in AllTermDocs:\n{code}\n  protected AllTermDocs(SegmentReader parent) {\n    synchronized (parent) {\n      this.deletedDocs = parent.deletedDocs;\n    }\n    this.maxDoc = parent.maxDoc();\n  }\n{code}\n\nThat should probably be done in SegmentTermDocs too.  Without it, a null pointer exception or an array out of bounds exception could result when checking the BitVector.",
            "date": "2008-07-03T13:34:55.847+0000",
            "id": 31
        },
        {
            "author": "Robert Muir",
            "body": "we use MatchAllDocs query also. In addition to what is described here we got very nice gains by overriding the Scorer.score() methods that take a HitCollector.\n\nThis seems pretty dumb but I guess since it has to score every doc the method call overhead actually matters? ",
            "date": "2008-10-06T19:22:17.596+0000",
            "id": 32
        },
        {
            "author": "Mark Miller",
            "body": "The new ReadOnly IndexReader option resolves this issue, correct?",
            "date": "2008-11-10T02:45:55.895+0000",
            "id": 33
        },
        {
            "author": "Jason Rutherglen",
            "body": "I looked at 2.4 and am surprised this patch did not make it in.  Read only IndexReader shouldn't be necessary to solve this issue.  Were there any problems in the unit tests for this patch or something?",
            "date": "2008-11-20T00:05:09.132+0000",
            "id": 34
        },
        {
            "author": "Michael McCandless",
            "body": "Yonik is your patch here (creating an AllTermDocs) ready to commit, once you fix SegmentTermDocs to also synchronize on parent when grabbing the deletedDocs?",
            "date": "2008-12-16T10:38:50.540+0000",
            "id": 35
        },
        {
            "author": "Jason Rutherglen",
            "body": "Added synchronized on parent when obtaining the deleted docs in SegmentTermDocs.  ",
            "date": "2009-01-13T21:43:01.235+0000",
            "id": 36
        },
        {
            "author": "Michael McCandless",
            "body": "I think at least AllTermDocs.java is missing from the latest patch here.  When you apply a patch, make a change, and then \"svn diff\" in order to post a new patch, you have to [frustratingly] remember to first \"svn add\" any new files in the first patch.\n\nI think the Subversion team is working on an \"svn patch\" command that would do this (and apply properties, and maybe deal with a 3-way merge, etc) but last I checked it's not done yet.  So until then we have to workaround...",
            "date": "2009-01-15T21:35:05.994+0000",
            "id": 37
        },
        {
            "author": "Yonik Seeley",
            "body": "In a way, this is a mirror image of Jason's request in LUCENE-1476 for a getDeletedDocs() that returned a DocIdSet... provided it also worked on a MultiReader, etc.  MatchAllDocs could be efficiently implemented with that.\n\nIt does seem like having some sort of iterator over existing docs is useful to avoid the binary search cost of associating ids with segments, but there was never any feedback on what the API should be.  Instead of adding new functionality to termDocs(), we could also add a getAllDocs() that returns either a DocIdSet or an interator.\n\n",
            "date": "2009-01-16T04:37:18.435+0000",
            "id": 38
        },
        {
            "author": "Jason Rutherglen",
            "body": "Patch includes AllTermDocs.  ",
            "date": "2009-01-16T16:53:05.467+0000",
            "id": 39
        },
        {
            "author": "Jason Rutherglen",
            "body": "{quote} \nIn a way, this is a mirror image of Jason's request in\nLUCENE-1476 for a getDeletedDocs() that returned a DocIdSet...\nprovided it also worked on a MultiReader, etc. MatchAllDocs could be\nefficiently implemented with that. \n{quote}\n\nI think the API of reader.termDocs(null) is fine. If we move to a\nDocIdSet for deleteddocs we can change the all docs implementation if\nneeded. ",
            "date": "2009-01-16T17:09:04.548+0000",
            "id": 40
        },
        {
            "author": "Michael McCandless",
            "body": "OK, new patch attached:\n\n  * Added more tests of *Reader.termDocs(null)\n\n  * Changed IndexReader.termDocs javadoc to explain term=null case\n\n  * Fixed MemoryIndex.termDocs(null) to return freq=1\n\n  * Added CHANGES.txt entry\n\nI think it's ready to commit.  I'll wait a day or two.\n",
            "date": "2009-01-25T12:24:43.375+0000",
            "id": 41
        },
        {
            "author": "Yonik Seeley",
            "body": "+1 to the latest patch.\nMuch thanks for picking this up! (I've been completely swamped.)",
            "date": "2009-01-25T13:19:20.194+0000",
            "id": 42
        },
        {
            "author": "Michael McCandless",
            "body": "OK, no problem Yonik -- thanks for reviewing.  I'll commit shortly.",
            "date": "2009-01-25T14:35:23.332+0000",
            "id": 43
        },
        {
            "author": "Michael McCandless",
            "body": "Committed revision 737513.  Thanks everyone!",
            "date": "2009-01-25T14:39:03.760+0000",
            "id": 44
        }
    ],
    "component": "core/query/scoring",
    "description": "The isDeleted() method on IndexReader has been mentioned a number of times as a potential synchronization bottleneck. However, the reason this  bottleneck occurs is actually at a higher level that wasn't focused on (at least in the threads I read).\n\nIn every case I saw where a stack trace was provided to show the lock/block, higher in the stack you see the MatchAllScorer.next() method. In Solr paricularly, this scorer is used for \"NOT\" queries. We saw incredibly poor performance (order of magnitude) on our load tests for NOT queries, due to this bottleneck. The problem is that every single document is run through this isDeleted() method, which is synchronized. Having an optimized index exacerbates this issues, as there is only a single SegmentReader to synchronize on, causing a major thread pileup waiting for the lock.\n\nBy simply having the MatchAllScorer see if there have been any deletions in the reader, much of this can be avoided. Especially in a read-only environment for production where you have slaves doing all the high load searching.\n\nI modified line 67 in the MatchAllDocsQuery\nFROM:\n  if (!reader.isDeleted(id)) {\nTO:\n  if (!reader.hasDeletions() || !reader.isDeleted(id)) {\n\nIn our micro load test for NOT queries only, this was a major performance improvement.  We also got the same query results. I don't believe this will improve the situation for indexes that have deletions. \n\nPlease consider making this adjustment for a future bug fix release.\n\n\n\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1316",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Avoidable synchronization bottleneck in MatchAlldocsQuery$MatchAllScorer",
    "systemSpecification": false,
    "version": "2.3"
}