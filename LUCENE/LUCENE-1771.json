{
    "comments": [
        {
            "author": "Mark Miller",
            "body": "reminder to add warning for custom queries - you shouldn't use top level reader to access fieldcache values for explain",
            "date": "2009-07-30T21:08:53.356+0000",
            "id": 0
        },
        {
            "author": "Mark Miller",
            "body": "Current state of fix (being iterated on in the fieldcache introspection issue - will be fully spun over to this issue after its shaken out)",
            "date": "2009-08-02T17:44:34.221+0000",
            "id": 1
        },
        {
            "author": "Mark Miller",
            "body": "Unless there is an objection, and after another review, I will commit this soon.",
            "date": "2009-08-04T19:13:32.344+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "I think we should change the approach here, based on Yonik's last suggestion on LUCENE-1749, so that QueryWeight.explain receives *both* the top-level Searcher and the sub-reader, with the docID pre-resolved to that sub-reader.  This way individual queries are not responsible for resolving to sub-readers.\n\nActually, since QueryWeight is new in 2.9, we can simply make this change w/o deprecation.",
            "date": "2009-08-04T19:59:09.474+0000",
            "id": 3
        },
        {
            "author": "Mark Miller",
            "body": "okay, sounds good",
            "date": "2009-08-04T20:02:30.086+0000",
            "id": 4
        },
        {
            "author": "Mark Miller",
            "body": "searcher doesn't have access to numDocs (termqueryweight) at the moment ...\n\n*edit*\n\nN/M - the IndexSearcher will have getIndexReader",
            "date": "2009-08-04T20:11:13.144+0000",
            "id": 5
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. searcher doesn't have access to numDocs (termqueryweight) at the moment ... \n\nGood... cause it's a bug and it shouldn't be using it ;-)  When was that added?",
            "date": "2009-08-04T20:16:11.516+0000",
            "id": 6
        },
        {
            "author": "Mark Miller",
            "body": "bq. Actually, since QueryWeight is new in 2.9, we can simply make this change w/o deprecation.\n\nWe do have to be back compat with Weight though - ugg - so QueryWeight would somehow need to expose a deprecated working explain(IndexReader, int) ? ...\nbut if we could do that ...",
            "date": "2009-08-04T20:22:43.459+0000",
            "id": 7
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. Good... cause it's a bug and it shouldn't be using it  When was that added?\n\nTried out IntelliJ's \"show history for selection\" for the first time - cool stuff!\nAnyway, the bug was introduced in LUCENE-1066, Nov-2007",
            "date": "2009-08-04T20:25:29.085+0000",
            "id": 8
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. We do have to be back compat with Weight though - ugg - so QueryWeight would somehow need to expose a deprecated working explain(IndexReader, int) ?\n\nQueryWeight doesn't need a explain(IndexReader, int)... but perhaps implementations of explain(IndexReader, Searcher, int) do need to handle a null searcher.  And no, the *output* of explain won't be 100% compatible (or 100% accurate) but we're too far down the road of per-segment searching, and too close to a release to fix that now IMO.",
            "date": "2009-08-04T20:28:37.215+0000",
            "id": 9
        },
        {
            "author": "Mark Miller",
            "body": "CustomScoreQuery has no access to the top level Searcher without docking it on the QueryWeight -\n\n    /*(non-Javadoc) @see org.apache.lucene.search.Scorer#explain(int) */\n    public Explanation explain(int doc) throws IOException {\n      Explanation subQueryExpl = weight.subQueryWeight.explain(null, reader,doc); // nocommit: needs resolution",
            "date": "2009-08-04T20:37:30.235+0000",
            "id": 10
        },
        {
            "author": "Mark Miller",
            "body": "bq. QueryWeight doesn't need a explain(IndexReader, int)...\n\n\nWhy not? QueryWeight implements Weight for back compat ...",
            "date": "2009-08-04T20:39:06.772+0000",
            "id": 11
        },
        {
            "author": "Yonik Seeley",
            "body": "bq.  Why not? QueryWeight implements Weight for back compat...\n\nCouldn't QueryWeight just have the following default implementation?\n public Explanation explain(IndexReader reader, int doc) throws IOException {\n   explain(reader,doc,null);\n }\n\nAnd implementations would just need to be able to handle a null searcher (for now).",
            "date": "2009-08-04T20:47:19.986+0000",
            "id": 12
        },
        {
            "author": "Mark Miller",
            "body": "Yes - but then I think we have to use the top reader for that (impls already expect it) - so you could have double caching problems where Weight is still used. I think we will have to live with that though.",
            "date": "2009-08-04T20:57:50.365+0000",
            "id": 13
        },
        {
            "author": "Mark Miller",
            "body": "bq. This way individual queries are not responsible for resolving to sub-readers.\n\n... so who is? The user I guess? The only place explain(IndexReader reader, int doc) appears to be called in Lucene code is with the customscore query. So with the current patch, you can call these methods and pass the top level reader like normal, but with this change, you have to get the subreader yourself.\n\nAlso, the one internal place that  explain(IndexReader reader, int doc) is called (CustomScoreQuery) would have to pass null for the IndexSearcher.\n\nSomething doesn't seem right with this stuff ...",
            "date": "2009-08-04T21:08:12.386+0000",
            "id": 14
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. .. so who is? (responsible for resolving to sub-readers)\n\nI assumed IndexSearcher.explain().... which brings up another point... isn't a back-compat break too (since Weight is not a QueryWeight)?\n\nIndexSearcher.Explanation explain(QueryWeight weight, int doc) throws IOException;\n\n",
            "date": "2009-08-04T21:19:25.092+0000",
            "id": 15
        },
        {
            "author": "Mark Miller",
            "body": "bq. which brings up another point... isn't a back-compat break too (since Weight is not a QueryWeight)? IndexSearcher.Explanation explain(QueryWeight weight, int doc) throws IOException;\n\nnice catch.\n\nHmmm - so scorer.explain(doc) would need to be deprecated cause it would need to take a Searcher (too avoid putting it on QueryWeight) and the sub-reader - and again this would need to be solved (like the current patch) a Query at a time. \n\n*edit*\n\nAnd then there is somehow handling the back compat of that deprecation ...",
            "date": "2009-08-04T21:30:31.489+0000",
            "id": 16
        },
        {
            "author": "Mark Miller",
            "body": "Exploratory test patch",
            "date": "2009-08-04T21:46:21.339+0000",
            "id": 17
        },
        {
            "author": "Mark Miller",
            "body": "Ignore my previous comment - was missing the IndexSearcher call because it was still calling explain(reader,doc) rather than explain(searcher, reader, doc)",
            "date": "2009-08-04T21:47:41.716+0000",
            "id": 18
        },
        {
            "author": "Mark Miller",
            "body": "whoops - don't need to sub reader break out in boolean query",
            "date": "2009-08-04T21:50:55.461+0000",
            "id": 19
        },
        {
            "author": "Mark Miller",
            "body": "Okay - here is patch that should be good enough for evaluating this method.\n\nMy scorer.explain concern was invalid because Mike deprecated it anyway, so I just moved that logic up a level, and now none of the searcher,reader stuff needs to be passed to it. IndexSearcher.explain now does the reader resolve.\n\n",
            "date": "2009-08-04T22:06:46.733+0000",
            "id": 20
        },
        {
            "author": "Mark Miller",
            "body": "Too continue my JIRA spam on this issue:\n\nSo the only way I can kind of get away with this without even more back compat issues is because back compat is already broken where it uses QueryWeight rather than Weight (as Yonik points out).",
            "date": "2009-08-04T22:13:41.729+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nbq. searcher doesn't have access to numDocs (termqueryweight) at the moment ...\n\nGood... cause it's a bug and it shouldn't be using it  When was that added?\n{quote}\n\nI'm confused... why is that a bug?",
            "date": "2009-08-04T22:23:26.718+0000",
            "id": 22
        },
        {
            "author": "Michael McCandless",
            "body": "bq. isn't a back-compat break too (since Weight is not a QueryWeight)\n\nSearcher defines this:\n\n{code}\n  public Explanation explain(Weight weight, int doc) throws IOException {\n    return explain(new QueryWeightWrapper(weight), doc);\n  }\n{code}\n\nBut, yes, QueryWeightWrapper will need to forward explain to the Weight, somehow.  This stuff is hard to think about!!",
            "date": "2009-08-04T22:27:09.485+0000",
            "id": 23
        },
        {
            "author": "Mark Miller",
            "body": "Ah right - the wrapper call is on Searcher - tricky.\n\nSo one issue with the current patch is that the old weight impls will get a sub-reader and they should still get a top level reader.",
            "date": "2009-08-04T22:38:36.086+0000",
            "id": 24
        },
        {
            "author": "Mark Miller",
            "body": "Also the doc passed to explain from IndexSearcher needs to be de-based",
            "date": "2009-08-04T22:48:07.002+0000",
            "id": 25
        },
        {
            "author": "Mark Miller",
            "body": "with doc debase and top level reader to for weight explain",
            "date": "2009-08-04T23:14:16.471+0000",
            "id": 26
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. I'm confused... why is that a bug?\n\nBecause it's maxDoc() not numDocs() that's used in the idf calculation... so if you tried to duplicate the idf calculation given the explain factors, it wouldn't match up for terms with deleted docs.",
            "date": "2009-08-05T01:10:46.089+0000",
            "id": 27
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nbq. I'm confused... why is that a bug?\n\nBecause it's maxDoc() not numDocs() that's used in the idf calculation\n{quote}\nAhh, right.  Mark do you want to fold that fix into your next patch here?",
            "date": "2009-08-05T09:10:15.824+0000",
            "id": 28
        },
        {
            "author": "Michael McCandless",
            "body": "Hmm... shouldn't explain take the top-level Searcher (not IndexSearcher)?\n\nbq. I think we have to use the top reader for that (impls already expect it) - so you could have double caching problems where Weight is still used. I think we will have to live with that though.\n\nMaybe instead we should simply throw an exception if QueryWeight.explain(IndexReader, int) is called, stating that the Query impl must instead implement the new explain (that takes the top-level Searcher)?  Would that be safer than risking accidental 2X mem usage due to a custom Query's explain?",
            "date": "2009-08-05T14:41:49.881+0000",
            "id": 29
        },
        {
            "author": "Mark Miller",
            "body": "bq. Hmm... shouldn't explain take the top-level Searcher (not IndexSearcher)? \n\nYeah, I can switch it - I only changed it to that to match the ability to get numDocs (by getting the IndexReader). If we fix that issue though, we don't need that and it can go back to Searcher.\n\n{quote}Maybe instead we should simply throw an exception if QueryWeight.explain(IndexReader, int) is called, stating that the Query impl must instead implement the new explain (that takes the top-level Searcher)? Would that be safer than risking accidental 2X mem usage due to a custom Query's explain?{quote}\n\nAnd break back compat?! Yeah, that seems reasonable to me. Anyone else?",
            "date": "2009-08-05T14:59:39.129+0000",
            "id": 30
        },
        {
            "author": "Michael McCandless",
            "body": "bq. And break back compat?! Yeah, that seems reasonable to me. Anyone else?\n\nRight.  Though, we'd fix all core/contrib Query classes to cutover to the new API.  It'd only be external (custom) Query impls that'd hit this.  I think a hard break is better than a subtle and rather shocking \"my explain method just consumed XXX MB\" failure.",
            "date": "2009-08-05T15:04:34.894+0000",
            "id": 31
        },
        {
            "author": "Mark Miller",
            "body": "bq. I think a hard break is better than a subtle and rather shocking \"my explain method just consumed XXX MB\" failure.\n\nYeah, I agreed :) But shouldn't we just make it a compile time error? What if explain is part of their current apps code? Should we wait to blow up on them?",
            "date": "2009-08-05T15:06:58.387+0000",
            "id": 32
        },
        {
            "author": "Michael McCandless",
            "body": "bq. But shouldn't we just make it a compile time error?\n\n+1, that's even better!",
            "date": "2009-08-05T15:14:12.386+0000",
            "id": 33
        },
        {
            "author": "Mark Miller",
            "body": "But it would imply that we merge QueryWeight back into Weight? That seems like the logical break ...",
            "date": "2009-08-05T20:52:34.276+0000",
            "id": 34
        },
        {
            "author": "Michael McCandless",
            "body": "Hmm, Weight is an interface, which we are wanting to get away from.  We could simply change the explain in Weight to take the Searcher?  That'd break compilation but let us keep the switch to abstract class QueryWeight?",
            "date": "2009-08-05T21:49:59.697+0000",
            "id": 35
        },
        {
            "author": "Mark Miller",
            "body": "That was my first consideration - but then I though, why not just make them switch to QueryWeight then? And then why not just make QueryWeight back to Weight (but abstract) - its not really much more work, and if you have to do work anyway, why not come all the way forward for a couple more lines?",
            "date": "2009-08-05T21:54:07.210+0000",
            "id": 36
        },
        {
            "author": "Michael McCandless",
            "body": "bq. why not just make QueryWeight back to Weight (but abstract) \n\nOK I think that's a good idea... so then the compilation errors a custom Query will see is 1) they have to change from \"implements Weight\" to \"extends Weight\", and 2) they have to add the Searcher arg to explain (and fix their explain code so it expects a single segment w/ the IndexReader, and the top-level Searcher).\n\nSheesh we're really pulling on the little string, here :)",
            "date": "2009-08-05T22:16:09.372+0000",
            "id": 37
        },
        {
            "author": "Mark Miller",
            "body": "Here it is basically.\n\nCore tests pass, but oddly TestCompoundWordTokenFilter took a real long time in contrib.\n\n [junit] Testsuite: org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter\n    [junit] Tests run: 4, Failures: 0, Errors: 0, Time elapsed: 195.028 sec\n\nBenchmark also was pretty slow. I'm guessing because of autocommit. Similar symptoms.\n\nPerhaps my OS is messed up - would be odd though - fresh install from a week ago. Never noticed things being so slow before though. TestQualityRun is taking forever. So the benchmark thing could very well be an isolated issue.",
            "date": "2009-08-06T01:05:38.143+0000",
            "id": 38
        },
        {
            "author": "Mark Miller",
            "body": "Well nevermind - no auto commit in either of those. Looks like it was a network issue of some kind for downloading files. All of a sudden both are fast again, and when they were so slow, TestCompoundWordTokenFilter was hung up sun.net.www.http.KeepAliveCache.run(). Different issue, but had something of a similar look to it.",
            "date": "2009-08-06T02:43:54.736+0000",
            "id": 39
        },
        {
            "author": "Robert Muir",
            "body": "it looks like it is downloading files due to licensing constraints (it checks compounding against a german file that is under the LaTeX license).\n\nhowever that project has apache 2 licensed files for danish and italian so we can look at testing in one of those languages instead in the future, that way test data could simply be included?\n\nthe test being slow/downloading files has confused me before as well.",
            "date": "2009-08-06T03:46:11.742+0000",
            "id": 40
        },
        {
            "author": "Michael McCandless",
            "body": "bq. however that project has apache 2 licensed files for danish and italian so we can look at testing in one of those languages instead in the future, that way test data could simply be included?\n\n+1, this would be awesome\n\nIn general I'm wary of having our tests rely on external sites being available...\n\nTestCompoundWordTokenFilter frequently takes waaaay long for me, while it goes and downloads the test files.  We must be generating too much traffic by running our unit tests so much :)",
            "date": "2009-08-06T08:57:23.088+0000",
            "id": 41
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good Mark!  This is a nice cleanup (coming full circle, back to just Weight, again).\n\nYou need to fix back-compat tests, too.\n",
            "date": "2009-08-06T10:21:25.752+0000",
            "id": 42
        },
        {
            "author": "Hoss Man",
            "body": "FWIW: the last patch was giving me compile errors because BoostingNearQuery still referenced the removed QueryWeight class.\n\nI think this is the correct fix.",
            "date": "2009-08-07T00:50:59.421+0000",
            "id": 43
        },
        {
            "author": "Mark Miller",
            "body": "Thanks - BoostingNearQuery was just added, so it wasn't around for the patch.",
            "date": "2009-08-07T01:08:51.339+0000",
            "id": 44
        },
        {
            "author": "Mark Miller",
            "body": "workarounds for the back compat test branch",
            "date": "2009-08-07T01:22:07.259+0000",
            "id": 45
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks good!:\n\n  * Looks like you need to \"svn rm\n    src/java/org/apache/lucene/search/QueryWeight.java\"\n\n  * Some javadocs still reference QueryWeight\n\n  * Why do we need this in Weight?\n{code}\npublic Explanation explain(IndexReader reader, int doc) throws IOException {\n  return explain(null, reader, doc);\n}\n{code}\n    Ie, do we think there are places outside of Lucene that invoke\n    Weight.explain directly?\n",
            "date": "2009-08-07T18:24:08.014+0000",
            "id": 46
        },
        {
            "author": "Mark Miller",
            "body": "The Changes for this one is kind of complicated ...",
            "date": "2009-08-08T17:56:22.460+0000",
            "id": 47
        },
        {
            "author": "Mark Miller",
            "body": "javadoc tweak/fix\nremoved explain(reader,doc)\n\nhow to handle all of the previous change entries this affects ... ?",
            "date": "2009-08-08T23:43:47.943+0000",
            "id": 48
        },
        {
            "author": "Mark Miller",
            "body": "One last patch - fix/doc null weight.explain null searcher issue\nremove a few unused imports",
            "date": "2009-08-09T02:32:54.712+0000",
            "id": 49
        },
        {
            "author": "Michael McCandless",
            "body": "bq. how to handle all of the previous change entries this affects ... ?\n\nI think they should all be fixed?\n\nIe, the CHANGES.txt is something users can read to see what's changed since the last release, not the blow-by-blow account of the series of iterations we went through before releasing.",
            "date": "2009-08-09T19:35:10.725+0000",
            "id": 50
        },
        {
            "author": "Mark Miller",
            "body": "updates to apply to trunk and adds a stab at reconciling Changes",
            "date": "2009-08-11T01:14:29.310+0000",
            "id": 51
        },
        {
            "author": "Mark Miller",
            "body": "Hoss Man uses Chris Hostetter in Changes? Weak. I'll update it before committing.",
            "date": "2009-08-11T01:20:31.816+0000",
            "id": 52
        },
        {
            "author": "Mark Miller",
            "body": "I'm going to give this one another day or two and then commit if nothing comes up.",
            "date": "2009-08-11T01:22:13.505+0000",
            "id": 53
        },
        {
            "author": "Mark Miller",
            "body": "I think the Changes entries could still use some polish.\n\nHere are the originals:\n\n 3. LUCENE-1630: Deprecate Weight in favor of QueryWeight: added\n    matching methods to Searcher to take QueryWeight and deprecated\n    those taking Weight.  If you have a Weight implementation, you can\n    turn it into a QueryWeight with QueryWeightWrapper (will be\n    removed in 3.0). All of the Weight-based methods were implemented\n    by calling the QueryWeight variants by wrapping the given Weight.\n    Going forward Searchable will be kept for convenience only and may\n    be changed between minor releases without any deprecation\n    process. It is not recommended to implement it, but rather extend\n    Searcher.  (Shai Erera via Mike McCandless)\n\n24. LUCENE-1630: Deprecate Weight in favor of QueryWeight, which adds\n    a scorer(IndexReader, boolean /* scoreDocsInOrder */, boolean /*\n    topScorer */) method instead of scorer(IndexReader) (now\n    deprecated). The new method is used by IndexSearcher to mate\n    between Collector and Scorer orderness of doc IDs. Some Scorers\n    (like BooleanScorer) are much more efficient if out-of-order\n    documents scoring is allowed by a Collector.  Collector must now\n    implement acceptsDocsOutOfOrder. If you write a Collector which\n    does not care about doc ID orderness, it is recommended that you\n    return true.  QueryWeight has the scoresDocsOutOfOrder method,\n    which by default returns false.  If you create a QueryWeight which\n    will score documents out of order if that's requested, you should\n    override that method to return true.  Also deprecated\n    BooleanQuery's setAllowDocsOutOfOrder and getAllowDocsOutOfOrder\n    as they are not needed anymore. BooleanQuery will now score docs\n    out of order when used with a Collector that can accept docs out\n    of order. (Shai Erera via Mike McCandless)\n\nAnd I've changed to:\n\n 3. LUCENE-1630, LUCENE-1771: Weight, previously an interface, is now an abstract \n    class. Some of the method signatures have changed, but it should be fairly\n    easy to see what adjustments must be made to existing code to sync up\n    with the new API. You can find more detail in the API Changes section.\n    \n    Going forward Searchable will be kept for convenience only and may\n    be changed between minor releases without any deprecation\n    process. It is not recommended that you implement it, but rather extend\n    Searcher.  (Shai Erera, Chris Hostetter, Mark Miller via Mike McCandless)\n\n24. LUCENE-1630, LUCENE-1771: Weight is now an abstract class, andd adds\n    a scorer(IndexReader, boolean /* scoreDocsInOrder */, boolean /*\n    topScorer */) method instead of scorer(IndexReader). The new method \n    is used by IndexSearcher to mate Collector and Scorer orderness \n    of doc IDs. Some Scorers (like BooleanScorer) are much more efficient \n    if out-of-order documents scoring is allowed by a Collector.  Collector \n    must now implement acceptsDocsOutOfOrder. If you write a Collector \n    which does not care about doc ID orderness, it is recommended that you\n    return true.  Weight has a scoresDocsOutOfOrder method, which by default \n    returns false.  If you create a Weight which will score documents out of\n    order if requested, you should override that method to return true. \n    BooleanQuery's setAllowDocsOutOfOrder and getAllowDocsOutOfOrder have \n    been deprecated as they are not needed anymore. BooleanQuery will now \n    score docs out of order when used with a Collector that can accept docs \n    out of order. Finally, Weight#explain now also takes a Searcher.\n    (Shai Erera, Chris Hostetter, Mark Miller via Mike McCandless)\n\nSo one thing I don't like is {quote} The new method is used by IndexSearcher to mate Collector and Scorer orderness of doc IDs. {quote} I know what it means, but its a bit vague and awkward. I'm not sure how to best rewrite it though.\n\nAlso, while the entry talks a lot about the orderedIds param, it doesn't really mention the topScorer param. I'm still not 100% clear on it after looking at the javadocs either (without looking at the code). I don't think top scorer can be defined using primarily the term top scorer - it might as well be the omega scorer unless you can point me to the Lucene dictionary where I can look it up:\n\n{code}\n  * @param topScorer\n   *          specifies whether the returned {@link Scorer} will be used as a\n   *          top scorer or as in iterator. I.e., if true,\n   *          {@link Scorer#score(Collector)} will be called; if false,\n   *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n   *          be called.\n{code}\n\nSo I still want to beef up these changes a bit, and I think the javadoc needs to be a bit more clear - as we don't provide a convenience method that chooses defaults for those params, it should be very easy to quickly figure out whats best to pass. Right now, its just a little less than clear without some code browsing.",
            "date": "2009-08-11T20:07:56.193+0000",
            "id": 54
        },
        {
            "author": "Michael McCandless",
            "body": "Maybe say \"Weight#explain now takes the top-level searcher, sub-reader and sub-docID\"?\n\nAlso there's a small typo (andd -> and).\n\n{quote}\nSo one thing I don't like is\n\nbq. The new method is used by IndexSearcher to mate Collector and Scorer orderness of doc IDs.\n{quote}\n\nHow about \"IndexSearcher uses this method to obtain a scorer matching the capabilities of the Collector wrt orderness of docIDs\"?\n\nbq.  Also, while the entry talks a lot about the orderedIds param, it doesn't really mention the topScorer param\n\nHow about simply removing the first sentence, ie, just jump straight into \"if true...\"?",
            "date": "2009-08-11T20:40:45.419+0000",
            "id": 55
        },
        {
            "author": "Mark Miller",
            "body": "Okay - just ran the tests one more time and looked over everything. I'm going to commit this later tonight unless anything comes up.",
            "date": "2009-08-11T21:19:55.233+0000",
            "id": 56
        },
        {
            "author": "Mark Miller",
            "body": "committed - thanks all!",
            "date": "2009-08-12T01:32:40.863+0000",
            "id": 57
        }
    ],
    "component": "core/search",
    "description": null,
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1771",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Using explain may double ram reqs for fieldcaches when using ValueSourceQuery/CustomScoreQuery or for ConstantScoreQuerys that use a caching Filter.",
    "systemSpecification": true,
    "version": ""
}