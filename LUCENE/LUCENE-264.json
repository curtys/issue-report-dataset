{
    "comments": [
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=12435)\nIndexReader.java with reduced buffer requirements\n",
            "date": "2004-08-16T03:54:51.000+0000",
            "id": 0
        },
        {
            "author": "Paul Elschot",
            "body": "The first attachment actually is InputStream.java, in the store package. \n \nI left in some comments and commented code. The initial buffer size \nand the buffer size increase factor might need tweaking. It passes \nall the current tests, and the commented println's confirm the working. \n \nI have not tested this on larger indexes with a lot of of query activity. \n \nRegards, \nPaul \n ",
            "date": "2004-08-16T04:04:19.000+0000",
            "id": 1
        },
        {
            "author": "Paul Elschot",
            "body": "Possible flaw in the attached java file: clone() evt. truncates \nthe buffer, but in that case it does not reseek the underlying \nstream to the new end of the buffer. \n ",
            "date": "2004-08-16T14:40:32.000+0000",
            "id": 2
        },
        {
            "author": "Paul Elschot",
            "body": "The latest memory mapped files (GCJ) are probably going to make this \nobsolete :) . Nonetheless, if anyone's is interested in developing this \nfurther, please contact me. ",
            "date": "2004-09-26T03:20:11.000+0000",
            "id": 3
        },
        {
            "author": "cutting@apache.org",
            "body": "Another way to solve this might be to use an nio mmapped Directory implementation.",
            "date": "2004-09-28T05:01:01.000+0000",
            "id": 4
        },
        {
            "author": "Paul Elschot",
            "body": "Doug just committed MMapDirectory.java with this clone(): \n \n\u00c2\u00a0 \u00c2\u00a0 \u00c2\u00a0 public Object clone() { \n\u00c2\u00a0 \u00c2\u00a0 \u00c2\u00a0 \u00c2\u00a0 MMapIndexInput clone = (MMapIndexInput)super.clone(); \n\u00c2\u00a0 \u00c2\u00a0 \u00c2\u00a0 \u00c2\u00a0 clone.isClone = true; \n\u00c2\u00a0 \u00c2\u00a0 \u00c2\u00a0 \u00c2\u00a0 clone.buffer = buffer.duplicate(); \n\u00c2\u00a0 \u00c2\u00a0 \u00c2\u00a0 \u00c2\u00a0 return clone; \n\u00c2\u00a0 \u00c2\u00a0 \u00c2\u00a0 } \n \nAs buffer.duplicate() shares the buffer content,  \nreducing the buffer requirements of InputStream is now obsolete. \n \nThe only thing left is a documentation note for the max. nr. \nof clauses in a BooleanQuery that for a MMapDirectory the buffering \nis left to the operating system. \n \n ",
            "date": "2004-09-29T14:49:24.000+0000",
            "id": 5
        },
        {
            "author": "Paul Elschot",
            "body": "Created an attachment (id=13133)\nImproved javadoc for maxClauseCount\n",
            "date": "2004-10-19T04:04:45.000+0000",
            "id": 6
        },
        {
            "author": "Paul Elschot",
            "body": "With this patch, this enhancement can be closed. \n ",
            "date": "2004-10-19T04:07:48.000+0000",
            "id": 7
        },
        {
            "author": "Daniel Naber",
            "body": "Thanks, I committed the improved javadoc comment. ",
            "date": "2004-10-20T02:55:26.000+0000",
            "id": 8
        }
    ],
    "component": "core/index",
    "description": "As discussed on lucene-dev before, queries with lots of terms can use \nup a lot of unused buffer space for their TermDocs, because most terms \nhave few documents.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-264",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "[PATCH] Improved javadoc for maxClauseCount",
    "systemSpecification": true,
    "version": "1.4"
}