{
    "comments": [
        {
            "author": "Nicko Cadell",
            "body": "Created an attachment (id=14169)\nDelegate output escaping to Formatter encodeText method\n",
            "date": "2005-02-04T00:47:18.000+0000",
            "id": 0
        },
        {
            "author": "Mark Harwood",
            "body": "> This patch allows the highlighter Formatter to control escaping of the non\n> highlighted text as well as the highlighting of the matching text.\n\nThanks for this. I think the suggestion looks useful but I have a couple of\nconcerns. Not only do we break the Formatter interface, we also break the\nbehaviour for those upgrading. If people have applications which already escape\nthe content (eg before or after calling highlighter), when they upgrade to the\nproposed new version their content will be double-escaped. They will also incur\n the additional performance overhead for encoding where it may not be required\n(Note: could initialize htmlEncode's StringBuffer to at least plainText.length()) . \nI guess we could add a flag to the html-based formatters which allows the user\nto turn encoding on or off. Will the htmlEncode function you've defined work for\nmore exotic character sets eg CKY?\n\n\nCheers\nMark",
            "date": "2005-02-04T02:24:59.000+0000",
            "id": 1
        },
        {
            "author": "Mark Harwood",
            "body": "> This patch allows the highlighter Formatter to control escaping of the non\n> highlighted text as well as the highlighting of the matching text.\n\nThanks for this. I think the suggestion looks useful but I have a couple of\nconcerns. Not only do we break the Formatter interface, we also break the\nbehaviour for those upgrading. If people have applications which already escape\nthe content (eg before or after calling highlighter), when they upgrade to the\nproposed new version their content will be double-escaped. They will also incur\n the additional performance overhead for encoding where it may not be required\n(Note: could initialize htmlEncode's StringBuffer to at least plainText.length()) . \nEither we could add a flag to the html-based formatters which allows the user to\nturn encoding on or off or we could suggest they subclass to override\nencodeText. Will the htmlEncode function you've defined work for more exotic\ncharacter sets eg CKY?\n\n\nCheers\nMark",
            "date": "2005-02-04T02:26:42.000+0000",
            "id": 2
        },
        {
            "author": "Nicko Cadell",
            "body": "(In reply to comment #3)\n> Not only do we break the Formatter interface, we also break the\n> behaviour for those upgrading. \n\nIf you need to keep the Formatter interface stable then we can do this by adding\nanother interface that extends Formatter. The Highlighter can adapt its\nbehaviour depending on the actual instance supplied.\n\nYes the patch does cause a behaviour change. The SimpleHTMLFormatter,\nGradientFormatter, and SpanGradientFormatter will HTML encode their output where\npreviously they did not. If that behaviour is not acceptable then they can be\nchanged to implement the encodeText method such that it just passes back the \noriginalText, this would give exactly the same behaviour as with the current\nversion.\n\n\n> If people have applications which already escape\n> the content (eg before or after calling highlighter), when they upgrade to the\n> proposed new version their content will be double-escaped. \n\nI could not find a reliable way of escaping the text if the original search text\ncontained HTML content. If the text is HTML escaped before the TokenStream is\nbuilt then the highlighter is parsing a potentially different stream to the\noriginal search. Also the TokenStream and the text must be kept in sync\notherwise the TokenGroup indexes are off. The text cannot be escaped after\nhighlighting because the original contains the same mark-up used to highlight\nthe matching tokens. It would be possible to get the SimpleHTMLFormatter to use\n2 specific GUIDs to wrap the highlight tokens as it is unlikely that these would\nalso appear in the original text - these could then be replaced with the correct\ntags after HTML escaping.\n\n\n> They will also incur\n>  the additional performance overhead for encoding where it may not be required\n> (Note: could initialize htmlEncode's StringBuffer to at least\nplainText.length()) .\n\nThat would certainly help.\n\nIf we are going to break the Formatter interface how about changing the methods\nto take a java.io.Writer or java.io.PrintWriter this would reduce the number of\ntemporary strings created?\n\n\n> Will the htmlEncode function you've defined work for more exotic\n> character sets eg CKY?\n\nNo, it is a 'brain dead' implementation.\n\nCommons Lang has an implementation that could be used: escapeHtml(String) in \nhttp://svn.apache.org/viewcvs.cgi/jakarta/commons/proper/lang/trunk/src/java/org/apache/commons/lang/StringEscapeUtils.java?rev=137958&view=markup\n\nDo you really want to include something like that in with the Highlighter? Is\nthe Highlighter supposed to do HTML highlighting out of the box, or should it\njust be a toolkit that makes it easy to do so.\n\n\nNicko",
            "date": "2005-02-04T03:08:43.000+0000",
            "id": 3
        },
        {
            "author": "Mark Harwood",
            "body": "How about keeping the existing Formatter interface and making the Highlighter \nclass encode then pass strings to the formatter. \nThe highlighter can have a new setEncoder() method to set a configurable \nchoice of Encoder implementation (with your simple one as the out-of-the-box \ndefault implementation). This may be more optimised because the Highlighter is \nin a position to pick and choose which sections of the text need encoding \n(because it selects the best bits).\nThis centralized selection of encoder is probably a bit neater too.",
            "date": "2005-02-04T05:13:40.000+0000",
            "id": 4
        },
        {
            "author": "Nicko Cadell",
            "body": "(From update of attachment 14169)\nPatch replaced by new patch to add separate Encoder.\n",
            "date": "2005-02-04T09:10:55.000+0000",
            "id": 5
        },
        {
            "author": "Nicko Cadell",
            "body": "Created an attachment (id=14174)\nNewFile: Encoder Interface\n\nNew Encoder interface",
            "date": "2005-02-04T09:12:14.000+0000",
            "id": 6
        },
        {
            "author": "Nicko Cadell",
            "body": "Created an attachment (id=14175)\nNewFile: HTML Encoder\n\nImplementation of Encoder interface that does simple HTML output escaping",
            "date": "2005-02-04T09:13:06.000+0000",
            "id": 7
        },
        {
            "author": "Nicko Cadell",
            "body": "Created an attachment (id=14176)\nNewFile: Default (no-op) Encoder\n\nImplementation of the Encoder interface that does not modify the output text",
            "date": "2005-02-04T09:16:39.000+0000",
            "id": 8
        },
        {
            "author": "Nicko Cadell",
            "body": "Created an attachment (id=14177)\nPatch to update Highlighter to use an Encoder\n\nThe Highlighter takes an optional Encoder through a new constructor. If not\nspecified the default value is to use the DefaultEncoder, which does not modify\nthe text.",
            "date": "2005-02-04T09:18:32.000+0000",
            "id": 9
        },
        {
            "author": "Nicko Cadell",
            "body": "I have updated the changes so that the existing interfaces are unchanged and the\ncurrent behaviour is preserved. When creating the Highlighter an Encoder object\ncan be passed to the constructor along with the current Formatter. The Encoder\nwill be used to escape any text that is output including the text that is passed\nto the Formatter.\n\nThe Encoder interface contains the encodeText(String) method.\nThe DefaultEncoder is an implementation of the Encoder interface that does not\nmodify the text, this is used by default to provider the current behaviour.\nThe SimpleHTMLEncoder is an implementation of the Encoder interface that\nperforms basic HTML output escaping on all the text.\n",
            "date": "2005-02-04T09:24:15.000+0000",
            "id": 10
        },
        {
            "author": "Mark Harwood",
            "body": "Great stuff, thanks Nicko.\n\nI'll apply the patch as soon as I get the new SVN access sorted out.",
            "date": "2005-02-04T18:00:23.000+0000",
            "id": 11
        }
    ],
    "component": "core/other",
    "description": "Patch for jakarta-lucene-sandbox/contributions/highlighter\nCVS version 3rd February 2005\n\nThis patch allows the highlighter Formatter to control escaping of the non\nhighlighted text as well as the highlighting of the matching text.\n\nThe example formatters highlight the matching text using XML/HTML tags. This\nworks fine if the plain text does not contain any characters that need to be\nescaped for HTML output (i.e. <, &, and \"), however this cannot be guaranteed.\nAs the formatter controls the method of highlighting (in the examples this is\nHTML, but it could be any other form of markup) it should also be responsible\nfor escaping the rest of the output.\n\nThis patch adds a method, encodeText(String), to the Formatter interface. This\nis a breaking change. This method is called from the Highlighter with the text\nthat is not passed to the formatter's highlightTerm method. \nThe SimpleHTMLFormatter has a public static method for performing simple HTML\nescaping called htmlEncode. \nThe SimpleHTMLFormatter, GradientFormatter, and SpanGradientFormatter have been\nupdated to implement the encodeText method and call the htmlEncode method to\nescape the output.\n\nFor existing formatter to maintain exactly the same behaviour as before applying\nthis patch they would need to implement the encodeText method to return the\nargument value without modification, e.g.:\n\npublic String encodeText(String originalText)\n{\n  return originalText;\n}",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "LUCENE-340",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "[PATCH] Highlighter: Delegate output escaping to Formatter",
    "systemSpecification": true,
    "version": ""
}