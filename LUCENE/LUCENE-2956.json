{
    "comments": [
        {
            "author": "Michael Busch",
            "body": "An idea from Mike how to fix this problem:\n\n{quote}\nTo avoid the full-stop, I think during the flush we can have two global delete pools. We carefully sweep all DWPTs and flush each, in succession. Any DWPT not yet flushed is free to continue indexing as normal, putting deletes into the first global pool, flushing as normal. But, a DWPT that has been flushed by the \"sweeper\" must instead put deletes for an updateDocument carefully into the 2nd pool, and not buffer the delete into DWPTs not yet flushed.\n{quote}",
            "date": "2011-03-09T21:55:06.076+0000",
            "id": 0
        },
        {
            "author": "Jason Rutherglen",
            "body": "What is the status of this one?  If no one's working on it, I can take a stab.",
            "date": "2011-04-07T18:52:34.972+0000",
            "id": 1
        },
        {
            "author": "Simon Willnauer",
            "body": "Jason I am working on this. First patch is not too far away. ",
            "date": "2011-04-07T19:23:14.944+0000",
            "id": 2
        },
        {
            "author": "Simon Willnauer",
            "body": "FYI I have a working patch for this. it needs some cleanup so I will hopefully upload beginning next week....",
            "date": "2011-04-08T16:19:53.821+0000",
            "id": 3
        },
        {
            "author": "Simon Willnauer",
            "body": "Attaching an initial patch. This patch uses a entirely non-blocking approach to deletes based on a specialized linked list that only uses CAS operations.\n\nSince this issue is quiet complex I tried to add as many useful comments as possible inline in the patch to make reviewing easier. So for details check out the patch.\n\nAll test on realtime branch pass with this patch. (once in a while I have a failure in the healthiness test but the assumptions in that test seem to be too strict and I need to fix that separately)\n\nReviews are very very much appreciated!\n\n",
            "date": "2011-04-11T23:27:32.890+0000",
            "id": 4
        },
        {
            "author": "Jason Rutherglen",
            "body": "I think I have an idea, however can you explain the ticketQueue?",
            "date": "2011-04-12T00:24:19.608+0000",
            "id": 5
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. I think I have an idea, however can you explain the ticketQueue?\n\nSure, since with DWPT the flush process is concurrent and several DWPT could flush at the same time we must maintain the order of the flushes before we can apply the flushed segment and the frozen global\ndeletes it is buffering. The reason for this is that the global deletes mark a certain point in time where we took a DWPT out of rotation and freeze the global deletes.\n\nExample: A DWPT 'A' starts flushing and freezes the global deletes, then DWPT 'B' starts flushing and freezes all deletes occurred since 'A' has started. if 'B' finishes before 'A' we need to wait until 'A' is done otherwise the deletes frozen by 'B' are not applied to 'A' and we might miss to deletes documents in 'A'.\n\nThe Ticket queue simply ensures that we push the frozen deletes and the new created segment in the same order as the corresponding DWPT have started flushing. If a DWPT finishes flushing we update its Ticket and then check the head of the queue if we can remove / publish the ticket. if so we continue publishing until the head of the queue can not be published yet or the queue is empty.\n",
            "date": "2011-04-12T06:52:48.040+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks great Simon!\n\nVery impressive how this patch makes delete handling fully lockless!\nThe inline comments are very helpful...\n\nSome small stuff:\n\n  * I think we do need delete-by-Term[] (and Query[]) to be atomic?\n    (IW has these methods, and I think they are atomic now?)  This is\n    from the TODOs in DocumentsWriterDeleteQueue...\n\n  * Does TestRollingUpdates really need to use LogMP?\n\n  * raceing -> racing; {@link BuffereDeletes} -> {@link\n    BufferedDeletes}; DocumensWriter -> DocumentsWriter\n",
            "date": "2011-04-12T18:09:31.890+0000",
            "id": 7
        },
        {
            "author": "Michael Busch",
            "body": "Cool patch! :)\nThough it worries me a little how complex the whole delete/update logic is becoming (not only the part this patch adds).\n\nOriginally we decided to not go with sequenceIDs partly because we thought the implementation might be too complex, but I think it'd be simpler than the current approach that uses bits.\n\nThe sequenceIDs approach we had in the beginning was also completely lockless in a very very simple way.\n\nAnyway, I have yet to take a closer look here. Just something that might be worth discussing.",
            "date": "2011-04-12T20:27:33.219+0000",
            "id": 8
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Though it worries me a little how complex the whole delete/update logic is becoming (not only the part this patch adds).\nI can not more agree. Its been very complex making all the tests pass and figuring out all the little nifty cornercases here. A different, somewhat simpler approach would be great. Eventually for Searchable Ram Buffers we might need to switch to seq. ids anyway but I think for landing DWPT on trunk we can go with the current approach. \nI will update the latest patch and commit it to the branch and merge with trunk again. Once that is done I will setup a hudson build for RT so we give it a little exercise while we prepare moving to trunk.\n\n ",
            "date": "2011-04-13T07:33:34.187+0000",
            "id": 9
        },
        {
            "author": "Simon Willnauer",
            "body": "here is an updated patch fixing some spellings, adds atomic updates for Term[] and Query[] and removes the LogMergePolicy restriction from TestRollingUpdates",
            "date": "2011-04-13T08:56:57.880+0000",
            "id": 10
        },
        {
            "author": "Simon Willnauer",
            "body": "I committed that patch and merged with trunk",
            "date": "2011-04-13T12:47:28.221+0000",
            "id": 11
        },
        {
            "author": "Jason Rutherglen",
            "body": "Simon, nice work.  I agree with Michael B. that the deletes are super complex.  We had discussed using sequence ids for all segments (not just the RT enabled DWPT ones) however we never worked out a specification, eg, for things like wrap around if a primitive short[] was used.\n\nShall we start again on LUCENE-2312?  I think we still need/want to use sequence ids there.  The RT DWPTs shouldn't have so many documents that using a long[] for the sequence ids is too RAM consuming?",
            "date": "2011-04-13T15:10:48.095+0000",
            "id": 12
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Shall we start again on LUCENE-2312? I think we still need/want to use sequence ids there. The RT DWPTs shouldn't have so many documents that using a long[] for the sequence ids is too RAM consuming?\n\nJason I think nothing prevents you from start working on this again.... Yet, I think we should freeze the branch now and only allow merging, bug fixes, tests and documentation fixes until we land on trunk. Once we are there we can freely push stuff in the branch again and make it work with seq. ids.\n\nthoughts?",
            "date": "2011-04-14T10:25:04.261+0000",
            "id": 13
        },
        {
            "author": "Simon Willnauer",
            "body": "committed to branch",
            "date": "2011-04-14T10:25:18.865+0000",
            "id": 14
        },
        {
            "author": "Jason Rutherglen",
            "body": "{quote}Jason I think nothing prevents you from start working on this again.... Yet, I think we should freeze the branch now and only allow merging, bug fixes, tests and documentation fixes until we land on trunk. Once we are there we can freely push stuff in the branch again and make it work with seq. ids.\n{quote}\n\nOK, great.  I remember now that our main concern was the memory usage of using a short[] (for the seq ids) if the total number of documents is numerous (eg, 10s of millions).  Also at some point we'd have double the memory usage when we roll over to the next set, until the previous readers are closed.\n\nbq. I think we should freeze the branch now and only allow merging, bug fixes, tests and documentation fixes until we land on trunk\n\nMaybe once LUCENE-2312 sequence ids work for deletes, we can look at creating a separate branch that implements seq id deletes for all segments, and compare with the BV approach.  Eg, performance, memory usage, and simplicity.",
            "date": "2011-04-14T13:26:31.124+0000",
            "id": 15
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. Maybe once LUCENE-2312 sequence ids work for deletes, we can look at creating a separate branch that implements seq id deletes for all segments, and compare with the BV approach.  Eg, performance, memory usage, and simplicity.\nI don't think we need to create a different branch until then DWPT will be no trunk and we can simply compare to trunk, no?\n",
            "date": "2011-04-14T13:35:22.872+0000",
            "id": 16
        }
    ],
    "component": "core/index",
    "description": "With separate DocumentsWriterPerThreads (DWPT) it can currently happen that the delete part of an updateDocument() is flushed and committed separately from the corresponding new document.\n\nWe need to make sure that updateDocument() is always an atomic operation from a IW.commit() and IW.getReader() perspective.  See LUCENE-2324 for more details.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2956",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Support updateDocument() with DWPTs",
    "systemSpecification": true,
    "version": "Realtime Branch"
}