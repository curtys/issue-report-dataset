{
    "comments": [
        {
            "author": "Simon Willnauer",
            "body": "here is a patch against 3.x - turns out that the standard query parser doesn't group expanded terms internally while our core parser does. I added a testcase for my particular case and fixed the grouping if a term gets expanded",
            "date": "2011-10-29T21:32:53.811+0000",
            "id": 0
        },
        {
            "author": "Simon Willnauer",
            "body": "committed to trunk in r1195275\nbackported to 3.x in r1195276",
            "date": "2011-10-30T23:21:14.225+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Bulk close after release of 3.5",
            "date": "2011-11-27T12:29:27.152+0000",
            "id": 2
        }
    ],
    "component": "modules/queryparser",
    "description": "The standard query parser uses the default query operator for query clauses that are created from tokenization in the query parser instead of the actual operator for the source term.\n\nhere is an example:\n{code}\nStandardQueryParser parser = new StandardQueryParser(new StandardAnalyzer(Version.LUCENE_34));\nparser.setDefaultOperator(Operator.OR);\nSystem.out.println(((BooleanQuery)parser.parse(\"_deleted:true AND title:\u6771\u4eac\", \"f\")));\n{code}\n\nthis should yield:\n+_deleted:true +(title:\u6771 title:\u4eac)\n\nas our former core query parser does but actually yields:\n+_deleted:true title:\u6771 title:\u4eac\n\nseems like a bug to me, looking at the tests seems we don't test for this kind of queries in the standard query parser tests too.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3542",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "StandardQueryParser ignores AND operator for tokenized query terms",
    "systemSpecification": true,
    "version": "3.4, 4.0-ALPHA"
}