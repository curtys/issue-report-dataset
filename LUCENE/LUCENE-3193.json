{
    "comments": [
        {
            "author": "Shai Erera",
            "body": "Patch introduces:\n\n* TwoPhaseCommit interface + test\n* TPCTool (inner to TPC interface) for running a 2-phase commit algorithm\n* TPCWrapper, for running TPCTool w/ commitData\n* Modify IW to impl TPC\n* Add CHANGES entry (under the 3.x section).\n\nTPCWrapper is just a convenience class for passing a different commitData along w/ every TPC. If you have a better name, I'm open to suggestions (maybe CommitDataWrapper?)\n\nCore tests pass.",
            "date": "2011-06-11T12:54:48.270+0000",
            "id": 0
        },
        {
            "author": "Shai Erera",
            "body": "This is basically ready for commit. I'd appreciate a review of the definitions plus TPCTool impl. I will give it a couple of days before I commit. We can always fix issues later.",
            "date": "2011-06-12T03:46:23.179+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks great!  It's a nice addition.\n\nTwoPhaseCommitTool.execute should be @experimental?\n\nThis seems similar to LUCENE-3131 (XA transactions support).  I don't\nreally understand what it takes to be \"XA capable\", but I assume it\nmeans building the right wrapper around IW's existing transactional\nAPIs (like this).\n\nShouldn't TwoPhaseCommit be @lucene.experimental instead (not\ninternal)?  Ie, the idea is an app can also impl this interface, and\nthen use execute to commit all resources.\n\nJavadocs should maybe state that on rollback the writer will have been\nclosed?  (rollback closes the writer)\n\nOne possible issue: if exceptions are hit in .commit(), which ought to\nbe rare since prepareCommit does all the \"hard work\", we go and\n.rollback() all resources, even those that had successfully .commit'd,\nright?  But, in general, this is tricky for a resource to handle\n(rolling back when commit had succeeded).  EG, IndexWriter won't do\nthis correctly -- rollback will be a no-op in this case since it rolls\nback to the last successful commit.\n\nThis is actually correctable, but it requires some more work to\nproperly wrap the IndexWriter.\n",
            "date": "2011-06-12T10:27:18.007+0000",
            "id": 2
        },
        {
            "author": "Shai Erera",
            "body": "bq. TwoPhaseCommitTool.execute should be @experimental?\n\nSince it is an inner class of TPC, and it is marked @experimental, I thought it is implied. But I will add it there too for clarity.\n\nbq. Shouldn't TwoPhaseCommit be @lucene.experimental instead\n\nYou're right. I'll fix !\n\nbq. Javadocs should maybe state that on rollback the writer will have been closed?\n\nThis is mentioned in IndexWriter.rollback(). I don't think we should mention IW in TPC javadocs?\n\nbq. One possible issue: if exceptions are hit in .commit()\n\nYou're right. And TPCTool.execute has a *NOTE* about it, saying that for some TPC implementations, calling rollback() after commit() was successfully executed may be a no-op. I put it on execute because I think it is more related to the tool than TPC.rollback() definition.",
            "date": "2011-06-12T11:14:37.290+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "bq. This is mentioned in IndexWriter.rollback(). I don't think we should mention IW in TPC javadocs?\n\nAhh, you're right.  Good!\n\nbq. And TPCTool.execute has a NOTE about it, saying that for some TPC implementations, calling rollback() after commit() was successfully executed may be a no-op.\n\nAhh, I missed that -- super.\n\nBut: perhaps a different exception should be thrown if there is a problem in the commit() loop vs the prepareCommit() loop?  This way caller can differentiate this case?",
            "date": "2011-06-12T12:01:25.718+0000",
            "id": 4
        },
        {
            "author": "Shai Erera",
            "body": "{quote}\nBut: perhaps a different exception should be thrown if there is a problem in the commit() loop vs the prepareCommit() loop? This way caller can differentiate this case?\n{quote}\n\nGood idea. So instead of throwing IOE, we'll throw (Prepare)CommitFailException which takes a Throwable 'cause' and TPC 'obj'. We can make the two sub-class IOE for convenience (in case someone does not want to differentiate the two, it's easier to handle both cases in one catch block).\n\nI'll add these and upload a new patch by tomorrow.",
            "date": "2011-06-12T17:09:39.263+0000",
            "id": 5
        },
        {
            "author": "Shai Erera",
            "body": "Patch addresses Mike's comments (thanks !). Additionally, I extracted TPCTool into its own class, which now encapsulates the new exceptions + wrapper. Marked it @experimental too.\n\nI think this is ready for commit.",
            "date": "2011-06-13T03:48:23.966+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Looks great Shai!",
            "date": "2011-06-13T15:47:11.573+0000",
            "id": 7
        },
        {
            "author": "Shai Erera",
            "body": "Committed revision 1135204 (trunk).\nCommitted revision 1135215 (3x).",
            "date": "2011-06-13T18:38:34.798+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "bulk close for 3.3",
            "date": "2011-07-02T02:40:16.817+0000",
            "id": 9
        }
    ],
    "component": "core/index",
    "description": "I would like to propose a TwoPhaseCommit interface which declares the methods necessary to implement a 2-phase commit algorithm:\n* prepareCommit()\n* commit()\n* rollback()\n\nThe prepare/commit ones have variants that take a (Map<String,String> commitData) following the ones we have in IndexWriter.\n\nIn addition, a TwoPhaseCommitTool which implements a 2-phase commit amongst several TPCs.\n\nHaving IndexWriter implement that interface will allow running the 2-phase commit algorithm on multiple IWs or IW + any other object that implements the interface.\n\nWe should mark the interface @lucene.internal so as to not block ourselves in the future. This is pretty advanced stuff anyway.\n\nWill post a patch soon",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3193",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "TwoPhaseCommit interface",
    "systemSpecification": true,
    "version": ""
}