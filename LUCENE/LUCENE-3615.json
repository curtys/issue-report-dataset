{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "we probably need to make sure the ram we give to junit in common-build.xml is parameterized too ( i think we hardcode 512MB )\n\nat least so you could say ant test -Dtests.ram=8GB -Drunreallyslowtests or whatever",
            "date": "2011-12-02T18:22:53.263+0000",
            "id": 0
        },
        {
            "author": "Grant Ingersoll",
            "body": "Here's a first go at this.  Added @Weekly and @Slow.  Added the corresponding properties to common-build.xml.  Added ability to control test heapsize to common-build.  Marked Test2BTerms as @Weekly and @Slow.  Also makred it to not use poor codecs.  Refactored the test runner a bit to share common code when removing annotated tests.\n\nStill testing whether this works, but thought I would put it up for feedback from those who have big machines.",
            "date": "2011-12-02T20:03:15.634+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "patch looks good to me.\n\nonly one question about the patch, should Test2BTerms be both weekly and slow? \nIsn't it enough to just be slow? (then its only run if you ask for it).\n\nSeparately I think weekly is useful and we can configure hudson to set this on sundays or something.\n\nthe only other change i noticed was just purely cosmetic :)\n\n{noformat}\n// please don't reorganize these into a wildcard!\n-import static org.apache.lucene.util.LuceneTestCase.TEST_ITER;\n-import static org.apache.lucene.util.LuceneTestCase.TEST_ITER_MIN;\n-import static org.apache.lucene.util.LuceneTestCase.TEST_METHOD;\n-import static org.apache.lucene.util.LuceneTestCase.TEST_SEED;\n-import static org.apache.lucene.util.LuceneTestCase.TEST_NIGHTLY;\n-import static org.apache.lucene.util.LuceneTestCase.VERBOSE;\n+import static org.apache.lucene.util.LuceneTestCase.*;\n{noformat}",
            "date": "2011-12-02T23:53:32.175+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "+1, patch looks good!",
            "date": "2011-12-03T00:03:16.473+0000",
            "id": 3
        },
        {
            "author": "Hoss Man",
            "body": "This reminds me of something i kept wanting to talk to Dawid about after his random testing talk at eurocon but didn't get a chance and then promptly forgot about.\n\nrather then having \"@Weekly\" or \"@Slow\" (or even \"@Nightly\") annotations, we should just use an \"@Weight(Integer)\" annotation indicating how \"heavy\" a test is (tests w/o an @Weight annotation would be treated as if they had an \"@Weight(1)\" annotation).  The options for running tests would then let you specify the min/max weight for the tests you want to run, and instead of a \"boolean isNightly()\" there could be an \"int maxTestWeight()\" method that would factor into methods like \"rarely()\" and \"usually()\"\n\nSo most tests would have no annotation, tests that currently use @Nightly would get @Weight(10) (or 5, or 100, or whatever) and tests like 2BTerms might get @Weight(10000).\n\nwhile the default \"ant test\" might use {{-Dtest.weight.min=1 -Dtest.weight.max=10}} so developers and the jenkins post-commit build would run \"most\" tests, the \"test only\" jenkins build might be run with {{-Dtest.weight.min=1 -Dtest.weight.max=1}} to only run the really fast test in a rapid fire, and a nightly jenkins run could use {{-Dtest.weight.min=1 -Dtest.weight.max=100}} and a weekly (or monthly, or whatever) run might use {{-Dtest.weight.min=100 -Dtest.weight.max=100000}} (ie: skip the quick tests and just run the heavy shit)",
            "date": "2011-12-03T00:07:43.080+0000",
            "id": 4
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nrather then having \"@Weekly\" or \"@Slow\" (or even \"@Nightly\") annotations, we should just use an \"@Weight(Integer)\" annotation indicating how \"heavy\" a test is\n{quote}\n\nBut I'm not sure I agree with this. Most tests have completely different runtime based on what configurations they get. Sometimes, rarely, we apply totally crazy parameters that make them go \"nuts\". Because of this we amortize the cost of checking expensive corner cases (like termIndexInterval=1, horrible params that cause a lot of merging, etc) across the different tests. I think this is good, it really finds corner case bugs. So if we had this weight annotation, i have no clue what we would assign it to anything.\n\nBecause you take a test that does a lot of skipping/conjunctions, and if it gets memorycodec it might be take a terribly long time (since memorycodec doesn't support skipping), but otherwise it doesnt really care about termsindexinterval. On the other hand you take a test that is torturing the terms dictionary, and it doesnt care if you give it memorycodec or a shitty skipinterval, but you give it a crazy termsindexinterval and it spends a lot of time next'ing thru terms, etc.\n\nBecause of this, all of the tests behave in totally different ways that you cant really assign a weight to, e.g. take a look at the history of test times \nfor this test:\n\nhttps://builds.apache.org/view/G-L/view/Lucene/job/Lucene-Solr-tests-only-trunk/11631/testReport/org.apache.lucene.search/TestRegexpRandom2/history/",
            "date": "2011-12-03T02:27:56.793+0000",
            "id": 5
        },
        {
            "author": "Grant Ingersoll",
            "body": "I think in theory the weight thing sounds good, but in practice I think it would be hard to figure out the proper weights.",
            "date": "2011-12-03T17:53:18.659+0000",
            "id": 6
        },
        {
            "author": "Grant Ingersoll",
            "body": "bq. // please don't reorganize these into a wildcard!\n\nHmm, I thought I disabled that in IntelliJ.",
            "date": "2011-12-03T17:54:23.894+0000",
            "id": 7
        },
        {
            "author": "Grant Ingersoll",
            "body": "Fixes as suggested by Robert.  I'll likely commit at some point later today or tomorrow unless Hoss wants to discuss the weight thing more, in which case I'm happy to hold off.",
            "date": "2011-12-03T18:03:21.157+0000",
            "id": 8
        },
        {
            "author": "Grant Ingersoll",
            "body": "minor import fix, ready to go.",
            "date": "2011-12-04T00:19:50.715+0000",
            "id": 9
        },
        {
            "author": "Grant Ingersoll",
            "body": "Ran this last night:\n{quote}\nTestsuite: org.apache.lucene.index.Test2BTerms\n    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 12,475.641 sec\n{quote}\n\nSo, roughly 3.5 hours.  Not at all unreasonable to run on a weekly basis.",
            "date": "2011-12-04T13:30:55.757+0000",
            "id": 10
        },
        {
            "author": "Hoss Man",
            "body": "bq. Because of this, all of the tests behave in totally different ways that you cant really assign a weight to, e.g. take a look at the history of test times for this test:\n\n\"Weight\" may be the wrong term... i wasn't suggesting that it would be any sort of quantitative, comparable metric of how long the test would take -- my point was just that having a numeric annotation where bigger means \"this test does more stuff\" would allow people to run more or less tests as they see fit with simple configuration, regardless of whether their idea of a test to be run \"Nightly\" jives directly with the @Nightly annotation (maybe i want to only run @Nightly tests on weekends?)\n\nAs things stand, we have regular tests, and then we have @Nightly tests, and then we have @Slow tests ... hypothetically: if we add a new test later that's not nearly as bad as Test2BTerms, so we still want it to run as part of a \"full test run\" but is bad enough that we don't want to jenkins to do it was part of our  \"@Nightly\" run, we  have to consider some intermediate \"@SortOfSlow\" attribute ... hence my suggestion that instead of adding more special case annotations (and more build params for deciding when to exececute what), we just use an arbitrary  range of numbers and two simple \"min\" and \"max\" build params to pick the tests to run.\n\n...anyway ... it was just an idea.\n\n\n\n",
            "date": "2011-12-05T19:57:57.603+0000",
            "id": 11
        }
    ],
    "component": "",
    "description": "Currently, Test2BTerms has an @Ignore annotation which means that the only way to run it as a test is to edit the file.\n\nThere are a couple of options to fix this:\n# Add a main() so it can be invoked via the command line outside of the test framework\n# Add some new annotations that mark it as slow or weekly or something like that and have the test target ignore @slow (or whatever) by default, but can also turn it on.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3615",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Make it easier to run Test2BTerms",
    "systemSpecification": true,
    "version": ""
}