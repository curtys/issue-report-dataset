{
    "comments": [
        {
            "author": "Nicolas Lalev\u00e9e",
            "body": "here is my workaround until it is fixed into the Lucene API :\n{code:java}\npackage org.apache.lucene.analysis.standard;\n\npublic class TokenTypeAccessor {\n\n    public static final String APOSTROPHE_TYPE = StandardTokenizerImpl.TOKEN_TYPES[StandardTokenizerImpl.APOSTROPHE];\n\n    public static final String ACRONYM_TYPE = StandardTokenizerImpl.TOKEN_TYPES[StandardTokenizerImpl.ACRONYM];\n\n    public static final String HOST_TYPE = StandardTokenizerImpl.TOKEN_TYPES[StandardTokenizerImpl.HOST];\n\n}\n{code}\n",
            "date": "2008-01-25T10:17:47.980+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Ugh, I missed that we lost this when we switched to JFlex (LUCENE-966).  I'll take this.",
            "date": "2008-01-25T12:36:27.250+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch fixing this.  I just added a new Constants.java that has static constants defined, and added a compile-time testcase to assert that these constants remain publicly accessible.\n\nI will commit in a day or two.",
            "date": "2008-01-25T12:40:08.790+0000",
            "id": 2
        },
        {
            "author": "Grant Ingersoll",
            "body": "Why not just add them on to the StandardTokenizer class?  \n\nFor the WikipediaTokenizer (roughly based on the StandardTokenizer), I just added them to the WikipediaTokenizer wrapper class.  However, I did leave the StandardTokenizer ones as they were.  So, we should probably do the appropriate thing there, too.\n\n",
            "date": "2008-01-25T13:21:43.870+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "Good!  I'll take that approach, and update WikipediaTokenizer too.",
            "date": "2008-01-25T14:45:20.322+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "New patch attached, that also exposes the token types for WikipediaTokenizer.  I'll commit in a day or two.",
            "date": "2008-01-25T19:16:12.246+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "I just committed this.  Thanks for opening this Nicolas!",
            "date": "2008-01-29T10:52:26.970+0000",
            "id": 6
        },
        {
            "author": "Michael McCandless",
            "body": "Backported fix to 2.3.2.",
            "date": "2008-04-09T09:29:35.747+0000",
            "id": 7
        },
        {
            "author": "Antony Bowesman",
            "body": "The original tokenImage String array from 2.2 is still not available in this patch, they are still in the Impl.  These are the values returned from Token.type(), so should they not be visible as well as the static ints?\n",
            "date": "2008-04-15T07:33:25.411+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "You're right.  I'll put that back as well, and port to 2.3.2.",
            "date": "2008-04-15T08:17:35.238+0000",
            "id": 9
        }
    ],
    "component": "modules/analysis",
    "description": "The StandardTokenizerImpl not being public, these token types are not accessible :\n\n{code:java}\npublic static final int ALPHANUM          = 0;\npublic static final int APOSTROPHE        = 1;\npublic static final int ACRONYM           = 2;\npublic static final int COMPANY           = 3;\npublic static final int EMAIL             = 4;\npublic static final int HOST              = 5;\npublic static final int NUM               = 6;\npublic static final int CJ                = 7;\n/**\n * @deprecated this solves a bug where HOSTs that end with '.' are identified\n *             as ACRONYMs. It is deprecated and will be removed in the next\n *             release.\n */\npublic static final int ACRONYM_DEP       = 8;\n\npublic static final String [] TOKEN_TYPES = new String [] {\n    \"<ALPHANUM>\",\n    \"<APOSTROPHE>\",\n    \"<ACRONYM>\",\n    \"<COMPANY>\",\n    \"<EMAIL>\",\n    \"<HOST>\",\n    \"<NUM>\",\n    \"<CJ>\",\n    \"<ACRONYM_DEP>\"\n};\n{code}\n\nSo no custom TokenFilter can be based of the token type. Actually even the StandardFilter cannot be writen outside the org.apache.lucene.analysis.standard package.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-1150",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "The token types of the standard tokenizer is not accessible",
    "systemSpecification": true,
    "version": "2.3"
}