{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Patch.",
            "date": "2011-10-04T18:22:41.835+0000",
            "id": 0
        },
        {
            "author": "Shai Erera",
            "body": "What a cool object, Mike ! And the javadocs are very good too.\n\n* Perhaps instead of \"recordTimeSec = System.nanoTime()/1000000000.0;\" you can use TimeUnit.NANOS.toSeconds? Just for clarity, and get rid of this monstrous number :).\n\n* Typo: \"such that if the use performs\": 'use' --> 'user'\n\n* About this code:\n{code}\n+    if (tracker == null) {\n+      tracker = new SearcherTracker(searcher);\n+      if (searchers.putIfAbsent(version, tracker) != null) {\n+        // Another thread beat us -- must decRef to undo\n+        // incRef done by SearcherTracker ctor:\n+        searcher.getIndexReader().decRef();\n+      }\n{code}\nWould it be better if SearcherTracker has a close() method and we call it instead of decRef()-ing on our own? Seems cleaner to me, and I always like to see the code that incRef/new closer to decRef/close. And if tomorrow SearcherTracker needs to clear other things too, we're already covered.\n\n* About this \"// nocommit -- maybe make it 'public' that you just decRef?\" --> do you mean whether we should jdoc that that's all we're doing? If so, why commit to just that? I don't think it contributes to the user ...\n\n* I have a problem with the Pruner interface. It has a single method prune which takes an IndexSearcher and ageSec (BTW, why is it double and not long?). And there's PruneByAge impl. But, what other impls could there be for this interface, if not by age?\n** On the other hand, I can certainly see someone, perhaps w/ NRT, not wanting to keep too many searchers around, and instead of committing to an age, he'll want to use a hard number (like, the newest 5 searchers) - that interface makes it impossible to impl.\n\nIf you think however that pruning by age, is the only scenario that makes sense, then I suggest removing the interface and having just the impl. Otherwise, perhaps a different interface should be created, one that receives a list of searchers, with their age, and returns a list of searchers that should be released? Just an idea.\n\nHmm, now that I read prune(Pruner) jdoc, I can see how someone could impl \"newest 5 searchers\" by just counting up to 5 in its doPrune() calls, because prune(Pruner) guarantees that the searchers are passed newest to oldest. But still I wonder if the interface is not too limited.\n\nLooks very good !",
            "date": "2011-10-04T19:33:07.359+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Perhaps instead of \"recordTimeSec = System.nanoTime()/1000000000.0;\" you can use TimeUnit.NANOS.toSeconds? Just for clarity, and get rid of this monstrous number .\n\nI was wanting to have the seconds be a double, but, I agree that's\noverkill; I think a \"typical\" pruning time should be maybe 10 minutes\nand so having \"int seconds\" is OK.  I'll change it and use\nTimeUnit.NANOSECONDS.toSeconds.\n\nbq. Typo: \"such that if the use performs\": 'use' --> 'user'\n\nThanks I'll fix.\n\nbq. Would it be better if SearcherTracker has a close() method and we call it instead of decRef()-ing on our own?\n\nI agree -- I'll fix.\n\nbq. About this \"// nocommit \u2013 maybe make it 'public' that you just decRef?\" --> do you mean whether we should jdoc that that's all we're doing? If so, why commit to just that? I don't think it contributes to the user ...\n\nWell... the release is sort of \"spooky\" in that you can freely call it after close, which is why I thought about making its impl public; but I agree, let's leave it private and just keep the NOTE that it's fine to call after close.\n\n{quote}\nI have a problem with the Pruner interface. It has a single method prune which takes an IndexSearcher and ageSec (BTW, why is it double and not long?). And there's PruneByAge impl. But, what other impls could there be for this interface, if not by age?\nOn the other hand, I can certainly see someone, perhaps w/ NRT, not wanting to keep too many searchers around, and instead of committing to an age, he'll want to use a hard number (like, the newest 5 searchers) - that interface makes it impossible to impl.\nIf you think however that pruning by age, is the only scenario that makes sense, then I suggest removing the interface and having just the impl. Otherwise, perhaps a different interface should be created, one that receives a list of searchers, with their age, and returns a list of searchers that should be released? Just an idea.\n\nHmm, now that I read prune(Pruner) jdoc, I can see how someone could impl \"newest 5 searchers\" by just counting up to 5 in its doPrune() calls, because prune(Pruner) guarantees that the searchers are passed newest to oldest. But still I wonder if the interface is not too limited.\n{quote}\n\nRight, my idea was to make it really easy to prune-by-age, since\nthat's the common case, but also make it possible to do more\nexpert policies.\n\nI think prune-by-count is possible, but maybe more interesting would\nbe prune-by-total-segments-size, ie, if a large merge commits, this\nmetric would cut back on the number of searchers so that the net RAM\ntied up is lower.  Not sure this is really needed in practice as large\nmerges don't complete often and it's unlikely you'd hit more than one in\nyour time window...\n\nThanks Shai!\n",
            "date": "2011-10-04T21:14:33.513+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Patch w/ Shai's suggestions, and tweaked some jdocs.",
            "date": "2011-10-04T21:29:44.260+0000",
            "id": 3
        },
        {
            "author": "Shai Erera",
            "body": "Looks good. I noticed you marked close() with @Override. Are we on Java 6 in 3.x?",
            "date": "2011-10-05T04:17:48.466+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "bq. I noticed you marked close() with @Override. Are we on Java 6 in 3.x?\n\nSigh, no we are not; in 3.x I'll have to comment that out.",
            "date": "2011-10-05T10:38:13.356+0000",
            "id": 5
        },
        {
            "author": "Jason Rutherglen",
            "body": "bq. Looks good. I noticed you marked close() with @Override. Are we on Java 6 in 3.x?\n\n@Override is all over the place in Solr!?",
            "date": "2011-10-05T13:34:11.501+0000",
            "id": 6
        },
        {
            "author": "Uwe Schindler",
            "body": "Jason: Java 5 does not allow @Override on interfaces!",
            "date": "2011-10-05T13:40:32.533+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "Mike: Why do we need the duplicate of IOUtils in SearcherLifetimeManager.close()? You can also use IOUtils.closeSafely(Collection)?",
            "date": "2011-10-05T13:44:09.566+0000",
            "id": 8
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Uwe, you're right -- new patch, to just use IOUtils.  I also make an effort to catch mis-use (record called while close is running).",
            "date": "2011-10-05T17:02:07.622+0000",
            "id": 9
        },
        {
            "author": "Uwe Schindler",
            "body": "Bulk close after release of 3.5",
            "date": "2011-11-27T12:29:32.921+0000",
            "id": 10
        }
    ],
    "component": "core/search",
    "description": "The idea is similar to SOLR-2809 (adding searcher leases to Solr).\n\nThis utility class sits above whatever your source is for \"the\ncurrent\" searcher (eg NRTManager, SearcherManager, etc.), and records\n(holds a reference to) each searcher in recent history.\n\nThe idea is to ensure that when a user does a follow-on action (clicks\nnext page, drills down/up), or when two or more searcher invocations\nwithin a single user search need to happen against the same searcher\n(eg in distributed search), you can retrieve the same searcher you\nused \"last time\".\n\nI think with the new searchAfter API (LUCENE-2215), doing follow-on\nsearches on the same searcher is more important, since the \"bottom\"\n(score/docID) held for that API can easily shift when a new searcher\nis opened.\n\nWhen you do a \"new\" search, you record the searcher you used with the\nmanager, and it returns to you a long token (currently just the\nIR.getVersion()), which you can later use to retrieve the same\nsearcher.\n\nSeparately you must periodically call prune(), to prune the old\nsearchers, ideally from the same thread / at the same time that\nyou open a new searcher.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3486",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Add SearcherLifetimeManager, so you can retrieve the same searcher you previously used",
    "systemSpecification": true,
    "version": ""
}