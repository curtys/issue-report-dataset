{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Attached patch.",
            "date": "2009-11-10T19:56:51.685+0000",
            "id": 0
        },
        {
            "author": "Jason Rutherglen",
            "body": "Very nice Mike, I'll try this out with trunk and LUCENE-1313, compare, and report using the python script.",
            "date": "2009-11-11T23:38:27.634+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Patch attached.  I think it's ready to commit.\n\nI also have a Python script that tests NRT performance, sequencing through combinations of reopen rate X indexing rate; I'll open a new issue for that.",
            "date": "2009-11-13T13:26:19.720+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Woops, last patch was missing added files -- this one should fix it.",
            "date": "2009-11-13T13:29:40.265+0000",
            "id": 3
        }
    ],
    "component": "modules/benchmark",
    "description": "It's not easy to test NRT performance right now w/ contrib/benchmark.\nI've made some initial fixes to improve this:\n\n  * Added new '&', that can follow any task within a serial sequence,\n    to \"background\" the task (just like a shell).  The test runs in\n    the BG, and then at the end of all serial tasks, any still running\n    BG tasks are stopped & joined.\n\n  * Added WaitTask that simply waits; useful for controlling how long\n    the BG'd tasks get to run.\n\n  * Added RollbackIndex task, which is real handy for using a given\n    index for an NRT test, doing a bunch of updates, then reverting it\n    all so your next run uses the same starting index\n\n  * Fixed the existing NearRealTimeReaderTask to simply periodically\n    open the new reader (previously it was also running a fixed\n    search), and removed its own threading (since & can do that\n    now). It periodically wakes up, opens the new reader, and swaps it\n    into the PerfRunData, at the schedule you specify.  I switched all\n    usage of PerfRunData's get/setIndexReader APIs to use ref\n    counting.\n\nWith these changes you can now make some very simple but powerful\nalgs, eg:\n\n{code}\nOpenIndex\n{\n  NearRealtimeReader(0.5) &\n  # Warm\n  Search\n  { \"Index1\" AddDoc > : * : 100/sec &\n  [ { \"Search\" Search > : * ] : 4 &\n  Wait(30.0)\n}\nCloseReader\nRollbackIndex\nRepSumByName\n{code}\n\nThis alg first opens the IndexWriter, then spawns the BG thread to\nreopen the NRT reader twice per second, does one warming Search (in\nthe FG), spans a new thread to index documents at the rate of 100 per\nsecond, then spawns 4 search threads that do as many searches as they\ncan.  We then wait for 30 seconds, then stop all the threads, revert\nthe index, and report.\n\nThe patch is a work in progress -- it generally works, but there're a\nfew nocommits, and, we may want to improve reporting (though I think\nthat's a separate issue).\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2050",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Improve contrib/benchmark for testing near-real-time search performance",
    "systemSpecification": true,
    "version": ""
}