{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "Patch.\n\nThe patch add NRTCachingDir in core, but if/when we commit this I\nthink we should put it in contrib/module instead.  I think it's\nworking correctly -- commit works fine (it flushes all cached files to\nthe real dir on sync), but it needs a test case and I'm not going to\nhave time in the near future to do that so I wanted to open this issue\nto get it out there....\n",
            "date": "2011-05-12T22:16:15.571+0000",
            "id": 0
        },
        {
            "author": "Uwe Schindler",
            "body": "I don't completely understand how this works. Is the getMergeScheduler() method intended to be used to set the MergeScheduler on the IndexWriter this directory is opened for? Why only support CMS?",
            "date": "2011-05-12T22:30:01.191+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Sorry false alarm, haven't seen the JavaDocs (it's a patch, java code is not highlighted...). Still not understanding how it works, maybe it's too late.",
            "date": "2011-05-12T22:32:13.658+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "Yeah you should ask this dir for the merge scheduler... we could also fix it to delegate to any other merge scheduler (eg that you pass in), I think.\n\nBasically the dir just needs some way to \"know\" when a merge kicks off, so it can associate the thread doing that merge w/ the size of the merge.\n\nMaybe there's a cleaner way :)",
            "date": "2011-05-12T22:50:33.225+0000",
            "id": 3
        },
        {
            "author": "Chris Male",
            "body": "Having not looked into the patch, what about some sort of event listener idea? The Directory can register that its interested in listening to merge events and the event can be fired when a merge is started.  I can see alot of extensions maybe wanting to track when merges happen.",
            "date": "2011-05-13T03:24:55.296+0000",
            "id": 4
        },
        {
            "author": "Chris Male",
            "body": "Patch which roughly does what I suggested.  Just a proof-of-concept since everything is currently tied to CMS (when it should work with any MS).\n\nIntroduces a MergeEvent and MergeListener.  MergeEvents are fired by CMS before and after merge is done.  NRTCachingDirectory implements MergeListener and does it stuff on firing of the Events.\n\nThere are dangers with calling listeners in a finally block but as I say, just a POC.",
            "date": "2011-05-13T04:32:07.330+0000",
            "id": 5
        },
        {
            "author": "Uwe Schindler",
            "body": "Could we not simply use IOContext? When IOContext is used on opening IndexOutput, we know some \"metadata\" and can act accordingly.",
            "date": "2011-05-13T04:52:21.087+0000",
            "id": 6
        },
        {
            "author": "Earwin Burrfoot",
            "body": "*highfive Uwe* was going to suggest the very same thing.\nIOContext can include expected size. NRTCD will do its magic, other dirs may prealloc.",
            "date": "2011-05-13T06:33:43.510+0000",
            "id": 7
        },
        {
            "author": "Chris Male",
            "body": "bq. IOContext can include expected size.\n\nWhile I appreciate the idea, isn't that a little inflexible? Okay so this Directory needs to know size, but another implementation might need to know other details (at this stage I don't know what, just thinking long term).  So then we expand IOContext again?\n\nFor a Directory, using IOContext maybe makes sense, but wouldn't it be useful to be able to announce that a merge is going to happen, and let whatevers interested, in this case a Directory, do what it needs to do?",
            "date": "2011-05-13T06:58:53.748+0000",
            "id": 8
        },
        {
            "author": "Simon Willnauer",
            "body": "First, nice idea mike! The way you are collection merge info is very very scary man :) so I tend to agree that we could make good use of IOContext here but at the same time I think the merge event system chris is proposing is very much needed IMO. Stuff like FlushPolicy could take information about concurrent merges and hold of flushes for a little while if memory allows it etc. If we are not using it here I think we should open another issue for that. ",
            "date": "2011-05-13T08:34:46.073+0000",
            "id": 9
        },
        {
            "author": "Earwin Burrfoot",
            "body": "Chris, I don't like the idea of expanding IOContext again and again, but this case seems in line with intended purporse - give Directory implementation hints as to what we're going to do with it.\n\nI don't like events either. They look fragile and binding them to threads is a WTF. With all our pausing/unpausing magic there's no guarantee merge will end on the same thread it started on.\n\nbq. Stuff like FlushPolicy could take information about concurrent merges and hold of flushes for a little while if memory allows it etc.\nCoordinating access to shared resource (IO subsystem) with events is very awkward. Ok, your FlushPolicy receives events from MergePolicy and holds flushes during merge. _Now, when a flush is in progress, should FlushPolicy notify MergePolicy so it can hold its merges?_\nIt goes downhill from there. What if FP and MP fire events simultaneously? :) What should other listeners do?\n\nTry looking at a bigger picture. Merges are not your problem. Neither are flushes. Your problem is that several threads try to take their dump on disk simultaneously (for whatever reason, you don't really care). So what we need is an arbitration mechanism for Directory writes. A mechanism located presumably @ Directory level (eg, we don't need to throttle anything when writing to RAMDir).\n\nOne possible implementation is that we add a constructor parameter to FSDirectory specifying desired level of IO parallelism, and then it keeps track of its IndexOutputs and stalls writes selectively. We can also add 'expectedWriteSize' to IOContext, so the Directory may favor shorter writes over bigger ones. Instead of 'expectedWriteSize' we can use 'priority'.",
            "date": "2011-05-13T09:59:56.294+0000",
            "id": 10
        },
        {
            "author": "Chris Male",
            "body": "bq. I don't like events either. They look fragile and binding them to threads is a WTF. With all our pausing/unpausing magic there's no guarantee merge will end on the same thread it started on.\n\nYou're absolutely right that tying them to threads is not a good idea, but I couldn't disagree more that this is an issue with an Event model.  Yes we should be wary of what information we make available in Events (I only added Threads to the Events in my patch because I was showing a simple alternative to Mike's initial impl).  But to say Events are fragile and therefore we shouldn't pursue a listener pattern seems a big leap.  Many large applications use event listeners and I don't think they're wrong.\n\nbq. It goes downhill from there. What if FP and MP fire events simultaneously?  What should other listeners do?\n\nGood point.  Again, those are issues we need to resolve (one way applications tend to address this is event queues).\n\nbq. Try looking at a bigger picture. Merges are not your problem. Neither are flushes.\n\nYou're right, neither merges nor flushes are the problem.  We have a series of components in Lucene; Directories, IndexWriter, MergeScheduler etc, and we have some crosscutting concerns such as merges themselves.  We should strive to decouple these components where possible and think big picture.\n\nI agree with your suggestions for how we can solve the problem here now for NRTCachingDirectory, but I think we can do better for the longer term.\n\n",
            "date": "2011-05-13T10:30:44.687+0000",
            "id": 11
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. but I couldn't disagree more that this is an issue with an Event model\nThere are no issues with event model itself. It's just that this model is badly suitable for this issue's usecase.\nEvent listeners are good. Using them to emulate what is essentially a mutex - is ugly and fragile as hell.\n\nbq. We have a series of components in Lucene; Directories, IndexWriter, MergeScheduler etc, and we have some crosscutting concerns such as merges themselves.\nMy point is that for many concerns they shouldn't necessarily be crosscutting.\nEg - Directory can support IO priorities/throttling, so it doesn't have to know about merges or flushes.\nMany OSes have have special APIs that allow IO prioritization, do they know about merges, or Lucene at all? No.",
            "date": "2011-05-13T12:34:40.180+0000",
            "id": 12
        },
        {
            "author": "Michael McCandless",
            "body": "I agree it's scary/sneaky how this Dir impl associates threads w/\nmerge sizes... using IOCtx or events or something else would be\nbetter.\n\nIOCtx would be a nice fit for this... because then we take all thread\nassociation out of the picture.  The IOCtx should reference the\nOneMerge (if in fact this file is being opened because of a merge)?\nThen this impl can look at that to make its decision, and there's no\nmore coupling of this dir iml to the merge scheduler.\n\nShould we open a separate issue for the events listener?  Actually\nthere may already be an issue open...?\n\nbq. With all our pausing/unpausing magic there's no guarantee merge will end on the same thread it started on.\n\nThe hard thread scheduling (forced pausing) that CMS does won't change\nthe thread that runs the merge.  That thread will forever run that\nmerge (perhaps sometimes being paused) until that merge is done.  At\nleast, this is how it's impl'd today...\n",
            "date": "2011-05-13T12:35:56.519+0000",
            "id": 13
        },
        {
            "author": "Michael McCandless",
            "body": "bq. a WTF\n\nI've never seen this (WTF) used as a noun but I like it!!",
            "date": "2011-05-13T12:39:24.855+0000",
            "id": 14
        },
        {
            "author": "Earwin Burrfoot",
            "body": "bq. The IOCtx should reference the OneMerge (if in fact this file is being opened because of a merge)?\nIOCtx should have a value 'expectedSize', or 'priority', or something similar.\nThis does not introduce a transitive dependency of Directory from MergePolicy (to please you once more - a true WTF), and this allows to apply the same logic to flushes. Eg - all small flushes/merges go to cache, all big flushes/merges go straight to disk.",
            "date": "2011-05-13T12:47:17.888+0000",
            "id": 15
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nIOCtx should have a value 'expectedSize', or 'priority', or something similar.\nThis does not introduce a transitive dependency of Directory from MergePolicy (to please you once more - a true WTF),\n{quote}\n\nAhh, good point.  So, for this dir impl I want to say \"if net seg size is < X MB, cache it in RAM\", so I guess we could have something like \"expectedSizeOfSegmentMB\" (covers all files that will be flushed for this segment, hmm minus the doc stores) in the IOCtx.",
            "date": "2011-05-13T19:35:57.343+0000",
            "id": 16
        },
        {
            "author": "Robert Muir",
            "body": "just an idea: with issues like this that work (but hackishly) and are self contained, I'm\nnot sure we should block them on some huge refactoring like IOContext if they are actually usable\n\nOf course I had this same opinion on LUCENE-2829, and gave up there, but I like the idea\nof adding things that have a little hackishness (but work) to our 3.x branch, especially\nif they can be experimental or contribs, and then refactoring for elegance in trunk.\n\nI don't think users should have to wait until 4.0 for features because we won't add them until we\ntotally refactor the world... its ok to add them hackishly in 3.x if we are \"fixing\" the larger issues in trunk.\n\nAs far as scariness factor, is is really worse than forcefully unmapping direct byte buffers with sun.* methods in MMapDirectory?!",
            "date": "2011-05-14T12:46:09.984+0000",
            "id": 17
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\njust an idea: with issues like this that work (but hackishly) and are self contained, I'm\nnot sure we should block them on some huge refactoring like IOContext if they are actually usable\n{quote}\n\n+1, progress not perfection.\n\nI'll clean up the patch -- add an example code fragment of how you use it, a test case (aside: it'd be nice if, somehow, we could randomly swap this into our tests... we'd need a newMergeScheduler() method that would tap into this Dir impl if it had been picked, but also, we'd have to get this contrib module on core's classpath...), and a comment saying \"this class does spooking stuff tracking merges and threads\".",
            "date": "2011-05-14T15:05:14.482+0000",
            "id": 18
        },
        {
            "author": "Michael McCandless",
            "body": "New patch.\n\nI reduced the over-synchronized methods (hopefully not too much!), improved jdocs (added an example usage), added CHANGES entry, and added a test case.\n\nBut: the test case currently fails, due to LUCENE-3100.",
            "date": "2011-05-14T21:54:59.486+0000",
            "id": 19
        },
        {
            "author": "Michael McCandless",
            "body": "Sorry last patch was wrong -- this one should be right.",
            "date": "2011-05-14T21:56:39.054+0000",
            "id": 20
        },
        {
            "author": "Simon Willnauer",
            "body": "mike I attached a patch to LUCENE-3100 and tested with the latest patch on this issue. The test randomly fails (after I close the IW in the test!) here is a trace:\n\n{noformat}\n\njunit-sequential:\n    [junit] Testsuite: org.apache.lucene.store.TestNRTCachingDirectory\n    [junit] Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 5.16 sec\n    [junit] \n    [junit] ------------- Standard Error -----------------\n    [junit] NOTE: reproduce with: ant test -Dtestcase=TestNRTCachingDirectory -Dtestmethod=testNRTAndCommit -Dtests.seed=-753565914717395747:-1817581638532977526\n    [junit] NOTE: test params are: codec=RandomCodecProvider: {docid=SimpleText, body=MockFixedIntBlock(blockSize=1993), title=Pulsing(freqCutoff=3), titleTokenized=MockSep, date=SimpleText}, locale=ar_AE, timezone=America/Santa_Isabel\n    [junit] NOTE: all tests run in this JVM:\n    [junit] [TestNRTCachingDirectory]\n    [junit] NOTE: Mac OS X 10.6.7 x86_64/Apple Inc. 1.6.0_24 (64-bit)/cpus=2,threads=1,free=46213552,total=85000192\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testNRTAndCommit(org.apache.lucene.store.TestNRTCachingDirectory):\tFAILED\n    [junit] limit=12 actual=16\n    [junit] junit.framework.AssertionFailedError: limit=12 actual=16\n    [junit] \tat org.apache.lucene.index.RandomIndexWriter.doRandomOptimize(RandomIndexWriter.java:165)\n    [junit] \tat org.apache.lucene.index.RandomIndexWriter.close(RandomIndexWriter.java:199)\n    [junit] \tat org.apache.lucene.store.TestNRTCachingDirectory.testNRTAndCommit(TestNRTCachingDirectory.java:179)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1282)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1211)\n    [junit] \n    [junit] \n    [junit] Test org.apache.lucene.store.TestNRTCachingDirectory FAILED\n{noformat}",
            "date": "2011-05-16T19:52:08.663+0000",
            "id": 21
        },
        {
            "author": "Michael McCandless",
            "body": "New patch, fixes the issue Simon hit (was just a bug in the test -- it was using a silly MergePolicy that ignored partial optimize).\n\nTest now passes w/ the patch from LUCENE-3100.\n\nI think this is ready to commit, after LUCENE-3100 is in.",
            "date": "2011-05-17T09:34:36.756+0000",
            "id": 22
        },
        {
            "author": "Simon Willnauer",
            "body": "Mike I committed LUCENE-3100 you can go ahead :)",
            "date": "2011-05-17T09:59:40.138+0000",
            "id": 23
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Simon; I'll commit soon...",
            "date": "2011-05-17T15:53:45.820+0000",
            "id": 24
        },
        {
            "author": "David Smiley",
            "body": "This looks cool.  Any performance measurements?  Perhaps a forthcoming post on Mike's blog? :-)",
            "date": "2011-05-17T17:04:44.814+0000",
            "id": 25
        },
        {
            "author": "Michael McCandless",
            "body": "Alas I haven't had time to really dig into perf gains here... but I suspect on systems where IO is in contention (due to ongoing cold searching, or merging), and reopen rate is highish, that this should be a decent win since we don't burden the IO system with many tiny files.",
            "date": "2011-05-17T17:37:53.742+0000",
            "id": 26
        },
        {
            "author": "Shai Erera",
            "body": "Mike, this is a great idea ! If there are any chances it will be released in 3.2, I think one of our NRT apps can make good use of it.\n\nQuestion - I see that NRTCD ctor takes a Directory. Is there any reason to pass RAMDir to NRTCD? I assume you use a Directory for any other Dir impls out there that may not sub-class e.g., FSDir, which is ok - so can we at least document that this Dir is not useful if you intend to pass RAMDir to it?\n\nUnless I am wrong and it is useful w/ RAMDir as well. ",
            "date": "2011-05-17T18:05:07.078+0000",
            "id": 27
        },
        {
            "author": "Michael McCandless",
            "body": "I committed it to 3.x as well so this will be in 3.2 :)\n\nI can't think of any reason why you'd want to wrap another RAMDir with NRTCD....?  We can fix the docs to state this.  Can you work out the wording/patch?  Or just go ahead and commit a fix :)",
            "date": "2011-05-17T19:06:50.353+0000",
            "id": 28
        },
        {
            "author": "Yonik Seeley",
            "body": "bq. I can't think of any reason why you'd want to wrap another RAMDir with NRTCD....?\n\nTests?  It's nice to have a test use a RAMDirectory for speed, but still follow the same code path as FSDirectory for debugging + orthogonality.\nAFAIK, most Solr tests use RAMDirectory by default.  There's no benefit to restricting it, right?",
            "date": "2011-05-17T19:12:54.434+0000",
            "id": 29
        },
        {
            "author": "Michael McCandless",
            "body": "That's a great point Yonik -- in fact the TestNRTCachingDirectory already\nrelies on this generic-ness (pulls a newDirectory() from LuceneTestCase).",
            "date": "2011-05-17T19:18:27.138+0000",
            "id": 30
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nTests? It's nice to have a test use a RAMDirectory for speed, but still follow the same code path as FSDirectory for debugging + orthogonality.\n{quote}\n\nFWIW currently the lucene tests use a RAMDirectory 90% of the time (and something else the other 10%).\nWe could adjust this... at the time I set it, it seemed to not slow the tests down that much but\nstill give us a little more coverage.",
            "date": "2011-05-18T13:07:19.238+0000",
            "id": 31
        },
        {
            "author": "Robert Muir",
            "body": "Bulk closing for 3.2",
            "date": "2011-06-03T16:37:11.199+0000",
            "id": 32
        }
    ],
    "component": "core/store",
    "description": "I created this simply Directory impl, whose goal is reduce IO\ncontention in a frequent reopen NRT use case.\n\nThe idea is, when reopening quickly, but not indexing that much\ncontent, you wind up with many small files created with time, that can\npossibly stress the IO system eg if merges, searching are also\nfighting for IO.\n\nSo, NRTCachingDirectory puts these newly created files into a RAMDir,\nand only when they are merged into a too-large segment, does it then\nwrite-through to the real (delegate) directory.\n\nThis lets you spend some RAM to reduce I0.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3092",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "NRTCachingDirectory, to buffer small segments in a RAMDir",
    "systemSpecification": true,
    "version": ""
}