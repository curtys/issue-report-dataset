{
    "comments": [
        {
            "author": "David Mark Nemeskey",
            "body": "Patch v0.1",
            "date": "2011-06-07T12:52:04.000+0000",
            "id": 0
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Here's what the patch does:\n- it introduces the Similarity.Stats class and its subclasses\n- renames computeWeight() to computeStats()\n- fixes methods that call computeStats()\n\nWhat remains to be done:\n- rewrite the javadoc\n- Stats will be used inside other Similarity methods: its availability should be unsured somehow. The current solution in MockBM25Similarity is not satisfactory because there is only one Similarity object at a time.\n- MultiPhraseWeight, PhraseWeight, SpanWeight, TermWeight call computeStats and extract the IDFExplain object. This level of coupling is not desirable, and should be eliminated. All the more so, as not all Similarity subclasses will have an idf\n- It might not even make sense to expose computeStats()?\n\nTo consider:\n- it might be better if Stats were static, because they could inherit fields from each other",
            "date": "2011-06-07T19:23:08.381+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "Hi David, after reviewing the patch, I think we should do this:\n\n* make Similarity.Stats static\n* pass this, instead of Weight, to exactDocScorer() and sloppyDocScorer(). this should fix the MockBM25Sim issue as it wont need to hold a stats since its passed here.\n\n",
            "date": "2011-06-07T23:43:08.746+0000",
            "id": 2
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Made Similarity.Stats static.\n\nHowever, passing Stats to the methods you mentioned would only be possible if Stats already defined every possible statistic, either as public members or getter methods. I don't mind if it becomes like that; Similarity subclasses would not be required to compute all statistics, only the once they need.\n\nAlso, I am thinking of leaving idf out of Stats in favor of df, and doing the computation in the DocScorers. This would make it possible to reuse the same Stats object e.g. for composite Similarities.",
            "date": "2011-06-11T10:12:16.340+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nHowever, passing Stats to the methods you mentioned would only be possible if Stats already defined every possible statistic, either as public members or getter methods. I don't mind if it becomes like that; \n{quote}\n\nI don't think anything needs to be in Stats itself. If i write BM25Similarity, then i make my own BM25Similarity.BM25Stats and put what i need in it. its passed to my docscorer as Stats and I cast to BM25Stats...done.\n\n{quote}\nAlso, I am thinking of leaving idf out of Stats in favor of df, and doing the computation in the DocScorers. This would make it possible to reuse the same Stats object e.g. for composite Similarities.\n{quote}\n\nI would disagree in this case, i think a composite similarity that has N sub-similarities would just return a MultiStats that keeps these in an array, as this composite doesnt care at all whats in them, it just needs to be able to delegate them back to the sub's docscorers later.\n",
            "date": "2011-06-11T11:58:27.114+0000",
            "id": 4
        },
        {
            "author": "David Mark Nemeskey",
            "body": "bq. I would disagree in this case, i think a composite similarity that has N sub-similarities would just return a MultiStats that keeps these in an array, as this composite doesnt care at all whats in them, it just needs to be able to delegate them back to the sub's docscorers later.\n\nI didn't think of that. I really like this idea.\n\nAs for Stats, I see several advantages of a single class:\n- no need for casting. It may be just me, but having to cast everywhere doesn't feel right for me;\n- we show in one place what statistics the ranking algorithms use, the user of the library doesn't need to \"hunt\" for this information;\n- I think there will be Similarities that use the same Stats subclass, e.g. MockLMSimilarity uses TFIDFSimilarity.IDFStats. Or it could define its own Stats that looks exactly the same. Either solution seems a bit strange for me;\n- one less class to write if you want to add a new Similarity (provided you don't need a new statistic, in which case you have to write your own and cast it).",
            "date": "2011-06-11T15:36:32.831+0000",
            "id": 5
        },
        {
            "author": "Robert Muir",
            "body": "Right, but there are some serious disadvantages:\n\n* we don't know what custom stats someone might want to integrate... it could be computed based however they want.\n* we might add newer stats, but keeping it opaque to the sim relieves us of backwards compatibility hassles.\n\nfor this reason i would like it completely opaque... its not like you are gonna have to cast everywhere, only a \nsingle time when creating your docscorer.\n\nI agree with you that for researchers, they want to see all the ordinary IR stats available like terrier or whatever\nWe should just make an EasySimilarity extends Similarity for them, that returns AllStats with all these common ones.\n\nBut I think other people are going to want to extend lucene to their domain so keeping it opaque is best, so they can do this.\n",
            "date": "2011-06-11T16:34:35.062+0000",
            "id": 6
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Ok, let's go with EasySimilarity then.\n\nTODOs (according to the irc chat):\n- move sumOfSquaredWeights() and normalize to Stats, so that Weight doesn't need to know about IDF\n- rename sumOfSquaredWeights()\n- make BooleanWeight & friends independent of the normalization method? (currently BooleanWeight expects the sqrt() in DefaultSimilarityProvider).",
            "date": "2011-06-11T17:38:14.809+0000",
            "id": 7
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nmake BooleanWeight & friends independent of the normalization method?\n{quote}\n\nI don't like how they rely upon the normalization to integrate their boost to the lower level queries... I think we should always keep this 'separate' so a sim can handle the boost how it wants... here's a patch (probably not the ultimate end-all but a step)\n",
            "date": "2011-06-11T18:50:25.866+0000",
            "id": 8
        },
        {
            "author": "David Mark Nemeskey",
            "body": "Almost completely removed idf from the Weights -- it still lingers in explain(). The DocScorer factory methods now need both the Weight and the Stats; that's the best I could do for now.\n\nRobert: if you don't mind, I have included you patch in this one as well.",
            "date": "2011-06-13T13:57:10.244+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nAlmost completely removed idf from the Weights \u2013 it still lingers in explain(). \n{quote}\n\nRight, explain() is a big TODO of a refactoring job, you did the right thing, its not easily solved until we refactor it big-time so that any arbitrary Similarity can explain its own scoring. Not to make any promises, but I think by doing such a thing (letting a Similarity control how the explaining works), we will make progress towards LUCENE-3118 too: if you customize the scoring system for your app, you should be able to explain the scores in a way that make sense to your app too.\n\n{quote}\nThe DocScorer factory methods now need both the Weight and the Stats; that's the best I could do for now.\n{quote}\n\nThis sounds like a good step to me! We want to just pass only the Stats to the DocScorer factory methods, but we have some more work to do before that... such as better handling of the whole boosting situation and pushing all responsibility for query normalization into stats.\n\nonce we have done this, i think Weight/Stats will make sense (except for naming) as it will be be the parallel of Scorer/DocScorer, full responsibility for scoring is in the Similarity and Weight/Scorer only handle things like seeking to terms, creating docsenums, iterating postings lists, etc :)\n\n",
            "date": "2011-06-13T14:22:21.647+0000",
            "id": 10
        },
        {
            "author": "Robert Muir",
            "body": "here's an updated patch, i pushed query normalization into the Stats, and removed idf/etc from the weight impls.\n\nI think this is close, all tests pass except TestCustomScoreQuery (its some explanation problem). I'm this close to @Ignoring it, since the query nor the test make any sense.",
            "date": "2011-06-16T06:58:20.423+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "here's the patch with the unrelated bug fixed in CustomScoreQuery.\n\nnow all tests pass.",
            "date": "2011-06-16T07:34:16.743+0000",
            "id": 12
        },
        {
            "author": "Robert Muir",
            "body": "i fixed a few problems: javadocs warnings and also the fact that i had left an assert commented out from hair-pulling with CustomScoreQuery.\n",
            "date": "2011-06-16T08:10:21.139+0000",
            "id": 13
        },
        {
            "author": "Robert Muir",
            "body": "thanks David!",
            "date": "2011-06-20T11:44:34.451+0000",
            "id": 14
        }
    ],
    "component": "core/search",
    "description": "In order to support ranking methods besides TF-IDF, we need to make the statistics they need available. These statistics could be computed in computeWeight (soon to become computeStats) and stored in a separate object for easy access. Since this object will be used solely by subclasses of Similarity, it should be implented as a static inner class, i.e. Similarity.Stats.\n\nThere are two ways this could be implemented:\n- as a single Similarity.Stats class, reused by all ranking algorithms. In this case, this class would have a member field for all statistics;\n- as a hierarchy of Stats classes, one for each ranking algorithm. Each subclass would define only the statistics needed for the ranking algorithm.\n\nIn the second case, the Stats class in DefaultSimilarity would have a single field, idf, while the one in e.g. BM25Similarity would have idf and average field/document length.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3174",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Similarity.Stats class for term & collection statistics",
    "systemSpecification": true,
    "version": "flexscoring branch"
}