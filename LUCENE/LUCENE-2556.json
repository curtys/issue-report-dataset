{
    "comments": [
        {
            "author": "Adriano Crestani",
            "body": "This java application demonstrates how much memory CharTermAttributeImpl.clone() might consume in some scenarios.",
            "date": "2010-07-23T05:08:52.103+0000",
            "id": 0
        },
        {
            "author": "Adriano Crestani",
            "body": "This patch optimizes the cloning of the CharTermAttributeImpl internal buffer. It keeps using clone() to clone the internal buffer when CharTermAttribute.length() is at least 150 and at least 75% and  of the internal buffer length, otherwise, it uses System.arrayCopy(...) to clone it using CharTermAttribute.length() as the new internal buffer size.\n\nIt's performing the optimization, because in some scenarios, like cloning long arrays, clone() is usually faster than System.arrayCopy(...). ",
            "date": "2010-07-23T05:36:20.138+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Here the patch, I see no problem with applying it to 3.x and trunk.",
            "date": "2010-07-23T05:53:14.133+0000",
            "id": 2
        },
        {
            "author": "Uwe Schindler",
            "body": "{quote}\nThis patch optimizes the cloning of the CharTermAttributeImpl internal buffer. It keeps using clone() to clone the internal buffer when CharTermAttribute.length() is at least 150 and at least 75% and of the internal buffer length, otherwise, it uses System.arrayCopy(...) to clone it using CharTermAttribute.length() as the new internal buffer size. \nIt's performing the optimization, because in some scenarios, like cloning long arrays, clone() is usually faster than System.arrayCopy(...). \n{quote}\n\nHaven't seen your patch yet. I dont know if the two extra calculations rectify the barnching, because terms are mostly short...\n\nIf we take your patch, the allocations should in all cases be done with ArrayUtils.oversize() to be consistent with the allocation strategy of the rest of CTA.",
            "date": "2010-07-23T05:55:31.241+0000",
            "id": 3
        },
        {
            "author": "Adriano Crestani",
            "body": "Hi Uwe,\n\nThanks for the quick reply, your patch looks good enough for me. I just added that optimization part in case somebody complains about poor performance of arrayCopy for long arrays, but I agree with you, mostly terms are short and wouldn't require such optimization.\n\n+1 to also apply the patch to trunk",
            "date": "2010-07-23T07:02:56.245+0000",
            "id": 4
        },
        {
            "author": "Adriano Crestani",
            "body": "I was checking State.clone() method usage and it's just used store the current AttributeSource state for later use, when it's restored by invoking AttributeSource.restoreState(), which only copies the valid chars from the stored state to the current CharTermAttribute object the AttributeSource holds. In the end, I see no reason for stored states (the cloned ones) to hold an internal buffer greater than it needs too, once it will never be actually used/changed by any AttributeSource user. \n\nPlease, let me know if I'm missing something.\n\nThanks,\nAdriano Crestani",
            "date": "2010-07-23T07:14:57.265+0000",
            "id": 5
        },
        {
            "author": "Adriano Crestani",
            "body": "So, if you guys think my thoughts above are OK, this is a simple patch with code that creates a new internal buffer strictly equals to the term length",
            "date": "2010-07-25T01:59:39.515+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "Uwe, whats happening with this issue?\n\nIndexing terms are typically small, I think we should commit Adriano's last patch.\nI have problems with clone() being slow with -client on my jvm, I think this is a good improvement.\n\nAnd, can prevent some memory issues (the original intent of the issue it seems)\n",
            "date": "2010-10-18T23:54:50.554+0000",
            "id": 7
        },
        {
            "author": "Uwe Schindler",
            "body": "I have no problem with it.\n\nThe only thing: It still thin it should use an array size calculated by ArrayUtils.oversize() on the clone?",
            "date": "2010-10-19T05:42:32.189+0000",
            "id": 8
        },
        {
            "author": "Robert Muir",
            "body": "bq. The only thing: It still thin it should use an array size calculated by ArrayUtils.oversize() on the clone?\n\nI don't think we should. the clone might never be used again: \n\nSo if the clone is never reused, there is no evidence the array will ever grow (most analysis processes, stemming and folding, etc actually shorten the term text)",
            "date": "2010-10-19T11:27:35.747+0000",
            "id": 9
        },
        {
            "author": "Adriano Crestani",
            "body": "Robert is right, in the actual use case, a cloned TermAttribute is never modified, it's at max copied back to the TokenStream's TermAttribute (when using TokenStream.restoreState(State)), so the only TermAttribute instance that needs to grow is the TokenStream's.",
            "date": "2010-10-19T13:56:31.806+0000",
            "id": 10
        },
        {
            "author": "Uwe Schindler",
            "body": "There is also no problem with reusing the cloned attribute, as ArrayUtils grows the array correctly also in that case. So you can still apend stuff as usual, with a *small* perf penalty maybe.\n\nI think I will commit this later this evening to trunk and 3.x. Merging is little harder because of sophisticated backwards layer in 3.x. :-)",
            "date": "2010-10-19T15:45:54.430+0000",
            "id": 11
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed trunk revision: 1024408\nCommitted 3.x revision: 1024409\n\nThanks Adriano!",
            "date": "2010-10-19T21:01:41.583+0000",
            "id": 12
        },
        {
            "author": "Adriano Crestani",
            "body": "Thank you for committing the patch ;)",
            "date": "2010-10-19T22:26:15.417+0000",
            "id": 13
        },
        {
            "author": "Uwe Schindler",
            "body": "Backport to 2.9 and 3.0.",
            "date": "2010-10-30T11:01:47.844+0000",
            "id": 14
        },
        {
            "author": "Uwe Schindler",
            "body": "Chaning title",
            "date": "2010-10-30T11:02:55.210+0000",
            "id": 15
        },
        {
            "author": "Uwe Schindler",
            "body": "Patch for 3.0 for reference",
            "date": "2010-10-30T11:22:59.120+0000",
            "id": 16
        },
        {
            "author": "Uwe Schindler",
            "body": "Committed branch 3.0 revision: 1029022\nCommitted branch 2.9 revision: 1029027",
            "date": "2010-10-30T11:23:52.729+0000",
            "id": 17
        }
    ],
    "component": "modules/analysis",
    "description": "The memory consumption problem with cloning a (Char)TermAttributeImpl object was raised on thread http://markmail.org/thread/bybuerugbk5w2u6z",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2556",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "(Char)TermAttribute cloning memory consumption",
    "systemSpecification": true,
    "version": "3.0.2"
}