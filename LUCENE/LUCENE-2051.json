{
    "comments": [
        {
            "author": "Robert Muir",
            "body": "I agree. Any one analyzer should really just serve as an example of how to put tokenstreams together.\nThey shouldn't try to meet all users needs, but instead be very simple and easy for the user to customize.\n\nThis complexity caused by setters was painful when implementing reusableTokenStream, these setters require special handling and code complexity.\nand there might even still be some bug I introduced in this process, we try our best but these setters make life very complex.\n\nI would like to see these setters deprecated for 3.0 so that code will be simpler in the future.\n",
            "date": "2009-11-10T22:14:05.781+0000",
            "id": 0
        },
        {
            "author": "Simon Willnauer",
            "body": "This would also include deprecating some of the constructors. I will attach a patch which adds / deprecates ctors for all analyzers having those setters too.\n\nsimon",
            "date": "2009-11-13T10:50:28.087+0000",
            "id": 1
        },
        {
            "author": "Uwe Schindler",
            "body": "Simon, are you still working on a patch?",
            "date": "2009-11-14T22:18:00.399+0000",
            "id": 2
        },
        {
            "author": "Simon Willnauer",
            "body": "Yes I do, this one got a little lost in my schedule... I will try to get the patch done by tomorrow night, would that be ok for 3.0? What's your schedule for the release?",
            "date": "2009-11-14T23:21:51.806+0000",
            "id": 3
        },
        {
            "author": "Robert Muir",
            "body": "Simon, if you are busy, you can assign to me, or we can split the work. let me know",
            "date": "2009-11-14T23:29:21.370+0000",
            "id": 4
        },
        {
            "author": "Uwe Schindler",
            "body": "I will create an RC, as soon as we have the remaining issues closed (hopefully soon), ideally at the beginning of the week! Some remaining issues (like changing BW requirements) are not really release critical. Also the change of sysreq page.\n\nI think only your's, Mike's with default readonly ctors and maybe the N-Gram one are important.",
            "date": "2009-11-14T23:30:22.852+0000",
            "id": 5
        },
        {
            "author": "Simon Willnauer",
            "body": "Attached first patch, CJK and Arabic Analyzer still missing. \n\nwill do ASAP.\n@Robert: please have a quick look. Thx",
            "date": "2009-11-15T18:16:28.799+0000",
            "id": 6
        },
        {
            "author": "Robert Muir",
            "body": "simon, should we expose the getDefaultStopSet() as public yet, if you are planning on refactoring this stopword stuff in 3.1 anyway? (would you have to then deprecate this in 3.1?)\n\nalso, I'm not sure i like the copy() method in CharArraySet, i think it should return a real copy even if it is an EMPTY_SET, and if you give it a CharArraySet it should call .clone() ?\n\nother things are minor, in Czech i think there is a spurious import added (javax.print.DocFlavor.CHAR_ARRAY), etc. \n\nnothing to do with your issue, but maybe while we are here cleaning up these ctors we should fix the fact that a lot of these never call super() ?\n\n",
            "date": "2009-11-15T20:02:39.253+0000",
            "id": 7
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. should we expose the getDefaultStopSet() as public yet,\nThis is different. the StopawareAnalyzer#getStopwords() is an instance method to get the \"current\" stopword set of the instance. while the ones I introduced here are static to get the default set instead. We need to provide a replacement for the public static final Sting[] stuff for deprecation an I thing they have to be there. thoughts?\n\nbq. also, I'm not sure i like the copy() method in CharArraySet, i think it should return a real copy even if it is an EMPTY_SET, and if you give it a CharArraySet it should call .clone() ?\n\nthe deal with this copy method is that StopFilter converts the incoming set to a chararrayset if its not a such already. I want to have all sets in analyzers to be unmodifiable and an instance of ChararraySet. Further they shoud be a real copy as otherwise they could be modified by the caller of the Analyzer ctor. Thats why I introduced this helper as such code was duplicated all over the place.\n\nbq. nothing to do with your issue, but maybe while we are here cleaning up these ctors we should fix the fact that a lot of these never call super() ?\n\nJava guarantees that the default super ctor is called implicitly. I would not add all this noise (calling it explicitly)  just for the sake of typing super() 20 times.\n\nThoughts?\n",
            "date": "2009-11-15T22:08:54.439+0000",
            "id": 8
        },
        {
            "author": "Simon Willnauer",
            "body": "Attached complete patch. \nThanks for the pointer with the bogus import.",
            "date": "2009-11-15T22:36:17.596+0000",
            "id": 9
        },
        {
            "author": "Robert Muir",
            "body": "bq. This is different. the StopawareAnalyzer#getStopwords() is an instance method to get the \"current\" stopword set of the instance. while the ones I introduced here are static to get the default set instead. We need to provide a replacement for the public static final Sting[] stuff for deprecation an I thing they have to be there. thoughts?\n\nright, but still, will they this static method be supported after refactoring to StopAwareAnalyzer?\n",
            "date": "2009-11-15T23:02:33.541+0000",
            "id": 10
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. right, but still, will they this static method be supported after refactoring to StopAwareAnalyzer?\nsure, they solve two different things.\nstatic Set<?> getDefaultStopSet() -> will always return the default stopword set. (replacement for the String array\ngetStopwords() -> returns the currently used stopwords by the analyzer.\n\nthat is all. If we can get rid of that completely I'm fine with it. I would actually like to not expose the stopwords. We could put them all in files in 3.1 and load them from there?!",
            "date": "2009-11-15T23:09:14.534+0000",
            "id": 11
        },
        {
            "author": "Robert Muir",
            "body": "{quote}\nsure, they solve two different things.\nstatic Set<?> getDefaultStopSet() -> will always return the default stopword set. (replacement for the String array\ngetStopwords() -> returns the currently used stopwords by the analyzer.\n\nthat is all. If we can get rid of that completely I'm fine with it. I would actually like to not expose the stopwords. We could put them all in files in 3.1 and load them from there?!\n{quote}\n\nyeah i too prefer they be hidden behind a method, (we should store them however we damn well feel, i do like files though)\njust wanted to make sure it would not somehow present a problem for StopAwareAnalyzer in the future, if it can support getting this set then we are ok.",
            "date": "2009-11-15T23:18:24.226+0000",
            "id": 12
        },
        {
            "author": "Uwe Schindler",
            "body": "I committed it for you in revision: 880715\n\nSimon, you can close it, as you are assigned.",
            "date": "2009-11-16T11:49:43.812+0000",
            "id": 13
        },
        {
            "author": "Simon Willnauer",
            "body": "thanks uwe!",
            "date": "2009-11-16T11:51:42.275+0000",
            "id": 14
        }
    ],
    "component": "modules/analysis",
    "description": "Some analyzers in contrib provide setters for stopword / stem exclusion sets / hashtables etc. Those setters should be deprecated as they yield unexpected behaviour. The way they work is they set the reusable token stream instance to null in a thread local cache which only affects the tokenstream in the current thread. Analyzers itself should be immutable except of the threadlocal. \n\nwill attach a patch soon.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2051",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Contrib Analyzer Setters should be deprecated and replace with ctor arguments",
    "systemSpecification": true,
    "version": "2.9.1"
}