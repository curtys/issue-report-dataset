{
    "comments": [
        {
            "author": "Ken McCracken",
            "body": "Drop this file in src/test/org/apache/lucene/store for the lucene 3.5.0 source release, and run your unit tests with junit4.",
            "date": "2011-12-07T20:18:02.856+0000",
            "id": 0
        },
        {
            "author": "Ken McCracken",
            "body": "I have been reviewing https://issues.apache.org/jira/browse/LUCENE-3255 which seems related in that the error is encountered on the same section of SegmentInfos.java.\nOne way to fix this might be to change SegmentInfos.java as follows where int format = input.readInt(); to\n\n        int format;\n        try {\n            format = input.readInt();\n        } catch (IOException ioe) {\n            if (input.length() == 0) {\n                try {\n                    input.close();\n                } finally {\n                    directory.deleteFile(segmentFileName);\n                }\n                return;\n            }\n            throw ioe;\n        }\n\nhowever, there are unit tests that seem to verify that no file deletions are happening at this low a level.  \n",
            "date": "2011-12-07T23:07:35.459+0000",
            "id": 1
        },
        {
            "author": "Ken McCracken",
            "body": "Initial proposed patch.  I'm not sure if this is the correct place and scope.  But it does fix my test case.\nThe test case and the proposed code change are attached.\n\naaa:lucene kmccrack$ svn info\nPath: .\nURL: http://svn.apache.org/repos/asf/lucene/dev/branches/lucene_solr_3_5/lucene\nRepository Root: http://svn.apache.org/repos/asf\nRepository UUID: 13f79535-47bb-0310-9956-ffa450edef68\nRevision: 1211687\nNode Kind: directory\nSchedule: normal\nLast Changed Author: sarowe\nLast Changed Rev: 1207561\nLast Changed Date: 2011-11-28 15:11:35 -0500 (Mon, 28 Nov 2011)\n",
            "date": "2011-12-07T23:35:44.613+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "\nThanks Ken!\n\nI attached a new patch, whittling back the test a bit (while still\nshowing the bug), fixing whitespace, etc.\n\nI also removed the @author tags (we don't attach names to the source\ncode...).\n\nI fixed the bug in two places.  First, when writing the segments file,\nI moved the createOutput in SegmentInfos.java inside the try/finally\nthat deletes the file if an exception occurs.  This way we shouldn't\ncreate 0-byte segments_N anymore.\n\nSecond, in IndexFileDeleter I ignore a given segments_N if it's 0\nbytes; I don't delete the file at that point because IFD's normal\nref-counting will eventually remove it.\n",
            "date": "2011-12-08T11:47:06.745+0000",
            "id": 3
        },
        {
            "author": "Shai Erera",
            "body": "Nice catch Ken !\n\nPatch looks good to me. Perhaps replace the msg \"code will not get here\" with \"should have hit CrashException\"? Otherwise, +1 to commit.",
            "date": "2011-12-08T11:57:13.847+0000",
            "id": 4
        },
        {
            "author": "Shane Detsch",
            "body": "Would you ever have the case there only one \"segements_N\" file is corrupt 'i.e. 0 size'? If so how would another \"segments_N\" file be regenerated?  Does this 0-sized \"segments_N\" file always happen on a newly generated \"segmetns_N\" and \"segments_N-1\" still exist and is considered active?  After deletion of the 0-sized \"segments_N\" file is there a process to make sure that the currently active \"segmetns_N\" (not the 0-sized one) accurately represents the segments in the index?",
            "date": "2011-12-08T14:43:30.374+0000",
            "id": 5
        },
        {
            "author": "Michael McCandless",
            "body": "\nbq. Would you ever have the case there only one \"segements_N\" file is corrupt 'i.e. 0 size'?\n\nNo, unless something terrible is going on, such as your IO system\ndisregards fsync, you have hardware problems, or something external is\nmucking with the index files.\n\nWhen Lucene commits it writes the next segments_N, fsyncs it (and all\nindex file it references) and then removes old commits; so the old\ncommits are not removed until the new one is on durable storage.\n\nI think the conditions for this bug to occur are very rare, ie, lucene\ntried to commit, hit a transient IO problem in creating the file (so\nthat a 0 byte file is created), your app caught this and called\nIW.close, this time the transient IO problem is gone and the close\nsucceeds in writing another segments_N file.  At that point you'd hit\nthis bug when you next tried to open an IndexWriter on the index.\n\nThe more common failure would be if the segments_N fails to write (0\nbyte file) and then when you close the IW it also fails, ie, because\nsomething suddenly is wrong w/ your IO system.  In this case your\n\"latest\" segments_N is unreadable, and Lucene handles that fine (falls\nback to segments_(N-1), which should be ok because it was fsync'd).\n",
            "date": "2011-12-08T19:25:39.055+0000",
            "id": 6
        },
        {
            "author": "Ken McCracken",
            "body": "Thank you Mike for cleaning my suggestions up.  I am validating and reviewing currently...\n\nWhat is the svn revision branch this patch would get checked in to?",
            "date": "2011-12-08T19:54:06.504+0000",
            "id": 7
        },
        {
            "author": "Michael McCandless",
            "body": "Thanks Ken!\n\nbq. What is the svn revision branch this patch would get checked in to?\n\nOh, I checked into 3.x (to be 3.6.0) and trunk... if you select the \"All\" tab here, under Activity, you can see the full SVN paths...",
            "date": "2011-12-08T20:27:59.179+0000",
            "id": 8
        },
        {
            "author": "Ken McCracken",
            "body": "@Mike:  My initial validation confirms your suggested patch works for me.  Thank you.",
            "date": "2011-12-08T21:08:22.670+0000",
            "id": 9
        },
        {
            "author": "Michael McCandless",
            "body": "Awesome, thanks Ken!",
            "date": "2011-12-09T18:47:56.180+0000",
            "id": 10
        }
    ],
    "component": "",
    "description": "FSDirectory.createOutput(..) uses a RandomAccessFile to do its work.  On my system the default FSDirectory.open(..) creates an NIOFSDirectory.  If createOutput is called on a segments_* file and a crash occurs between RandomAccessFile creation (file system shows a segments_* file exists but has zero bytes) but before any bytes are written to the file, subsequent IndexWriters cannot proceed.  The difficulty is that it does not know how to clear the empty segments_* file.  None of the file deletions will happen on such a segment file because the opening bytes cannot not be read to determine format and version.\n\nAn initial proposed patch file is attached below.\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-3627",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Critical",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "CorruptIndexException on indexing after a failure occurs after segments file creation but before any bytes are written",
    "systemSpecification": true,
    "version": "3.5"
}