{
    "comments": [
        {
            "author": "Grant Ingersoll",
            "body": "This seems reasonable, although I am not an expert in low-level file system calls like this.  I guess for me the thing would be to find out if the major filesystems support it (Windows, OSX, Linux) and then perhaps we can deal w/ others from there as they arise (i.e. those that don't support it)",
            "date": "2008-01-13T15:09:54.664+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "OK I'll test on the major platforms, and take that approach.  I'll tentatively target 2.4.",
            "date": "2008-01-14T15:37:57.805+0000",
            "id": 1
        },
        {
            "author": "Michael McCandless",
            "body": "Attached patch.  All tests pass on OS X 10.4, Linux 2.6.22, Windows\nServer 2003.  I plan to commit in a day or two.",
            "date": "2008-01-21T11:06:47.660+0000",
            "id": 2
        },
        {
            "author": "Michael McCandless",
            "body": "I just committed this.",
            "date": "2008-01-25T09:42:48.833+0000",
            "id": 3
        },
        {
            "author": "Otis Gospodnetic",
            "body": "Didn't find time to comment on this earlier.\nDoes this mean one will no longer be able to tell exactly how large the index really is (because some portion of some data files will actually be empty)?\n",
            "date": "2008-01-31T06:12:07.031+0000",
            "id": 4
        },
        {
            "author": "Michael McCandless",
            "body": "{quote}\nDoes this mean one will no longer be able to tell exactly how large the index really is (because some portion of some data files will actually be empty)?\n{quote}\n\nOnly while the CFS is being built. After it's done being built, then\nit is \"fully occupied\" (no portion are empty).\n",
            "date": "2008-01-31T10:09:39.038+0000",
            "id": 5
        }
    ],
    "component": "core/index",
    "description": "I've read that if you are writing a large file, it's best to pre-set\nthe size of the file in advance before you write all of its contents.\nThis in general minimizes fragmentation and improves IO performance\nagainst the file in the future.\n\nI think this makes sense (intuitively) but I haven't done any real\nperformance testing to verify.\n\nJava has the java.io.File.setLength() method (since 1.2) for this.\n\nWe can easily fix CompoundFileWriter to call setLength() on the file\nit's writing (and add setLength() method to IndexOutput).  The\nCompoundFileWriter knows exactly how large its file will be.\n\nAnother good thing is: if you are going run out of disk space, then,\nthe setLength call should fail up front instead of failing when the\ncompound file is actually written.  This has two benefits: first, you\nfind out sooner that you will run out of disk space, and, second, you\ndon't fill up the disk down to 0 bytes left (always a frustrating\nexperience!).  Instead you leave what space was available\nand throw an IOException.\n\nMy one hesitation here is: what if out there there exists a filesystem\nthat can't handle this call, and it throws an IOException on that\nplatform?  But this is balanced against possible easy-win improvement\nin performance.\n\nDoes anyone have any feedback / thoughts / experience relevant to\nthis?\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-705",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "CompoundFileWriter should pre-set its file length",
    "systemSpecification": true,
    "version": "2.1"
}