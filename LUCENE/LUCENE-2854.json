{
    "comments": [
        {
            "author": "Michael McCandless",
            "body": "I think we should simply make a hard break on the Sim.lengthNorm ->\ncomputeNorm cutover.  Subclassing sim is an expert thing, and, I'd\nrather apps see a compilation error on upgrade so that they realize\ntheir lengthNorm wasn't being called this whole time because of\nLUCENE-2828 (and that they must now cutover to computeNorm).\n\nSo I made lengthNorm final (and throws UOE), computeNorm abstract.  I\ndeprecated SimilarityDelegator, and fixed BQ to not use it anymore.\nThe only other use is FuzzyLikeThisQuery, but fixing that is a little\ntoo involved for today.\n",
            "date": "2011-01-08T12:32:08.155+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "The above patch applies to 3.x\n\nFor trunk I plan to remove SimliarityDelegator from core, and move it (deprecated) into contrib/queries/... (private to FuzzyLikeThisQ).  At some point [later] we can fix FuzzyLikeThisQ to not use it...",
            "date": "2011-01-08T13:36:19.763+0000",
            "id": 1
        },
        {
            "author": "Robert Muir",
            "body": "here is the patch for fuzzylikethis for trunk... so you can remove the delegator completely in trunk.\n",
            "date": "2011-01-08T15:36:07.872+0000",
            "id": 2
        },
        {
            "author": "Robert Muir",
            "body": "Is it possible to remove this method Query.getSimilarity also? I don't understand why we need this method!\n\n{noformat}\n  /** Expert: Returns the Similarity implementation to be used for this query.\n   * Subclasses may override this method to specify their own Similarity\n   * implementation, perhaps one that delegates through that of the Searcher.\n   * By default the Searcher's Similarity implementation is returned.*/\n{noformat}",
            "date": "2011-01-08T15:41:45.417+0000",
            "id": 3
        },
        {
            "author": "Michael McCandless",
            "body": "bq. Is it possible to remove this method Query.getSimilarity also? I don't understand why we need this method!\n\nI would love to!  But I think that's for another day...\n\nI looked into this and got stuck with BoostingQuery, which rewrites to an anon subclass of BQ overriding its getSimilarity in turn override its coord method.  Rather twisted... if we can do this differently I think we could remove Query.getSimilarity.",
            "date": "2011-01-08T18:53:54.070+0000",
            "id": 4
        },
        {
            "author": "Grant Ingersoll",
            "body": "Bulk close for 3.1",
            "date": "2011-03-30T15:50:24.695+0000",
            "id": 5
        }
    ],
    "component": "",
    "description": "SimilarityDelegator is a back compat trap (see LUCENE-2828).\n\nApps should just [statically] subclass Sim or DefaultSim; if they really need \"runtime subclassing\" then they can make their own app-level delegator.\n\nAlso, Sim.computeNorm subsumes lengthNorm, so we should deprecate lengthNorm in favor of computeNorm.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2854",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Deprecate SimilarityDelegator and Similarity.lengthNorm",
    "systemSpecification": true,
    "version": ""
}