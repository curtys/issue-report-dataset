{
    "comments": [
        {
            "author": "Simon Willnauer",
            "body": "here is an initial patch that uses a SegmentCodecBuilder to assign codec IDs during indexing in DocFieldProcessorPerThread.",
            "date": "2011-03-23T12:39:24.374+0000",
            "id": 0
        },
        {
            "author": "Michael McCandless",
            "body": "Patch looks great!\n\nI wonder if we should pass the segmentCodecsBuilder to FieldInfos?  This way, FieldInfos.add/update could set the codecID, instead of caller doing it after the fact (in DocFieldProcessorPerThread)?",
            "date": "2011-03-24T17:24:09.912+0000",
            "id": 1
        },
        {
            "author": "Simon Willnauer",
            "body": "bq. I wonder if we should pass the segmentCodecsBuilder to FieldInfos? This way, FieldInfos.add/update could set the codecID, instead of caller doing it after the fact (in DocFieldProcessorPerThread)?\n\nhere is the thing, I first added it to FieldInfos since it appears to be the place for that kind of stuff. Yet, the first problem is that DocFieldProcessorPerThread is caching the FI for each DFPPerField so I would really need to add it to each FieldInfo (FI not FIs). Further having another invariant in FIs that only applies if we are writing is something I tried to prevent in the first place and eventually SegementCodecs is somewhat internal to the SegmentInfo and not to the FieldInfos and I tried to couple them only by the codec ID though. I agree this would be easier and less disturbing in the code. I'd love to find a better way to do that really.... except of this part in DocFieldProcessorPerThread is smooth though :/",
            "date": "2011-03-24T17:46:28.337+0000",
            "id": 2
        },
        {
            "author": "Simon Willnauer",
            "body": "next iteration. This patch moves the SegmentCodecsBuilder into FieldInfos and forces DocFieldProcessorPerThread to update FieldInfo through the global FieldInfos instance. \n\n\n\nI changed the FieldInfos#add methods to FieldInfos#addOrUpdate and made SegmentCodecsBuilder package private, final and removed synchronization since it is guarded by FieldInfos during creation. This patch also fixes JavaDoc on SegmentCodecs since we build that now incrementatlly.\n\nSince we now update the FieldInfo through FieldInfos this looks much cleaner.\n\nI think this is ready to commit.",
            "date": "2011-03-25T13:20:38.838+0000",
            "id": 3
        },
        {
            "author": "Simon Willnauer",
            "body": "I will commit this in a bit if nobody objects",
            "date": "2011-03-25T15:40:22.409+0000",
            "id": 4
        },
        {
            "author": "Simon Willnauer",
            "body": "Committed revision 1085449.\n",
            "date": "2011-03-25T16:24:36.443+0000",
            "id": 5
        }
    ],
    "component": "core/codecs, core/index",
    "description": "currently we build the SegementCodecs during flush which is fine as long as no codec needs to know which fields it should handle. This will change with DocValues or when we expose StoredFields / TermVectors via Codec (see LUCENE-2621 or LUCENE-2935). The other downside it that we don't have a consistent view of which codec belongs to which field during indexing and all FieldInfo instances are unassigned (set to -1). Instead we should build the SegmentCodecs incrementally as fields come in so no matter when a codec needs to be selected to process a document / field we have the right codec ID assigned.\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "LUCENE-2985",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "LUCENE",
    "project": "LUCENE",
    "summary": "Build SegmentCodecs incrementally for consistent codecIDs during indexing",
    "systemSpecification": true,
    "version": "4.0-ALPHA, CSF branch"
}