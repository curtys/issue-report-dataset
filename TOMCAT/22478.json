{
    "comments": [
        {
            "author": null,
            "body": "Created attachment 7843\nlog of Digester exception upon first Ant manager deployment",
            "date": "20030816T04:12:20",
            "id": 0
        },
        {
            "author": null,
            "body": "The bug, if there's one, is maybe that your context XML should be removed on\nundeploy. This works fine for me (the WAR, expanded dir, and expanded XML are\nall removed on undeploy, as long as their names match).\nAs for the \"CL stopped\" exception, well, log4j shouldn't have watchdog threads\nor similar stuff (or you should destroy your loggers manually when your\napplication is stopped).",
            "date": "20030816T14:18:11",
            "id": 1
        },
        {
            "author": null,
            "body": ">The bug, if there's one, is maybe that your context XML should be removed on\n>undeploy. This works fine for me (the WAR, expanded dir, and expanded XML are\n>all removed on undeploy, as long as their names match).\n\nMy context configuration file (ccf) and everything else is removed just fine\nupon undeploy.  I've verified this many times.  Also, Tomcat creates the ccf\nfrom the one I supply in the .war file; META-INF/context.xml.  I assume that is\nstill correct to do with Tomcat5, right?  That's the way Tomcat4.1.xx worked. \nIt must be right because it seems to extract it to the appropriate place and use it.\n\nBesides, given that with a virgin Tomcat server and my app never having been\ndeployed there before, I still get exceptions upon the first deploy shown in the\nstacktrace in the log file I attached.  Did you have a look at that yet?\nhttp://nagoya.apache.org/bugzilla/showattachment.cgi?attach_id=7843\n\nThis doesn't happen if I physically place the application there before Tomcat\nhas ever been started.  It only happens upon a manager app deployment, so I\nthink that pretty clearly implicates the manager application or some process it\nuses.\n\n>As for the \"CL stopped\" exception, well, log4j shouldn't have watchdog threads\n>or similar stuff (or you should destroy your loggers manually when your\n>application is stopped).\n\nI actually do manually shutdown Log4j when the application is stopped...\n\nSee for yourself here...\nhttp://cvs.apache.org/viewcvs/jakarta-log4j-sandbox/src/java/org/apache/log4j/servlet/InitContextListener.java?rev=1.7&content-type=text/vnd.viewcvs-markup\n\nHere's the relevant code from there...\n\npublic void contextDestroyed(ServletContextEvent sce) {\n    ServletContext context = sce.getServletContext();\n\n    cleanupLog4j(context);\n}\n\nprivate void cleanupLog4j(ServletContext context) {\n    //shutdown this webapp's logger repository\n    context.log(\n      \"Cleaning up Log4j resources for context: \"\n      + context.getServletContextName() + \"...\");\n    context.log(\"Shutting down all loggers and appenders...\");\n    org.apache.log4j.LogManager.shutdown();\n    context.log(\"Log4j cleaned up.\");\n}\n\nEither way, the watchdog is in the process of configuring itself at startup. \nHow is this a shutdown issue?  Additionally, although Log4j involved in the\nstack trace, it doesn't seem to be the cause of the issue.  These are the lines\nof significance...\n\njava.lang.IncompatibleClassChangeError:\norg.apache.xerces.jaxp.DocumentBuilderFactoryImpl\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1251)\n\nPlease explain to me how the Log4j watchdog is responsible for an\nIncompatibleClassChangeError in org.apache.xerces.jaxp.DocumentBuilderFactoryImpl?\n\nAnd then, of course, there is the issue which I don't believe you addressed at\nall which is the fact that the contextInitialized() in my servlet context\nlistener is running twice every time I do a deploy after an undeploy.\n\n\nI'll leave this bug invalid for now, but I don't believe that is the case.  I\ndon't see where I am doing anything wrong?  Tomcat should be able to deal with\nthis deployment just fine, but it isn't.\n\nJake",
            "date": "20030816T15:24:23",
            "id": 2
        },
        {
            "author": null,
            "body": "I'll look at the first part, but this worked fine for me when I tried it; the\nsecond part is invalid, and won't be resolved or looked into (this is bug 3888,\nwhich I am tired to discuss, and is invalid).\nlog4j has no buisness accessing anything from a thread outside of the control of\nthe container after the web application shutdown.",
            "date": "20030816T15:39:00",
            "id": 3
        },
        {
            "author": null,
            "body": "Ok, I just tested with a completely fresh copy of Tomcat-4.1.27 and not only do\nI not get exceptions upon the first deploy (\nhttp://nagoya.apache.org/bugzilla/showattachment.cgi?attach_id=7843 ), future\nundeploys and deploys work perectly as well with no classloader errors or double\ninitialization.\n\nAm I not making a pretty good case that there is something wrong with Tomcat5\nand not my application if it works perfectly in a previous version of Tomcat? \nIts the same webapp, the only difference is Tomcat.\n\nReopening...\n\nJake",
            "date": "20030816T15:56:28",
            "id": 4
        },
        {
            "author": null,
            "body": ">log4j has no buisness accessing anything from a thread outside of the control of\n>the container after the web application shutdown.\n\nLike I said before, Log4j is completely and utterly shut down.  All thread are\nstopped.  So, I agree with you about Log4j having no business continuing threads\nafter application shutdown, but it just not the case that Log4j is actually\nkeeping any open threads after application shutdown, so that argument is\ncompletely moot.\n\nJake",
            "date": "20030816T16:00:25",
            "id": 5
        },
        {
            "author": null,
            "body": "As I said, I will consider the deployment bug, not the classloader errors. Do\nnot bother reopening the bug.",
            "date": "20030816T16:02:15",
            "id": 6
        },
        {
            "author": null,
            "body": "Well, I see a log4j owned thread accessing a stopped classloader. The stack\ntrace is obvious enough. BTW, if you don't believe me, sorry, I don't care ;-)",
            "date": "20030816T16:04:37",
            "id": 7
        },
        {
            "author": null,
            "body": "Your bug is misleading (not too surprising), but has merit: I knew about the\nextra restarts which were occurring after a manager deploy, but they have\nnothing to do with a double deployment of the webapp (what actually happens is\nthat the webapp gets deployed, then restarted right away - because of the\nweb.xml tracking code). I found a way to improve that code to avoid this\nscenario, so the issue will be fixed in 5.0.8.",
            "date": "20030817T08:43:26",
            "id": 8
        },
        {
            "author": null,
            "body": "Remy,\n\nI've tested your fix and it seems to have solved the duplicate initialization. \nI will look into how it is that Log4j seems to be accessing a stopped class\nclassloader even when I call LogManager.shutdown() in the contextDestroyed()\nmethod of my servlet context listener.  Maybe shutdown() is not doing everything\nit should be doing?  Anyway, I'll look into it.\n\nI am still seeing the Digester error upon initial deploy.  Here is how it looks\nnow..\n\n82437 [http8080-Processor25] INFO  org.apache.catalina.core.StandardHostDeployer\n - Processing Context configuration file URL\nfile:/D:/Java/Apache/Jakarta/tomcat-5-20030817/conf/Catalina/localhost/Barracuda.xml\n82437 [http8080-Processor25] INFO  org.apache.catalina.core.StandardHostDeployer\n - Installing web application from URL\njar:file:/D:/Java/Apache/Jakarta/tomcat-5-20030817/webapps/Barracuda.war!/\n104078 [ContainerBackgroundProcessor[StandardEngine[Catalina]]] INFO \norg.apache.catalina.core.StandardHostDeployer  - Processing Context\nconfiguration file URL\nfile:D:\\Java\\Apache\\Jakarta\\tomcat-5-20030817\\conf\\Catalina\\localhost\\Barracuda.xml\n104093 [ContainerBackgroundProcessor[StandardEngine[Catalina]]] ERROR\norg.apache.commons.digester.Digester  - End event threw exception\n\nNotice how Tomcat processes the context configuration file after the context has\nalready been installed?\n\n\nI also see the following in the log for my particular webapp after an undeploy,\nthen deploy...\n\n2003-08-17 17:48:50 createObjectName with\nStandardEngine[Catalina].StandardHost[localhost].StandardContext[/Barracuda]\n2003-08-17 17:50:35 createObjectName with\nStandardEngine[Catalina].StandardHost[localhost].StandardContext[/Barracuda]\n\nThe first line was logged at the end of an undeploy and the second at the\nbeginning of a deploy.  It seems fishy to me that it would do a\n\"createObjectName\" after an undeploy when the very same thing is done again upon\na deploy.  I don't know if this is significant or not.  If it isn't, just say so.\n\n\nJake",
            "date": "20030818T03:21:58",
            "id": 9
        },
        {
            "author": null,
            "body": "\nI have not studied the bug report. By the looks of it it seems that it is due \nto a problem with the log4j configurator watchdog thread using a dead \nclassloader. The watchdog code in log4j 1.2.x does not have a notion of a \nlifecycle. In particular, LogManager.shutdown does not stop the watchdog thread.\nAtually, I don't think there is a way to stop a watchdog thread which is \ndefinetely a serious shortcoming of log4j watchdogs.\n\nPlease let me know if the above does not clarify the issue.\n\n--\nCeki",
            "date": "20030818T20:17:55",
            "id": 10
        }
    ],
    "component": "Webapps:Administration",
    "description": "If have my webapp sitting in CATALINA_HOME/webapps and my context configuration\nfile in conf/Catalina/localhost before Tomcat starts, initialization is done\nonce.  If, however, I do a deploy using the Ant manager deploy task,\ninitialization is performed twice.  Actually, this happens more clearly after an\nAnt manager deploy + html manager undeploy + Ant manager deploy.  The first time\nit is deployed, I get an exception from digester which seems to prevent the\nduplicate initialization.  I'll be attaching text file showing the log output\nfrom stdout.log (I run Tomcat as a WinXP service) and localhost_log that shows\nthe stack traces.\n\nLike I said, it is more clear the duplicate initialization is happening after a\ndeploy + undeploy + deploy.  Here is what it looks like beginning with the\nundeploy...\n\n\n3124297 [http8080-Processor25] INFO  org.apache.catalina.core.ContainerBase  -\nRemoving web application at context path /Barracuda\n3125031 [http8080-Processor25] INFO  org.apache.catalina.logger.LoggerBase  -\nunregistering logger Catalina:type=Logger,path=/Barracuda,host=localhost\n3192547 [http8080-Processor24] INFO \norg.apache.catalina.core.StandardHostDeployer  - Installing web application from\nConfig file URL\nfile:/D:/Java/Apache/Jakarta/tomcat-5.0.7/conf/Catalina/localhost/Barracuda.xml\n3192547 [http8080-Processor24] INFO \norg.apache.catalina.core.StandardHostDeployer  - Installing web application from\nURL jar:file:/D:/Java/Apache/Jakarta/tomcat-5.0.7/webapps/Barracuda.war!/\nAug 15, 2003 8:33:25 PM org.apache.catalina.loader.WebappClassLoader\nfindResourceInternal\nINFO: Lifecycle error : CL stopped\njava.lang.IncompatibleClassChangeError:\norg.apache.xerces.jaxp.DocumentBuilderFactoryImpl\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1251)\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1211)\n\tat javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:93)\n\tat javax.xml.parsers.FactoryFinder.find(FactoryFinder.java:174)\n\tat\njavax.xml.parsers.DocumentBuilderFactory.newInstance(DocumentBuilderFactory.java:93)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:644)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:616)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:584)\n\tat org.apache.log4j.xml.XMLWatchdog.doOnChange(DOMConfigurator.java:815)\n\tat org.apache.log4j.helpers.FileWatchdog.checkAndConfigure(FileWatchdog.java:80)\n\tat org.apache.log4j.helpers.FileWatchdog.run(FileWatchdog.java:99)\nAug 15, 2003 8:33:26 PM org.apache.catalina.loader.WebappClassLoader\nfindResourceInternal\nINFO: Lifecycle error : CL stopped\njava.lang.IncompatibleClassChangeError:\norg.apache.xerces.jaxp.DocumentBuilderFactoryImpl\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1251)\n\tat\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1211)\n\tat javax.xml.parsers.FactoryFinder.newInstance(FactoryFinder.java:93)\n\tat javax.xml.parsers.FactoryFinder.find(FactoryFinder.java:174)\n\tat\njavax.xml.parsers.DocumentBuilderFactory.newInstance(DocumentBuilderFactory.java:93)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:644)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:616)\n\tat org.apache.log4j.xml.DOMConfigurator.doConfigure(DOMConfigurator.java:584)\n\tat org.apache.log4j.xml.XMLWatchdog.doOnChange(DOMConfigurator.java:815)\n\tat org.apache.log4j.helpers.FileWatchdog.checkAndConfigure(FileWatchdog.java:80)\n\tat org.apache.log4j.helpers.FileWatchdog.run(FileWatchdog.java:99)\n\n[webapp specific initialization logging happens here.....]\n\n3216172 [ContainerBackgroundProcessor[StandardEngine[Catalina]]] INFO \norg.apache.catalina.startup.HostConfig  - restartContext(/Barracuda)\n3216672 [ContainerBackgroundProcessor[StandardEngine[Catalina]]] INFO \norg.apache.catalina.logger.LoggerBase  - unregistering logger\nCatalina:type=Logger,path=/Barracuda,host=localhost\n\n[webapp specific initialization logging happens...again...here.....]\n\n\nNote that after this happens, the webapp actually works fine.  It most certainly\nshouldn't be initializing twice, though.  I won't speculate as to the cause. \nI'll wait for some more inciteful interpretation from Remy, Bill Barker, or\nsomeone else more attuned to the workings of the Tomcat internals.\n\nJake",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "22478",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Ant manager deploy causing webapp to initialize twice",
    "systemSpecification": true,
    "version": "5.0.7"
}