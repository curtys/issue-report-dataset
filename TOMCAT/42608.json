{
    "comments": [
        {
            "author": null,
            "body": "Daniel, please post the headers that your web browser is sending to Apache\nhttpd. Also, please tell us the version of mod_jk (or mod_proxy_ajp) you are using.",
            "date": "20070611T14:22:25",
            "id": 0
        },
        {
            "author": null,
            "body": "Christ, I don't use web browser to send data to apache httpd. How do I display\nthe  httpd header? Can you tell me a command how to do that, turn on the debug\nor something?\n\nThe version of mod_proxy_ajp is Apache/2.2.3\nThe version of mod_jk is I don't know how to see them?\n\n\n\n",
            "date": "20070612T07:57:44",
            "id": 1
        },
        {
            "author": null,
            "body": "You need to tell us if you are using mod_jk or mod_proxy_ajp, because there is\nsome question as to which component contains this problem.\n\nCheck your Apache httpd configuration for how you connect Apache httpd to\nTomcat. If you are using mod_proxy_ajp, then you will have configuration\ndirectives like \"ProxyPass /myApp ajp://localhost:8080/myApp\". If you are using\nmod_jk, you will have directives such as \"JkMount\".\n\nIf you are using mod_jk, we'll need to know the version number. Sometimes the\nname of the module being loaded into Apache httpd has the version number right\nin the filename (i.e. mod_jk_1.2.13.so). If not, you can look into the file to\nfind out what version you have:\n\n$ strings /usr/lib/apache2-extramodules/mod_jk.so | grep \"mod_jk/\"\n[output]\nmod_jk/1.2.18\n\nThe version I have checked here is 1.2.18. You should upgrade to the latest\nversion of mod_jk (currently 1.2.23) if possible.\n",
            "date": "20070612T08:56:47",
            "id": 2
        },
        {
            "author": null,
            "body": "I believe I am using mod_proxy_ajp connector because this is what I have on my\nhttpd.conf:\nProxyPass /axis ajp://192.168.11.10:8009/axis\nProxyPassReverse /axis ajp://192.168.11.10:8009/axis\n\nThe version of mod_proxy_ajp is Apache/2.2.3\n",
            "date": "20070612T10:16:20",
            "id": 3
        },
        {
            "author": null,
            "body": "(In reply to comment #2)\n> Christ, I don't use web browser to send data to apache httpd. How do I \ndisplay\n> the  httpd header? Can you tell me a command how to do that, turn on the \ndebug\n> or something?\n> The version of mod_proxy_ajp is Apache/2.2.3\n> The version of mod_jk is I don't know how to see them?\n\nSince it sounds like your configuration is pretty much just out of the box, \nthen edit $CATALINA_HOME/conf/logging.properties and add a line that looks \nlike:\n\norg.apache.jk.level = FINE\n\nSince we only care about the Content-Length, doing something like:\n\nLogFormat \"%h %l %u %t \\\"%r\\\" %>s %b %{content-length}i\"\n\nin httpd.conf should be enough.\n",
            "date": "20070612T19:02:30",
            "id": 4
        },
        {
            "author": null,
            "body": "(In reply to comment #3)\n> The version I have checked here is 1.2.18. You should upgrade to the latest\n> version of mod_jk (currently 1.2.23) if possible.\n\nCan you actually read all of the request body?  It shouldn't throw an \nexception with a 3GB request body while parsing the header, and you should get \ndropped connections (at least if you aren't using the latest from SVN), but it \nlooks to me like mod_jk will truncate the input (unless sizeof(int) >= 16 on \nyour platform).",
            "date": "20070612T19:12:30",
            "id": 5
        },
        {
            "author": null,
            "body": "Created attachment 20361\nRough patch for http 2.2.x only\n\nmod_proxy_ajp is now fine with POSTs > 2GB\nmod_jk fails to send any content for POSTs > 2GB\n\nI have attached a patch that fixes mod_jk for me but:\n- it only fixes this for httpd 2.2.x\n- I haven't looked at any of the other servers\n- I don't trust my c coding skills enough to commit it\n\nHopefully, one of the mod_jk folks will pick this up and turn it into a\nreasonable patch.",
            "date": "20070617T14:35:43",
            "id": 6
        },
        {
            "author": null,
            "body": "Changing component as testing shows mod_proxy_ajp now works but mod_jk still fails.",
            "date": "20070617T14:36:24",
            "id": 7
        },
        {
            "author": null,
            "body": "(In reply to comment #7)\n> Created an attachment (id=20361) [edit]\n> Rough patch for http 2.2.x only\n> mod_proxy_ajp is now fine with POSTs > 2GB\n> mod_jk fails to send any content for POSTs > 2GB\n> I have attached a patch that fixes mod_jk for me but:\n> - it only fixes this for httpd 2.2.x\n> - I haven't looked at any of the other servers\n> - I don't trust my c coding skills enough to commit it\n> Hopefully, one of the mod_jk folks will pick this up and turn it into a\n> reasonable patch.\n\n\nIt won't compile for httpd 1.3.x or IIS.  But it looks like a \ns/apr_off_t/jk_uint64_t/g should turn into a resonable patch.\n\nQuibbles:  \n1) The jk_ajp12_worker.c is no longer supported, so that one can be dropped \n(but it is harmless to include it).\n2) There look like there are a couple of tab-to-space problems in the patch.\n",
            "date": "20070617T15:04:50",
            "id": 8
        },
        {
            "author": null,
            "body": "I'm also in it, but didn't yet test my patch. It will use jk_uint64_t anf the\napache parts are not very far away from your patch.\n\nI will commit after my tests, but then we will still need to test the Windows\nand IIS+Netscape parts.\n",
            "date": "20070617T21:26:59",
            "id": 9
        },
        {
            "author": null,
            "body": "I committed a patch for mod_jk. A dev-tarball of mod_jk can be found at\n\n  http://people.apache.org/~rjung/mod_jk-dev/HugeContent/\n\nThis needs to be tested well, especially in combination with Bill Barker's\npatches for the Tomcat connectors.\n\nPlease report any test results here.\n",
            "date": "20070619T09:45:21",
            "id": 10
        },
        {
            "author": null,
            "body": "I have a simple test that submits 4G data and counts the bytes received.\n\nTested with:\nTomcat 5.5.HEAD, Win XP SP2 Home, using Java APR connector.\n\nApache 1.3.37, mod_jk 1.2.24-dev built locally with httpd on the same box as\nTomcat fails with a 400 - Invalid content length. The error appears to be httpd\ngenerated.\n\nApache 2.2.4, mod_jk 1.2.24-dev built locally with httpd on the same box as\nTomcat works (all 4G data is received)\n\nIIS 5, Win2k running on VMWare, mod_jk 1.2.24-dev built locally is *very* slow\nfor smaller files and fails completely (connection is dropped) for 4G files.",
            "date": "20070619T19:55:40",
            "id": 11
        },
        {
            "author": null,
            "body": "Mark, thanks a lot.\n\nI think the failing with httpd 1.3 is not that bad. It's very outdated now and\nsupport for huge content could be handled as yet another reason to update. From\nthe mod_jk perspective everything is analogous, but it relies an the web server\nbeing able to accept such a large value in the content length header.\n\nConcerning IIS: The IIS special part of the patch is close to being non\nexistant. All the relevant parts are the same as for IIS. So I strongly assume,\nthat the slowlyness hasn't been introduced by this fix. Maybe it's a VMWare problem.\n\nI hope Mladen will retest IIS basic performance to double check.\n\nThanks again for the test!\n\nI'll let this BZ open and we can close it in a couple of days, if no negative\nside effects come up.\n",
            "date": "20070620T01:35:53",
            "id": 12
        },
        {
            "author": null,
            "body": "Now I did some tests as well. I tested downloads and not uploads. Three test cases:\n\na) size a little below 2^31 Bytes\nb) size a little above 2^31 Bytes\nc) size a little above 2^32 Bytes\n\nPlatform Solaris 10 Sparc, Tomcat 5.5.24 candidate using Java APR connector,\nmod_jk 1.2.24-dev.\n\nAll Apache builds 32 Bit binaries.\n\nApache 1.3.37: a: OK, b: OK, but \"0\" as size in access log, c: OK, but size mod\n2^ 32 in access log\n\nApache 2.0.59: a: OK, b: OK, but negative size in access log, c: OK, but size\nmod 2^ 32 in access log\n\nApache 2.2.4: a,b,c: OK, correct sizes in access log\n\nBut: as soon as the size goes over 2^31, I don't get a Content-Length header\nback. I needed to fake a little: when I use static content Tomcat tries to load\nit into memory, so I used a little servlet to produce the download content on\nthe fly. But the servlet API call to set the content length header only allows\nan int as the argument. I instead used the setHeader method for Content-Length.\nThis works well below 2^31, but above the Tomcat AJP connector does not handle\nthe header back to mod_jk. Nevertheless wget could retrieve the complete\nmessage, and I *think* Tomcat transparently switched to transfer encoding chunked.\n",
            "date": "20070620T11:30:11",
            "id": 13
        },
        {
            "author": null,
            "body": "Same test on same system with Sun Webserver 6.1 SP 7 64Bit: a,b,c are OK with\ncorrect length in access log, but again the Content-Length header seems not to\ncome back from Tomcat when size is bigger than 2^31.\n\nDownload speed was the same for Sun, Apache 1.3, 2.0 and 2.2 (12MB/s; of course\nthis is not a performance test, it's just one huge download on a slow machine).\nUsing the direct http connector of Tomcat resulted in app. 15% faster download.\n\nThe absoulte number is not important (the servlet was doing cracy stuff, so\ngenerating the content was CPU bound).\n\nThe Tomcat access log by the way, shows correct length below 2^31, it shows a\n\"-\" for case b and the size mod 2^32 for case c.\n",
            "date": "20070620T11:58:32",
            "id": 14
        }
    ],
    "component": "Connector:AJP",
    "description": "Apache-tomcat-5.5.16 version.\nEvery time when I send 2GB binary data the apache-tomcat-5.5.16 is working fine.\nBut when I tried to send 3GB binary data following error below: I did traced to\nthe error code in HandlerRequest.decodeHeaders method called msg.getInt() this\nmethod is a problem because this method is returning an int instead of long. ant\nInteger is only handle 2.1GB limit but I am sending more than 3GB. Is there a\nway that you can fix this MessageBytes.getLong() instead of getInt()?\n\nI am looking for a solution to send more than 3GB data to apache-tomcat\n\nMany thanks in advance..\n\nHere is an error below.\n\n[TP-Processor3] ERROR common.HandlerRequest  - Error decoding request\njava.lang.NumberFormatException\n        at org.apache.tomcat.util.buf.Ascii.parseInt(Ascii.java:145)\n        at org.apache.tomcat.util.buf.ByteChunk.getInt(ByteChunk.java:521)\n        at org.apache.tomcat.util.buf.MessageBytes.getInt(MessageBytes.java:688)\n        at org.apache.jk.common.HandlerRequest.decodeHeaders(HandlerRequest.java:57\n9)\n        at org.apache.jk.common.HandlerRequest.decodeRequest(HandlerRequest.java:39\n7)\n        at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:260)\n        at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:754)\n        at org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:\n684)\n        at org.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.\njava:876)\n        at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool\n.java:684)\n        at java.lang.Thread.run(Thread.java:619)\n\n\nthanks\n\n--Daniel",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "42608",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Invalid Content-Length error for the binary file size greater than 2.1GB",
    "systemSpecification": true,
    "version": "5.5.6"
}