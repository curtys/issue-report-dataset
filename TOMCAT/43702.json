{
    "comments": [
        {
            "author": null,
            "body": "I have proposed a patch for tc6. If accepted, I'll propose a backport to 5.5.x",
            "date": "20071030T19:18:18",
            "id": 0
        },
        {
            "author": null,
            "body": "Fixed in trunk and 6.0.x. Proposed for 5.5.x.",
            "date": "20071127T15:04:54",
            "id": 1
        },
        {
            "author": null,
            "body": "Fixed in svn for 5.5.x. Will be in 5.5.26 onwards.",
            "date": "20071129T14:56:24",
            "id": 2
        }
    ],
    "component": "Jasper",
    "description": "I have been using Tomcat 5.5.7 (though I have checked this on the\nlatest 5.5 and 6.0 releases too) and had some problems with very\nlong class file names when using the SimpleTag interface for a\ncustom tag in a JSP document (the XML representation).\n\nFrom my reading of the code in Jasper, and my observation of the files\non my disk, if I have a JSP file \"WebContent/mypages/MyPage.jspx\",\nthen a class file named \"work/org/apache/jsp/mypages/MyPage_jspx.class\"\nwill be generated by Jasper.\n\nIf I use the SimpleTag interface for one of my custom tags on that\nJSP, a \"helper\" class (an inner class of the \"MyPage_jspx\" class) is\nalso generated. The naming convention appends \"Helper\" to the \"outer\"\nclass name to create the inner class name resulting in a class file\nnamed \"work/org/apache/jsp/mypages/MyPage_jspx$MyPage_jspxHelper.class\".\n\nAs there is only one \"helper\" class required, it could just be named\n\"Helper\", instead of \"MyPage_jspxHelper\". The \"outer\" class provides\na namespace that is duplicated unnecessarily in the name of the inner\nclass. Another alternative would be to generate this as an independent\nclass instead of an inner class (they could reside in the same source\nfile).\n\nThis may not seem to be a particularly important issue, but it becomes\na real problem if the name of the JSP is very long. We generate JSP\nfiles from other sources that often use very long names (the names\nare chosen by our customers, so we do not have a lot of control over\nhow long they can get). We have recently started to use the SimpleTag\ninterface to try to reduce the size of the Java classes generated by\nJasper (the generated code is more compact, as there is less code needed\nto handle return values, etc.) However, we quickly found that if a\ndeveloper's project directory was deeply nested on the file system\n(i.e., the path to the \"work\" directory) and/or the JSPs had long names\n(some names were as long as 96 characters) that the filesystem path\nlength limit on Windows was exceeded and we got \"class not found\"\nerrors from Tomcat at run-time for classes that clearly existed on the\nfilesystem. I have seen these errors before in other circumstances and\nthey are caused when the path length limit is exceeded.\n\nA trivial change to the Jasper code generator to avoid replicating the\nname of the \"outer\" class in the name of the inner \"helper\" class would\ngo a long way to alleviating this problem. I cannot think of any reason\nwhy this would not be a useful improvement to Jasper. It is a one line\nchange to the constructor of the \"org.apache.jasper.compiler.Generator\"\nclass where the FragmentHelperClass object is created (and probably in\nsome other area where references to this helper are generated into the\nservlet code).\n\nOther improvements to the compactness of the generated code could also\nbe made by more extensive use of \"import\" statements, but that would\nprobably not have any effect on the size of the \".class\" file after\ncompilation (or would it?).\n\nFor our part, we have had to stop using the SimpleTag interface for\nour custom tags, and have to start investigating a way of truncating\nlong JSP file names to avoid being caught out by Jasper's verbosity\nand the Windows path length limit.\n\nShould I report this issues separately against Tomcat 6?",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "43702",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Class Files Have Unnecessarily Long Names when Using SimpleTags",
    "systemSpecification": true,
    "version": "5.5.24"
}