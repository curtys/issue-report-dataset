{
    "comments": [
        {
            "author": null,
            "body": "Created attachment 13821\nPatch to existing tasks",
            "date": "20041222T16:16:45",
            "id": 0
        },
        {
            "author": null,
            "body": "Created attachment 13822\nRedirector helper task",
            "date": "20041222T16:17:43",
            "id": 1
        },
        {
            "author": null,
            "body": "I'll look into your patches (which look good) tomorrow. Thanks.",
            "date": "20041222T17:41:38",
            "id": 2
        },
        {
            "author": null,
            "body": "Comment on attachment 13821\nPatch to existing tasks\n\nIndex: AbstractCatalinaTask.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-catalina/catalina/src/share/org/apache/catalina/\nant/AbstractCatalinaTask.java,v\nretrieving revision 1.3\ndiff -u -r1.3 AbstractCatalinaTask.java\n--- AbstractCatalinaTask.java\t27 Feb 2004 14:58:40 -0000\t1.3\n+++ AbstractCatalinaTask.java\t23 Dec 2004 11:55:25 -0000\n@@ -40,7 +40,7 @@\n  * @since 4.1\n  */\n\n-public abstract class AbstractCatalinaTask extends Task {\n+public abstract class AbstractCatalinaTask extends BaseRedirectorHelperTask {\n\n\n     // ----------------------------------------------------- Instance\nVariables\n@@ -209,35 +209,46 @@\n\t     reader = new InputStreamReader(hconn.getInputStream(), CHARSET);\n\t     StringBuffer buff = new StringBuffer();\n\t     String error = null;\n+\t     int msgPriority = Project.MSG_INFO;\n\t     boolean first = true;\n\t     while (true) {\n\t\t int ch = reader.read();\n\t\t if (ch < 0) {\n\t\t     break;\n\t\t } else if ((ch == '\\r') || (ch == '\\n')) {\n-\t\t     String line = buff.toString();\n-\t\t     buff.setLength(0);\n-\t\t     log(line, Project.MSG_INFO);\n-\t\t     if (first) {\n-\t\t\t if (!line.startsWith(\"OK -\")) {\n-\t\t\t     error = line;\n+\t\t     // in Win \\r\\n would cause handleOutput() to be called\n+\t\t     // twice, the second time with an empty string,\n+\t\t     // producing blank lines\n+\t\t     if (buff.length() > 0) {\n+\t\t\t String line = buff.toString();\n+\t\t\t buff.setLength(0);\n+\t\t\t if (first) {\n+\t\t\t     if (!line.startsWith(\"OK -\")) {\n+\t\t\t\t error = line;\n+\t\t\t\t msgPriority = Project.MSG_ERR;\n+\t\t\t     }\n+\t\t\t     first = false;\n\t\t\t }\n-\t\t\t first = false;\n+\t\t\t handleOutput(line, msgPriority);\n\t\t     }\n\t\t } else {\n\t\t     buff.append((char) ch);\n\t\t }\n\t     }\n\t     if (buff.length() > 0) {\n-\t\t log(buff.toString(), Project.MSG_INFO);\n+\t\t handleOutput(buff.toString(), msgPriority);\n\t     }\n-\t     if (error != null) {\n+\t     if (error != null && isFailOnError()) {\n\t\t throw new BuildException(error);\n\t     }\n-\n\t } catch (Throwable t) {\n-\t     throw new BuildException(t);\n+\t     if (isFailOnError()) {\n+\t\t throw new BuildException(t);\n+\t     } else {\n+\t\t handleErrorOutput(t.getMessage());\n+\t     }\n\t } finally {\n+\t     closeRedirector();\n\t     if (reader != null) {\n\t\t try {\n\t\t     reader.close();\nIndex: UndeployTask.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-catalina/catalina/src/share/org/apache/catalina/\nant/UndeployTask.java,v\nretrieving revision 1.4\ndiff -u -r1.4 UndeployTask.java\n--- UndeployTask.java\t30 Aug 2004 19:52:51 -0000\t1.4\n+++ UndeployTask.java\t23 Dec 2004 11:55:25 -0000\n@@ -33,29 +33,6 @@\n\n\n     // -------------------------------------------------------------\nProperties\n-    /**\n-     * Whether to fail (with a BuildException) if\n-     * an error occurs.  The default behavior is\n-     * to do so.\n-     */\n-    protected boolean failOnError = true;\n-\n-    /**\n-     * Returns the value of the failOnError\n-     * property.\n-     */\n-    public boolean isFailOnError() {\n-      return failOnError;\n-    }\n- \n-    /**\n-     * Sets the value of the failOnError property.\n-     *\n-     * @param newFailOnError New attribute value\n-     */\n-    public void setFailOnError(boolean newFailOnError) {\n-      failOnError = newFailOnError;\n-    }\n\n     /**\n      * The context path of the web application we are managing.\n@@ -87,14 +64,7 @@\n\t\t (\"Must specify 'path' attribute\");\n\t }\n\n-\t try {\n-\t   execute(\"/undeploy?path=\" + this.path);\n-\t} catch (BuildException e) {\n-\t  if( isFailOnError() ) {\n-\t    throw e;\n-\t   }\n-\t }\n-\n+\t execute(\"/undeploy?path=\" + this.path);\n     }\n\n\nIndex: ValidatorTask.java\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-catalina/catalina/src/share/org/apache/catalina/\nant/ValidatorTask.java,v\nretrieving revision 1.8\ndiff -u -r1.8 ValidatorTask.java\n--- ValidatorTask.java\t26 Jun 2004 17:41:33 -0000\t1.8\n+++ ValidatorTask.java\t23 Dec 2004 11:55:25 -0000\n@@ -40,7 +40,7 @@\n  * @since 5.0\n  */\n\n-public class ValidatorTask extends Task {\n+public class ValidatorTask extends BaseRedirectorHelperTask {\n\n\n     // ----------------------------------------------------- Instance\nVariables\n@@ -97,11 +97,16 @@\n\t     InputSource is = new InputSource(file.toURL().toExternalForm());\n\t     is.setByteStream(stream);\n\t     digester.parse(is);\n-\t     System.out.println(\"web.xml validated\");\n+\t     handleOutput(\"web.xml validated\");\n\t } catch (Throwable t) {\n-\t     throw new BuildException(\"Validation failure\", t);\n+\t     if (isFailOnError()) {\n+\t\t throw new BuildException(\"Validation failure\", t);\n+\t     } else {\n+\t\t handleErrorOutput(\"Validation failure: \" + t);\n+\t     }\n\t } finally {\n\t     Thread.currentThread().setContextClassLoader(oldCL);\n+\t     closeRedirector();\n\t }\n\n     }",
            "date": "20041223T13:30:59",
            "id": 3
        },
        {
            "author": null,
            "body": "Comment on attachment 13822\nRedirector helper task\n\n/*\n * Copyright 2002,2004 The Apache Software Foundation.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *\thttp://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage org.apache.catalina.ant;\n\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport org.apache.tools.ant.BuildException;\nimport org.apache.tools.ant.Project;\nimport org.apache.tools.ant.Task;\nimport org.apache.tools.ant.taskdefs.Redirector;\nimport org.apache.tools.ant.types.RedirectorElement;\n\n\n/**\n * Abstract base class to add output redirection support for Catalina\n * Ant tasks. These tasks require Ant 1.5 or later.\n * <br>\n * <strong>WARNING:</strong> due to depends chain, Ant could call a Task \n * more than once and this can affect the output redirection when configured.\n * If you are collecting the output in a property, it will collect the output\n * of only the first run, since Ant properties are immutable and once created\n * they cannot be changed.\n * <br>\n * If you are collecting output in a file the file will be overwritten with the\n * output of the last run, unless you set append=\"true\", in which case each run \n * will append it's output to the file.\n * \n *\n * @author Gabriele Garuglieri\n * @version $Revision$ $Date$\n * @since 5.5\n */\n\npublic abstract class BaseRedirectorHelperTask extends Task {\n\n    // ------------------------------------------------------------- Properties\n\n    /** Redirector helper */\n    protected Redirector redirector = new Redirector(this);\n    //protected Redirector redirector = null;\n    /** Redirector element for this task */\n    protected RedirectorElement redirectorElement = null;\n    /** The stream for info output */\n    protected OutputStream redirectOutStream = null;\n    /** The stream for error output */\n    protected OutputStream redirectErrStream = null;\n    /** The print stream for info output */\n    PrintStream redirectOutPrintStream = null;\n    /** The print stream for error output */\n    PrintStream redirectErrPrintStream = null;\n\n   /**\n     * Whether to fail (with a BuildException) if\n     * ManagerServlet returns an error. The default behavior is\n     * to do so.\n     * <b>\n     * This flag does not control parameters checking. If the task is called\n     * with wrong or invalid parameters, it will throw BuildException\n     * independently from the setting of this flag.\n     */    \n    protected boolean failOnError = true;\n\n    /** \n      * <code>true</code> true when output redirection is requested for this\ntask .\n      * Default is to log on Ant log.\n      */    \n    protected boolean redirectOutput = false;\n\n    /** \n      * will be set to <code>true</code> when the configuration of the\nRedirector is\n      * complete.\n      */    \n    protected boolean redirectorConfigured = false;\n\n    /** \n     * Flag which indicates that, if redirected, output should also be \n     * always sent to the log. Default is that otput is sent only to\n     * redirected streams.\n     */\n    protected boolean alwaysLog = false;\n\n    /**\n     * Whether to fail (with a BuildException) if\n     * ManagerServlet returns an error.  The default behavior is\n     * to do so.\n     */\n    public void setFailonerror(boolean fail) {\n\tfailOnError = fail;\n    }\n\n    /**\n     * Returns the value of the failOnError\n     * property.\n     */\n    public boolean isFailOnError() {\n      return failOnError;\n    }\n\n    /**\n     * File the output of the task is redirected to.\n     *\n     * @param out name of the output file\n     */\n    public void setOutput(File out) {\n\tredirector.setOutput(out);\n\tredirectOutput = true;\n    }\n\n    /**\n     * File the error output of the task is redirected to.\n     *\n     * @param error name of the error file\n     *\n     */\n    public void setError(File error) {\n\tredirector.setError(error);\n\tredirectOutput = true;\n    }\n\n    /**\n     * Controls whether error output is logged. This is only useful\n     * when output is being redirected and error output is desired in the\n     * Ant log\n     *\n     * @param logError if true the standard error is sent to the Ant log system\n     *\t      and not sent to output stream.\n     */\n    public void setLogError(boolean logError) {\n\tredirector.setLogError(logError);\n\tredirectOutput = true;\n    }\n\n    /**\n     * Property name whose value should be set to the output of\n     * the task.\n     *\n     * @param outputProperty property name\n     *\n     */\n    public void setOutputproperty(String outputProperty) {\n\tredirector.setOutputProperty(outputProperty);\n\tredirectOutput = true;\n    }\n\n    /**\n     * Property name whose value should be set to the error of\n     * the task..\n     *\n     * @param errorProperty property name\n     *\n     */\n    public void setErrorProperty(String errorProperty) {\n\tredirector.setErrorProperty(errorProperty);\n\tredirectOutput = true;\n    }\n\n    /**\n     * If true, append output to existing file.\n     *\n     * @param append if true, append output to existing file\n     *\n     */\n    public void setAppend(boolean append) {\n\tredirector.setAppend(append);\n\tredirectOutput = true;\n    }\n\n    /**\n     * If true, (error and non-error) output will be redirected\n     * as specified while being sent to Ant's logging mechanism as if no\n     * redirection had taken place.  Defaults to false.\n     * <br>\n     * Actually handled internally, with Ant 1.6.3 it will be handled by\n     * the <code>Redirector</code> itself.\n     * @param alwaysLog <code>boolean</code>\n     */\n    public void setAlwaysLog(boolean alwaysLog) {\n\tthis.alwaysLog = alwaysLog;\n\t//redirector.setAlwaysLog(alwaysLog);\n\tredirectOutput = true;\n    }\n\n    /**\n     * Whether output and error files should be created even when empty.\n     * Defaults to true.\n     * @param createEmptyFiles <CODE>boolean</CODE>.\n     */\n    public void setCreateEmptyFiles(boolean createEmptyFiles) {\n\tredirector.setCreateEmptyFiles(createEmptyFiles);\n\tredirectOutput = true;\n    }\n\n    /**\n     * Add a <CODE>RedirectorElement</CODE> to this task.\n     * @param redirectorElement   <CODE>RedirectorElement</CODE>.\n     */\n    public void addConfiguredRedirector(RedirectorElement redirectorElement) {\n\tif (this.redirectorElement != null) {\n\t    throw new BuildException(\"Cannot have > 1 nested <redirector>s\");\n\t} else {\n\t    this.redirectorElement = redirectorElement;\n\t}\n    }\n\n    /**\n     * Set up properties on the Redirector from RedirectorElement if present.\n     */\n    private void configureRedirector() {\n\tif (redirectorElement != null) {\n\t    redirectorElement.configure(redirector);\n\t    redirectOutput = true;\n\t}\n\t/*\n\t * Due to depends chain, Ant could call the Task more than once,\n\t * this is to prevent that we attempt to configure uselessly\n\t * more than once the Redirector.\n\t */\n\tredirectorConfigured = true;\n    }\n\n    /**\n     * Set up properties on the Redirector and create output streams.\n     */\n    protected void openRedirector() {\n\tif (! redirectorConfigured) {\n\t    configureRedirector();\n\t}\n\tif (redirectOutput) {\n\t    redirector.createStreams();\n\t    redirectOutStream = redirector.getOutputStream();\n\t    redirectOutPrintStream = new PrintStream(redirectOutStream);\n\t    redirectErrStream = redirector.getErrorStream();\n\t    redirectErrPrintStream = new PrintStream(redirectErrStream);\n\t}\n   }\n\n    /**\n     * Ask redirector to close all the streams. It is necessary to call this\nmethod\n     * before leaving the Task to have the Streams flush their contents. If you\nare \n     * collecting output in a property, it will be created only if this method\nis\n     * called, otherwise you'll find it unset.\n     */\n    protected void closeRedirector() {\n\ttry {\n\t    if (redirectOutput) {\n\t\tredirector.complete();\n\t    }\n\t} catch (IOException ioe) {\n\t    log(\"Error closing redirector: \"\n\t\t+ ioe.getMessage(), Project.MSG_ERR);\n\t}\n\t/*\n\t * Due to depends chain, Ant could call the Task more than once,\n\t * this is to prevent that we attempt to reuse the previuosly \n\t * closed Streams.\n\t */\n\tredirectOutStream = null;\n\tredirectOutPrintStream = null;\n\tredirectErrStream = null;\n\tredirectErrPrintStream = null;\n    }\n\n    /**\n     * Handles output with the INFO priority.\n     *\n     * @param output The output to log. Should not be <code>null</code>.\n     */\n    protected void handleOutput(String output) {\n\tif (redirectOutput) {\n\t    if (redirectOutPrintStream == null) {\n\t\topenRedirector();\n\t    }\n\t    redirectOutPrintStream.println(output);\n\t    if (alwaysLog) {\n\t\tlog(output, Project.MSG_INFO);\n\t    }\n\t} else { \n\t    log(output, Project.MSG_INFO);\n\t}\n    }\n\n    /**\n     * Handles output with the INFO priority and flushes the stream.\n     *\n     * @param output The output to log. Should not be <code>null</code>.\n     *\n     */\n    protected void handleFlush(String output) {\n\thandleOutput(output);\n\tredirectOutPrintStream.flush();\n    }\n\n    /**\n     * Handles error output with the ERR priority.\n     *\n     * @param output The error output to log. Should not be <code>null</code>.\n     */\n    protected void handleErrorOutput(String output) {\n\tif (redirectOutput) {\n\t    if (redirectErrPrintStream == null) {\n\t\topenRedirector();\n\t    }\n\t    redirectErrPrintStream.println(output);\n\t    if (alwaysLog) {\n\t\tlog(output, Project.MSG_ERR);\n\t    }\n\t} else { \n\t    log(output, Project.MSG_ERR);\n\t}\n    }\n\n    /**\n     * Handles error output with the ERR priority and flushes the stream.\n     *\n     * @param output The error output to log. Should not be <code>null</code>.\n     *\n     */\n    protected void handleErrorFlush(String output) {\n\thandleErrorOutput(output);\n\tredirectErrPrintStream.flush();\n    }\n\n    /**\n     * Handles output with ERR priority to error stream and all other\n     * pritorities to output stream.\n     *\n     * @param output The output to log. Should not be <code>null</code>.\n     */\n    protected void handleOutput(String output, int priority) {\n\tif (priority == Project.MSG_ERR) {\n\t    handleErrorOutput(output);\n\t} else {\n\t    handleOutput(output);\n\t}\n    }\n\n    /**\n     * Handles output with ERR priority to error stream and all other\n     * pritorities to output stream, then flushes the stream.\n     *\n     * @param output The output to log. Should not be <code>null</code>.\n     */\n    protected void handleFlush(String output, int priority) {\n\tif (priority == Project.MSG_ERR) {\n\t    handleErrorFlush(output);\n\t} else {\n\t    handleFlush(output);\n\t}\n    }\n\n}",
            "date": "20041223T13:31:55",
            "id": 4
        },
        {
            "author": null,
            "body": "Sorry, i think i made a bit of mess...\nI thougth i could edit the attachment in place.\n\nI made a couple of changes to the patch:\n1- i moved the failOnError support from AbstractCatalinaTask  to\nBaseRedirectorHelperTask because the ValidatorTask does not extend\nAbstractCatalinaTask.\n2- depending on how the build targets dependency chains are laid out, a task may\nbe called more than once. I know it doesn't make any sense to call a Catalina\ntask more than once, but should it happen, i have added some checks so that it\nwon't blow out with NPE like it was doing the first version.\nSome comments have been added on how calling more than once a redirected task\nmay affect the output.\n\nSorry again for the mistake, if you want that i resubmit the patch as an\nattchment please ask.\n",
            "date": "20041223T13:45:51",
            "id": 5
        },
        {
            "author": null,
            "body": "That would be better, as some EOLs seem to have been mangled.",
            "date": "20041223T15:23:20",
            "id": 6
        },
        {
            "author": null,
            "body": "Created attachment 13837\nPatch to existing tasks\n\nUpdated patch.",
            "date": "20041223T15:51:00",
            "id": 7
        },
        {
            "author": null,
            "body": "Created attachment 13838\nRedirector helper Task\n\nUpdated new Task.\nBy the way, if you need anything i'll be at my workplace till tomorrow, then\ni'll leave for a couple of weeks of vacation.\nMy best wishes for a Joieux Noel to you and family.\nGabriele",
            "date": "20041223T15:55:18",
            "id": 8
        },
        {
            "author": null,
            "body": "All right, I committed the patch (I couldn't do it earlier, sorry), which looked\ngood.\n\nHappy new year.",
            "date": "20050103T17:22:25",
            "id": 9
        },
        {
            "author": null,
            "body": "I'm reopening to post, as promised, the updated doc for this enhancement.\nI'm sorry i didn't make it in time for 5.5.7 release, but i've been rather busy\nwith my real job lately.",
            "date": "20050131T12:50:27",
            "id": 10
        },
        {
            "author": null,
            "body": "Created attachment 14141\nPatch for manager-howto.xml\n\nI tried to be as accurate as possible, but english is not my mother's language,\nso please have a check to syntax and grammatic :)",
            "date": "20050131T12:53:51",
            "id": 11
        },
        {
            "author": null,
            "body": "Thanks, I've committed it.",
            "date": "20050131T13:19:48",
            "id": 12
        }
    ],
    "component": "Catalina",
    "description": "I'm submitting a patch to Catalina Ant task to add Redirector and failOnError\nsupport, so that Manager and JMX commands output can be captured in files or Ant\nproperties to ease Ant task automation.\nThe change is transparent to the casual user, because if the Redirector support\nis not configured nothing changes in the usual task behaviour.\n\nIf the patch is accepted i'll update the tasks documentation accordingly.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "32800",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "RFE",
    "priority": "P2 enhancement",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Add Redirector and failOnError support for Catalina Ant tasks",
    "systemSpecification": true,
    "version": "5.5.6"
}