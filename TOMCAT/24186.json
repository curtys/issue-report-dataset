{
    "comments": [
        {
            "author": null,
            "body": "Created attachment 8777\npatch as attachment",
            "date": "20031028T17:49:02",
            "id": 0
        },
        {
            "author": null,
            "body": "Thanks for the patch.  Applied.",
            "date": "20031028T19:23:30",
            "id": 1
        }
    ],
    "component": "Jasper",
    "description": "In an embedded setting it may be desirable to load and unload Jasper in an own\nclassloader. This is impossible with Jasper right now without a memory leak.\no.a.j.c.Compiler sets System.err to an instance of o.a.j.u.SystemLogHandler in\nits static initializer and never reset it. A new instance of Jasper will pick up\nthis instance as its 'wrapped' PrintStream and so on ...\n\nThis way, System.err retains a reference chain to each incarnation of\nSystemLogHandler and the whole classloader cannot be unloaded. \n\nI propose to move the redirection to the JspRuntimeContext constructor and to\nundo it in JspRuntimeContext#destroy. With that change, Jasper can be unloaded\nwithout memory leak. Actually, since Jasper uses Ant for compilation which seems\nto support System.{out,err} redirect, it is not clear to me why the\nSystemLogHandler is in there (legacy?).\n\nWorkaround: manually reset System.err on unload.\n\npatch against current CVS:\n\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-jasper/jasper2/src/share/org/apache/jasper/compiler/Compiler.java,v\nretrieving revision 1.71\ndiff -u -r1.71 Compiler.java\n--- compiler/Compiler.java      1 Oct 2003 22:44:02 -0000       1.71\n+++ compiler/Compiler.java      28 Oct 2003 17:38:06 -0000\n@@ -98,12 +98,6 @@\n     // ----------------------------------------------------------------- Static\n \n \n-    static {\n-\n-        System.setErr(new SystemLogHandler(System.err));\n-\n-    }\n-\n     // Some javac are not thread safe; use a lock to serialize compilation, \n     static Object javacLock = new Object();\n\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-jasper/jasper2/src/share/org/apache/jasper/compiler/JspRuntimeContext.java,v\nretrieving revision 1.16\ndiff -u -r1.16 JspRuntimeContext.java\n--- compiler/JspRuntimeContext.java     2 Sep 2003 21:39:58 -0000       1.16\n+++ compiler/JspRuntimeContext.java     28 Oct 2003 17:38:06 -0000\n@@ -82,6 +82,7 @@\n import org.apache.jasper.Constants;\n import org.apache.jasper.JspCompilationContext;\n import org.apache.jasper.Options;\n+import org.apache.jasper.util.SystemLogHandler;\n import org.apache.jasper.runtime.JspFactoryImpl;\n import org.apache.jasper.security.SecurityClassLoad;\n import org.apache.jasper.servlet.JspServletWrapper;\n@@ -125,6 +126,8 @@\n      */\n     public JspRuntimeContext(ServletContext context, Options options) {\n \n+        System.setErr(new SystemLogHandler(System.err));\n+\n         this.context = context;\n         this.options = options;\n \n@@ -271,7 +274,10 @@\n     /**\n      * Process a \"destory\" event for this web application context.\n      */                                                        \n-    public void destroy() {                                    \n+    public void destroy() {\n+\n+        if(System.err instanceof SystemLogHandler)\n+            System.setErr(((SystemLogHandler)System.err).getWrapped());\n \n         threadStop();\n\n\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-jasper/jasper2/src/share/org/apache/jasper/util/SystemLogHandler.java,v\nretrieving revision 1.2\ndiff -u -r1.2 SystemLogHandler.java\n--- util/SystemLogHandler.java  2 Sep 2003 21:40:00 -0000       1.2\n+++ util/SystemLogHandler.java  28 Oct 2003 17:38:06 -0000\n@@ -79,7 +79,7 @@\n      */\n     public SystemLogHandler(PrintStream wrapped) {\n         super(wrapped);\n-        out = wrapped;\n+        this.wrapped = wrapped;\n     }\n \n \n@@ -89,7 +89,7 @@\n     /**\n      * Wrapped PrintStream.\n      */\n-    protected PrintStream out = null;\n+    protected PrintStream wrapped = null;\n \n \n     /**\n@@ -107,6 +107,10 @@\n     // --------------------------------------------------------- Public Methods\n \n \n+    public PrintStream getWrapped() {\n+      return wrapped;\n+    }\n+\n     /**\n      * Start capturing thread's output.\n      */\n@@ -142,7 +146,7 @@\n     protected PrintStream findStream() {\n         PrintStream ps = (PrintStream) streams.get(Thread.currentThread());\n         if (ps == null) {\n-            ps = out;\n+            ps = wrapped;\n         }\n         return ps;\n     }",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "24186",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Jasper SystemLogHandler memory leak",
    "systemSpecification": true,
    "version": "5.0.14"
}