{
    "comments": [
        {
            "author": null,
            "body": "java.util.logging.FileHandler extends java.util.logging.StreamHandler. The\nno-args constructors for these two classes both make a call to the configure()\nmethod, which is why you see two TivoliFormatters created when the tivoli\nhandler is set up. This shouldn't cause duplication, though; the first formatter\nto be created is simply discarded, and only the second is used.\n\nCould you give more information about your setup? I can't duplicate this\nproblem. Is that your entire logging.properties file? How does your code use the\nlogger?\n\nIf I put these lines into a test servlet:\n\n    Logger logger = Logger.getLogger(\"\");\n    logger.severe(\"Handlers: \" + Arrays.asList(logger.getHandlers()));\n\nand make a request to it (using your logging.properties file), the console shows\nthat the root logger has two handlers (both FileHandlers).\n",
            "date": "20070411T12:13:48",
            "id": 0
        },
        {
            "author": null,
            "body": "More Infos:\n* The bug does not appear when all our classes are in the bootclasspath\n  (as we do for testing via eclipse)\n  but only when deployed as war/jar\n\n* We use a root context and deploy it as ROOT.war\n  (although this is not really documented as beeing supported this way)\n\n* The TivoliFormatter has only a default Constructor\n\nThe first usage that was duplicated works as follows:\n\npublic class ProductContextListener implements ServletContextListener {\n\n  private static Logger log = Logger.getLogger(ProductContextListener\n.class.getName());\n\n  ...\n  public void contextInitialized(ServletContextEvent anEvent) {\n    ...\n    log.info(\"Starting Product Version \" + version);\n    ...\n  }\n}\n\nOur global logging.properties is as follows:\n\n--------------%<---------------%<-----------------\nhandlers = 1catalina.java.util.logging.FileHandler\n\n# Handlers for the root logger\n.handlers = 1catalina.java.util.logging.FileHandler\n\n1catalina.java.util.logging.FileHandler.level = INFO\n1catalina.java.util.logging.FileHandler.pattern = /var/log/ucs/catalina%g.log\n# limit Output to 1MB\n1catalina.java.util.logging.FileHandler.limit=1048576\n# Limit rotation to 10 Logs ...\n1catalina.java.util.logging.FileHandler.count=10\n# 1catalina.java.util.logging.FileHandler.append=true\n1catalina.java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter\n--------------%<---------------%<-----------------\n\nOur server XML is as follows:\n\n--------------%<---------------%<-----------------\n<Server port=\"8005\" shutdown=\"****\">\n  <!-- server.xml for deployed tomcat 5 -->\n  <Service name=\"Product\">\n \t<Connector port=\"8080\" \n\t\t       maxKeepAliveRequests=\"100000\"\n               maxThreads=\"200\" minSpareThreads=\"20\" maxSpareThreads=\"100\"\n               enableLookups=\"false\"  acceptCount=\"20\" />\n    <Engine name=\"Product\" defaultHost=\"localhost\">\n      <Host name=\"localhost\" appBase=\"webapps\" >\n        <Context path=\"\"\n                 cookies=\"false\"\n                 docBase=\"ROOT.war\"\n                 cachingAllowed=\"false\"\n                 processTlds=\"false\"\n                 unpackWAR=\"true\"\n                 reloadable=\"false\">\n             <Manager pathname=\"\" />\n         </Context>\n      </Host>\n    </Engine>\n  </Service>\n</Server>\n\n--------------%<---------------%<-----------------\n\nHmm, perhaps the Problem happens when using a \nROOT <Context path=\"\" ../> only ?\n\nweb.xml was copied from tomcat 5.5.20\n\nWe use the following properties (in eclipse)\nto start tomcat. \n\n---------------%<-----------------%<-----------------------\n-Dcatalina.home=\"${TOMCAT5}\"\n-Dcatalina.base=\"${workspace_loc:de.customer.product}/ext/tomcat5\" \n-Djava.endorsed.dirs=\"${TOMCAT5}}/common/endorsed\"\n-Djava.io.tmpdir=\"${TOMCAT5}/temp\"\n-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n-Djava.util.logging.config.file=\"${workspace_loc:de.customer.product}/ext/tomcat5/conf/logging.properties\"\n---------------%<-----------------%<-----------------------\n\nOn linux we use a similar init.d script:\n\n---------------%<-----------------%<-----------------------\n\nOn linux we use a similar init.d script:\n\n#!/bin/sh\n#\n# Startup script for product UserConfigurationSystem\n# $Id: product,v 1.7 2007/04/10 08:53:50 kha Exp $\n#          \n# /etc/init.d/product\n#\n### BEGIN INIT INFO\n# Provides:          product\n# Required-Start:    mysql\n# Default-Start:     3 5\n# Default-Stop:      0 1 2 6\n# Short-Description: product - Our super duper product\n# Description:       A Small tomcat based web-app as XML-RPCProvider\n# \tagainst a fat MySQL Database\n### END INIT INFO\n# \n# Check for missing binaries (stale symlinks should not happen)\n# Note: Special treatment of stop for LSB conformance\nCATALINA_HOME=/opt/app/product/apache-tomcat\nCATALINA_BASE=/opt/app/product/service\nCATALINA_BIN=$CATALINA_HOME/bin/catalina.sh\ntest -x $FOO_BIN || { echo \"$CATALINA_BIN not installed\"; \n\tif [ \"$1\" = \"stop\" ]; then exit 0;\n\telse exit 5; fi; }\n\nJAVA_HOME=/usr/java/jdk1.5.0_11\nJRE_HOME=$JAVA_HOME/jre\nCATALINA_OPTS=\nUSER=product\nCATALINA_OPTS=-Dde.customer.product.confDir=/etc/product\nCATALINA_OPTS=\"$CATALINA_OPTS\n-Xbootclasspath/a:/opt/app/product/service/lib/product-tivoli.jar\"\n# CATALINA_OPTS=\"$CATALINA_OPTS -ea -esa -Xdebug\n-Xrunjdwp:transport=dt_socket,address=9099,server=y,suspend=n\"\nCATALINA_TMPDIR=/var/opt/app/product/tmp\n\nsu - $USER -c \"export JAVA_HOME=$JAVA_HOME;\\\n\t       export JRE_HOME=$JRE_HOME;\\\n\t       export CATALINA_OPTS='$CATALINA_OPTS';\\\n\t       export JAVA_OPTS='$JAVA_OPTS';\\\n\t       export CATALINA_HOME=$CATALINA_HOME;\\\n\t       export CATALINA_BASE=$CATALINA_BASE;\\\n\t       export CATALINA_TMPDIR=$CATALINA_TMPDIR;\\\n\t       $CATALINA_HOME/bin/catalina.sh $1\"\n---------------%<-----------------%<-----------------------\n\nThats all I can give you so far, as we must \ndeliver the product next week ;-)\n\n\n\n\n\n    ",
            "date": "20070411T23:19:52",
            "id": 1
        },
        {
            "author": null,
            "body": "The problem was trivial (handlers for the root logger are added twice if they\nare specified using .handlers). Workaround: remove .handlers (what's the purpose\nexactly if it's the same as handlers; of course, I suppose it has the same\npurpose as that Context element in the server.xml).",
            "date": "20070412T08:38:46",
            "id": 2
        },
        {
            "author": null,
            "body": "Thanks for the Workaround:\n\nAs I Understand it:\n\nhandlers - configures all availeable Handlers\n.handlers - are the Handlers for the root-logger\n\ne.g.\norg.apache.tomcat.handlers \n  - would be handlers for theses packages only\n\nFeels like the root context is silently used\nas parking area for the handlers ;-)\n\nThanks again",
            "date": "20070413T00:17:42",
            "id": 3
        },
        {
            "author": null,
            "body": "> Feels like the root context is silently used\n> as parking area for the handlers ;-)\n\nThat's how Java Logging works, so JULI is consistent with that - all handlers\ndefined in the \"handlers\" property are automatically added to the root logger.\nIf you want a subset just add a \".handlers\" property listing the subset.",
            "date": "20070414T12:14:39",
            "id": 4
        }
    ],
    "component": "Catalina:Modules",
    "description": "We use the followwing logging.properties in our WebApplication:\n\n----------%<--------------------%<----------------\nhandlers = 1tivoli.java.util.logging.FileHandler,\n2product.java.util.logging.FileHandler\n\n# Handlers for the root logger\n.handlers = 1tivoli.java.util.logging.FileHandler,\n2product.java.util.logging.FileHandler\n\n1tivoli.java.util.logging.FileHandler.level = INFO\n1tivoli.java.util.logging.FileHandler.pattern = /var/log/product/tivoli%g.log\n# limit Output to 1MB\n1tivoli.java.util.logging.FileHandler.limit=1048576\n# Limit rotation to 10 Logs ...\n1tivoli.java.util.logging.FileHandler.count=10\n1tivoli.java.util.logging.FileHandler.append=true\n1tivoli.java.util.logging.FileHandler.formatter=de.customer.product.tivoli.TivoliFormatter\n\n2product.java.util.logging.FileHandler.level = FINEST\n2product.java.util.logging.FileHandler.pattern = /var/log/product/product%g.log\n# limit Output to 1MB\n2product.java.util.logging.FileHandler.limit=1048576\n# Limit rotation to 5 Logs ...\n2product.java.util.logging.FileHandler.count=5\n2product.java.util.logging.FileHandler.append=true\n2product.java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter\n----------%<--------------------%<----------------\n\nWhen using apache-tomcat-5.5.23 every Line in the Logfiles\nis duplicated. Debugging I found that the TivoliFormatter \nis actually created twice. And the root-logger has actually\n4 Handlers and not two as intended. This does not allow us an\nupgrade beyond 5.5.20.\n\nFound on Linux64Bit and Windows-XP, both with JDK 1.5_R11",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "42085",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "P3 regression",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "java.util.Logging duplicated since 5.5.23.  5.5.20 is OK",
    "systemSpecification": false,
    "version": "5.5.23"
}