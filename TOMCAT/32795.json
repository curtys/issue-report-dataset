{
    "comments": [
        {
            "author": null,
            "body": "This behaviour is clearly documented.\n\n<quote>\nWARNING: Using this valve has side-effects. The output from this valve \nincludes any parameters included with the request. The parameters will be \ndecoded using the default platform encoding. Any subsequent calls to \nrequest.setCharacterEncoding() within the web application will have no effect.\n</quote>\n\nChanging the status of this to an enhancement request.",
            "date": "20041222T20:29:01",
            "id": 0
        },
        {
            "author": null,
            "body": "you can use a class like follow,then set fllow coment in your server.xml\n(you)\nFirst,the xml config:\n----------------------------\n<Valve className=\"org.apache.catalina.valves.CharSetValve\" encoding=\"GBK\"/>\n<!--this is must before fllow-->\n <Valve className=\"org.apache.catalina.valves.RequestDumperValve\"/>\n----------------------------\nyou should place this classfile in\n%TOMCATHOME%\\server\\classes\\org\\apache\\catalina\\valves\neg: \"D:\\jakarta-tomcat-5.5.7\n\\server\\classes\\org\\apache\\catalina\\valves\\CharSetValve.class\"\n\n\n\nthe java code :\n\n-----------------\n\npackage org.apache.catalina.valves;\n\nimport java.io.*;\nimport javax.servlet.*;\n\nimport org.apache.catalina.*;\nimport org.apache.catalina.connector.*;\nimport org.apache.catalina.util.*;\n\n/**\n * <p>Title: CharSetValve </p>\n * <p>Description: a CharSet Filter for Tomcat Application</p>\n * <p>Copyright: Apache License Version 2.0  </p>\n * <p>Company: lizongbo</p>\n * @author lizongbo @ gmail.com\n * @version 1.0\n */\npublic class CharSetValve\n    extends ValveBase implements Lifecycle {\n  public CharSetValve() {\n    super();\n  }\n\n  protected LifecycleSupport lifecycle = new LifecycleSupport(this);\n\n  private StringManager sm =\n      StringManager.getManager(Constants.Package);\n\n  private boolean started = false;\n  private String encoding = System.setProperty(\"file.encoding\", \"GBK\");\n\n  public String getEncoding() {\n    return encoding;\n  }\n\n  public void setEncoding(String encoding) {\n    this.encoding = encoding;\n  }\n\n  public void invoke(Request request, Response response) throws IOException,\n      ServletException {\n    request.getRequest().setCharacterEncoding(getEncoding());\n    getNext().invoke(request, response);\n\n  }\n\n  public void addLifecycleListener(LifecycleListener listener) {\n    lifecycle.addLifecycleListener(listener);\n  }\n\n  public LifecycleListener[] findLifecycleListeners() {\n    return lifecycle.findLifecycleListeners();\n\n  }\n\n  public void removeLifecycleListener(LifecycleListener listener) {\n\n    lifecycle.removeLifecycleListener(listener);\n\n  }\n\n  public void start() throws LifecycleException {\n\n    if (started) {\n      throw new LifecycleException\n          (sm.getString(\"accessLogValve.alreadyStarted\"));\n    }\n\n  }\n\n  public void stop() throws LifecycleException {\n    if (!started) {\n      throw new LifecycleException\n          (sm.getString(\"accessLogValve.notStarted\"));\n    }\n    lifecycle.fireLifecycleEvent(STOP_EVENT, null);\n    started = false;\n\n  }\n}\n\n-------------------------------\n\n\nalso you can see:\n\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=33632\n\nmaybe useful:)\n\nenjoy it!!!  ^_^ \n\n",
            "date": "20050219T04:04:43",
            "id": 1
        }
    ],
    "component": "Catalina",
    "description": "In Tomcat container that enabled the RequestDumperValve valve, \nrequest.setCharacterEncoding \nmethod doesn't affect the behavior of request.getParameter method, so servlet \nor jsp \ncannot correctly get any multi-byte characters contained in the request \nparameter.\nOn the other hand, if the RequestDumperValve valve is disabled, the request \nparameter that contains multi-byte characters is done correctly.\n\nThis issue occurs in both GET and POST requests, and also Tomcat 4.1.31 \nrelease.\n\nRoot cause:\nIt seems that the logging processes of the request infomations are worked in \nRequestDumperValve, before calling servlet, jsp, and filter.\nIn that case, naturally, the request character encoding contained in them is \nnull value and RequestDumperValve prints out it, and it also prints out an \ninformation about request parameters.\nThen, any request parameters are initially parsed by default encoding \n(=8859_1), \nbecause character encoding of request is null.\n\nIn CoyoteRequest, when the method to get request parameter is called, parsing \nof \nrequest parameters is processed for only one time.\nAfter this initial parsing of request parameters, the setter method of request \ncharacter encoding doesn't affect the behavior of getter methods of request \nparameter at all.\n\nFor that reason, even if the setter method of request character encoding is \noften \ninvoked in servlet or jsp, or filter, the request parameter value that was \ninitially parsed by default encoding is always returned.\n\nWorkaround:\nCustomize and substitute the filter class equivalent to the RequestDumperValve \nvalve.\nRequestDumperFilter class contained in examples application is a good guide.\n\n\nRegards,\nKan Ogawa",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "32795",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "P2 enhancement",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "If RequestDumperValve is enabled, the request parameter value parsed by default character encoding is always returned.",
    "systemSpecification": false,
    "version": "5.0.30"
}