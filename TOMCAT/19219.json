{
    "comments": [
        {
            "author": null,
            "body": "Created attachment 5953\nThe first version of the test web module",
            "date": "20030422T15:18:02",
            "id": 0
        },
        {
            "author": null,
            "body": "Created attachment 5954\nThe second version of the test web module",
            "date": "20030422T15:18:35",
            "id": 1
        },
        {
            "author": null,
            "body": "Many file locking issues were fixed, and this should make this kind of webapp\nupdate scenario work a lot better.\n\nHowever, I don't see how the scenario you describe could work reliably (on\nWindows, the JAR could be locked if you try to ovewrite it while the webapp is\nrunning). IMO, you should do:\n- stop webapp\n- update it\n- start webapp\n",
            "date": "20030625T08:25:09",
            "id": 2
        },
        {
            "author": null,
            "body": "Remy, thanks for all the fixes.\n\nAs for whether this scenario can or can not work - I agree it won't work in 100%\nof cases. However documentation:\n\nhttp://jakarta.apache.org/tomcat/tomcat-5.0-doc/appdev/source.html\nhttp://jakarta.apache.org/tomcat/tomcat-5.0-doc/appdev/processes.html\n\nseems to suggest that you should be doing 'compile' and then 'reload'. So do we\nwant to change the documentation to recommend doing 'undeploy', then 'compile'\nand then 'deploy' ?\n\nWhat should Tomcat recommend to the users so development works reliably and\ncorrectly for them ?",
            "date": "20030625T09:52:53",
            "id": 3
        }
    ],
    "component": "Jasper",
    "description": "I am getting the following exception after after reloading an application which\nuses tag libraries. I am using Tomcat 5.0 nightly build 20030421 with JDK 1.4.2\nbeta (I believe this will be reproducible on 1.4.1 as well, though).\n\nI am attaching only the root cause, not the ServletException which wraps it.\nSteps to reproduce are below.\n\n\njava.lang.InternalError: jzentry == 0,\n jzfile = 406263984,\n total = 4,\n name = E:\\software\\tomcat50nightly\\webapps\\taglibtest\\WEB-INF\\lib\\Test1.jar,\n i = 3,\n message = invalid LOC header (bad signature)\n\tat java.util.zip.ZipFile$2.nextElement(ZipFile.java:321)\n\tat java.util.jar.JarFile$1.nextElement(JarFile.java:211)\n\tat\norg.apache.jasper.compiler.TldLocationsCache.processTldsInJar(TldLocationsCache.java:320)\n\tat\norg.apache.jasper.compiler.TldLocationsCache.processTldsInGlobalJars(TldLocationsCache.java:455)\n\tat org.apache.jasper.compiler.TldLocationsCache.init(TldLocationsCache.java:215)\n\tat\norg.apache.jasper.compiler.TldLocationsCache.getLocation(TldLocationsCache.java:188)\n\tat\norg.apache.jasper.JspCompilationContext.getTldLocation(JspCompilationContext.java:557)\n\tat org.apache.jasper.compiler.Parser.parseTaglibDirective(Parser.java:452)\n\tat org.apache.jasper.compiler.Parser.parseDirective(Parser.java:514)\n\tat org.apache.jasper.compiler.Parser.parseElements(Parser.java:1562)\n\tat org.apache.jasper.compiler.Parser.parse(Parser.java:171)\n\tat org.apache.jasper.compiler.ParserController.parse(ParserController.java:248)\n\tat org.apache.jasper.compiler.ParserController.parse(ParserController.java:150)\n\tat org.apache.jasper.compiler.ParserController.parse(ParserController.java:137)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:250)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:458)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:444)\n\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:593)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:300)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:293)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:240)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:288)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n\tat\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:263)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:552)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1017)\n\tat\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:196)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:552)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1017)\n\tat org.apache.catalina.core.StandardContext.invoke(StandardContext.java:2708)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:186)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n\tat\norg.apache.catalina.valves.ErrorDispatcherValve.invoke(ErrorDispatcherValve.java:171)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:149)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:172)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:149)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:552)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1017)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:163)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:552)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1017)\n\tat org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:199)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:630)\n\tat\norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:463)\n\tat org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:568)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:631)\n\tat java.lang.Thread.run(Thread.java:534)\n\n\nThe scenario in which this occurs is basically the following:\n1. Create a web application with a tag library and a JSP which uses this taglib\n2. Run the application in Tomcat (put it to e.g. webapps/taglibtest) and run the JSP\n3. Add a tag to the tag library, use this new tag in the JSP and copy it over to\nTomcat again\n4. Reload the application using the manager application:\nhttp://localhost:8080/manager/reload?path=/taglibtest\n5. Run the JSP again\nThis is basically a consequence of JDK bug 4425695/4843994:\n\nhttp://developer.java.sun.com/developer/bugParade/bugs/4843994.html\nhttp://developer.java.sun.com/developer/bugParade/bugs/4425695.html\n\nI believe it could be fixed by not caching the JarURLConnection in\nTldLocationsCache.processTldsInJar(...) by setting connection.setUseCaches(false).\n\nI am attaching two versions of the web module I tested this with, and steps to\nreproduce with these:\n\n1. Unzip wm1.zip to webapps/taglibtest\n2. Start Tomcat\n3. Run http://localhost:8080/taglibtest/UsesTestTL.jsp\n4. Unzip wm2.zip to webapps/taglibtest\n5. \"Touch\" the UsesTestTL.jsp file, so Jasper reloads it\n6. Reload the application using\nhttp://localhost:8080/manager/reload?path=/taglibtest\n7. Run http://localhost:8080/taglibtest/UsesTestTL.jsp again\nThe exception is displayed in the browser.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "19219",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 major",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Exception from java.util.zip.ZipFile after reloading an application",
    "systemSpecification": true,
    "version": "Nightly Build"
}