{
    "comments": [
        {
            "author": null,
            "body": "FWIW, I have built my own custom jasper-compiler.jar with the two patches I\nmentioned, and it definitively solved my use case.",
            "date": "20070516T18:14:38",
            "id": 0
        },
        {
            "author": null,
            "body": "I've checked the Tomcat 5.5.23 code, and it looks like it exhibits the exact\nsame problem.  I believe that the two patches I listed would solve the problem\nin 5.5.23, as well.",
            "date": "20070518T08:49:48",
            "id": 1
        },
        {
            "author": null,
            "body": "This works for me using the latest 5.5.x code either with Tomcat compiling on\nthe fly or using JspC.\n\nIf you still see this issue, please attach a test WAR file (including source)\nthat demonstrates this issue with a clean 5.5.23 installation.",
            "date": "20070519T10:29:48",
            "id": 2
        },
        {
            "author": null,
            "body": "Created attachment 20224\nTest case WAR\n\nHere is a test case exhibiting the bug.  You need to make sure that the\ntest.tag file is compiled as part of the test.jsp file compilation.  If\ntest.tag is compiled independently first, then the problem will not occur.  The\neasiest way to make sure this is the case is to just clean out your work\ndirectory before loading test.jsp.",
            "date": "20070521T08:17:07",
            "id": 3
        },
        {
            "author": null,
            "body": "Is it possible you weren't using the If tag plugin I specified?  Or is it\npossible that you had precompiled the test.tag file?  The problem only occurs\nwhen you are compiling test.jsp, which in turn results in compilation of\ntest.tag and you are using the If tag plugin.  This is definitely still a bug in\nTomcat 5.5.23.\n\nNote that this is just one example exhibiting the problem.  There are a\nmultitude of other scenarios where this exact same problem can crop up (as it is\nhappening in our production JSP compilation).  I've just simplified the code\ndown to a very easy to trace test case to show exactly where the problem is\nhappening.\n\nIf you have any further questions on how to reproduce the bug, let me know.",
            "date": "20070521T08:20:25",
            "id": 4
        },
        {
            "author": null,
            "body": "Thanks for the WAR. I see the error now. I have applied the Node.java patch to\nsvn and it will be included in the next release of 5.5.x and 6.0.x.\n\nI didn't change Compiler.java as it isn't necessary for this fix.\n\nMany thanks for both the test case and the patch.",
            "date": "20070521T19:31:53",
            "id": 5
        }
    ],
    "component": "Jasper",
    "description": "Here is an example of the bug in its most primitive form:\n\nWEB-INF/jsp/test.jsp:\n===================================\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%>\n<%@ taglib prefix=\"t\" tagdir=\"/WEB-INF/tags\" %>\n\n<jsp:element name=\"a\">\n    <jsp:attribute name=\"href\">http://www.apache.org</jsp:attribute>\n</jsp:element>\n\n<t:test />\n\n<c:if test=\"${true}\">it's true!</c:if>\n===================================\n\nWEB-INF/tags/test.tag:\n===================================\n<%@ tag pageEncoding=\"UTF-8\" body-content=\"scriptless\" %>\ndo nothing\n===================================\n\nWEB-INF/tagPlugins.xml:\n===================================\n<tag-plugins>\n    <tag-plugin>\n      <tag-class>org.apache.taglibs.standard.tag.rt.core.IfTag</tag-class>\n      <plugin-class>org.apache.jasper.tagplugins.jstl.core.If</plugin-class>\n    </tag-plugin>\n</tag-plugins>\n===================================\n\nOnce you run this through Jasper, you will get the following java code:\n===================================\npackage org.apache.jsp.WEB_002dINF.jsp;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport javax.servlet.jsp.*;\n\npublic final class test_jsp extends org.apache.jasper.runtime.HttpJspBase\n    implements org.apache.jasper.runtime.JspSourceDependent {\n\n  private static java.util.List _jspx_dependants;\n\n  static {\n    _jspx_dependants = new java.util.ArrayList(1);\n    _jspx_dependants.add(\"/WEB-INF/tags/test.tag\");\n  }\n\n  private org.apache.jasper.runtime.TagHandlerPool _jspx_tagPool_c_if_test;\n\n  public Object getDependants() {\n    return _jspx_dependants;\n  }\n\n  public void _jspInit() {\n    _jspx_tagPool_c_if_test =\norg.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());\n  }\n\n  public void _jspDestroy() {\n    _jspx_tagPool_c_if_test.release();\n  }\n\n  public void _jspService(HttpServletRequest request, HttpServletResponse response)\n        throws java.io.IOException, ServletException {\n\n    JspFactory _jspxFactory = null;\n    PageContext pageContext = null;\n    HttpSession session = null;\n    ServletContext application = null;\n    ServletConfig config = null;\n    JspWriter out = null;\n    Object page = this;\n    JspWriter _jspx_out = null;\n    PageContext _jspx_page_context = null;\n\n\n    try {\n      _jspxFactory = JspFactory.getDefaultFactory();\n      response.setContentType(\"text/html;charset=UTF-8\");\n      pageContext = _jspxFactory.getPageContext(this, request, response,\n      \t\t\tnull, true, 8192, true);\n      _jspx_page_context = pageContext;\n      application = pageContext.getServletContext();\n      config = pageContext.getServletConfig();\n      session = pageContext.getSession();\n      out = pageContext.getOut();\n      _jspx_out = out;\n\n      String _jspx_temp0 = \"http://www.apache.org\";\n      out.write(\"<\" + \"a\" + \" href=\\\"\" + _jspx_temp0 + \"\\\"\" + \"/>\");\n      if (_jspx_meth_t_test_0(_jspx_page_context))\n        return;\nboolean _jspx_temp0=\n((java.lang.Boolean)\norg.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(\"${true}\",\njava.lang.Boolean.class, (PageContext)_jspx_page_context, null,\nfalse)).booleanValue();\nif (_jspx_temp0){\n      out.write(\"it's true!\");\n}\n    } catch (Throwable t) {\n      if (!(t instanceof SkipPageException)){\n        out = _jspx_out;\n        if (out != null && out.getBufferSize() != 0)\n          out.clearBuffer();\n        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);\n      }\n    } finally {\n      if (_jspxFactory != null) _jspxFactory.releasePageContext(_jspx_page_context);\n    }\n  }\n\n  private boolean _jspx_meth_t_test_0(PageContext _jspx_page_context)\n          throws Throwable {\n    PageContext pageContext = _jspx_page_context;\n    JspWriter out = _jspx_page_context.getOut();\n    //  t:test\n    org.apache.jsp.tag.web.test_tag _jspx_th_t_test_0 = new\norg.apache.jsp.tag.web.test_tag();\n    _jspx_th_t_test_0.setJspContext(_jspx_page_context);\n    _jspx_th_t_test_0.doTag();\n    return false;\n  }\n}\n===================================\n\nScan that code for the temp variable named _jspx_temp0.  Notice that there is\none String with that name and one boolean with that name.  Thus, this results in\na java compilation error once you ultimately try to compile the page:\n===================================\nCompiling 2 source files to c:\\work\\marzen\\tmp\\jspc\\classes\nc:\\work\\marzen\\tmp\\jspc\\src\\org\\apache\\jsp\\WEB_002dINF\\jsp\\test_jsp.java:61:\n_jspx_temp0 is already defined in\n_jspService(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)\nboolean _jspx_temp0=\n        ^\nc:\\work\\marzen\\tmp\\jspc\\src\\org\\apache\\jsp\\WEB_002dINF\\jsp\\test_jsp.java:63:\nincompatible types\nfound   : java.lang.String\nrequired: boolean\nif (_jspx_temp0){\n    ^\nNote: c:\\work\\marzen\\tmp\\jspc\\src\\org\\apache\\jsp\\WEB_002dINF\\jsp\\test_jsp.java\nuses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n2 errors\n===================================\n\nThe problem is caused by the fact that the Node.NamedAttribute constructor\ndirectly uses JspUtil.nextTemporaryVariableName() to generate a variable name. \nI *believe* that if the variable was initialized just-in-time in the getter,\nthat the problem would be solved.\n\nThe flow goes like this:\n\n1) When compiling test.jsp, Compiler.generateJava() calls\nJspUtil.resetTemporaryVariableName() to reset the temp variable name\n\n2) The test.jsp file gets parsed immediately thereafter, thus creating a\nvariable with name _jspx_temp0 for the \"href\" attribute\n\n3) Shortly thereafter, tag files are loaded, which means that the test.tag file\nwill be recompiled, thus resulting in JspUtil.resetTemporaryVariableName() being\ninvoked again (thus setting the variable back to 0).\n\n4) Since test.tag doesn't do anything to cause a temporary variable name to be\nrecreated, the temp variable name remains at 0.\n\n5) Upon returning to the compilation of the test.jsp, the If tag plugin is used\nto create yet another variable name with name _jspx_temp0, hence the conflict.\n\nI think step 2 is the root of the problem.  If the NamedAttribute didn't get a\ntemporary variable name assigned in the constructor and instead generated it\njust-in-time in the getter, then this issue wouldn't exist since the \"href\"\nattribute variable name would be created only after first compiling all of the\ntag files.\n\nI still think that the logic in the compilation is a bit strange given that the\nJSP will use temporary variable names starting at whatever point the last\ncompiled tag file left off at.  I think that issue could be resolved by moving\nthe JspUtil.resetTemporaryVariableName() call in Compiler.generateJava() down\nafter the call to loadTagFiles().  Note that you would probably also want to\ncall JspUtil.resetTemporaryVariableName() in the ctxt.isPrototypeMode()\nscenario.  Here is the diff that I would propose for Compiler.java based on the\n5.5.20 codebase:\n\n===================================\n150,152d149\n<             // Reset the temporary variable counter for the generator.\n<             JspUtil.resetTemporaryVariableName();\n<\n157a155,156\n>                 // Reset the temporary variable counter for the generator.\n>                 JspUtil.resetTemporaryVariableName();\n179a179,181\n>             // Reset the temporary variable counter for the generator.\n>             JspUtil.resetTemporaryVariableName();\n>\n===================================\n\n\nHere is the diff I would propose for Node.java:\n===================================\n1791d1790\n<             temporaryVariableName = JspUtil.nextTemporaryVariableName();\n1837a1837,1839\n>             if(temporaryVariableName==null) {\n>                 temporaryVariableName = JspUtil.nextTemporaryVariableName();\n>             }\n===================================",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "42438",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P2 major",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Duplicate JSP temp variable declaration when jsp:attribute used in conjunction with custom tags",
    "systemSpecification": false,
    "version": "5.0.20"
}