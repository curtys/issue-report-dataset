{
    "comments": [
        {
            "author": null,
            "body": "I'm sorry, please disregard multi byte characters. \n",
            "date": "20070207T01:02:50",
            "id": 0
        },
        {
            "author": null,
            "body": "You are right.\nI fix it at svn head. please test my fix and report the result.\nPeter",
            "date": "20070207T01:27:05",
            "id": 1
        },
        {
            "author": null,
            "body": "In the real world, there's never going to be an IOE (the source file has been\ngenerated by Jasper moments before). So this can be fixed to feel good about it,\nI suppose, but this will have no impact.",
            "date": "20070207T02:58:16",
            "id": 2
        },
        {
            "author": null,
            "body": "Yes, it is running with no trouble.\nThank you for your quick correction.\n\nRegards,\nYuichiro",
            "date": "20070207T04:33:59",
            "id": 3
        },
        {
            "author": null,
            "body": "Closing based on feedback from OP.",
            "date": "20070208T19:26:56",
            "id": 4
        }
    ],
    "component": "Jasper",
    "description": "The wrong code is:\n\norg.apache.jasper.compiler.JDTCompiler.CompilationUnit\n-----\npublic char[] getContents() {\n    char[] result = null;\n    try {\n        InputStreamReader isReader =\n            new InputStreamReader(new FileInputStream(sourceFile),\u0081@\u0081\u00a9 Java\u0192\\\u0081[\u0192X\n\u0192t\u0192@\u0192C\u0192\u2039\n                    ctxt.getOptions().getJavaEncoding());\n        Reader reader = new BufferedReader(isReader);\u0081@\u0081@\u0081\u00a9 close\u201a\u00b5\u201a\u00c4\u201a\u00a2\u201a\u00c8\u201a\u00a2\u0081B\n        if (reader != null) {\n            char[] chars = new char[8192];\n            StringBuffer buf = new StringBuffer();\n            int count;\n            while ((count = reader.read(chars, 0, \n                                        chars.length)) > 0) {\n                buf.append(chars, 0, count);\n            }\n            result = new char[buf.length()];\n            buf.getChars(0, result.length, result, 0);\n        }\n    } catch (IOException e) {\n        log.error(\"Compilation error\", e);\n    }\n    return result;\n}\n-----\n\nThe input stream is not closed, so the file and the file descriptor is not \nliberated until GC runs.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "41554",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "The input stream of the JSP file for compiling is not closed.",
    "systemSpecification": true,
    "version": "5.5.20"
}