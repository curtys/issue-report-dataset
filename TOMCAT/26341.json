{
    "comments": [
        {
            "author": null,
            "body": "I have this big urge about reverting the fix for \"bug\" 26051, and classify it as\na \"this will never be fixed\" issue. It would definitely avoid lots of problems.",
            "date": "20040122T10:39:36",
            "id": 0
        },
        {
            "author": null,
            "body": "If I understand you right, you want to set this bug to \"will never be fixed\" and\nnot the other (26051), right?\nIf this bug won't be fixed, it's not possible for bound objects to determine if\nthey are unbound because of a normal removeAttribute()-call or a\nsession-invalidation.\nThe following scenario is not possible with tomcat 5:\nThe bound object has to do nothing if the value is simply removed from the\nsession (e.g. it is replaced by a proxy object and later restored again) and has\nto free some resources if the session is invalidated. \nWith tomcat 4 I could call session.getAttribute() and catch the IAE to know the\nsession is invalid (session.isValid() would be a nice method) - this doesn't\nwork with tomcat 5.\n",
            "date": "20040122T11:08:37",
            "id": 1
        },
        {
            "author": null,
            "body": "I was obviously talking about 26051 (additional fixes are also needed in quite a\nfew places to really adress it).",
            "date": "20040122T11:17:14",
            "id": 2
        },
        {
            "author": null,
            "body": "BTW, this works with 5.0.18, but not with the nightly (because of the new\naccessCount check in isValid()), right ? If it doesn't work, I don't understand\nhow it can be, and recommend you add debug in the StandardSession.expire and\nisValid to see what's going on.\nI recommend not using the nightlies for now: a few features will be added and\nthey will not be as stable as what they used to be.",
            "date": "20040122T11:23:47",
            "id": 3
        },
        {
            "author": null,
            "body": "BTW: In my earlier submits I said IllegalArgumentException but meant\nIllegalStateException.\n\nMy problem occurs in 5.0.16, 5.0.18, nightly build (01/21/2004) because of the\nfollowing code in catalina.session.StandardSession (the implementation-excerpts\nbelow haven't changed since 5.0.16):\n\ninvalidate () { expire(); }\nexpire () { expire(true); }\nexpire(boolean)\n{\nthis.expiring=true;\n//invalidate session\nthis.expiring=false;\n}\n\ngetAttribute()\n{\nif (! isValid()) throw IllegalStateException ();\n...\n}\n\nisValid()\n{\nif (this.expiring) return true;\n...\n}\n\nSo while the invalidation the session is always valid.\n",
            "date": "20040122T12:17:40",
            "id": 4
        },
        {
            "author": null,
            "body": "I forgot about the flag. This is contradicting the new policy about the session\nbeing still useable when the expiration notification is sent. I think\nconfirmation this is as intended is needed, otherwise, notification for\nattributes will have to be handled as yet another special case (or we'll have to\ndecide we don't care).",
            "date": "20040122T13:39:21",
            "id": 5
        },
        {
            "author": null,
            "body": "How about setting \"expiring\" to FALSE *before* removing any attributes,\nand adding a \"backdoor\" into removeAttribute() that by-passes the validity\ncheck, as follows:\n\nIndex: StandardSession.java\n===================================================================\nRCS file:\n/home/cvs/jakarta-tomcat-catalina/catalina/src/share/org/apache/catalina/session/StandardSession.java,v\nretrieving revision 1.29\ndiff -u -r1.29 StandardSession.java\n--- StandardSession.java        19 Jan 2004 23:39:05 -0000      1.29\n+++ StandardSession.java        22 Jan 2004 22:44:30 -0000\n@@ -706,19 +706,24 @@\n             if (manager != null)\n                 manager.remove(this);\n\n+            /*\n+             * Mark session as expired *before* removing its attributes, so\n+             * that its HttpSessionBindingListener objects will get an\n+             * IllegalStateException when accessing the session attributes\n+             * from within their valueUnbound() method\n+             */\n+            expiring = false;\n+\n             // Unbind any objects associated with this session\n             String keys[] = keys();\n             for (int i = 0; i < keys.length; i++)\n-                removeAttribute(keys[i], notify);\n+                removeAttribute(keys[i], notify, false);\n\n             // Notify interested session event listeners\n             if (notify) {\n                 fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);\n             }\n\n-            // We have completed expire of this session\n-            expiring = false;\n-\n         }\n\n     }\n@@ -1133,7 +1138,7 @@\n      */\n     public void removeAttribute(String name) {\n\n-        removeAttribute(name, true);\n+        removeAttribute(name, true, true);\n\n     }\n\n@@ -1150,14 +1155,17 @@\n      * @param name Name of the object to remove from this session.\n      * @param notify Should we notify interested listeners that this\n      *  attribute is being removed?\n+     * @param checkValid Indicates whether IllegalStateException must be\n+     * thrown if session has already been invalidated\n      *\n      * @exception IllegalStateException if this method is called on an\n      *  invalidated session\n      */\n-    public void removeAttribute(String name, boolean notify) {\n+    public void removeAttribute(String name, boolean notify,\n+                                boolean checkValid) {\n\n         // Validate our current state\n-        if (!isValid())\n+        if (checkValid && !isValid())\n             throw new IllegalStateException\n                 (sm.getString(\"standardSession.removeAttribute.ise\"));\n",
            "date": "20040123T18:56:02",
            "id": 6
        },
        {
            "author": null,
            "body": "Yes, I know how to fix this. Howerver, this is weird when compared to how\nsessionDestroyed is handled, so I was wondering if it was valid.",
            "date": "20040123T20:59:03",
            "id": 7
        },
        {
            "author": null,
            "body": "Just a comment:\n\nI have a hard need to be able to getAttribute() from within an\nHttpSessionListener's sessionDestroyed() method.  I believe I should be able to\naccess any/all attributes for the duration of this call, i.e. that attribute\nremoval and/or invalid-state settings should be after sessionDestroyed() calls.\n\n[The reason I need the attributes is that HttpSessionListener knows/receives\n*nothing* apart from the HttpSession.  Oddly enough my listener needs to know\n*something* else.]",
            "date": "20040123T21:05:14",
            "id": 8
        },
        {
            "author": null,
            "body": "To finish my last vague comment:\n\nI put the \"something else\" my listener needs to know into the session via a filter.",
            "date": "20040123T21:06:04",
            "id": 9
        },
        {
            "author": null,
            "body": "Yes, inside sessionDestroyed, you should still have all access to the session.\nThis is new in Servlet 2.4, AFAIK. This should stay in, and I think this is a\nproblem with Jan's patch. I simply intend to move the remove attribute call\nafter the expiring = false (and add a protected removeAttributeInternal method,\nof course).",
            "date": "20040123T22:29:52",
            "id": 10
        },
        {
            "author": null,
            "body": "Thanks for the heads-up.  My code did indeed fail in Tomcat 4.1 but work fine in\nTomcat 5.0.18.  [I've since fixed it for 4.1 as well.]",
            "date": "20040126T18:13:04",
            "id": 11
        }
    ],
    "component": "Servlet & JSP API",
    "description": "While the session is invalidated all SessionBindingListener are notified with\nvalueUnbound(). In valueUnbound() it's possible to call e.g. getAttribute() on\nthe invalidating session without getting an IllegalArgumentException (which\nwasn't possible in Tomcat 4.1.29). And according to the servlet-spec (2.3 or\n2.4) it shouldn't be possible:\n\nExcept from HttpSession-API\n...\nFor session that are invalidated or expire, notifications are sent after the\nsession has been invalidatd or expired.\n...\n\nI would interpret this as: The valueUnbound() should be called AFTER the session\nis invalidated and so I have to get an IAE when calling session.getAttribute()\nin valueUnbound().\n\nThanks Lars",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "26341",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "It's possible to call getAttribute() while session is invalidated without IAE",
    "systemSpecification": true,
    "version": "Nightly Build"
}