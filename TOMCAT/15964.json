{
    "comments": [
        {
            "author": null,
            "body": "It looks like that if we use package names that mirror the file heirachy for the\nJSP files, and place the .java and .class files in the similiar directory\nheirachy, then we can solve the problem for both JSP and Java stratum.  Let me\nelaborate.\n\nThe file TC/webapps/jsp-examples/num/numguess.jsp will have the package name of\n\"jsp.jsp-examples.num\".  The prepend the name \"jsp\" is for the top level JSP\nfiles, since they have to be in a package.  The generated .java and .class files\nwill then be in TC/work/Standalone/localhost/jsp/jsp-examples/num directory. \nThen we can leave the source path empty, as is now, and it'll be easy for the\nuser to tell the debugger where to find the .jsp and .class files.\n\nIf you think this will work, I'll make a proposal on the tomcat-dev.",
            "date": "20030408T01:15:15",
            "id": 0
        },
        {
            "author": null,
            "body": "I like your proposal, I think.  To make sure I understand what you're proposing,\nI'll continue the example for the numguess.jsp file:\n\n1. For the JSP stratum, you'll store a source path of jsp-examples/num.\n2. For the Java stratum, you'll put the generated Java and class files into the\n   directory TC/webapps/work/Standalone/localhost/jsp/jsp-examples/num, and use\n   a package name of jsp.jsp-examples.num in the Java file.\n\nThis seems very convienient for the user of the debugger.  They would add\nTC/webapps to their debugger's search path in order to debug any JSP file (if\nthe war files are being exploded) in any web app in the JSP stratum, and\nTC/webapps/work/Standalone/localhost to the search path to debug any generated\nJava file in any web app in the Java stratum.",
            "date": "20030408T15:03:41",
            "id": 1
        },
        {
            "author": null,
            "body": "Fixed with my latest commit.  Let me know if there are problems.",
            "date": "20030416T19:49:29",
            "id": 2
        }
    ],
    "component": "Jasper",
    "description": "One of the new features of Jasper in Tomcat 5 is that it attaches a \"Source\nMap\" attribute to class files to describe the file name and line number\nmapping from a JSP source file to the generated Java source file.\n\nAccording to JSR-45, each file entry in the SMAP defines a source name,\nand optionally, a source path.  The SMAP that I see in the class files\ngenerated by Jasper doesn't specify a source path.  This means that the\nsource path defaults to a subdirectory based on the package of the class\nfile.  In other words, for class files generated by Jasper, the source\npath ends up being \"org/apache/jsp\".  This is the source path for both\nthe \"JSP\" stratum and the \"Java\" stratum.  The problem is that this\nsource path is wrong for both strata, given how Jasper stores files.\n\nAn example would help explain this.  Say the user wants to debug the\n\"numguess.jsp\" file that's part of the \"jsp-examples\" web application\nthat comes with Tomcat.  I've written a debugger that allows the user to\nenter directory names that the debugger should search for source files.\nOther debuggers have pretty much the same technique for finding source\nfiles.  For this discussion, let's call this the debugger's \"search\npath\".  Let's say the entries in the search path are \"A\" and \"B\".  When\na debugger wants to locate a source file corresponding to a particular\nlocation in a class, it uses the Java Debugging Interface (JDI) API to\nread the source name and source path for the stratum it intends to use\nfor the display.  Let's assume for the moment it wants to use the JSP\nstratum.  So the debugger first looks for the file\n\"A/org/apache/jsp/numguess.jsp\", then for\n\"B/org/apache/jsp/numguess.jsp\".  You get the idea.  The problem is that\nthere's no directory that the user could specify in the debugger's\nsearch path that allows the debugger to find the file, because the jsp\nfile doesn't reside in a \"org/apache/jsp\" subdirectory of any directory.\nInstead, it resides in the \"TH/webapps/jsp-examples/num\" directory,\nwhere \"TH\" is the Tomcat home directory.\n\nOne possibility would be for Jasper to specify \".\" (just a dot, meaning\nthe current directory) as the source path in the SMAP for the JSP\nstratum.  Then the user could enter \"TH/webapps/jsp-examples/num\" as the\npath to search.  The debugger would be able to locate the file, since it\nwould then be looking for \"TH/webapps/jsp-examples/num/./numguess.jsp\".\nBut I have a better suggestion:  How about specifying the subdirectory\nof the directory in which the web application is expanded?  Continuing\nthe example, this means specifying the source path \"num\" for the file\n\"numguess.jsp\".  The user would then enter \"TH/webapps/jsp-examples\"\ninto the debugger's search path.  When the debugger tries to locate the\nfile, it will paste together these three pieces and come up with\n\"TH/webapps/jsp-examples/num/numguess.jsp\", successfully finding the\nfile.  The advantage of this approach is that the user need only enter\nthe top directory of the web application into the debugger's search path\nand the debugger will then be able to locate any JSP file for the web\napplication.  If \".\" were used, the user would need to enter every\ndirectory under the web application's top directory that contains a JSP\nto be debugged into the debugger's search path.\n\nA similar problem exists for the \"Java\" stratum.  If the user of the\ndebugger wanted to debug the JSP using the Java stratum, the debugger\nwould try to locate the \"numguess_jsp.java\" file by searching the\nsubdirectories of the debugger's search path.  But again, the debugger\nwould be unable to find the java file because it doesn't reside in a\n\"org/apache/jsp\" subdirectory of any directory.  Just poking around,\nJasper seems to put the Java source file under the \"TH/work\" directory, in\nmy case in the directory \"TH/work/Standalone/localhost/jsp-examples/num\".\nThe solution here isn't as simple as for the JSP stratum, however, since I\ndon't think it's possible to change the source path for a file in the Java\nstratum in the SMAP.  In other words, the source path for\n\"numguess_jsp.java\" is stuck being \"org/apache/jsp\", since that's the\npackage the class is in.  So, I can think of only two solutions:\n\n1. Put the java file into the expected hierarchy.  Perhaps designate that\n   the \"jsp\" subdirectory of the web application's work directory will be\n   the root of all jsp-related Java source files.  Then change the Jasper\n   source code generator to write the Java source file into the directory\n   \"TH/work/Standalone/localhost/jsp-examples/jsp/org/apache/jsp\".  So the\n   user of the debugger would enter\n   \"TH/work/Standalone/localhost/jsp-examples/jsp\" into the debugger's\n   search path, allowing it to locate any Java source file generated by\n   Jasper for that web application.  I don't know if it's even necessary to\n   create a \"jsp\" top directory.  I suggested it only to keep these source\n   and class files out the way of any other files in the work area, but if in\n   fact the work area isn't used for anything else, then leave it off.\n\n2. Change the package associated with the generated Java file, so\n   that the source file can be found where it is today.  I don't\n   really like this suggestion, but I thought I'd mention it.  In our\n   example, this means generating the source such that the\n   \"numguess_jsp.java\" source file starts with \"package num\" instead\n   of \"package org.apache.jsp\".  In this case, the user would enter\n   \"TH/work/Standalone/localhost/jsp-examples\" into the debugger's\n   search path, allowing it to locate any Java source file generated\n   by Jasper for that web application.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "15964",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Wrong source paths in generated SMAP file entries",
    "systemSpecification": false,
    "version": "5.0.0"
}