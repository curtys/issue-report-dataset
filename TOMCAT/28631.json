{
    "comments": [
        {
            "author": null,
            "body": "Created attachment 11354\nJAASRealm.patch",
            "date": "20040427T16:17:27",
            "id": 0
        },
        {
            "author": null,
            "body": "Created attachment 11355\nJAASCallbackHandler.patch",
            "date": "20040427T16:17:57",
            "id": 1
        },
        {
            "author": null,
            "body": "Created attachment 11356\nLocalStrings.patch",
            "date": "20040427T16:18:27",
            "id": 2
        },
        {
            "author": null,
            "body": "I should make clear that the patch files I submitted affect 5.0.19, but were diffed against those \nfrom CVS HEAD, on the morning of 4/14/2004. Sorry if that was not readily apparent.",
            "date": "20040427T22:39:43",
            "id": 3
        },
        {
            "author": null,
            "body": "Please submit test cases for this patch if possible.",
            "date": "20040601T16:47:57",
            "id": 4
        },
        {
            "author": null,
            "body": "No test cases?  This item may be closed if none are submitted.",
            "date": "20040728T15:07:35",
            "id": 5
        },
        {
            "author": null,
            "body": "Two issues preventing me from writing test cases:\n\n1) It isn't clear how to do that.\n\nThere isn't much documentation on how testing works; I was a but put off by that initially. After some \ninvestigation, I found jakarta-tomcat-catalina/tester/src/bin/tester.xml, which indeed appears to be an \nAnt file that performs out-of-container HTTP testing. So, sure, I can see how, if the container were \nconfigured to use my JAASRealm patch, I could re-test the authentication tests in jakarta-tomcat-\ncatalina/tester/src/tester/org/apache/tester/Authentication0*.java.\n\nSounds simple, but it all turns on the phrase \"if the container were configured to use my JAASRealm \npatch.\" All of the tests use, by default, uses UserDatabaseRealm. How could I make Tomcat use \nJAASRealm instead? It appears that I would need to either:\n- Create a custom context descriptor for the \"tester\" webapp that uses JAASRealm\n- Edit the existing conf/server.xml file\n... as well as cause the test script to bounce the server and re-load it with the new context descriptor. \nAha. To do this, now I need to hack the tester.xml Ant script.\n\nI have *never* written a Tomcat test case before, so this is just my best guess on what it would take. \nAm I wrong?\n\n2) I'm not sure what it would contain. \n\nRemember that JAASRealm needs an implementation of a JAAS LoginModule to function. There isn't one \nsupplied with Tomcat, so this means I'd need to:\n- Create a dummy LoginModule that authenticates certain hard-coded users but not others (e.g., \"Fred/\nbedrock\" but not \"Barney/feet\")\n- Create a \"sample\" LoginModule that authenticates against an existing user registry, like tomcat-\nusers.xml. But that seems like real work to me; I might as well port MemoryRealm to JAAS while I'm at \nit. (Which is essentially what I'd be doing). \n\nFrankly, this seems like a lot of bother for a patch that I *know* works; is has been in production on my \npersonal wiki for about three months. I can do it if you want to, as long as you accept that this means \nthat there will be quite a bit of changes to certain build files, and other things.\n\nWhat is the best path forward? The key issue here is lack of flexibility in the test scripts, which don't \npermit changing Realms for exercising authentication tests.",
            "date": "20040729T02:40:24",
            "id": 6
        },
        {
            "author": null,
            "body": "Typical test cases submitted for Tomcat are WAR files.  They contain the code \nto be tested along with the META-INF/context.xml file which is the Context \nelement with the proper declarations, e.g. for a Realm.  Don't bother using the \nTester approach, that's wasted effort on build files.\n\nFor this case a dummy LoginModule with hard-coded user names and passwords is \nfine.  Also for this case, since the Realm has to be in a common classloader \nrepository, a single WAR won't be possible, so maybe a separate JAR.\n\nBasically, we ask for whatever you would use to unit-test your own patch.  I \nunderstand it works for you, and that's great, and if you don't unit-test \nthat's also OK (I sometimes don't do it either, we're not perfect ;)).  But we \ndo prefer to have unit tests before committing into the core Tomcat code.\n\nI also wanted to assess your interest in this: I'm glad you responded, and \nquickly.  If I ask for tests, give it a couple of months with no response, then \nask again and get no response within a month or so, I sometimes close the \nbugzilla issue for lack of interest.  Because you responded we can keep this \nopen and resolve it.",
            "date": "20040729T13:43:55",
            "id": 7
        },
        {
            "author": null,
            "body": "After a bit (!) of a hiatus, patches against the most recent release (5.0.28), and matching test cases, are \nprogressing. I expect to have both submitted early next week.",
            "date": "20040910T05:44:34",
            "id": 8
        },
        {
            "author": null,
            "body": "Created attachment 12761\nSmall Ant project that builds a test case WAR, dummy JAAS LoginModule JAR and associated context descriptors.",
            "date": "20040918T16:29:55",
            "id": 9
        },
        {
            "author": null,
            "body": "Created attachment 12762\nJAASRealm.java (whole file, not a diff)",
            "date": "20040918T16:31:33",
            "id": 10
        },
        {
            "author": null,
            "body": "Created attachment 12763\nJAASCallbackHandler.java (whole file; not a diff)",
            "date": "20040918T16:32:08",
            "id": 11
        },
        {
            "author": null,
            "body": "Created attachment 12764\nLocalStrings.properties (whole file; not a diff)",
            "date": "20040918T16:32:41",
            "id": 12
        },
        {
            "author": null,
            "body": "Created attachment 12765\nJAASRealm.java (patch cf. tomcat 5.028 release)",
            "date": "20040918T16:36:41",
            "id": 13
        },
        {
            "author": null,
            "body": "Created attachment 12766\nJAASCallbackHandler (patch cf. tomcat 5.028 release)",
            "date": "20040918T16:37:18",
            "id": 14
        },
        {
            "author": null,
            "body": "Created attachment 12767\nLocalStrings.properties (patch cf. tomcat 5.028 release)",
            "date": "20040918T16:37:47",
            "id": 15
        },
        {
            "author": null,
            "body": "I've uploaded a small Ant project contains a series of test cases for the JAASRealm patches. The patches \nwere made against the source tree for Tomcat 5.0.28.\n\nFirst, a short explanation of what the patch itself is all about. As several observers have\nnoted, the current JAASRealm implementation doesn't actually deliver on all of the functionality\nit promises, particularly with respect to its ability to return Principals of user-specified\ntypes. In addition, the current implementation is limited by its inability to hash\npasswords. The patch fixes both of these issues.\n\nFiles that have been modified (relative to jakarta-tomcat-catalina/catalina/src/share):\norg/apache/catalina/realm/JAASRealm.java\norg/apache/catalina/realm/LocalStrings.properties\norg/apache/catalina/realm/JAASCallbackHandler.java\n\nSee the other attachments to this bug for the patch files, whole files, and test case tar file.\n",
            "date": "20040918T16:41:26",
            "id": 16
        },
        {
            "author": null,
            "body": "Patch applied on both TOMCAT_5_0 and HEAD (Tomcat 5.5) branches.  Thanks for \ncontributing.",
            "date": "20040921T23:31:52",
            "id": 17
        },
        {
            "author": null,
            "body": "It looks like the most recent commit of JAASRealm has a slight problem in it. \n\nThe whole-file version I submitted has these lines, starting at line 536:\n\n            if (userPrincipal == null && userClasses.contains(principalClass)) {\n                userPrincipal = principal;\n                if( log.isDebugEnabled() ) {\n                    log.debug(sm.getString(\"jaasRealm.userPrincipalSuccess\", principal.getName()));\n                }\n            }\n            if (roleClasses.contains(principalClass)) {\n                roles.add(principal);\n                if( log.isDebugEnabled() ) {\n                    log.debug(sm.getString(\"jaasRealm.rolePrincipalAdd\", principal.getName()));\n                }\n            }\n\nThe current file in HEAD looks like this (also starting at 536):\n\n            if (userPrincipal == null && userClasses.contains(principalClass)) {\n                userPrincipal = principal;\n                if( log.isDebugEnabled() ) {\n                    log.debug(sm.getString(\"jaasRealm.userPrincipalSuccess\", principal.getName()));\n                }\n            }\n\n            if (roleClasses.contains(principalClass)) {\n                roles.add(principal.getName());\n            }\n\n            if (roleClasses.contains(principalClass)) {\n                roles.add(principal);\n                if( log.isDebugEnabled() ) {\n                    log.debug(sm.getString(\"jaasRealm.rolePrincipalAdd\", principal.getName()));\n                }\n            }\n\nThe middle chunk of code (3 lines) shouldn't be there. It is adding a String to what is supposed to be a \ncollection of Principal objects. This is causing downstream calls to hasRole(Principal, String) to choke \nand die with a ClassCastException.\n\nThe patch file I submitted also has this middle chunk marked for removal (-), so I think this was just a \nmistake in the commit process.",
            "date": "20040930T21:54:47",
            "id": 18
        },
        {
            "author": null,
            "body": "My mistake -- good catch.  Thank you for pointing it out.  I've fixed it on \nboth HEAD and TOMCAT_5_0.",
            "date": "20041001T12:31:20",
            "id": 19
        }
    ],
    "component": "Catalina",
    "description": "This bug report was previously posted to tomcat-dev as \"[PATCH] JAASRealm fixes\" on 24-Apr-2004.\n----\nThese patches enable JAASRealm to work as advertised.\nIn particular, JAASRealm can use user-specified Principal classes\nfor both user Principals and group Principals, just like\nthe documentation says it is supposed to be able to do. In addition,\nI have added support for digested passwords similar to the way the\nother Realm implementations work.\n\nI have patched three files: JAASRealm.java, JAASCallbackHandler.java,\nand LocalStrings.properties. I have unquestionably fouled up\nthe @version Javadoc tags... one assumes the responsible parties\n(surely not me!) can fix these prior to committing.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "28631",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "JAASRealm fix to permit user-specified user/group Principals",
    "systemSpecification": false,
    "version": "5.0.19"
}