{
    "comments": [
        {
            "author": null,
            "body": "I have proposed reverting to 1.2 on the dev list. I'll update this bug report\nwhen the discussion of that proposal reaches a conclusion. Feel free to add your\n$0.02 to the discussion.",
            "date": "20071201T12:25:50",
            "id": 0
        },
        {
            "author": null,
            "body": "The current view is continue with pool 1.3. Those seeing the issue can use the\nworkaround you propose. Meanwhile, I am working with the commons-pool folks to\nget a 1.4 out with a fix for this and a couple of other issues.",
            "date": "20071209T15:45:26",
            "id": 1
        },
        {
            "author": null,
            "body": "Thanks, Mark. I appreciate your help on this as well as your patch for commons\npool - so will lots of other people who won't need to debug why Tomcat is dying\nfrom lack of permgen. :)\n\n",
            "date": "20071212T13:20:27",
            "id": 2
        },
        {
            "author": null,
            "body": "commons-pool 1.4 has been released with the required fixes.\n\nIt will be in 6.0.16 and should be in 5.5.26 if the votes come through in time.",
            "date": "20080118T13:03:57",
            "id": 3
        },
        {
            "author": null,
            "body": "This has been committed to svn for 5.5.x and will be in 5.5.26 onwards.",
            "date": "20080120T09:09:02",
            "id": 4
        }
    ],
    "component": "Catalina",
    "description": "I am seeing commons-pool's EVICTION_TIMER causing applications not to unload,\nusing Edward Chou's modified JHAT that assists in tracking classloader leaks.\n\n--> java.lang.reflect.Method@0x2aaab4902360 (145 bytes)  (field clazz:) exclude\n--> class org.apache.catalina.startup.Catalina (160 bytes) (??:) exclude\n--> org.apache.catalina.loader.StandardClassLoader@0x2aaab482c6e8 (123 bytes)\n(field parent:) exclude\n--> org.apache.catalina.loader.StandardClassLoader@0x2aaab480eab0 (123 bytes)\n(field classes:) exclude\n--> java.util.Vector@0x2aaab4815d98 (36 bytes) (field elementData:) exclude\n--> [Ljava.lang.Object;@0x2aaab4b545f8 (10256 bytes) (Element 21 of\n[Ljava.lang.Object;@0x2aaab4b545f8:) exclude\n--> class org.apache.tomcat.dbcp.pool.impl.GenericObjectPool (160 bytes) (static\nfield EVICTION_TIMER:) exclude\n--> java.util.Timer@0x2aaab4732740 (40 bytes) (field thread:) exclude\n--> java.util.TimerThread@0x2aaab494fa80 (173 bytes) (field contextClassLoader:)\nexclude\n--> org.apache.catalina.loader.WebappClassLoader@0x2aaab482b4e8 (288 bytes) exclude \n\nThis appears to be directly related to the upgrade to commons-pool 1.3 in both\nTomcat 5.5.24 and Tomcat 6.0.11. Copying the commons-pool 1.2 based JAR from\nTomcat 5.5.20 seems to solve the problem in 5.5.25 and 6.0.14 with no readily\napparent side effects in my admittedly limited testing of my own apps.\n\nThis has been reported in https://issues.apache.org/jira/browse/POOL-97 but\ndoesn't appear to be rapidly heading towards a solution.\n\nAny chance of reverting to 1.2 to fix this leak?",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "43552",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P2 major",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Memory leak on application reload apparently caused by commons-pool 1.3",
    "systemSpecification": true,
    "version": "5.5.24"
}