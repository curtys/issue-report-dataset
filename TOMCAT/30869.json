{
    "comments": [
        {
            "author": null,
            "body": "Of course, I meant 'name=name.substring(1)'.",
            "date": "20040826T14:59:19",
            "id": 0
        },
        {
            "author": null,
            "body": "Can you point to the class or code in \"Sun Security\" that \"barfs\" at the \nleading slash please?  Also if you could attach your suggested patch in .diff \nformat, that'd be great.  Thanks ;)",
            "date": "20040831T00:10:49",
            "id": 1
        },
        {
            "author": null,
            "body": "I'm not sure I can find the code for the barf, because I don't have the Sun\nsource code :-) \n\nI think the problem is in com.sun.security.auth.login.ConfigFile which is the\nclass reading the jaas.config file (actually, the name isn't relevant -- it's\nthe file pointed to by the URL in -Djava.security.auth.login.config or by\ndefault in ${user.home}/.java.login.config)\n\nThe JavaDoc isn't up to much: ConfigFile is\n\nhttp://java.sun.com/j2se/1.4.2/docs/guide/security/jaas/spec/com/sun/security/auth/login/ConfigFile.html\n\nwhich says it parses the file with the syntax described in:\n\nhttp://java.sun.com/j2se/1.4.2/docs/api/javax/security/auth/login/Configuration.html\n\nand all it says in there is\n\n\"Each entry in the Configuration is indexed via an application name.\n\nApplicationName {\n\t      ModuleClass  Flag    ModuleOptions;\n\t      ModuleClass  Flag    ModuleOptions;\n\t      ModuleClass  Flag    ModuleOptions;\n};\n\"\n\nSo Tomcat is setting the name OK programmatically, but the ConfigFile parser\nonly seems to allow [a-zA-Z]+ as the ApplicationName, so fails at the initial /\n\nThus, if you try and use a config file:\n\n/MyAppRoot {\n  com.example.LoginModule required;\n};\n\nthen the ConfigFile parser doesn't successfully read it.\n\nIt seems that the ConfigFile uses lazy loading, so it doesn't parse the first\nlogin request when using JAAS.\n\nSorry, can't paste in .diff format; I don't have the Tomcat source code on a\nmachine with a '.diff' command -- I just eyeballed the problem to find out why\nthe name was being set with a leading '/'.",
            "date": "20040831T09:00:54",
            "id": 2
        },
        {
            "author": null,
            "body": "OK, done for both 5.0.29 and 5.5.3.  My initial implementation is simply to \nremove leading slash if one is present.  I made the relevant method protected \nso extenders of JAASRealm can easily modify this behavior.",
            "date": "20040920T16:15:25",
            "id": 3
        }
    ],
    "component": "Catalina",
    "description": "When running with the JAASRealm, the container sets the JAAS application name to \nbe the container's name:\n\n--- 8< --- JAASRealm.java --- 8< ---\npublic void setContainer(Container container) {\n  super.setContainer(container);\n  String name=container.getName();\n  if( appName==null  ) {\n    appName=name;\n    log.info(\"Setting JAAS app name \" + appName);\n  }\n}\n--- 8< --- JAASRealm.java --- 8< ---\n\nHowever, the container's name always starts with a /, which isn't an allowable\nname in the JAAS specification:\n\n--- 8< --- stdout --- 8< ---\n...\nINFO: Setting JAAS app name /MyApp\n...\n--- 8< --- stdout --- 8< ---\n\n--- 8< --- jaas.conf --- 8< ---\n/MyApp {\n  com.example.MyJAASLoginModule required;\n};\n--- 8< --- jaas.conf --- 8< ---\n\nThe Sun Security barfs at the '/' on leading MyApp, so it can't be speficied.\nThe default name 'Tomcat' doesn't work either, because the JAAS name has already\nbeen set, and this cannot be set in the config file.\n\nInstead, you have to use 'other' which is applicable to all apps in the application.\n\nThe fix would be to check whether there are any unprintable characters in the\napplication name, and if so, fix them. Of course, what constitutes an\nunprintable character is up to Sun's Configuration parser, which probably isn't\nthat good.\n\nA quick fix would be:\n\n--- 8< --- JAASRealm.java.fix --- 8< ---\npublic void setContainer(Container container) {\n  super.setContainer(container);\n  String name=container.getName();\n  if( appName==null  ) {\n    if (name.startsWith(\"/\")) name.substring(1);\n    appName=name;\n    log.info(\"Setting JAAS app name \" + appName);\n  }\n}\n--- 8< --- JAASRealm.java.fix --- 8< ---\n\nbut in reality, you'd need to check for all other non-printable characters and\nreplace/delete them as appropriate, because a name may have other / characters\n(e.g. /MyApp/Other).",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "30869",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 major",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "JAAS module name is not allowed in jaas.conf file",
    "systemSpecification": false,
    "version": "5.0.27"
}