{
    "comments": [
        {
            "author": null,
            "body": "It seems to me that Jasper is doing the right thing -- if the application wants\nto use FileNotFoundException internal to a page, it should swallow that\nexception instead of allowing it to propogate back to the container.\n\nMaybe there should be some spec-based description of how exceptions thrown by\nJSP page components should be handled?\n",
            "date": "20010710T17:48:14",
            "id": 0
        },
        {
            "author": null,
            "body": "Changing to an \"enhancement\" request since this is a non-spec issue.\n",
            "date": "20010712T18:23:51",
            "id": 1
        },
        {
            "author": null,
            "body": "At this point, this will not be fixed (if still present in Jasper 2).",
            "date": "20030415T15:28:44",
            "id": 2
        },
        {
            "author": null,
            "body": "I disagree with Remy and Craig, and I think if you polled 10 developers, 11 of\nthem would call this a bug.\n\nThe specification pretty clearly lays out what is to happen when a .jsp page\nthrows an Exception:\n\npublic abstract void handlePageException(java.lang.Throwable t)\nThis method is intended to process an unhandled \u2019page\u2019 level exception by\nforwarding the exception to the specified error page for this JSP. If forwarding\nis not possible (for example because the response has already been committed),\nan implementation dependent mechanism should be used to invoke\nthe error page (e.g. \u201cincluding\u201d the error page instead).\nIf no error page is defined in the page, the exception should be rethrown so\nthat the standard servlet error handling takes over.\n\nIn this case, if I specifically define an error page for the .jsp, it is\ninvoked, and the 404 error is not reported - Hurray!\n\nHowever, contrary to the spec, if an error page isn't defined, the standard\nservlet error handling doesn't take over.  For example, defining the following\nin web.xml, according to the servlet spec, dictates that the given error page\nshould be invoked when a FileNotFoundException is thrown:\n<error-page>\n   <exception-type>java.io.FileNotFoundException</exception-type>\n   <location>/error.jsp</location>\n</error-page>\n\nAs the above doesn't happen, and a 404 error is displayed instead, this behavior\nviolates the spec and is a bug.  I am reopening it.  As it is still broken in\nTomcat5, I am putting that for the Product field.  As it is not an enhancement\nbut a bug, I am changing the Severity to 'minor'.",
            "date": "20070306T13:27:01",
            "id": 3
        },
        {
            "author": null,
            "body": "This is now fixed in svn for 5.5.x and 6.0.x and will be included in the next\nreleases of each.",
            "date": "20070804T11:19:18",
            "id": 4
        }
    ],
    "component": "Jasper",
    "description": "In the service() method of org.apache.jasper.servlet.JspServlet, I believe the \nscope for which the 'catch FileNotFoundException' block applies is too great;\nif a FileNotFoundException is thrown from within the JSP page, the result is\nan HTTP 404 error.  The calling code believes the JSP resource itself wasn't\nfound, when in fact the exception should be treated as internal to the page.\n(You can test with\n\n   <% if (1==1) throw new java.io.FileNotFoundException(); %>\n\nI noticed this problem when debugging the code of a colleague, Shawn Douglas,\nwhose component logic called by the JSP page threw a FileNotFoundException.)\n\nThe offending code seems to be:\n\n           try {\n                loadIfNecessary(request, response);\n\n                // If a page is to only to be precompiled return.\n                if (precompile)\n                    return;\n\n                if (theServlet instanceof SingleThreadModel) {\n                    // sync on the wrapper so that the freshness\n                    // of the page is determined right before servicing\n                    synchronized (this) {\n                        theServlet.service(request, response);\n                    }\n                } else {\n                    theServlet.service(request, response);\n                }\n\n            } catch (FileNotFoundException ex) {\n\n                    ...\n\nbut I haven't had the time to look at it thoroughly.  I believe this affects \nTomcat 3.x as well.  The necessary fix should just be to narrow the scope\nof the 'catch' block, but I haven't had a chance to think that through \ncompletely or test it.  (Sorry! :-) )",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "2500",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 minor",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "FileNotFoundException from service() unintentionally caught",
    "systemSpecification": false,
    "version": "Nightly Build"
}