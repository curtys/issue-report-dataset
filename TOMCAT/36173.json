{
    "comments": [
        {
            "author": null,
            "body": "This sounds reasonable.",
            "date": "20050816T18:53:25",
            "id": 0
        }
    ],
    "component": "Connector:HTTP",
    "description": "We have occasional failed requests on our servers running tomcat 5.0.19 (working\nunder java 1.5.0 with system assertions enabled via -esa option). This also\nseams to be an issue with newer versions of tomcat up to the current snapshot\ntaken from the CVS repository.\n\nThe following exception gets thrown:\njava.lang.AssertionError: cache control: inconsictency, cachedFixedDate=732122,\ncomputed=732107, date=2005-06-10T00:00:00.000Z\n        at java.util.GregorianCalendar.computeFields(GregorianCalendar.java:2050)\n        at java.util.GregorianCalendar.computeFields(GregorianCalendar.java:1971)\n        at java.util.Calendar.setTimeInMillis(Calendar.java:1066)\n        at java.util.Calendar.setTime(Calendar.java:1032)\n        at java.text.SimpleDateFormat.format(SimpleDateFormat.java:785)\n        at java.text.SimpleDateFormat.format(SimpleDateFormat.java:778)\n        at java.text.DateFormat.format(DateFormat.java:314)\n        at\norg.apache.tomcat.util.http.FastHttpDateFormat.getCurrentDate(FastHttpDateFormat.java:152)\n        at\norg.apache.coyote.http11.Http11Processor.prepareResponse(Http11Processor.java:1529)\n        at org.apache.coyote.http11.Http11Processor.action(Http11Processor.java:926)\n        at org.apache.coyote.Response.action(Response.java:224)\n        at\norg.apache.coyote.http11.InternalOutputBuffer.doWrite(InternalOutputBuffer.java:605)\n        at org.apache.coyote.Response.doWrite(Response.java:586)\n        at\norg.apache.coyote.tomcat5.OutputBuffer.realWriteBytes(OutputBuffer.java:411)\n        at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:436)\n        at org.apache.tomcat.util.buf.ByteChunk.append(ByteChunk.java:356)\n        at org.apache.coyote.tomcat5.OutputBuffer.writeBytes(OutputBuffer.java:444)\n        at org.apache.coyote.tomcat5.OutputBuffer.write(OutputBuffer.java:431)\n        at\norg.apache.coyote.tomcat5.CoyoteOutputStream.write(CoyoteOutputStream.java:108)\n        at\norg.apache.coyote.tomcat5.CoyoteOutputStream.write(CoyoteOutputStream.java:102)\n        at com.scene7.is.ImageServlet.sendResponse(ImageServlet.java:197)\n        at com.scene7.is.ImageServlet.doGet(ImageServlet.java:147)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:743)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:856)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:284)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:204)\n        at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:257)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n        at\norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:567)\n        at\norg.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:245)\n        at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:199)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n        at\norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:567)\n        at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:184)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n        at\norg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:164)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:149)\n        at\norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:567)\n        at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:156)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:578)\n        at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:149)\n        at\norg.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:567)\n        at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:972)\n        at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:206)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:833)\n        at\norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:732)\n        at\norg.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:619)\n        at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:688)\n        at java.lang.Thread.run(Thread.java:595)\n\n\nAnalysing stack traces and error messages suggests that the reason is internal\ndata corruption in java.uti.GregorianCalendar class caused by accessing it\nsimultaneously from multiple threads.\n\nThe problem is that org.apache.tomcat.util.http.FastHttpDateFormat that is used\nfor date conversion appears not to be entirely thread safe.\nThis class uses shared instance of java.util.SimpleDateFormat:\n    protected static final SimpleDateFormat format = \n        new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\", Locale.US);\n\nand there are two methods that use this instance:\n    public static final String getCurrentDate()\nand\n    public static final String formatDate\n        (long value, DateFormat threadLocalformat)\n\nAs SympleDateFormat class is documented to be not thread safe both methods\nsynchronize access to it. However the synchronization is done against two\ndifferent locks, so in case of overlapped calls of these two methods from\ndifferent threads there is still possibility for data corruption.\n\nThe exposure ot this is very narrow because getCurrentDate meghod actually uses\nformat instance only ones per second at best, however the following test case is\nbalse to reproduce this providing it is ran with JRE 1.5.0 with system\nassertions enabled (-esa switch)\n\npackage org.apache.tomcat.util.http;\n\nimport java.util.Date;\nimport java.util.Random;\n\npublic class FastHttpDateFormatTest {\n\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(\"getCurrentDate() invoker\") {\n            public void run() {\n                while (true) {\n                    try {\n                        FastHttpDateFormat.getCurrentDate();\n                    } catch (Throwable e) {\n                        reportError(e);\n                    }\n                }\n            }\n        };\n        Thread t2 = new Thread(\"formatDate() invoker\") {\n            private Random random = new Random();\n            public void run() {\n                while (true) {\n                    try {\n                        FastHttpDateFormat.formatDate(random.nextLong(), null);\n                    } catch (Throwable e) {\n                        reportError(e);\n                    }\n                }\n            }\n        };\n        t1.start();\n        t2.start();\n    }\n\n    private synchronized static void reportError(Throwable e) {\n        System.out.println(new Date() + \" [\" + Thread.currentThread().getName()\n+ \"]: \" + e.getMessage());\n        System.out.println(e.getMessage());\n        e.printStackTrace();\n    }\n}\n\nThis problem seams to be easily fixable by putting additional synchronization\naround access to format instance in FastHttpDateFormat.formatDate(...) method.\nHere are the diffs:\n$ diff -u\n~/lib/versions/jakarta-tomcat-5.0.19-src/jakarta-tomcat-connectors/util/java/org/apache/tomcat/util/http/FastHttpDateFormat.java\norg/apache/tomcat/util/http/FastHttpDateFormat.java\n---\n/home/akrainiouk/lib/versions/jakarta-tomcat-5.0.19-src/jakarta-tomcat-connectors/util/java/org/apache/tomcat/util/http/FastHttpDateFormat.java\n    2004-02-14 02:27:02.000000000 -0800\n+++ org/apache/tomcat/util/http/FastHttpDateFormat.java 2005-08-12\n14:22:05.000000000 -0700\n@@ -182,7 +182,9 @@\n             }\n         } else {\n             synchronized (formatCache) {\n-                newDate = format.format(dateValue);\n+                synchronized (format) {\n+                    newDate = format.format(dateValue);\n+                }\n                 updateCache(formatCache, longValue, newDate);\n             }\n         }",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "36173",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "AssertionFailure in java.util.GregorianCalendar.computeFields() when sending response",
    "systemSpecification": false,
    "version": "5.5.9"
}