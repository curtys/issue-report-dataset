{
    "comments": [
        {
            "author": null,
            "body": "Good question -- ask on the dev list maybe.\n\nBut also another question: why are you extending HttpServlet and using its\nmethod-sensing ability (GET in this case) if your servlet is not HTTP?",
            "date": "20060620T15:45:18",
            "id": 0
        },
        {
            "author": null,
            "body": "(In reply to comment #1)\n> Good question -- ask on the dev list maybe.\n> \n> But also another question: why are you extending HttpServlet and using its\n> method-sensing ability (GET in this case) if your servlet is not HTTP?\n\nThis is just a test Servlet, the source of the request can be any other\napplication generated request to the container. If catalina is supposed NOT to\nhandle non-HTTP request, why the code here show me that it is trying to handle\nit and handle it in a buggy way?\n\nMaybe I am wrong, I find a \"hard cast\" in invoke too:\n\n    private void invoke(ServletRequest request, ServletResponse response)\n            throws IOException, ServletException {\n\n        // Checking to see if the context classloader is the current context\n        // classloader. If it's not, we're saving it, and setting the context\n        // classloader to the Context classloader\n        ClassLoader oldCCL = Thread.currentThread().getContextClassLoader();\n        ClassLoader contextClassLoader = context.getLoader().getClassLoader();\n\n        if (oldCCL != contextClassLoader) {\n            Thread.currentThread().setContextClassLoader(contextClassLoader);\n        } else {\n            oldCCL = null;\n        }\n\n        // Initialize local variables we may need\n        HttpServletRequest hrequest = (HttpServletRequest) request;\n        HttpServletResponse hresponse = (HttpServletResponse) response\n...",
            "date": "20060620T16:15:13",
            "id": 1
        },
        {
            "author": null,
            "body": "This was fixed for 6.0.x (bug 43668) in r588477.\n\nI have proposed a port of the same fix for 5.5.x",
            "date": "20090712T03:45:35",
            "id": 2
        },
        {
            "author": null,
            "body": "Thsi has been fixed in 5.5.s and will be included in 5.5.29 onwards.",
            "date": "20091220T09:53:00",
            "id": 3
        }
    ],
    "component": "Catalina",
    "description": "When forwarding with customed ServletRequest/ServletResponse (which implement\njavax.servlet.ServletRequest and javax.servlet.ServletResponse) will alway\nresult an NullPointerException, stack trace as follow:\n\njava.lang.NullPointerException\n\tat\norg.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:453)\n\tat\norg.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:341)\n\tat\norg.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:301)\n\tat xxx.TestServlet.doGet(TestServlet.java:40)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:689)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n\tat\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n\tat\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n\tat\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)\n\tat\norg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)\n\tat\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)\n\tat\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)\n\tat\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n\tat java.lang.Thread.run(Thread.java:595)\n\nI suspect these is logical bug:\n\n        // Identify the HTTP-specific request and response objects (if any)\n        HttpServletRequest hrequest = null;\n        if (request instanceof HttpServletRequest)\n            hrequest = (HttpServletRequest) request;\n        HttpServletResponse hresponse = null;\n        if (response instanceof HttpServletResponse)\n            hresponse = (HttpServletResponse) response;\n\n        // Handle a non-HTTP forward by passing the existing request/response\n        if ((hrequest == null) || (hresponse == null)) {\n\n            if ( log.isDebugEnabled() )\n                log.debug(\" Non-HTTP Forward\");\n            \n            processRequest(hrequest,hresponse);\n\n        }\n\nIf \"hrequest\" or \"hresponse\" is null, why we are giving up \"request\" and\n\"response\" here?",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "39844",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P4 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "non-HTTP forward will alway result NullPointerException",
    "systemSpecification": true,
    "version": "5.5.17"
}