{
    "comments": [
        {
            "author": null,
            "body": "I don't think I can agree to this change: it looks to me like a very ugly hack.",
            "date": "20040213T09:01:25",
            "id": 0
        },
        {
            "author": null,
            "body": "I have just committed an alternative patch to CVS that fixes this issue. This \nwill be included in the next release.\n\nMany thanks.",
            "date": "20040213T20:12:13",
            "id": 1
        },
        {
            "author": null,
            "body": "*** Bug 27595 has been marked as a duplicate of this bug. ***",
            "date": "20040311T18:58:35",
            "id": 2
        },
        {
            "author": null,
            "body": "*** Bug 28399 has been marked as a duplicate of this bug. ***",
            "date": "20040415T18:18:45",
            "id": 3
        },
        {
            "author": null,
            "body": "*** Bug 28591 has been marked as a duplicate of this bug. ***",
            "date": "20040426T22:39:46",
            "id": 4
        }
    ],
    "component": "Servlets:WebDAV",
    "description": "Could not do common operations like Rename/Move, Copy, Paste from Windows 2000 /\nNT with IE 6.0.2600\nTried to do similar operations from DAVExplorer-0.90 and failed.\nWhen probing further, I found some problem with identifying the destination\nlocation for the operations.\nApplied the attached patch to the src code (from the src tar not the CVS) and it\nnow works on both tools.\n\n<PATCH>\n--- WebdavServlet.java.orig\tThu Jan 15 22:59:32 2004\n+++ WebdavServlet.java\tFri Feb 13 11:10:41 2004\n@@ -1506,8 +1506,15 @@\n \n         destinationPath = \n             normalize(RequestUtil.URLDecode(destinationPath, \"UTF8\"));\n-\n-        int protocolIndex = destinationPath.indexOf(\"://\");\n+        int protocolIndex = destinationPath.indexOf(\":/\");\n+        if( protocolIndex >= 0 ) {\n+            if( destinationPath.charAt(protocolIndex+2) != '/' ) {\n+                // add a / to make it look good\n+                destinationPath = destinationPath.substring(0,\nprotocolIndex)+\"://\"+\n+                destinationPath.substring(protocolIndex+2);\n+            }\n+        }\n+        protocolIndex = destinationPath.indexOf(\"://\");\n         if (protocolIndex >= 0) {\n             // if the Destination URL contains the protocol, we can safely\n             // trim everything upto the first \"/\" character after \"://\"\n</PATCH>",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "26906",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 major",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Unable to do operations like Rename/Move, Copy, Paste etc.",
    "systemSpecification": true,
    "version": "5.0.18"
}