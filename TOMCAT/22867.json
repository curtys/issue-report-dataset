{
    "comments": [
        {
            "author": null,
            "body": "It's Jasper2, apparently.\n\nThe second error message I got is presumably from this code in\norg.apache.jasper.compiler.Parser:\n\ntry {\n    tagHandlerClass\n\t= ctxt.getClassLoader().loadClass(tagInfo.getTagClassName());\n} catch (Exception e) {\n    err.jspError(start, \"jsp.error.unable.loadclass\", shortTagName,\n\t\t prefix);\n}\n\nso \"generator\" is just the name of my custom tag (which explains why I didn't\nfind a single hit for \"unable to load class generator\" in Google or the Apache\nBugzilla :) ... and it makes perfect sense that the classloader didn't find\nthis nested class by the nonstandard name syntax OuterClass.NestedClass\n(instead of the standard OuterClass$NestedClass syntax).\n\nSo the point remains that a nested class breaks JSP compilation if given with\nthe $ syntax, and breaks classloader lookup if given with the . syntax. So\nnested classes are not usable as tag handlers, at least as of version 4.1.24.\n\nThe root of this problem is that nested classes in Java have different names\nat compile time and at runtime. The fix is presumably to add logic to the JSP\nsource file generation, replacing all dollar signs in tag-handler classnames\nwith dots.\n",
            "date": "20030901T22:47:55",
            "id": 0
        },
        {
            "author": null,
            "body": "You're not giving enough details on the original error. Obviously declaring\nOuterClass.NestedClass in the TLD is wrong: the actual classname is\nOuterClass$NestedClass. So you shouldn't do that, that won't get you anywhere.",
            "date": "20030902T09:57:45",
            "id": 1
        },
        {
            "author": null,
            "body": "Created attachment 8031\nLog snippet showing the error message from JSP compilation",
            "date": "20030902T10:43:52",
            "id": 2
        },
        {
            "author": null,
            "body": "I've attached a logfile taken from JBoss server.log, showing the error.\n\nI do know that A.B is not the (runtime) classname of the class :) but it is a\nvalid compile-time name (and A$B isn't). My JSP page was breaking at compile\ntime because of the A$B syntax in source code. So it wasn't a very dumb attempt.\n",
            "date": "20030902T10:50:44",
            "id": 3
        },
        {
            "author": null,
            "body": "The bug is with the code generator (I assume doing a replace('$', '.') on the\ntag classname would solve the problem there; I can't see any side effect), as\nthe error log indicates.",
            "date": "20030902T12:12:07",
            "id": 4
        },
        {
            "author": null,
            "body": "Even though this bug's product/version designation has been changed to Tomcat5,\nit is still present in the Tomcat 4.1 branch, and should be fixed there as well\n... assuming there are any more releases on that branch.\n",
            "date": "20030902T13:43:30",
            "id": 5
        },
        {
            "author": null,
            "body": "This probably needs clarification from the spec.\n\nBy doing a replace('$', '.'), we are assuming that any class name containing a\n'$' is reference to an inner class, but this is not necessarily so.  I can\ncertainly define $foo to be my (non-inner) tag handler class.\n\n",
            "date": "20030902T20:48:54",
            "id": 6
        },
        {
            "author": null,
            "body": "You certainly can, but if you did that, you would pretty much have only yourself\nto blame when tools give you a hard time about it, because of this clause in the\nJava Language Specification (Section 3.8, Java Identifiers):\n\n    The Java letters include uppercase and lowercase ASCII Latin letters A-Z\n    (\\u0041-\\u005a), and a-z (\\u0061-\\u007a), and, for historical reasons,\n    the ASCII underscore (_, or \\u005f) and dollar sign ($, or \\u0024). The $\n    character should be used only in mechanically generated source code or,\n    rarely, to access preexisting names on legacy systems.\n    \nhttp://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#40625\n\nGiven that, I think it would be fair to assume that '$' means a nested class\n... especially since doing that repairs a common use case that is currently\nbroken, perhaps at the cost of breaking an arcane one which is probably *also*\ncurrently broken :)\n\nBut this section of the JLS does beg the question: why is the JSP compiler\nrejecting an identifier with a '$' in it? Since it is legal (apparently in\nsource code as well -- I thought it wasn't), there shouldn't be a problem\nresolving a classname like A$B when there is an import declaration for A\nand A contains a static nested class called B -- should there? Is Sun's\njavac breaking the JLS by rejecting this?\n",
            "date": "20030902T22:00:47",
            "id": 7
        },
        {
            "author": null,
            "body": "Yes, apparently it is breaking it, and not by accident.\n\nhttp://developer.java.sun.com/developer/bugParade/bugs/4887861.html says:\n\n    jdk 1.4.2 does not allow the use of \"$\" to refer to inner classes anymore.\n    We have fixed the code generator to address this.\n\nhttp://developer.java.sun.com/developer/bugParade/bugs/4894381.html says:\n\n    JDK 1.4.2 does not allow to generate field type for setters and getters\n    for the inner classes as user-defined serializable CMP field types with\n    '$' as returned from getClass().getName(). Added code that replaces '$'\n    with '.' for the user-defined serializable CMP field types (blob but not\n    byte[]).\n\nSo apparently they have made this decision consciously in JDK 1.4.2, even\nthough it seems to contradict the JLS.\n\nSun's own workaround in Sun ONE app server was to replace '$' with '.' ...\nI would move for Tomcat to do the same.\n",
            "date": "20030902T22:11:18",
            "id": 8
        },
        {
            "author": null,
            "body": "Ah, I'm probably wrong there ... the JLS does allow identifiers to contain '$',\nand javac still allows that. But javac no longer allows you to work with the\nassumption that a compiled nested class B in a top-level class A will be called\nA$B ... and the JLS never allowed us to make that assumption in the first place.\n\nSo I shouldn't be attempting to refer to this class with the A$B syntax. What,\nthen, is the correct way to refer to it? Must I use A.B syntax? I guess so,\naccording to JLS Section 6.7, Fully Qualified Names and Canonical Names:\n\n    A member class or member interface M of another class C has a fully\n    qualified name if and only if C has a fully qualified name. In that\n    case, the fully qualified name of M consists of the fully qualified\n    name of C, followed by \".\", followed by the simple name of M.\n\nBut presumably the only bug here is that using this correct A.B syntax is\nfailing with the abovementioned error: \"Unable to load class generator\"\n(where \"generator\" is just the tagname, which is placed in this error\nmessage instead of the classname registered for that tag, probably by\nmistake -- I guess that's a little \"extra bug\" here :) )\n",
            "date": "20030902T22:32:25",
            "id": 9
        },
        {
            "author": null,
            "body": "Personally, I would choose to do a replace '$' -> '.' in the generated source. I\ndon't see anyone willingly using '$' in a tagfile classname, except if it's an\ninner class ;-)",
            "date": "20030902T22:41:55",
            "id": 10
        },
        {
            "author": null,
            "body": "Yeah, I also prefer binary names (\"outter$inner\") instead of canonical names\n(\"outter.inner\").  However, the J2EE folks still have not made a offical\ndecision yet.\n\nThere is simple algirithm that can let one compute the canonical name from a\nClass object, without the restriction that the top-level class name not\ncontinaing '$'.  The following is based on an algorithm by Mark Roth, the JSP\nspec lead:\n\nString getCanonicalName(Class c) {\n\n    Class outer = c.getDeclaringClass(c);\n    if (outer == null) {\n        return c.getName();\n    } else {\n        String innerName = c.getName().substring(outer.getName().length()+1);\n        return getCanonicalName(outer) + \".\" + innerName; \n    }\n}\n\nThis is slightly more compilicated than replacing '$' with '.', but it covers\nall cases.",
            "date": "20030911T00:04:58",
            "id": 11
        },
        {
            "author": null,
            "body": "The decision is to use binary names, e.g. Outer$Inner.  I have fixed Jasper in\nTomcat 5 to accept that.  Let me know if it does not work for you.",
            "date": "20030919T18:50:53",
            "id": 12
        },
        {
            "author": null,
            "body": "Can someone clarify what will happen now.  Will <tagclass>A$B</tagclass> be \nconverted to A.B in the generated .java file (if not, then javac 1.4.2+ will \nfail)?  Also, will this fix be in Tomcat 4.x branch?",
            "date": "20031208T19:07:55",
            "id": 13
        },
        {
            "author": null,
            "body": "Sorry, wrong url...",
            "date": "20041020T16:34:46",
            "id": 14
        }
    ],
    "component": "Jasper",
    "description": "When I try to use a nested class such as com.foo.MyTag$Bar as a tag handler,\nthe JSP-generated class fails compilation due to the use of names containing $\nin source code. It says something like \"perchance you meant com.foo.MyTag.Bar\".\nWhen I try replacing the $ with a . in the TLD file, it gives me this:\n\no.a.j.JasperException: /headlines.jsp(11,2) Unable to load class generator\n  at o.a.j.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:94)\n  at o.a.j.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:428)\n  at o.a.j.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:219)\n  at o.a.j.compiler.Parser.parseCustomTag(Parser.java:712)\n  at o.a.j.compiler.Parser.parseElements(Parser.java:804)\n  ...\n\n(where I replaced org.apache.jasper with o.a.j to make the stack trace readable\nin Bugzilla)\n\nMy exact same classes are working fine as tag handlers in the version of Tomcat\nintegrated into Borland Enterprise Server 5.2 (don't know what version that is,\nnor which modifications they may have made, but it's certainly somewhat older\nthan Tomcat 4.1.24), but I'm seeing this failure in Tomcat 4.1.24 integrated\ninto JBoss 3.2.1. Thus I do not know for sure whether this problem is a result\nof a classloader bug introduced by the JBoss integration (or one fixed by the\nBES integration) or simply a Tomcat/Jasper bug that cropped up sometime between\nthese two versions.\n\nI also don't know whether this should go to the Jasper component or the Jasper2\ncomponent (no version info in the jasper-compiler.jar and jasper-runtime.jar\nmanifest files)",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "22867",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "P3 major",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Tag handlers can't be inner/nested classes",
    "systemSpecification": true,
    "version": "5.0.9"
}