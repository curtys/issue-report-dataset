{
    "comments": [
        {
            "author": null,
            "body": "Suggested patch?",
            "date": "20060417T15:35:08",
            "id": 0
        },
        {
            "author": null,
            "body": "(In reply to comment #1)\n> Suggested patch?\nBreak out of the loop if cause == exception.\n",
            "date": "20060417T15:39:29",
            "id": 1
        },
        {
            "author": null,
            "body": "The problem is user code:\nreturn cause == null ? this : cause;\n\nIf the root cause is null, then it should return null, not itself. ",
            "date": "20060417T15:39:48",
            "id": 2
        },
        {
            "author": null,
            "body": "(In reply to comment #3)\n> The problem is user code:\n> return cause == null ? this : cause;\n> \n> If the root cause is null, then it should return null, not itself. \n\nYou can't control every exception class that could be thrown in user code.  This\nis getRootCause(), not getCause().  Lots of java code was written before Sun\nadded getCause() to Throwable and standardized exception chaining.\n\nTomcat calling getRootCause() of an arbitrary exception class is dangerous, as\nthe infinite loop demonstrates.  It should either only call it on descendants of\nServletException and a few other known types, or at a minimum protect against\nthe infinite loop condition.\n",
            "date": "20060417T15:47:40",
            "id": 3
        },
        {
            "author": null,
            "body": "At best - here is the patch if any (not me) is interested ...\n/container/catalina/src/share/org/apache/catalina/core/StandardWrapper.java\n\n@@ -627,13 +627,14 @@\n \n     /**\n      * Extract the root cause from a servlet exception.\n-     * \n+     *\n      * @param e The servlet exception\n      */\n     public static Throwable getRootCause(ServletException e) {\n         Throwable rootCause = e;\n         Throwable rootCauseCheck = null;\n         // Extra aggressive rootCause finding\n+        int recursionKlugeDetector = 20;\n         do {\n             try {\n                 rootCauseCheck = (Throwable)IntrospectionUtils.getProperty\n@@ -644,6 +645,16 @@\n             } catch (ClassCastException ex) {\n                 rootCauseCheck = null;\n             }\n+\n+            /*\n+                We've done this 20 times .. if you've nested more than\n+                20 levels of exceptions. Tomcat throwing the wrong exception\n+                is the least of your concerns.\n+            */\n+\n+            if (recursionKlugeDetector-- == 0) {\n+                return rootCause;\n+            }\n         } while (rootCauseCheck != null);\n         return rootCause;\n     }\n",
            "date": "20060417T16:02:42",
            "id": 4
        },
        {
            "author": null,
            "body": "see http://issues.apache.org/bugzilla/show_bug.cgi?id=37038\nPerhaps Tomcat should use the commons-lang ExceptionUtils root cause finding\nthat already fixes this problem...  It appears to be superior to the // Extra\naggressive rootCause finding remification.",
            "date": "20060505T21:12:46",
            "id": 5
        },
        {
            "author": null,
            "body": "This issue has caused a production incident for us. It was rather tough to debug\ngiven the fact that one would not expect that a getRootCause() method in a\nnon-Tomcat exception actually implements a (hidden) Tomcat interface. IMHO this\nis very bad style.\n\nA recursion detector does not address these issues:\n1. Tomcat has no business calling a getRootCause() method in user code. That\nmethod may have a very different contract than what Tomcat expects. It may have\nside effects or it may be illegal to call the method in some cases. Because it\nis not clear to a user that his getRootCause() method is called by Tomcat and\nbecause exception paths are usually not tested that well, production incidents\nare likely to still happen to some users.\n2. The user still does not know that he is implementing a hidden Tomcat interface.\n3. 20 recursions (or any arbitrary number) of reflection, with calls to a method\nof unknown specifications may cause performance issues.\n\nI believe that a similar fix to the one for bug 37038 is the best solution. That\nfix would result in code that does not surprise Java developers, without the\nproblems outlined above. It is also unlikely that it would result in breakage,\nsince I don't think that it's likely that anyone took advantage of this\n'feature' to implement some functionality.",
            "date": "20061004T02:05:26",
            "id": 6
        },
        {
            "author": null,
            "body": "Wouter,  unfortunately nothing ever gets fixed in Tomcat.  The people who can \nmake the changes think there shit doesn't stink, and unless they find the bug \nand it affects them, it doesn't exist.  The patch for this would be like 1 \nline of code, and the one Tim provided above (with the typical Tomcat \ndeveloper sarcastic asshole mentality) is almost worse than the current code.  \nI won't write a patch, and you shouldn't either.  Noone will incorporate one \ninto the Tomcat codebase, ever, or let you put it in.  They will give excuses \nlike, \"if we fix it, it could break code that depends on it being broken\".  \nGood luck.",
            "date": "20061004T09:34:14",
            "id": 7
        },
        {
            "author": null,
            "body": "it is for a called game Bots ",
            "date": "20070103T13:20:33",
            "id": 8
        },
        {
            "author": null,
            "body": "I have fixed the infinite loop issue in svn by breaking out of the loop as\nJonathan suggested in comment 2. The fix will be in 5.5.21 onwards.\n\nThere are certainly more comprehensive ways of doing this, the commons-lang\napproach is just one of them. If someone would like to provide a patch then I\nwould be happy to review it.",
            "date": "20070114T11:46:05",
            "id": 9
        },
        {
            "author": null,
            "body": "Mark,\n\nThanks for working on this issue. Your change still results in potentially\ndangerous invocations of getRootCause on third-party classes, though. This fix\ndoes not have that flaw and is much cleaner overall:\n\npublic static Throwable getRootCause(ServletException e) {\n    Throwable rootCause = e.getRootCause();\n    if (rootCause instanceof ServletException\n        && rootCause != e) {\n        rootCause = getRootCause((ServletException) rootCause);\n    }\n    return rootCause;\n}\n\nCould you please review it?",
            "date": "20070115T03:49:25",
            "id": 10
        },
        {
            "author": null,
            "body": "Thanks for the suggested patch. Whilst it is safer, it also less likely to get\nat the true root cause and I'd like to keep the behaviour of getting at the root\ncause wherever possible.\n\nUsing commons-lang is one option but I'd rather not add yet another jar to the\nbuild process. It should be possible to add the ExceptionUtils class to\no.a.c.util and use that. It looks like there might be some dependencies on other\ncommons-lang classes that would need to be coded around. If you want to take a\nlook at this - that would be great. If not, no problem and I'll look at it later\nthis week.",
            "date": "20070115T06:01:03",
            "id": 11
        },
        {
            "author": null,
            "body": "Mark,\n\nIf you really want the root cause, you should do this:\n\npublic static Throwable getRootCause(ServletException e) {\n    Throwable rootCause = e.getRootCause();\n    if (rootCause instanceof ServletException\n            && rootCause != e) {\n        rootCause = getRootCause((ServletException) rootCause);\n    } else {\n        Throwable deepRootCause;\n        do {\n            deepRootCause = rootCause.getCause();\n            if (rootCause == deepRootCause) {\n                return rootCause;\n            } else if (deepRootCause != null) {\n                rootCause = deepRootCause;\n            }\n        } while (deepRootCause != null);\n    }\n    return rootCause;\n}\n\nThis code is actually far more likely to find the true root cause and as an\nadded bonus, it uses API's whose implementation you should be able to trust.",
            "date": "20070115T06:38:50",
            "id": 12
        },
        {
            "author": null,
            "body": "That won't work since JspException does not extend ServletException and \nJspException is typically the reason we wish to delve deeper into the real root \ncause. \n\nThis issue is fixed in tomcat6 since getCause() and getRootCause() are \nimlpemented as one in the same (since 1.5 jdk is required) but since tomcat \nneeds to be able to run on java 1.3 (shudders) - the getCause may not be \navailable for 1.3 implementations.\n\nRemarking as fixed for now lness a better patch arrives.\n",
            "date": "20070115T07:31:59",
            "id": 13
        },
        {
            "author": null,
            "body": "Here is some code that works for both ServletException and \nJspException:\n\npublic static Throwable getRootCause(ServletException e) {\n    Throwable rootCause = e.getRootCause();\n    return processRootCause(e, rootCause);\n}\n\nprivate static Throwable processRootCause(Exception e, Throwable rootCause) {\n    if (rootCause == null || rootCause == e) {\n        return e;   //The root cause is a ServletException or JspException\n    }\n\n    if (rootCause instanceof ServletException) {\n        rootCause = getRootCause((ServletException) rootCause);\n    } else if (rootCause instanceof JspException) {\n        JspException jspRootCause = (JspException)rootCause;\n        Throwable deeperRootCause = jspRootCause.getRootCause();\n        rootCause = processRootCause(jspRootCause, deeperRootCause);\n    }\n    return rootCause;   //The root cause is not a ServletException or JspException\n}",
            "date": "20070115T08:00:14",
            "id": 14
        },
        {
            "author": null,
            "body": "Thanks for the new patch. I have committed a variation to svn and will be in\n5.5.21 onwards.",
            "date": "20070119T18:48:17",
            "id": 15
        }
    ],
    "component": "Catalina",
    "description": "The \"// Extra aggressive rootCause finding\" in StandardWrapper.java is an\nunderstatement.  It causes an infinite loop in certain cases.  For example, the\nsemantics of the following exception class are that getRootCause() returns the\none and only root cause of the exception chain, which in this case can be the\nexception itself.  It is not derived from ServletException, thus is not bound to\nreturn null at the end of the chain as ServletException does.  Its not safe to\nuse reflection to call an arbitrary method of an arbitrary Exception class, just\nbecause it happens to have the same name as the method in ServletException.\n\npublic class MyException \n   extends Exception\n{\n   public MyException(Throwable cause) {\n      this.cause = cause;\n   }\n   Throwable cause;\n   public Throwable getCause() {\n      return cause;\n   }\n   public Throwable getRootCause() {\n      if (cause instanceof VCOMException) {\n         return ((VCOMException) exception).getRootCause();\n      }\n      return cause == null ? this : cause;\n   }\n}",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "39088",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 minor",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "StandardWrapper getRootCause() infinite loop",
    "systemSpecification": false,
    "version": "5.5.9"
}