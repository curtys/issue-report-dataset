{
    "comments": [
        {
            "author": null,
            "body": "This is a known, documented 'feature' of the RequestDumperValve.\n\nIf you have a patch for consideration, that would be great.",
            "date": "20060803T10:57:26",
            "id": 0
        },
        {
            "author": null,
            "body": "The only workaround I am aware of for this issue is to wait until the *end* of\nthe request and *then* call getParameter*() APIs and output request parameter\ninformation.  Doing so at any point prior to this can mess up the application by\nprematurely consuming the input stream and/or locking the request character\nencoding.\n\nI wrote a servlet request filter to do such things, provide JMX access, run\nacross all servlet engines, etc -- and thus don't use RequestDumperValve any\nmore.  Further I suggest to all developers I work with to avoid it except for\nlight troubleshooting as it causes more troubles to shoot :-)",
            "date": "20060803T14:54:42",
            "id": 1
        },
        {
            "author": null,
            "body": "I see that the Valve configuration reference already has a strong note to this\neffect.  I added the same note to the Valve's JavaDoc header, and to server.xml.\n I've also marked the RequestDumperValve class as deprecated and told people to\nuse the RequestDumperFilter instead.",
            "date": "20061226T06:40:21",
            "id": 2
        },
        {
            "author": null,
            "body": "Hi Yoav.\n\nMaking the Javadocs more informative is indeed helpful.  But, both Valves\nand Filters exist separately because they are useful for different use cases:\nValves are useful when the administrator wants to do something with requests\nat the servlet container level, without modifying webapps that may or may not\nbe owned or written by the administrator.  Filters are useful when you are the\nwebapp author, or when you're able and willing to modify the webapp, to do\nsomething with requests.  There are valid uses for each, and the administrator\nshould choose for themselves from the available options.  I have found\nRequestDumperValve useful on a number of occasions where I wanted more info\nabout the requests/responses to web applications I've developed, plus\nwebapps that I didn't write.  That includes webapps that were localized and\ninternationalized (in development, not every bug needs to be investigated\nin character sets other than ISO8859-1).  The RequestDumperValve has been\naround for quite a while now, and I find it quite useful, even if it doesn't\ndo everything.\n\nReopening to request the undeprecation of RequestDumperValve.\n",
            "date": "20061226T18:59:33",
            "id": 3
        },
        {
            "author": null,
            "body": "I've reluctantly un-deprecated and amended the change log as you request.\n\nHowever, I mostly disagree with your statements: I think Valves are largely\nout-dated and should be phased out in favor or portable solutions where\npossible.  They don't exist separately because they're useful: they exist\nseparately because of the historical timeline in which they were developed.",
            "date": "20061227T04:26:57",
            "id": 4
        },
        {
            "author": null,
            "body": "Thanks Yoav.\n\n> I think Valves are largely out-dated and should be phased out in favor\n> or portable solutions where possible.\n\nI agree with that, but even if 80% or 90% of Valves are better off as\nFilters, some still aren't.  As a developer I have found many cases over the\nyears where I needed to write code that could not be part of a webapp, or that\nhad to use Tomcat's code to do something.  Sometimes (rarely, but sometimes)\nthe code has to run as part of Tomcat, and Valves are better documented at\nthis point than <Listener>s are.  Since it's not a servlet, nor a Filter, we\nknow that it's not portable to other servlet containers.  But, if your company\nhas already decided to use Tomcat, this is okay.  Not much code needs to go\ninto a Valve, usually.  And while debugging a webapp that is already packaged,\nand/or already deployed, being able to just add a line or two to server.xml\nto enable, say, RequestDumperValve (which already exists in Tomcat, ready to\nrun) helps quite a bit because it is a quick way to investigate a bug.  This\nallows us to skip compiling a Filter, installing the class file somewhere,\nplus we'd have to add both a <filter> block and a <filter-mapping> block to\nthe webapp's web.xml for it.  This makes the Valve more convenient in some\nsituations.  I wish Tomcat came with more useful Valve tools like this one,\nnot less.\n\nI realize that Valves existed first, and that Filters followed.  Tomcat could\ncompletely drop support for Valves and stay servlet compliant, however it\nwould take away a useful, helpful feature of Tomcat that people do use at\ntimes.\n\nThanks again.  :)\n",
            "date": "20061227T11:43:01",
            "id": 5
        }
    ],
    "component": "Unknown",
    "description": "When RequestDumperValve is activated, getParameterNames is called (from http://\nwww.koders.com/java/\nfid998CD923F9D6A959FE5FB7880A26ADB808D36118.aspx?s=requestdumpervalve it is \ncalled at line 124). Thus, any further call to setCharacterEncoding is useless \nand the whole application must use the RequestDumperValve (which is, \nunfortunatly for any i18n application, ISO-8859-1).\nA possible workaround would be to do a deep clone of the request to be used by \nRequestDumperValve. Obviously, it implies a perforrmance leak, but since it is \na debug valve, it may seem acceptable.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "40177",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "RFE",
    "priority": "P2 enhancement",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "RequestDumperValve causes getCharacterEncoding to be called",
    "systemSpecification": true,
    "version": "5.5.15"
}