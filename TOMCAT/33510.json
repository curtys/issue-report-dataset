{
    "comments": [
        {
            "author": null,
            "body": "You didn't provide adequate information about the products and exact versions\nyou are using (web server, mod_jk).\n\nI assume you are using a multi-process apache in conjuntion with mod_jk 1.2.8.\nThen each process detects independently the availability or brokenness of a\nworker and so each process manages it's own timers.\n\nThe numbes after the timestamp in the log messages should be the process and\nthread id, so that you can see that the info comes from three different\nprocesses. The first process logs two lines, which seem to have consistent\ntiming information, the other processes are not expected to use the same timer.\n\nPlease check your log file, for the lines stating, that the worker goes into\nerror, identify the process id (4101, 4102, 4106,...) and check in the later\ndebug lines, if the tiestamps give the correct deltas for the same process ids.",
            "date": "20050211T23:49:40",
            "id": 0
        },
        {
            "author": null,
            "body": "apache 1.3.28\nmod_jk 1.2.8\ntomcat 5.1.30\n\nThe two numbers I am referring to are the last two numbers on the logged line \n(42 < 3600).  They are the time elapsed since the worker was determined to be \nin error, and the configured time in seconds before the worker is available to \nconnect again.  I've set it to 3600 here (an hour).\n\nThe first number should be incrementing by one per second, and you can see in \nthe first two logged lines it does.  However, when the minute rolls over on the \nthird line, you can see that the elapsed time jumps from 43 to 2475.  I am \nassuming this is because the implementation of the time_t type that I compiled \nwith does not simply just contain the number of seconds from an epoch.  Reading \na little on this I found that you are supposed to use the function difftime() \nin time.h to get an elapsed time value, instead of just subtracting two time_t \nvalues.  The latter method is used on line 297 of jk_lb_worker.c, and this \nproduces unexpected results.",
            "date": "20050212T00:01:57",
            "id": 1
        },
        {
            "author": null,
            "body": "OK, you might be right, that it is more correct to use difftime. But even then\nyou might see the same result:\n\nThe first 2 lines show the same delta, because they belong to the same process\nid 4106. The next line comes from a totally different process, so the starting\npoint for the measurement is another point in time. The same for the fourth line.\n\nYou might either attach a complete part of the log file including the first\nerror messages for PIDs 4101, 4102 and 4106 and also the a couple of \"not yet\nrecover\" lines for these PIDs and referencing the same starting point. Or even\nsimpler: you can check yourself if the times are correct: e.g. you should find\nthe error messages for\n\nPID 4101 at 17:19:24-1428 seconds\nPID 4102 at 17:18:30-2475 seconds\nPID 4106 at 17:17:31-42 seconds = 17:17:31-43 seconds.\n\nThese times can vary very much in case your web server is not under load. Each\nprocess detects the failure of a worker independently the first time it wants to\nused a failed worker.\n",
            "date": "20050212T00:15:58",
            "id": 2
        },
        {
            "author": null,
            "body": "I didnt notice that about the PIDs, so I will try this again.  However, I had \nbeen bringing up and down the apache server quite frequently when I was testing \nthis, and I am pretty sure that 2475 seconds earlier (41 minutes before) the \nsame process shouldnt have been around.  I was bringing apache up and down \nabout every 15 minutes to test.\n\nBut if you are right and each process determines independently if a worker is \ndown, then is there *any* way to take a failed tomcat server (say if the power \nwas lost on the machine) out of service for an extended period of time after it \nis first determined to be down?  We recently had an issue where an app server \nrunning tomcat failed for hardware reasons, and apache kept routing requests to \nit.  We expected that once mod_jk determined that the server was down once then \nno new requests would be sent to it (at least for a configurable amount of \ntime).  But this doesnt seem to be occurring, each new request tries the server \nagain and has to wait somewhere in the area of 10 minutes before it times out.\n\nNote that this is different than when we tested just killing the tomcat process \n(the machine is still up).  In this case, mod_jk does all the correct re-\nrouting stuff that we expect.  We just want the same functionality to occur \nwhen the machine physically is disabled.",
            "date": "20050212T01:10:50",
            "id": 3
        },
        {
            "author": null,
            "body": "Maybe this is not the right place to go deeper into it, tomcat-user is better.\nAs a final point inside bugzilla I would be interested, if you could confirm or\ndeny my explanations by checking the log file.\n\nBefore we switch over to tomcat-user:\n\n1) Mladen Turk is active in including global worker status fr mod_jk even for\nthe multi process model by using shared memory. It might take some time to get\nstable, but then all processes will have a global view about error status and\nhandled load for any worker.\n\n2) To disable sending requests to a tomcat server, you could delete it from the\nbalancer list and gracefully restart apache (but sometimes processes might hang\nif you do it under very high load).\n\n3) To enable more graceful shutdown and if you are using sessions with\nstickyness, you could give all workers the local flag and then before you are\ngoing to maintain some tomcat you remove the local flag. Then it will only\nhandles requests for sessions that have been started on this instance and not\nget any new sessions.\n\n4) Even in case of network failures you might be able to get a much faster error\ndetection by using the CPING/CPONG feature and setting recovery_opts and\nadequate timeouts. Study the new mod_jk documentation, there are various\ntimeouts. But be careful not to make the timeouts too short. Depending on the\nresponse times of your application timeouts between 20 and 120 seconds might\nadequate. You can also experiment with lowering the retry count.\n",
            "date": "20050212T01:23:52",
            "id": 4
        },
        {
            "author": null,
            "body": "Add difftime for calculating recovery.\nThanks for pointing that.",
            "date": "20050413T14:40:56",
            "id": 5
        }
    ],
    "component": "Connector:AJP",
    "description": "I was diagnosing some failover issues we were having with our network setup, \nand I noticed strange logs when testing the error behavior when a tomcat server \nphysically goes down.  The logs look like this (severly hacked for readability):\n\n[Thu Feb 10 17:17:31 2005] [4106:0] [debug] jk_lb_worker.c (300): worker \ncandidate giraffe (1) is in error state - will not yet recover (42 < 3600)\n[Thu Feb 10 17:17:32 2005] [4106:0] [debug] jk_lb_worker.c (300): worker \ncandidate giraffe (1) is in error state - will not yet recover (43 < 3600)\n[Thu Feb 10 17:18:30 2005] [4101:0] [debug] jk_lb_worker.c (300): worker \ncandidate giraffe (1) is in error state - will not yet recover (2475 < 3600)\n[Thu Feb 10 17:19:24 2005] [4102:0] [debug] jk_lb_worker.c (300): worker \ncandidate giraffe (1) is in error state - will not yet recover (1428 < 3600)\n\n3600 is what I set the configuration value to.  The first number should be \nincreasing by one per second, but as you can see when the minute changes, the \nnumber jumps dramatically.  So the time_t implementation I compiled with doesnt \nseem to support a simple time_t1 - time_t2 to get an elapsed time, as it is in \nthe source code (jk_lb_worker.c:297).\nDoing a little snooping found the recommendation to use the method difftime() \nto get the elapsed time value.  Should you be using this instead?",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "33510",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "recover_wait_time for workers in_error_state should be calculated using difftime()",
    "systemSpecification": true,
    "version": "5.0.30"
}