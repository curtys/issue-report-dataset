{
    "comments": [
        {
            "author": null,
            "body": "I will try to fix this.\nI recommend however that you attempt to design stuff more efficiently. Your web\napplication is very likely slow.",
            "date": "20040304T18:23:03",
            "id": 0
        },
        {
            "author": null,
            "body": "The bug is likely fixed, but this could cause regressions. Please test it.",
            "date": "20040305T13:09:30",
            "id": 1
        },
        {
            "author": null,
            "body": "Thanks for the speedy work, but the problem still exists. I have attached 6 \ntest files and a simple test servlet. If I send these test files using our http \nclient or the curl http client the results are the same. The curl command line \nI use is:\n\ncurl -F \"name=@postBigLine.txt\" http://localhost:8082/Test/TestServlet\n\nThanks",
            "date": "20040308T21:16:27",
            "id": 2
        },
        {
            "author": null,
            "body": "Created attachment 10712\nThese are some files with text to test. We actually use XML, but these should suffice",
            "date": "20040308T21:22:35",
            "id": 3
        }
    ],
    "component": "Catalina",
    "description": "When posting utf-8 data with either \\r\\n or \\n and that data exceeds the \nMAX_LINE_LENGTH the following I/O exception occurs:\nServlet threw exception\njava.io.IOException\n\tat org.apache.coyote.tomcat5.InputBuffer.reset(InputBuffer.java:463)\n\tat org.apache.coyote.tomcat5.CoyoteReader.reset(CoyoteReader.java:153)\n\tat org.apache.coyote.tomcat5.CoyoteReader.readLine\n(CoyoteReader.java:207)\n\tat symhttp.DBRActivationServlet.doPost(DBRActivationServlet.java:31)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:763)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:856)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:284)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:204)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:257)\n\tat org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:567)\n\tat org.apache.catalina.core.StandardContextValve.invokeInternal\n(StandardContextValve.java:245)\n\tat org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:199)\n\tat org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:567)\n\tat org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:184)\n\tat org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:164)\n\tat org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:149)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:567)\n\tat org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:156)\n\tat org.apache.catalina.core.StandardValveContext.invokeNext\n(StandardValveContext.java:151)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:567)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:972)\n\tat org.apache.coyote.tomcat5.CoyoteAdapter.service\n(CoyoteAdapter.java:206)\n\tat org.apache.coyote.http11.Http11Processor.process\n(Http11Processor.java:833)\n\tat \norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnectio\nn(Http11Protocol.java:732)\n\tat org.apache.tomcat.util.net.TcpWorkerThread.runIt\n(PoolTcpEndpoint.java:619)\n\tat org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run\n(ThreadPool.java:688)\n\tat java.lang.Thread.run(Thread.java:536)\n\nIf there are NO \\r\\n or \\n then there is no problem sending data greater than \nMAX_LINE_LENGTH. \n\nHere is my servlet test code:public void doPost(HttpServletRequest request, \nHttpServletResponse response)\nthrows ServletException, IOException {\n    response.setContentType(CONTENT_TYPE);\n\n    System.out.println(\"Reading body data\\n\");\n    String contentLen = request.getHeader(\"Content-Length\");\n    if ( contentLen != null ) {\n      System.out.println(\"String Content-Length: \" + contentLen);\n      BufferedReader br = request.getReader();\n      String in = null;\n      while ( (in = br.readLine()) != null ){\n        System.out.println(in);\n      }\n    } else {\n      System.out.println(\"Null content-length\");\n    }\n    PrintWriter out = response.getWriter();\n    sendStuff(out);\n  }\n  //Clean up resources\n  public void destroy() {\n  }\n\nI think the problem area is in CoyoteReader.readLine() and the handling of \\n \nand \\r\\n. This seems to be around lines  178 - 194 of  \norg.apache.coyote.tomcat5.CoyoteReader.java. \n\nProblem occurred first in 5.0.16, did an upgrade and still had the problem in \n5.0.19, tried it in some version of Tomcat 4 and had no problems.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "27447",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "CoyoteReader.readLine() read ahead problems",
    "systemSpecification": true,
    "version": "5.0.19"
}