{
    "comments": [
        {
            "author": null,
            "body": "Fixed. This report is bad, however, so if the fox wasn't trivial, it would have\nbeen a WONTFIX: whatever you are trying to do is likely very wrong. I wonder how\nyou didn't come up with a patch. Mine was:\n\ndiff -r1.26 WebappClassLoader.java\n1085c1085,1086\n<                 if (repository.endsWith(\".jar\")) {\n---\n>                 if ((repository.endsWith(\".jar\")) \n>                     && (!(name.endsWith(\".class\")))) {\n",
            "date": "20031129T09:09:15",
            "id": 0
        },
        {
            "author": null,
            "body": "Thanks for the fix. I didn't submit any patch since it's the first time I look\nat tomcat's source code and have no idea of the global scope.",
            "date": "20031129T17:12:49",
            "id": 1
        },
        {
            "author": null,
            "body": "*** Bug 25088 has been marked as a duplicate of this bug. ***",
            "date": "20031129T18:53:24",
            "id": 2
        }
    ],
    "component": "Catalina",
    "description": "I think I've stumbled into a bug in the webapp classloader in Tomcat 5.0.14.\n\nConsider the following servlet, which I mapped to /* for testing convenience.\n\nimport java.io.*;\nimport java.net.URL;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.*;\n\npublic class Test extends HttpServlet\n{\n    public void service(HttpServletRequest req, HttpServletResponse res)\n    throws ServletException, IOException\n    {\n        PrintWriter out = res.getWriter();\n        URL rsrc = getClass().getResource(\"Test.class\");\n        String tst = rsrc.toString()+\" : \"+\n            rsrc.openStream()+\" : \"+\n            getClass().getResourceAsStream(\"Test.class\");\n        out.println(tst);\n        out.close();\n    }\n}\n\n\nWhen I put the compiled class file in ROOT/WEB-INF/classes\nand visit http://localhost:8080/ after a server startup, I get the following page:\n\nfile:/jakarta-tomcat-5.0.14/webapps/ROOT/WEB-INF/classes/Test.class :\njava.io.BufferedInputStream@6a3960 : java.io.ByteArrayInputStream@1dccedd\n\n\nWhen I create a jar file with just that class inside, put it in ROOT/WEB-INF/lib\n(after removing everything from ROOT/WEB-INF/classes before) and visit\nhttp://localhost:8080/ after a server restart, I get the following page:\n\nHTTP Status 500 -\ntype Exception report\nmessage\ndescription The server encountered an internal error () that prevented it from\nfulfilling this request.\nexception\njava.io.FileNotFoundException:\n/jakarta-tomcat-5.0.14/work/Catalina/localhost/_/loader/Test.class\n(No such file or directory)\njava.io.FileInputStream.open(Native Method)\njava.io.FileInputStream.(FileInputStream.java:106)\njava.io.FileInputStream.(FileInputStream.java:66)\nsun.net.www.protocol.file.FileURLConnection.connect(FileURLConnection.java:69)\nsun.net.www.protocol.file.FileURLConnection.getInputStream(FileURLConnection.java:156)\njava.net.URL.openStream(URL.java:913)\nTest.service(Test.java:13)\njavax.servlet.http.HttpServlet.service(HttpServlet.java:856)\n\nThe openStream() method has thrown this exception, and the\ngetResourceAsStream(\"Test.class\") method returns null.\n\nThere's clearly something wrong here, since the file is indeed not available on\nthat location. The work directory\n\"/jakarta-tomcat-5.0.14/work/Catalina/localhost/_\" just contains one file:\n\"tldCache.ser\" and no directory \"loader\" at all.\n\nI've looked through the sources and found some things in\norg.apache.catalina.loader.WebappClassLoader.\n\nOn line 552, the following is done:\n\npublic void setWorkDir(File workDir) {\n    this.loaderDir = new File(workDir, \"loader\");\n}\n\nWhich is where the \"loader\" directory comes from.\n\nOn line 1085, the following is done:\n\nif (repository.endsWith(\".jar\")) {\n    // Copy binary content to the work directory if not present\n    File resourceFile = new File(loaderDir, name);\n    url = resourceFile.toURL();\n}\n\nOn line 1814, I found this:\n\n// Extract resources contained in JAR to the workdir\nif (!(path.endsWith(\".class\"))) {\n    byte[] buf = new byte[1024];\n    File resourceFile = new File\n        (loaderDir, jarEntry.getName());\n    if (!resourceFile.exists()) {\n    ...\n\nTo me it seems that the code on line 1085 assumes that the code on line 1814 has\nalready been executed before, somehow this isn't the case which leads to\nunretrieval resources when they are stored in jar files.\n\nI hope I identified this issue correctly and that it can be fixed for the next\nrelease.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "25079",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 minor",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Tomcat 5.0.14 classloader bug",
    "systemSpecification": true,
    "version": "5.0.14"
}