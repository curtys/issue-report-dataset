{
    "comments": [
        {
            "author": null,
            "body": "The call to newInstance is guarded by a try/catch, so its failure should not\ncause the compilation to be aborted.  Please attach a test case.",
            "date": "20040609T21:20:25",
            "id": 0
        },
        {
            "author": null,
            "body": "went and looked at the try-catch block.  You are trapping Exception. \nNoClassDefFoundError is not an Exception, it's an Error.  You should consider\ntrapping Throwable instead, if you want to guarantee the newInstance will not\ncause compilation to fail.",
            "date": "20040609T21:27:03",
            "id": 1
        },
        {
            "author": null,
            "body": "Fixed in CVS.  Bean instantiations are now avoided at compilation time.",
            "date": "20040610T21:22:47",
            "id": 2
        }
    ],
    "component": "Jasper",
    "description": "We have a form bean that does some static initialization which references some\nclasses which only work if the system is actually running.  For some reason,\nthough, when jspc is processing the useBean tag referring to this bean, it tries\nto instantiate the bean, which fails b/c, of course, it is not doing so in the\ncontext of a running system, but is doing so while building.  We did not have\nthis problem with jasper 1, but we do in jasper 2.  Also, fyi, we have tomcat\n5.0.26 (least, that's what it says on system startup) but that wasn't an option\nin the version box.  Here's the tag from the jsp:\n\n<jsp:useBean id=\"MaintainProductForm\"\nclass=\"com.fuelquest.products.web.MaintainProductForm\" scope=\"request\"/>\n\nhere's the jspc output, including the stack trace:\n\njspc:\n     [java] log4j:WARN No appenders could be found for logger\n(org.apache.jasper.compiler.JspRuntimeContext).\n     [java] log4j:WARN Please initialize the log4j system properly.\n     [java] java.lang.NoClassDefFoundError\n     [java]     at\ncom.fuelquest.relationships.AbstractRelationshipTypeProvider.getRelationshipType(AbstractRelationshipTypeProvider.java:71)\n     [java]     at\ncom.fuelquest.products.ProductRelationshipTypes.getProductFtaRelationshipType(ProductRelationshipTypes.java:71)\n     [java]     at\ncom.fuelquest.products.web.MaintainProductForm.<clinit>(MaintainProductForm.java:76)\n     [java]     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native\nMethod)\n     [java]     at\nsun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n     [java]     at\nsun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n     [java]     at java.lang.reflect.Constructor.newInstance(Constructor.java:274)\n     [java]     at java.lang.Class.newInstance0(Class.java:308)\n     [java]     at java.lang.Class.newInstance(Class.java:261)\n     [java]     at\norg.apache.jasper.compiler.Generator$GenerateVisitor.visit(Generator.java:1212)\n     [java]     at org.apache.jasper.compiler.Node$UseBean.accept(Node.java:1116)\n     [java]     at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2163)\n     [java]     at org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2213)\n     [java]     at org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2219)\n     [java]     at org.apache.jasper.compiler.Node$Root.accept(Node.java:456)\n     [java]     at org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2163)\n     [java]     at\norg.apache.jasper.compiler.Generator.generate(Generator.java:3261)\n     [java]     at\norg.apache.jasper.compiler.Compiler.generateJava(Compiler.java:244)\n     [java]     at org.apache.jasper.compiler.Compiler.compile(Compiler.java:470)\n     [java]     at org.apache.jasper.JspC.processFile(JspC.java:776)\n     [java]     at org.apache.jasper.JspC.execute(JspC.java:905)\n     [java]     at org.apache.jasper.JspC.main(JspC.java:195)\n     [java] Exception in thread \"main\" \n\n     [java] Java Result: 1\n\nWe can probably code around this problem, but it does seem a bit \"odd\", to say\nthe least, that jasper would be instantiating classes and form beans in order to\ngenerate java code....it seems like it could learn everything it needs to by\ninspecting the Class without needing to actually create an instance.  I'm not\nreally defending the static initialization that takes place in the class, it\nwasn't really my idea, but it really shouldn't matter to jasper one way or the\nother.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "29478",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "problem with JSPC and useBean and static initialization",
    "systemSpecification": true,
    "version": "5.0.25"
}