{
    "comments": [
        {
            "author": null,
            "body": "Created attachment 23308\nTest war to reproduce the problem",
            "date": "20090225T18:22:54",
            "id": 0
        },
        {
            "author": null,
            "body": "Created attachment 23309\nOriginal Tomcat log with connectors set to trace",
            "date": "20090225T18:23:39",
            "id": 1
        },
        {
            "author": null,
            "body": "Created attachment 23310\nTomcat log with additional stacks",
            "date": "20090225T18:24:04",
            "id": 2
        },
        {
            "author": null,
            "body": "Created attachment 23311\nServlet log, so that one can compare the timestamps",
            "date": "20090225T18:24:35",
            "id": 3
        },
        {
            "author": null,
            "body": "I used the default server.xml.",
            "date": "20090225T18:24:59",
            "id": 4
        },
        {
            "author": null,
            "body": "The problem seems to come from\n\nhttp://svn.apache.org/viewvc?view=rev&revision=580815\n\nwhich changed flush handling in MsgContext. Since there is no BZ related to this fix, it is not clear to me, what the right solution is. After reverting this change, the problem is gone.\n\nI will ping Bill Barker, who added this fix.",
            "date": "20090225T19:02:30",
            "id": 5
        },
        {
            "author": null,
            "body": "Ursache ist der Patch\n\nhttp://svn.apache.org/viewvc?view=rev&revision=580815\n\nder von Bill Barker in 5.5.26 eingebracht wurde. Sobald dieser herausgenommen wird, ist auch das Problem der doppelten Headers im Testcase weg.\n\nWir kontaktieren Bill gerade, um sein Ursprungsproblem zu verstehen und einen besseren Patch daf\u00fcr zu finden.\n\nAls Workaround k\u00f6nnten wir eine einzelne Klasse ohne den oben angegebenen kaputten Patch bauen und Ihnen zur Verf\u00fcgung stellen. Die Klasse wird dann einfach in server/classes abgelegt und \u00fcberlagert die im Jar-File enthaltene.\n\nGru\u00df\n\nRainer Jung",
            "date": "20090225T19:13:01",
            "id": 6
        },
        {
            "author": null,
            "body": "Please ignore comment #7. It wasn't meant to be added to this ticket. Sorry for the noise.",
            "date": "20090225T19:18:24",
            "id": 7
        },
        {
            "author": null,
            "body": "The original problem was that when client-flush was implemented in mod_jk, the default connector didn't look to see that the headers were sent as well.  Now the headers are sent, but the CoyoteRequest isn't marked as committed.\n\nThe simplest fix is to change R580815 to do res.sendHeaders(...) instead of calling the ActionHook.  But I'm not certain that it's the best fix, since I haven't looked at it very long.  I'd +1 this change if you need it in a hurry, since I'm a bit short on spare cycles at the moment.\n\nOf course the other place to change this is to call res.setCommitted(true) from JkInputStream.appendHead(...).  As I said, haven't looked at it long enough to know which is better.\n\nOne thing that worries me is that you don't see it in 6.0, since I can't find the difference in the o.a.jk Connectors.",
            "date": "20090225T19:45:52",
            "id": 8
        },
        {
            "author": null,
            "body": "(In reply to comment #9)\n> The original problem was that when client-flush was implemented in mod_jk, the\n> default connector didn't look to see that the headers were sent as well.  Now\n> the headers are sent, but the CoyoteRequest isn't marked as committed.\n\nI see, good to know.\n\n> The simplest fix is to change R580815to do res.sendHeaders(...) instead of\n> calling the ActionHook.  But I'm not certain that it's the best fix, since I\n> haven't looked at it very long.  I'd +1 this change if you need it in a hurry,\n> since I'm a bit short on spare cycles at the moment.\n> \n> Of course the other place to change this is to call res.setCommitted(true) from\n> JkInputStream.appendHead(...).  As I said, haven't looked at it long enough to\n> know which is better.\n\nI'll try a couple of options.\n\n> One thing that worries me is that you don't see it in 6.0, since I can't find\n> the difference in the o.a.jk Connectors.\n\nYes, I retested with 6.0.18, 6.0 HEAD and trunk. None of them shows the problem. So I'll also investigate code differences.",
            "date": "20090226T02:59:14",
            "id": 9
        },
        {
            "author": null,
            "body": "I found the reason, why 6.0 and trunk behave better. It's a side effect of r411577. It replaces INITIAL_STATE with an variable initial. When FLUSH sends out the headers, initial is used as a guard against duplicate sending of the headers.\n\nI will attach a patch which is a direct port of this side effect to TC 5.5.",
            "date": "20090226T05:02:48",
            "id": 10
        },
        {
            "author": null,
            "body": "Created attachment 23314\nPatch using a guard to prevent duplicate headers flushing in OutputBuffer",
            "date": "20090226T05:04:00",
            "id": 11
        },
        {
            "author": null,
            "body": "Comment on attachment 23314\nPatch using a guard to prevent duplicate headers flushing in OutputBuffer\n\nThis patch is wrong.",
            "date": "20090226T07:27:07",
            "id": 12
        },
        {
            "author": null,
            "body": "My test for the proposed patch was wrong.\n\nThe situation is (as always) more complicated:\n\nThe flushing does not commit the response.\n\nRemember, that the servvlet does:\n\n    response.setContentLength(0);\n    response.getOutputStream().print(\"\");\n    response.flushBuffer();\n\nflushBuffer() triggers OutputBuffer.doFlush(). In there we already have state == CHAR_STATE. In this case we do not call coyoteResponse.sendHeaders() and thus the coyoteResponse doesn't get committed.\n\nThen we trigger ACTION_CLIENT_FLUSH.\n\nBy revision r580815, we immediately do ACTION_COMMIT inside ACTION_CLIENT_FLUSH.\n\nThis in turn calls JkInputStream.appendHead(), which sends the headers without committing.\n\nLater from Response.finishResponse() we do ACTION_CLOSE, which in turn again does ACTION_COMMIT and we send out the headers a second time.\n\nI guess at least at the end of the first ACTION_COMMIT we should have called coyoteResponse.setCommitted(true). The question is: where exactly should we do that?",
            "date": "20090226T07:56:51",
            "id": 13
        },
        {
            "author": null,
            "body": "Created attachment 23316\nPatch using a guard to prevent duplicate headers flushing in OutputBuffer\n\nThis time the patch is a little more serious and unfortunately not so easy to review. It is still a partial backport from TC 6. I hope I did the tests correct now. Any comments welcome.",
            "date": "20090226T08:37:14",
            "id": 14
        },
        {
            "author": null,
            "body": "This has been fixed in 5.5.x and will be included in 5.5.28 onwards.",
            "date": "20090409T04:12:20",
            "id": 15
        }
    ],
    "component": "Connector:AJP",
    "description": "This is a regression between 5.5.25 (OK) and 5.5.26 (broken).\nThe same problem exists in 5.5.27 and in 5.5 trunk as of today.\nIt does not exist in 6.0.18.\n\nI will attach a test case DoubleResponse.war. After deploying it, cou can simply call /DoubleResponse/.\n\nThe code is contained in the war. It is simple and basically does:\n\n    response.setContentLength(0);\n    response.getOutputStream().print(\"\");\n    response.flushBuffer();\n\nThis leads to sending the request headers twice when used with the AJP connector (tested without APR). With HTTP it works.\n\nYou can observe the double sending by either sniffing between web server and Tomcat, or setting JkLogLevel to debug.\n\nSince mod_jk 1.2.27 we do no longer allow duplicate header sending.\n\nI increased the log level of some connector packages. One can see a duplicate COMMIT block in the attached log lines. To make the analysis easier I added output of the method stack for some of those lines. Both logs are attached.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "46770",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Headers are send duplicate",
    "systemSpecification": false,
    "version": "5.5.27"
}