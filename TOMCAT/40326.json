{
    "comments": [
        {
            "author": null,
            "body": "See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4513817 for the Sun Java\nBugParade reference on this bug.",
            "date": "20061225T05:20:32",
            "id": 0
        },
        {
            "author": null,
            "body": "Also updating version to latest 5.5, as the same code is still there\n(org.apache.catalina.servlets.DefaultServlet#executePartialPut, line 494).\n\nThe method returns a handle to the file, so it's not a method-local fix.",
            "date": "20061225T05:23:01",
            "id": 1
        },
        {
            "author": null,
            "body": "Actually, looking at the code a little further, the fix is simpler than I\nthought.  I've just committed it to SVN after a bit of local testing, and it\nlooks fine, but I'd like further testing.  I'm going to ask on the dev list as\nwell, but if you could test, that'd be great.",
            "date": "20061225T05:32:26",
            "id": 2
        }
    ],
    "component": "Catalina",
    "description": "DefaultServlet uses File.deleteOnExit() which is known to leak jvm native memory.\nThe call is made on executePartialPut() (called from doPut()).\n\nAny server running for a long time will not get rid of these orphan requests to\ndelete tmp PUT files on exit and may run out of memory if PUTting many files.\n\nThe solution is to completely avoid such method. You must deal manually with the\ndeletion of unused files. You can use try{create+use}finally{delete}.\n\nIf it is done in many phases (I'm not sure what partial PUT means) you must\nassociate that file to the httpsession so that the httpsession disposal will\ndelete the tmp file safely. If there is no session ongoing you must deny\nmultiphase PUT to stay safe.\n\nIn any case, partial PUT or not, a jvm crash may leave those tmp files\nundeleted, so it would be safer to assign a directory to tomcat tmpfiles\n(already exists I think) and wipe it clean on tomcat start. If you don't want to\ndelete all files, then choose filenames that have a pattern unlikely to clash\nwith existing files. Better, choose filenames that you can assert they came from\ntomcat.\n\nexample: _tmp_tomcat_[userfilename]_[privatehashOf(userfilename)].tmp\nwhen you read the \"userfilename\", only tomcat can rehash and compare with the\nprivate hash number. If the hash number is not equal, it is not a tomcat tmp\nfile. This makes it really hard for a user to accidentally loose a file in that\ntmp folder.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "40326",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "DefaultServlet uses File.deleteOnExit() which is known to leak jvm native memory",
    "systemSpecification": false,
    "version": "5.5.20"
}