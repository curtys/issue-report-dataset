{
    "comments": [
        {
            "author": null,
            "body": "Created attachment 14036\nReplacement for java.util.logging.LogManager\n\nAttaching source.",
            "date": "20050118T06:28:43",
            "id": 0
        },
        {
            "author": null,
            "body": "Ok, the weak hash map should allow avoiding leaking memory (hopefully).\n\nThe default bare bones implementation of java.util.logging, as provided by Sun\nin its JDK, is rather limited for containers. It lacks a good file based logger,\nfor example. So your class is one part of a container-friendly java.util.logging\nimplementation. This is not Tomcat specific, and at the moment, we have not\ndecided to provide such an implementation.\n\nNote: we don't have anything against comments in sources ;)",
            "date": "20050118T12:02:46",
            "id": 1
        },
        {
            "author": null,
            "body": "Yeah, java.util.logging is very bare bones, and probably very few apps running inside Tomcat use it. But \nthe fact remains that some web apps will use it, perhaps providing their own more sophisticated \nhandlers. I think it makes sense for any container to provide the best support possible for apps using \nstandard APIs, even if those APIs aren't perfect.",
            "date": "20050119T02:03:56",
            "id": 2
        },
        {
            "author": null,
            "body": "I didn't say your code will not be accepted eventually. I just said that at the\nmoment nothing had been decided.\n\nI think we would also need a Logger which would do file rolling (code from the\nold FileLogger could be reused). At the moment, using java.logging is probably\ngood enough in development (you have nothing to install, and it's easy to\nconfigure when you need to enable debugging), but not much more.",
            "date": "20050119T12:43:37",
            "id": 3
        },
        {
            "author": null,
            "body": "I'm -0.5 on this: I don't want anything to do with a logging implementation.  \nLeave it java.util.logging, log4j, and commons-logging to work things out.",
            "date": "20050120T15:53:44",
            "id": 4
        },
        {
            "author": null,
            "body": "Make sense. I suppose an implementation of java.logging for servers would be its\nown separate project.",
            "date": "20050120T16:08:59",
            "id": 5
        },
        {
            "author": null,
            "body": "Thanks for your interest in this. I'm not sure if I made the problem clear, however.\n\nI'm not asking for Tomcat to change the way its own logging works or anything like that. I'm not asking \nfor Tomcat to provide better handlers for the JDK logging system. The problem I'm trying to solve is \nthis. If you have two webapps that both use JDK logging internally, then they both share the same set of \nLogger instances. This means that if they use the same names for the loggers (which would be the case \nif they both make use of the same support library, for example) then their log messages get mixed up \ntogether. The log messages from the second webapp will be sent to the handlers of the first webapp \nand vice versa. Note that the code actually doing the logging is probably not even aware that it's \nrunning inside a container.\n\nThis is arguably a (minor) security issue as well, as a rogue webapp can grab references to the loggers \nused by other webapps and screw with them.\n\nUsing this replacement LogManager does nothing more than isolate Loggers to the servlet context that \ncreates them, rather than having them global to the entire VM which is the default. It's still up to the \nwebapp to provide appropriate log filters and handlers for what it wants to do.\n\nThe reason for my request is that, due to the design of the JDK logging system, this can only be \naddressed by the container. Without this, there's nothing a correctly written webapp can do to prevent \nother webapps sending their messages to its logs (accidently or otherwise). Now, you can legitamately \nargue that JDK logging is badly designed and you don't see why Tomcat should have to fix its mistakes. \nFair enough. But at the end of the day, correctly written webapps that happen to use JDK logging may \nnot work too well when they're run inside Tomcat.\n\nI think my biggest obstacle to getting this in is that 99.9999% of webapps running inside Tomcat use \nLog4j. I think I'm the only person in the world who needs this :-)",
            "date": "20050121T03:46:23",
            "id": 6
        },
        {
            "author": null,
            "body": "I'd imagine you're not the only one.  If it makes you feel better, we on the \nlog4j-dev list have been dealing with this issue for months now, in \npreparation for log4j 1.3.\n\nOf course, there's nothing preventing you from doing your own Tomcat build \nwith your patch, if you haven't already done so.  Whether you've done this \nalready or not, another good idea would be to post your issue on the tomcat-\nuser mailing list: maybe you'll get other creative solutions.  ",
            "date": "20050121T03:53:50",
            "id": 7
        },
        {
            "author": null,
            "body": "This is the subject of a separate project. Please don't start chiming out\n\"security\" in the hope your patch is integrated in Tomcat: it will not (and it\nis obviously not a security issue). The only reason I'm keeping this open is\nthat so someone can find it more easily for an eventual commons-foobar project.",
            "date": "20050121T09:08:09",
            "id": 8
        },
        {
            "author": null,
            "body": "(In reply to comment #9)\n> This is the subject of a separate project. Please don't start chiming out\n> \"security\" in the hope your patch is integrated in Tomcat: it will not (and it\n> is obviously not a security issue). The only reason I'm keeping this open is\n> that so someone can find it more easily for an eventual commons-foobar project.\n\nThe point I was trying to demonstrate is that this is an issue of context isolation as much as logging. \nBoth the spec and Tomcat go to some lengths to ensure that webapps running in the same JVM can be \nisolated from each other. I just see this as another aspect of that isolation; the fact it's related to \nlogging is almost incidental. But as you don't think it's appropriate for Tomcat, I'll stop bugging you \nnow :-)\n",
            "date": "20050124T02:45:52",
            "id": 9
        },
        {
            "author": null,
            "body": "I would suggest switching to Log4j 1.3 or the UGLI API (\nhttp://logging.apache.org/log4j/docs/ugli.html ), of which there are\nimplementations for Log4j, JDK1.4 logging, simple system.out logging, and NOP. \nYou decide which implementation by providing it in the classpath and never\nchange the API you reference.  Kind of like commons-logging, but without the\nbrittleness of the discovery system.  Anyway, if you use Log4j as the\nimplementation (directly or via UGLI-Log4j), you can use a repository selector (\nhttp://www.qos.ch/logging/sc.jsp ) which will effectively separate container\nlogging from application logging using a single instance of Log4j (in\ncommon/lib).  Actually, you can share logging by giving two apps the same logger\nrepository name to use.  Read the Javadoc for more info...\n\nhttp://cvs.apache.org/viewcvs.cgi/logging-log4j/src/java/org/apache/log4j/selector/ContextJNDISelector.java?rev=1.18&view=markup\n\n\nJake",
            "date": "20050205T22:44:48",
            "id": 10
        },
        {
            "author": null,
            "body": "Strong -1. As I have said a few times, I find Ceki's more intent on splitting\nthe logging market for his own benefit rather than try to adhere or participate\nto any standards. Since you seem to participate in those efforts, how about\nencouraging taking the interoperability route, which would be beneficial to\neveryone involved, and stop pushing stupid intiatives like this ugly one ?",
            "date": "20050206T12:26:03",
            "id": 11
        },
        {
            "author": null,
            "body": "Remy,\n\nFirst, I didn't ask for a vote.  Second, your comments are *always* \"Strong\", so\nyou can skip the redundancy and just comment.  Third, the core of my comment was\nabout using a Log4j repository selector which specifically addresses the\ncomments about separating logging per application in the presence of a VM wide\nlogging implementation.  UGLI was an aside that maybe could have been left out,\nbut I thought I'd mention it.  Sorry to ruffle your feathers!\n\nBut since you seem to have focused on the non-core part of the comment, I'll\nbite.  What do you suggest then?  Continue using the commons-logging?  IMO,\nthat's not a solution and I'm not alone in this thought (one example of many\nbelow)...\n\nCommons Logging was my fault\nhttp://radio.weblogs.com/0122027/2003/08/15.html\n\n\nUGLI provides for a common logging API, avoids the brittleness of\ncommons-logging discovery, allows for a tiny jar to be compiled against and/or\ndistributed with any given project, and allows one to use any logging\nimplementation at runtime including Log4j, JDK1.4 logging, System.out and NOP. \nMore can be added.\n\nDoes your objection merely have to do with a personality conflict with Ceki and,\nby proxy, myself?  Any problems with Yoav who, to my knowledge, hasn't voiced\nobjections to UGLI and is a Log4j developer (sorry Yoav, I don't mean to bring\nyou into this, just pointing out a possible inconsistency here)?  If not, I find\nyour motivations suspect.\n\nIf I'm just way off on the above, is it that the UGLI API is not javax.ugli, but\norg.apache.ugli?  Any constructive thoughts on making UGLI or some other concept\nmore of a community process?  You mention the \"interoperability route\".  Exactly\nwhat you do mean here?  What's not \"interoperable\" about UGLI?  If you think I'm\nclueless, how about giving me a clue and be constructive yourself \"which would\nbe beneficial to everyone involved\".\n\n\nJake\n",
            "date": "20050206T14:05:26",
            "id": 12
        },
        {
            "author": null,
            "body": "The article pointed is completely inaccurate. It's not my fault if the original\nauthor did not know how his tool could be improved and used properly.\nCommons-logging specific issues are minimal these days, so I don't see anything\nto fix here.\n\nThis bug is about limitations with the default implementation of java.util.logging.\n\n-1 for ugli. We're obviously going to continue using commons-logging (which does\nmore or less the same as ugli does; again, I note willingness to avoid\nparticipating in non log4j initiatives).\n\nI have no personality conflict with Ceki, other than the fact that he chose to\nsplit the logging API, rather than try to contribute and enhance standards. That\nis his choice, but as you can probably understand, this created difficulties for\nusers like me, which now have multiple incompatible APIs on hand, with no merge\non the horizon, and forced me into using useless wrappers (like\ncommons-logging), which have their own individual issues, to overcome this. So\nit's a professional conflict, if you'd like ;)\n\nUGLI is yet another fork attempt by Ceki of a well accepted API, rather than try\nto contibute or enhance the said API. It's just lame, I have nothing else to say.\n",
            "date": "20050206T14:26:45",
            "id": 13
        },
        {
            "author": null,
            "body": "\n> I have no personality conflict with Ceki, other than the fact that he chose to\n> split the logging API, rather than try to contribute and enhance standards.\n\nLog4j joined Apache in late 1999. Not only is calling log4j a fork of\njava.util.logging factually inaccurate, it is also insulting.\n\nAs for participation by log4j community, have a look at pages 85 and\n86 of the JSR-47 specification:\n\n  5.4 Changes between 0.71 and 0.80\n  \n  Adopted some changes suggested by the Apache log4j community:\n  \n  - There is now a Logger.getParent method to allow you to find the\n  nearest extant ancestor for a given Logger. To help implement this, a\n  Logger.setParent method has been added.\n  \n  - Loggers may now inherit their effective level from their parent. If\n  a Logger\u2019s level is set to null then it will effectively inherit its\n  parent\u2019s level (recursively up the tree). This effective level is the\n  level that will be used for all output checks. As a side effect of\n  this change, the LogManager.getLevel and LogManager.setLevel methods\n  have been removed, as they are now largely redundant and potentially\n  confusing.\n  \n  - default Loggers will now also send their output to their parent\u2019s Handlers\n  (recursively up the tree)\n  \n  - default Loggers will now also send their output to their parent\u2019s\n  Handlers (recursively up the tree). As a side effect of this, the old\n  \"global handlers\" has become obsolete. The global handlers are now\n  replaced by the Handlers for the root Logger in the namespace. So the\n  LogManager methods addGlobalHandler, removeGlobalHandler,\n  getGlobalHandlers, removeAllGobalHandlers, publish, and flush have\n  been removed. The Logger methods getUseGlobalHandlers and\n  setUseGlobalHandlers have been replaced with the methods\n  getUseParentHandlers and setUseParentHandlers. The LogManager\n  \"handlers\" is now used to define the initial handlers for the root\n  Logger.\n  \n  - a Logger does not have a resource bundle name defined, then it will\n  inherit the resource bundle name defined for its parent, recursively\n  up the tree.\n  \n  - There is a new class ErrorManager for handling errors during logging\n  output. An ErrorManager may be added to a Handler using\n  Handler.setErrorManager and retrieved using\n  Handler.getErrorManager. When an output error occurs on the Handler\n  the associated ErrorManager will be called to process the error. This\n  has replaced the previous mechanism based on Handler.setException and\n  Handler.getException, and those two methods have been removed.\n\nNote that some of these contributions are not insignificant.\n\n> UGLI is yet another fork attempt by Ceki of a well accepted API,\n> rather than try to contibute or enhance the said API. It's just lame,\n> I have nothing else to say.\n\nUGLI was developed in order to support logging generated by log4j\ncomponents internally. (In log4j 1.3, log4j components use log4j\nitself when logging internally generated messages.) In case the log4j\ncomponent cannot get a handle to a valid LoggingRepository, it must\nfallback to another implementation which is where UGLI comes in.\n\nBugs caused by JCL's discovery mechanism do much harm to log4j's\nreputation. UGLI avoids these bugs with a simpler and more robust\napproach.\n\nI chose to ignore Remy's other more personal comments which are\nunbecoming of an ASF member.\n\n",
            "date": "20050206T20:03:01",
            "id": 14
        },
        {
            "author": null,
            "body": "Please reread my comments. I am calling ugli a fork of commons-logging, which is\naccurate. It would be much more productive to enhance commons-logging instead\n(as long as API compatibility is preserved). The code is very small (as is\nugli's code).\n\nlog4j predates java.logging, of course, but it's been years now, and there have\nbeen no efforts or progress to support it. I think it's safe to say that few\npeople care about whatever design issues might exist with java.logging (I am\nfairly certain it is good enough, overall, since the small subset which is\ncommons-logging is good enough for us right now), and they would have been very\ngrateful to avoid having to use stuff like commons-logging. I am also fairly\ncertain usage of log4j would be even higher, and, on a personal standpoint, I\nwould be a happy camper :)\n\nObviously, contributions to java.logging original design are nice, but in the\nend it does not matter if log4j does not support it (or if java.logging had\nfailed altogether, which, unfortunately or not, is not the case). I do not\nactually care about java.logging, all I want is to not have 2 different\nincompatible logging APIs at the end. Many people apparently think the same way,\nas they are now standardizing on commons-logging to get unified configuration\nfor all components.\n\nSince the API problem is at the root of nearly all of the issues we've had (CL\nissues, etc), I think the way this could have been avoided is fairly clear, and\nyou could have avoided whatever all the bugs that were caused by the use of\ncommons-logging.\n\nAnyway, I'd like to point out this bug report was about enhancements to\njava.logging support in Tomcat, not about replacing whatever logging API we use\nwith log4j or (that's new) one of its \"child\" APIs. This is a recurrent \"candid\"\nproposal, and is getting old.\n",
            "date": "20050206T21:13:43",
            "id": 15
        },
        {
            "author": null,
            "body": "Remy,\n\nThat's a lot of words for having \"nothing else to say\", especially when you are\nthe one who strayed off in to this discussion when all I was trying to do was\ncomment about context isolation, albeit from Log4j's perspective, which I don't\nthink is exactly off-topic in this report even if it is about JDK 1.4 logging.\n\nIn any case, can you address why Tomcat 5.0.xx and 5.5.x ship with\ncommons-logging-api.jar and not commons-logging.jar?  Why is the former\nnecessary?  As I understand it, the only diffence is the exclusion of\n\"org.apache.commons.logging.impl.Log4JLogger\" and \n\"org.apache.commons.logging.impl.AvalonLoggersupport\".  Is it a technical\ndecision or a philisophical one?  If a technical one, is the reason to avoid\ncommons-logging discovery issues if Log4j or Avalon is somewhere in a child\nclassloader visible to discovery, but invisible to the server, and therefore, to\navoid NoClassDefFoundError's?  You say commons-logging isn't broken, but doesn't\nthis just typify the problem with commons-logging?  Don't let me put words in\nyour mouth, but I can't come up with any other rational reason for confusing the\nsituation with two nearly identical, but differently functioning, jars from the\ncommons-logging project.  Why would Log4j want to be involved in something\nalready so broken other than making sure we generally interoperate with it\n(which we did for the commons-logging-1.0.4 release, so please stop claiming\nthat the Log4j is some rogue uncooperative project).\n\nBTW, how is a logging alternative like UGLI (which, as Ceki explained, is an\ninteral fallback logging implementation that happens to double as generic API)\nconsidered a commons-logging \"fork\"?  My understanding of a \"fork\" is starting\nwith an existing API and modifying it so it is incompatible with the original. \nUGLI was written from scratch and not based on commons-logging so it is quite\nliterally not a \"fork\" but an \"alternative\".  That is, unless you consider any\nsimilarily functioning software as a \"fork\", which would make competing\napplication servers \"forks\" or XOM a \"fork\" of \"JDOM\".  They are \"alternatives\",\nnot \"forks\".  If you are talking about unifying alternatives, are you saying\nthat the commons-logging project would accept moving to an UGLI-like concept and\nget rid of the discovery?  I remain unconvinced.  So, start the dialog and\nconvince me and everyone else.  If you are unwilling to do this after making\nclear the consternation you have over a lack of a unified logging API, then you\nare just blowing hot air.  Let's see some action from someone with a lot of pull\nin the Jakarta sphere.  We're all waiting.\n\n\nJake",
            "date": "20050207T04:14:26",
            "id": 16
        },
        {
            "author": null,
            "body": "The design I have in mind is that the commons-logging implementation for the\nlogger you're using must reside in the same classloader hierarchy as the logger\nimplementation. This is why the -api JAR is used. As java.logging is available\nin the root classloader, so does its commons-logging impl, and it is located\nnext to it in the classloader hierarchy (from Tomcat perspective; actually, it's\none layer above it).\n\nGiven the size of both projects (a couple hundred of lines of code each, it\nseems), UGLI is a fork of commons-logging. It demonstrates unwilligness to work\nwith anyone else's API, and willingness to split the logging APIs again. If this\nis not your intention, then fine, but I need to see positive results. I am not\ninvolved in commons-logging development, and thus I view the situation as a\nuser, and care only about the results.\n\nBTW, the log4j commons-logging implementation was developed by Costin, Craig,\nand Robert, with only one really simple patch from Ceki, contributed for\ncommons-logging 1.0.4 (removing the need for a log4j 1.2 compatibility flag). I\nremember attempts by Ceki to torpedo commons-logging when the project was\nstarted, however. So I don't call this contributing to commons-logging, sorry.\nDo you have any more FUD for us to enjoy ?\n\nBasically, I now consider the existence of the log4j API harmful at this point.\nThe loggers implementation, etc, are all good, but I hope you understand that if\nthe thin API layer at the top was standardized, everyone would benefit.\n\n-1 for UGLI.\n",
            "date": "20050207T12:16:00",
            "id": 17
        },
        {
            "author": null,
            "body": "\nThis is not getting anywhere constructive. ",
            "date": "20050207T15:49:13",
            "id": 18
        },
        {
            "author": null,
            "body": "\n> The design I have in mind is that the commons-logging implementation\n> for the logger you're using must reside in the same classloader\n> hierarchy as the logger implementation. This is why the -api JAR is\n> used. As java.logging is available in the root classloader, so does\n> its commons-logging impl, and it is located next to it in the\n> classloader hierarchy (from Tomcat perspective; actually, it's one\n> layer above it).\n\nRemy,\n\nIn plain English, you are admitting that JCL's discovery mechanism\ndoes not work correctly except for java.util.logging, correct? JCL is\nsupposed to bridge between logging APIs, including log4j. However, in\npractice it only bridges for java.util.logging and break for other\nimplementations residing outside the JDK.\n\nIsn't this the plain truth?\n\nGiven the above, I don't know how you dare fling accusations at\nlog4j's direction and claim that JCL is problem-free. Moreover, your\ncontempt of a fellow Apache project is shocking.\n\n",
            "date": "20050207T16:04:27",
            "id": 19
        },
        {
            "author": null,
            "body": "I don't see where or why I would admit anything. You claim on #19 that this is\nnot constructive, and on #20 you come back for more. This does not make any\nsense to me, but here's more anyway :)\n\nWhy I like commons-logging:\n- When packaged right, it works ok\n- A huge amount of people are now using its API, therefore enabling unified\ncontainer wide logging configuration\n- Logging integration for people who embed Tomcat (as my company is doing)\nI do not care at all about discovery or whatever as long as it works well\nenough, and I did not look at the implementation details inside commons-logging\neither.\n\nI would have less contempt for log4j if, for example, it had implemented the\njava.util.logging API as a layer on top of its own API (and shipped the said\nlayer in its official JAR, of course). I don't think anybody would get hurt by\nthis, and this would be a productive first step towards unification. It would\nremove the need for commons-logging in the next Tomcat version. We would use\njava.util.logging, and, most likely, would be shipping a minimal log4j JAR with\nonly a rotatable file logger (obviously, nothing can be decided at this point,\nand it's merely an idea). So you would get more users, while our default logging\nsetup would be better.\n\nBTW, I don't see anything wrong with having \"contempt of a fellow Apache\nproject\". The amount of ASF folks who have written than Tomcat sucked in one way\nor the other is absolutely staggering ;) Besides, the amount of Apache code is\nnow so huge, with some prjects more or less competing with each other, that I\ndon't see how I could love all of them. And, in log4j, I only actually dislike\nthe log4j API here.",
            "date": "20050207T16:26:25",
            "id": 20
        },
        {
            "author": null,
            "body": "\n\"When packaged right\" JCL will only use java.util.logging, isn't that\na fact? Remy, have your *ever* used Tomcat with log4j in a production\nenvironment?\n\nI guess that the people using commons-logging probably do not realize\nhow badly JCL is broken. Given that you yourself admit not having\nbeing familiar with the JCL implementation, you apparently do not\nunderstand that JCL is much more complicated than UGLI.\n\n",
            "date": "20050208T20:56:57",
            "id": 21
        },
        {
            "author": null,
            "body": "(In reply to comment #22)\n> \"When packaged right\" JCL will only use java.util.logging, isn't that\n> a fact? Remy, have your *ever* used Tomcat with log4j in a production\n> environment?\nI use Tomcat with log4j in production all the time.  It works very well, when \npackaged right ;-).\n\n> I guess that the people using commons-logging probably do not realize\n> how badly JCL is broken. Given that you yourself admit not having\n> being familiar with the JCL implementation, you apparently do not\n> understand that JCL is much more complicated than UGLI.\n\nOf course JCL is much more complicated than UGLI, since UGLI expects you to \ncreate a properties file on the CP, and is useless if you forget (you don't \neven get log4j :).  However, IMHO, that complication is necessary for logging \nin a container environment.  \n\nI'm also -1 on having UGLI Tomcat code, and +0 for having an optional example \nof j.u.l.LogManager.\n",
            "date": "20050208T21:48:46",
            "id": 22
        },
        {
            "author": null,
            "body": "What makes you think that UGLI needs a properties file on the\nclasspath? How did you come up with that?\n\nAs for packaged right, do you have an example of what you mean by that? ",
            "date": "20050208T22:07:33",
            "id": 23
        },
        {
            "author": null,
            "body": "(In reply to comment #24)\n> What makes you think that UGLI needs a properties file on the\n> classpath? How did you come up with that?\nhttp://cvs.apache.org/viewcvs.cgi/logging-\nlog4j/src/java/org/apache/ugli/LoggerFactory.java?rev=1.2&view=markup\n\n> As for packaged right, do you have an example of what you mean by that? \nhttp://jakarta.apache.org/tomcat/faq/logging.html#commonsLoggingConfiguration\n",
            "date": "20050208T22:21:28",
            "id": 24
        },
        {
            "author": null,
            "body": "I am still +1 for using LogManager, but where do we put it ?\nWe would also need companion loggers for java.util.logging to be a viable\nsolution, such as a rotatable logger.\n\nYoav didn't want us to have anything to do with logging inside Tomcat (I think\nhe's right), as he mentioned in #5 when this bug report was still on topic. This\nleads to the need of a full fledged project to host the code, or at least a\ncommons component.",
            "date": "20050208T22:22:15",
            "id": 25
        },
        {
            "author": null,
            "body": "\nThe ugli.properties file is not specified on the class path. It is bundled with \neach version of ugli-xxx.jar. In a class loader following the child-first \ndelegation model (as in WebAppClassLoader in Tomcat) the factory used will be \nthe correct one whereas in a class loader following the parent-first delegation \nmodel the factory used will be that of the parent. It's not perfect but at least \nUGLI won't blow up and crash your application.\n\nMoreover, the intent is to perform the factory binding at compile time.",
            "date": "20050208T22:58:08",
            "id": 26
        },
        {
            "author": null,
            "body": "(In reply to comment #26)\n>This\n> leads to the need of a full fledged project to host the code, or at least a\n> commons component.\nCommons would be a good place for it, since it isn't really Tomcat specific.  \nIt would also let you learn the joys of svn ;-).  Otherwise I'd vote for j-t-c \nso that it is available for TC 3&4 as well.  Putting it in catalina/modules \nalso works for me.\n",
            "date": "20050209T00:00:53",
            "id": 27
        },
        {
            "author": null,
            "body": "I think I will try Commons to experiment with svn. svn first experience is\nrough, since it has all sorts of folders all over the place, and I have no idea\nhow to import code ;) It's going to be fun :)\n\nAnyway, I will propose a new component named commons-juli, which will contain as\nits initial code:\n- the replacement log manager\n- a bare bones rotatable file logger\nThose two will make a bare bones container friendly mini-JAR. We can then either\nship that to provide decent java.util.logging defaults, or give instructions on\nhow to install.\n\nI expect additional loggers to start appearing, but I'll keep a bare bones JAR\ncontaining only the basics.\n\nBTW, juli stands for Java Util Logging Implementation. I thought it was cute.",
            "date": "20050217T18:30:17",
            "id": 28
        },
        {
            "author": null,
            "body": "(In reply to comment #29)\n> Anyway, I will propose a new component named commons-juli, which will contain as\n> its initial code:\n> - the replacement log manager\n> - a bare bones rotatable file logger\n> Those two will make a bare bones container friendly mini-JAR. We can then either\n> ship that to provide decent java.util.logging defaults, or give instructions on\n> how to install.\n\nCool, that sounds great. Sorry about the lack of comments in the code. Let me know if you need me to \nclarify anything. Much of the code is re-implementing stuff from the standard LogManager, which \nunfortunately wasn't written with easy subclassing in mind.\n",
            "date": "20050218T02:20:53",
            "id": 29
        },
        {
            "author": null,
            "body": "I have expanded the code provided to provide configurability using properties\nfile (like java.util.logging has), and the code is now (likely temporarily)\nlocated in j-t-c/juli. Thanks.",
            "date": "20050302T19:34:10",
            "id": 30
        }
    ],
    "component": "Unknown",
    "description": "A potential problem for webapps using the java.util.logging API is that loggers are usually global over \nthe entire JVM, rather than per-context as we might prefer. Say you have a single Tomcat server with \ntwo webapps. Each webapp includes it's own copy of foo.jar in WEB-INF/lib. foo.jar uses a standard \nidiom for naming loggers:\n\npackage com.acme.foo;\n\nimport java.util.logging.*;\n\npublic class SomeClass\n{\n    public static final Logger logger = Logger.getInstance(SomeClass.class.getName());\n...\n}\n\nSo each webapp has it's own classloader with it's own copy of SomeClass. The problem is that both \nclasses end up with a reference to the same Logger instance. If both webapps attach their own handler \nto the Logger, their handler will receive log events from the other webapp. Say each webapp has it's \nown log file handler, you'll see every log message written to *both* the log files. There's nothing you \ncan do in the webapp or handler to fix this, as there's no way to tell which context a particular \nLogRecord object came from.\n\nLog4j avoids this issue completely, as the entire logging system is contained within the servlet context's \nClassLoader. Java logging is loaded via the system classloader, however, so loggers end up being global \nto the JVM.\n\nI think it is fair to class this as a failing on the Java logging system when using it inside any sort of \ncontainer (serlvet, EJB, or other). I can only find one small reference to this issue in the docs. The \njavadoc for the constructor of LogManager says:\n\n\"Protected constructor. This is protected so that container applications  (such as J2EE containers) can \nsubclass the object. It is non-public as  it is intended that there only be one LogManager object, whose \nvalue is retrieved by calling Logmanager.getLogManager.\"\n\nWhich seems to indicate that Sun expect servlet containers to provide their own LogManager \nimplementation that provides the behaviour the container wants. In Tomcat's case, I think the desired \nbehaviour is for Loggers to be instantiated per servlet context. So, I have written a LogManager \nimplementation that does this. Is basically splits the Logger namespace up based on the classloader \nreturned by Thread.currentThread().getContextClassLoader(). This seems to do exactly what I want \nunder Tomcat 5.0.x. Please see the attached source.\n\nThe problem is that the standard LogManager can only be replaced at JVM startup. A webapp can't do it. \nThe procedure is to put the replacement LogManager in a jar, add that jar to the system classpath, and \nspecify the LogManager's class name in the system property \"java.util.logging.manager\".\n\nI suggest that Tomcat should use this replacement LogManager, as having per-context loggers \nprovides much better behaviour inside a container.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "33143",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "RFE",
    "priority": "P2 enhancement",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "[PATCH] Java 1.4 loggers per context",
    "systemSpecification": false,
    "version": "Nightly Build"
}