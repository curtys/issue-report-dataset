{
    "comments": [
        {
            "author": null,
            "body": "Created attachment 20000\nWAR to recreate the problem",
            "date": "20070419T06:50:26",
            "id": 0
        },
        {
            "author": null,
            "body": "Tomcat will use the logging configuration of your web application for logging\nrelated to the application. As a result, this may not work out that well if\nyou're also using reloading. In that case, I would recommend deploying your\napplication differently (log4j could be moved out of /WEB-INF/lib, for example).",
            "date": "20070419T07:06:02",
            "id": 1
        },
        {
            "author": null,
            "body": "I just want to make sure I fully understand this.  If a application uses log4j \nand commons logging then that application can not be redeployed without a full \nstop/start of the server?\n\nThe work around you mention is moving log4j and I assume commons-logging out of \nthe /WEB-INF/lib.  Where would be the best place to locate it then?  Shared, \nCommon or someplace elese?",
            "date": "20070419T07:12:35",
            "id": 2
        },
        {
            "author": null,
            "body": "I've been looking at this further and I really think there's something wrong\nhere.  What I find wrong comes down to the fact that the variable causing the\ncross reference (ApplicationDispatcher.log) is a static.  How does a static\nvariable allow for the app server to do per webapp logging.  \n\nSo I created 2 identical webapps.  They have a single servlet that simply\ndispatches to a JSP.  I added code to the dispatch that looks at the classloader\nfor the servlet, request dispatcher and the log of the request dispatcher.  I\nthen hit webapp 1 and then webapp2.  I reloaded both apps and did the same again.\n\nThe code and output is included below.  Basically the ApplicationDispatcher has\na log loaded by the classloader for the first webapp I hit.  After a reload the\nlog is still the log loaded by that first webapp classloader and that\nclassloader is marked not started.  In addition, the parent instance variable\ndefined in WebappClassLoader is null.\n\nI'm not particularly knowledgeable about Tomcat yet but it would seem that using\nclasses loaded from one webapp while servicing the request for another webapp is\nbad. And continuing to use classes loaded by a classloader that's been stopped\nwould seem a very bad idea.\n\n=========== Code inserted into the servlet ===================\nServletContext sc = null;\nRequestDispatcher rd = null;\n\nsc = getServletContext();\nrd = sc.getRequestDispatcher(uri);\n\t\t\nObject log = getField(rd, \"log\");\nClassLoader loaderC = rd.getClass().getClassLoader();\nSystem.out.println(loaderC);\nClassLoader loaderA = this.getClass().getClassLoader();\nSystem.out.println(loaderA);\nClassLoader loaderB = log.getClass().getClassLoader();\nSystem.out.println(loaderB);\n\t\t\nSystem.out.println(\"servlet loader \" + (loaderA == loaderB ? \"equals\" : \"does\nnot equal\") + \" RequestDispatcher's log loader\");\nSystem.out.println(\"servlet loader \" + (loaderA == loaderC ? \"equals\" : \"does\nnot equal\") + \" RequestDispatcher loader\");\nSystem.out.println(\"RequestDispatcher's log loader \" + (loaderB == loaderC ?\n\"equals\" : \"does not equal\") + \" RequestDispatcher loader\");\n\n\n\n================= Output immediately after the server comes up =======\nWebappClassLoader\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n----------> Parent Classloader:\norg.apache.catalina.loader.StandardClassLoader@31f2a7\n\nWebappClassLoader\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n----------> Parent Classloader:\norg.apache.catalina.loader.StandardClassLoader@31f2a7\n\nservlet loader equals RequestDispatcher's log loader\nservlet loader does not equal RequestDispatcher loader\nRequestDispatcher's log loader does not equal RequestDispatcher loader\norg.apache.catalina.loader.StandardClassLoader@5e55ab\nWebappClassLoader\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n----------> Parent Classloader:\norg.apache.catalina.loader.StandardClassLoader@31f2a7\n\nWebappClassLoader\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n----------> Parent Classloader:\norg.apache.catalina.loader.StandardClassLoader@31f2a7\n\nservlet loader does not equal RequestDispatcher's log loader\nservlet loader does not equal RequestDispatcher loader\nRequestDispatcher's log loader does not equal RequestDispatcher loader\n\n\n\n============== Output after reloading both of the applications =======\norg.apache.catalina.loader.StandardClassLoader@5e55ab\nWebappClassLoader\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n----------> Parent Classloader:\norg.apache.catalina.loader.StandardClassLoader@31f2a7\n\nWebappClassLoader\n  delegate: false\n  repositories:\n\nservlet loader does not equal RequestDispatcher's log loader\nservlet loader does not equal RequestDispatcher loader\nRequestDispatcher's log loader does not equal RequestDispatcher loader\norg.apache.catalina.loader.StandardClassLoader@5e55ab\nWebappClassLoader\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n----------> Parent Classloader:\norg.apache.catalina.loader.StandardClassLoader@31f2a7\n\nWebappClassLoader\n  delegate: false\n  repositories:\n\nservlet loader does not equal RequestDispatcher's log loader\nservlet loader does not equal RequestDispatcher loader\nRequestDispatcher's log loader does not equal RequestDispatcher loader\n\n",
            "date": "20070419T10:47:51",
            "id": 3
        },
        {
            "author": null,
            "body": "This bug and 41939 may be related.",
            "date": "20070419T12:46:21",
            "id": 4
        },
        {
            "author": null,
            "body": "You have every right to find it wrong if you like, and I perfectly understand\nthe \"issue\", however what I am telling you is that this will not be fixed. As\nfar as I am concerned, providing the logging framework with a webapp is\npossible, and can sometimes be useful, but reloading will cause problems. If you\nwant to use reloading, you can either stop using log4j and use java.util.logging\ninstead (as it is a one-per-JVM logging service, it is much more robust), or\npackage your application differently (log4j and the commons-logging wrapper for\nlog4j should be moved to a shared CL repository).\n\nReopening this report is not going to change this.",
            "date": "20070419T13:17:57",
            "id": 5
        },
        {
            "author": null,
            "body": "Re-opening to change resolution.",
            "date": "20070422T17:35:00",
            "id": 6
        },
        {
            "author": null,
            "body": "I have tracked down three places where the logger for a class was causing a\nmemory leak on reload with the provided test case. These have been fixed in svn\nand will be included in 5.5.24 onwards.\n\nMany thanks for the test case, it made tracking things down much easier.",
            "date": "20070422T17:36:39",
            "id": 7
        },
        {
            "author": null,
            "body": "Any component can keep a reference to a logger, so it just means the logging\nsetup is inapropriate with respect to the intended usage. Attemting to fix this\nis not going to provide any benefit.",
            "date": "20070422T18:01:07",
            "id": 8
        },
        {
            "author": null,
            "body": "This has now been fixed for the provided test case but other use cases may\ncontinue to see similar issues.",
            "date": "20070508T17:07:33",
            "id": 9
        }
    ],
    "component": "Catalina",
    "description": "On reload of a application memory usage in the PermGen rises steadily as does\nthe loaded classes count.  If you reload and access the application many times\nand the remove the application and take a memory dump you'll that there are\nstill many instances of the WebappClassLoader in memory.  \n\nIf you then look for what refers to these instances you find cross classloader\nreferences.  A specific case is that I find the ApplicationDispatcher class\nwhich is loaded by StandardClassLoader has a static reference to an instance of\norg.apache.commons.logging.impl.Log4JLogger that was loaded by one of the\nWebappClassLoader s.\n\nI have a very small war that I've been able to reproduce this problem with which\nI'll attach.  I think the important bits are that the application includes log4j\nand commons-logging in the WEB-INF/lib directory and some how some catalina\nclasses are seeing and using this class.\n\nI've tested this with both Sun Java Sun 1.6.0 and 1.6.0_01.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "42172",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Classloader leak",
    "systemSpecification": true,
    "version": "5.5.23"
}