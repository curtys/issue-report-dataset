{
    "comments": [
        {
            "author": null,
            "body": "Created attachment 21230\nPatch to resolve this bug / issue",
            "date": "20071204T15:55:14",
            "id": 0
        },
        {
            "author": null,
            "body": "I have done some testing and there is a minor problem. If I deploy foo#bar.war\nit works as expected but the expanded directory is seen by the auto deployer so\nit deploys /foo as well. There is also the problem that foo#bar.war and\nfoo#bar#too.war will clash and possibly over-write each others files.\n\nThese problems are all part of the reason this functionality was not written for\nthe current version. I don't want to give the impression that this is impossible\nor that it isn't worth trying to do but there are a few wrinkles to iron out yet.\n\nI have changed the severity to enhancement. Ping me when you have an updated\npatch or if you have any questions.",
            "date": "20071211T14:28:54",
            "id": 1
        },
        {
            "author": null,
            "body": "I ran into this issue today after seeing that Tomcat supported such a concept in the Context documentation...\n\n\"Multi-level context paths may be defined using #, e.g. context#path.xml\"\n\nI figured it would work for WARs in the same way, such as context#path.war, which I found, of course, it didn't, other than using manual unpacking a manual creation of context#path.xml to match.\n\nI've read all the comments in the email thread and Mark's findings below.  I agree that it can be problematic, such as possible overwriting of files.  Then again, anyone using this feature is doing it for special reasons and is likely to have read the documentation and understand the risks involved.  And I'm ok with the fact that \"/context\" gets deployed as a context itself, in addition to \"/context/path\".  This allows for serving common files related to the /path application as well as other applications that might exist under /context.  More on that below...\n\nOne nice thing about this concept is that one can organize multiple related, but separate, webapps under a common path within a host.  For example, I can have...\n\n/myapps/index.html (linking to the various apps in this path)\n/myapps/app1\n/myapps/app2\n/myfriendsapps/index.html (linking to the various apps in this path)\n/myfriendsapps/app1\n/myfriendsapps/app2\n\nI put the /myapps/... structure under webapps and put myapps#app1.xml and myapps#app2.xml in the localhost conf directory.  Seems to work just fine.  The only problem is it is not possible to hot-deploy this.\n\nWhat I'd like to see is the concept of uber-wars (my own term).  That is, a WAR file containing other WAR files or directory structures representing multiple contexts within a common context.  This would allow for hot deployment of these multi-path applications.  So...\n\nmyapps.war\n - index.html\n - app1.war\n - app2.war\n\nOR\n\nmyapps.war\n - index.html\n - app1\n - app2\n\nA multi-path-named WAR file would be rare in this scenario, unless the multipath was 3 levels deep, though it could be supported.  For instance...\n\nmyapps#mysubcontext.war\n - index.html\n - app1.war\n - app2.war\n\nWould result in...\n\n/myapps/mysubcontext/index.html\n/myapps/mysubcontext/app1\n/myapps/mysubcontext/app2\n\nBasically, WARS with WEB-INF in the root of the WAR file would be treated in the standard way and those with nested WEB-INF directories would be treated as uber-wars.\n\nUltimately, if my uber-war concept is rejected (maybe because of lack of official specification?... then again myapps#app1.war is non-standard anyway), then I still think that individual *hot* deployment of myapps.war, myapps#app1.war, and myapps#app2.war should be possible.  As long as the risks are documented, I think it should be ok.  Those doing things the standard way won't ever run into issues and those doing things the non-standard, multi-path, way will have read the documentation in order to have known about said non-standard way and can be assumed to have read the applicable caveats.\n\nHere's my wholly non-biding +1 vote to include this patch and/or my uber-war concept in the next version of Tomcat6.\n\nJake",
            "date": "20080220T23:30:55",
            "id": 2
        },
        {
            "author": null,
            "body": "I observed some unexpected behaviour when deploying a webapp using the Tomcat\nClient Deployer (TCD) package and hashes (\"#\") in the deployed context path of\nthe webapp (I observed this using 6.0.16). In my humble opinion, using hashes in\nthe path is not very usual, but this may be somewhat related to this topic and\neasy to fix if somebody works on the original issue.\n\nIt is possible to deploy a webapp to a context path \"/foo#bar\" using TCD.\nUndeploying using TCD of this webapp fails, because the path is truncated at the\nhash (resulting in \"/foo\") which results in an error. Undeploying using the\nmanager webapp results in the same error. An additional problem is, that in case\na webapp ist deployed at the context path \"/foo\", it will be undeployed when\ntrying to undeploy the webapp deployed at \"/foo#bar\".\n\nA possible workaround is to undeploy the webapp using both TCD and manager\nwebapp when the hash ist replaced by \"%23\".",
            "date": "20080222T01:54:46",
            "id": 3
        },
        {
            "author": null,
            "body": "Hi Mark,\n\nSorry for the delay in getting back to you on this; I hadn't receive the automated notif from Bugzilla for some reason, so I didn't see you had commented on this.\n\nTo address your concerns of my patch; I didn't have a set of specs to follow, so I tried to do what I thought would make the most sense, and attempt to replicate the current behaviour of Tomcat.\n\nRegarding the auto-deployment of /foo:\nThis is the current behaviour of Tomcat.  If I manually put a war into /foo/abc.war and create a foo#war.xml context file, Tomcat's auto-deployer will deploy both foo/abc.war and foo/.  As far as I see it, this is expected behaviour.\n\nRegarding a clash of foo#bar.war and foo#bar#too.war, that is one thing that I had not considered or taken into account.  I can understand that to be confusing.  The best suggestion I can have for that is to have the deployment of foo#bar#too.war fail if there is already something that is deployed at foo#bar.war,  In fact, I am surprised that it does not already do this.  \n\nPlease let me know how you expect Tomcat to behave in the above circumstance, and I'll see if I can update my patch for that.  I will still be working on patching 6.0.14 however; I expect that my updates should be easily transferrable to the 6.0.16 branch by someone a little more knowledgable of Tomcat's internal intracacies.\n\nThanks,\n\nEric\n",
            "date": "20080306T06:38:14",
            "id": 4
        },
        {
            "author": null,
            "body": "(In reply to comment #5)\n> Regarding the auto-deployment of /foo:\n> This is the current behaviour of Tomcat.  If I manually put a war into\n> /foo/abc.war and create a foo#war.xml context file, Tomcat's auto-deployer will\n> deploy both foo/abc.war and foo/.  As far as I see it, this is expected\n> behaviour.\nThis is currently an invalid configuration. The way I see this working would be a foo#abc.war file in the appBase which creates/uses a foo.abc.xml context file.\n\n> Regarding a clash of foo#bar.war and foo#bar#too.war, that is one thing that I\n> had not considered or taken into account.  I can understand that to be\n> confusing.  The best suggestion I can have for that is to have the deployment\n> of foo#bar#too.war fail if there is already something that is deployed at\n> foo#bar.war,  In fact, I am surprised that it does not already do this.\nI think this needs to work. Maybe if the files are expanded to directories named foo#bar and foo#bar#too? This could also fix the autodeployment of foo problem.\n  \n> Please let me know how you expect Tomcat to behave in the above circumstance,\n> and I'll see if I can update my patch for that.\nDone. See above ;)\n\n> I will still be working on\n> patching 6.0.14 however; I expect that my updates should be easily\n> transferrable to the 6.0.16 branch by someone a little more knowledgable of\n> Tomcat's internal intracacies.\nThat's fine. The code hasn't changed much, if at all. When you get this working, I'll port it to the latest 6.0.x\n",
            "date": "20080311T15:27:09",
            "id": 5
        },
        {
            "author": null,
            "body": "(In reply to comment #6)\n> (In reply to comment #5)\n> > Regarding the auto-deployment of /foo:\n> > This is the current behaviour of Tomcat.  If I manually put a war into\n> > /foo/abc.war and create a foo#war.xml context file, Tomcat's auto-deployer will\n> > deploy both foo/abc.war and foo/.  As far as I see it, this is expected\n> > behaviour.\n> This is currently an invalid configuration. The way I see this working would be\n> a foo#abc.war file in the appBase which creates/uses a foo.abc.xml context\n> file.\n\nReally?  Why would that be an invalid configuration?  I was under the impression that the whole point of the # in the context file names was to allow sub-paths to the war file.  Why are you looking to change that to using \".\" instead?\n\n\n> > Regarding a clash of foo#bar.war and foo#bar#too.war, that is one thing that I\n> > had not considered or taken into account.  I can understand that to be\n> > confusing.  The best suggestion I can have for that is to have the deployment\n> > of foo#bar#too.war fail if there is already something that is deployed at\n> > foo#bar.war,  In fact, I am surprised that it does not already do this.\n\n> I think this needs to work. Maybe if the files are expanded to directories\n> named foo#bar and foo#bar#too? This could also fix the autodeployment of foo\n> problem.\n\nThe problem with this, however, is that if foo#bar.war is deployed, you have to assume that any path under foo/bar belongs to the foo#bar.war file.  For instance, foo#bar.war might have a path as foo/bar/eric/file.jsp.  This is the current way that tomcat seems to work.  Similarly, it might have a file under foo/bar/too/file.jsp, which would be properly served.\n\nNow, if suddenly we allow deployment of foo#bar#too.war, you would assume that to mean any paths under foo/bar/too would belong to the foo#bar#too.war application, and they should all be served under that war deployment.  In which case, you'll run into a conflict.\n\nI'm not convinced that allowing foo#bar.war to be deployed as well as foo#bar#too.war will not cause significant conflicts and errors for some people who deploy conflicting paths without realizing it.\n\n\nThanks,\n\nEric\n",
            "date": "20080312T08:15:24",
            "id": 6
        },
        {
            "author": null,
            "body": "(In reply to comment #7)\n> Really?  Why would that be an invalid configuration?  I was under the\n> impression that the whole point of the # in the context file names was to allow\n> sub-paths to the war file.  Why are you looking to change that to using \".\"\n> instead?\n\n<<appBase>>/foo/abc.war is invalid\nThe \".\" was a typo on my part. I meant foo#abc.xml\n\n> Now, if suddenly we allow deployment of foo#bar#too.war, you would assume that\n> to mean any paths under foo/bar/too would belong to the foo#bar#too.war\n> application, and they should all be served under that war deployment.  In which\n> case, you'll run into a conflict.\n\nNo conflict - the spec is quite clear. The request is handled by the context with the longest context path that matches the request. Under the current code you can deploy foo.xml, foo#bar.xml and foo#bar#too.xml and it will work (providing the docBases are outside the appBase).\n\nWhat the current code doesn't handle, and your patch needs to fix, is dropping the equivalent wars into the appBase. The more I think about it, the more I think expansion of a#b#c.war to a dir named a#b#c is the way to fix this.",
            "date": "20080312T08:29:05",
            "id": 7
        },
        {
            "author": null,
            "body": "I presume that when Tomcat deploys a#b#c.war to a dir named a#b#c, it will also deploy META-INF/context.xml contained in a#b#c.war to ${CATALINA_BASE}/conf/Engine/host/a#b#c.xml, correct?\n\nJake",
            "date": "20080312T19:40:02",
            "id": 8
        },
        {
            "author": null,
            "body": "(In reply to comment #9)\n> I presume that when Tomcat deploys a#b#c.war to a dir named a#b#c, it will also\n> deploy META-INF/context.xml contained in a#b#c.war to\n> ${CATALINA_BASE}/conf/Engine/host/a#b#c.xml, correct?\n\nThat is how I envisage it working.\n\n",
            "date": "20080313T00:56:22",
            "id": 9
        },
        {
            "author": null,
            "body": "*** Bug 43013 has been marked as a duplicate of this bug. ***",
            "date": "20080505T11:17:51",
            "id": 10
        },
        {
            "author": null,
            "body": "I have committed a fix for this to trunk and proposed it for 6.0.x and 5.5.x.\n\nIf you rea able to test the fix and report back that would be great.",
            "date": "20080505T12:01:28",
            "id": 11
        },
        {
            "author": null,
            "body": "This has been committed to 6.0.x and will be included in 6.0.17 onwards.",
            "date": "20080515T13:52:26",
            "id": 12
        },
        {
            "author": null,
            "body": "This has been fixed in 5.5.x and will be included in 5.5.27 onwards.",
            "date": "20080814T01:32:32",
            "id": 13
        }
    ],
    "component": "Catalina",
    "description": "If you want to deploy a war in a sub-context, there is currently no mechanism \nto allow for that.  Although you can name your context file as path#to#app.xml \nto serve an application at /path/to/app, there is no way to auto-deploy a war \nwith the same name. ie: path#to#app.war.\n\nSee http://www.nabble.com/How-to-Deploy-WAR-using-a-sub-context-path--\ntf4838797.html#a13843361 for further explanation of the issue.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "44021",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "P1 enhancement",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Deployer cannot deploy wars with #s",
    "systemSpecification": true,
    "version": "5.5.26"
}