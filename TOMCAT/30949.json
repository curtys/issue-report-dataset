{
    "comments": [
        {
            "author": null,
            "body": "Ok. Since I don't want to use a finally for that (as the exception is rethrown \nin invoke), I think moving the unwrapping in the invoke method (before the \ncode which rethrows the exception) would be appropriate.",
            "date": "20040831T00:29:43",
            "id": 0
        },
        {
            "author": null,
            "body": "That seems like a reasonable solution.",
            "date": "20040908T05:26:29",
            "id": 1
        },
        {
            "author": null,
            "body": "OK, I've moved the ApplicationDispatcher unwrap requests to the invoke method \nas Remy suggested.  Done on both the Tomcat 5.0 and 5.5 CVS branches.",
            "date": "20040928T13:34:31",
            "id": 2
        },
        {
            "author": null,
            "body": "I detect a similar problem with wrapped request at ApplicationDispatcher.forward und include.\nThe wrapped request are not recylced after an exceptions. Arrg!\n\n- With STRICT_SERVLET_COMPLAINS this means we have still a HTTPSession memory leak\n- and at cluster crossContext session replication are not triggered.\n\nCurrently the only chance I see, is a double try/catch implementation. Look at my checkin at tomcat \n5.5.24 revision  545127.\n\nBut I don't really like the double try/catch for wrapped request!\n\nPeter",
            "date": "20070607T02:36:10",
            "id": 3
        },
        {
            "author": null,
            "body": "I'm running into an issue that I think is a side effect of this patch. When\nforward() calls invoke() the request object now gets unwrapped. Then the forward\nmethod again tries to unwrap the already unwrapped request. As a result I am\ngetting a ClassCastException in unwrapRequest (ApplicationDispatcher.java:814).\nIt seems like unwrapRequest should be setting wrappedRequest to null before\nexiting so subsequent calls to the method don't do anything. Does this seem\nreasonable?",
            "date": "20070724T13:04:03",
            "id": 4
        },
        {
            "author": null,
            "body": "Mike - having stepped through the code, I don't see the problem you are\ndescribing. If you still see the issue, please open a new Bugzilla item and\nprovide the steps to reproduce and/or a simple test war.",
            "date": "20070903T18:35:16",
            "id": 5
        },
        {
            "author": null,
            "body": "I have committed a fix for this that doesn't require additional\ntry/catch/finally blocks. See r572854 (TC5.5.x) and r572856 (TC6.0.x)",
            "date": "20070904T19:02:45",
            "id": 6
        }
    ],
    "component": "Catalina",
    "description": "In org.apache.catalina.core.ApplicationDispatcher.doInclude(ServletRequest \nrequest, ServletResponse response), after invoke() is called to perform the \ninclude, the request and response objects are normally unwrapped.  However, if \na ServletException or IOException is thrown, the unwrapping does not take place.\n\nThis leads to problems in environments in which cross context includes are \nbeing performed.  For example, \n\n1.  Web App A performs an include to a Servlet in Web App B\n2.  The Servlet in Web App B throws a ServletException\n3.  Web App A catches the ServletException and attempts to forward to an error \njsp.\n\nStep 3 above will fail due to the fact that the request has not been \nunwrapped.  The active request will contain the ServletContext of web app B and \nthe jsp file will not be found.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "30949",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "After Failed Include, Request and Response not Unwrapped",
    "systemSpecification": false,
    "version": "5.0.27"
}