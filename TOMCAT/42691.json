{
    "comments": [
        {
            "author": null,
            "body": "Thanks to find this ugly behaviour :-)\nPeter\n ",
            "date": "20070814T01:06:03",
            "id": 0
        }
    ],
    "component": "Catalina:Cluster",
    "description": "This is probably not a big problem for most users of session replication. \nHowever for us it was worth fixing.\n\nIn our environment we commonly perform rolling software upgrades across our web\nsite.  While testing replication, we noticed that as we shutdown and restarted\nnodes, the session counts would continually grow.  Basically, we found that as\nsessions are transfered at startup time, the local access time is set to the\ntransfer time.  Code comments imply that this is done to prevent incorrect node\ntime synchronization problems.  However, it also simulates activity for old\nsessions that are about to expire.  Under load, if you restart nodes enough,\nyour session count will keep growing and growing.\n\nWe changed the current behavior to keep existing session access times by\ncommenting out the call to session.access() in DeltaManager.deserializeSessions\n(line 782 in svn revision 548361)",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "42691",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "sessions increase timeout as cluster members join",
    "systemSpecification": false,
    "version": "5.5.23"
}