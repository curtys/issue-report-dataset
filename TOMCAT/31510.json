{
    "comments": [
        {
            "author": null,
            "body": "Fixed in Tomcat 5.0 branch, will fix in 5.5 branch after my 11am meeting.  \nThanks for tracking and reporting this.",
            "date": "20041005T14:52:09",
            "id": 0
        },
        {
            "author": null,
            "body": "Fixed.",
            "date": "20041005T16:09:25",
            "id": 1
        }
    ],
    "component": "Jasper",
    "description": "This problem causes severe memory leaks in JBoss app server with Jetty servlet \ncontainer installed (that is using Jasper). I tested it with JBoss 3.2.6RC1 and \nJetty 5.0.0. Please see related bug reports: https://sourceforge.net/tracker/?\nfunc=detail&aid=973162&group_id=22866&atid=376685 and \nhttps://sourceforge.net/tracker/?\nfunc=detail&aid=1038066&group_id=7322&atid=107322. In short, after JBoss web \napplication context is destroyed, there is still a hard reference chain (see \nhttp://kanika.yi.org/~alexei/jbossleaks/refs-from-jasper5-PageContext-pool-to-\nUnifiedClassLoader3.html) from Jasper's pool of JspContexts to JBoss' \nUnifiedClassLoader3. The most logical place to break the chain is, in my \nopinion, to set org.apache.jasper.runtime.JspWriterImpl.response field to null \ninside JspWriterImpl.recycle() method. It looks safe, because JspWriterImpl is \nalways initialized with a new response object before use. And it looks logical, \nbecause why should a recycled JspWriter keep reference to a response which it \nwill never make use of, being recycled. In my test instalation, adding \n\nresponse = null;\n\nto JspWriterImpl.recycle() resolves the problem.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "31510",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Memory leaks due to JspWriterImpl keeping reference to ServletResponse after recycle()",
    "systemSpecification": false,
    "version": "5.0.28"
}