{
    "comments": [
        {
            "author": null,
            "body": "Applying the first step in you suggestion seems to fix the line mapping problem.\n I don't think it is necessary, or even correct, to generate the jsp comments in\nthe response.  \n\nThanks for reporting and the patch.",
            "date": "20040227T19:01:00",
            "id": 0
        },
        {
            "author": null,
            "body": "Kim-Man, you are indeed correct - I forgot that JSP comments should not be \nemitted. I've verified independently that the first patch alone is sufficient. \n\nThanks for the fast response. ",
            "date": "20040227T23:45:01",
            "id": 1
        }
    ],
    "component": "Jasper",
    "description": "If a JSP contains JSP comments, the generated servlet does not contain the JSP \ncomments. Consequently, the SMAP line mappings are incorrect. \n\nFor example, given a JSP:\n\n<html>\n  <head>\n    <title>Untitled Document</title>\n  </head>\n  <%--\n  JSP comment\n  --%>\n  <body>\n  </body>\n</html>\n\nThe relevant section of the generated servlet (lines 42 to 49, inclusive) is:\n\n      out.write(\"<html>\\n\");\n      out.write(\"  <head>\\n\");\n      out.write(\"    <title>Untitled Document</title>\\n\");\n      out.write(\"  </head>\\n\");\n      out.write(\"  \\n\");\n      out.write(\"  <body>\\n\");\n      out.write(\"  </body>\\n\");\n      out.write(\"</html>\");\n\nAnd the Generated SMAP is:\n\nSMAP\ntest_jsp.java\nJSP\n*S JSP\n*F\n+ 0 test.jsp\ntest.jsp\n*L\n1,8:42\n*E\n\nThe fix requires the following two modications:\n\n1) In the class org.apache.jasper.compiler.TextOptimizer, the overriden method \nvisit(Node.Comment n) must be removed.\n\n\n2) The inner class org.apache.jasper.compiler.Generator.GenerateVisitor must\noverride the method visit(Node.Comment n). I tested this, using the following \ncode, which works correctly:\n\n    public void visit(Node.Comment n) throws JasperException {\n            n.setBeginJavaLine(out.getJavaLine());\n            out.printin(\"out.write(\\\"<%--\");\n            String text = n.getText();\n            boolean newLine = false;\n\n            if (text != null) {\n              for (int i = 0; i < text.toCharArray().length; i++)\n              {\n                if (newLine) {\n                  out.printin(\"out.write(\\\"\");\n                }\n\n                char ch = text.charAt(i);\n\n                if (ch == '\\n') {\n                  out.println(\"\\\\n\\\");\");\n                  newLine = true;\n                }\n                else {\n                  out.print(ch);\n                  newLine = false;\n                }\n              }\n            }\n\n            // @todo: should the closing tag have a newline appended to it?\n            if (newLine) {\n              out.printil(\"out.write(\\\"--%>\\\");\");\n            }\n            else {\n              out.println(\"--%>\\\");\");\n            }\n\n            n.setEndJavaLine(out.getJavaLine());\n        }",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "27300",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "SMAP line numbers incorrect when JSP comments are present",
    "systemSpecification": false,
    "version": "5.0.19"
}