{
    "comments": [
        {
            "author": null,
            "body": "\"I think this is reproducable\"\n\nYou think wrong: it works for me. I did cleanup the handling of\n\"java.util.zip.ZipException: No such file or directory\", however.",
            "date": "20051117T16:51:47",
            "id": 0
        },
        {
            "author": null,
            "body": "This is reproducable by me, I can now confirm this.  If you needed me to provide\na sample web-app and steps to reproduce I'll spend the time finding the smallest\ntest case that should allow you to observe this problem too.\n\nFirst I will test your changes, please confirm the changes have been released to\nHEAD and if you remember which file(s) were changed.\n\nThanks for your efforts.\n",
            "date": "20051118T00:31:59",
            "id": 1
        },
        {
            "author": null,
            "body": "I have managed to test this situation out again, with current 5.5.14-beta, the\nmultiple ZIP failures are gone, handling looks much cleaner, but Tomcat's still\nupset and every 10 seconds an NPE (the 2nd stack dump) occurs.\n\n\nTo re-create this situation I just did a rename of the application directory like:\n\nmv $CATALINA_BASE/webapps/ROOT /tmp/ROOT\n\nPlease advise what I can do myself to help track down the persistant NPE problem\nto help you fix it.\n\n\n09-Dec-2005 15:51:08\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor processChildren\nSEVERE: Exception invoking periodic operation:\njava.lang.NoClassDefFoundError: org/apache/log4j/spi/ThrowableInformation\n        at org.apache.log4j.spi.LoggingEvent.<init>(LoggingEvent.java:154)\n        at org.apache.log4j.Category.forcedLog(Category.java:388)\n        at org.apache.log4j.Category.log(Category.java:853)\n        at org.apache.commons.logging.impl.Log4JLogger.error(Log4JLogger.java:193)\n        at\norg.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:3772)\n        at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4310)\n        at\norg.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:892)\n        at\norg.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1019)\n        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1178)\n        at\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at\norg.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1304)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1568)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1577)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1557)\n        at java.lang.Thread.run(Thread.java:595)\n09-Dec-2005 15:51:18 org.apache.catalina.startup.HostConfig checkResources\nINFO: Undeploying context []\n09-Dec-2005 15:51:18\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor processChildren\nSEVERE: Exception invoking periodic operation:\njava.lang.NullPointerException\n        at\norg.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:883)\n        at\norg.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1019)\n        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1178)\n        at\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at\norg.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1304)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1568)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1577)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1557)\n        at java.lang.Thread.run(Thread.java:595)\n\n\nReopened for attention as the original issue still persists.\n",
            "date": "20051209T17:03:58",
            "id": 2
        },
        {
            "author": null,
            "body": "Created attachment 17813\nGracefully recover from Filter.destroy() web-app generated exceptions\n\nShoot from hip diff, based on listenerStop() logic but applied to\nFilter.destroy().  Sorry I'm unable to build TC5 from SVN or the -src package.\n\nI'm taking the thought here that I know I have active filters on my web-app and\nthe reason why it affects me is that when I renamed the directory I removed the\nJVMs ability to find and load the Filter#destroy() function.\n\nIn any case this patch feels like the correct thing to do.",
            "date": "20060301T15:26:06",
            "id": 3
        },
        {
            "author": null,
            "body": "Okay my first patch doesn't work I've deleted it, but highlights another problem\nI will generate a test case for at a later date.\n\nI have attached a WAR test case for this bug now (works for me on 5.5.16).  A\nrecap of the steps needed to reproduce:\n\n* Unzip the WAR and work with exploded WAR it to a dir TCBug37498\n* Start up TC (without it deployed but with autoDeploy enabled in the webapps\ndirectory).\n* Move the TCBug37498 directory into the webapps directory and wait 30 seconds\nfor it to deploy.\n* Then move the webapps/TCBug37498 directory outside the webapps directory maybe\ninto /tmp.\n* Now watch the TC logs and try to access the context (or any context) from that\npoint on.\n\n\nI found the problem is caused by a loging statement generated by TC, but it is\nsomehow using a logger instance that was loaded by the WebappClassLoader.\n\nMy web-application has local copies of apache-commons-logging and log4j as I\nexpect the to be 100% isoloted from the logging mechanism TC itself uses.\n\n\nThe problem occur at this point and the extra code helps you see the problem in\norg/apache/catalina/core/StandardContext.java:3768 inside #listenerStop()\n\ntry {\n    fireContainerEvent(\"beforeContextDestroyed\", listener);\n    listener.contextDestroyed(event);\n    fireContainerEvent(\"afterContextDestroyed\", listener);\n} catch (Throwable t) {\n    fireContainerEvent(\"afterContextDestroyed\", listener);\n    try {\n        // This call uses the web-app's logger not TCs\n        //  because some classes to perform this call are coming from the\n        //  contexts WEB-INF/lib/*.jar files WebappClassLoader this call \n        //  spits out a ClassNotFoundException and that breaks TCs\n        //  undeployment mechanism by now allowing #stop() to complete\n        // vvvvvvvvvvvvv\n        getLogger().error\n         (sm.getString(\"standardContext.listenerStop\",\n         listeners[j].getClass().getName()), t);\n    } catch(Throwable tt) {\n        // vvvvvv I added this catch() block and the extra debug output\n        // the catch block fixes the problem by returning control to TC\n        // so it can complete undeployment\n        System.err.println(\"listenerStop(): exception in \");\n        tt.printStackTrace();\n        System.err.println(\"listenerStop(): ...from... \");\n        t.printStackTrace();\n        System.err.println(\"ClassLoader on getLogger() is \" +\ngetLogger().getClass().getClassLoader());\n        System.err.println(\"ClassLoader on context is \" +\ncontext.getClass().getClassLoader());\n        System.err.println(\"ClassLoader on this is \" +\nthis.getClass().getClassLoader());\n    }\n    ok = false;\n}\n\n\ngetLogger().getClass().getClassLoader() == WebappClassLoader\nthis.getClass().getClassLoader() == StandardClassLoader\n\nMaybe this is 100% correct and expected behaviour.  But the problem that occurs\nis the call to log the Tomcat Container situation relys on the web-apps class\nfiles (which we just deleted/removed).\n\nI would have expected the logger TC itself uses to be isolated from the logger\nmy web-app is using by the different class loaders being used.  I would guess\nthe $CATALINA_HOME/bin/commons-logging-api.jar would be the instance\nStandardContext.getLogger() would always return.\n\n\nThis is the output I got with the above code in place.\n\nMar 16, 2006 9:41:26 AM org.apache.catalina.startup.HostConfig checkResources\nINFO: Undeploying context [/TCBug37498]\nDEBUG 09:41:26,106 (SecurityContextFilter.java:destroy:41)  -Executing filter\n#destroy()\nDEBUG 09:41:26,106 (ApplicationLifecycleListener.java:contextDestroyed:27) \n-contextDestroyed on \"TCBug37498\"\nINFO  09:41:26,107 (ApplicationLifecycleListener.java:contextDestroyed:30) \n-contextDestroyed on \"TCBug37498\"  done!\nlistenerStop(): exception in\njava.lang.NoClassDefFoundError: org/apache/log4j/spi/ThrowableInformation\n        at org.apache.log4j.spi.LoggingEvent.<init>(LoggingEvent.java:154)\n        at org.apache.log4j.Category.forcedLog(Category.java:388)\n        at org.apache.log4j.Category.log(Category.java:853)\n        at org.apache.commons.logging.impl.Log4JLogger.error(Log4JLogger.java:193)\n        at\norg.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:3774)\n        at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4340)\n        at\norg.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:892)\n        at\norg.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1013)\n        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1172)\n        at\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at\norg.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1305)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1569)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1578)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1558)\n        at java.lang.Thread.run(Thread.java:595)\nlistenerStop(): ...from...\njava.lang.NoClassDefFoundError: org/apache/log4j/helpers/NullEnumeration\n        at org.apache.log4j.Category.getAllAppenders(Category.java:410)\n        at org.apache.log4j.Category.closeNestedAppenders(Category.java:223)\n        at org.apache.log4j.Hierarchy.shutdown(Hierarchy.java:447)\n        at org.apache.log4j.LogManager.shutdown(LogManager.java:227)\n        at\ntestpackage.ApplicationLifecycleListener.contextDestroyed(ApplicationLifecycleListener.java:34)\n        at\norg.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:3770)\n        at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4340)\n        at\norg.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:892)\n        at\norg.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1013)\n        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1172)\n        at\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at\norg.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1305)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1569)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1578)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1558)\n        at java.lang.Thread.run(Thread.java:595)\nClassLoader on getLogger() is WebappClassLoader\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n----------> Parent Classloader:\norg.apache.catalina.loader.StandardClassLoader@b05236\n\nClassLoader on context is org.apache.catalina.loader.StandardClassLoader@79a5f739\nClassLoader on this is org.apache.catalina.loader.StandardClassLoader@79a5f739\n\n\nOkay.. I think I may have a proper path for this problem, during the setup of\nthe Context in StandardContext#start() we zap the logger instance for use while\nre run some web-app related method.\n\nI think we should also zap it again when we unbind and return that thread back\nto the containter execution context so all future logging is done with TCs\nlogging instances from StandardClassLoader.\n\nPlease explain any specific objections to that.  I realize logging and\nClassLoaders are a nightmare.\n\nThis new patch correctly makes the error message get reported by TC and\nundeployment seems to complete allowing a new deployment for the same context to\noccur again.\n\nThere are other places in the StandardContext where bind and unbind are used so\nmaybe flipping which logging via what ClassLoader we are using should be a part\nof that bind/unbind process.\n",
            "date": "20060316T03:40:23",
            "id": 4
        },
        {
            "author": null,
            "body": "Created attachment 17907\nTest Case WAR file but use in exploded form",
            "date": "20060316T03:42:09",
            "id": 5
        },
        {
            "author": null,
            "body": "Contents of the WAR:\n\n$ jar -tvf TCBug37498.war\n    39 Thu Mar 16 01:34:06 GMT 2006 META-INF/MANIFEST.MF\n  1268 Thu Mar 16 01:14:12 GMT 2006\nWEB-INF/classes/testpackage/SecurityContextFilter.java\n 38015 Sat Jan 28 12:13:20 GMT 2006 WEB-INF/lib/commons-logging-1.0.4.jar\n350627 Sat Jan 28 12:13:18 GMT 2006 WEB-INF/lib/log4j-1.2.11.jar\n   443 Thu Mar 16 01:28:08 GMT 2006 index.jsp\n  2175 Thu Mar 16 01:31:56 GMT 2006\nWEB-INF/classes/testpackage/SecurityContextFilter.class\n  1236 Thu Mar 16 01:20:58 GMT 2006 WEB-INF/classes/testpackage/DefaultServlet.java\n  2092 Thu Mar 16 01:31:56 GMT 2006\nWEB-INF/classes/testpackage/ApplicationLifecycleListener.class\n  1301 Thu Mar 16 01:16:40 GMT 2006\nWEB-INF/classes/testpackage/ApplicationLifecycleListener.java\n  1297 Thu Mar 16 01:17:52 GMT 2006 WEB-INF/web.xml\n    62 Thu Mar 16 01:22:38 GMT 2006 filtered/index.jsp\n  1097 Thu Mar 16 01:32:42 GMT 2006 WEB-INF/classes/log4j.properties\n  2018 Thu Mar 16 01:31:56 GMT 2006 WEB-INF/classes/testpackage/DefaultServlet.class\n",
            "date": "20060316T03:43:20",
            "id": 6
        },
        {
            "author": null,
            "body": "Created attachment 17908\nThis 2 line patch fixes the bug for me",
            "date": "20060316T03:49:02",
            "id": 7
        },
        {
            "author": null,
            "body": "(In reply to comment #5)\n> getLogger().getClass().getClassLoader() == WebappClassLoader\n> this.getClass().getClassLoader() == StandardClassLoader\n> \n> Maybe this is 100% correct and expected behaviour\n\nHow did you guess ? ;)\n\n> .  But the problem that occurs\n> is the call to log the Tomcat Container situation relys on the web-apps class\n> files (which we just deleted/removed).\n\nThe files are \"deleted/removed\" after, when stopping the classloader. In\nlistenerStop, the classloader is fully able to load any class, and the context\nclassloader is also correctly set.\n\n> Okay.. I think I may have a proper path for this problem, during the setup of\n> the Context in StandardContext#start() we zap the logger instance for use while\n> re run some web-app related method.\n\nThis is because some (bad) components may call getLogger before the context\nclassloader is correctly set. This is not the case here.\n\n> I think we should also zap it again when we unbind and return that thread back\n> to the containter execution context so all future logging is done with TCs\n> logging instances from StandardClassLoader.\n\nThis is not \"future logging\", this is perfectly valid logging, done in the\napplication context, which is still available.\n\n> Please explain any specific objections to that. \n\nThe issues is that there's no reason to do that.\n\n> I realize logging and\n> ClassLoaders are a nightmare.\n\nNo. Only certain technologies have issues. You would have no issues with\njava.util.logging, for example.",
            "date": "20060316T09:36:31",
            "id": 8
        },
        {
            "author": null,
            "body": "Your points noted.  They do however seem to be more subjective than objective,\nmaybe you would re-phrase them in a technical manner so everyone can better\nunderstand the technical point of view you are trying to convey.\n\n\nSome other alternative solutions I can suggest\n\n* dont use a standard logger class directly from any code that may in the future\nend up relying on the web-app own logging implementation.  A new wrapper class\nthat would be able to catch any exception (generated by the web-app logger class\nchain) and divert that back to TCs own logger class chain.\n\n* wrap all code that may in the future rely on web-app's own logging\nimplementation with try { } catch() blocks so TC container code is not affected\nby exceptions raised from within it (which maybe what the web-ap itself is\nprogrammed to do, what I mean by this is that if the logging implementation\nwithin the web-app is designed to allow 100 lines to be emited than after that\nit throws out exceptions, thats the web-app's choice to make I'm then saying TCs\nstability should be in no way affected by that choice).\n\nif any have any suggestions of your own please share.\n\n\nWith reference to your \"future logging\" comment, it doesn't make any sense given\nthis bug report and suggests you may not have taken all the details in.\n",
            "date": "20060316T11:58:30",
            "id": 9
        },
        {
            "author": null,
            "body": "(In reply to comment #10)(In reply to comment #10)\n> Your points noted.  They do however seem to be more subjective than objective,\n> maybe you would re-phrase them in a technical manner so everyone can better\n> understand the technical point of view you are trying to convey.\n\nWhatever.\n\n> Some other alternative solutions I can suggest\n\nI do not see how they make any sense, that's the issue.\n\n> With reference to your \"future logging\" comment, it doesn't make any sense given\n> this bug report and suggests you may not have taken all the details in.\n\nOk, no problem, I will ignore this bug report, then.\n",
            "date": "20060316T13:04:33",
            "id": 10
        },
        {
            "author": null,
            "body": "More childish behaviour from Remy what a supprise.\n\nPlease cite technical grounds, your personal opinion does not matter Remy its\npurely subjective that doesn't do an OSS project any good.  Your work and effort\non Tomcat is appreciated but you if you can't make a factual technical argument\nto backup your view then why make comment at all.\n\nPlease don't resolve this bug again unless you actually address it.\n",
            "date": "20060316T22:16:51",
            "id": 11
        },
        {
            "author": null,
            "body": "Was a patch ever actually applied to a Tomcat release to fix this problem?\n\nWe are running tomcoat 5.5.17, and are experiencing this problem, and are \nhaving to actually shutdown/restart Tomcat to undeploy/redeploy our \napplication.",
            "date": "20060602T13:34:37",
            "id": 12
        },
        {
            "author": null,
            "body": "(In reply to comment #13)\n> Was a patch ever actually applied to a Tomcat release to fix this problem?\n> We are running tomcoat 5.5.17, and are experiencing this problem, and are \n> having to actually shutdown/restart Tomcat to undeploy/redeploy our \n> application.\n\nCorrection:  we are using 5.5.16 ...not 5.5.17.",
            "date": "20060602T13:36:32",
            "id": 13
        },
        {
            "author": null,
            "body": "I would also like to know if anyone in the Tomcat community is planning to fix\nthis bug.  I have just encountered it in 5.5.15 running on Ubuntu. \nSpecifically, when I shut down TC via bin/shutdown.sh, I get\njava.lang.NoClassDefFoundError: org/apache/log4j/spi/ThrowableInformation.\n\nI have tried to reproduce and isolate the problem without success.  It is\nespecially strange as this is a test server which has been running stably for\nseveral months now, and we have not encountered this issue before.  I will\ninvestigate further, following the lines of Darryl's suggestions, because if I\ncannot deal with issue, we will have to look at an alternative JDK1.5 compatible\nwebapp server, because I cannot put this Tomcat in production.\n\nI must also say that I find the childish nature of Remy's comments extremely\nunsettling.  I have been using Tomcat for the last 4 years, and have put webapps\nin production on both TC 4.x and 5.0, ontop of both RedHat 9, Mandrake, Centos\nand Solaris.  TC has its 'known issues', but in general one of the things I like\nabout it is that it is simple, predictable.  Therefore perhaps a more mature\nmember of the TC team could have a look at this?\n\nDarryl and Mike, I will post my findings here, and meanwhile please let me know\nif you find any consistently applicable workarounds (including a TC upgrade).",
            "date": "20060921T10:59:40",
            "id": 14
        },
        {
            "author": null,
            "body": "I coin the term, \"Tomcat web-app logger hijacking\", if a container is going to\nhijack the applications choice of logger then the container needs to provide\nadequte protections and safe gaurds against any undesirable behavour that logger\nmay have.\n\nI believe this problem can be fixed by putting a wrapper class between the\nlogging calls the container makes and the calls to the hijacked logger instance.\n This wrapper traps and ignores unwanted exceptions (and optionally provides\nfallback logging to the container's logfile and/or stderr).  As per comment #10\n\nRemy did commit a patch a while ago in his attempt to fix the problem by\ncatching the exception further up the stack trace (than the loging method call).\n But this doesn't work as the webapp on that context is no longer functional or\ndeployable in situations where that new catch() is executed.  This is probably\nbecause the entire housekeeping process during the undeploy did not finish and\nso the container is left in unusable state.\n\nI'm not sure NEEDINFO is the correct status as I think the cause and problem is\nfully understood now.  Maybe NEEDPATCH is really the case here but only one\ncommitter has shown interest in this problem and their opinion on the matter is\nclearly documented.  So why would anyone go to the trouble of creating a patch.",
            "date": "20060921T16:30:06",
            "id": 15
        },
        {
            "author": null,
            "body": "Created attachment 23069\nProposed patch\n\nI have been reviewing this issue and it appears that the original bug report is actually multiple inter-related issues. Using a later version where a number of these have been fixed makes this a lot easier to get one's head around.\n\nThe original test case is still valid but the log4j jar should be replaced with the latest version as the version included appears to suffer from jar locking when used on later Tomcat versions.\n\nThe remaining issue is that the undeploy is triggered by deleting the exploded directory. When the logging mechanism tries to load the additional classes it requires it can't since the JAR has been deleted. The exception this causes means that the context is not correctly cleaned up. This also causes issues for subsequent re-deployments.\n\nUndeployment via the manager does not experience this issue since in this scenario the jars are not deleted until later in the process.\n\nA temporary work-around may be to use the context listener to ensure the class(es) required by the logger during shutdown is loaded (I haven't tested this).\n\nI do not believe the proposed two line patch is correct since it would redirect logging to Tomcat in cases where this is not necessary. I have attached an alternative patch which I will propose for inclusion in 5.5.x.",
            "date": "20090102T06:04:37",
            "id": 16
        },
        {
            "author": null,
            "body": "The patch has been applied to 5.5.x and will be included in 5.5.28 onwards.",
            "date": "20090603T14:24:43",
            "id": 17
        }
    ],
    "component": "Catalina",
    "description": "I moved the directory containing my web-app from the webapps / deployment area,\nI renamed it outside of the webapps/ tree.  I was expecting it to viciously\nundeploy the application so I could then rename it back to cause a deploy.\n\nThe application is setup with a context \"\" for the default context.\n\nThe deployed folder name is \"../webapps/ROOT\"\n\nI think this is reproducable.\n\n\nAt the time I moved the web-app folder I got multiple Exceptions, like the\nfollowing:\n\n\n14-Nov-2005 16:56:56 org.apache.catalina.startup.HostConfig checkResources\nINFO: Undeploying context []\nDEBUG 16:56:56,039 (ApplicationLifecycleListener.java:contextDestroyed:70) \n-contextDestroyed on \"mywebapp\"\n14-Nov-2005 16:56:56 org.apache.catalina.loader.WebappClassLoader openJARs\nWARNING: Failed to open JAR\njava.util.zip.ZipException: No such file or directory\n        at java.util.zip.ZipFile.open(Native Method)\n        at java.util.zip.ZipFile.<init>(ZipFile.java:203)\n        at java.util.jar.JarFile.<init>(JarFile.java:132)\n        at java.util.jar.JarFile.<init>(JarFile.java:97)\n        at\norg.apache.catalina.loader.WebappClassLoader.openJARs(WebappClassLoader.java:1561)\n        at\norg.apache.catalina.loader.WebappClassLoader.findResourceInternal(WebappClassLoader.java:1792)\n        at\norg.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:1587)\n        at\norg.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:856)\n        at\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1305)\n        at\norg.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1187)\n        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n        at\ncom.imin1way.project.task.ApplicationLifecycleListener.contextDestroyed(ApplicationLifecycleListener.java:72)\n        at\norg.apache.catalina.core.StandardContext.listenerStop(StandardContext.java:3733)\n        at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4306)\n        at\norg.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:892)\n        at\norg.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1019)\n        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1178)\n        at\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at\norg.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1304)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1568)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1577)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1557)\n        at java.lang.Thread.run(Thread.java:595)\n\n\n\nI guess it was trying to open JAR files to load classes from the WEB-INF/lib to\nexecute the ContextListener.destroyContext() and any unloaded classes is needed\nto run.\n\n\nHowever the background task is now stuck doing this every 10 seconds:\n\n14-Nov-2005 16:58:36 org.apache.catalina.startup.HostConfig checkResources\nINFO: Undeploying context []\n14-Nov-2005 16:58:36\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor processChildren\nSEVERE: Exception invoking periodic operation:\njava.lang.NullPointerException\n        at\norg.apache.catalina.core.ContainerBase.removeChild(ContainerBase.java:883)\n        at\norg.apache.catalina.startup.HostConfig.checkResources(HostConfig.java:1019)\n        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1178)\n        at\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:292)\n        at\norg.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)\n        at\norg.apache.catalina.core.ContainerBase.backgroundProcess(ContainerBase.java:1304)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1568)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.processChildren(ContainerBase.java:1577)\n        at\norg.apache.catalina.core.ContainerBase$ContainerBackgroundProcessor.run(ContainerBase.java:1557)\n        at java.lang.Thread.run(Thread.java:595)\n\n\nI would expect Tomcat to be able to reliabily recover from this sort of abuse :) \n\nDo bad things happen in TC when an exception is throw from the destroyContext() ?\n\nLet me know if you need more info or maybe even a test case if the cause  /\nsolution isn't clear enough.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "37498",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "[PATCH] NPE in org.apache.catalina.core.ContainerBase.removeChild",
    "systemSpecification": true,
    "version": "5.5.16"
}