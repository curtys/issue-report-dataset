{
    "comments": [
        {
            "author": null,
            "body": "I doublt we should adjust very well-tested classloader because your packaging is\nmessed up.  It's your responsibility (or the responsibility of whoever packages\nyour webapp) to not include duplicate and/or conflicting versions of its\ndependent libraries.\n\nIf you can't do this, at the very least you will want to separate Tomcat's\nlogging libs from your own, perhaps by moving the commons-logging stuff from\n$CATALINA_HOME/common/lib to $CATALINA_HOME/server/lib.",
            "date": "20070325T13:51:48",
            "id": 0
        },
        {
            "author": null,
            "body": "Then: Why does the very same package deploy on 5.5.9?\n\nAnd: Yes there are duplicate classes in the packages, but in the end you will\nnever be able to avoid it. \n\nAnd: There is the, mabe even written law, that it is definitely good practice\nthat one should package all required classes inside the web-app\\lib path,\nbesides native lib adapters. If this is suddenly not true any more, then how do\nyou deploy different independent applications with incompatible commons-logging\nimplementations? \n\nThe answer may be easy for you, but I think that I have done valid packaging and\nthat the classloader is in fact mixing packages from /common/lib with packages\nfrom my application web-inf/lib on application reload.\n\nIt looks like it is preferring the common/lib instance of the jar on reloading,\nnot recognizing, that there is a jar in WEB-IN/lib carrying the same class.\nFollowing the rules of classloading, the Web-App's jar should be used. \n\nBut you are free to correct me if I am wrong.",
            "date": "20070326T03:42:08",
            "id": 1
        },
        {
            "author": null,
            "body": "This bug should not be dismissed. My own web application includes one instance\neach of commons-logging-1.1.jar and log4j-1.2.14.jar. My\n$CATALINA_HOME/common/lib does not contain a commons-logging jar (unless the\nclass files are embedded in one of the other jars???).\n\nAdditionally, the NPE is thrown by log4j code. In fact, I have done some\ndebugging on the log4j code-base, and the behavior that I witnessed defied\nstandard java convention. That is, the NPE is caused by certain static class\nfields (whose values are set at instantiation) arbitrarily becoming null when\none attempts to reload the context that contains the log4j jar. In effect,\ncertain static members of the log4j classes are not being re-initialized when\nthe context is reloaded.\n\nFor my part, I have worked around the issue by patching my log4j to\nre-initialize the problem fields itself when they are detected to be null, but\nin all honesty, this hack should be unnecessary.\n\nNow, I would not say that this bug is a number one priority show-stopper (or\neven that it should be fixed), but it should, at least, be acknowledged.",
            "date": "20070326T06:38:42",
            "id": 2
        },
        {
            "author": null,
            "body": "You do remember that when you undeploy an application (while restarting it), the\ntomcat classloader reflects on all the classes it's unloading, and resets any\nstatic members to null.\n\nDepending on the order in which it does this, if there are some other threads\nstill running, they can get NPEs..",
            "date": "20070326T17:12:10",
            "id": 3
        },
        {
            "author": null,
            "body": "Why should static members be reset to null? When static members are reset to\nnull, do they eventually get re-initialized? For instance if I declare:\n\nstatic String foo = \"bar\";\n\nWhen the context re-load completes, does \"bar\".equals(foo) evaluate to true?",
            "date": "20070327T02:31:56",
            "id": 4
        },
        {
            "author": null,
            "body": "I have no additional threads running in this application. Besides that, in all\napplications we manage, the running threads are stopped on destroy(). \n\nBut neverthelesse: I have started to move JARs around and have now the following\nsituation: \n\nLike Robert Weber, I have no Log4J and no commons-logging in the commons/lib or\nin shared/lib. \n\nI have a logging.properties in commons/classes.\n\nI have commons-loggings and log4j only ONCE in the webapplication this is tested\nwith. \n\nUNloading works fine, as soon as reloading starts, the NPE is thrown. This time\nit is not even inside the application, but in Tomcat Manager. I guess, that the\nclass in log4j is already distorted. \n\nCould it be that tomcat or commons-logging thinks it should use log4j because\nthe classes are found inside the application?",
            "date": "20070327T02:34:30",
            "id": 5
        },
        {
            "author": null,
            "body": "The issue is that something is keeping a reference to a logger that it\nshouldn't. This is going to cause a memory leak and what you are seeing are the\nside-effects of Tomcat's attempts to prevent memory leaks.\n\nIf you can provide the simplest possible test war the exhibits this issue I'll\nhappily debug my way though the code and figure out what is going wrong. Without\nsuch a test case, there is little that can be done to investigate this issue.",
            "date": "20070409T16:36:38",
            "id": 6
        },
        {
            "author": null,
            "body": "Created attachment 20001\nSimple War File That Demonstrates NPE Behavior on Reload\n\nI deployed this WAR on the 5.5.20 and 5.5.23 binary distributions.\n\nThis WAR contains a simple servlet that contains a static reference to a Log\ninstance. The vanilla binary of log4j 1.2.14 is on the classpath, so\ncommons-logging is using the log4j log provider.\n\nThe servlet runs as expected (it just prints a message to the client and prints\nthe same message in the log). However, when I click on the reload link for the\napplication in the manager web application, the context fails to reload with a\nNullPointerException.\n\nThe NullPointerException traces back to log4j classes. Specifically, I\ndiscovered that there are several instances where static members of the log4j\nclasses in question are improperly set to null by something outside of log4j\nand not re-initialized.",
            "date": "20070419T06:53:34",
            "id": 7
        },
        {
            "author": null,
            "body": "Created attachment 20002\nThis WAR Contains a Modified Log4j That Does NOT Exhibit NPE Behavior\n\nThis WAR is identical to \"20001: Simple War File That Demonstrates NPE Behavior\non Reload\" except that it contains a version of log4j that I modified.\n\nRecall that I stated that there are several static members in log4j classes\nthat are being improperly nullified and not re-initialized. The modifications\nthat I made to the log4j binary included in this WAR simply amount to checking\nif the members in question are in a null state before using them. Then, if they\nare null, I re-initialize the members to their starting values.\n\nThis WAR does NOT exhibit a NullPointerException when reloaded. Additionally,\nthe servlet continues to function normally after several reloads.",
            "date": "20070419T06:59:22",
            "id": 8
        },
        {
            "author": null,
            "body": "Set the system property\norg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES to false.",
            "date": "20070419T07:03:42",
            "id": 9
        },
        {
            "author": null,
            "body": "I attached two test cases. The first contains a vanilla binary of log4j 1.2.14,\nand it does exhibit the NPE behavior. The second contains a modified binary of\nlog4j 1.2.14, and it does NOT exhibit the NPE behavior. More details regarding\nthe  test cases can be found by clicking on the attachment links.\n\nTwo further notes, though:\n\n1.) The NPE behavior is exhibited in the first test case regardless of whether\nthe servlet containing the log reference has been previously invoked.\n\n2.) The first test case does NOT exhibit the NPE behavior under tomcat 6.0.10. I\nsuspect that this has something to do with the standardization of logging under\nthat tomcat platform.(In reply to comment #10)\n\n> Set the system property\n> org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES to false.\n\nWhy?\n",
            "date": "20070419T07:11:09",
            "id": 10
        },
        {
            "author": null,
            "body": "(In reply to comment #10)\n> Set the system property\n> org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES to false.\n\nI set this property in $JAVA_OPTS to false. I additionally verified that the\nproperty was, in fact, being set by querying System.getProperty().\n\nHowever, setting this property to false has no effect with regards to resolving\nthis bug.",
            "date": "20070419T08:00:40",
            "id": 11
        },
        {
            "author": null,
            "body": "Ok, you did not post the NPE, so I cannot know for sure. Regardless, this issue\nis not going to be addressed, and you should probably be packaging your web\napplication differently.",
            "date": "20070419T08:05:05",
            "id": 12
        },
        {
            "author": null,
            "body": "(In reply to comment #13)\n> Ok, you did not post the NPE, so I cannot know for sure. Regardless, this issue\n> is not going to be addressed, and you should probably be packaging your web\n> application differently.\n\nThere is little variation between my NPE and the one that has been posted\npreviously.\n\nBy \"packaging your web application differently\", what exactly do you mean?\nPlacing log4j in the container classpath instead of the application classpath?\nNot using a separately packaged commons-logging? Not using log4j at all?\n",
            "date": "20070419T08:29:36",
            "id": 13
        },
        {
            "author": null,
            "body": "org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES only has an\neffect in the 6.0.x branch. This option hasn't been ported to the 5.5.x branch.",
            "date": "20070419T09:14:10",
            "id": 14
        },
        {
            "author": null,
            "body": "I am hunting for permgen leaks as the moment and have wildly inconsistent\nresults with context reloading. Most of the time the first loaded webapp will\nnot garbage but some subsequent reloads are grabaged.\n\nThe Tomcat FAQ section should have it spelled out under a title called 'Log4J'\nthe best way to include log4j and the implications of having the\ncommons-logging. Currently the 'How should I log in my own webapps?' section\n'strongly recommends' using log4j but does not address any of these issues.\nThere are many different approaches listed on the web some of which go as far as\nreplacing the bootstrap logging.\n\ne.g.\n\n/commons/lib/commons-logging.jar\n/commons/lib/log4j.jar\n/commons/classes/log4j.properties\n\n/<APP>/WEB-INF/lib/log4j.jar\n/<APP>/WEB-INF/lib/commons-logging.jar\n/<APP>/WEB-INF/classes/log4j.properties\n\nIt should spell out things like the following:\n\nIf you have commons-logging.jar in your webapp then it will not garbage.\n\nIf you don't have log4j.jar in your webapp then you will not get per-content\nlogging of you /<APP>/classes/log4j.properties file\n\nKind regards\nJames McIntosh",
            "date": "20070419T16:49:36",
            "id": 15
        },
        {
            "author": null,
            "body": "I am re-opening this since the bug is the result of the nulling out static and\nfinal fields from classes loaded by the web app classloader. As noted in the\ncode comments this is a workaround for some apparent GC bugs.\n\nThe workaround will not be removed since it is useful for many users and has\nbeen shown to resolve some memory leak issues.\n\nI will make this workaround optional in TC5.5.x, as it is in TC6.0.x.",
            "date": "20070419T19:59:47",
            "id": 16
        },
        {
            "author": null,
            "body": "*** Bug 37956 has been marked as a duplicate of this bug. ***",
            "date": "20070419T20:00:53",
            "id": 17
        },
        {
            "author": null,
            "body": "I have added this configuration option to svn. The provided test case no longer\nthrows an NPE on reload, providing the new configuration option is set to false.\n\nThis will be included in 5.5.24 onwards.",
            "date": "20070419T20:20:27",
            "id": 18
        },
        {
            "author": null,
            "body": "Note that after some further investigation the root cause is actually a logging\nrelated memory leak (bug 42172). This leak has been fixed in svn and the test\ncase for this issue now runs without an NPE with or without setting the system\nproperty\norg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES to false.",
            "date": "20070422T17:34:38",
            "id": 19
        },
        {
            "author": null,
            "body": "Having looked at this in more detail there is still a theoretical possibility of\nan NPE unless the system\nproperty\norg.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES is set to false\n\nAny such occurrence should be rare.",
            "date": "20070423T19:43:08",
            "id": 20
        },
        {
            "author": null,
            "body": "I'm wary of the implications of the comments in this bug. Let me summarize to\nmake sure we're all on the same level. I'm coming from bug 40212, btw.\n\n- To get per-app logging, one has to use the setup of comment #16 (one instance\nof log4j and commons-logging per tomcat and per webapp).\n\n- If you do this, you can get NPEs at the next startup because Tomcat clears\nstatic fields during undeploy.\n\nCan you explain to me how it can be possible that the instance N+1 of my webapp\ncan see anything from instance N? If that would happen, it would either mean \n\na) that tomcat is handing me classes which are in the common classpath despite\nthem being overridden in my webapp\nb) that I get references to classes which ought no to exist anymore\n\na) means that classes from tomcat leak into my webapp and b) means that classes\nfrom instance N can leak into N+1. Neither must be possible.\n",
            "date": "20071102T13:27:46",
            "id": 21
        },
        {
            "author": null,
            "body": "Could someone with knowledge of this bug read through this comment on a bug in Log4j?\n\nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=43867#c39\n\nI believe that this is an example of tomcat breaking other code due to the way that it clears references, when org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES is left to its default of \"on\".\n\nIn this case, log4j prevents a null pointer, and simply logs an error.  But other code could very easily take a null pointer for the same reason.\n\nIt doesn't seem like the current implementation of clear references is safe to use.\n\nComment #17 indicates that clearReferences is a workaround to a different bug, and won't be removed.  Perhaps that should be re-evaluated.  \n\nI now have to disable clearReferences on my tomcat installs on most of my webapps which use log4j to prevent users from seeing a scary looking error being logged by log4j.",
            "date": "20080709T13:40:47",
            "id": 22
        },
        {
            "author": null,
            "body": "Yes, if you and the libraries you use code their use of loggers correctly you should be safe with setting ENABLE_CLEAR_REFERENCES to false.\n\nI can't speak for the other developers but I am happy with the current default for this being true on the basis it fixes more issues than it causes.\n\nThat said, I am more than happy to look into any test case (like bug 42172) that could be a Tomcat memory leak.",
            "date": "20080709T14:01:42",
            "id": 23
        }
    ],
    "component": "Catalina",
    "description": "Actually this Bug happens also in 5.5.23. It does not happen in 5.5.9.\n\nOk, we have a webapplication that contains each and every lib it will ever\nrequire. Due to some prepackaged JAR-files it even contains log4j and\ncommons-logging twice. One in WEB-INF/lib and one inside a jar in WEB-INF/lib.\n\nThere is a commons-logging (1.0.4) in commons/lib of tomcat, but not log4j.\n\nWe use Anti-Jar|Resource-Locking on Windows.\n\nWhen deploying an application using the manager or the ant-tasks, everything is\nfine. Also removing and deploying a new version works.\n\nIf we reload the application, it will refuse to reload with an NPE. \n\nI tracked the application source in the debugger and trapped the NPE. I have\nnever seen this, but this is the fact:\n\nI can see the complete call stack and inside Log4j the function converter.format\nis called with a valid reference to a StringBuffer which suddenly becomes \"null\"\nin the static method PatternConverter.spacePad()!\n\nI can only explain this with the hierarchical Classloader mixing classes and\nbeeing unable to transport the reference to the StringBuffer from the instance\nthat is loaded in another class to the Classloader carriing the static\nPatternConverter class. \n\nI could \"solve\" this issue by putting the log4j.jar in the common/lib directory\nand restart the server. If I remove it from there or if I remove it completely\nfrom my application (also from jar files in my application) it works. \n\nBest regards, \n\nThomas\n\n\nStacktrace follows: Exception on reload in /manager\n\n[23 Mrz 22:01:59:139][INFO ][closing any session, if still open\n][de.srs.pen.vwopenday2006.StrutsServlet]\n[23 Mrz 22:01:59:139][DEBUG][closeSessionSilent on sid 0\n][de.srs.pen.dao.DAOSessionFactory]\n[23 Mrz 22:01:59:139][DEBUG][Initializing Thread Local for refcounting on 0\n][de.srs.pen.dao.DAOSessionFactory]\n[23 Mrz 22:01:59:139][DEBUG][closing session, removing thread locals\n][de.srs.pen.dao.DAOSessionFactory]\n[23 Mrz 22:01:59:139][DEBUG][Resetting refcounter on session 0\n][de.srs.pen.dao.DAOSessionFactory]\n[23 Mrz 22:01:59:139][DEBUG][reset counter 0 to 0\n][de.srs.pen.dao.DAOSessionFactory]\n[23 Mrz 22:01:59:139][DEBUG][checking for leftover transaction\n][de.srs.pen.dao.DAOSessionFactory]\n[23 Mrz 22:01:59:139][DEBUG][Resetting refcounter on Transaction 0\n][de.srs.pen.dao.DAOSessionFactory]\n[23 Mrz 22:01:59:139][DEBUG][Initializing Thread Local for refcounting on 0\n][de.srs.pen.dao.DAOSessionFactory]\n[23 Mrz 22:01:59:139][DEBUG][reset counter 0 to 0\n][de.srs.pen.dao.DAOSessionFactory]\n[23 Mrz 22:01:59:139][INFO ][Destroy complete\n][de.srs.pen.vwopenday2006.StrutsServlet]\n[23 Mrz 22:01:59:139][DEBUG][JspServlet.destroy()\n][org.apache.jasper.servlet.JspServlet]\n[23 Mrz 22:01:59:139][DEBUG][Stopping filters\n][org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/SurveyDay]]\n[23 Mrz 22:01:59:139][DEBUG][Stopping ][org.apache.catalina.session.ManagerBase]\n[23 Mrz 22:01:59:139][DEBUG][Unloading persisted sessions\n][org.apache.catalina.session.ManagerBase]\n[23 Mrz 22:01:59:139][DEBUG][Saving persisted sessions to SESSIONS.ser\n][org.apache.catalina.session.ManagerBase]\n[23 Mrz 22:01:59:139][DEBUG][Unloading 0 sessions\n][org.apache.catalina.session.ManagerBase]\n[23 Mrz 22:01:59:139][DEBUG][Expiring 0 persisted sessions\n][org.apache.catalina.session.ManagerBase]\n[23 Mrz 22:01:59:139][DEBUG][Unloading complete\n][org.apache.catalina.session.ManagerBase]\n23.03.2007 22:02:00 org.apache.commons.modeler.Registry registerComponent\nSCHWERWIEGEND: Null component\nCatalina:type=JspMonitor,name=jsp,WebModule=//localhost/SurveyDay,J2EEApplication=none,J2EEServer=none\n23.03.2007 22:02:00 org.apache.catalina.core.ApplicationContext log\nSCHWERWIEGEND: HTMLManager: ManagerServlet.reload[/SurveyDay]\njava.lang.NullPointerException\n at org.apache.log4j.helpers.PatternConverter.spacePad(PatternConverter.java:92)\n at org.apache.log4j.helpers.PatternConverter.format(PatternConverter.java:71)\n at org.apache.log4j.PatternLayout.format(PatternLayout.java:495)\n at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:292)\n at org.apache.log4j.WriterAppender.append(WriterAppender.java:150)\n at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:221)\n at\norg.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:57)\n at org.apache.log4j.Category.callAppenders(Category.java:187)\n at org.apache.log4j.Category.forcedLog(Category.java:372)\n at org.apache.log4j.Category.log(Category.java:864)\n at org.apache.commons.logging.impl.Log4JLogger.debug(Log4JLogger.java:110)\n at org.apache.catalina.session.ManagerBase.init(ManagerBase.java:723)\n at org.apache.catalina.session.StandardManager.start(StandardManager.java:619)\n at org.apache.catalina.core.StandardContext.start(StandardContext.java:4166)\n at org.apache.catalina.core.StandardContext.reload(StandardContext.java:3025)\n at org.apache.catalina.manager.ManagerServlet.reload(ManagerServlet.java:907)\n at\norg.apache.catalina.manager.HTMLManagerServlet.reload(HTMLManagerServlet.java:488)\n at org.apache.catalina.manager.HTMLManagerServlet.doGet(HTMLManagerServlet.java:99)\n at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)\n at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)\n at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:269)\n at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:188)\n at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:210)\n at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:174)\n at\norg.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)\n at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:117)\n at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:108)\n at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:151)\n at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:870)\n at\norg.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:665)\n at\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:528)\n at\norg.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:81)\n at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:685)\n at java.lang.Thread.run(Unknown Source)\n23.03.2007 22:02:00 org.apache.catalina.core.ApplicationContext log\nINFO: HTMLManager: list: Listing contexts for virtual host 'localhost'",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "41939",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "NPE in Logging due to classloading",
    "systemSpecification": true,
    "version": "5.5.20"
}