{
    "comments": [
        {
            "author": null,
            "body": "I don't agree with this report. All the fields will be properly cleared at the\nend of the request processing, including the content length. There's also now a\nlimitation on the content length which is accepted by Tomcat when parsing\nparameters using getParameter.\nIf you want to reopen this, please submit a sequence of requests producing the\nbug (using za telnet).",
            "date": "20031204T10:10:21",
            "id": 0
        },
        {
            "author": null,
            "body": "Have to correct me: Since this only occurs if the connection is closed, no \ninformation from other requests can leak to the client directly.\n\nHere the steps to reproduce this behaviour:\n\nwhith this jsp the problem can be prepared, just fill in some values and call it \na few times...\n[code]\n<HTML>\n<BODY>\n<FORM action=\"showIt.jsp\" method=\"post\">\n<BR><BR>\n<%\n  for (int i = 0; i < 10; i++) {\n%>\n  value <%=i%> <input type=\"text\" name=\"<%=i%>\" length=\"30\"> <br>\n<%\n  }\n%>\n<INPUT TYPE=\"SUBMIT\" NAME=\"Submit\" VALUE=\"Submit\">\n</FORM>\n</BODY>\n</HTML>\n[/code]\n\n\nshowIt.jsp simply writes all parameter set in the request to System.out:\n[code]\n<%@page import=\"java.util.Enumeration\"%>\n<%\n  Enumeration names = request.getParameterNames();\n  String name;\n  String value;\n  System.out.println(\"====================\");\n  while (names.hasMoreElements()) {\n    name = (String)names.nextElement();\n    value = request.getParameter(name);\n    System.out.println(\"showIt.jsp\\t\"+name+\"=\"+value);\n  }\n  System.out.println(\"====================\");\n%>\n[/code]\n\n\n\nFinally the java-Class that has to be run to show the problem: Just call it \nseveral times and look at catalina.out.\n[code]\nimport java.net.*;\nimport java.io.*;\n\npublic class DamagedPostRequest {\n\n  public DamagedPostRequest(String servername, int port, String webapps, int \nlength) throws Exception {\n    String request = \"POST \"+webapps+\"showIt.jsp HTTP/1.1\\n\"\n                    +\"Host: \"+servername, +\"n\"\n                    +\"Content-type: application/x-www-form-urlencoded\\n\"\n                    +\"Content-length: \"+length+\"\\n\"\n                    +\"\\n\";\n\n    Socket s = new Socket(InetAddress.getByName(servername), port);\n    OutputStream out = s.getOutputStream();\n    out.write(request.getBytes());\n    out.close();\n  }\n\n  public static void main(String[] args) throws Exception  {\n    DamagedPostRequest damagedPostRequest2 = new DamagedPostRequest(\"localhost\", \n8080, \"/\", 1000);\n  }\n}\n[/code]",
            "date": "20031204T10:50:04",
            "id": 1
        },
        {
            "author": null,
            "body": "There's a basic defect in the code which reads the request body. If there's a\ndisconnect, then the full array could be parsed, although some of its data is\nbad. This will occur only for small posts (< 8KB).\nI suggest trying out this patch for a possible fix (if a bad read occurs, no\nparameters will be parsed, which is the most reliable behavior; I think the\nasumption of the alg is that there would be an IOE being thrown if there's a\nclient disconnect):\n\nRCS file:\n/home/cvs/jakarta-tomcat-catalina/catalina/src/share/org/apache/coyote/tomcat5/CoyoteRequest.java,v\nretrieving revision 1.25\ndiff -r1.25 CoyoteRequest.java\n2371,2372c2371,2374\n<                 readPostBody(formData, len);\n<                 parameters.processParameters(formData, 0, len);\n---\n>                 int actualLen = readPostBody(formData, len);\n>                 if (actualLen == len) {\n>                     parameters.processParameters(formData, 0, len);\n>                 }\n",
            "date": "20031204T13:56:59",
            "id": 2
        }
    ],
    "component": "Tester",
    "description": "Hi, since we had some strange behaviour according to some parts of our software, \nwe found something in Tomcat 4.1.18, 4.2.25 and 5.0.16 (guess so, also on lot of \nother versions..)\nIf a POST-request sends a wrong Content-length (too large), Tomcat does not send \na HTTP 400 Code but continues to process the request. This is no really problem \nso far, since all parameters whith the POST-request are still read in a correct \nmatter.\n\nBut if the client cuts the connection (presses the abort-button, goes offline, \nanyway..) Tomcat uses data from previous request to get the given \ncontent-length. (Seems the buffer is not cleared correctly). This could lead to \nsome critical information leakage on client side, if paramters are bounced back \nto client (e.g. preview-functions in guestbooks, forums, ...) and can also some \nreally strange behaviour if you use this information to generate and send an \nemail. So content from other \"mails\" is taken and filled into a new mail.\n\nIs there any workaround known?\n\n\nGreetz\n\nChristian",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "25193",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 major",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Wrong Content-Length in POST could cause information leakage / misbehaviour",
    "systemSpecification": true,
    "version": "5.0.16"
}