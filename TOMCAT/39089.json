{
    "comments": [
        {
            "author": null,
            "body": "First, note that Tomcat already supports the classdebuginfo (true by default,\ncan be set to false) option to be passed into the compiler at runtime: maybe try\nusing that? (See\nhttp://tomcat.apache.org/tomcat-5.5-doc/jasper-howto.html#Configuration for\ndocumentation)\n\nSecond, as you noted, this is a combination of a JDK and/or Eclipse JDT bugs,\nnot a Tomcat bug per-se.  I hesitate to put in place any temporary workaround as\na band-aid, and then remove it later when the vendor has fixed their root\nproblem.  Instead, you may want to bring this up in the relevant Eclipse forum\nand/or bug tracking system.\n\nThanks.",
            "date": "20060413T19:39:55",
            "id": 0
        },
        {
            "author": null,
            "body": "The specific JVM bug that is occuring is already noted at Sun (anyone reading\nthis, please vote for Sun to fix the bug -\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6294277). \n\nI've also posted a bug to Eclipse's bugzilla:\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id=136752\n\nI would suggest adding some information to Tomcat's docs because Tomcat's\ndefault configuration is to use debug mode and the JDT compiler. The bug will\noccur without the end-user being aware that the root cause is the use of JDT and\nthe error from the JVM is very cryptic. The only resolution is either to find\nthis bug or hunt-and-peck through the config settings to fix.\n\nAlso, I'm not a JDT expert, but it might be worthwhile looking into if the extra\ndebug information being included by JDT can be turned off by Tomcat on\ncompilation. From what I understand, the field in question is not for use by\njava-debuggers but for non-java compilers.",
            "date": "20060413T20:43:07",
            "id": 1
        },
        {
            "author": null,
            "body": "I'm reopening this because it looks like JDT does not put in a\nSourceDebugExtension during compilation.\n\nLooking at the Jasper source code, there are references to the\nSourceDebugExtension and JSR-045 in the SmapUtils.class. I'm not sure how this\nis used or under what circumstances. I am going to try rerunning the test cases\ntoday using javac inside the container instead of jdt. I will post the results\nhere and the the Eclipse bug as well.\n\nThe SmapUtils.class can be seen here:\nhttp://svn.apache.org/viewcvs.cgi/tomcat/jasper/tc5.5.x/src/share/org/apache/jasper/compiler/SmapUtil.java?view=markup\n\nThe JDT bug I opened can be found here:\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id=136752",
            "date": "20060418T21:23:52",
            "id": 2
        },
        {
            "author": null,
            "body": "If you want a change to Tomcat's docs, please let us know what text you'd like\nus to use, and we'll gladly add it to the docs.  But please don't reopen just\nfor the sake of reopening it, because it's a JDT and/or Sun bug, not a Tomcat\nbug, as already noted above.",
            "date": "20060418T21:50:10",
            "id": 3
        },
        {
            "author": null,
            "body": "(In reply to comment #4)\nI didn't reopen this for the sake of re-opening it nor for the documentation fix...\n\nJDT *does not* add the JSR-045 SourceDebugExtension - Jasper seems to. Please\nsee comment #3 that I added when I reopened this bug - the SourceDebugExtension\ncode is in Tomcat's SVN repository (see the link in #4). \n\nThe Sun JVM issue is really a spec documentation conflict. The overall JVM specs\nquite clearly says there is a 4K limit for attributes, the JSR spec says\nsomething different. I would think the JVM spec is much more important here. \n\nFor large JSPs, Jasper is adding > 4K work of SourceDebugExtension information\nto the compiled classes - this violates the JVM spec and causes the bug.\n\nAs I said in my comment, I don't know how the SmapUtil and related classes are\nbeing used by Jasper or when they are used. According to the analysis from the\nJDT developer looking at this issue on their end:\n\n\"In the .class file that I got, there is such an attribute at the end.\n  Attribute: SourceDebugExtension Length: 81342.\"\n\nSince JDT does not add the SourceDebugExtension attribute during compilation, it\nwould appear that Jasper is adding it to the bytecode after compilation? I'm\nopen to an alternate explanation...\n\nI'm attaching the .class and .java files to this bug so you can look at them too.\n\nIn my opinion, this should be re-opened and looked into, but I will defer to you.\n\n",
            "date": "20060418T23:11:56",
            "id": 4
        },
        {
            "author": null,
            "body": "Created attachment 18132\nLarge JSP compiled by jdt\n\nhere's the file that was sent to the JDT for analysis. As they logged in their\nBugzilla, JDT doesn't add the attribute in question during compilation but you\ncan see it in the .class file at the end.",
            "date": "20060418T23:14:11",
            "id": 5
        },
        {
            "author": null,
            "body": "OK, now I understand why you re-opened it.  Thanks for the explanation.  I'll\nlook into it when I get a chance, hopefully someone else will get a chance sooner ;)",
            "date": "20060418T23:37:59",
            "id": 6
        },
        {
            "author": null,
            "body": "(In reply to comment #5) \n> The Sun JVM issue is really a spec documentation conflict. The overall JVM specs\n> quite clearly says there is a 4K limit for attributes, the JSR spec says\n> something different. I would think the JVM spec is much more important here. \n> \n> For large JSPs, Jasper is adding > 4K work of SourceDebugExtension information\n> to the compiled classes - this violates the JVM spec and causes the bug.\nErik,\n\nWhere did you get that information about the 4K limit. An attribute length can\nbe on 4 unsigned byte.",
            "date": "20060503T18:53:19",
            "id": 7
        },
        {
            "author": null,
            "body": "I have added a known issues section to the Jasper/JSP how-to that explains this issue and gives some options on how to work around it.",
            "date": "20090705T07:25:24",
            "id": 8
        }
    ],
    "component": "Jasper",
    "description": "Environment: Tomcat 5.5 running embedded in JBoss 4.0.3SP1\nJVM: java version \"1.5.0_06\"\nJVM args: -Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n\n-Dprogram.name=run.bat-Xms128m -Xmx512m -XX:MaxPermSize=256m\n\nWhen using the JDT compiler to compile JSPs on-the-fly, a very large\nJSP throws the following exception:\n\njava.lang.InternalError: name is too long to represent\n[full stack at end of bug]\n\nThis seems to be related to the follow JVM bug: \nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6294277\n\nbut this only occurs if the JDT compiler is in use. Precompiling \nthe same JSP from an external ANT script using (1.5) \njavac does not cause the problem.\n\nThe ANT compiled JSP's class file is 914KB while the JDT version\nis 1016 KB. The original java src files are 3130 KB (52701 lines) for\nthe ANT version and 3223 (56750 lines) for the JDT version. The number\nof lines of source seems to be a factor here, if I turn on the trimSpaces\nflag for jasper, the number of lines of in the src file drops and the JSP\nstarts to work again.\n\nAs a test, I took the .java file from the container, compiled it using\njavac outside the container and deployed it - it worked fine.\n\nI've posted the original JSP and both versions of the .java and .class files\nto: http://www.3ptsoft.com/bug/jasper-bug.zip\n\nMy suspicion is that JDT is stuffing too much debug data into the class file\n(see above bug reference) - perhaps there is a way to control the behaviour\nof the JDT compiler to prevent this until Sun resolves their side of the issue?\n\nWorkaround: precompile the JSPs outside of Tomcat:\n<target name=\"jspc\" description=\"compiles JSPs\" if=\"compile.jsps\" >\n\t<!-- Precompile JSPs -->\n    <taskdef classname=\"org.apache.jasper.JspC\" name=\"jasper2\" > \n    \t<classpath refid=\"build.classpath\" />\n    </taskdef> \n\t\n\t<jasper2\n    \tcompilertargetvm=\"1.5\"\n    \tcompilersourcevm=\"1.5\"\n    \tclassdebuginfo=\"true\"\n    \tlistErrors=\"true\"\n    \tverbose=\"3\"\n\t\tvalidateXml=\"false\" \n\t\turiroot=\"${output.dir}/web\" \n\t\twebXmlFragment=\"${output.dir}/web/WEB-INF/generated_web.xml\" \n\t\toutputDir=\"${output.dir}/web/WEB-INF/src\">\n  </jasper2>\n\n<!-- Insert the generated paths -->\n<loadfile property=\"web.xml\"\nsrcFile=\"${output.dir}/web/WEB-INF/generated_web.xml\"/>\t\t\n<replace file=\"${output.dir}/web/WEB-INF/web.xml\" value=\"${web.xml}\">\n\t<replacetoken><![CDATA[<!-- @jasper-paths@ -->]]></replacetoken>\n</replace>\n\n<javac source=\"1.5\" \n\toptimize=\"off\"\n\tdestdir=\"${output.dir}/web/WEB-INF/classes\" \n\tdeprecation=\"${javac.deprecation}\" \n\tnowarn=\"${compile.nowarn}\" \n\tdebug=\"${compile.debug}\" \n\tdebuglevel=\"lines,vars,source\" \n\tcompiler=\"${javac.compiler}\" \n\texecutable=\"${javac.path}\">\n\t<src path=\"${output.dir}/web/WEB-INF/src\" />\n\t<classpath refid=\"build.classpath\" />\n</javac>\n</target>\n\n\n\nstack trace thrown:\n12:51:49,296 ERROR\n[org.apache.catalina.core.ContainerBase.[jboss.web].[localhost].[/TestAdmin].[jsp]]\n- Servlet.service() for servlet jsp threw exception\njava.lang.InternalError: name is too long to represent\n        at java.lang.ClassLoader.defineClass1(Native Method)\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n        at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n        at java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n        at org.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:158)\n        at org.apache.jasper.servlet.JasperLoader.loadClass(JasperLoader.java:71)\n        at\norg.apache.jasper.JspCompilationContext.load(JspCompilationContext.java:589)\n        at\norg.apache.jasper.servlet.JspServletWrapper.getServlet(JspServletWrapper.java:137)\n        at\norg.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:305)\n        at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:314)\n        at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:264)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:810)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at\norg.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:672)\n        at\norg.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:463)\n        at\norg.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:398)\n        at\norg.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:301)\n        at\norg.apache.myfaces.context.servlet.ServletExternalContextImpl.dispatch(ServletExternalContextImpl.java:416)\n        at\norg.apache.myfaces.application.jsp.JspViewHandlerImpl.renderView(JspViewHandlerImpl.java:234)\n        at org.apache.myfaces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:372)\n        at javax.faces.webapp.FacesServlet.service(FacesServlet.java:138)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at com.tps.framework.servlet.NDCFilter.doFilter(NDCFilter.java:58)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at\ncom.tps.framework.servlet.HibernateFilter.doFilter(HibernateFilter.java:48)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at com.tps.framework.servlet.HivemindFilter.doFilter(HivemindFilter.java:55)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at\norg.apache.myfaces.component.html.util.ExtensionsFilter.doFilter(ExtensionsFilter.java:124)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at\norg.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:81)\n        at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202)\n        at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n        at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n        at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)\n        at\norg.jboss.web.tomcat.security.CustomPrincipalValve.invoke(CustomPrincipalValve.java:39)\n        at\norg.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:159)\n        at\norg.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)\n        at\norg.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:59)\n        at\norg.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)\n        at\norg.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n        at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)\n        at\norg.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)\n        at\norg.apache.coyote.http11.Http11Processor.process(Http11Processor.java:856)\n        at\norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:744)\n        at\norg.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)\n        at\norg.apache.tomcat.util.net.MasterSlaveWorkerThread.run(MasterSlaveWorkerThread.java:112)\n        at java.lang.Thread.run(Thread.java:595)",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "39089",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P2 critical",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "java.lang.InternalError: name is too long to represent",
    "systemSpecification": true,
    "version": "5.5.0"
}