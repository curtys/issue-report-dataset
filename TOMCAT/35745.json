{
    "comments": [
        {
            "author": null,
            "body": "Thank you for the compliments, we're glad you like Tomcat.  You can inspect the\nJDBCRealm (and its more recent, more recommended brother, DataSourceRealm) and\nany class you think is relevant, and you'll find none of these credential\ncolumns are hard-coded.  I personally have used the JDBCRealm with all sorts of\ntable names and column names, without a problem.  Accordingly, I'm closing this\nissue as invalid.  I suggest you use the tomcat-user mailing list for further\nadvice about debugging your situation.\n\nI also did add one logging statement to JDBCRealm which will output the\ncredentials query, if you have the class configured for DEBUG-level logging. \nThat'll be in 5.5.10.",
            "date": "20050721T23:54:01",
            "id": 0
        }
    ],
    "component": "Catalina",
    "description": "When implementing container managed security in server.xml using JDBCRealm (and \nperhaps the JNDI JDBC based realm?) \nthis works....\n      <Realm  className=\"org.apache.catalina.realm.JDBCRealm\" debug=\"99\"\n         connectionName=\"javauser\" \n     connectionPassword=\"javadude\" \n          connectionURL=\"jdbc:mysql://localhost:3306/trainingdb\"\n             driverName=\"com.mysql.jdbc.Driver\"\n              userTable=\"users\" \n            userNameCol=\"user_name\" \n            userCredCol=\"user_pass\"\n          userRoleTable=\"user_roles\" \n            roleNameCol=\"role_name\" />\n\nBut this does not....\n      <Realm  className=\"org.apache.catalina.realm.JDBCRealm\" debug=\"99\"\n         connectionName=\"javauser\" \n     connectionPassword=\"javadude\" \n          connectionURL=\"jdbc:mysql://localhost:3306/trainingdb\"\n             driverName=\"com.mysql.jdbc.Driver\"\n              userTable=\"MYTABLENAME\" \n            userNameCol=\"user_name\" \n            userCredCol=\"user_pass\"\n          userRoleTable=\"user_roles\" \n            roleNameCol=\"role_name\" />\n\nThe Tomcat log files were helpful in that they indicated my table name was not \nfound in the database - but it was there.  On a hunch I renamed my existing \nlegacy tables (in test) to match your examples and the container managed \nsecurity worked.  It appears the Tomcat implementation has hard-coded these \ntable-name and column-name values somewhere in the j_security_implementation.  \nThis of course defeats the whole point of providing these parameters to users \nin the first place.  Note that published authors, aside from your web-site, are \ntouting the flexibility of the Tomcat implementation to reference existing \nclient (legacy) USER and USER-ROLE table names already existing and used by \nother applications. \n\nI spent several days trying to get my existing table names to work without \nsuccess and I'm not a 'newbie'.  I never saw any published examples in books \nwhere anyone actually used names aside from the default example, so perhaps \nthis simply has not be tested.  It is the only explanation I have for it not \nworking without digging into the Tomcat source code implementation of container \nmanaged security.\n\nGreat product, by the way, really.  \n \nTomcat is fantastic - and free!!!!",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "35745",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Realm JDBCRealm userTable & userRoleTable not real parameters?",
    "systemSpecification": true,
    "version": "5.0.28"
}