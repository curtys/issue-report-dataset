{
    "comments": [
        {
            "author": null,
            "body": "I was able to reproduce your problem w/ TC 5.0.19.\n\nI assume you have a chain of jsp:include, and have the following jsp-config\nelement in your web.xml:\n\n    <jsp-config>\n      <jsp-property-group>\n        <url-pattern>/*</url-pattern>\n      </jsp-property-group>\n    </jsp-config>\n\nIf so, this bug has already been fixed - it is a duplicate of Bugzilla 27704\n(\"Result of request.getServletPath() wrong in case JSP inside\njsp-property-group\").\n\nThe fix is in CVS, and will be available in TC 5.0.21.\n\nPlease confirm that your problem is being caused by the above jsp-config, and I\nwill go ahead and close this bug as a duplicate of Bugzilla 27704.",
            "date": "20040330T19:21:38",
            "id": 0
        },
        {
            "author": null,
            "body": "Thats my problem.  Though it's not a chain of jsp includes.  I have a servlet \nthat forwards a request to a JSP using the \"jsp\" named dispatcher.  The JSP \nthen has an include in it.",
            "date": "20040330T19:29:16",
            "id": 1
        },
        {
            "author": null,
            "body": "The servlet is at\n\n  <servlet-mapping>\n    <servlet-name>foo</servlet-name>\n    <url-pattern>/*</url-pattern>\n  </servlet-mapping>\n",
            "date": "20040330T19:32:26",
            "id": 2
        },
        {
            "author": null,
            "body": "Created attachment 11064\nTest Case",
            "date": "20040330T20:25:33",
            "id": 3
        },
        {
            "author": null,
            "body": "I have attached a test case.\n\n/test/jsp/test.jsp displays \"This is a test\"\n/test/jsp/include.jsp throws java.lang.StringIndexOutOfBoundsException",
            "date": "20040330T20:26:13",
            "id": 4
        },
        {
            "author": null,
            "body": "I was able to reproduce this bug using the servlet wildcard mapping.\n\nBugzilla 27704 fixes the problem where the including JSP was mapped to by\na \"/*\" jsp-config mapping (and getServletPath() used to be empty), but it does\nnot address the case where a servlet mapped to by \"/*\" is the entry point.\n\nKin-Man committed a fix earlier that fixes this problem.",
            "date": "20040330T20:41:17",
            "id": 5
        },
        {
            "author": null,
            "body": "I think your test case has a problem unrelated to the\nStringIndexOutOfBoundsException issue it uncovered.\n\nNot only the initial request, but also the target of your <jsp:include> will be\nrouted through your \"test\" servlet (due to the \"/*\" mapping), which means you\nend up doing a request dispatcher forward (from your servlet) inside an include.\n\nAs a result of this, you'll see this warning in the logs:\n\n  WARNING: Internal error flushing the buffer in release(): java.io.IOException:\nStream closed\n\nwhen releasing the page context of the including JSP.\n",
            "date": "20040330T23:59:55",
            "id": 6
        },
        {
            "author": null,
            "body": "You are right.  I ended up stripping out the code to handle that because I \nnever got that far.  Here is the code:\n\nimport java.io.IOException;\n\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * Example servlet\n *\n */\n\npublic class Test extends HttpServlet {\n\n\tpublic void service(HttpServletRequest req, HttpServletResponse resp)\n\t\tthrows ServletException, IOException {\n\t\n\t\tServletContext sc = getServletContext();\n\t\tRequestDispatcher rd = sc.getNamedDispatcher(\"jsp\");\n\n\t\tObject attr = req.getAttribute\t\t\t\t\t\n\t            (\"javax.servlet.include.request_uri\");\n\t\t\n\t\tif (attr != null) {\n\t\t\trd.include(req, resp);\n\t\t\treq.setAttribute(\"javax.servlet.include.request_uri\", \n                            attr);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\trd.forward(req, resp);\n\t\t\t} catch (IllegalStateException e) {\n\t\t\t\trd.include(req, resp);\n\t\t\t}\n\t\t}\n\t}\n}\n\n",
            "date": "20040331T17:35:37",
            "id": 7
        }
    ],
    "component": "Jasper",
    "description": "A program I am working on is throwing an exception \njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\nfrom within\norg.apache.jasper.runtime.JspRuntimeLibrary.getContextRelativePath\n(JspRuntimeLibrary.java:963)\n\nAccording to the docs http://jakarta.apache.org/tomcat/tomcat-5.0-\ndoc/servletapi/javax/servlet/http/HttpServletRequest.html#getServletPath(), \ngetServletPath() can return an empty string which is what is happening in my \napp.  The line in question:\n\n    uri.substring(0, uri.lastIndexOf('/')) + '/' + relativePath\n\nwhere uri is an empty string is what is causing this exception to be thrown.  \nAs you can see uri.lastIndexOf is going to return -1 and uri.substring(0, -1) \njust does not work.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "28058",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "JspRuntimeLibrary.getContextRelativePath() can throw StringIndexOutOfBoundsException",
    "systemSpecification": true,
    "version": "5.0.19"
}