{
    "comments": [
        {
            "author": null,
            "body": "It also would help very much, if the JNDI Datasource HOW-TO for 5.5 would state,\nthat there was a big change in the Resource element since 5.0.\nI copied an application to 5.5 that ran fine with 5.0 and mysql.\nOn 5.5 I simply got the SQLException below which is not a fine indicator to the\nreal problem.\n\nCaused by: java.sql.SQLException: No suitable driver\n        at java.sql.DriverManager.getDriver(DriverManager.java:243)\n        at org.apache.tomcat.dbcp.dbcp.BasicDataSource.createDataSource(BasicDat\naSource.java:773)",
            "date": "20050322T23:52:48",
            "id": 0
        },
        {
            "author": null,
            "body": "Both suggestions accepted and implemented.  Thanks for submitting the patch.\n\nIn the future, please submit patches as attachments to the Bugzilla issue rather\nthan in the comments section.  Thanks ;)",
            "date": "20050326T04:17:00",
            "id": 1
        }
    ],
    "component": "Catalina",
    "description": "I struggled quite a bit defining a Postgres datasource with Tomcat, but finally\nsucceeded. To prevent the suffering of others, here are some enhancements to the\nJNDI datasource web page that should make things easier for others. Diff is\nagainst the current CVS checkout of Tomcat 5.\n\nIndex: jndi-datasource-examples-howto.xml\n===================================================================\nRCS file:\n/home/cvspublic/jakarta-tomcat-catalina/webapps/docs/jndi-datasource-examples-howto.xml,v\nretrieving revision 1.13\ndiff -u -3 -p -u -r1.13 jndi-datasource-examples-howto.xml\n--- jndi-datasource-examples-howto.xml  27 Sep 2004 16:00:31 -0000      1.13\n+++ jndi-datasource-examples-howto.xml  27 Feb 2005 05:47:12 -0000\n@@ -335,16 +335,66 @@ Connection conn = ds.getConnection();\n\n <subsection name=\"PostgreSQL\">\n <h3>0.    Introduction</h3>\n-<p>PostgreSQL is configured in a similar manner to Oracle. Again, highlighting\nthe differences.\n-These notes are untested as yet and we would appreciate feedback.</p>\n-<h3>1.    server.xml configuration</h3>\n+<p>PostgreSQL is configured in a similar manner to Oracle.\n+\n+<h3>1. Required files </h3>\n+<p>\n+Copy the Postgres JDBC jar to $CATALINA_HOME/common/lib. As with Oracle, the\n+jars need to be in this directory in order for DBCP's Classloader to find\n+them. This has to be done regardless of which configuration step you take next.\n+</p>\n+\n+<h3>2. Resource configuration</h3>\n+\n+<p>\n+You have two choices here: define a datasource that is shared across all Tomcat\n+applications, or define a datasource specifically for one application.\n+</p>\n+\n+<h4>2a. Shared resource configuration</h4>\n+<p>\n+Use this option if you wish to define a datasource that is shared across\n+multiple Tomcat applications, or if you just prefer defining your datasource\n+in this file.\n+</p>\n+<p><i>This author has not had success here, although others have reported so.\n+Clarification would be appreciated here.</i></p>\n+\n <source>\n &lt;Resource name=\"jdbc/postgres\" auth=\"Container\"\n           type=\"javax.sql.DataSource\" driverClassName=\"org.postgresql.Driver\"\n           url=\"jdbc:postgresql://127.0.0.1:5432/mydb\"\n-          username=\"myuser\" password=\"mypasswd\" maxActive=\"20\" maxIdle=\"10\"\nmaxWait=\"-1\"/>\n+          username=\"myuser\" password=\"mypasswd\" maxActive=\"20\" maxIdle=\"10\"\nmaxWait=\"-1\"/&gt;\n+\n </source>\n-<h3>2.    web.xml configuration</h3>\n+\n+<h4>2b. Application-specific resource configuration</h4>\n+\n+<p>\n+Use this option if you wish to define a datasource specific to your application,\n+not visible to other Tomcat applications. This method is less invasive to your\n+Tomcat installation.\n+</p>\n+\n+</p>\n+Create a resource definition file for your application defining the\n+datasource. This file must have the same name as your application, so if\n+your application deploys as <code>someApp.war</code>, this filename must\n+be <code>someApp.xml</code>. This file should look something like the following.\n+</p>\n+\n+<source>\n+&lt;Context path=\"/someApp\" docBase=\"someApp\"\n+   crossContext=\"true\" reloadable=\"true\" debug=\"1\"&gt;\n+\n+&lt;Resource name=\"jdbc/postgres\" auth=\"Container\"\n+          type=\"javax.sql.DataSource\" driverClassName=\"org.postgresql.Driver\"\n+          url=\"jdbc:postgresql://127.0.0.1:5432/mydb\"\n+          username=\"myuser\" password=\"mypasswd\" maxActive=\"20\" maxIdle=\"10\"\nmaxWait=\"-1\"/&gt;\n+&lt;/Context&gt;\n+</source>\n+\n+<h3>3. web.xml configuration</h3>\n <source>\n &lt;resource-ref&gt;\n  &lt;description&gt;postgreSQL Datasource example&lt;/description&gt;\n@@ -353,6 +403,28 @@ These notes are untested as yet and we w\n  &lt;res-auth&gt;Container&lt;/res-auth&gt;\n &lt;/resource-ref&gt;\n </source>\n+\n+\n+<h4>4. Accessing the datasource</h4>\n+<p>\n+When accessing the datasource programmatically, remember to prepend\n<code>java:/comp/env</code> to your JNDI lookup, as in the following snippet of\ncode. Note\n+also that \"jdbc/postgres\" can be replaced with any value you prefer, provided\n+you change it in the above resource definition file as well.\n+</p>\n\n+\n+<source>\n+InitialContext cxt = new InitialContext();\n+if ( cxt == null ) {\n+   throw new Exception(\"Uh oh -- no context!\");\n+}\n+\n+DataSource ds = (DataSource) cxt.lookup( \"java:/comp/env/jdbc/postgres\" );\n+\n+if ( cxt == null ) {\n+   throw new Exception(\"Data source not found!\");\n+}\n+</source>\n+\n </subsection>\n </section>",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "33755",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "RFE",
    "priority": "P3 enhancement",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Documentation enhancement to JNDI-Datasources-examples for Postgres",
    "systemSpecification": true,
    "version": "Nightly Build"
}