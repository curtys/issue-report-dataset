{
    "comments": [
        {
            "author": null,
            "body": "This sounds reasonable. Can you submit a tested fix ?",
            "date": "20030923T10:36:25",
            "id": 0
        },
        {
            "author": null,
            "body": "I've added the possibility to add URLs to the list. This can be local or remote\nfolders, or single local or remote JARs.\nActually, you could probably use that to run Tomcat with the binary on a remote\nserver, using only the bootstrap stuff (this is similar to webstart, I guess).",
            "date": "20030924T05:22:30",
            "id": 1
        },
        {
            "author": null,
            "body": "> This sounds reasonable. Can you submit a tested fix ?\n\nI was trying ... \nDon't throw the challenge and solve the problem the day after! :-)\nThanks.\n\n> Actually, you could probably use that to run Tomcat with the binary on a remote\n> server, using only the bootstrap stuff (this is similar to webstart, I guess).\n\nWe working on one huge application deployable on different application server.\nWe use Tomcat in the development environment, here we don't deploy anything:\nwe set tomcat classloaders to load classes from the IDE projects directories.",
            "date": "20030924T07:02:06",
            "id": 2
        },
        {
            "author": null,
            "body": "While working on building tomcat-5.0.28 and testing web apps I came across the\nsame problem. I dived into the source code and fixed the actual problem (rather\nthan using url, eg, file:///<path>/<file>.jar). Please refer to the explanation\nbelow.\n\nWhen adding a jar file (eg, \"foo/bar.jar\") to the class loader's repository it\ntreats as a directory and therefore it cannot load any classes from this jar.\nThe following explains why it happens.\n\t\n--org.apache.catalina.startup.ClassLoaderFactory-- is responsible for creating\nclass loader instances. Each instance is of\norg.apache.catalina.loader.StandardClassLoader type, which in its turn extends\njava.net.URLClassLoader:\n\njava.net.URLClassLoader\n       / | \\\n         |\n         |\norg.apache.catalina.loader.StandardClassLoader\n\t\t\n\t\n--ClassLoaderFactory#createClassLoader(File unpacked[], File packed[], URL\nurls[], ClassLoader parent)-- is the actual method that creates class loaders.\nFirst argument (ie unpacked) contains jar files or directories ( that is where\nthe name \"unpacked\" comes from ). \nSecond argument (ie packed) is a directory packed with jar files\n\t\nClassLoaderFactory#createClassLoader method adds File.separator to the end of\nthe jar file path ( file.getCanonicalPath() + File.separator ) when constructing\na URL instance to represent a jar file and then adds a string representation of\na newly created URL to its list of repositories ( list.add(url.toString()) ) :\n\t\t\t-----------------------------------------------------------------------------\nif (unpacked != null) {\n  for (int i = 0; i < unpacked.length; i++)  {\n\tFile file = unpacked[i];\n\tif (!file.exists() || !file.canRead())\n\t    continue;\n\t    if (debug >= 1)\n\t         log(\"  Including directory or JAR \" \n\t                        + file.getAbsolutePath());\n\t    URL url = new URL(\"file\", null, \n\t                       file.getCanonicalPath() + File.separator);\n\t    list.add(url.toString());\n  }\n}\n\t       \n-----------------------------------------------------------------------------\n\t        \nFor instance, if \"unpacked\" argument contains '/home/aa/lib/velocity.jar' then a\nURL object is 'file:/home/aa/lib/velocity.jar/' - a forward slash / (which is a\nUnix file separator) has been added to the url.\n\t\nAfter ClassLoaderFactory#createClassLoader adds all repositories to its\nrepository list it converts this list to array and constructs\nStandardClassLoader with it:\n\t\n\t\t-----------------------------------------------------------------------------\nString array[] = (String[]) list.toArray(new String[list.size()]);\nStandardClassLoader classLoader = null;\nif (parent == null)\n  classLoader = new StandardClassLoader(array);\n\t    -----------------------------------------------------------------------------\n\t    \nStandardClassLoader( String[] ) constructor converts each repository found in\nthe given array argument to a URL object:\n\t\t-----------------------------------------------------------------------------\nprotected static URL[] convert(String input[], URLStreamHandlerFactory factory) {\n  .....\n  url[i] = new URL(null, input[i], streamHandler);\n  .....\n}\n\t\t-----------------------------------------------------------------------------\n                                   \nFor instance, if the repositories array of String type contains\n'file:/home/aa/lib/velocity.jar/' then a URL object is\n'file:/home/aa/lib/velocity.jar/'. If the repository holds a path on Windows\nmachine then the URL object would have all backslashes  replaced all  with\nforward slashes ( URL object crated with new URL(null,\n\"file:I:\\lib\\velocity.jar\\\", streamHandler) would have\n\"file:I:/lib/velocity.jar/\" string representation ).\n    \nOnce StandardClassLoader( String[] ) converts repository array of a String type\ninto a URL type it calls its super constructor, which in fact is a\nURLClassLoader( URL[] ).\n    \nHowever, the contract for URLClassLoader( URL[] ) constructor indicates that\n\"Any URL that ends with a '/' is assumed to refer to a directory. \" and\ntherefore a jar file gets ignored by the loader.\n    \nFor instance, if the repositories array contains\n'file:/home/aa/lib/velocity.jar/' url object the URLClassLoader( URL[] )\nconstructor treats this url as a directory and therefore a jar file is never\nproperly loaded.\n    \nTherefore, a File.separator that got added to a jar file in\nClassLoaderFactory#createClassLoader method made it invalid because the actual\nclass loader assumes that this jar file is a directory.",
            "date": "20050615T02:48:42",
            "id": 3
        },
        {
            "author": null,
            "body": "Created attachment 15410\nClassLoaderFactoryWithTheFix",
            "date": "20050615T02:58:52",
            "id": 4
        },
        {
            "author": null,
            "body": "The following illustrates the proposed solution (i've also attached two files:\n\"ClassLoaderFactoryWithTheFix\" and a junit test \"ClassLoaderFactoryTest\")\n\n--ClassLoaderFactory#createClassLoader(File unpacked[], File packed[], URL\nurls[], ClassLoader parent)-- is to be modified so that it does not add\nFile.separator to the end of jar files found in the unpacked argument:\n     \n     \t-----------------------------------------------------------------------------\nif (unpacked != null) {\n  for (int i = 0; i < unpacked.length; i++)  {\n\tFile file = unpacked[i];\n\tif (!file.exists() || !file.canRead())\n\t  continue;\n\tif (debug >= 1)\n\t  log(\"  Including directory or JAR \" \n\t                        + file.getAbsolutePath());\n\t                \n\t  // THE FIX\n\t  StringBuffer filePath = new StringBuffer(file.getCanonicalPath());\n\t  if ( file.isDirectory() ) { \n\t    // Only add a file separator if a file represents a directory\n\t    filePath.append(File.separator);\n\t  }\n\t                                \n\t  URL url = new URL(\"file\", null, filePath.toString());\n\t  list.add(url.toString());\n  }\n}\t\n\t    -----------------------------------------------------------------------------",
            "date": "20050615T02:59:50",
            "id": 5
        },
        {
            "author": null,
            "body": "Created attachment 15411\nJUnit test case for the ClassLoaderFactory fix",
            "date": "20050615T03:00:49",
            "id": 6
        },
        {
            "author": null,
            "body": "Someone else submitted a fix (for 5.5) that's simply to put file: in front of\nsingle jars, but keep *.jar as-is.  That works for me, and seems a lot simpler.\n Does it work for you as well?  BTW, the version for this bug seems to be\n5.0.12, which is really old.  Please try at least 5.0.28, but preferably 5.5.9.",
            "date": "20050722T16:18:28",
            "id": 7
        }
    ],
    "component": "Catalina",
    "description": "My directory \"/X\" contains 4 jar files:\n- /X/jdbcOracle.jar\n- /X/jdbcMySQL.jar\n- /X/Xerces.jar\n- /X/Xalan.jar\n\nI updated shared.loader in catalina.properties (or common.loader, it's the same)\nvalue to see jdbc driver:\n\n- shared.loader=...default...,/X/jdbcOracle.jar,/X/jdbcMySQL.jar\n  => ClassNotFoundException: oracle.jdbc.driver.OracleDriver\n\n- shared.loader=...default...,/X/*.jar\n  => OK!",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "23344",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "P3 enhancement",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "catalina.properties don't allow to add one jar file",
    "systemSpecification": false,
    "version": "5.0.12"
}