{
    "comments": [
        {
            "author": null,
            "body": "Fixed, thanks.",
            "date": "20040902T18:52:57",
            "id": 0
        }
    ],
    "component": "Unknown",
    "description": "The org.apache.tomcat.util.log.SystemLogHandler class (source code in\njakarta-tomcat-connectors) handles, among other things, capturing of\nSystem.out and System.err so that they can be redirected to an\napplication's log file.  It makes use of another class (CaptureLog) to\nhold the captured data, and maintains a stack of unused CaptureLog\ninstances to avoid creating new ones where possible.\n                                                                                \nThis \"reuse\" stack is global to the class and it looks like the use of\nit is not thread-safe.  The startCapture() method acquires a\nCaptureLog() this way:\n                                                                                \n    if (!reuse.isEmpty()) {\n        log = (CaptureLog)reuse.pop();\n    } else {\n        log = new CaptureLog();\n    }\n                                                                                \nThere's a race between the call to isEmpty() and the call to pop().\nWe've been able to reliably elicit a java.util.EmptyStackException at\nthis point with an application under heavy load.\n                                                                                \nReplacing the above code with\n                                                                                \n    synchronized (reuse) {\n        log = reuse.isEmpty() ? new CaptureLog() : (CaptureLog)reuse.pop();\n    }\n                                                                                \neliminates the problem (with no effect on performance that we could\nobserve).\n                                                                                \nAn alternative approach might be to catch the (rare)\nEmptyStackException and treat it as equivalent to the isEmpty==true\ncase, but this seems cleaner.\n                                                                                \nThere would seem to be no need to synchronize the code that pushes\nold CaptureLog instances onto the reuse stack since java.util.Stack\nis already synchronized.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "31018",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Race condition in SystemLogHandler.java",
    "systemSpecification": true,
    "version": "5.0.28"
}