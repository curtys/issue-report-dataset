{
    "comments": [
        {
            "author": null,
            "body": "You might want to look into the code a little bit more, and see that SSO should\nget an event for all sessions of a particular webapp when it is stopped. If you\nthink there are cases where something is not properly cleaned up, then please\nsubmit a patch.",
            "date": "20050223T15:41:44",
            "id": 0
        },
        {
            "author": null,
            "body": "(In reply to comment #1 from Remy)\n> You might want to look into the code a little bit more, and see that SSO \nshould\n> get an event for all sessions of a particular webapp when it is stopped. \n\nRemy,\nOK I'm confused...  I've only just started to look at the internals of Tomcat, \nso its kind of hard to initially get my head around the codebase.\nHowever, I've been instrumenting a local copy of the 5.5.7 source with lots of \nextra logging to try to follow the logic.\n\nFrom what I can tell, the SingleSignOn is NOT notified in any way when an \napplication is undeployed.  The only mechanism I could see would be if it was \ntold when the individual sessions were expired.  So I had a look at \nsession.StandardManager, which seems to deal with persisting and expiring all \nof the sessions when an application is STOPped. However, looking at \nStandardManager.doUnload(), the look that expires the sessions calls\nsession.expire(false) - i.e. does not notify listeners, hence the SSO never \ngets told.\n\nDid I miss something obvious? (I am trying to look into the problem and help \nout here!)\n\nIn the meantime, a colleague is still fighting with the loggers and class \nloaders, but I think we can accept that is a separate issue.\n\nThanks,\n\n   Kev",
            "date": "20050224T17:11:24",
            "id": 1
        },
        {
            "author": null,
            "body": "Yes, that's a very good point about the expire(false) when a webapp is stopped.\nI didn't think about that (to be honest, I don't know the SSO code that well\neither, but looking at the code I had the impression that this was working, and\nthe problems would be caused by something else).\n\nI'll try to see if there is a way to do better cleanup, or to remove the need\nfor holding references to sessions.",
            "date": "20050224T17:56:16",
            "id": 2
        },
        {
            "author": null,
            "body": "I tried the obvious quick solution of changing expire(false) to expire(true), \nbut unfortunately that had a nasty side-effect.  If the user is logged in to a \nSSO session, and is using several web apps, then if one of those web apps is \nundeployed, their *entire* SSO is destroyed. This means they are immediately \nlogged out (of all the apps), and their next interaction with any of the other \nweb apps will force them to log in again (which is obviously not what was \nintended).\n\nI'll keep digging and trying to follow the code base.  (Out of interest, does \nall of the code have as few comments as this session/authentication stuff?)\n\nWe've downgraded our upcoming product release to a beta (and use a single \nshared log instead of per webapp logging) until we figure a way to get the SSO \nto release the ref to the classloader.\n\nThanks again, and please do let us know if you have any ideas for how to \nchange this SSO behaviour.  \nBTW - Is there a tomcat test suite I should be using so that I know if I have \nbroken anything while I look at this issue? Being new to the tomcat code, I'm \nquite wary of breaking stuff via strange side-effects.\n\nCheers,\n\nKev\n\n\n",
            "date": "20050225T12:11:06",
            "id": 3
        },
        {
            "author": null,
            "body": "I had a bit more of a look at this. Again, please be aware that I am new to \nthis code base. \n\nThe only mechanism I can see for an instance of SingleSignOn to be told that a \nWebApp has been undeployed is if it were to be told when the sessions related \nto that app were destroyed (i.e. if StandardManager.doUnload() were to be \nchanged to call expire(true) instead of expire(false)).  However, the listener \nSingleSignOn.sessionEvent(SessionEvent) assumes that it is only ever called \nfor one of two reasons - either the user logged out, or the session expired. \n\nBut what we have is a third case - one of the apps being undeployed.  \n\nNow, it seems that if we can detect the third case then the method to be \ncalled has already been implemented (if not tested)... The method \nSingleSignOn.deregister(ssoId, session) [note the 2nd param] already exists \nand looks like it is designed for the job, but I can't find anything that \ncalls it!\n\nSo the question is: How does the listener method detect the third case? I can \nthink of hacks involving overloading the expire(notify) method with an extra \nparam and using that to put some marker in the data field of the SessionEvent, \nbut I can't help but think I'm missing something obvious by not knowing the \ncode base.\n\nIdeas?\n\nKev",
            "date": "20050226T00:28:13",
            "id": 4
        },
        {
            "author": null,
            "body": "> So the question is: How does the listener method detect the third case? I \ncan \n> think of hacks involving overloading the expire(notify) method with an extra \n> param and using that to put some marker in the data field of the \nSessionEvent, \n> but I can't help but think I'm missing something obvious by not knowing the \n> code base.\n\nI can't find a cleaner way, but I have this work using the above technique.\nShould I provide a patch against the 5.5.7 src (which is what I'm using), or \ndo patch have to be against the CVS head?\nI've not looked at other managers such as Persistent / clustering etc, as I \ndon't know much about those.\n\nKev",
            "date": "20050228T18:55:12",
            "id": 5
        },
        {
            "author": null,
            "body": "Created attachment 14379\nFix session leak in SingleSignOn\n\nSince there was no answer to how you wanted the patch, I have a patch against\n5.5.7.\tIts a unified diff of everything in:\njakarta-tomcat-5.5.7-src\\jakarta-tomcat-catalina\\catalina\\src\\share\\\n\nIts pretty small - changes to 4 files:\ncatalina\\Session.java\ncatalina\\authenticator\\SingleSignOn.java\ncatalina\\session\\StandardSession.java\ncatalina\\session\\StandardManager.java\n\nRegards,\n\nKev",
            "date": "20050301T13:33:31",
            "id": 6
        },
        {
            "author": null,
            "body": "Now that 5.5.9 is released, I can look into more complex/risky issues.\n\nI see you have done a lot of research, which identifies the problem very\nclearly. However, I don't really like the proposed solution. How about simply\nsetting the manager field to null since this is the cause of the problem ?\nCalling recycle on all sessions in StandardManager.stop could do this easily.\n\nIndex: StandardManager.java\n===================================================================\nRCS file:\n/home/cvs/jakarta-tomcat-catalina/catalina/src/share/org/apache/catalina/session/StandardManager.java,v\nretrieving revision 1.28\ndiff -u -r1.28 StandardManager.java\n--- StandardManager.java\t7 Feb 2005 21:56:32 -0000\t1.28\n+++ StandardManager.java\t29 Mar 2005 12:32:32 -0000\n@@ -670,12 +670,16 @@\n         Session sessions[] = findSessions();\n         for (int i = 0; i < sessions.length; i++) {\n             StandardSession session = (StandardSession) sessions[i];\n-            if (!session.isValid())\n-                continue;\n             try {\n-                session.expire();\n+                if (session.isValid()) {\n+                    session.expire();\n+                }\n             } catch (Throwable t) {\n                 ;\n+            } finally {\n+                // Measure against memory leaking if references to the session\n+                // object are kept in a shared field somewhere\n+                session.recycle();\n             }\n         }\n \n",
            "date": "20050329T14:35:05",
            "id": 7
        },
        {
            "author": null,
            "body": "Created attachment 14584\nCall recycle on all sessions (passivated or expired) on stop",
            "date": "20050329T16:39:42",
            "id": 8
        },
        {
            "author": null,
            "body": "(In reply to comment #8)\nHi Remy,\nThanks for coming back to this issue - the memory profile of Tomcat during\nrepeated web application deploy/undeploy/redeploy cycles on PRODUCTION (no \ndev) servers is a big issue for us.  Your efforts are much appreciated.\n\n> Now that 5.5.9 is released, I can look into more complex/risky issues.\n\nIs there a long gap expected then before a 5.5.10?  Currently I think we're \nshipping a modified 5.5.7 (last stable, plus patches - all noted in bugzilla).\n\n> I see you have done a lot of research, which identifies the problem very\n> clearly. However, I don't really like the proposed solution. How about simply\n> setting the manager field to null since this is the cause of the problem ?\n> Calling recycle on all sessions in StandardManager.stop could do this easily.\n\nMaybe BOTH approaches are required?  I don't have my test setup from back when \nI was looking at this now, but doesn't your proposed solution still leave a \nreference to the (now recycled) session object in the reverse map in \nSingleSignOn?\n\nI could be missing something - its been a while since we looked at this \nparticular problem.\n\n[off topic 1] At the time I was evaluating a commercial memory profiling tool -\n do you have any recommendations?\n\n[off topic 2] Any chance of eclipse .project and .classpath files shipping in \nthe source distribution? \n\nThanks,\n\nKev\n\n\n\n",
            "date": "20050330T12:25:38",
            "id": 9
        },
        {
            "author": null,
            "body": "To be honest, I am not actually interested in fixing your particular problem. I\nwas thinking first about the generic problem where references to sessions are\nkept for some reason by any component. So the feedback I was most interested in\nis: does this fix the reference leak to the classloader ?\n\nThe design flaw is then in the SSO reverse map if you want to avoid leaking\nskeleton objects. One easy solution might be to change it to a WeakHashMap.\n\nI do not have a good memory profiler to recommend (I don't like any at the moment).",
            "date": "20050330T13:41:59",
            "id": 10
        },
        {
            "author": null,
            "body": "You might want to give the memory profiler in NetBeans 4.x a try.\n\nOptimizeIt has some advantages over this, but NetBeans is free and OptimizeIt...\nisn't.",
            "date": "20050330T14:18:46",
            "id": 11
        },
        {
            "author": null,
            "body": "Created attachment 14593\nAlways recycle sessions; add activate/passivate events and use passivate for SSO",
            "date": "20050330T15:03:57",
            "id": 12
        },
        {
            "author": null,
            "body": "New cumulative patch now addressing the SSO problem. Please test it (and fix it\nif there are problems).",
            "date": "20050330T15:08:05",
            "id": 13
        },
        {
            "author": null,
            "body": "I think this has been fixed. Too bad there's no feedback.",
            "date": "20050405T11:56:23",
            "id": 14
        },
        {
            "author": null,
            "body": "(In reply to comment #15)\n> I think this has been fixed. Too bad there's no feedback.\n\nI'm looking to verify this this week.  Looks good so far but didn't want to \nsay yes until I'm certain.\n\nK.",
            "date": "20050405T13:32:16",
            "id": 15
        },
        {
            "author": null,
            "body": "I had a another look into this, and seems better, but I'm not completely \nconvinced that it is entirely fixed.  I can't pin down exactly what is \nhappening, but looks like the very first deployment does not fully undeploy \n(release all references), but subsequent cycles appear to work correctly.  The \nreason it is odd is because after the first cycle my profiler does not list \nmy \"BigServlet\" class, but the 20MB it allocates never appears to be released \n(but for each later cycle the graph shows their heap allocations are released).\n\nSo, sorry but I can't really give a definite answer.  Yes it is a big \nimprovement, but no I can't say it is entirely fixed.\n\nMy cycle is:\n1) visit some application that does a sign-in for SSO\n2) use the manager to list the apps\n3) memory profiler snapshot\n4) drop a leak.war in the web apps folder (auto deploy)\n5) visit leak with a browser\n6) undeploy leak using manager web app\n7) repeat from 2 several times, and compare snaphots as well as graphing \nvarious memory stats and heap, etc.\n\nThanks for all the efforts!\n\nKev\n",
            "date": "20050406T16:43:07",
            "id": 16
        },
        {
            "author": null,
            "body": "What did you test exactly (CVS version ?) ? Still using log4j for everything ?\nDo you have any idea on where the reference to the classloader would be kept ?",
            "date": "20050406T17:37:10",
            "id": 17
        },
        {
            "author": null,
            "body": "(In reply to comment #18)\n> What did you test exactly (CVS version ?) ? Still using log4j for \neverything ?\n> Do you have any idea on where the reference to the classloader would be \nkept ?\n\nI updated to CVS head just after you committed the changes (31/3 maybe? can't \nremember).\n\nThe content of my test WAR is:\n>jar -ft leak.war\nindex.jsp\nMETA-INF/context.xml\nMETA-INF/MANIFEST.MF\nMETA-INF/\nWEB-INF/classes/\nWEB-INF/classes/BigServlet.class\nWEB-INF/lib/\nWEB-INF/lib/commons-logging.1.0.3.jar\nWEB-INF/lib/log4j.1.2.8.jar\nWEB-INF/web.xml\nWEB-INF/\n\n\nContext.xml is simply:\n<Context antiResourceLocking=\"true\" antiJARLocking=\"true\" >\n</Context>\n\n\nBigServlet simply has a static byte[] to allocate 20MB, initialised in the init\n() method, and also logs a message.\nWeb.xml simply specifies it is loaded on startup, and that everything in the \nweb app required the user to be in a given role.  The JSP simply displays the \nremoteUser and SessionID.\n\n[Note: this configuration above is just for my test web app and we try to work \naround it.  For production we include the Log4J jar only in our web app, and \nthen use separate jdk logging for anything that is done through commons-\nlogging.]\n\nAs for ideas as to what is holding the reference, no I don't have ideas.  The \nprofiler I'm currently evaluating isn't helping me there :-(  The best I used \nso far (and was using back when I first reported) was YourKit4.0, but my eval \nhas expired.\n\nK.",
            "date": "20050406T17:58:11",
            "id": 18
        }
    ],
    "component": "Catalina",
    "description": "We have detected a situation where Tomcat will leak memory when web \napplications are undeployed.\n\nSpecifically, when the following 3 conditions are met:\na) SingleSignOn valve is used\nb) the web app requires the user to be authenticated to get a session\nc) the web app contains commons-logging.jar *and* log4j.jar\n\nThis has been observed with Tomcat 5.5.7\n\nSimply deploy a web app under the above conditions, visit the web app so\nthat a session for that app is stored in the SingleSignOn data structures,\nthen undeploy the web app.  At this point tomcat leaks a reference to the\nclass loader for the undeployed web app.  Repeat, and eventually this will\ncause OutOfMemoryError.\n\nWhat happens is that an instance of StandardSession is stored as a key \nin the \"reverse\" HashMap of SingleSignOn. The instance of StandardSession \nalso refers to an instance of StandardManager in its \"manager\" field.\nThe classes for the SingleSignOn, StandardSession and StandardManager all \nappear to be loaded by the \"catalina\" StandardClassLoader.\n\nHowever, (and I think this is where the leak happens), the \"log\" field\nof the StandardManager refers to an instance of:\norg.apache.commons.logging.impl.Log4JLogger\n\nThat Log4JLogger class is loaded by the WebAppClassLoader for our web\napp, hence making a hard reference to that class loader.\n\nWhen the web application is undeployed, the hard reference to the dead\nclassloader remains in the data structures of SingleSignOn.  I think it\nonly gets cleaned up when the session is terminated.\n\nThis has lead to exhaustion of the PermGen for our applications, where\nit is quite normal to create/deploy/undeploy web applications in \nproduction (not just during development).\n\nI can supply a very simple web-app to demonstrate this effect if required.\n\nNot sure if this is one bug, or several:\n1) Why is the logger loaded from the web app class loader?\n2) Why does the SingleSignOn mechanism not remove ALL sessions for ALL users\nrelated to a given web app when the web app is undeployed.\n\n\nAny ideas for fixes for this?  (Its seriously delaying a product release \nat present.)\n\nMany thanks,\n\n\tKev",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "33711",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Memory leak (classloader) with Log4J and Single Sign On.",
    "systemSpecification": true,
    "version": "5.5.9"
}