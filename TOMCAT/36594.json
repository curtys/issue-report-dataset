{
    "comments": [
        {
            "author": null,
            "body": "Created attachment 16353\nPatched version of ResourceCache.java (full text)\n\nThis file contains the full source including the patches.  Each patch has a\ncomment describing it.\tIt should be evident using diff.  If you need anything\nelse, or further explanation, please let me know.",
            "date": "20050910T21:37:28",
            "id": 0
        },
        {
            "author": null,
            "body": "This seems like a good patch, but you should submit diffs rather than full files.",
            "date": "20050911T18:49:33",
            "id": 1
        },
        {
            "author": null,
            "body": "Thanks.  I'll submit diffs as well tomorrow.  I'm not near the code presently.",
            "date": "20050911T21:46:47",
            "id": 2
        },
        {
            "author": null,
            "body": "(In reply to comment #3)\n> Thanks.  I'll submit diffs as well tomorrow.  I'm not near the code presently.\n\nThat should be ok, it's just that it's much easier to work with.",
            "date": "20050911T21:53:44",
            "id": 3
        },
        {
            "author": null,
            "body": "I applied the patch. Thanks a lot since it would have been impossible to debug\nwithout knowing the exact usage.\n\nThe case where insertCache \"fails\" because the entry is already present is a\nrace condition on allocate and insert, so it would be best if another lookup\nunder sync should be performed before trying (to avoid the uneeded allocate):\n\nIndex: ProxyDirContext.java\n===================================================================\nRCS file:\n/home/cvs/jakarta-tomcat-catalina/catalina/src/share/org/apache/naming/resources/ProxyDirContext.java,v\nretrieving revision 1.18\ndiff -u -r1.18 ProxyDirContext.java\n--- ProxyDirContext.java\t20 Jul 2005 21:25:18 -0000\t1.18\n+++ ProxyDirContext.java\t12 Sep 2005 10:43:35 -0000\n@@ -1596,7 +1596,7 @@\n         // Add new entry to cache\n         synchronized (cache) {\n             // Check cache size, and remove elements if too big\n-            if (cache.allocate(entry.size)) {\n+            if ((cache.lookup(name) == null) && cache.allocate(entry.size)) {\n                 cache.load(entry);\n             }\n         }\n",
            "date": "20050912T12:56:51",
            "id": 4
        },
        {
            "author": null,
            "body": "Thanks for the rapid response.  Will this fix be present in any future Tomcat \n5.0.x releases as well?  Any chance of getting this?",
            "date": "20050912T18:26:36",
            "id": 5
        }
    ],
    "component": "Catalina",
    "description": "Under sustained high loads (100-200 requests per sec) over 12+ hour periods we\nwere regularly hitting a situation where all of the serving threads would be\nblocked except for one thread looping infinitely in\norg.apache.naming.resources.ResourceCache#allocate().\n\nAfter quite a bit of effort, we tracked this down to a number of minor bugs in\nthe ResourceCache code, two having to do with the cacheSize accounting, and one\nto do with an off-by-one error in the range of the random generation of an index\nto consider for freeing.\n\nWe've created a local patch, and we've verified that this fixes the issue for\nus, actually monitoring the correctness of the cacheSize accounting.  I will be\nattaching a patched source for ResourceCache.java.  Please consider\nincorporating these fixes into subsequent revisions.  The bug appears both in\nTomcat 5.0.30 and the latest trunk code.\n\nAnil Gangolli (anil@busybuddha.org / gangolli@apache.org)",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "36594",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P2 major",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Hang (infinite loop) in ResourceCache under high load",
    "systemSpecification": false,
    "version": "5.5.9"
}