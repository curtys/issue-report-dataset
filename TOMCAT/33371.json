{
    "comments": [
        {
            "author": null,
            "body": "Since you're looking for design flaws, two which are rather obvious are:\n- doing explicit flushes is inefficient\n- wrapping with your own writer is equally inefficient\nWhen these are fixed, we can think about doing minor tweaking. I think there's\nnot that much value in reporting exceptions to the servlet, however.\n\nWith he HTTP connector, the connection is marked as error, and the connection\nwill be closed. Please do not open multiple issues.",
            "date": "20050202T22:21:41",
            "id": 0
        },
        {
            "author": null,
            "body": "Remy,\n\nI am not sure what you mean by that. Shouldn't - in this case - the AXIS servlet\nhave a chance to know that sending the SOAP package has failed?\n\nAlso, I assume the flush() is called at the end of the writeTo() method, is this\nwhat you refer to or the code in the middle with the doFlush etc.?\n\nLars",
            "date": "20050202T23:13:20",
            "id": 1
        },
        {
            "author": null,
            "body": "I looked at the HTTP implementation, and it handles the case (I had forgotten\nabout that). It is better to send the servlet an exception. The exception has to\nbe caught at some point and rewrapped, so the signature of action doesn't matter.",
            "date": "20050202T23:43:16",
            "id": 2
        },
        {
            "author": null,
            "body": "OK, sounds good.\n\nWhat did you mean by \"do not open multiple issues\" in your initial comment?",
            "date": "20050202T23:52:22",
            "id": 3
        },
        {
            "author": null,
            "body": "I did sound like the issues were basically the same.",
            "date": "20050203T00:59:36",
            "id": 4
        },
        {
            "author": null,
            "body": "It looks to me like an IOException should be being thrown back to the \nservlet.  Just after sendHeaders returns normally (as it must, since \nActionHook.action can't throw), JkCoyoteHandler.doWrite will attempt to send \nthe response body, causing ChannelSocket.send to throw an IOException again, \nwhich will be caught, wrapped, and rethrown by OutputBuffer.realWriteBytes.  \nThis one gets sent back to the servlet to deal with.  \n\nGranted, exception handling could be cleaned up a bit, and Jk-Coyote could \nclose the connection a bit sooner.  However, neither of these should be \ncausing major problems.\n\n",
            "date": "20050203T02:54:39",
            "id": 5
        },
        {
            "author": null,
            "body": "As long as setErrorException is set on the response, the exception will be\nrethrown to the servlet, so it should be ok then.",
            "date": "20050203T09:36:28",
            "id": 6
        }
    ],
    "component": "Connector:Coyote",
    "description": "Hi,\n\nThere is a problem with mod_jk and Tomcat under high load that causes slots to\nbe kept by Apache even though the backend Tomcat links has gone down. This is\ncaused by too eager user aborts, ie. where you have web clients that abort the\nconnection by just closing it. You get a broken pipe on the Tomcat side and\neventually that is cleared out - since under less traffic this is not an issue.\nNow consider that you get hammered with requests and many are aborted, ie. out\nof 30 per seconds 10 are aborted. \n\nThere are two issues with that, both I will list as separate reports:\n\n1. Reporting errors to user code\n2. Closing connections\n\nWe use Apache/2.0.52 (Unix) mod_ssl/2.0.52 OpenSSL/0.9.7d mod_jk/1.2.6 and\nTomcat 5.0.28\n\nThis report is for problem #1 above. \n\nConsider this error taken from the catalina.out:\n\nNov 30, 2004 2:51:17 PM org.apache.jk.server.JkCoyoteHandler action\nSEVERE: Error in action code\njava.net.SocketException: Broken pipe\n    at java.net.SocketOutputStream.socketWrite0(Native Method)\n    at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)\n    at java.net.SocketOutputStream.write(SocketOutputStream.java:136)\n    at org.apache.jk.common.ChannelSocket.send(ChannelSocket.java:508)\n    at org.apache.jk.server.JkCoyoteHandler.appendHead(JkCoyoteHandler.java:401)\n    at org.apache.jk.server.JkCoyoteHandler.action(JkCoyoteHandler.java:416)\n    at org.apache.coyote.Response.action(Response.java:182)\n    at org.apache.coyote.Response.sendHeaders(Response.java:374)\n    at org.apache.jk.server.JkCoyoteHandler.doWrite(JkCoyoteHandler.java:230)\n    at org.apache.coyote.Response.doWrite(Response.java:542)\n    at org.apache.coyote.tomcat5.OutputBuffer.realWriteBytes(OutputBuffer.java:368)\n    at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:398)\n    at org.apache.coyote.tomcat5.OutputBuffer.doFlush(OutputBuffer.java:318)\n    at org.apache.coyote.tomcat5.OutputBuffer.flush(OutputBuffer.java:297)\n    at\norg.apache.coyote.tomcat5.CoyoteOutputStream.flush(CoyoteOutputStream.java:85)\n    at sun.nio.cs.StreamEncoder$CharsetSE.implFlush(StreamEncoder.java:410)\n    at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:152)\n    at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:213)\n    at java.io.BufferedWriter.flush(BufferedWriter.java:230)\n    at org.apache.axis.Message.writeTo(Message.java:441)\n    at\norg.apache.axis.transport.http.AxisServlet.sendResponse(AxisServlet.java:1018)\n    at org.apache.axis.transport.http.AxisServlet.doPost(AxisServlet.java:895)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:709)\n    at\norg.apache.axis.transport.http.AxisServletBase.service(AxisServletBase.java:339)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n    at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237)\n    at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157)\n    at\norg.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:704)\n    at\norg.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:474)\n    at\norg.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:409)\n    at\norg.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)\n    at\ncom.worldlingo.servlet.MSOfficeApi11Servlet.service(MSOfficeApi11Servlet.java:67)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n    at\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:237)\n    at\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:157)\n    at\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:214)\n    at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104)\n    at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520)\n    at\norg.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:198)\n    at\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:152)\n    at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104)\n    at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:137)\n    at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:118)\n    at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:102)\n    at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520)\n    at\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n    at\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:104)\n    at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:520)\n    at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:929)\n    at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160)\n    at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:300)\n    at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:374)\n    at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:774)\n    at org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:691)\n    at org.apache.jk.common.SocketConnection.runIt(ChannelSocket.java:897)\n    at\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683)\n    at java.lang.Thread.run(Thread.java:534) \n\nThe bug here - or rather design flaw - is that the user code will never know\nwhat happened and log this as a successful response. Why? Because this line\n\n    at org.apache.jk.common.ChannelSocket.send(ChannelSocket.java:508)\n\nthrow the exception but this line:\n\n    at org.apache.jk.server.JkCoyoteHandler.action(JkCoyoteHandler.java:416)\n\nswallows the exception, which means, the calling code never knows that an IO\nexception was thrown. The flaw ist that the action() method does not pass on the\nexception, ie. it should be declared \n\n    public void action(ActionCode actionCode, Object param) throws IOException { ...\n\njust like the send() call. This also applies to the matching action() method of \n\n    org.apache.coyote.Response\n\nThe JKCoyoteHandler.doWrite() declares the IOException and passes it on. So that\npart is OK. \n\nEspecially with the SOAP calls like in the example above, where you have small\nmessages, it may happen the the whole message is written out in the flush() call\nto the stream nd if that error is just logged but not reported, the servlet will\nnever know.\n\nRegards,\n\nLars George, CTO\nWorldLingo",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "33371",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "P2 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Errors are not reported to user code (servlets).",
    "systemSpecification": false,
    "version": "5.0.28"
}