{
    "comments": [
        {
            "author": null,
            "body": "Sorry for the trouble. The problem must have been with my keystore. I have tested this again and could \nnot replicate it.",
            "date": "20051117T18:30:00",
            "id": 0
        }
    ],
    "component": "Connector:HTTP",
    "description": "Using this connector definition\n\n    <!-- Define a SSL HTTP/1.1 Connector on port 7403 -->\n    <Connector port=\"7403\" maxHttpHeaderSize=\"8192\"\n               maxThreads=\"150\" minSpareThreads=\"25\" maxSpareThreads=\"75\"\n               enableLookups=\"false\" disableUploadTimeout=\"true\"\n               acceptCount=\"100\" scheme=\"https\" secure=\"true\"\n               clientAuth=\"true\" sslProtocol=\"TLS\" keystoreFile=\"conf/keystore\" \n               keystorePass=\"XXXXXX\" truststoreFile=\"conf/keystore\" \n               keyAlias=\"certificate.qa\" />\n\nTomcat throws this exception upon startup.\n\nNov 16, 2005 9:07:18 AM org.apache.catalina.startup.Catalina start\nSEVERE: Catalina.start: \nLifecycleException:  Protocol handler start failed: java.io.IOException: Alias n\name certificate.qa does not identify a key entry\n        at org.apache.catalina.connector.Connector.start(Connector.java:1003)\n        at org.apache.catalina.core.StandardService.start(StandardService.java:4\n59)\n        at org.apache.catalina.core.StandardServer.start(StandardServer.java:683\n)\n        at org.apache.catalina.startup.Catalina.start(Catalina.java:537)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.\njava:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces\nsorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:271)\n        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:409)\n        \nYet a keytool -list shows that the alias specified is, indeed, valid\n\nKeystore type: jks\nKeystore provider: SUN\n\nYour keystore contains 6 entries\n\n   certificate, Nov 1, 2005, keyEntry,\n   Certificate fingerprint (MD5): 65:5B:79:54:E5:83:D0:81:9D:AD:F9:C1:5C:65:BF:3D\n   ipgrootca, Nov 1, 2005, trustedCertEntry,\n   Certificate fingerprint (MD5): 49:5A:FC:06:6B:04:7C:F7:96:6F:90:1C:E1:91:79:77\n   certificate.prod, Nov 11, 2005, keyEntry,\n   Certificate fingerprint (MD5): 3C:9E:3D:30:B0:7E:65:B1:A2:0E:8C:0A:22:E4:FA:69\n   certificate.dev, Nov 1, 2005, keyEntry,\n   Certificate fingerprint (MD5): 84:31:D2:DF:1C:28:D6:81:43:1A:D9:57:47:6E:67:AB\n   zap2itlabsca, Nov 1, 2005, trustedCertEntry,\n   Certificate fingerprint (MD5): C3:E3:EE:9D:6C:5C:DF:E3:F9:94:8B:9B:5E:C5:58:16\n>> certificate.qa, Nov 11, 2005, keyEntry,\n>> Certificate fingerprint (MD5): 8A:EF:CF:2C:B6:D8:B5:4D:AB:40:0A:C6:9B:9F:E6:FC\n\n\nThe problem is at line 142 of the file JSSE14SocketFactory.java:\n\n        if (keyAlias != null && !ks.isKeyEntry(keyAlias)) {\n            throw new IOException(sm.getString(\"jsse.alias_no_key_entry\", keyAlias));\n        }\n\nI don't believe that isKeyEntry() is correct test in this case. I changed line 142 to read\n\n        if (keyAlias != null && !ks.containsAlias(keyAlias)) {\n            throw new IOException(sm.getString(\"jsse.alias_no_key_entry\", keyAlias));\n        }\n\nAnd compiled a new tomcat-util.jar. My tomcat instance started and selected the proper\ncertificate.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "37530",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "IOException on startup when a \"keyAlias\" attribute is specified",
    "systemSpecification": false,
    "version": "5.5.9"
}