{
    "comments": [
        {
            "author": null,
            "body": "Created attachment 9725\nwebapp to reproduce the bug",
            "date": "20031229T10:32:12",
            "id": 0
        },
        {
            "author": null,
            "body": "The session timeout in Tomcat seems to be implemented in a way that doesn't take\nthe background clean-up thread into account.\n\nStandardSession has two variables:\nthisAccessedTime - the time for current request\nlastAccessedTime - the time for last request (needed by\nHttpSession.getLastAccessedTime)\n\nThe times are updated only once per request by the container so that\nHttpSession.getLastAccessedTime() returns the time of the previous request. The\nsame variable is later used by the background thread to determine if the session\nshould be invalidated. Therefore the background cleanup thread checks the access\ntime of the _second_ latest request. This explains why 1 min refresh period\nworks with 3 min timeout while 2min refresh period does not. Isn't it possible\nthat the session could even be invalidated while processing a request?\n\nQuick'n'dirty fix would be as follows:\n======\ndiff -u -b -r1.26 StandardSession.java\n--- StandardSession.java        29 Nov 2003 18:06:35 -0000      1.26\n+++ StandardSession.java        30 Dec 2003 12:52:44 -0000\n@@ -584,7 +584,7 @@\n\n         if (maxInactiveInterval >= 0) {\n             long timeNow = System.currentTimeMillis();\n-            int timeIdle = (int) ((timeNow - lastAccessedTime) / 1000L);\n+            int timeIdle = (int) ((timeNow - thisAccessedTime) / 1000L);\n             if (timeIdle >= maxInactiveInterval) {\n                 expire(true);\n             }\n======\n\nMore elaborate way would be to cache the lastAccessedTime in the\nhttpsessionfacade and update the StandardSession.lastAccessedTime directly w/o\nthe thisAccessedTime in between. I could write the more elaborate\npatch if someone is willing to commit it.\n\nPlease comment.\n",
            "date": "20031230T14:29:13",
            "id": 1
        },
        {
            "author": null,
            "body": "I have applied the patch, since I couldn't see any problem with it.",
            "date": "20031231T21:25:38",
            "id": 2
        }
    ],
    "component": "Catalina",
    "description": "Sessions expire even if they are accessed within the specified timeout\ninterval.  In our application it breaks application logic. I think that\nbug report #20083 refers to this problem and offers a fix.\n\nTo reproduce:  Use the two files SessionTimeoutBug.java and web.xml to create\nand deploy the bug-reproduction webapp, than direct browser to \nhttp://yourserver:8080/bug/SessionBugDemo, hit the URL on the page and wait for\ntimeouts.  The \"interval\" context parameter in web.xml defines an activity\ninterval in seconds and is set to 120 (every 120 seconds the browser sends a\n\"get\" request to the server). The \"session-timeout\" config parameter is set to\n3 minutes. Setting \"interval\" to 60 or lower shows a situation where the bug\nhas no effect.  \n\nActual result:  The first refresh behaves correctly (as the 120-second\ninterval falls within the 3 minutes timeout period) and the resulting history\npage shows that the session is alive. The second refresh causes start of a new\nsession, and the webapp start-page is displayed instead of the session history \npage.  When \"interval\" is set to 60, however, the history page is displayed \nrepeatedly, meaning that in this case the session never times out.\n\nExpected result:  that the session would never time out for any \"interval\" which\nis lower or equal to \"session-timeout\" (in this example - any interval up to\n180 seconds). The history page should continue to be displayed and evolve, and\nthe start-page should not be displayed after the demo app has begun.\n\nI used the downloaded binaries of 5.0.16.\n\n---------------------------- SessionTimeoutBug.java ----------------------\n\nimport java.io.*;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.util.*;\n\n\npublic class SessionTimeoutBug extends HttpServlet {\n  private int interval = 0;\n\n  public void init (ServletConfig config) throws ServletException {\n    ServletContext context = config.getServletContext ();\n    String str = context.getInitParameter (\"interval\");\n\n    try {\n      if (str != null) {\n        interval = Integer.parseInt (str);\n      }\n\n      if (interval < 0) {\n        interval = 0;\n      }\n    } catch (NumberFormatException e) {\n      interval = 0;     // no refresh\n    }\n  }\n\n\n  public void doGet (HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n\n    HttpSession session = request.getSession (true);\n    String history = (String) session.getAttribute (\"history\");\n    String url = response.encodeURL (request.getRequestURI ());\n\n    if (history == null) {\n      genFirstPage (response, session, url);\n    } else {\n      genPage (response, session, url);\n    }\n  }\n\n\n  private void genFirstPage (HttpServletResponse response,\n                                         HttpSession session, String url)\n  throws IOException, ServletException {\n\n    session.setAttribute (\"history\", \"\");\n\n    PrintWriter out = response.getWriter ();\n    out.println (\"<html>\");\n    out.println (\"<head>\");\n    out.println (\"<title>Session Timeout Bug Demonstration</title>\");\n    out.println (\"</head>\");\n    out.println (\"<body>\");\n    out.println (\"To start demo click <a href=\\\"\" + url + \"\\\">here</a>.\");\n    out.println (\"</body>\");\n    out.println (\"</html>\");\n    out.close ();\n  }\n\n\n\n\n  private void genPage (HttpServletResponse response,\n                                         HttpSession session, String url)\n  throws IOException, ServletException {\n\n    String history = (String) session.getAttribute (\"history\");\n    history = history + \"<BR>Time = \" + (new Date ());\n    session.setAttribute (\"history\", history);\n\n    PrintWriter out = response.getWriter ();\n    out.println (\"<html>\");\n    out.println (\"<head>\");\n    out.println (\"<title>Session Timeout Bug Demonstration</title>\");\n\n    out.println (\"<meta http-equiv=\\\"refresh\\\" content=\\\"\" + interval + \";\" + \nurl + \"\\\">\");\n\n    out.println (\"</head>\");\n    out.println (\"<body>\");\n    out.println (\"<B>Refresh history: </B>\" + history);\n    out.println (\"<br>\");\n    out.println (\"<br><b>Session timeout is: </b>\" + \nsession.getMaxInactiveInterval() + \" seconds.\");\n    out.println (\"<br><b>Next refresh in: </b>\" + interval + \" seconds.\");\n    out.println (\"</body>\");\n    out.println (\"</html>\");\n    out.close ();\n  }\n\n}\n\n\n---------------------------- web.xml ----------------------\n\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application \n2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\">\n\n<web-app>\n\n    <!-- General Description of the web application -->\n\n    <display-name>\n        Session Timeout Bug Demonstration Web Application\n    </display-name>\n    <description>\n        Session Timeout Bug Demonstration Web Application\n    </description>\n\n\n    <!-- Context Parameters -->\n\n    <context-param>\n        <param-name>interval</param-name>\n        <param-value>120</param-value>\n    </context-param>\n\n\n\n    <!-- Servlet Definitions -->\n\n    <servlet>\n        <servlet-name>SessionTimeoutBugDemonstration</servlet-name>\n        <servlet-class>SessionTimeoutBug</servlet-class>\n    </servlet>\n\n\n    <!-- Servlet Mapping -->\n\n    <servlet-mapping>\n        <servlet-name>SessionTimeoutBugDemonstration</servlet-name>\n        <url-pattern>/SessionBugDemo</url-pattern>\n    </servlet-mapping>\n\n\n    <!-- Session Timeout Definition -->\n\n    <session-config>\n        <session-timeout>3</session-timeout>\n    </session-config>\n\n</web-app>\n\n\n------------------------------------ END ------------------------------------",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "25792",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 major",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Session timeout implemented incorrectly",
    "systemSpecification": true,
    "version": "5.0.16"
}