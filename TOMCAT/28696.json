{
    "comments": [
        {
            "author": null,
            "body": "Fixed in CVS.\n\nBTW, can't locate the quote of the spec in page 3-17 of JSP 2.0 Final, though it\nis in http://java.sun.com/dtd/jspxml.xsd.\n\nI'll forward your comment about JSP XML schema to JSP spec leads.  Thanks.",
            "date": "20040512T01:26:00",
            "id": 0
        }
    ],
    "component": "Jasper",
    "description": "It seems that Jasper is a bit strict about attributes on an XML JSP root\nelement.  Example JSP (same JSP causing stack trace listed below):\n\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <!-- $Id$ -->\n  <jsp:root xmlns:jsp=\"http://java.sun.com/JSP/Page\"\n            version=\"2.0\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n            xsi:schemaLocation=\"http://java.sun.com/JSP/Page\nhttp://java.sun.com/dtd/jspxml.xsd\">\n  </jsp:root>\n\nThese attributes seem to be perfectly valid, page 3-17 of the JSP 2.0\nspecification (also in http://java.sun.com/dtd/jspxml.xsd) has this annotation\nabout the root element:\n\n  <xsd:element name = \"root\">\n    <xsd:annotation>\n      <xsd:documentation>\n        The root element of all JSP documents is named root.\n        \n        Authors may, if they wish, include schema location information.\n        If specified, the information may appear as attributes of\n        the root element as follows:\n\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://java.sun.com/JSP/Page xsd-file-location\"\n\n        Documents should not specify the system identifier of a DTD\n        in a DOCTYPE declaration.\n      </xsd:documentation>\n    </xsd:annotation>\n    ...\n\nThe reason I am using (or trying to use) XMLSchema-instance is that it seems to\nbe the only way to trigger Ant's xmlvalidate task to perform XML Schema\nvalidation (perhaps the only way to trigger Xerces to perform Schema validation,\nnot just xmlvalidate).  It's probably absurd for me to think that my build\nscripts will be able to validate real-world JSPs, but I'm one of those pedantic\nsorts of people, I dream of the day that an IDE (emacs!) can resolve all XML\nnamespaces into schemas, possibly JSP tag libraries into schema-like metadata\n(perhaps a plug-in for Xerces) and hack away happily without having 5 browser\ntabs and 2 PDFs open jumping back and forth.\n\n\nFull stack trace:\n\n2004-04-29 13:34:36 StandardWrapperValve[jsp]: Servlet.service() for servlet jsp\nthrew exception\norg.apache.jasper.JasperException: /index.jspx(6,96) Jsp:root has invalid\nattribute: xsi:schemaLocation\n\tat\norg.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:83)\n\tat org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:402)\n\tat org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:236)\n\tat org.apache.jasper.compiler.JspUtil.checkAttributes(JspUtil.java:348)\n\tat org.apache.jasper.compiler.Validator$ValidateVisitor.visit(Validator.java:432)\n\tat org.apache.jasper.compiler.Node$JspRoot.accept(Node.java:554)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2180)\n\tat org.apache.jasper.compiler.Node$Visitor.visitBody(Node.java:2230)\n\tat org.apache.jasper.compiler.Node$Visitor.visit(Node.java:2236)\n\tat org.apache.jasper.compiler.Node$Root.accept(Node.java:485)\n\tat org.apache.jasper.compiler.Node$Nodes.visit(Node.java:2180)\n\tat org.apache.jasper.compiler.Validator.validate(Validator.java:1518)\n\tat org.apache.jasper.compiler.Compiler.generateJava(Compiler.java:247)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:456)\n\tat org.apache.jasper.compiler.Compiler.compile(Compiler.java:439)\n\tat org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:553)\n\tat org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:291)\n\tat org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:301)\n\tat org.apache.jasper.servlet.JspServlet.service(JspServlet.java:248)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:856)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:284)\n\tat\norg.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:204)\n\tat\norg.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:257)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:567)\n\tat\norg.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:245)\n\tat\norg.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:567)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:184)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:164)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:149)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:567)\n\tat\norg.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:156)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:151)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:578)\n\tat\norg.apache.catalina.core.StandardValveContext.invokeNext(StandardValveContext.java:149)\n\tat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:567)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:972)\n\tat org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:206)\n\tat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:833)\n\tat\norg.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:732)\n\tat org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:619)\n\tat\norg.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:688)\n\tat java.lang.Thread.run(Thread.java:534)\n\n\n\nIn case your're curious (or someone at Sun is looking), Sun has bugs with their\nJSP XML Schema, first off the one they've copied into the JSP 2.0 spec is really\nthe 1.2 XSD.  They don't seem to have a JSP 2.0 XSD anywhere.  The 1.2 XSD is\nlocked into version=\"1.2\" (very easy to change when using a Catalog and a local\ncopy of the XSD).  Finally a regular expression in the XSD is broken (also easy\nto fix as Xerces reports it in plain english!).  Here's the output of xmlvalidate:\n\n  [xmlvalidate] /dtd/jspxml.xsd:238:42: InvalidRegex: Pattern value\n'[A-Za-z0-9_-]*/[A-Za-z0-9_-]*(;\\s*(charset=)?[A-Za-z0-9_-]*)?' is not a valid\nregular expression. The reported error was: ''-' is an invalid character range.\nWrite '\\-'.'.\n  [xmlvalidate] /dtd/jspxml.xsd:249:42: InvalidRegex: Pattern value\n'[A-Za-z0-9_-]*/[A-Za-z0-9_-]*' is not a valid regular expression. The reported\nerror was: ''-' is an invalid character range. Write '\\-'.'.\n  [xmlvalidate]\n/home/gturner/src/newedgenetworks/zhenghesrc/server/src/web/index.jspx:6:96:\ncvc-complex-type.3.1: Value '2.0' of attribute 'version' of element 'jsp:root'\nis not valid with respect to the corresponding attribute use. Attribute\n'version' has a fixed value of '1.2'.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "28696",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "P3 normal",
    "product": "Tomcat 5",
    "project": "TOMCAT",
    "summary": "Jsp:root has invalid attribute: xsi:schemaLocation",
    "systemSpecification": true,
    "version": "5.0.19"
}