{
    "comments": [
        {
            "author": "Stefan Guggisberg",
            "body": "added STATUS_UNDEFINED as a legal initialStatus (as suggested).\n\nfixed in svn r535847",
            "date": "2007-05-07T11:05:26.162+0000",
            "id": 0
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.3 branch in revision 544261.",
            "date": "2007-06-04T20:55:45.796+0000",
            "id": 1
        }
    ],
    "component": "jackrabbit-core",
    "description": "When running ConcurrentReadWriteTest it may happen that a reading session gets an IllegalArgumentException:\n\nException in thread \"Thread-7\" java.lang.IllegalArgumentException: illegal status: 0\n\tat org.apache.jackrabbit.core.state.ItemState.<init>(ItemState.java:138)\n\tat org.apache.jackrabbit.core.state.PropertyState.<init>(PropertyState.java:79)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.getPropertyState(LocalItemStateManager.java:121)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.getItemState(LocalItemStateManager.java:152)\n\tat org.apache.jackrabbit.core.state.XAItemStateManager.getItemState(XAItemStateManager.java:226)\n\tat org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(SessionItemStateManager.java:175)\n\tat org.apache.jackrabbit.core.ItemManager.createItemInstance(ItemManager.java:495)\n\tat org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:326)\n\tat org.apache.jackrabbit.core.LazyItemIterator.prefetchNext(LazyItemIterator.java:90)\n\tat org.apache.jackrabbit.core.LazyItemIterator.<init>(LazyItemIterator.java:75)\n\tat org.apache.jackrabbit.core.ItemManager.getChildProperties(ItemManager.java:485)\n\tat org.apache.jackrabbit.core.NodeImpl.getProperties(NodeImpl.java:2481)\n\tat org.apache.jackrabbit.core.ConcurrentReadWriteTest$1$1.execute(ConcurrentReadWriteTest.java:61)\n\tat org.apache.jackrabbit.core.AbstractConcurrencyTest$Executor.run(AbstractConcurrencyTest.java:107)\n\tat java.lang.Thread.run(Thread.java:595)\n\nStatus 0 is STATUS_UNDEFINED. I think the following happens: when the reading session retrieves the ItemState from the SharedItemStateManager it is still valid but a short time later the writing session removes the item and changes the status to STATUS_UNDEFINED. Then the reading session tries to create an overlayed ItemState for the LocalItemStateManager using the changed status.\n\nAdding the STATUS_UNDEFINED to the list of 'valid' status in the ItemState constructor seems to solve the issue, but I'm not sure if that's the right way to do it.\n\nOpinions?",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-897",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "ItemState constructor throws IllegalArgumentException",
    "systemSpecification": true,
    "version": "1.3"
}