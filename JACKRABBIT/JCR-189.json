{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "The changes for this improvement required some changes in the configuration:\n\n- The FileSystem element in SearchIndex is now optional. Whether the configuration must have a FileSystem element depends on the QueryHandler implementation. If the QueryHandler does not use a FileSystem, it can be omitted. Which is now the case for the default Jackrabbit QueryHandler (org.apache.jackrabbit.core.query.lucene.SearchIndex).\n- When using the default Jackrabbit QueryHandler the parameter 'path' is now mandatory. See sample config src/config/repository.xml\n\nI tried to adapt all config files accordingly (also those under contrib). Hope I didn't forget any...\n\nsvn revision: 233174",
            "date": "2005-08-17T23:01:06.000+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "With the switch to the lucene FSDirectory, lock files are now created in temp directory. This is not convenient when troubleshooting an issue with lucene. Lock files should again be created in the index directory itself.",
            "date": "2005-08-18T19:27:36.000+0000",
            "id": 1
        },
        {
            "author": "Marcel Reutegger",
            "body": "Locks are now again created in the index directories.\n\nFixed in svn revision: 233307",
            "date": "2005-08-18T19:46:01.000+0000",
            "id": 2
        }
    ],
    "component": "query",
    "description": "Currently the QueryHandler uses a jackrabbit specific implementation of the lucene Directory interface to make use of the jackrabbit FileSystem abstraction. Lucene operations on the file system however requires quite often random access on the index files. With the current FileSystem interface / abstraction random access is not possible on a FileSystemResource, therefore it is simulated by re-aquiring the InputStream and then seeking to the desired position. This it not efficient at all.\n\nWith respect to performance any other use than file based index storage does not make sense with lucene. Hence, the current abstraction using FileSystem should be dropped in favour of direct file access.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-189",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "QueryHandler should use lucene Input-/OutputStream implementations",
    "systemSpecification": true,
    "version": ""
}