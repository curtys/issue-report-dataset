{
    "comments": [
        {
            "author": "Dominique Pfister",
            "body": "Fixed in revision 638783.",
            "date": "2008-03-19T10:55:53.478+0000",
            "id": 0
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.4 branch in revision 650340.",
            "date": "2008-04-22T01:05:45.563+0000",
            "id": 1
        }
    ],
    "component": "jackrabbit-core",
    "description": "Inside Node.save(), when filling the list of transient (modified) items, the node itself is added first (if transient) and all transient descendant nodes in depth-first order. This can lead to the following problem with shareable nodes and path-based access management: \n\n1) assume a node N has a shared child S, which is shared with at least one other node N'\n2) S.removeShare is invoked: this removes S from the list of child nodes in N\n3) N.save is invoked\n\nN is persisted first, then S. If a path-based access manager tries to build the path of S after N has been persisted, S will no longer be returned in the list of removed child node entries, and an exception will be thrown. This can be circumvented by adding N last.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1487",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Transient states should be persisted in depth-first traversal order",
    "systemSpecification": true,
    "version": ""
}