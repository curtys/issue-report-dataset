{
    "comments": [
        {
            "author": "Jukka Zitting",
            "body": "You're right, this seems like a concurrency issue.",
            "date": "2007-01-31T10:32:05.578+0000",
            "id": 0
        },
        {
            "author": "Martijn Hendriks",
            "body": "I think that I've traced a possible source of this error. It seems that the problem is at least present when two threads try to add the same property to a node. \n\nFor the reproduction of the issue I will attach a test class. Using this test class and a debugger, the issue can be reproduced (In Jackrabbit 1.2.1) as follows:\n1) set a breakpoint in the SharedItemStateManager in the Update.begin() method, for instance, line 522.\n2) start the test and resume it once so that the two threads from the test class are suspended.\n3) resume one of the test threads (it will finish)\n4) set a breakpoint in DatabasePersistenceManager.store @ line 274 (\"super.store(changelog)\");\n5) resume the remaining thread: it will break in the DbPM.\n6) stepping over the statement gives the exception (the itemstate has already been added by the other thread).\n7) stepping further it can be seen that the method store will never return, which is imho a big issue...\n\nSo I guess that the problem is that if the ChangeLog objects that are given to the SISM Update objects are non-disjoint, then persistence of one of them will fail because the DbPM.store method will never return (because the super.store operation always fails).\n\nIt seems that this issue can be resolved by replacing \"while(true)\" by \"while(trials>0)\". This, however, triggers a RepositoryException. Wouldn't it be nice to have a more specific exception, such as a ConcurrentModificationException?\n\nMartijn\n",
            "date": "2007-02-14T14:11:43.000+0000",
            "id": 1
        },
        {
            "author": "Stefan Guggisberg",
            "body": "martijn, thanks for the excellent and spot-on issue ananlysis, great job!\n\ni fixed the issue, i.e. endless loop in DatabasePersistenceManager.store(ChangeLog), as suggested in svn r508429.\n\ni agree that it would be nice if a more descriptive exception would be thrown (e.g. StaleItemStateException). unfortunately this would require a seperate select stmt for every property insert and therefore negatively affect performance. i don't think it's worth it. \n\n",
            "date": "2007-02-16T15:16:20.665+0000",
            "id": 2
        }
    ],
    "component": "jackrabbit-core",
    "description": "Hi,\n\nI ran into the exception pasted below. We had 2 threads that both were saving. Maybe it is a race condition?  \n\nRegards,\n\nMartijn Hendriks\n<GX> creative online development B.V.\n \nt: 024 - 3888 261\nf: 024 - 3888 621\ne: martijnh@gx.nl\n \nWijchenseweg 111\n6538 SW Nijmegen\nhttp://www.gx.nl/ \n\n\nJan 26, 2007 2:23:36 PM org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager store\nSEVERE: failed to write property state: e3847bad-f1ee-4adb-a109-e134900935b7/{http://gx.nl}edit_language\nERROR 23505: The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique in dex identified by 'DEFAULT_PROP_IDX' defined on 'DEFAULT_PROP'.\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\n        at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(Unknown Source)\n        at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(Unknown Source)\n        at org.apache.derby.impl.sql.execute.IndexChanger.insert(Unknown Source)\n        at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(Unknown Source)\n        at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(Unknown Source)\n        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\n        at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\n        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\n        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)\n        at org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager.executeStmt(DatabasePersistenceManager.java:835)\n        at org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager.store(DatabasePersistenceManager.java:466)\n        at org.apache.jackrabbit.core.persistence.AbstractPersistenceManager.store(AbstractPersistenceManager.java:75)\n        at org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager.store(DatabasePersistenceManager.java:274)\n        at org.apache.jackrabbit.core.state.SharedItemStateManager$Update.end(SharedItemStateManager.java:675)\n        at org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:808)\n        at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:326)\n        at org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:313)\n        at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:302)\n        at org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:295)\n        at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1210)\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-721",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Duplicate key in DatabasePersistenceManager",
    "systemSpecification": true,
    "version": "1.2.1"
}