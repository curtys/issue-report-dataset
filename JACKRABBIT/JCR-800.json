{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "Also affects spi-commons because the XPath parser is in there.",
            "date": "2009-02-13T09:10:02.980+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "The attached patch for jackrabbit-spi-commons adds support for relative paths in the order by clause of a JCR XPath statement.",
            "date": "2009-02-13T10:28:31.365+0000",
            "id": 1
        },
        {
            "author": "Marcel Reutegger",
            "body": "This patch is for jackrabbit-core and provides a first implementation of this feature. An order by with a relative path is not yet optimized and does not use index structures.",
            "date": "2009-02-13T17:19:58.759+0000",
            "id": 2
        },
        {
            "author": "Marcel Reutegger",
            "body": "Committed spi-commons patch in revision: 744884\n\nCommitted core patch in revision: 744889",
            "date": "2009-02-16T10:54:58.844+0000",
            "id": 3
        },
        {
            "author": "Ard Schrijvers",
            "body": "Question about the RelPathScoreDocComparator.sortValue(ScoreDoc i) : Will for every comparison the property value be refetched through the ISM?  If so, temporal storing the result of sortValue might be necessary because this easily blows up cpu if it is not cached temporarily. \n\nFurthermore, but you already indicate above, i think the sorting by child axis will currently not scale very well. Perhaps it might be easier to constrain sorting on child axis only for childnodes that are indexed through aggregates. Obviously, your solution does not need indexing configuration / re-indexing  after changing so is much more general, but also pretty resource intensive\n\n",
            "date": "2009-02-16T11:32:20.733+0000",
            "id": 4
        },
        {
            "author": "Marcel Reutegger",
            "body": "> Question about the RelPathScoreDocComparator.sortValue(ScoreDoc i) : Will for every comparison the property value be refetched\n> through the ISM?\n\nThat's correct.\n\n> If so, temporal storing the result of sortValue might be necessary because this easily blows up cpu if it is not cached temporarily.\n\nwhen you say temporarily, do you mean while a single result is sorted, or for a longer period. The problem with caching here is, when the cache needs to be invalidated. e.g. a node might get moved that is part of a relative path to a sort property.\n\n> Perhaps it might be easier to constrain sorting on child axis only for childnodes that are indexed through aggregates.\n\nThis will not work, because aggregates only consist of content that are fulltext indexed on the node scope. But my idea is, to extend the indexing configuration with entries for properties with a relative path. Those properties are then to the node where they are referenced from. Similarly to how aggregates work.",
            "date": "2009-02-16T13:00:29.088+0000",
            "id": 5
        }
    ],
    "component": "jackrabbit-core, jackrabbit-spi-commons, xpath",
    "description": "Hi, \n\nsince child axis is supported in XPath predicates, it would be nice to support it in order by clause as well\n\nQueries of type\n\n//element(*, type) [ foo/@bar ]  order by foo/@bar asc\n\ncan become very useful\n\nBR, \n\nSavvas",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-800",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Child Axis support in order by clause",
    "systemSpecification": true,
    "version": ""
}