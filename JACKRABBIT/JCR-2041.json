{
    "comments": [
        {
            "author": "angela",
            "body": "initial proposal for the jcr-client module",
            "date": "2009-03-24T16:28:49.867+0000",
            "id": 0
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Looks good! \n\nOne thing I noted: RepositoryFactoryImpl.getRepository(Map parameters) should handle the case where parameters == null. In that case it should return a default repository instance. Could this be jr-core?",
            "date": "2009-03-24T17:06:30.199+0000",
            "id": 1
        },
        {
            "author": "angela",
            "body": "> One thing I noted: RepositoryFactoryImpl.getRepository(Map parameters) should handle the case \n> where parameters == null. In that case it should return a default repository instance. \n\nok.\n\n> Could this be jr-core?\n\nsure, it could. but then the factory should also be able to deal with core-specific parameters (see the RepositoryFactory in jackrabbit-core), shouldn't it? otherwise it looks strange to me.\n\nup to now i thought of the jcr-client as an entry point for the jcr2spi repository only... but there is no strong reason apart from the fact that we kept jr-core and jr-jcr2spi separate and that jr-core already has a factory implementation.\n\nalternatively we may define one of the SPI implementations to be the default. in this case i would opt for the spi2davex.",
            "date": "2009-03-25T08:03:13.131+0000",
            "id": 2
        },
        {
            "author": "Marcel Reutegger",
            "body": "I'm not too happy with this new module, but it's probably necessary. What I don't like is the way it works with the various spi implementations. IIUC you have to write code in this module for each spi implementation that you want to support, right? Couldn't we rearrange that a bit and have a factory interface somewhere that jcr2spi could use without knowing the actual implementation. Maybe a RepositoryServiceFactory in jackrabbit-spi?",
            "date": "2009-03-25T09:33:23.424+0000",
            "id": 3
        },
        {
            "author": "angela",
            "body": "> IIUC you have to write code in this module for each spi implementation that you want to support, \n> right? \n\nno. you can simply pass the RepositoryConfig with the parameters.\n\ni wanted to add some facility for the spi implementations we release with jackrabbit. specially for the spi2dav(ex) it is should (must) be possible to create the repository with only specifying the uri of the server.\n\n> Couldn't we rearrange that a bit and have a factory interface somewhere that jcr2spi could \n> use without knowing the actual implementation. \n> Maybe a RepositoryServiceFactory in jackrabbit-spi?\n\nsure, we could. do you have time to take care of that and adjust the rs-impls accordingly?\nthat would be great, for i don't.",
            "date": "2009-03-25T10:02:42.790+0000",
            "id": 4
        },
        {
            "author": "angela",
            "body": "cope with null-params (default repo). for simplicity use one of the spi-impls as default...\n",
            "date": "2009-03-25T10:06:04.808+0000",
            "id": 5
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Looks good to me.\n\nWhat I'm a bit concerned about is whether it is clear to users that this is SPI only. That's why I came up with the idea of using jackrabbit-core as a default. The strong separation of jackrabbit-core and the spi based implementations might not be too obvious to new users. However this seem like a separate issue to me.",
            "date": "2009-03-25T10:31:40.339+0000",
            "id": 6
        },
        {
            "author": "Marcel Reutegger",
            "body": "> do you have time to take care of that and adjust the rs-impls accordingly? that would be great, for i don't.\n\nOK, I understand. so, it is either your way or I'll have to do it...\n\njust one thing then, the class RepositoryFactoryTest references an internal sun class. You should rather use ServiceRegistry instead.",
            "date": "2009-03-25T11:22:56.412+0000",
            "id": 7
        },
        {
            "author": "angela",
            "body": "> OK, I understand. so, it is either your way or I'll have to do it... \n\ndon't get me wrong: i don't have particular feelings for my way... i just don't have time.\nbut i want (rather: feel obligated) to deal with the fact (the same is true for the spi2dav promotion) that we need a JCR remoting client at Day. Using sandbox projects is simply not an option... \n\nbtw: you could also open an issue for you proposal, which i like.... that one:\n\n> Maybe a RepositoryServiceFactory in jackrabbit-spi? \n\nthen anybody can take care of it...see also comment in JCR-1877: \n\n\"i would like to see at least another person being familiar with the code base and thus \n able to fix issues or implement improvements [...]\"\n\nthat doesn't only apply to spi2dav....\n\n> just one thing then, the class RepositoryFactoryTest references an internal sun class. \n> You should rather use ServiceRegistry instead.\n\nok. thanks.\n",
            "date": "2009-03-25T11:41:06.479+0000",
            "id": 8
        }
    ],
    "component": "",
    "description": "task copied from JCR-1877:\n\ni think it would be wise to create a new module that mainly consists of a RepositoryFactory and combines jackrabbit-jcr2spi with the known (and also any other) spi implementations.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2041",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Create Jcr-Client Module",
    "systemSpecification": true,
    "version": ""
}