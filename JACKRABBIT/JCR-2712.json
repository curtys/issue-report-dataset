{
    "comments": [
        {
            "author": "Patrick Meyer ",
            "body": "In Jackrabbit Version 2.1.1 the same issue occurs\n\nCaused by: org.apache.jackrabbit.core.state.NoSuchItemStateException: 4ac5058c-060a-45ce-9d75-b5dbc0456c63\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager.getItemState(SharedItemStateManager.java:274)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.getNodeState(LocalItemStateManager.java:107)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.getItemState(LocalItemStateManager.java:172)\n\tat org.apache.jackrabbit.core.state.XAItemStateManager.getItemState(XAItemStateManager.java:260)\n\tat org.apache.jackrabbit.core.version.NodeStateEx.store(NodeStateEx.java:741)\n\tat org.apache.jackrabbit.core.version.NodeStateEx.store(NodeStateEx.java:715)\n\tat org.apache.jackrabbit.core.version.InternalVersionManagerBase.getParentNode(InternalVersionManagerBase.java:547)\n\tat org.apache.jackrabbit.core.version.InternalVersionManagerBase.internalCreateVersionHistory(InternalVersionManagerBase.java:411)\n\tat org.apache.jackrabbit.core.version.InternalXAVersionManager.createVersionHistory(InternalXAVersionManager.java:167)\n\tat org.apache.jackrabbit.core.version.InternalVersionManagerBase.getVersionHistory(InternalVersionManagerBase.java:322)\n\tat org.apache.jackrabbit.core.version.InternalXAVersionManager.getVersionHistory(InternalXAVersionManager.java:58)\n\tat org.apache.jackrabbit.core.ItemImpl.initVersionHistories(ItemImpl.java:778)\n\tat org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1119)\n\tat org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:920)\n\tat org.apache.jackrabbit.jca.JCASessionHandle.save(JCASessionHandle.java:184)",
            "date": "2010-08-20T11:52:43.751+0000",
            "id": 0
        },
        {
            "author": "Patrick Meyer ",
            "body": "The problem seems to be that ItemStates that are stored in InternalXAVersionmanager are not rollbacked until the boolean vmgrLocked is true.\n\nsee Line 624 of  InternalXAVersionManager last changed by mreutegg in Revision 637865\nhttp://svn.apache.org/viewvc/jackrabbit/trunk/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalXAVersionManager.java?view=markup  \n\nThis variable can only be true after an prepare Call to the XASession (First Call in 2 Phase Commit) . But our \"rollback trigger\" occurs before the call of XASession.prepare.\nsee Line 654 of InternalXAVersionManager \n\nThe changeset http://svn.apache.org/viewvc/jackrabbit/trunk/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/version/InternalXAVersionManager.java?r1=637864&r2=637865& checks logging before commit. I think checking vmgrLocked in rollback case is wrong.\n\nDoes it have any other side-effect if we remove the check of vmgrLocked in rollback case?\nRevision 637865 was for fixing JCR-1480\n",
            "date": "2010-08-24T11:40:17.247+0000",
            "id": 1
        },
        {
            "author": "Sebastian Sickelmann",
            "body": "I think this bug relates to jackrabbit core. Because the cause of the bug is in  java.org.apache.jackrabbit.core.version.InternalXAVersionManager",
            "date": "2010-08-25T19:55:42.838+0000",
            "id": 2
        },
        {
            "author": "Dominik Klaholt",
            "body": "Executing the following method within XATest.java (  http://svn.apache.org/repos/asf/jackrabbit/trunk/jackrabbit-core/src/test/java/org/apache/jackrabbit/core/XATest.java ) provokes the error as well (the error does not seem to occur every time, though -> that's why the for-loop does so many iterations):\n\npublic void testXAVersionManagerProblem() throws Exception {\nSession session = null;\ntry {\nsession = getHelper().getSuperuserSession();\nif (session.getRootNode().hasNode(\"testNode\")) {\nsession.getRootNode().getNode(\"testNode\").remove();\nsession.save();\n}\n\t\t\t\nUserTransaction utx;\nfor (int i = 0; i < 50; i++) {\nutx = new UserTransactionImpl(session);\nutx.begin();\nsession.getRootNode().addNode(\"testNode\").addMixin(NodeType.MIX_VERSIONABLE);\nsession.save();\n\t\t\t\t\nutx.rollback();\n}\n} finally {\nif (session != null) {\nsession.logout();\n}\n}\n}",
            "date": "2010-09-22T13:00:30.882+0000",
            "id": 3
        },
        {
            "author": "Jukka Zitting",
            "body": "Thanks for the accurate review of the problem and especially for the test case that made it easy to reproduce and fix this!\n\nIt seems to me that the problem is not that much the vmgrLocked check in the rollback() case, but rather the fact that the code calling rollback() has not called prepare() first. This is the case for the UserTransactionImpl utility class in Jackrabbit and apparently also in some transaction managers. However the InternalXAVersionManager class expects that a commit() or a rollback() can only happen after prepare() has already been called.\n\nTo better handle such situations I modified the InternalXAVersionManager to always make sure that the transaction is prepared before a commit() or a rollback() is performed. See revision 1000385 for this fix.",
            "date": "2010-09-23T10:01:39.539+0000",
            "id": 4
        }
    ],
    "component": "jackrabbit-core, jackrabbit-jca, transactions",
    "description": "Running the following code inside an Global Transaction (JTA, container managed transaction) causes problems.\n\nSession session = getRepsoitorySession(); \n      Node rootNode = session.getRootNode(); \n\n      Node test = rootNode.addNode(\"test\"); \n      test.addMixin(CTVRepositoryKonstanten.NODE_MIX_TYP_VERSION); \n      session.save(); \n      throw new RuntimeException(\"testException\");\n\nEverythink is fine, but if we execute it a second time we get an org.apache.jackrabbit.core.state.NoSuchItemStateException\n\norg.apache.jackrabbit.core.state.NoSuchItemStateException: b36d91bc-8687-428c-a767-2e087b13191a \nat org.apache.jackrabbit.core.state.SharedItemStateManager.getItemState(SharedItemStateManager.java:270) \nat org.apache.jackrabbit.core.state.LocalItemStateManager.getNodeState(LocalItemStateManager.java:107) \nat org.apache.jackrabbit.core.state.LocalItemStateManager.getItemState(LocalItemStateManager.java:172) \nat org.apache.jackrabbit.core.state.XAItemStateManager.getItemState(XAItemStateManager.java:260) \nat org.apache.jackrabbit.core.version.NodeStateEx.store(NodeStateEx.java:519) \nat org.apache.jackrabbit.core.version.NodeStateEx.store(NodeStateEx.java:489) \nat org.apache.jackrabbit.core.version.AbstractVersionManager.getParentNode(AbstractVersionManager.java:414) \nat org.apache.jackrabbit.core.version.AbstractVersionManager.createVersionHistory(AbstractVersionManager.java:357) \nat org.apache.jackrabbit.core.version.XAVersionManager.createVersionHistory(XAVersionManager.java:148) \nat org.apache.jackrabbit.core.version.AbstractVersionManager.getVersionHistory(AbstractVersionManager.java:273) \nat org.apache.jackrabbit.core.ItemImpl.initVersionHistories(ItemImpl.java:738) \nat org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1097) \nat org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:915) \nat org.apache.jackrabbit.jca.JCASessionHandle.save(JCASessionHandle.java:180) \nat de.continentale.repo.CTVRepository.erstelleDokument(CTVRepository.java:2267)\n\nWe think that there is some internal state that is not cleaned up on rollback.\nRestarting the runtime (Application Server) \"solved\" this.\n\nMay be there are some same causes like in: JCR-2503, JCR-2613\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2712",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Critical",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Dirty Internal State on Transaction-Rollback during Global Transaction (container managed transaction)",
    "systemSpecification": true,
    "version": "1.6.2, 2.1.1"
}