{
    "comments": [
        {
            "author": "Tobias Bocanegra",
            "body": "i agree with david nuescheler who said:\n\nI could envision that a \"blank/unconfigured/misconfigured\" .war file\nprompts the user initially with some configuration form to enter\nmainly the repository-home and possibly other configuration options,\nthat are then stored for future restarts of the .war file.",
            "date": "2007-01-04T12:31:23.192+0000",
            "id": 0
        },
        {
            "author": "David Boden",
            "body": "Please note that this issue has been marked against the \"core\" component. There isn't a \"webapp\" component available to assign this to. If possible, could this component be added and this issue moved over to it?",
            "date": "2007-01-04T14:08:28.944+0000",
            "id": 1
        },
        {
            "author": "Tobias Bocanegra",
            "body": "Committed revision 495531.\n\nAdded a very simple configuration mechanism that asks you for a repository home and lets you either create a new repository or reuse an existing one. in any case, a 'bootstrap.properties' file is written to the repository home which holds all the parameters that were as 'init-params' in the web.xml. thus allowing modification of those parameters without needing to modify the contents of the .war file.",
            "date": "2007-01-12T09:42:04.635+0000",
            "id": 2
        },
        {
            "author": "David Boden",
            "body": "Sounds good. However, rather than having the bootstrap.properties file, isn't it just simpler to insist that the settings are in JNDI and get rid of any file-based configuration? That way, it's clearly the reponsibility of the J2EE application deployer to choose the repository location and the additional repository settings. The repository owner might be someone different, and perhaps doesn't want to be in charge of the Jackrabbit configuration.",
            "date": "2007-01-12T13:59:40.853+0000",
            "id": 3
        }
    ],
    "component": "jackrabbit-webapp",
    "description": "The Embedded Deployment Model documentation (http://jackrabbit.apache.org/doc/deploy/howto-model1.html) on the jackrabbit page describes how to package up a .war file so that you can use JNDI Resource settings to change the location of the repository home and the repository configuration xml file.\n\nUnfortunately, the .war file that is provided as part of the Jackrabbit distribution doesn't behave like this. Instead, it has an inbuilt repository.xml file and settings in web.xml that act as defaults. These defaults are not useful and force a user to act like a developer and modify the files within the .war file.\n\nThe current situation is that we have a .war that's not going to be useful to anyone without modification. The repository.xml file that is contained within the .war makes the repository home to be the Tomcat/bin/repository directory. This is not a useful default. It's better to have no default setup and a clear error message that JNDI needs to be setup. It would be even better if the web application could recognise when the JNDI wasn't configured and could prompt the user with an instructional webpage, describing how to setup the required JNDI settings on Tomcat, JBoss etc.\n\n----\n\nThe .war distribution for Jackrabbit ignores the JNDI settings that are described in the documentation. I am using this Tomcat config.xml snippet to configure Tomcat 5.5:\n\n{{{\n<?xml version='1.0' encoding='utf-8'?>\n<Context displayName=\"Ark\" docBase=\"c:\\dev\\ark\\jackrabbit-server-1.1.1.war\" path=\"/ark\" \n         useNaming=\"false\" workDir=\"work\\Catalina\\localhost\\ark\" unpackWAR=\"false\">\n\n<Resource name=\"jcr/repository\"\n          auth=\"Container\"\n          type=\"javax.jcr.Repository\"\n          factory=\"org.apache.jackrabbit.core.jndi.BindableRepositoryFactory\"\n          configFilePath=\"c:/dev/ark/src/main/resources/repository.xml\"\n          repHomeDir=\"c:/jackrabbitrepo\"/>\n\n</Context>\n}}}\n\nJackrabbit loads fine. However, the logs show:\n\n{{{\n02.01.2007 10:33:00 *INFO * RepositoryStartupServlet: RepositoryStartupServlet initializing... (RepositoryStartupServlet.java, line 190)\n02.01.2007 10:33:00 *INFO * RepositoryStartupServlet:   repository-home = C:\\Program Files\\Apache Software Foundation\\Tomcat 5.5\\bin\\jackrabbit\\repository (RepositoryStartupServlet.java, line 242)\n\n...\n...\n\n02.01.2007 10:33:00 *INFO * LocalFileSystem: LocalFileSystem initialized at path C:\\Program Files\\Apache Software Foundation\\Tomcat 5.5\\bin\\jackrabbit\\repository\\repository (LocalFileSystem.java, line 166)\n}}}\n\n\n\n\n\n\n----\n\nMy use case is that I want to use Jackrabbit to host a Maven 2 repository within my company. So, ideally I want to:\n   * Download the Jackrabbit .war file and mount it on my Tomcat server as context \"/maven2\".\n   * Configure Tomcat to use LDAP authentication and point it at my company's LDAP server. This is a standard J2EE feature, of course.\n   * Create my own repository.xml file which points to my AccessManager implementation (which goes to my company's SingleSignOn service for authorization). My AccessManager implementation will be placed on the Tomcat shared classpath.\n   * Set the repository home directory, where all the working files will be placed and the location of the repository.xml file. Ideally, this would be done in JNDI.\n\nIf I have to put together my own Jackrabbit .war file, I consider that I have my \"developer\" hat on when I only really want to have my \"Jackrabbit user\" hat on.\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-697",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": ".war distribution should be configurable, prompting you to setup JNDI with the Repository Home and Config locations.",
    "systemSpecification": true,
    "version": ""
}