{
    "comments": [
        {
            "author": "Dan Connelly",
            "body": "The use of UNDEFINED would also affect the selection of the default or custom ProxyManager.\n\nUNDEFINED Beans and collection Items might be translated to Proxies that execute a lookup based on some Path Conversion scheme.   The Path Conversions could be either stored in the Repository or provided by a custom ProxyManager.",
            "date": "2006-09-24T13:22:51.000+0000",
            "id": 0
        },
        {
            "author": "Christophe Lombart",
            "body": "* What about the auto* settings (auto-retrieve,auto-update & auto-insert). Those settings can limit graph load and updates ?\n* Reference is not supported but we can also use the auto* settings.\n\n",
            "date": "2006-10-19T13:59:22.000+0000",
            "id": 1
        },
        {
            "author": "Christophe Lombart",
            "body": "Solve by using an object cache. This is not yet a complete cache system but this small cache is used per persistenceManager and only for retrieve requests. It allows to perform circular lookups (as by crossreferenced objects) that would result in non-terminating loops without such a cache.\n\nLater I would like to implement a complete object cache support. Something like in Hibernate or OJB. There is a good description here : http://db.apache.org/ojb/docu/guides/objectcache.html. I think we have similar needs but we have to define a proposal for this kind of feature with the most useful use cases.",
            "date": "2007-04-18T19:34:07.263+0000",
            "id": 2
        },
        {
            "author": "Christophe Lombart",
            "body": "Seems that more unit tests are required. I will continue to work on it",
            "date": "2007-05-13T21:28:02.726+0000",
            "id": 3
        },
        {
            "author": "Christophe Lombart",
            "body": "I added more unit test. It covers Bean attributes & Collection attributes.",
            "date": "2007-05-14T18:52:56.469+0000",
            "id": 4
        }
    ],
    "component": "jackrabbit-ocm",
    "description": "The default ObjectConverterImpl is restricted to acyclic graphs in the object model.\n\nMany Java object models are NOT acyclic.   For instance, I am on your Friends list.   Yoar are on my Friends list.     Java encourages such structures.   Almost any large object model in Java will have hidden cycles.\n\nSaving an Object Model that contains cycles using Graffito causes an infinite recursion.\n\nClearly, it is important to maintain a 1-to-1 correspondence between Nodes and Objects to prevent this.   In the absence of Multiple Parent Nodes, it will be necessary to use REFERENCE or UNDEFINED Items in place of the 2nd (or greater) Node representing a given Object.   My preference si that the default ObjectConverterImpl should support REFERENCE.,    Failing this, use of UNDEFINED also solves this problem and would  acceptable (as default).  Whether or not REFERENCE is used, both insertion and retrieval must provide a reasonable result.   A custom ojbect converter should be available to switch UNDEFINED to REFERENCE, or vice versa.\n\nAlso, it is probably best to keep the targeted, well-defined Nodes close to the Root Node.    This implies that the default ObjectConverterImpl should implement a Breadth-First, rather than a Depth-First, traversal of the Object Model on both insertion and retrieval.   Again, if the default is Depth-First, a custom object converter should be available that implements Breadth-First.\n\nAdmittedly, support for (2 representations) X (2 traversals) implies a drastic refactoring and/or rewriting of the ObjectConverterImpl class.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-918",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "OTHER",
    "priority": "Critical",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Avoid INFINITE RECURSION when Object Model has cycles.",
    "systemSpecification": true,
    "version": ""
}