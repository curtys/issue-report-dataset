{
    "comments": [
        {
            "author": "Jukka Zitting",
            "body": "Yes, I can see the issue you're encountering.\n\nThe cause of the problem is the fact that instead of simply evicting modified entries when receiving node state updates, the CachingHierarchyManager tries to read the modified states and update the cache accordingly. It seems that this behaviour was added (and is needed?) for the shareable node feature.\n\nThe attached patch avoids the problem by downgrading the SISM write lock to a read lock before firing the item state change notifications.",
            "date": "2009-07-08T13:59:58.150+0000",
            "id": 0
        },
        {
            "author": "Jukka Zitting",
            "body": "I'm fairly confident that the proposed patch is OK, as there can be no conflicting change notifications as the read lock is still held while the item state updates are being delivered to the listeners.\n\nHowever, it would still be nice if someone else could have a look at the patch before I apply it as the SISM locking is pretty critical to Jackrabbit.",
            "date": "2009-07-08T14:03:42.566+0000",
            "id": 1
        },
        {
            "author": "S\u00e9bastien Launay",
            "body": "I have applied the patch against current 1.5 branch, it works perfectly with my test case and there is no regression with jackrabbit test cases.",
            "date": "2009-07-08T14:20:10.286+0000",
            "id": 2
        },
        {
            "author": "Marcel Reutegger",
            "body": "+1 looks good to me.",
            "date": "2009-07-08T15:01:37.125+0000",
            "id": 3
        },
        {
            "author": "Jukka Zitting",
            "body": "Thanks for the review! Patch applied in revision 792218 and merged to the 1.x branch in revision 792219.",
            "date": "2009-07-08T16:36:34.938+0000",
            "id": 4
        },
        {
            "author": "Bart van der Schans",
            "body": "Can this fix also be backported to the 1.5 branch, in case there will be a 1.5.8 release?",
            "date": "2009-07-30T11:40:51.205+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "I merged the change to the 1.5 branch in revision 984444 and to the 1.4 branch in revision 984445. I don't think we'll be doing any more releases from those branches, but it's best to have this fix included in case we do.",
            "date": "2010-08-11T15:41:21.027+0000",
            "id": 6
        }
    ],
    "component": "jackrabbit-core",
    "description": "I have multiple threads in a test case for performing action on different workflow instances stored inside a Jackrabbit repository.\nMost of the time the test case hangs because of the following deadlock:\n\n\"ActionTrigger38\" daemon prio=10 tid=0x9060ec00 nid=0x2f7e in Object.wait() [0x8f505000..0x8f505f20]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0xb3ef0208> (a EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$ReaderLock)\n        at java.lang.Object.wait(Object.java:485)\n        at EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$ReaderLock.acquire(Unknown Source)\n        - locked <0xb3ef0208> (a EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$ReaderLock)\n        at org.apache.jackrabbit.core.state.DefaultISMLocking$ReadLockImpl.<init>(DefaultISMLocking.java:84)\n        at org.apache.jackrabbit.core.state.DefaultISMLocking$ReadLockImpl.<init>(DefaultISMLocking.java:78)\n        at org.apache.jackrabbit.core.state.DefaultISMLocking.acquireReadLock(DefaultISMLocking.java:44)\n        at org.apache.jackrabbit.core.state.SharedItemStateManager.acquireReadLock(SharedItemStateManager.java:1409)\n        at org.apache.jackrabbit.core.state.SharedItemStateManager.hasItemState(SharedItemStateManager.java:286)\n        at org.apache.jackrabbit.core.state.XAItemStateManager.hasItemState(XAItemStateManager.java:295)\n        at org.apache.jackrabbit.core.state.SessionItemStateManager.hasItemState(SessionItemStateManager.java:206)\n        at org.apache.jackrabbit.core.HierarchyManagerImpl.hasItemState(HierarchyManagerImpl.java:164)\n        at org.apache.jackrabbit.core.CachingHierarchyManager.nodeAdded(CachingHierarchyManager.java:674)\n        at org.apache.jackrabbit.core.CachingHierarchyManager.nodeAdded(CachingHierarchyManager.java:366)\n        - locked <0xb4020630> (a java.lang.Object)\n        at org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyNodeAdded(StateChangeDispatcher.java:159)\n        at org.apache.jackrabbit.core.state.SessionItemStateManager.nodeAdded(SessionItemStateManager.java:905)\n        at org.apache.jackrabbit.core.state.NodeState.notifyNodeAdded(NodeState.java:852)\n        at org.apache.jackrabbit.core.state.NodeState.renameChildNodeEntry(NodeState.java:370)\n        - locked <0xb26df780> (a org.apache.jackrabbit.core.state.NodeState)\n        at org.apache.jackrabbit.core.NodeImpl.renameChildNode(NodeImpl.java:559)\n        at org.apache.jackrabbit.core.SessionImpl.move(SessionImpl.java:1034)\n        at org.ametys.plugins.repository.DefaultSessionFactory$SessionWrapper.move(DefaultSessionFactory.java:398)\n        at org.ametys.plugins.workflow.store.JackrabbitWorkflowStore.moveToHistory(JackrabbitWorkflowStore.java:797)\n        at com.opensymphony.workflow.AbstractWorkflow.createNewCurrentStep(AbstractWorkflow.java:1474)\n        at com.opensymphony.workflow.AbstractWorkflow.transitionWorkflow(AbstractWorkflow.java:1256)\n        at com.opensymphony.workflow.AbstractWorkflow.doAction(AbstractWorkflow.java:567)\n        at org.ametys.plugins.workflow.Workflow.doAction(Workflow.java:227)\n        at org.ametys.plugins.workflow.WorkflowTestCase$ActionTrigger.run(WorkflowTestCase.java:195)\n\n\"ActionTrigger12\" daemon prio=10 tid=0x904dd000 nid=0x2f64 waiting for monitor entry [0x8fd3f000..0x8fd40020]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n        at org.apache.jackrabbit.core.CachingHierarchyManager.nodeModified(CachingHierarchyManager.java:306)\n        - waiting to lock <0xb4020630> (a java.lang.Object)\n        at org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyNodeModified(StateChangeDispatcher.java:189)\n        at org.apache.jackrabbit.core.state.SessionItemStateManager.nodeModified(SessionItemStateManager.java:929)\n        at org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyNodeModified(StateChangeDispatcher.java:189)\n        at org.apache.jackrabbit.core.state.LocalItemStateManager.stateModified(LocalItemStateManager.java:446)\n        at org.apache.jackrabbit.core.state.XAItemStateManager.stateModified(XAItemStateManager.java:595)\n        at org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyStateModified(StateChangeDispatcher.java:111)\n        at org.apache.jackrabbit.core.state.SharedItemStateManager.stateModified(SharedItemStateManager.java:400)\n        at org.apache.jackrabbit.core.state.ItemState.notifyStateUpdated(ItemState.java:244)\n        at org.apache.jackrabbit.core.state.ChangeLog.persisted(ChangeLog.java:285)\n        at org.apache.jackrabbit.core.state.SharedItemStateManager$Update.end(SharedItemStateManager.java:735)\n        at org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:1092)\n        at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:337)\n        at org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:347)\n        at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:312)\n        at org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:313)\n        at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1103)\n        - locked <0xb4004650> (a org.apache.jackrabbit.core.XASessionImpl)\n        at org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:858)\n        at org.ametys.plugins.repository.DefaultSessionFactory$SessionWrapper.save(DefaultSessionFactory.java:414)\n        at org.ametys.plugins.workflow.store.JackrabbitWorkflowStore.markFinished(JackrabbitWorkflowStore.java:757)\n        at com.opensymphony.workflow.AbstractWorkflow.createNewCurrentStep(AbstractWorkflow.java:1473)\n        at com.opensymphony.workflow.AbstractWorkflow.transitionWorkflow(AbstractWorkflow.java:1256)\n        at com.opensymphony.workflow.AbstractWorkflow.doAction(AbstractWorkflow.java:567)\n        at org.ametys.plugins.workflow.Workflow.doAction(Workflow.java:227)\n        at org.ametys.plugins.workflow.WorkflowTestCase$ActionTrigger.run(WorkflowTestCase.java:203)\n\nDifferent session instances (not XA) are used in both threads.\nThe nodes modified are different:\n- ActionTrigger38 is moving a node and the session has not been saved yet.\n- ActionTrigger12 has updated another node and is saving it.\n\nI try to reproduce this behavior in a Jackrabbit test case without success.\nIf you need more information or a test case, let me know i will give it a second try.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2171",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Deadlock in SharedItemStateManager on session.move and node.save",
    "systemSpecification": true,
    "version": "1.5.6"
}