{
    "comments": [
        {
            "author": "Ard Schrijvers",
            "body": "fix ",
            "date": "2007-08-06T12:14:02.621+0000",
            "id": 0
        },
        {
            "author": "Christoph Kiehl",
            "body": "Patch looks good. If no one objects I will commit the patch together with the proposed addition to the testcase.",
            "date": "2007-08-06T22:27:22.961+0000",
            "id": 1
        },
        {
            "author": "Christoph Kiehl",
            "body": "Patch applied in revision 563673. Thanks Ard!\n\nPlease post a mail to the developers list to discuss optimization of MatchAllScorer. I'm very interested in your suggestions.",
            "date": "2007-08-07T22:14:41.706+0000",
            "id": 2
        },
        {
            "author": "Marcel Reutegger",
            "body": "We should avoid creating the named value in the while loop.",
            "date": "2007-08-13T10:33:55.384+0000",
            "id": 3
        },
        {
            "author": "Marcel Reutegger",
            "body": "Fixed in revision: 565316",
            "date": "2007-08-13T11:49:54.173+0000",
            "id": 4
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.3 branch in revision 577816.",
            "date": "2007-09-20T17:13:53.611+0000",
            "id": 5
        }
    ],
    "component": "indexing",
    "description": "In MatchAllScorer.calculateDocFilter(), When you have just two nodes, with different properties, like \"myprop\" and \"myprop2\", and you have an xpath String xpath = \"//*[@myprop], you get both nodes back (to be precise, you'll get every node that has a property that startswith \"myprop\")\n\n\nYou can reproduce it by changing the SimpleQueryTest.testIsNotNull() a little:\n\nChange \n\nbar.setProperty(\"text\", \"the quick brown fox jumps over the lazy dog.\"); \n\nto\n\nbar.setProperty(\"mytextwhichstartswithmytext\", \"the quick brown fox jumps over the lazy dog.\");\n\nNow the test with xpath = \"//*[@jcr:primaryType='nt:unstructured' and @mytext]\"; fails because 2 results. I did test for the trunk and tag 1.3.1 and both have the same problem. I have attached MatchAllScorer.java.patch in this mail, or should I create a JIRA issue for this? \n\nFurthermore I would like to discuss a different implementation for the MatchAllScorer, because IMHO the current calculateDocFilter() becomes slow pretty fast (see bottom email the code part i am referring to: if you have 100.000 docs with \"mytext\" property, and you query  [@mytext] the loop below is executed at least 100.000 times). I think it might be out of scope for the user-list, or is the user-list the place to discuss something like this? \n\n-----------------------------------------------------------------------\n\nTermEnum terms = reader.terms(new Term(FieldNames.PROPERTIES, field));\n        try {\n            TermDocs docs = reader.termDocs();\n            try {\n                while (terms.term() != null\n                        && terms.term().field() == FieldNames.PROPERTIES\n                        && terms.term().text().startsWith(field)) {\n                    docs.seek(terms);\n                    while (docs.next()) {\n                        docFilter.set(docs.doc());\n                    }\n                    terms.next();\n                }\n            } finally {\n                docs.close();\n            }\n        } finally {\n            terms.close();\n        }\n\n-----------------------------------------------------------------------\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1051",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "MatchAllScorer calculateDocFilter() bug",
    "systemSpecification": true,
    "version": "1.2.1, 1.2.2, 1.2.3, 1.3, 1.3.1"
}