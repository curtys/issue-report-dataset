{
    "comments": [
        {
            "author": "Jukka Zitting",
            "body": "+1 to not close the stream in Property.setValue(InputStream)\n\nI don't really use binary properties so I haven't run into this issue, but my natural instinct would be to write code like this:\n\n    InputStream stream = ...;\n    try {\n        property.setValue(stream);\n    } finally {\n        stream.close();\n    }\n",
            "date": "2005-12-15T02:09:15.000+0000",
            "id": 0
        },
        {
            "author": "Stefan Guggisberg",
            "body": "fixed in svn r357013",
            "date": "2005-12-15T23:04:38.000+0000",
            "id": 1
        }
    ],
    "component": "jackrabbit-core",
    "description": "Currently the Property.setValue(InputStream) - actually all methods setting a property value from an InputStream - method closes the stream when it has completely been read. While this might be a nice-to-have in some situations, it is IMHO not standard behaviour for stream consumers to close the stream when done.\n\nMy special use case is unpacking the contents of a ZIP file (ZIPInputStream). After streaming the contents of the first ZIP file entry into a property, the ZIPInputStream is closed by Jackrabbit and the rest of the file cannot be read.\n\nWorkaround: Instead of giving the original InputStream to the method, create a FileInputStream wrapper overwriting the close method to do nothing.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-293",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Property.setValue(InputStream) closes stream",
    "systemSpecification": true,
    "version": ""
}