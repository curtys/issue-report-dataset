{
    "comments": [
        {
            "author": "Felix Meschberger",
            "body": "Proposed changes.\n\nThe new class comes as a Declarative Services component which is configurable and exposes configuration descriptors suitable for the OSGi Metatype Service (and thus the Apache Felix Web Console).",
            "date": "2011-11-09T17:36:58.324+0000",
            "id": 0
        },
        {
            "author": "Tobias Bocanegra",
            "body": "looks ok, but can't you attach a normal svn-diff patch that can be applied with the \"patch\" command? or tell me how i can apply a eclipse workspace patch without eclipse :-)",
            "date": "2011-11-09T18:20:12.049+0000",
            "id": 1
        },
        {
            "author": "Felix Meschberger",
            "body": "Patch against trunk root",
            "date": "2011-11-09T21:11:14.239+0000",
            "id": 2
        },
        {
            "author": "Tobias Bocanegra",
            "body": "thanks, i can apply the patch now. i quickly tried it with my CRX client and \"mounted\" the servlet to /crx/server. but the repository connection fails:\n\nC-0-#000000 -> [REPORT /crx/server/ HTTP/1.1 ]\nC-0-#000030 -> [Depth: 0 ]\nC-0-#000040 -> [User-Agent: Jakarta Commons-HttpClient/3.0 ]\nC-0-#000084 -> [Host: localhost:8888 ]\nC-0-#000106 -> [Content-Length: 128 ]\nC-0-#000127 -> [Content-Type: text/xml; charset=UTF-8 ]\nC-0-#000166 -> [ ]\nC-0-#000168 -> [<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><dcr:repositorydescriptors xmlns:dcr=\"http://www.day.com/jcr/webdav/1.0\"/>]\nS-0-#000000 -> [HTTP/1.1 409 Conflict ]\nS-0-#000023 -> [Connection: Close ]\nS-0-#000042 -> [Server: Day-Servlet-Engine/4.1.20  ]\nS-0-#000078 -> [Content-Type: text/xml;charset=UTF-8 ]\nS-0-#000116 -> [Content-Length: 252 ]\nS-0-#000137 -> [Date: Thu, 10 Nov 2011 00:02:28 GMT ]\nS-0-#000174 -> [ ]\nS-0-#000176 -> [<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><D:error xmlns:D=\"DAV:\"><dcr:exception xmlns:dcr=\"http://www.day.com/jcr/webdav/1.0\"><dc]\nS-0-#000317 -> [r:class>javax.jcr.NoSuchWorkspaceException</dcr:class><dcr:message>crx</dcr:message></dcr:exception></D:error>]\nS-0-Finished: 428 bytes (71.0 kb/s)\nC-0-Finished: 296 bytes (59.0 kb/s)\n\nSomehow the servlet uses the \"/crx\" of the request to select a workspace. is the path-info correct?",
            "date": "2011-11-10T00:11:08.462+0000",
            "id": 3
        },
        {
            "author": "Jukka Zitting",
            "body": "+1 to the general approach. Some comments:\n\n* Wouldn't it be nicer to use the whiteboard pattern for servlet registration [1]? That way we'd avoid the activate/deactivate code and the HttpService dependency.\n\n* I'm a bit concerned about exporting the entire jackrabbit-webdav API. So far we haven't made strict backwards compatibility promises beyond jackrabbit-api and jackrabbit-jcr-commons (where we now explicitly manage the exported OSGi package versions), and exporting all the o.a.j.webdav packages significantly increases our public API footprint.\n\n[1] http://felix.apache.org/site/apache-felix-http-service.html#ApacheFelixHTTPService-UsingtheWhiteboard",
            "date": "2011-11-10T13:20:29.312+0000",
            "id": 4
        },
        {
            "author": "Felix Meschberger",
            "body": "Re whiteboard: Yes, but this causes duplicate configuration to be required: for the alias (aka Servlet Path) and the prefix path. One solution would be to overwrite the getInitParameter(String) method to return the \"alias\" property value if the prefix path property is requested. Hmm... \n\nRe webdav export: I agree. The options basically are: embed the webdav library in the jcr-server library (jcr-server probably is closely tied to webdav anyway) or export from the webdav library.",
            "date": "2011-11-10T13:43:17.394+0000",
            "id": 5
        },
        {
            "author": "angela",
            "body": "> I'm a bit concerned about exporting the entire jackrabbit-webdav API. So far we haven't made strict backwards compatibility \n> promises beyond jackrabbit-api and jackrabbit-jcr-commons (where we now explicitly manage the exported OSGi package versions), \n> and exporting all the o.a.j.webdav packages significantly increases our public API footprint. \n\nwe never made promises :) \nbut being the author of the webdav-library: i treated it as public API since it became the replacement of the retired slide project [1].\nin fact i do remember a couple of api extensions, a major xml-related refactoring in the very beginning  and quite some bug fixes. can\nwe easily find out how often we were breaking strict backwards compatibility?\n\n[1] http://jakarta.apache.org/slide/",
            "date": "2011-11-10T13:59:26.252+0000",
            "id": 6
        },
        {
            "author": "Julian Reschke",
            "body": "Reminder: upgrading to a current version of HTTP commons might cause API changes (see JCR-2406)",
            "date": "2011-11-10T14:15:46.995+0000",
            "id": 7
        },
        {
            "author": "Felix Meschberger",
            "body": "Right, but only in the o.a.j.webdav.client.methods package which can exported with a major version upgrade independently of the other packages.",
            "date": "2011-11-10T14:21:08.363+0000",
            "id": 8
        },
        {
            "author": "Jukka Zitting",
            "body": "Attached clirr reports for changes in jackrabbit-webdav versions 2.1.0, 2.2.0 and 2.3.0 when compared to the previous 2.x.0 version.\n\nThere are a few incompatible changes in each release, but nothing too major and nothing that we couldn't avoid if we paid closer attention (i.e. automatic test case) to API compatibility going forward.\n\nAnd yes, as Felix notes, we always do have the option of upgrading the major package version when making incompatible API changes, so it's not too much of a problem. We'd just need to be more explicit about it than we've been so far.\n\nTo summarize, OK for exporting the o.a.j.webdav packages if (as it seems) we have consensus that the extra attention to compatibility is a good idea.",
            "date": "2011-11-10T14:29:23.150+0000",
            "id": 9
        },
        {
            "author": "angela",
            "body": "> Reminder: upgrading to a current version of HTTP commons might cause API changes (see JCR-2406) \n\n*grins* i was thinking of that while typing... but so far i was too afraid to do this anyway :)\n\n> a major version upgrade independently of the other packages. \n\nsure... ;)\nmaybe we rather want to deprecate the old stuff and do complete rewrite of the client part as well.....if we are ever \ngoing to upgrade to the rewritten HTTP commons. i would definitely prefer that...",
            "date": "2011-11-10T14:30:07.474+0000",
            "id": 10
        },
        {
            "author": "Felix Meschberger",
            "body": "> deprecate the old stuff and do complete rewrite\n\nIf possible, this is probably preferable.\n\nOne question, though: Until now we did not create bundles and we did not \"version\" any package. Now we start and we are basically free to do almost anything we want.\n\nDo we want to start exporting at version 1.0 ?\nOr at the bundle/library micro version 2.3 ?\n\nShall we use the BND Annotations to define the exports ? This would create package-info.java files in the packages which are annotated with the export version.\n\nThe advantage of using BND annotations is that the export versions are closer to the code being exported and easier to configure in the pom.xml.",
            "date": "2011-11-10T14:40:26.040+0000",
            "id": 11
        },
        {
            "author": "Jukka Zitting",
            "body": "I'd go with BND  annotations, as that's what we already use in jackrabbit-api and jackrabbit-jcr-commons. There I started with package version 2.3 for those packages that already were exported in previous versions and 1.0 for any new packages. For jackrabbit-webdav I'd start the package versions at 1.0 to emphasize that they're different from Jackrabbit release versions (they reflect API changes separately for each package instead of globally for the whole product).",
            "date": "2011-11-10T15:25:11.407+0000",
            "id": 12
        },
        {
            "author": "Jukka Zitting",
            "body": "I committed the patch, added package-level OSGi version information in -webdav, and refactored the DavexServletService to use the whiteboard pattern instead of a direct HttpService dependency. Resolving as fixed.",
            "date": "2011-11-23T16:15:27.427+0000",
            "id": 13
        }
    ],
    "component": "jackrabbit-jcr-server, jackrabbit-webdav",
    "description": "Propose to generate bundles from the jackrabbit-webdav (exporting everything) and jackrabbit-jcr-server (exporting nothing) libraries. In addition a new class is added to the jackrabbit-jcr-server library, which in case of deployment in an OSGi framework will register a Servlet with the OSGi HttpService to expose the JcrRemotingServlet.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-3142",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Create OSGi Bundles from jackrabbit-webdav and jackrabbit-jcr-server libraries",
    "systemSpecification": true,
    "version": "2.3.2"
}