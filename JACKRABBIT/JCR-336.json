{
    "comments": [
        {
            "author": "Tobias Bocanegra",
            "body": "fixed.\n\nCommitted revision 393020.",
            "date": "2006-04-11T02:41:35.000+0000",
            "id": 0
        },
        {
            "author": "Tobias Bocanegra",
            "body": ".",
            "date": "2006-04-11T02:41:53.000+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged for 1.0.1 in revision 409532.",
            "date": "2006-05-26T07:55:57.000+0000",
            "id": 2
        }
    ],
    "component": "locks",
    "description": "I prepared simple test which tries to lock/unlock single node from many\nthreads. I expected only LockExceptions thrown by some threads which can\noccur if node is already locked by other thread.\n\nBut I get incorrect effect sporadically. It looks like some thread\nmanaged to acquire lock, but then can't release it.\n\nFollowing exception is thrown then :\n\njavax.jcr.InvalidItemStateException:\n7c198c7b-76c8-47c8-96a8-d9dfefd4b387 has been modified externally\n    at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1193)\n    at org.apache.jackrabbit.core.NodeImpl.unlock(NodeImpl.java:3790)\n    at JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:95)\n\nadditionally warning appears in log\n\norg.apache.jackrabbit.core.lock.LockManagerImpl$LockInfo.loggingOut(LockManagerImpl.java:892)\n- Unable to unlock session-scoped lock on node\n'7c198c7b-76c8-47c8-96a8-d9dfefd4b387-W': Unable to unlock node. Node\nhas pending changes: /folder\n\nIn consequence node is left in locked state. It looks like a bug.\nIf one thread locked node successfully, then none other can modify it,\nand the same thread should release lock without any problems.\n\nShouldn't be lock operation atomic itself ?\n\nPrzemo\n\n\npackage com.oyster.mom.contentserver.jcr.transaction;\n\nimport javax.jcr.Node;\nimport javax.jcr.RepositoryException;\nimport javax.jcr.Session;\nimport javax.jcr.SimpleCredentials;\nimport javax.jcr.lock.LockException;\n\nimport org.apache.jackrabbit.core.RepositoryImpl;\nimport org.apache.jackrabbit.core.config.RepositoryConfig;\n\npublic class JrTestConcurrentLocks extends Thread {\n\n   private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(JrTestConcurrentLocks.class);\n\n   public static String REPOSITORY_HOME = \"d:/repo/jackrabbit/\";\n\n   public static String REPOSITORY_CONFIG = REPOSITORY_HOME + \"repository.xml\";\n\n   public static void main(String[] args) throws Exception {\n\n       JrTestConcurrentLocks test = new JrTestConcurrentLocks(-1);\n       test.startup();\n\n       JrTestConcurrentLocks tests[] = new JrTestConcurrentLocks[3];\n\n       for (int i = 0; i < tests.length; i++) {\n           JrTestConcurrentLocks x = new JrTestConcurrentLocks(i);\n           x.setSession(repository.login(new SimpleCredentials(\"admin\", \"admin\".toCharArray())));\n           x.start();\n           tests[i] = x;\n       }\n\n       for (int i = 0; i < tests.length; i++) {\n           tests[i].join();\n           tests[i].getSession().logout();\n       }\n\n       test.shutdown();\n   }\n\n   private static RepositoryImpl repository;\n\n   private int id;\n\n   private Session session;\n\n   public void setSession(Session session) {\n       this.session = session;\n   }\n\n   public Session getSession() {\n       return this.session;\n   }\n\n   public JrTestConcurrentLocks(int i) {\n       this.id = i;\n   }\n\n   public void startup() throws Exception {\n       System.setProperty(\"java.security.auth.login.config\", \"c:/jaas.config\");\n\n       RepositoryConfig config = RepositoryConfig.create(REPOSITORY_CONFIG, REPOSITORY_HOME);\n       repository = RepositoryImpl.create(config);\n\n       Session session = repository.login(new SimpleCredentials(\"admin\", \"admin\".toCharArray()));\n       Node rootNode = session.getRootNode();\n       if (!rootNode.hasNode(\"folder\")) {\n           Node folder = rootNode.addNode(\"folder\");\n           folder.addMixin(\"mix:versionable\");\n           folder.addMixin(\"mix:lockable\");\n           rootNode.save();\n       }\n       session.logout();\n   }\n\n   public void shutdown() throws RepositoryException {\n       repository.shutdown();\n   }\n\n   public Node getFolder(Session session) throws RepositoryException {\n       return session.getRootNode().getNode(\"folder\");\n   }\n\n   public void run() {\n\n       for (int i = 0; i < 10; i++) {\n           log.info(\"START id:\" + id + \", i=\" + i);\n\n           try {\n               session.refresh(false);\n\n               Node folder = getFolder(session);\n               folder.lock(false, true);\n               folder.unlock();\n\n               log.info(\"SUCCESS id:\" + id + \", i=\" + i);\n           }\n           catch (LockException e) {\n               log.info(\"FAIL:\" + id + \", i=\" + i);\n           }\n           catch (Exception e) {\n               log.warn(\"ERROR:\" + id + \", i=\" + i, e);\n           }\n\n\n       }\n\n   }\n}\n\n\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:0, i=0\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:1, i=0\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:2, i=0\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:0, i=0\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:0, i=1\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:0, i=1\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:1, i=0\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:1, i=1\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:1, i=1\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:1, i=2\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:1, i=2\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:1, i=3\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:1, i=3\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:1, i=4\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:0, i=2\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:0, i=2\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:0, i=3\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:0, i=3\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:0, i=4\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:0, i=4\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:0, i=5\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:97) - SUCCESS id:1, i=4\n15:46:17 WARN  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:103) - ERROR:0, i=5\njavax.jcr.ItemNotFoundException: 7c198c7b-76c8-47c8-96a8-d9dfefd4b387/{http://www.jcp.org/jcr/1.0}lockOwner\n       at org.apache.jackrabbit.core.ItemManager.createItemInstance(ItemManager.java:463)\n       at org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:319)\n       at org.apache.jackrabbit.core.NodeImpl.getProperty(NodeImpl.java:1436)\n       at org.apache.jackrabbit.core.NodeImpl.getOrCreateProperty(NodeImpl.java:428)\n       at org.apache.jackrabbit.core.NodeImpl.internalSetProperty(NodeImpl.java:1267)\n       at org.apache.jackrabbit.core.NodeImpl.lock(NodeImpl.java:3740)\n       at JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:94)\n15:46:17 WARN  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:103) - ERROR:2, i=0\njavax.jcr.InvalidItemStateException: 7c198c7b-76c8-47c8-96a8-d9dfefd4b387 has been modified externally\n       at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1193)\n       at org.apache.jackrabbit.core.NodeImpl.unlock(NodeImpl.java:3790)\n       at JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:95)\n15:46:17 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:1, i=5\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:0, i=6\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:2, i=1\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:1, i=5\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:0, i=6\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:2, i=1\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:1, i=6\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:0, i=7\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:2, i=2\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:1, i=6\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:0, i=7\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:2, i=2\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:1, i=7\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:0, i=8\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:2, i=3\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:1, i=7\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:0, i=8\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:2, i=3\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:1, i=8\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:0, i=9\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:2, i=4\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:1, i=8\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:0, i=9\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:2, i=4\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:1, i=9\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:2, i=5\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:2, i=5\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:2, i=6\n15:46:18 WARN  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:103) - ERROR:1, i=9\njavax.jcr.InvalidItemStateException: /folder: the node cannot be saved because it has been modified externally.\n       at org.apache.jackrabbit.core.NodeImpl.makePersistent(NodeImpl.java:908)\n       at org.apache.jackrabbit.core.ItemImpl.persistTransientItems(ItemImpl.java:682)\n       at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1173)\n       at org.apache.jackrabbit.core.NodeImpl.lock(NodeImpl.java:3744)\n       at JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:94)\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:2, i=6\n15:46:18 WARN  org.apache.jackrabbit.core.lock.LockManagerImpl$LockInfo.loggingOut(LockManagerImpl.java:892) - Unable to unlock session-scoped lock on node '7c198c7b-76c8-47c8-96a8-d9dfefd4b387-W': Unable to unlock node. Node has pending changes: /folder\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:2, i=7\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:2, i=7\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:2, i=8\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:2, i=8\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:88) - START id:2, i=9\n15:46:18 INFO  JrTestConcurrentLocks.run(JrTestConcurrentLocks.java:100) - FAIL:2, i=9\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-336",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Concurrent locking operations fail",
    "systemSpecification": true,
    "version": "0.9, 1.0"
}