{
    "comments": [
        {
            "author": "Sergey Nebolsin",
            "body": "Patch attached",
            "date": "2008-09-18T07:41:08.479+0000",
            "id": 0
        },
        {
            "author": "Christophe Lombart",
            "body": "The patch has been applied - Thanks \nLet me know if something is wrong \n",
            "date": "2008-09-18T16:43:04.145+0000",
            "id": 1
        },
        {
            "author": "Sergey Nebolsin",
            "body": "Sorry, my patch was wrong. I'll provide updated patch soon.",
            "date": "2008-09-19T12:24:12.292+0000",
            "id": 2
        },
        {
            "author": "Sergey Nebolsin",
            "body": "Hmm, trying to implement this feature correctly and writing the unit test for it, I discovered that the problem is not so simple.\n\nAnd the problem is: ObjectIterator just skips nodes from query result which it cannot convert to objects. And we cannot determine if node is convertible without actually retrieving this node and trying to convert it. So we cannot determine result's size and cannot implement skip() method cheaply.\n\nTwo possible solutions:\n1. Make ObjectIterator throw an exception if node is not convertible and add \"@ocm_classname\" clause to every query to ensure that query will return only nodes which are saved with OCM.\n2. Leave things as they are but describe inconsistent behavior in the javadocs for skip(), getSize() and getPosition() methods if there are nonconvertible nodes in the query result\n\nI prefer option 1, since this behavior is consistent, and I believe that nonconvertible nodes in the query results means \"error in the query\" in 99,9% cases, and the user should be notified about this error more strongly than just log at info level. ",
            "date": "2008-09-19T13:03:40.297+0000",
            "id": 3
        },
        {
            "author": "Christophe Lombart",
            "body": "Please add a unit test",
            "date": "2008-09-19T13:04:19.173+0000",
            "id": 4
        },
        {
            "author": "Sergey Nebolsin",
            "body": "Of course, there's a third solution: refuse the idea of implementing RangeIterator, but if there are 10 000 objects in the repository and we want to retrieve objects 9980-10000, performance impact will be really huge.",
            "date": "2008-09-19T13:26:28.287+0000",
            "id": 5
        },
        {
            "author": "Sergey Nebolsin",
            "body": "I attached proposed patch for solution 1 with a modified testcase, which covers RangeInterator behavior. The solution is tested to work fine as part of Grails JCR plugin, but the plugin currently use only basic OCM features and doesn't have complex testcases.",
            "date": "2008-09-19T15:40:39.664+0000",
            "id": 6
        },
        {
            "author": "Christophe Lombart",
            "body": "The modified patch has been applied. I also prefer solution 1. \n The unit test is working here. \n\nThanks for this patch \n",
            "date": "2008-09-21T08:06:52.362+0000",
            "id": 7
        },
        {
            "author": "Sergey Nebolsin",
            "body": "Thanks, Christophe.\n\nI should note, that this might be a breaking change for the users, if they're depend on old \"skip non-mappable nodes\" behavior (and this behavior was documented in javadocs for ObjectIterator). So I think this change should be highlighted in the release notes for the next jacrabbit-ocm release.",
            "date": "2008-09-21T10:23:06.173+0000",
            "id": 8
        }
    ],
    "component": "jackrabbit-ocm",
    "description": "Currently, it's not possible to skip a part of results returned in the form of ObjectIterator (for example, to implement db-like pagination feature with offset/max parameters).\n\nIt would be great if ObjectIterator implement RangeIterator interface, and it's trivial enough since underlying NodeIterator implements this interface.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1740",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Make ObjectIterator implement RangeIterator interface",
    "systemSpecification": true,
    "version": "1.4"
}