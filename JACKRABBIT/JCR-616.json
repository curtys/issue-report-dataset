{
    "comments": [
        {
            "author": "Julian Reschke",
            "body": "#JCR-482 is about the XML export assuming that the set of namespace prefixes is known when starting an XML export; in fact it can change while the export is executed.\n",
            "date": "2006-11-03T09:20:41.000+0000",
            "id": 0
        },
        {
            "author": "angela",
            "body": "RepositoryConfig.getRegisteredNamespaces()?  there is not RepositoryConfig in the SPI and the one contained in\njcr2spi doesn't have the mentioned method.\n\nyou probably mean RepositoryService, don'  you?",
            "date": "2006-11-03T09:32:08.000+0000",
            "id": 1
        },
        {
            "author": "Julian Reschke",
            "body": "fix typo (RepositoryService vs RepositoryConfig)",
            "date": "2006-11-03T09:36:38.000+0000",
            "id": 2
        },
        {
            "author": "Marcel Reutegger",
            "body": "Namespace prefixes cannot be just generated, because there is a notion of a repository wide namespace registry with a somewhat stable mapping between namespace URI and prefix. Initially a JCR session has to use that mapping unless the client decides to re-map the namespace locally in its session.",
            "date": "2006-11-03T10:17:05.000+0000",
            "id": 3
        },
        {
            "author": "Jukka Zitting",
            "body": "I think that instead of (or before) auto-generating a prefix for an unknown namespace the jcr2spi should ask the backend for a prefix update.\n\nHere's a few different ways I can imagine we could achieve this, arranged by network-efficiency:\n\n1) Allow the SPI to return the prefix as an optional part of a QName when using a namespace that the client has not yet seen\n2) Make the client call RepositoryService.getRegisteredNamespaces(SessionInfo) with an added namespace argument so the backend can decide whether to return the entire registry or just a subset update containing the requested prefix\n3) Add a RepositoryService.getNamespacePrefix(SessionInto, String) method for the client to explicitly request the missing prefix\n4) Make the client call RepositoryService.getRegisteredNamespaces(SessionInfo) to refresh the local copy of the registry\n",
            "date": "2006-11-03T11:07:28.000+0000",
            "id": 4
        },
        {
            "author": "Julian Reschke",
            "body": "I like 1) alot (in fact I was going to suggest something like this myself...), but 2 and 3 would work well for me as well.\n\nI'd really like to avoid 4).\n",
            "date": "2006-11-03T11:32:57.000+0000",
            "id": 5
        },
        {
            "author": "Marcel Reutegger",
            "body": "1) Allow the SPI to return the prefix as an optional part of a QName when using a namespace that the client has not yet seen\n\nI'm not sure I understand this correctly, does that mean the QName class should provide a getPrefix() which may or may not returns a prefix?\n\nI would rather prefer 4) and say that this method must return at least the mapping of namespace uri to prefix mapping for QNames that have been used through this instance of RepositoryService since it was created. The jcr2spi would then just refresh it's namespace registry when it encounters an unknown namespace uri.\n\nI'd like to avoid adding methods to the RepositoryService which overlap functionality that is already there ;)",
            "date": "2006-11-03T12:17:02.000+0000",
            "id": 6
        },
        {
            "author": "Julian Reschke",
            "body": "One problem with approach 4) is that in some backend systems, users can set arbitrary custom properties. That is, there is no namespace registry at all, and the set of namespaces used by properties can be really large. I think an SPI design that requires the remote server to return all of these mappings -- even if they may be not be used -- would be a bad idea. \n",
            "date": "2006-11-03T12:33:53.000+0000",
            "id": 7
        },
        {
            "author": "Marcel Reutegger",
            "body": "I would require that only those mappings must be available, that went through the RepositoryService. Not all, just the ones that are required to resolve QName and Path instances that were retrieved through the RepositoryService. The remote server could still have thousands of namespaces that are not known to the SPI because the SPI client never read QNames with such a namespace.\n\nme:\n> must return *at least* the mapping of namespace uri to prefix mapping for QNames that have been\n> used through this instance of RepositoryService since it was created.",
            "date": "2006-11-03T13:07:06.000+0000",
            "id": 8
        },
        {
            "author": "angela",
            "body": "> 1) Clarify that the Map returned from getRegisteredNamespaces() isn't required to \n> be complete, \n\ni'm not totally happy with this. getRegisteredNamespaces should return the complete list\navailable at the time.\n\nbut: as listed in TODO.txt issue 11), we didn't define up to now, how a client gets informed or informes itself about namespace modifications.\n\n> 2) Enhance JCR2SPI to auto-generate prefixes when it encounters namespaces \n> not in the registry. \n\nhm... why shoud the jcr2spi autogenerate prefixes? it must assert, that a given namespace is part of the namespace registry and throw if it isn't. so, we get back to the basic issue, how we define the update of the NamespaceRegistry (defined by jsr170) over the SPI.\n\nbtw: the same applies for the nodetypes.\n\nregards\nangela",
            "date": "2006-11-03T13:07:07.000+0000",
            "id": 9
        },
        {
            "author": "Julian Reschke",
            "body": "OK.\n\nI have a prototype running which at least fixes the problem for me.\n\nChanges: \n\n1) NamespaceStorage: add method \"getRegisteredNamespaces()\",\n\n2) add that to WorkspaceManager,\n\n3) use it in NamespaceRegistryImpl to get a new map when the local one is incomplete.\n\n(What's currently missing in NamespaceRegistryImpl is a way to add the newly retrieved mapping to the local map, so the refresh logic only needs to be applied once per new entry).\n\nIf people think I'm on the right track with this, I will complete the fix and submit a patch.\n\nThe optimizations we discussed can then be discussed separately.\n\n",
            "date": "2006-11-14T14:31:38.000+0000",
            "id": 10
        },
        {
            "author": "Julian Reschke",
            "body": "Proposed patch as discussed in previous comment.\n",
            "date": "2006-11-14T15:33:25.000+0000",
            "id": 11
        },
        {
            "author": "angela",
            "body": "i committed the patch with some modifications as a short term solution.\n\nform my point of view, the patch addresses the problem only partially:\nbefore throwing NamespaceException upon getPrefix and getURI the current solution checks if the \nNamespaceRegistry is really up to date.\n\nhowever:\n\n- NamespaceRegistry.getURIs and NamespaceRegistry.getPrefixes will not return all prefixes/uris\n  registered on the server, unless getPrefix or getURI has been called.\n- reregistering of a existing URI with a new prefix might not be detected\n- unregistering of an existing namespace will never result in an update of other NamespacRegistries\n  but cause failures later on, when the API user relies on the NamespaceRegistry, which is outdated.\n\ni'd say, that we need to come up with some notification approach (maybe related to the CacheBehaviour\nrecently introduced) that  addresses the problem. for the time being, reloading the mappings defined on the server might be an acceptable workaround.",
            "date": "2006-11-20T13:53:59.000+0000",
            "id": 12
        },
        {
            "author": "angela",
            "body": "adjusting subject. The same applies for the NodeTypeRegistry.",
            "date": "2006-11-20T13:55:47.000+0000",
            "id": 13
        },
        {
            "author": "Jukka Zitting",
            "body": "JCR 2.0 will most likely declare the prefix mappings of a session stable (i.e. changes in a session will not invalidate the prefix mappings in another session), so the cache invalidation issue for namespaces may become a non-issue.",
            "date": "2007-07-02T08:41:52.873+0000",
            "id": 14
        },
        {
            "author": "angela",
            "body": "based on jukkas comment i resolve this issue fixed. i will add a note to the Limitations.txt explaining the\nknown issue.",
            "date": "2007-07-11T08:48:53.648+0000",
            "id": 15
        }
    ],
    "component": "jackrabbit-spi",
    "description": "We need to define the requirements on completeness and freshness of RepositoryService.getRegisteredNamespaces().\n\nRight now the optimistic assumption seems to be that an SPI provider is able to report all namespaces that can occur in a repository beforehand. Even if it can do that (and I know of potential targets for SPI that simply can't), this seems to be quite a waste of time if these namespace prefixes aren't actually used later on.\n\nFurthermore, in SPI namespace prefixes aren't really relevant, except to enable the transient layer to return \"meaningful\" prefixes instead of automatically generated ones.\n\nTherefore my propoal would be to:\n\n1) Clarify that the Map returned from getRegisteredNamespaces() isn't required to be complete,\n\n2) Enhance JCR2SPI to auto-generate prefixes when it encounters namespaces not in the registry.\n\nI expect this to also affect RepositoryService.(un)registerNamespace(...), but let's discuss the underlying issue first...\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-616",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Completeness/Freshness of NamespaceRegistry and NodeTypeRegistry",
    "systemSpecification": true,
    "version": ""
}