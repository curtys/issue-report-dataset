{
    "comments": [
        {
            "author": "Christophe Lombart",
            "body": "Ruchi, \n\nCan you check if the following patch ( a small modification in the method checkIfNodeLocked()) is ok for your use cases ? \nNow, this method check if the lock owner is the user session.  If it is ok, I will commit this patch. \n\n    protected void checkIfNodeLocked(final String absPath) throws RepositoryException, LockedException {\n        Node node = getNode(absPath);\n\n        // Node can hold nock or can be locked with precedencor\n        if (node.isLocked()) {\n            Lock lock = node.getLock();\n            String lockOwner = lock.getLockOwner();\n            if (! session.getUserID().equals(lockOwner))\n            {\n                final String path = lock.getNode().getPath();\n                throw new LockedException(lockOwner, path);\n            }\n        }\n    }",
            "date": "2007-05-11T11:11:27.990+0000",
            "id": 0
        },
        {
            "author": "ruchi goel",
            "body": "Hi Christophe,\n   This looks good. This will simply mean that  only  a user who has locked the node can update or checkin the node. I hope this complies with JSR170 specs . I remember reading that anyone who has locktoken can unlock the node, it does not have to be always lockowner. \n\n\nI think my requirements are met for now with these changes. You can commit  the changes.\n\nThanks,\nRuchi",
            "date": "2007-05-11T17:32:26.717+0000",
            "id": 1
        },
        {
            "author": "Christophe Lombart",
            "body": "Done. Now, we check in this method if the lock owner is the current user session.",
            "date": "2007-05-13T19:06:44.115+0000",
            "id": 2
        }
    ],
    "component": "jackrabbit-ocm",
    "description": "I am planning to use open-scoped lock.  For which , I need to persist the locktoken along with the node  so that it can be used by another session for unlocking.Tested with Jackrabbit RMI client and it works fine.\n\nBut I am using jcr-mapping layer to achieve the above in my project.Here I want that  as soon as a node is checked out, it gets locked by the session and the lock is stored in \"lockToken\" property of node \"Document\". For that I need to update the Document node after locking .\n\n*public void checkout(String path)throws CMSException {\n       pm = getPersistenceManager();\n        try{\n           pm.checkout(path);*\n*            String lockToken = pm.lock(path,true,false);   **        \n    Document doc = this.getDocument(path);**           \n  doc.setLockToken(lockToken);     //for persisting lockToken\n           doc.update();\n        }catch(LockedException le){\n          System.out.println(le.getLockedNodePath() + \"is locked by\" + le.getLockOwner());         }catch(Exception e){\n            throw new CMSException(e.getMessage(),e.getCause());\n        }\n   }*\n\n\nHere doc.update() fails with Locked Exception.  The problem here is PersistenceManagerImpl has a method checkIfNodeLocked(path)  which returns LockException if node is locked. This method is checked before every update/insert. So, I am not able to update a locked node. I need to persist the locktoken in the node . What is the reason of checking  for a lock before saving ? Ideally , it should throw error only if node is locked and session does not hold the lockToken .\n\nIf the session who has locked the node tries to save the node without unlocking, it should be allowed .\n\np.s.\nI am able to achieve the above by simple Jackrabbit RMI client.\n<code>\n               ClientRepositoryFactory factory = new ClientRepositoryFactory();\n               Repository repository = factory.getRepository(\"rmi://localhost:1101/jackrabbit\");\n               Session session = repository.login(new SimpleCredentials(\"superuser\", \"superuser\".toCharArray()),\"Portal\");                        String user = session.getUserID();\n               String name = repository.getDescriptor(Repository.REP_NAME_DESC);\n               System.out.println(\n                       \"Logged in as \" + user + \" to a \" + name + \" repository.\");\n\n               /* Testing the locks functionality */\n               Node n = session.getRootNode().getNode(\"cms/childfolder1/check.txt\");\n\n              * Lock lck = n.lock(true, false); // deeplock,open-scoped\n               n.setProperty(\"ps:locktoken\",lck.getLockToken());\n               n.setProperty(\"ps:language\", \"sanskrit\");\n*\n               System.out.println(\"Lock#isLive=\" + lck.isLive());\n               System.out.println(\"Node#isLocked=\" +  session.getRootNode().getNode(\"cms/childfolder1/check.txt\").isLocked());\n               session.save();\n               session.logout();\n     <code> ",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-909",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "checkIfNodeLocked()  in jcr mapping layer  does not behave properly when open scoped locks are used",
    "systemSpecification": true,
    "version": ""
}