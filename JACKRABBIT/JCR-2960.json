{
    "comments": [
        {
            "author": "Stefan Guggisberg",
            "body": "regression of JCR-2762.\n\ntest case: \n\nany long value > 0x3FFFFFFFFFFFFFFF (i.e. with any of the 2 most significant bits set)\ncauses an overflow on deserialization.\n\nthis obviously also includes Long.MAX_VALUE and Long.MIN_VALUE...\n\nexample:\nlong test = 0x3FFFFFFFFFFFFFFFL;\n \nBundleWriter.writeVarLong(test);\ntest == BundleReader.readVarLong()  // => ok\n\ntest++;\nBundleWriter.writeVarLong(test);\n=> BundleReader.readVarLong() returns 0",
            "date": "2011-05-06T14:36:43.181+0000",
            "id": 0
        },
        {
            "author": "Jukka Zitting",
            "body": "Ouch, good catch! Fixed in revision 1100286 along with tests also for some other value types.\n\nLuckily this is not a serialization bug so none of the stored data itself is compromized unless used as input for copies or further calculations. However, we'll need to backport this fix to the 2.2 branch and warn people not to rely on large values read from the repository until this fix has been applied. I'll take care of that first thing next week.",
            "date": "2011-05-06T17:13:11.485+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 2.2 branch in revision 1127054.",
            "date": "2011-05-24T13:57:34.735+0000",
            "id": 2
        }
    ],
    "component": "jackrabbit-core",
    "description": "When a long value assigned to a property is too big, when restarting the server the value become 0 !! \n\nThe test pass with versions 1.6.4 and 2.0",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2960",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Critical",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Long values not properly stored",
    "systemSpecification": true,
    "version": "2.2, 2.2.1, 2.2.4, 2.2.5"
}