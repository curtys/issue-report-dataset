{
    "comments": [
        {
            "author": "Christophe Lombart",
            "body": "From now, the Filter is using the converter if it is specified in the mapping definition. \nLet me know if something is wrong\n\nThanks",
            "date": "2008-05-21T20:46:51.918+0000",
            "id": 0
        }
    ],
    "component": "jackrabbit-ocm",
    "description": "I have a POJO with the following field:\n\n    @Field(converter = LocaleConverter.class)\n    private Locale                locale;\n\nWhen I attempt to query for objects based on this field, I get a NullPointerException:\n\njava.lang.NullPointerException\n        at org.apache.jackrabbit.ocm.query.impl.FilterImpl.getStringValue(FilterImpl.java:281)\n        at org.apache.jackrabbit.ocm.query.impl.FilterImpl.addEqualTo(FilterImpl.java:129)\n\nFilterImpl should preferentially use the atomic type converter defined in the @Field annotation to convert the value, then fallback to the global converters.  Converting the Locale to a string for use in the query is a workaround, but the logic for string conversion should only reside in my LocaleConverter class.\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1286",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "FilterImpl.getStringValue() does not use custom converter class specified in @Field annotation",
    "systemSpecification": true,
    "version": "1.4"
}