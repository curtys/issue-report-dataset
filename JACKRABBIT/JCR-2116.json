{
    "comments": [
        {
            "author": "Stefan Guggisberg",
            "body": "apart from syncing the definitions there's also some new protected properties with special semantics which need to be supported/implemented:\n\ne.g. \njcr:createdBy\njcr:lastModifiedBy\njcr:etag\n",
            "date": "2009-06-10T13:27:50.326+0000",
            "id": 0
        },
        {
            "author": "Tobias Bocanegra",
            "body": "synced built-in nodetypes with spec in revision 785863 with some minor adaptions. see builtin_nodetypes.cnd for comments.\n",
            "date": "2009-06-18T00:12:13.685+0000",
            "id": 1
        },
        {
            "author": "Stefan Guggisberg",
            "body": "handing over to tobi...",
            "date": "2009-06-18T16:26:55.791+0000",
            "id": 2
        },
        {
            "author": "Tobias Bocanegra",
            "body": "final change, defined nt:base and nt:hierarchyNode as abstract.\n\nCommitted revision 796876.\n",
            "date": "2009-07-22T20:57:10.745+0000",
            "id": 3
        },
        {
            "author": "Tobias Bocanegra",
            "body": "some of the property definitions of mix:versionable have changed, namely are the OPV flags now IGNORE",
            "date": "2009-07-23T08:45:01.246+0000",
            "id": 4
        },
        {
            "author": "Tobias Bocanegra",
            "body": "fixed. Committed revision 797662.",
            "date": "2009-07-24T21:31:19.606+0000",
            "id": 5
        },
        {
            "author": "Alexander Klimetschek",
            "body": "I just happened to deal with the new semantics of the protected jcr:created/By and jcr:lastModified/By properties introduced with the mix:created and mix:lastModified mixins in JSR-283, so I was looking at the new code for that.\n\nIt looks like only jcr:created will be set by the implementation. jcr:lastModified must also be considered in case of mix:lastModified as declaring nodetype (currently it's only done for nt:resource). And both jcr:createdBy and jcr:lastModifiedBy must also be set if their declaring nodetype is mix:created or mix:lastModified, respectively (using session.getUserID() I reckon). Thus reopening.",
            "date": "2009-07-28T20:37:42.395+0000",
            "id": 6
        },
        {
            "author": "Tobias Bocanegra",
            "body": "please note, that jcr:lastModified(by) is currently not defined protected in jackrabbit for ensuring backwards compatibility. this is according to the spec that defines the protected attribute as variant:\n\n3.7.11.8mix:lastModified \n[mix:lastModified] mixin \n  - jcr:lastModified (DATE) protected? OPV? \n  - jcr:lastModifiedBy (STRING) protected? OPV? \n\nThis mixin node type can be used to provide standardized modification \ninformation properties to a node. Since the properties are protected, their values \nare controlled by the repository, which should set them appropriately upon a \nsignificant modification of the subgraph of a node with this mixin. What \nconstitutes a significant modification will depend on the semantics of the various \nparts of a node's subgraph and is implementation-dependent. \n\n\nhowever, i will look into the jcr:created issue",
            "date": "2009-07-28T21:34:39.470+0000",
            "id": 7
        },
        {
            "author": "Alexander Klimetschek",
            "body": "I see the backwards compatibility issue. Was just inspecting the code that sets those values if not present.\n\nI think one could auto-set those properties if the mixin is set on the node and a \"significant\" modification happened, but if such a value is set via setProperty() no exception is thrown. Would this be ok wrt the spec?\n\nBTW, in the proposed final draft of JSR-283, the mixin types are defined slightly different (no question marks anymore and no OPV defined):\n\n3.7.11.8 mix:lastModified \n[mix:lastModified] mixin \n  - jcr:lastModified (date) protected \n  - jcr:lastModifiedBy (string) protected \n",
            "date": "2009-07-28T22:28:21.258+0000",
            "id": 8
        },
        {
            "author": "Tobias Bocanegra",
            "body": "well, the current version (21-jul-2009) has this:\n\n[mix:lastModified] mixin\n  - jcr:lastModified (DATE) autocreated protected? OPV?\n  - jcr:lastModifiedBy (STRING) autocreated protected? OPV?\n\n[mix:created] mixin\n  - jcr:created (DATE) autocreated protected? OPV?\n  - jcr:createdBy (STRING) autocreated protected? OPV?\n",
            "date": "2009-07-28T22:36:09.176+0000",
            "id": 9
        },
        {
            "author": "Alexander Klimetschek",
            "body": "I thought the PFD was the most recent version. Nevertheless, what I would think the most intuitive behaviour would be \"autocreated\" but not \"protected\", so that you can manually override jcr:lastModified if you eg. import the content from somewhere else. Does the \"?\" mean that this choice is up to the implementation? If yes, I would strongly vote for only implementing autocreated for all those props.",
            "date": "2009-07-29T09:06:23.890+0000",
            "id": 10
        },
        {
            "author": "Stefan Guggisberg",
            "body": "> I thought the PFD was the most recent version\n\nit's the most recent 'Public' version.",
            "date": "2009-07-29T09:11:04.169+0000",
            "id": 11
        },
        {
            "author": "Alexander Klimetschek",
            "body": "> it's the most recent 'Public' version.\n\nAh, thanks. Answer to myself after getting the cvs version of jsr-283: protected? means it is an implementation variant (3.7.9.1), so not implementing protected is ok.\n\nBut my proposal goes further: \"autocreated\" means the property shall only be created if it is not existing, which is ok for jcr:created, but not for jcr:lastModified. So if we don't do \"protected\", ie. always set by repository on significant modification *and* throwing ConstraintViolationException if a client tries to modify it, we should let the repository set it on significant modification if it is not set by the client manually.\n\nThis way it works as expected (automatically set), but you can also override it on imports. And old clients that might set those properties manually all the time, since they weren't automatically set in Jackrabbit 1.x, don't get the ConstraintViolationException (if they don't yet are overcautious and catch it for those setProperty calls). Although old JCR-1.0 clients using the then-nonexistent mix:created/lastModified mixins are probably a rare case ;-)",
            "date": "2009-07-29T10:06:16.544+0000",
            "id": 12
        },
        {
            "author": "Tobias Bocanegra",
            "body": "> But my proposal goes further: \"autocreated\" means the property shall only be created if it is not existing, which is ok for jcr:created, but not for jcr:lastModified\nyes. autocreated means autocreated if a new node is created.\n\n> So if we don't do \"protected\", ie. always set by repository on significant modification *and* throwing ConstraintViolationException if a client tries to modify it, \nthis makes no sense? if it's not protected, the client can set it as he wishes.\n\n> we should let the repository set it on significant modification if it is not set by the client manually. \nyes. but this would be a new issue.",
            "date": "2009-07-29T10:32:23.488+0000",
            "id": 13
        },
        {
            "author": "Tobias Bocanegra",
            "body": "Committed revision 798847.\n",
            "date": "2009-07-29T10:34:48.842+0000",
            "id": 14
        }
    ],
    "component": "jackrabbit-core, nodetype",
    "description": "sync definitions of built-in node types with spec",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2116",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "JSR 283: Built-In Node Types",
    "systemSpecification": true,
    "version": ""
}