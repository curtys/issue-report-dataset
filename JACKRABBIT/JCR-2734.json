{
    "comments": [
        {
            "author": "Stefan Guggisberg",
            "body": "applied patch and fixed some typos in svn r995406.\n\nbtw: nice catch!\n\nand thanks for providing a patch",
            "date": "2010-09-09T12:46:24.058+0000",
            "id": 0
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 2.1 branch in revision 1174814 and to the 2.0 branch in revision 1174815.",
            "date": "2011-09-23T14:43:36.892+0000",
            "id": 1
        }
    ],
    "component": "jackrabbit-core, nodetype",
    "description": "Hi,\n\nI encountered a problem with the BitsetENTCacheImpl and the BitsetKey comparisons. I have 3 bitsets A, B and C , defined as :\n\nA : bits 0,4,17,38,60,63 \nB : bits 4,17,38,52,59,60\nC : bits 0,17,38,60,61,63\n\nIf call BitsetKey.compareTo  method on each pair , i get : \n\nA < B\nB < C\nC < A\n\nwhich is not correct and leads to inconsistencies in the TreeSet.\n\nAll 2 bitsets are contained in one single word (max bit is 63). So, the method is comparing first the 32 MSB - which are enough in that case to compare the bits. But the problem is, that the difference between the 32 MSB of B and C is too big to fit in an integer : for B, we have 403701824 - for C , 2952790080 . The difference between both is 2549088256 (positive) , which is bigger than Integer.MAX_VALUE , and makes a  -1745879040 (negative) after casting to an int .\n\nIn order to fix that, the shift should either be bigger in order to fit a signed integer ( 33 instead of 32 ), or a simple -1 / 0 / +1 could be returned\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2734",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Inconsistencies in BitSetKey comparison",
    "systemSpecification": true,
    "version": "2.1.1"
}