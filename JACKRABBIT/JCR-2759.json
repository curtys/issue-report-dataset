{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "Proposed patch.",
            "date": "2010-09-28T08:55:29.127+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "Applied patch in revision: 1002596",
            "date": "2010-09-29T12:59:04.026+0000",
            "id": 1
        }
    ],
    "component": "jackrabbit-core",
    "description": "Executing a query with multiple OR expressions in a predicate leads to score values that depend on the order of the operands.\n\nFor example, the following query:\n\n//*[jcr:contains(@prop1, 'foo') or jcr:contains(@prop2, 'foo') or jcr:contains(@prop3, 'foo')] order by @jcr:score descending\n\nwill return a slightly different result compared to:\n\n//*[jcr:contains(@prop3, 'foo') or jcr:contains(@prop1, 'foo') or jcr:contains(@prop2, 'foo')] order by @jcr:score descending\n\nInternally jackrabbit parses the predicate of the first query into a tree:\n\norExpr(orExpr(contains(prop1, 'foo'), contains(prop2, 'foo')), contains(prop3, 'foo'))\n\nLucene will calculate the score for the inner OR expression first and then for the outer, which is not equivalent with a nested expression that has property names in a different sequence.\n\nThe query should be translated internally into a single OR expression with three operands. That way, the score value is always the same, irrespective of the order of the operands.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2759",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Collapse nested OR expressions",
    "systemSpecification": true,
    "version": ""
}