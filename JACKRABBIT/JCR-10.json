{
    "comments": [
        {
            "author": "Tobias Bocanegra",
            "body": "verified. this behaviour is wrong. (actually only happensm when using the derived mixin type, not when using mix:versionable directly)",
            "date": "2004-10-15T15:20:30.000+0000",
            "id": 0
        }
    ],
    "component": "",
    "description": "It seems that when a new node is saved through the parent node, new properties might get created, which are not saved. To persist those properties the new node must be saved again.\n\nExample:\n\n(Consider a mixin type \"extVer\" extending the standard type mix:versionable.)\n\n      Node node = parent.addNode(\"newNode\", \"nt:base\");\n      node.addMixin(\"extVer\");\n      // \"mix:versionable\" properties do not exist here\n      \n      // save the new node\n      parent.save();\n\n      // now \"mix:versionable\" properties like \"jcr:isCheckedOut\"\n      // exist in the \"node\" but:\n      //    node.getProperty(\"jcr:isCheckedOut\").isNew() == true\n      // fix:\n      node.save();\n\nIf the last node.save() opertation would not be done, a RepositoryException would result if a node.checkIn() would be done immediately after parent.save().\n\nThis seems counterintuitive and seems like an error. I wonder whether the properties should not be added upon \"node.addMixin\" ? At least \"parent.save()\" should (or might I say must ?) not only add the properties but also save them.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-10",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "save() might create new transient properties",
    "systemSpecification": true,
    "version": ""
}