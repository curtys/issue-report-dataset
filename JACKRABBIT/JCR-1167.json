{
    "comments": [
        {
            "author": "Dominique Pfister",
            "body": "Test case showing issue.",
            "date": "2007-10-09T13:15:52.330+0000",
            "id": 0
        },
        {
            "author": "Dominique Pfister",
            "body": "Source of issue: CachingHierarchyManager, when notified about a reordering, examined every child node it had in its internal PathMap and - if a name/index combination changed - moved the child node to its new position. If the reordering, however, involved multiple nodes (as in the test case), this could result in:\n\nb[3] -> b[1] (overwriting what was in b[1])\nb[1] -> b[2] (overwriting what was in b[2])\nb[2] -> b[3]\n\nleaving only one child node in the path map. Changed to the following: every child node in the PathMap is added to a temporary map, which serves as new children node map - provided that some reordering actually took place.\n\nFixed in revision 583151.\n\n",
            "date": "2007-10-09T13:24:21.924+0000",
            "id": 1
        }
    ],
    "component": "jackrabbit-core",
    "description": "Reordered, unsaved children of a node do not have the correct path. In the test case attached, the following operation is attempted with three SNS children named b[1], b[2], b[3]: the last element is ordered before the first three times, which should result in the initial children order.\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1167",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Paths not correct after reordering children",
    "systemSpecification": true,
    "version": "0.9, 1.0, 1.0.1, 1.1, 1.1.1, 1.2.1, 1.2.2, 1.2.3, 1.3, 1.3.1, 1.3.3"
}