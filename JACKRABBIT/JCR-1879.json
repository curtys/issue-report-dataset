{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "Fixed in svn revision: 720540",
            "date": "2008-11-25T17:06:31.705+0000",
            "id": 0
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.5 branch in revision 731989.",
            "date": "2009-01-06T16:26:09.434+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Oops, it seems like this issue only affected post-1.5 code, so in revision 732121 I reverted my previous merge.",
            "date": "2009-01-06T21:15:26.619+0000",
            "id": 2
        },
        {
            "author": "S\u00e9bastien Launay",
            "body": "I have the same exception using Jackrabbit 1.5.3 and Lucene 2.3.2:\njava.io.IOException: Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\n\tat org.apache.lucene.store.FSDirectory.getDirectory(FSDirectory.java:192)\n\tat org.apache.jackrabbit.core.query.lucene.PersistentIndex.<init>(PersistentIndex.java:63)\n\tat org.apache.jackrabbit.core.query.lucene.MultiIndex.getOrCreateIndex(MultiIndex.java:587)\n\tat org.apache.jackrabbit.core.query.lucene.MultiIndex$CreateIndex.execute(MultiIndex.java:1675)\n\tat org.apache.jackrabbit.core.query.lucene.MultiIndex.executeAndLog(MultiIndex.java:972)\n\tat org.apache.jackrabbit.core.query.lucene.MultiIndex.commitVolatileIndex(MultiIndex.java:1017)\n\tat org.apache.jackrabbit.core.query.lucene.MultiIndex.flush(MultiIndex.java:862)\n\tat org.apache.jackrabbit.core.query.lucene.Recovery.run(Recovery.java:172)\n\tat org.apache.jackrabbit.core.query.lucene.Recovery.run(Recovery.java:85)\n\tat org.apache.jackrabbit.core.query.lucene.MultiIndex.<init>(MultiIndex.java:311)\n\tat org.apache.jackrabbit.core.query.lucene.SearchIndex.doInit(SearchIndex.java:456)\n\tat org.apache.jackrabbit.core.query.AbstractQueryHandler.init(AbstractQueryHandler.java:59)\n\tat org.apache.jackrabbit.core.SearchManager.initializeQueryHandler(SearchManager.java:553)\n\tat org.apache.jackrabbit.core.SearchManager.<init>(SearchManager.java:239)\n\tat org.apache.jackrabbit.core.RepositoryImpl$WorkspaceInfo.getSearchManager(RepositoryImpl.java:1761)\n\tat org.apache.jackrabbit.core.RepositoryImpl.initWorkspace(RepositoryImpl.java:667)\n\tat org.apache.jackrabbit.core.RepositoryImpl.initStartupWorkspaces(RepositoryImpl.java:480)\n\tat org.apache.jackrabbit.core.RepositoryImpl.<init>(RepositoryImpl.java:321)\n\tat org.apache.jackrabbit.core.RepositoryImpl.create(RepositoryImpl.java:618)\n\tat org.apache.jackrabbit.core.TransientRepository$1.getRepository(TransientRepository.java:187)\n\tat org.apache.jackrabbit.core.TransientRepository.startRepository(TransientRepository.java:261)\n\tat org.apache.jackrabbit.core.TransientRepository.login(TransientRepository.java:329)\n\tat org.apache.jackrabbit.core.TransientRepository.login(TransientRepository.java:359)\n\tat org.ametys.plugins.oswf.store.JackrabbitWorkflowStore._getSession(JackrabbitWorkflowStore.java:142)\n\tat org.ametys.plugins.oswf.store.JackrabbitWorkflowStore.moveToHistory(JackrabbitWorkflowStore.java:778)\n\tat com.opensymphony.workflow.AbstractWorkflow.createNewCurrentStep(AbstractWorkflow.java:1474)\n\tat com.opensymphony.workflow.AbstractWorkflow.transitionWorkflow(AbstractWorkflow.java:1256)\n\tat com.opensymphony.workflow.AbstractWorkflow.doAction(AbstractWorkflow.java:567)\n\tat org.ametys.plugins.oswf.store.AbstractFunctionalWorkflowTest.testExampleWorkflow(AbstractFunctionalWorkflowTest.java:124)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat junit.framework.TestCase.runTest(TestCase.java:168)\n\tat junit.framework.TestCase.runBare(TestCase.java:134)\n\tat junit.framework.TestResult$1.protect(TestResult.java:110)\n\tat junit.framework.TestResult.runProtected(TestResult.java:128)\n\tat junit.framework.TestResult.run(TestResult.java:113)\n\tat junit.framework.TestCase.run(TestCase.java:124)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:232)\n\tat junit.framework.TestSuite.run(TestSuite.java:227)\n\tat org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:45)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n\nIn my test case, i create lots of workflows and they creates lots of JCR sessions.\nIf i use a pool of sessions, i can not reproduce this issue.\n\nSo, this issue also affect the 1.5 branch and a new merge :) will be greatly appreciated...",
            "date": "2009-03-16T11:02:07.859+0000",
            "id": 3
        },
        {
            "author": "Marcel Reutegger",
            "body": "> So, this issue also affect the 1.5 branch and a new merge :) will be greatly appreciated...\n\nI'm not able to reproduce this issue on the 1.5 branch. Can you please create a new issue and provide a test? Thanks.",
            "date": "2009-04-01T14:37:21.498+0000",
            "id": 4
        },
        {
            "author": "S\u00e9bastien Launay",
            "body": "After trying to reproduce the bug in a test case (which i was unable) i found that in my initial test case (stack trace above) two repositories were simultaneously started.\nOpening a session in the second repository will fail with a traditional \"lock not acquired\" exception.\nBut opening a second session in this repository will acquire the lock but will throw the above exception.\n\nIndeed, the lock is checked when trying to create the first session, then the lock file is deleted (RepositoryImpl.doShutdown() calls repLock.release()) because the session creation fails.\nThe second session will not find a lock (previously removed) and then will fail with the lock factory instance exception.\n\nSo, this is not the same bug and clearly a twisted case ;).\nBut i can create a new issue in order to avoid lock deletion if this is not the right repository.",
            "date": "2009-04-03T14:40:34.705+0000",
            "id": 5
        },
        {
            "author": "Marcel Reutegger",
            "body": "> But i can create a new issue in order to avoid lock deletion if this is not the right repository.\n\nplease do so, this clearly sounds like a bug.",
            "date": "2009-04-03T15:38:38.705+0000",
            "id": 6
        },
        {
            "author": "Ryan Vanderwerf",
            "body": "I'm having the same issue in 1.4.2. Is this issue back ported to a 1.5 release?",
            "date": "2009-04-22T15:10:03.215+0000",
            "id": 7
        },
        {
            "author": "Marcel Reutegger",
            "body": "There is some confusion about issues related to this exception message. *This* issue fixes a bug that was only present in jackrabbit-core trunk and was never released. The issue you're interested in is probably JCR-2057.",
            "date": "2009-04-22T15:21:50.799+0000",
            "id": 8
        }
    ],
    "component": "jackrabbit-core",
    "description": "Opening a TransientRepository in a loop throws the exception \"Directory was previously created with a different LockFactory instance\".\n\nTest case:\n\nfor (int i = 0; i < 3; i++) {\n\tFileUtils.deleteDirectory(new File(\"repository\"));\n\tRepository rep = new TransientRepository();\n\tSession session = rep.login(new SimpleCredentials(\"\", new char[0]));\n\tsession.logout();\n}\n\nThe problem seems to be that org.apache.lucene.store.FSDirectory.DIRECTORIES is not cleared (FSDirectory.close() is not called?).\n\nStack trace:\n\nException in thread \"main\" javax.jcr.RepositoryException: Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it: Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it: Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\n\tat org.apache.jackrabbit.core.SearchManager.initializeQueryHandler(SearchManager.java:555)\n\tat org.apache.jackrabbit.core.SearchManager.<init>(SearchManager.java:239)\n\tat org.apache.jackrabbit.core.RepositoryImpl.getSystemSearchManager(RepositoryImpl.java:688)\n\tat org.apache.jackrabbit.core.RepositoryImpl.access$3(RepositoryImpl.java:681)\n\tat org.apache.jackrabbit.core.RepositoryImpl$WorkspaceInfo.getSearchManager(RepositoryImpl.java:1780)\n\tat org.apache.jackrabbit.core.RepositoryImpl.initWorkspace(RepositoryImpl.java:667)\n\tat org.apache.jackrabbit.core.RepositoryImpl.initStartupWorkspaces(RepositoryImpl.java:480)\n\tat org.apache.jackrabbit.core.RepositoryImpl.<init>(RepositoryImpl.java:321)\n\tat org.apache.jackrabbit.core.RepositoryImpl.create(RepositoryImpl.java:618)\n\tat org.apache.jackrabbit.core.TransientRepository$2.getRepository(TransientRepository.java:241)\n\tat org.apache.jackrabbit.core.TransientRepository.startRepository(TransientRepository.java:261)\nCaused by: java.io.IOException: Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\n\tat org.apache.lucene.store.FSDirectory.getDirectory(FSDirectory.java:192)\n\tat org.apache.jackrabbit.core.query.lucene.directory.FSDirectoryManager.getDirectory(FSDirectoryManager.java:64)\n\tat org.apache.jackrabbit.core.query.lucene.MultiIndex.<init>(MultiIndex.java:227)\n\tat org.apache.jackrabbit.core.query.lucene.SearchIndex.doInit(SearchIndex.java:477)\n\tat org.apache.jackrabbit.core.query.AbstractQueryHandler.init(AbstractQueryHandler.java:59)\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1879",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "\"Directory was previously created with a different LockFactory\" when open, close, delete a repository in a loop",
    "systemSpecification": true,
    "version": "1.6"
}