{
    "comments": [
        {
            "author": "Jervis Liu",
            "body": "I am not an expert in security, so I did a bit research and found following:\n\n1. Encrypt password using MD5 or SHA-1 etc, then configure the underlying database to let it know the password passed in is encrypted. Similiar to this post tried to achieve:\nhttp://www.coderanch.com/t/307198/JDBC/java/Encrypted-Password-Oracle-JDBC\n\nThe problem for this approach is that the database configuration part can be very db specific or even version specific. If this is true, it will be very hard for us to maintain.\n\n2. Most application servers have a way to store database password as encrypted other than in plain text. For example, this is how it is done in JBOSS AS: \nhttp://community.jboss.org/wiki/encryptingdatasourcepasswords\n\nI wonder if it is possible to do similar things in JackRabbit, eg, we delegate the db authentication part in repository.xml to another JAAS module (in the example above, the SecureIdentityLoginModule). But please do not ask me how SecureIdentityLoginModule is implemented, I have not figured this out yet. \n\nPlease comment. \n\n",
            "date": "2010-08-04T07:53:47.203+0000",
            "id": 0
        },
        {
            "author": "Kris Hofmans",
            "body": "I currently work for a big international pharmaceutical company right now with strict security policies.\nWe would also like to store things in jackrabbit, but this is a stopper, we are never allowed to store passwords cleartext in a file.\n\nWe cannot use the JNDI solution because we use weblogic as an application server and when using a JNDI datasource jackrabbit tries to set auto commit to true which is, understandably, not allowed.",
            "date": "2011-07-19T13:47:11.213+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Done in revision 1154947 by allowing passwords to be specified in base64-encoding. To do this, prefix the base64-encoded password with \"{base64}\". For example, the following two password configurations are equivalent:\n\n    <param name=\"password\" value=\"test\"/>\n    <param name=\"password\" value=\"{base64}dGVzdA==\"/>\n",
            "date": "2011-08-08T13:21:47.415+0000",
            "id": 2
        },
        {
            "author": "Bart van der Schans",
            "body": "Hi Jukka,\n\nIt could be that I'm missing something completely, but how is encoding the same as encryption? It doesn't make sense to me to use base64 encoding for storing passwords as you can just decode them. I don't think there's any (easy) way to decrypt an encrypted password and use it for the db connection in a really secure way. Maybe you can try to obfuscate a pre-shared key in the java code and use that to decrypt the encrypted password. That would at least make it much harder to decipher the password but certainly not impossible.\n\nAnother option might be to just ask for the password on startup which is often the case with ssl certificates in httpd, but it makes restarting much more a hassle. You can automate most of that though, for example with scripts that remotely login over ssh, except when a server comes up after a reboot.\n\nRegards,\nBart",
            "date": "2011-08-08T15:08:43.492+0000",
            "id": 3
        },
        {
            "author": "Jukka Zitting",
            "body": "As you say, proper encryption in this case is impossible without some out-of-band source of the encryption key. And providing something like that is IMHO outside the scope of Jackrabbit. Should a more secure setup like that be needed, my recommendation would be to configure the database connection in JNDI with a container that supports such a setup and then just point Jackrabbit to that data source.\n\nThe Base64 approach I added is pretty much equivalent to the approach used by JBoss, I just use base64 instead of a more complicated encoding based on some hardcoded key. I actually prefer this approach to the one used by JBoss, as it makes it obvious that the only benefit over plain text passwords is security by obscurity.\n\nIdeally I wouldn't even have implemented anything like this, but I keep hearing this complaint too often from people who also agree that not allowing plain text passwords for something like this is silly but enforced by some fixed policy they can't change.\n",
            "date": "2011-08-08T16:03:20.238+0000",
            "id": 4
        }
    ],
    "component": "config",
    "description": "Basically this is same to the issue https://issues.apache.org/jira/browse/JCR-2673. I can not reopen JCR-2673, so I filed a new one instead. \n\nThe reason for this jira is because for a lot of companies it is not allowed to store password in a clear text. \n\nSorry, I dont know how this can be implemented yet. But I hope at least the requirement is clear. \n\nThanks.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2697",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Critical",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Add support for encrpted db password in repository.xml",
    "systemSpecification": true,
    "version": "2.1"
}