{
    "comments": [
        {
            "author": "Stefan Guggisberg",
            "body": "fixed typos and examples entry",
            "date": "2006-10-04T10:37:54.000+0000",
            "id": 0
        },
        {
            "author": "Pavel Hudyak",
            "body": "This issue is a blocker for our project because we are additing many child nodes concurrently. The issue is reproducible starting from 3 threads that makes production use of Jackrabbit impossible. \n\nAnd seems there is no reasonable workaround for the issue: locking or synchronization will make the creation of nodes a serious bottleneck.\n--\nPavel",
            "date": "2006-10-18T09:37:19.000+0000",
            "id": 1
        },
        {
            "author": "Stefan Guggisberg",
            "body": "fixed in svn rev. 470869\n\nthe following concurrent modifications are now handled gracefully:\n\n- session  1  adds or removes child node 'x', session 2 adds or removes child node 'y'\n- session  1  adds or removes child node 'x', session 2 adds or removes property 'y'\n",
            "date": "2006-11-03T16:18:49.000+0000",
            "id": 2
        }
    ],
    "component": "jackrabbit-core",
    "description": "consider the following scenario:\n- session1 modifies node /a by adding a child node b\n- session2 modifies node /a by adding a child node c\n- session2 saves its changes \n- session1 tries to save its changes which results in a InvalidItemStateException\n\nthis behavior is in accordance with the spec. the spec however doesn't prevent a \nmore lenient handling of this scenario.\n\nif the concurrent modifications are non-conflicting and trivial the changes could\nbe silently merged in session1's transient state of node /a.\n\nexamples for trivial non-conflicting changes:\n- s1 adds child node a, s2 removes child node b\n- s1 adds child node a, s2 adds child node b\n- s1 adds child node a, s2 adds mixin type\n\nexamples for non-trivial and/or conflicting changes:\n- s1 removes child node a, s2 removes child node a\n- s1 adds child node a, s2 adds child node a\n- s1 adds sns child node a (-> a[3]), s2 adds sns child node a (-> a[3])\n- s1 adds sns child node a (-> a[3]), s2 removes sns child node a[1]\n- s1 removes sns child node a[2], s2 reorders child nodes affecting sns nodes a\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-584",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Improve handling of concurrent node modifications",
    "systemSpecification": true,
    "version": ""
}