{
    "comments": [
        {
            "author": "Alexander Klimetschek",
            "body": "Unit test for this problem, based on https://issues.apache.org/jira/secure/attachment/12368670/CheckoutFailure.java",
            "date": "2008-02-26T11:19:58.707+0000",
            "id": 0
        },
        {
            "author": "Jukka Zitting",
            "body": "Resolving as Duplicate of JCR-1399.\n\nA test case should be treated as an integral part of the feature or bug fix being implemented, so I see little value (or even harm) in having separate issues for test cases. Only if you're just adding the test case to improve test coverage without changing any of the related product code, should IMHO a separate issue be created for a test case.\n\nAnyway, thanks for the effort, good test cases are very valuable! I committed the this test case in revision 631261 with a summary pointing to JCR-1399.",
            "date": "2008-02-26T15:58:15.097+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Reopening with to add the test case in Jackrabbit trunk instead of the 1.3 branch.",
            "date": "2008-02-26T16:49:56.310+0000",
            "id": 2
        },
        {
            "author": "Jukka Zitting",
            "body": "It's a good practice to use assertions for the expected failure points of the test case.\n\nIn this case, instead of allowing the InvalidItemStateException to be thrown as an error, we should catch it like this:\n\n    // critical location regarding item state manager caching (see JCR-1197)\n    try {\n        grandChildNode.checkout();\n    } catch (InvalidItemStateException e) {\n        fail(\"JCR-1197: Node.restore() may throw InvalidItemStateException\");\n    }\n\nAlso, do we really need the loops? A test case should be as simple and straightforward as possible.",
            "date": "2008-02-27T11:11:16.712+0000",
            "id": 3
        },
        {
            "author": "Alexander Klimetschek",
            "body": "I was looking for a expectThisException(String s, Exception e) method in the Junit API, didn't find one, where catch + fail would be the right solution - although the exception stack trace is lost. I found myself using assertTrue(\"message\", false) instead. Thanks for the pointer!",
            "date": "2008-02-27T11:34:21.632+0000",
            "id": 4
        },
        {
            "author": "Alexander Klimetschek",
            "body": "No, I don't think the loop is needed. I just copied over https://issues.apache.org/jira/secure/attachment/12368670/CheckoutFailure.java without touching the inner code.",
            "date": "2008-02-27T12:23:20.162+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged the test case to trunk in revision 703888.",
            "date": "2008-10-12T21:56:47.272+0000",
            "id": 6
        }
    ],
    "component": "jackrabbit-core, test",
    "description": "Add a unit test for JCR-1399 in the 1.3 branch.\n\nA test for the original feature in the trunk/1.4 (JCR-1197) needs a separate issue. ",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1420",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "OTHER",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Add test for Node.restore() may throw InvalidStateException",
    "systemSpecification": true,
    "version": ""
}