{
    "comments": [
        {
            "author": "Thomas Mueller",
            "body": "+1\n\nProbably you can even ignore some of the strict formatting rules, I propose:\n\nlong high = 0, low = 0;\nint i = 0;\nfor (int j = 0; i < s.length() && j < 16; i++) {\n    char ch = s.charAt(i);\n    if (ch != '-') {\n        high = (high << 4) | Character.digit(ch, 16);\n        j++;\n    }\n}\nfor (int j = 0; i < s.length() && j < 16; i++) {\n    char ch = s.charAt(i);\n    if (ch != '-') {\n        low = (low << 4) | Character.digit(ch, 16);\n        j++;\n    }\n}\n",
            "date": "2009-09-25T07:39:30.077+0000",
            "id": 0
        },
        {
            "author": "Jukka Zitting",
            "body": "No objections to reintroducing the old parsing code. On the other hand, IMHO we should avoid having to parse and reformat UUIDs in any performance critical part. Could we use a binary field to store the NodeId?",
            "date": "2009-09-25T07:50:18.739+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "... In any case I think this should be treated as an internal performance optimization and handled entirely within jackrabbit-core, so I dropped jackrabbit-jcr-commons from the list of affected components.",
            "date": "2009-09-25T07:51:45.946+0000",
            "id": 2
        },
        {
            "author": "Stefan Guggisberg",
            "body": "> I'd like to introduce the custom String UUID parsing code again that we had in the jackrabbit-jcr-commons UUID class and use it in the NodeId(String) constructor. \n>\n> WDYT?\n\n+1",
            "date": "2009-09-25T08:00:12.804+0000",
            "id": 3
        },
        {
            "author": "Marcel Reutegger",
            "body": "Re-introduced the UUID string parsing code previously present in jackrabbit-jcr-commons.\n\nsvn revision: 831891",
            "date": "2009-11-02T13:17:49.441+0000",
            "id": 4
        },
        {
            "author": "Thomas Mueller",
            "body": "Creating a NodeId from a String is still a bottleneck. It's relatively easy to improve performance (avoiding creating temporary objects, use switch/case). There are some other issues: some errors are not detected, and the exception should include context information.",
            "date": "2009-11-26T14:58:43.508+0000",
            "id": 5
        },
        {
            "author": "Thomas Mueller",
            "body": "About 40% faster according to my test.",
            "date": "2009-11-26T15:00:25.566+0000",
            "id": 6
        }
    ],
    "component": "jackrabbit-core",
    "description": "Benchmarking shows that the java.util.UUID.fromString() method is 10 times slower than the previous version we used from jackrabbit-jcr-commons. This method is quite heavily used in the query section or more generally whenever a NodeId is created from a String.\n\nI'd like to introduce the custom String UUID parsing code again that we had in the jackrabbit-jcr-commons UUID class and use it in the NodeId(String) constructor.\n\nWDYT?",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2327",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "java.util.UUID.fromString() too slow",
    "systemSpecification": true,
    "version": ""
}