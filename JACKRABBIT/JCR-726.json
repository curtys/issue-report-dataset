{
    "comments": [
        {
            "author": "Tobias Bocanegra",
            "body": "- introduced a new interface: EffectiveNodeTypeCache\n- renamed old implementation to EffectiveNodeTypeCacheImpl\n- created faster implementation BitsetENTCacheImpl that uses a bitset to store the nodetype names combination\n- did some fixes to the NodeTypeRegistry.getEffectiveNodeType()\n- improved a little bit the NodeImpl.isNodeType()\n\nthe new bitset cache is about 25% faster than the old one, since it does not need to sort the nodetype names. the overhead for keeping the bitnumber-index for the nodetype names is minimal (and could be avoided completely, if built into the nodetype registry).\ndue to a bug in the caching it could happen that the new calculated effective nodetype was not properly put back into the cache.\n\nmeasuring the Node.isNodeType() performance shows about 20% performance gain for simple nodes (where the bug mentioned above had no effect), and about 100 times faster results in the other cases.",
            "date": "2007-02-01T14:33:50.407+0000",
            "id": 0
        }
    ],
    "component": "nodetype",
    "description": "The current getEffectiveNodeType() implementation has a minor bug that prevents from proper caching for certain nodetype combinations. further performance enhancements can be made to the effective node type cache.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-726",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Improve NodeTypeRegistry.effectiveNodeType()",
    "systemSpecification": true,
    "version": ""
}