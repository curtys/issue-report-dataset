{
    "comments": [
        {
            "author": "Alexander Klimetschek",
            "body": "> which is not expected order (expected same order as they were entered ...)\n\nBut when you specify \"order by @MyProperty ascending\" you explicitly want to order by the property, not the document order.\n\nAFAICS the JCR 1.0 and 2.0 spec don't define any behavior for comparing single-value properties to multi-value ones (or mv to mv), so I think the repository implementation is free to chose the most efficient one. Hence this is not a bug.\n\nAlso, it is not clear how to define an ordering upon multi-value properties at all: Compare against the concatenation of the string representations of all the values in the property? Or compare against the first value?",
            "date": "2011-03-01T17:58:00.995+0000",
            "id": 0
        },
        {
            "author": "Paul Lysak",
            "body": "I think lexicographical order would be the natural approach. Like this:\n1) [\"aaa\", \"ddd\"] comes before [\"ccc\", \"bbb\"] because \"aaa\"<\"ccc\"\n2) [\"ccc\", \"ddd\"] comes after [\"ccc\", \"bbb\"] because \"ccc\"==\"ccc\" and \"ddd\">\"bbb\".\n",
            "date": "2011-03-02T09:54:53.376+0000",
            "id": 1
        },
        {
            "author": "Alex Deparvu",
            "body": "Really good analysis, thanks for pointing out where the problem is!\n\nThe problem is not that the JCR spec may or may not define sorting on a multi-valued property. the problem is the sort behavior is not stable when dealing with MVPs.\n\nLike Paul correctly pointed out, whenever there is a MVP present, the value in the cache gets overwritten by the last value found by the lucene Term query. So in fact an MVP is represented in the sort by just one of its values (which can apparently change at runtime - that is easily reproducible by running the attached test a few times).\n\nThe solution is to use the position info that comes via lucene's TermPositions. This does contain the term's position within the current document allowing us to use it as an index for MVPs.\nThe downside is that the Comparables have to support arrays as well as simple values, so I've added a class (ComparableArray) that simply delegates compareTo calls to the inner array of Comparables. This way all the sql languages (xpath&sql&sql2) have similar sort for MVPs.\n\n\n\nAttaching patch.\n",
            "date": "2011-11-24T09:49:41.237+0000",
            "id": 2
        },
        {
            "author": "Marcel Reutegger",
            "body": "Alex, your patch contains a lot of simplifications and reformating in test cases. Could you please create a separate patch for that? This would make it easier to review the proposed changes for exactly this issue.",
            "date": "2011-11-24T10:09:35.213+0000",
            "id": 3
        },
        {
            "author": "Alex Deparvu",
            "body": "yes, sorry for the noise. \nyou are totally right!\n\nI've re-submitted the patch (with only the relevant changes).\n",
            "date": "2011-11-24T13:52:26.632+0000",
            "id": 4
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "From looking at the code this makes sense and seems ok. However I get a test failure when I run this for UserManagerSearchTest#testSoertOrder1. AFAICS this is due to a bad interaction with the new array comperator and the uppercase respectively lowercase comperators. \nHowever I also observe, that I get comperator arrays of different lengths for the same property of different nodes. In the test case mentioned I get for some nodes [null, null, null, null, WHITE] and for others [null, null, null, WHITE].",
            "date": "2011-11-24T14:26:31.568+0000",
            "id": 5
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Ok there seems to be a problem with termPosition. In the above test case termPosition is sometimes 3 and sometimes 4 for the same value of the property (i.e. \"WHITE\"). This results in the arrays with trailing null values. So this has nothing to do with the upper/lower case comperators. It just seems to manifest itself there but the problem is more profound. \n\n",
            "date": "2011-11-24T15:00:13.625+0000",
            "id": 6
        },
        {
            "author": "Alex Deparvu",
            "body": "ouch, good catch!\n\nthe position is from the current doc, but it takes into account other properties as well. I missed that completely.\nSo if a node has a property \"p1\" and a property \"text\", the \"text\"'s position can be 1 (0-based) as well. I was under the (poor) impression that running a term search on \"text\" would convey just term specific info (not document specific positioning info).\n\nThe fix would be to just add a 'shrink' method after building the array to remove the null values from the beginning of the array.\nWhen dealing with MVP I'm pretty sure they are a contiguous interval within the index, even if with a tiny offset.\n",
            "date": "2011-11-24T15:30:06.345+0000",
            "id": 7
        },
        {
            "author": "Alex Deparvu",
            "body": "attaching just the SharedFieldCache class with the \"shrink\" method\n\nthe UserManagerSearchTest test now passes.",
            "date": "2011-11-24T15:44:21.347+0000",
            "id": 8
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Ok works now: all core tests pass. \n\nDo we know about the impact on query performance? All this array creation and compacting. It seems to me this might happen quite a lot for nodes with a lot of indexed properties. ",
            "date": "2011-11-24T16:13:33.555+0000",
            "id": 9
        },
        {
            "author": "Marcel Reutegger",
            "body": "I'd also suggest to be careful about potential impact on performance. IMO we shoulnd't sacrifice performance for a use case, which isn't properly described in the specification.",
            "date": "2011-11-28T09:17:53.412+0000",
            "id": 10
        },
        {
            "author": "Alex Deparvu",
            "body": "Attaching v3 of the patch.\n\nI've taken into consideration the point about performance (creating and compacting the arrays) and I've come up with a better offset-based version:\n\nIt is optimized for the standard case when there is only one term to create a single-element array & save the term's position in the index, as opposed to creating an array of considerable size. So no more shrink method.\n\nNext, based on the following terms' index, it uses an internal offset to optimize the creation of the array of terms.\n\nThis should have a considerably smaller impact on perf.\n\nThanks for the feedback so far.\n",
            "date": "2011-11-29T00:32:26.604+0000",
            "id": 11
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "I think there is an off by one problem in the cases denoted by // inside and // after: Shouldn't the comparisons be < and >=, respectively?",
            "date": "2011-11-29T14:34:01.112+0000",
            "id": 12
        },
        {
            "author": "Alex Deparvu",
            "body": "you are right. the sneaky offset tricked me.\n\nturns out that wasn't the only problem...I've also added a new test checking the array insert stuff.\n\nattaching v4\n\nconcerning the memory consumption, so you think this is a viable low-impact solution for MVP sort?",
            "date": "2011-11-30T15:36:49.483+0000",
            "id": 13
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Looks better but ;-)... in the // after case I think the calculation of the new array size is incorrect. The tests work but that's just bad luck.\n\nInstead of \n\n    int extraOffset = index - offset + c.length -1;\n    c = Arrays.copyOf(c, c.length + extraOffset);\n\nshouldn't that be\n\n    int newSize = index - offset + 1\n    c = Arrays.copyOf(c, newSize);\n\n",
            "date": "2011-11-30T17:24:12.455+0000",
            "id": 14
        },
        {
            "author": "Alex Deparvu",
            "body": "yes, as usual you are right!\nyour solution is a lot clearer, and above all correct :)\n\n> The tests work but that's just bad luck. \nYeah, the MVP2 test was supposed to shed some light on how the sort works, but it's not a proper unit test for the ComparableArray. \n(note to self: being lazy does not pay off)\n\nI'm attaching v5 with a dedicated unit test for the ComparableArray.",
            "date": "2011-11-30T20:27:47.023+0000",
            "id": 15
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Looks good now and all tests pass.",
            "date": "2011-12-01T10:35:58.897+0000",
            "id": 16
        },
        {
            "author": "Alex Deparvu",
            "body": "fantastic! I'll apply the patch shortly.",
            "date": "2011-12-01T10:41:53.810+0000",
            "id": 17
        },
        {
            "author": "Alex Deparvu",
            "body": "Fixed in rev 1209063 and rev 1209111",
            "date": "2011-12-01T13:09:57.480+0000",
            "id": 18
        },
        {
            "author": "Alex Deparvu",
            "body": "This depends on refactoring done for JCR-3151",
            "date": "2011-12-01T13:12:23.764+0000",
            "id": 19
        }
    ],
    "component": "indexing",
    "description": "Sorting on multivalued property may produce incorrect result because sorting is performed only by last value of multivalued property.\nSteps to reproduce:\n1. Create multivalued field in repository. Example from nodetypes file:\n<propertyDefinition name=\"MyProperty\" requiredType=\"String\" autoCreated=\"false\" mandatory=\"false\"\n   onParentVersion=\"COPY\" protected=\"false\" multiple=\"false\">\n2. Create few records so that all records except one would contain single value for MyProperty and one record would contain \nfirst value which is greater then of any other record and the second value is somewhere in the middle. Here is an example:\n1st record: \"aaaa\"\n2nd record: \"cccc\"\n3rd record: \"dddd\", \"bbbb\"\n3. Run some query which sorts Example of XPath query:\n//*[...here are some criteria...] order by @MyProperty ascending\nThe query would return documents in such order:\n\"aaaa\"\n\"dddd\", \"bbbb\"\n\"cccc\"\nwhich is not expected order (expected same order as they were entered - as \"aaaa\" < \"cccc\", \"cccc\" < \"dddd\")\n\nAfter some digging I found out that it happens because method \norg.apache.jackrabbit.core.query.lucene.SharedFieldCache.getValueIndex\n(called from org.apache.jackrabbit.core.query.lucene.SharedFieldSortComparator.SimpleScoreDocComparator constructor)\nreturns only last Comparable of the document. Here is overwrites previous value:\nretArray[termDocs.doc()] = getValue(value, type);\n\nI tried to concatenate comparables (just to check if it would work for my case):\n\tif(retArray[termDocs.doc()] == null) {\n\t\tretArray[termDocs.doc()] = getValue(value, type);\n\t} else {\n\t\tretArray[termDocs.doc()] =\n\t\t\t\tretArray[termDocs.doc()] + \" \" + getValue(value, type);\n\t}\nBut it didn't worked well either - TermEnum returns terms not in the same order as JackRabbit returns values of multivalued field\n(as an example [\"qwer\", \"asdf\"] may become [\"asdf\", \"qwer\"] ). So, simple concatenation doesn't help.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2906",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Multivalued property sorted by last/random value",
    "systemSpecification": true,
    "version": "2.2"
}