{
    "comments": [
        {
            "author": "angela",
            "body": "sounds reasonable.\ndo you already have something at hand, that you could contribute? that would be cool :)",
            "date": "2008-07-28T13:00:16.243+0000",
            "id": 0
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Not yet, but I'll provide patches as soon as I get around to work on this.",
            "date": "2008-07-28T13:12:19.841+0000",
            "id": 1
        },
        {
            "author": "angela",
            "body": "one more thought:\n\nafter all i have the impression that the spi-logger is a utility that should be available with the spi-commons as are default implementations for spi-interfaces. i'm not sure whether it would deserve it's on project.... the only problem i currently see: the logger requires java 1.5.\n\n",
            "date": "2009-02-27T17:04:31.173+0000",
            "id": 2
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "AFAIR the 1.5. dependency is not a problem as it occurs in a place which would be an implementation of a spi logger in the approach I suggested above. We could just enable/disable building of this particular implementation depending on the build environment. \n\n",
            "date": "2009-03-01T13:30:16.991+0000",
            "id": 3
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Adding spi-commons as target of promotion",
            "date": "2009-03-24T12:53:00.889+0000",
            "id": 4
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Fixed at revision 757775",
            "date": "2009-03-24T13:09:42.339+0000",
            "id": 5
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Revision 757775  introduces o.a.j.spi.commons.logging.*\n\nIn the most simple case\n\n  RepositoryService loggingService = SpiLoggerFactory.create(service);\n\ncreates a log wrapper for service which logs all calls to its methods if logging at the debug level is enabled. If logging is not enabled, no log wrapper is created at all and service itself is returned. There is thus virtually no overhead from disabled loggers. Loggers are enabled and disabled via the configuration mechanism of the logging framework which is in place.\n",
            "date": "2009-03-24T13:11:20.702+0000",
            "id": 6
        },
        {
            "author": "angela",
            "body": "in agreement with marcel the original contributor of the spi-logger, i removed the sandbox/spi/spi-logger project \nat rev. 761589",
            "date": "2009-04-03T09:54:01.648+0000",
            "id": 7
        }
    ],
    "component": "jackrabbit-spi-commons, sandbox",
    "description": "The spi-logger is very useful for debugging an SPI implementation. However it only supports the RepositoryService interface. Other SPI interfaces are not supported. Also writing log information as string seems a bit restrictive to me. Finally it is not included in the jackrabbit-spi package which introduces an additional dependency for debugging. \n\nI therefore suggest:\n- Add support for the other major SPI interfaces \n- Replace the current way of logging a String to a Writer instance by a more versatile mechanism (i.e. clients have to provide an interface which consumes more structured log data). \n- Provide some default implementation for the above mechanism (i.e. writing to a file, writing to a slf4j based logger, writing to the console...)\n- Promote this project to jackrabbit-spi\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1695",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Improve and promote spi-logger",
    "systemSpecification": true,
    "version": ""
}