{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "I used the following test setup:\n\n- create a tree structure with a depth of 6, each node having 10 child nodes. this results in a workspace with about 1 million nodes\n- each node has 10 properties with a randomly chosen value from a set of 1000 value. distribution of the values is not uniform. some values are much more frequent than others.\n- execute random queries that include the path to a leaf node and a jcr:contains clause with a randomly chosen value from the set.\n\nThe test showed that the current implementation is heavily CPU bound. Each query takes about 340 milliseconds mostly doing the above mentioned hierarchy joins.",
            "date": "2008-11-21T12:48:04.270+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "There are now two strategies how child nodes are calculated. The first one uses the item state manager, up to a certain number of context nodes, the second strategy uses the hierarchy resolver.\n\nPath constraints with frequently used node names are now much faster.\n\nsvn revision: 719592",
            "date": "2008-11-21T14:47:47.062+0000",
            "id": 1
        },
        {
            "author": "Marcel Reutegger",
            "body": "The diagram shows query timings (microsecond, logarithmic scale). From top to bottom:\n\n- previous implementation (CPU bound, average 340 milliseconds)\n- with recent changes, average time is now 20 milliseconds (the limiting factor now is disc latency because of the random node lookup)\n- with recent changes but in addition the derby database is now on a flash disk, average time is now below 10 milliseconds",
            "date": "2008-11-21T14:57:28.005+0000",
            "id": 2
        },
        {
            "author": "Jukka Zitting",
            "body": "Pretty impressive. Nice work!",
            "date": "2008-11-24T12:51:08.484+0000",
            "id": 3
        },
        {
            "author": "Marcel Reutegger",
            "body": "Merged changes into 1.4 branch in revision: 748139",
            "date": "2009-02-26T13:24:49.129+0000",
            "id": 4
        }
    ],
    "component": "jackrabbit-core",
    "description": "Queries with simple path constraints can be quite slow because of the way they are implemented. The current implementation basically does a hierarchical join with the context nodes and the set of nodes with the name of the next location step. When the specified path is quite selective the implementation should   rather resolve the path expression using the item state manager (similar to how regular paths are resolved in the JCR API).",
    "hasPatch": false,
    "hasScreenshot": true,
    "id": "JCR-1872",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Improve performance of simple path queries",
    "systemSpecification": true,
    "version": ""
}