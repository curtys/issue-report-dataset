{
    "comments": [
        {
            "author": "Andr\u00e9 Bierwolf",
            "body": "Fix for isNull method",
            "date": "2007-08-07T07:37:29.344+0000",
            "id": 0
        },
        {
            "author": "Christophe Lombart",
            "body": "Testing on !parentNode.hasNodes() is not sufficient. We have to check if the parent node has children based on a specific type. The type use for the collection elements. It is possible to have other children (based on another nt) which are not element of the collection. ",
            "date": "2007-08-16T22:00:14.178+0000",
            "id": 1
        },
        {
            "author": "Christophe Lombart",
            "body": "Fixed. Can you check if it is ok for you ?\n\nRight now, if there is no node matching to the collection element,  the collection is null. We can imagine to return an empty collection. I think returning a null value or an empty collection is almost the same in this case. Please, add your comment if you are not agree. Thanks",
            "date": "2007-08-16T22:14:41.901+0000",
            "id": 2
        },
        {
            "author": "Andr\u00e9 Bierwolf",
            "body": "Thanks for fixing this issue. I agree with the solution of returning null here, because I already check for null when adding a element.\nI don't initialize my collection until the first add.\n",
            "date": "2007-08-17T06:20:18.132+0000",
            "id": 3
        }
    ],
    "component": "jackrabbit-ocm",
    "description": "When using the NTCollectionConverterImpl with proxy=\"true\" a call on the size () method of a ManageableArrayList causes a NullPointerException if there is no underlying List. LazyCollectionLoader doLoad returns null because there is are no children.\n\nThe ManageableArrayList is created because the isNull method of the NTCollectionConverterImpl class always returns false. \nAccording to the comment line this is done because the getCollectionNodes always returns a list. \nBut after the fix for JCR-882 this is not correct anymore.\n\nThe attached fix corrects this. \n\nThe only question remaining is how to differ between an empty list and a null-value for the field containing the list.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1053",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Calling size method of a ManageableArrayList causes NullPointerException",
    "systemSpecification": true,
    "version": "1.3"
}