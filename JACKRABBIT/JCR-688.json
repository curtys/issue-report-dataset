{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "I have to apologize, my post in JCR-685 was not precise enough.\n\nWhat acutally happens when multiple threads access the CachingNamespaceResolver is the following: because even a get() call on the LRUMap modifies the internal data structures those calls must be synchronized. This basically serializes access on the LRUMap even though only a small critical section should be synchronized: the method moveToMRU(). Calculating the hash code, doing the lookup in the hashtable and checking whether the keys are equal does not require synchronization and multiple threads can do this concurrently.\n\nI agree that this does not necessarily have to go into the 1.2 release, but it certainly is a problem, because the CachingNamespaceResolver in the NamespaceRegistry is a single instance repository wide and used by all threads that access the repository. Since name resolution is involved in nearly every operation I think it should allow maximum concurrent threads.\n\nIt is correct that the proposed change will not lower the number of synchronized sections but the sections will be significantly smaller. So to be precise this improvement is not really to avoid monitor contention but to allow more concurrent access to the CachingNamespaceResolver.",
            "date": "2006-12-21T11:22:29.000+0000",
            "id": 0
        },
        {
            "author": "Jukka Zitting",
            "body": "Is the cache even required?\n\nIt seems to me that the operations that we try to speed up using the cache are very small and fast in any case, i.e. simple string parsing and concatenation. Sure, it adds up to a large number of short-lived object allocations, but a generational garbage collector shouldn't have much trouble handling that.\n\nDo we have some performance numbers to validate the need for caching in this case?",
            "date": "2006-12-21T12:30:25.000+0000",
            "id": 1
        },
        {
            "author": "Marcel Reutegger",
            "body": "One example is regularly accessing properties with the same name. In an application you will usually have a fixed set of property names (unless you use residual properties).\n\nThe following test case executes 5 times faster with name caching:\n\n    public void testPropertyAccess() throws RepositoryException {\n        for (int i = 0; i < 100; i++) {\n            testRootNode.addNode(\"node\" + i);\n        }\n        testRootNode.save();\n        long time = System.currentTimeMillis();\n        // loop 1000 times over child nodes and access two properties\n        for (int i = 0; i < 1000; i++) {\n            for (NodeIterator it = testRootNode.getNodes(); it.hasNext(); ) {\n                Node n = it.nextNode();\n                n.getProperty(jcrPrimaryType);\n                n.hasProperty(jcrMixinTypes);\n            }\n        }\n        time = System.currentTimeMillis() - time;\n        System.out.println(\"test took: \" + time + \" ms.\");\n    }\n",
            "date": "2006-12-21T14:06:17.000+0000",
            "id": 2
        },
        {
            "author": "Jukka Zitting",
            "body": "> The following test case executes 5 times faster with name caching\n\nGood point. :-)\n\nDigging deeper in the performance figures I noticed that most of this performance hit is caused by the heavy use of regexp matching in NameFormat. I was able to get a major performance gain simply by replacing the regexp's with custom parsing code (I'll clean it up attach as an example patch). The performance is still clearly worse than with caching, but not nearly as bad as before.\n\nSome other observations:\n\n* The performance requirements and expected data sets for the QName->String and String->QName conversions seem quite different. For example the above test case is almost entirely governed by the String->QName conversion speed. It would probably make sense to consider using separate mechanisms for the two types of conversions.\n\n* Moving the name cache from the global namespace registry to the session level would probably make sense. That would avoid the synchronization requirements at the expense of extra memory use. An extra benefit would be that the name cache could also be used when session-local namespace remappings are in effect.\n\n* The individual resolution operations are very fast in any case, so the performance is only relevant when doing a large number of operations. Thus the cost of occasional heavier optimization operations (if available) could probably be easily amortized.\n",
            "date": "2006-12-21T21:59:50.000+0000",
            "id": 3
        },
        {
            "author": "Jukka Zitting",
            "body": "Attached JCR-688.LocalCache.patch (against jackrabbit-core) that replaces the CachingNamespaceResolver in NamespaceRepository with a simple LRUMap in LocalNamespaceMappings.\n\nThis achieves the same performance as before without any of the concurrence issues. It also works fine with local namespace remappings.",
            "date": "2006-12-27T16:22:57.000+0000",
            "id": 4
        },
        {
            "author": "Julian Reschke",
            "body": "If we know that name prefix resolution causes this amount of pain, shouldn't we consider adding QName-based addressing in JSR-283?",
            "date": "2006-12-27T17:08:45.000+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "> If we know that name prefix resolution causes this amount of pain,\n> shouldn't we consider adding QName-based addressing in JSR-283?\n\nThis issue is just a minor implementation detail. There is a price in performance of doing the String<->QName conversions, but the performance hit is probably only noticeable for heavily cached workloads like the example above. The cost of the string operations is likely insignificant as soon as the repository starts hitting the disk.\n\nThe reason I'm passionate about this is not the performance, but the creeping complexity introduced by the concurrency control. More generally I think the whole name resolution infrastructure in Jackrabbit is much more complex than it really needs to be.",
            "date": "2006-12-27T17:31:31.000+0000",
            "id": 6
        },
        {
            "author": "Marcel Reutegger",
            "body": "> * The performance requirements and expected data sets for the QName->String\n> and String->QName conversions seem quite different. For example the above\n> test case is almost entirely governed by the String->QName conversion speed.\n> It would probably make sense to consider using separate mechanisms for the\n> two types of conversions.\n\nI agree with you. The cost for converting a QName into its resolved String is probably\nnot worth caching the result. We should probably remove the cache for this conversion.\n\n> * Moving the name cache from the global namespace registry to the session\n> level would probably make sense. That would avoid the synchronization\n> requirements at the expense of extra memory use. An extra benefit would be\n> that the name cache could also be used when session-local namespace\n> remappings are in effect.\n\nWhile it certainly helps to avoid the concurrency issue it introduces a cache per session\nwhich is in most cases filled with mappings that are just duplicates from other sessions.\n\nI think the current location of the cache is the better choice because it uses the occupied\nmemory more effectively (shared with other sessions), though at the price of increased\nconcurrency on the cache. But that's IMO just a technical detail of the cache implementation.",
            "date": "2007-01-03T13:05:09.983+0000",
            "id": 7
        },
        {
            "author": "Tobias Bocanegra",
            "body": "i think using a simple ConcurrentReaderHashMap improves the performance quite a lot since NO synchronization needs to be done (if the element is found). And instead of maintaining a LRU mechanism, i would just clear the map if it reaches a certain size (e.g. 10'000 names). i think an application either uses few similar names or many different. and in the later case, an LRU map does not help either. the costs of rebuilding the cache after it was cleared are not higher than if the elements get shifted out of the LRU it this one is too small.",
            "date": "2007-01-04T10:16:34.595+0000",
            "id": 8
        },
        {
            "author": "Jukka Zitting",
            "body": "Attached a JCR-688.NameResolver.patch that includes 1) a proposed new NameResolver interface, and 2) a generational name cache. For now the patch simply replaces the CachingNamespaceResolver class, but if the NameResolver proposal gets accepted, it has potential to simplify quite a lot of the current name resolution code.\n\n1) NameResolver interface\n\nThe previous and current mechanisms of putting JCR name parsing and formatting operations respectively in the NamespaceResolver interface and the NameFormat static class are both not very clean. The methods in NamespaceResolver imply extra responsibilities even to classes that would only need to handle namespace mappings and not individual names, and the static NameFormat methods are very inflexible, for example support for name caching requires explicit instanceof operations.\n\nThe NameResolver interface is a proposal to simplify this. The interface implies only the responsibilities of parsing and formatting JCR names and leaves the handling of namespace mappings or name caching as implementation details.\n\nI've included two basic implementations of the NameResolver interface in the patch: the ParsingNameResolver class contains the basic name parsing and formatting routines and uses a NamespaceResolver to access the prefix mappings, while the CachingNameResolver class can be used to decorate another NameResolver (most likely a ParsingNameResolver) with name caching. Those two implementations should be enough to cover almost all of the current name resolution needs.\n\n2) Generational name cache\n\nBoth the LRUMap and ConcurrentReaderHashMap alternatives cause the entire name cache to get flushed when a client generates a long sequence of different names, for example \"itemN\" where N is a sequence number. To better handle this situation and to get rid of all synchronization for most cases, the CachingNameResolver class implements a \"generational\" name cache that borrows ideas from modern garbage collectors.\n\nThe basic idea of a generational name cache is that there are three cache maps: one is a long term cache and two represent \"generations\" of cached entries, one \"young\" and one \"old\" generation. Name entries in the long term cache are always looked up and returned directly without any synchronization or counting taking place. If the long term cache is missed, the entry is looked up in either of the generations or explicitly resolved using the decorated NameResolver. Finally the resolved name entry added to the \"young\" generation to mark it as recently requested.\n\nAfter a configurable number of such long term cache misses (the \"age\" of the generation) have been made, the union of the two generations is calculated and added to the long term cache. I.e. the names that have been accessed continuously over two cache generations will probably be used frequently in the long term. Then the previous \"young\" generation is becomes the new \"old\" generation, and a new empty \"young\" generation is started. Once the long term cache reaches a specified maximum size, it gets replaced with just the union of the last two generations.\n\nThe CachingNameResolver is also implemented so that no synchronization is required for accessing the long term cache. Synchronization is only used when a long term cache miss occurs and even then concurrent reads to the long term cache can continue.\n",
            "date": "2007-01-07T00:59:43.685+0000",
            "id": 9
        },
        {
            "author": "Marcel Reutegger",
            "body": "I think the patch is very good, I just have one issue: name resolution through the CachingNameResolver is serialized. The call resolver.getQName(name) within CachingNameResolver.getQName() is in a synchronized(this). Can this be change in a way that multiple thread can resolve names concurrently?",
            "date": "2007-01-08T10:04:47.828+0000",
            "id": 10
        },
        {
            "author": "Jukka Zitting",
            "body": "> The call resolver.getQName(name) within CachingNameResolver.getQName() is in\n> a synchronized(this).Can this be change in a way that multiple thread can resolve\n> names concurrently?\n\nI think so. The reason for the synchronization is to guard access to the \"young\" generation maps that gets modified. I think it would be enough to make just the \"young\" map and the increaseGenerationAge() method synchronized. I'll take a look at this later today.",
            "date": "2007-01-08T10:17:10.266+0000",
            "id": 11
        },
        {
            "author": "Stefan Guggisberg",
            "body": "i agree with jukka's rationale, +1 for the redesign/patch (assuming the synchronization issue mentioned by marcel gets resolved).\n\nit would be very  interesting to see some 'before/after' benckmark/profiling results.",
            "date": "2007-01-08T11:09:23.267+0000",
            "id": 12
        },
        {
            "author": "Jukka Zitting",
            "body": "Attached JCR-688.NameResolver.v2.patch with reduced synchronization and a slightly improved increaseGenerationAge() method.\n\nA quick ad-hoc test with the above testPropertyAccess method running in 20 concurrent threads is about 6% faster using this implementation than with the current CachingNamespaceResolver. A few more percents can probably be achieved by getting rid of the current NameFormat indirections obsoleted by the new NameResolver interface.\n\nCareful analysis of the performance tradeoffs could improve the cache even more. For example it might make sense to make the \"young\" generation write-only (i.e. only add mappings to it within the synchronized increaseGenerationAge()) to avoid extra monitor contention.\n",
            "date": "2007-01-08T12:30:03.318+0000",
            "id": 13
        },
        {
            "author": "Jukka Zitting",
            "body": "Committed version 3 of the NameResolver classes in revision 494219. The committed classes have some minor differences to the above proposals, most notably:\n\na) ParsingNameResolver was further optimized and is now most likely the fastest validating JCR name parser there is.\n\nb) CachingNameResolver now caches both parsed and formatted names, as benchmarking showed noticeable gain from doing so.\n\nc) CachingNameResolver was simplified so that only a single synchronized method is required for controlling concurrency.",
            "date": "2007-01-08T22:45:29.730+0000",
            "id": 14
        },
        {
            "author": "Tobias Bocanegra",
            "body": "what about caching of paths?",
            "date": "2007-01-09T07:02:29.112+0000",
            "id": 15
        },
        {
            "author": "Jukka Zitting",
            "body": "> what about caching of paths?\n\nA similar PathResolver solution would IMHO nicely cover path handling. I'll look at it.",
            "date": "2007-01-09T07:57:43.472+0000",
            "id": 16
        },
        {
            "author": "Jukka Zitting",
            "body": "Dropping the 1.3 target as there's still more to do.",
            "date": "2007-04-12T07:16:59.490+0000",
            "id": 17
        },
        {
            "author": "angela",
            "body": "i guess, this issue will be covered by  issue JCR-1169 Distribution of commons classes.\n\nThe proposed distribution replaces the *Format classes by  the *Resolver interfaces. Both\ninterfaces and jukkas implementations are copied to the spi-commons. The Parsing*Resolver got adjusted according to tobis feedback.",
            "date": "2007-10-17T10:02:39.116+0000",
            "id": 18
        },
        {
            "author": "angela",
            "body": "completed with rev. 590014 (adjusting jackrabbit-core to reflect changes introduced with issue JCR-1169.",
            "date": "2007-10-30T10:12:24.552+0000",
            "id": 19
        }
    ],
    "component": "jackrabbit-core",
    "description": "As discussed in JCR-685, the current CachingNamespaceResolver class contains excessive synchronization causing monitor contention that reduces performance.\n\nIn JCR-685 there's a proposed patch that replaces synchronization with a read-write lock that would allow concurrent read access to the name cache.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-688",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Improve name resolution",
    "systemSpecification": true,
    "version": ""
}