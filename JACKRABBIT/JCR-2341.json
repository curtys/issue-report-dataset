{
    "comments": [
        {
            "author": "Claus K\u00f6ll",
            "body": "A working patch. The only thing is that i had to change the getNodeState method in NodeImpl to public ...",
            "date": "2009-10-02T08:27:04.079+0000",
            "id": 0
        },
        {
            "author": "Stefan Guggisberg",
            "body": "> ... The only thing is that i had to change the getNodeState method in NodeImpl to public ...\n\ncan this be avoided? i'd be rather reluctant to expose NodeState to api client... ",
            "date": "2009-10-02T08:34:03.594+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "> i'd be rather reluctant to expose NodeState to api client...\n\nAgreed. I wonder if the current code could be refactored in some way to avoid this.\n\nThis seems like one of the cases where the fact that our Impl classes both implement the JCR interfaces and contain notable amounts of underlying logic and data structures. The new task-oriented JCR 2.0 interfaces like LockManager make the current design harder to use than before, as all the underlying state related to a given operation (in this case the active NodeState instance) is no longer directly accessible as a private member of the object being accessed.\n",
            "date": "2009-10-02T14:33:57.701+0000",
            "id": 2
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "you are both right ... its really no a good idea to expose such informations to the public api.\nbut i don't know how to solve that problem ... i will look at it maybe i will find a way\n\ngreets\nclaus",
            "date": "2009-10-05T08:25:25.090+0000",
            "id": 3
        },
        {
            "author": "Stefan Guggisberg",
            "body": "i agree with jukka's comment. if a refactoring of the current (quite old) code base can be done with reasonable effort we should certainly take the opportunity. ",
            "date": "2009-10-05T08:43:07.468+0000",
            "id": 4
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "ok would you remove the internal Nodestate from the Node itself to keep it only in the StateManager ?",
            "date": "2009-10-07T11:58:44.526+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "Cancelling the patch as there are concerns about the design.\n\nWe can apply this patch if there's a strong need for this fix and no easy alternative, but then we'd need to add appropriate warnings to the getNodeState() javadoc and open a new issue to remind us about the required refactoring.",
            "date": "2010-01-11T14:03:41.948+0000",
            "id": 6
        },
        {
            "author": "Jukka Zitting",
            "body": "Postponing to a later release",
            "date": "2010-01-15T17:47:49.259+0000",
            "id": 7
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "Adjusted the summary to problem description",
            "date": "2010-06-09T15:32:09.305+0000",
            "id": 8
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "This patch uses the NodeState of the Statemanager to create the TransientItemState on the Node",
            "date": "2010-06-09T15:35:24.998+0000",
            "id": 9
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "The Problem is that the LockManagerImpl uses the NodeState of the ItemStateManager to remove the Property lockOwner on unlock() operation.\nOn Node.remove() the internal NodeState will be used where the Property is already present.",
            "date": "2010-06-09T15:38:16.128+0000",
            "id": 10
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "Added 1.6.3 and 2.2.0 Version. if we should add i to other branches please feel free",
            "date": "2010-06-18T06:18:15.129+0000",
            "id": 11
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "Committed in rev. 955852",
            "date": "2010-06-18T06:47:32.640+0000",
            "id": 12
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 2.1 branch in revision 982505, to 2.0 in revision 982510, and to 1.6 in revision 982513.",
            "date": "2010-08-05T09:29:26.113+0000",
            "id": 13
        }
    ],
    "component": "jackrabbit-core",
    "description": "If you try to unlock and remove a node the NodeState can be run out of sync between the two operations.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2341",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Unable to add/lock and unlock/remove Node with shared Session in 2 Transactions",
    "systemSpecification": true,
    "version": "1.6"
}