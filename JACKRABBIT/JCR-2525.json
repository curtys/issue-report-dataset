{
    "comments": [
        {
            "author": "Frederic Guilbeault",
            "body": "Proposed solution would be to introduce a method with NodeStateListener to return a monitor object or null, if not required.\n\nThen NodeState would always lock the NodeStateListener monitor first, and itself second.\n\nThis way the lock order would always be: First NodeStateListener, Second NodeState.",
            "date": "2010-03-01T23:21:31.348+0000",
            "id": 0
        },
        {
            "author": "Frederic Guilbeault",
            "body": "attaching proposed code changes\nthese were tested also and proven to resolve the deadlock\ncredit goes to The Dong Pham Thanh for coding and testing",
            "date": "2010-03-03T15:00:55.069+0000",
            "id": 1
        },
        {
            "author": "Antonio Martinez",
            "body": "The previous patch still caused deadlock. After applying JCR_Deadlock_additionalChanges.txt things are OK (credit again to The)",
            "date": "2010-03-05T01:34:38.877+0000",
            "id": 2
        },
        {
            "author": "Stefan Guggisberg",
            "body": "could you please provide a simple test case which is able to reproduce the dead lock?\n\nsee o.a.jackrabbit.core.Concurrent*Test.java in jackrabbit-core for some examples.\n\nthanks",
            "date": "2010-03-05T09:14:34.684+0000",
            "id": 3
        },
        {
            "author": "Antonio Martinez",
            "body": "With last changes, after some more test get into scenario where all jackrabbit threads are waiting on object monitor. After taking several thread dumps threads are always stuck in same place.\n--\nSo for now we are not taking the proposed modifications in our product.\n--\nWhat we do for now is to avoid creating/deleting nodes under the same parent in different threads. That for sure prevents the deadlock, but the bug still exists",
            "date": "2010-03-09T19:49:35.114+0000",
            "id": 4
        },
        {
            "author": "The Dong",
            "body": "I attached the eclipse project which contains my test code to reproduce this issue. You need to modify URLs linking to DB server in repository.xml and re-configure the class path of the Jackrabbit components. \nAfter doing the changes, you should can run the test. Note that the issue does not always happen, so you would need to run the test a couple of times.",
            "date": "2010-03-10T03:13:28.682+0000",
            "id": 5
        },
        {
            "author": "Stephan Huttenhuis",
            "body": "Concerning your patches. The JCR_Deadlock_changes.diff introduces a cacheMonitor lock for all methods related to the childNodeEntries object. Then JCR_Deadlock_additionalChanges.txt uses the NodeState monitor lock for get methods. This creates 2 different locks for the invariant on childNodeEntries and this is incorrect. I took the liberty to rewrite the test class to a junit test (see ItemStateHierarchyManagerDeadlockTest.java).\n\nI have a different proposed solution. A concurrency design rule is to never give control to a client within a synchronized block. This means that you must not call methods of which the class has no knowledge of what the method does and has no control over it (alien methods). In this case calling the listener is such a situation in NodeState. A solution is to remove the listener \n\nnotification calls from the synchronized block and to limit the synchronized block to the operations on the childNodeEntries object. \n\nOutside the lock a ChildNodeEntry is passed to the listener, but ChildNodeEntry is immutable and therefore thread-safe. Also the NodeState is passed to the listener. If the listener calls a method on the NodeState the monitor lock is aquired again if needed. See JCR-2525-listener-outside-lock.patch (based on the 1.6 branch).",
            "date": "2010-04-02T07:35:37.805+0000",
            "id": 6
        },
        {
            "author": "Jukka Zitting",
            "body": "Thanks for the excellent work on this! I've committed the latest patch and the test case to Jackrabbit trunk in revision 933646 and merged the changes to the 2.1 branch in revision 933662. Is there demand for also a 1.6.2 release with this fix?",
            "date": "2010-04-13T15:02:16.300+0000",
            "id": 7
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "Hi Jukka,\n\nThat would be fine if this fix will go into 1.6.2 too.\n\ngreets",
            "date": "2010-04-13T15:12:52.351+0000",
            "id": 8
        },
        {
            "author": "Stephan Huttenhuis",
            "body": "I would also very much appreciate this fix in 1.6.2",
            "date": "2010-04-13T15:17:38.697+0000",
            "id": 9
        },
        {
            "author": "Jukka Zitting",
            "body": "OK, I merged the change to the 1.6 branch in revision 933699. See dev@jackrabbit for the 1.6.2 release schedule.",
            "date": "2010-04-13T16:14:32.970+0000",
            "id": 10
        },
        {
            "author": "Robert Sauer",
            "body": "\n   [[ Old comment, sent by email on Tue, 13 Apr 2010 16:49:28 +0100 ]]\n\n+1 from me on incluson with 1.6.2, too. \n\nian.jira.plugin.system.issuetabpanels:comment-> tabpanel&focusedCommentId=12856448#action_12856448 ] \n.end(SharedItemStateManager.java:749)\n\n\n",
            "date": "2010-04-19T14:45:45.482+0000",
            "id": 11
        }
    ],
    "component": "jackrabbit-core",
    "description": "\n\nJava stack information for the threads listed above:\n===================================================\n\"jmssecondaryApplnJobExecutor-8\":\n\tat org.apache.jackrabbit.core.state.NodeState.getChildNodeEntry(NodeState.java:300)\n\t- waiting to lock <0x9e6c6d08> (a org.apache.jackrabbit.core.state.NodeState)\n\tat org.apache.jackrabbit.core.CachingHierarchyManager.nodeModified(CachingHierarchyManager.java:316)\n\t- locked <0xa09882a8> (a java.lang.Object)\n\tat org.apache.jackrabbit.core.CachingHierarchyManager.stateModified(CachingHierarchyManager.java:293)\n\tat org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyStateModified(StateChangeDispatcher.java:111)\n\tat org.apache.jackrabbit.core.state.SessionItemStateManager.stateModified(SessionItemStateManager.java:889)\n\tat org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyStateModified(StateChangeDispatcher.java:111)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.stateModified(LocalItemStateManager.java:452)\n\tat org.apache.jackrabbit.core.state.XAItemStateManager.stateModified(XAItemStateManager.java:602)\n\tat org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyStateModified(StateChangeDispatcher.java:111)\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager.stateModified(SharedItemStateManager.java:400)\n\tat org.apache.jackrabbit.core.state.ItemState.notifyStateUpdated(ItemState.java:244)\n\tat org.apache.jackrabbit.core.state.ChangeLog.persisted(ChangeLog.java:297)\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager$Update.end(SharedItemStateManager.java:749)\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:1115)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:351)\n\tat org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:354)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:326)\n\tat org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:325)\n\tat org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1111)\n\t- locked <0x9b1b0be0> (a org.apache.jackrabbit.core.XASessionImpl)\n\tat org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:915)\n\tat org.apache.jackrabbit.jca.JCASessionHandle.save(JCASessionHandle.java:180)\n        ...\n\tat sun.reflect.GeneratedMethodAccessor1067.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat sun.reflect.misc.Trampoline.invoke(MethodUtil.java:36)\n\tat sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:243)\n\tat javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1074)\n\tat javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:955)\n\tat org.springframework.jmx.export.SpringModelMBean.invoke(SpringModelMBean.java:88)\n\tat org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:164)\n\tat org.jboss.mx.modelmbean.RequiredModelMBeanInvoker.invoke(RequiredModelMBeanInvoker.java:127)\n\tat org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659)\n\tat org.jboss.system.server.jmx.LazyMBeanServer.invoke(LazyMBeanServer.java:291)\n\tat javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:288)\n\tat $Proxy692.doDiscoveryNow(Unknown Source)\n        ...\n\tat org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)\n\tat org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)\n\tat org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)\n\tat org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322)\n\tat org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260)\n\tat org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944)\n\tat org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:868)\n\tat java.lang.Thread.run(Thread.java:619)\n\"jmssecondaryApplnJobExecutor-7\":\n\tat org.apache.jackrabbit.core.CachingHierarchyManager.nodeAdded(CachingHierarchyManager.java:362)\n\t- waiting to lock <0xa09882a8> (a java.lang.Object)\n\tat org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyNodeAdded(StateChangeDispatcher.java:159)\n\tat org.apache.jackrabbit.core.state.SessionItemStateManager.nodeAdded(SessionItemStateManager.java:947)\n\tat org.apache.jackrabbit.core.state.NodeState.notifyNodeAdded(NodeState.java:882)\n\tat org.apache.jackrabbit.core.state.NodeState.addChildNodeEntry(NodeState.java:351)\n\t- locked <0x9e6c6d08> (a org.apache.jackrabbit.core.state.NodeState)\n\tat org.apache.jackrabbit.core.NodeImpl.createChildNode(NodeImpl.java:541)\n\t- locked <0xa00619a8> (a org.apache.jackrabbit.core.NodeImpl)\n\tat org.apache.jackrabbit.core.NodeImpl.internalAddChildNode(NodeImpl.java:802)\n\tat org.apache.jackrabbit.core.NodeImpl.internalAddNode(NodeImpl.java:735)\n\tat org.apache.jackrabbit.core.NodeImpl.addNodeWithUuid(NodeImpl.java:2200)\n\t- locked <0xa00619f8> (a org.apache.jackrabbit.core.NodeImpl)\n\tat org.apache.jackrabbit.core.NodeImpl.addNode(NodeImpl.java:2133)\n\t- locked <0xa00619f8> (a org.apache.jackrabbit.core.NodeImpl)\n        ...\n\tat sun.reflect.GeneratedMethodAccessor1067.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat sun.reflect.misc.Trampoline.invoke(MethodUtil.java:36)\n\tat sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:243)\n\tat javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1074)\n\tat javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:955)\n\tat org.springframework.jmx.export.SpringModelMBean.invoke(SpringModelMBean.java:88)\n\tat org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:164)\n\tat org.jboss.mx.modelmbean.RequiredModelMBeanInvoker.invoke(RequiredModelMBeanInvoker.java:127)\n\tat org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659)\n\tat org.jboss.system.server.jmx.LazyMBeanServer.invoke(LazyMBeanServer.java:291)\n\tat javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:288)\n\tat $Proxy692.doDiscoveryNow(Unknown Source)\n        ...\n\tat org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)\n\tat org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)\n\tat org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)\n\tat org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322)\n\tat org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260)\n\tat org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944)\n\tat org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:868)\n\tat java.lang.Thread.run(Thread.java:619)\n\nFound 1 deadlock.\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2525",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Critical",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "NodeState and NodeStateListener deadlock",
    "systemSpecification": true,
    "version": "1.6, 1.6.1"
}