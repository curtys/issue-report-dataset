{
    "comments": [
        {
            "author": "Thomas Mueller",
            "body": "+1 for this patch. I think using checked exceptions is a good solution.\n\nI would use unchecked exceptions only if Jackrabbit as a whole also uses unchecked exceptions. It would be inconsistent to use unchecked exceptions in some places and checked exceptions in others. Communicating the error state using the data object doesn't sound like a good solution: you would have to check the error state everywhere.",
            "date": "2008-07-09T15:23:40.198+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "Applied patch in revision: 677226",
            "date": "2008-07-16T10:11:45.647+0000",
            "id": 1
        },
        {
            "author": "Marcel Reutegger",
            "body": "Also affects core.",
            "date": "2008-07-16T10:12:25.586+0000",
            "id": 2
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Thanks for fixing",
            "date": "2008-07-16T15:26:26.191+0000",
            "id": 3
        }
    ],
    "component": "jackrabbit-core, jackrabbit-spi-commons",
    "description": "Currently the methods of QueryNodeVisitor do not declare any exceptions. Even though the query tree might be syntactically correct, an implementation might reach a point where it cannot continue (i.e. if it does not support one of the optional query features). For such cases there are currently two solution: 1. throw an unchecked exception or 2. communicate the error state through the visitor using the data object passed along. \nWhile I don't like 2. it is still an option. For 1. I'm not sure if this is the right way to go. It might be better to actually throw a checked exception. I therefore created a patch which declares RepositoryException on all visit methods of QueryNodeVisitor. Although the necessary changes in classes using QueryNodeVisitor are trivial, there are quite many of them. \n\nAny opinions on checked exception with probably breaking (trivially) existing code vs. using not checked exceptions?\n\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1674",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Provide means for exception handling for QueryNodeVisitor implementations",
    "systemSpecification": true,
    "version": ""
}