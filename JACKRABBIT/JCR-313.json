{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "> Concurrency, performance and transactionability will be highly boosted with this approach.\n\nWhy do you think that using a DataSource instead of a plain SQL Connection has any impact on concurrency, performance or transactions?\n\nThere are certainly benefits using pooled connections, but in my opinion this is solely ease of configuration in a J2EE container and detection of broken connections.",
            "date": "2006-02-02T23:04:15.000+0000",
            "id": 0
        },
        {
            "author": "Stefan Guggisberg",
            "body": "the goals of the SimpleDbPersistenceManager implementation have been,\nas its name suggests, being *simple*, having zero deployment requiremnts \nand minimal dependencies. it's predestined to be used with embedded \ndatabases such as e.g. Derby. \n\nthe requested features would just add complexity, deployment overhead and no\nreal benefit  for the above use case and would defeat the original purpose of the\nSimpleDbPersistenceManager.\n\ni wouldn't be against a more elaborate JDBC based PM implementation that makes \nuse of J2EE infrastructure features such as JNDI lookup of  the DataSource, etc.",
            "date": "2006-02-03T00:02:45.000+0000",
            "id": 1
        },
        {
            "author": "Martin Perez",
            "body": "[OT]: Well, first of all, sorry if I offended someon putting the issue, because it seems that I got hard responses. Take in mind that I only wanted to help when one person of your team asked to someone to put the issue. I do not have special interest on this topic, even taking in mind that I think that it would be a good improvement.\n\n> Why do you think that using a DataSource instead of a plain SQL Connection has any impact on concurrency, performance or transactions? \n\nWell, with all the respects, one simple reason to boost concurrency, performance and transactions is that is the application server who manages the resources, and not you manually. This is enough to justify, nor only because modern application servers can perform extra optimizations on db connections and by consequence impacting on the three items above, but the extra system security layer that you get. Accessing in a non-managed way to managed resources from managed environments is always, at least, not-the-better option, but this is only my opinion.\n\nAnd after that reason, that I think is the most important, we could start to talk about connection pooling, transactions or synchronization. Anyways, I'm not going into that as it was being discussed on the list. I endorse most of the comments given there. Yes, I know, like you said (and you did a great and very instructive response), that many of the items exposed do not always happen, or that they are not quite true. But they can happen, and in that case jackrabbit won't scale, and that is the really important thing, and by consequence all the three items exposed above will be decreased.\n\n>i wouldn't be against a more elaborate JDBC based PM implementation that makes use of J2EE infrastructure features such as JNDI lookup of the DataSource, etc.\n\nSure! If you want to add more things than JNDI support, maybe it could be worthwile. You can know that better than I , as you know better the code. But ( and please, forgive me because I'm talking without deeply SDPM knowledge) it seems to me that adding a DataSource lookup method should not be very difficult. My only doubt if it will be enough with a simple InitialContext instantiation or you will need to start thinking about passing special parameters to the JNDI environment. And well, if you have the lookup, then all the code is done; you only have to add the necessary close() methods.\n\nAlso, think that you have to evaluate if it has sense to have two different generic database persistence manager. For me, I think that is better and also less confusing for the final users to have a single good database persistence manager. But again, this is only my opinion.\n\n\n\n",
            "date": "2006-02-03T06:11:22.000+0000",
            "id": 2
        },
        {
            "author": "Jukka Zitting",
            "body": "Martin:\n> [OT]: Well, first of all, sorry if I offended someon putting the issue, because it seems that I got hard responses.\n\nDon't be sorry. This is a valid and good idea that deserves to be thoroughly discussed.\n\nMy undestanding is that the basic idea of Jackrabbit is that it is fully in control of the content a repository contains. Although the persistence model is highly configurable, the default Jackrabbit configuration has traditionally been to store data either directly in the filesystem or more recently to use an embedded database. The idea is that Jackrabbit provides a service that is at the same architectural level as a RDBMS (i.e. the backend), and that layering Jackrabbit on top of a separate backend system doesn't make much sense.\n\nThe lack of advanced deployment options (storage clustering, etc.) and administrative tools make however the option of storing the actual data in a separate database server quite attractive. Jackrabbit should therefore offer first-class support for remote databases as well as embedded ones as persistence options.\n\nI can volunteer to take a deeper look at the required changes and whether separate embedded/external database persistence managers are needed.\n",
            "date": "2006-02-03T07:15:39.000+0000",
            "id": 3
        },
        {
            "author": "Serge Huber",
            "body": "Well I agree that it might be best to keep the simple DB PM very simple.\n\nWe might have to modify it to be able to re-use code between the simple and a (slightly) more complex DB PM.\n\nOne thing I liked in one of the DB PMs that was done by Edgar I think was to externalize the SQL requests so that it would be easy at deployment time to modify the table and column names, as it may be necessary when conflicting with some applications. This is just an idea of the requirements to seperate this from a \"simple\" implementation.\n\n",
            "date": "2006-02-03T18:44:41.000+0000",
            "id": 4
        },
        {
            "author": "Marcel Reutegger",
            "body": "Martin wrote:\n> Well, first of all, sorry if I offended someon putting the issue, because it seems that I got hard responses.\n\nYou don't have to be sorry. I'm not against building a DB PM that uses a connection pool. I just had (and still have) doubts how this contributes to increased concurrency, because concurrency is mostly controlled outside of the PM.\n\nIt wasn't my intention to criticise anyone on a personal level.",
            "date": "2006-02-03T19:22:56.000+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "Attached a minimal and untested patch for adding support for DataSources bound in JNDI. It allows one to optionally configure a JNDI path as the dataSourceLocation configuration parameter instead of configuring the traditional driver/url/user/password parameters. If the dataSourceLocation parameter is given, then a JNDI lookup is made to get the DataSource and a Connection is acquired using DataSource.getConnection(). Otherwise the traditional configuration parameters are used.\n\nWould this be a good enough way to resolve this issue, or should we make a general DatabasePersistenceManager base class that contains most of the current SimpleDbPersistenceManager functionality and use separate SimpleDbPersistenceManager and JndiDbPersistenceManager subclasses for handling the different configuration mechanisms?",
            "date": "2006-02-16T07:24:30.000+0000",
            "id": 6
        },
        {
            "author": "Brian Moseley",
            "body": "since DerbyPersistenceManager subclasses SimpleDbPersistenceManager to add logic for shutting down the db server, it's not going to be useful for j2ee-managed connections.\n\ni like the idea of extracting a base class and then adding the jndi support to a J2eeDbPersistenceManager or some such subclass. i'd also suggest renaming DerbyPersistenceManager to, say, EmbeddedDerbyPersistenceManager to further highlight the environment it's meant to be used in.\n\ni'd also like to see this change made to DbFilesystem.\n\nthanks jukka!\n",
            "date": "2006-02-16T11:41:58.000+0000",
            "id": 7
        },
        {
            "author": "Jukka Zitting",
            "body": "> since DerbyPersistenceManager subclasses SimpleDbPersistenceManager to add logic for shutting down the db server,\n> it's not going to be useful for j2ee-managed connections. \n\nGood point. It seems that a common DatabasePersistenceManager is a better alternative.\n\n> i'd also like to see this change made to DbFilesystem. \n\nI'll take a look at that as well.",
            "date": "2006-02-16T16:11:17.000+0000",
            "id": 8
        },
        {
            "author": "Marcel Reutegger",
            "body": "Thanks Jukka for taking the initiative on this issue. If everyone else is ok with implementing JNDI support in the SimpleDbPersistenceManager that's also fine with me. But a have a few concerns that I'd like to express:\n\n- I share Brians opinion to create a separate implementation that is JNDI enabled and move the common logic into a base class. The main reason here is to keep the existing implementation simple.\n\n- The implementation that uses JNDI should not keep the connection that it gets from the datasource. There are several reasons why this is not desirable: 1) there might be a connection timeout in the datasource that will revoke the connection given to the PM, 2) if the connection is broken due to a network failure, the PM would have to recover from that failure. But this is exactly the responsibility of a DataSource.\nOne of the concerns with the current simple implementation is that it does not make use of a pool (DataSource), the JNDI enabled PM should address this.\n\n- With the previous point in mind, a JNDI enabled PM will not be able to use prepared statements over multiple store() operations, because it should return the connection. This will probably have a significant impact on the implementation of the PM. So, I'm not sure how much of the current Simple DB PM can acutally be reused.\n",
            "date": "2006-02-16T19:18:56.000+0000",
            "id": 9
        },
        {
            "author": "Stefan Guggisberg",
            "body": "i fully agree with all of marcel's concerns.",
            "date": "2006-02-17T04:57:32.000+0000",
            "id": 10
        },
        {
            "author": "Martin Perez",
            "body": "- It makes all the sense to move the JNDI handling to a base class, as it could be used by all the specializations.\n\n- Sure, even more: 3) Without closing connections it would be very easy to exhaust the application server connection pool, and I don't think the server admin would like this to happen when other applications could share the same pool.\n\n- I do not understand Marcel's 3 point. Also, I do not know why connections must be returned. I have been looking at the code and it is cleat that prepared statements cannot be used on that way, and also, the connection cannot be keeped. In traditional J2EE applications you should obtain a connection and close it (and by consequende the pstmt) on the same method. Why can this be done? \n\nMartin\n",
            "date": "2006-02-17T05:36:31.000+0000",
            "id": 11
        },
        {
            "author": "Marcel Reutegger",
            "body": "What I was trying to say is: the current Simple DB PM uses prepared statements for all of the DB operations. Those prepared statements are kept for the full lifetime of the PM and only closed when the PM is shut down.\nA more general DB PM that uses a DataSource (pool) will not be able to use such long lived prepared statements. After a store operation it should close (return) the connection. Because the life time of a statement is bounded to the connection, the PM will have to close the statements as well and create new ones when the next store() occurs.",
            "date": "2006-02-17T18:17:11.000+0000",
            "id": 12
        },
        {
            "author": "Jukka Zitting",
            "body": "Fixed in revisions 386838 - 386848. As described above, there are now abstract DatabasePersistenceManager and DatabaseFileSystem base classes that both contain an abstract getConnection() factory method (I refactored the initConnection() from JCR-355 as IMO it's cleaner the less subclasses know about base class internals) that subclasses need to implement. The existing \"simple\" subclasses implement this method using the JDBC DriverManager, and the added JNDI subclasses use a DataSource located using JNDI.\n\nI also added a protected DatabasePersistenceManager.closeConnection() method to avoid having to override the full close() method in DerbyPersistenceManager. I haven't yet applied the same solution to the DatabaseFileSystem class as I think that there might be a better way to handle this. More on this on the mailing list.\n\nI've added javadoc warnings about the long lifetime of the connections acquired by the database classes. This should cover Marcel's concerns at least somewhat, but I think that there is a better solution to this problem as well. Again, more soon on the mailing list.",
            "date": "2006-03-18T21:33:51.000+0000",
            "id": 13
        }
    ],
    "component": "",
    "description": "Currently, DB persistence managers have hardcoded urls. Even more, they will use a single connection with the drawbacks that this have regarding concurrency, performance and transactionality. \n\nIt would be fairly better to allow to configure DB persistence managers through JDNI references to DataSource. So giving responsability to application server. Concurrency, performance and transactionability will be highly boosted with this approach. \n\nThis could be a sample configuration :\n\n<PersistenceManager class=\"org.apache.jackrabbit.core.state.db.SimpleDbPersistenceManager\">\n       <param name=\"dataSource\" value=\"jdbc/JackrabbitDS\"/>\n\n        \n       .... think also about a way to pass params to data source, it should be simple ....\n\n       <param name=\"schema\" value=\"mysql\"/>\n       <param name=\"schemaObjectPrefix\" value=\"${\nwsp.name}_\"/>\n       <param name=\"externalBLOBs\" value=\"false\"/>\n   </PersistenceManager>",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-313",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Allow to configure DB persistence managers through JDNI",
    "systemSpecification": false,
    "version": "0.9, 1.0"
}