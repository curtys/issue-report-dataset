{
    "comments": [
        {
            "author": "Alex Deparvu",
            "body": "attached patch.\n\nfair warning;, it also contains some cosmetics involving Comparable (my eyes hurt from all those warnings in eclipse :)",
            "date": "2011-11-22T14:15:27.435+0000",
            "id": 0
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "After having looked at the code and the patch this looks good to me so far. I think the conclusion regarding granularity of equals of the Key class holds. That is, there is no harm in removing the comperator field from the Key class.\n\nThe comperator field has been part of the Key class since beginning of times (since JCR-106 that is). Maybe Marcel still remembers the rational for this. \n\nI will still do some testing of the patch to see whether it actually fixes the memory leak and document my findings here later. \n",
            "date": "2011-11-22T18:24:27.919+0000",
            "id": 1
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Testing indicates that the patch indeed works: Without the patch applied, executing a query with an order by clause in a loop will eat up memory very quickly and eventually result in an OOME. With the patch applied, I can see memory decreasing up to a certain limit where GC kicks in an the lower bound on free memory keeps stable. Also the jackrabbit-core test cases run. So I'm all fine with the patch.",
            "date": "2011-11-22T19:02:56.051+0000",
            "id": 2
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "On a second though removing the comperator field from the Key class might have some subtle side effects. The patch might break things in the situation where different ValueIndex instances should go into the cache for the same field and same prefix but a for a different FieldComparator implementation: despite different, both ValueIndex instances end up at the same cache slot.\n\nTo be on the safe side I think the comperator should thus 'somehow' stay in the Key class. One solution might be to use a WeakReference instead the comperator instance itself. Another (a bit hacky) solution might be to use the comepator's hashCode instead of the comperator instance itself.",
            "date": "2011-11-22T22:20:56.181+0000",
            "id": 3
        },
        {
            "author": "Alex Deparvu",
            "body": "> The patch might break things in the situation where different ValueIndex instances should go into the cache for the same field and same prefix but a for a different FieldComparator implementation: despite different, both ValueIndex instances end up at the same cache slot.\n\nAgreed, what I cannot understand is the relation between the ValueIndex and the provided field comparator implementation. To me they are 2 different things. Just look at how the ValueIndex cache is being build.\nSo I'm not sure if them \"ending up at the same cache slot\" is actually a bad thing :)\n\n",
            "date": "2011-11-22T22:47:47.303+0000",
            "id": 4
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "> So I'm not sure if them \"ending up at the same cache slot\" is actually a bad thing :) \n\nYes same here. That's way I asked Marcel to comment on this. AFAIK the initial code is from him.",
            "date": "2011-11-22T22:54:17.839+0000",
            "id": 5
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "I tested both my suggestions from above. Both works so far. With the WeakReference based approach one has to take care to use a super class which overrides equals and hashCode delegating to the referent. Also this approach seems heavier on GC: I see more GC cycles than with the hash code based approach. ",
            "date": "2011-11-22T23:02:56.874+0000",
            "id": 6
        },
        {
            "author": "Marcel Reutegger",
            "body": "Hmm, I can't remember why the comparator source is part of the Key. I agree with both of you that it isn't necessary because it has no influence on the ValueIndex that is created.\n\n+1 for the patch.",
            "date": "2011-11-23T10:28:02.247+0000",
            "id": 7
        },
        {
            "author": "Alex Deparvu",
            "body": "If we decide to keep any kind of reference to the comparator instance, I'd go with the hash code approach.\nIt seems really lightweight and it provides enough uniqueness for the cache key to avoid potential collision.",
            "date": "2011-11-23T10:31:51.829+0000",
            "id": 8
        },
        {
            "author": "Alex Deparvu",
            "body": "thanks for the feedback guys!\n\nI'll apply the patch shortly.",
            "date": "2011-11-23T10:37:33.048+0000",
            "id": 9
        },
        {
            "author": "Alex Deparvu",
            "body": "Fixed in revision 1205361.",
            "date": "2011-11-23T10:52:01.324+0000",
            "id": 10
        }
    ],
    "component": "jackrabbit-core",
    "description": "The SharedFieldCache has some problems with the way it builds the cache:\n - as key is has the IndexReader\n - as value it has a inner cache (another map) that has as a key a static inner class called 'Key'.\n\nThis 'Key' holds a reference to the comparator used for in the queries ran.\nAssuming this comparator is of any type that extends from AbstractFieldComparator (I think all of the custom JR comparators), then it keeps a reference to all the InderReader instances in order to be able to load the values as Comparable(s).\n\nSo the circle is complete and the SharedFieldCache entries never get GC'ed.\n\nOne option would have been to implement a 'purge' method on the cache, similar to the lucene mechanism, and when an InderReader gets closed is could call 'purge'. But that is both ugly AND is doesn't seem to work that well :)\n\nA more radical option is to remove the cache completely. Each instance of SimpleFieldComparator (the only client of this cache) already builds an array of the available values, so the cache would only help other instances of the same type. We'll not analyze this further.\n\nThe proposed solution (patch will follow shortly) is to remove the Comparator reference from the Key class. \nIt looks like it has no real purpose there, just to impact the 'equals' of the key, which makes no sense in the first place as the lucene query does not use the Comparator info at all.\nIf anything, using the same field and 2 different Comparators we'll get 2 different cache entries based on the same values from the lucene index.\n\nFeedback is appreciated!\n\n\n\n\n\n\n\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-3151",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "SharedFieldCache can cause a memory leak",
    "systemSpecification": true,
    "version": ""
}