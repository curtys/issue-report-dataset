{
    "comments": [
        {
            "author": "Jukka Zitting",
            "body": "+1, and OK for inclusion in 1.2",
            "date": "2006-12-19T09:11:00.000+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "Fixed in trunk and 1.2 branch.\n\nsvn revision: 488671",
            "date": "2006-12-19T13:37:02.000+0000",
            "id": 1
        },
        {
            "author": "Stefan Guggisberg",
            "body": "there are more synchronized methods that may lead to monitor contention",
            "date": "2006-12-20T12:56:03.000+0000",
            "id": 2
        },
        {
            "author": "Stefan Guggisberg",
            "body": "the following methods are synchronized on the CachingNamespaceResolver \ninstance:\n\nQName retrieveName(String jcrName) \nString retrieveName(QName name) \n \nthis potentially leads to monitor contention since those methods are \nindirectly called by a lot of jcr api methods (such as Node.getProperty() etc).\n\na possible solution would be to replace the internal LRUMap's with \nsomething that's optimized for concurrent read access (e.g.  an LRUMap\nimplementation that is based on doug lea's ConcurrentReaderHashMap).",
            "date": "2006-12-20T13:19:20.000+0000",
            "id": 3
        },
        {
            "author": "Marcel Reutegger",
            "body": "How about this one?",
            "date": "2006-12-20T14:24:30.000+0000",
            "id": 4
        },
        {
            "author": "Stefan Guggisberg",
            "body": "> How about this one?\n\n+1",
            "date": "2006-12-20T15:04:03.000+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "> How about this one? \n\n-1 as it feels way too complicated, at least for 1.2.\n\nI also don't believe that replacing synchronization with a r/w lock is going to help performance that much. The readLock.acquire() call also contains a synchronized critical section that might well take longer to execute than the guarded single hash lookup.\n\nI suggest to resolve this issue as currently committed, and to open a separate issue for improving the name resolution performance for Jackrabbit 1.3.",
            "date": "2006-12-20T21:58:22.000+0000",
            "id": 6
        },
        {
            "author": "Stefan Guggisberg",
            "body": "> I suggest to resolve this issue as currently committed, and to open a separate issue for improving the name resolution performance for Jackrabbit 1.3.\n\ni'd rather leave this issue open, the core issue (monitor contention with concurrent read access) still exists a thread dumps show.\n\nthe committed fix affected deprecated methods only and doesn't solve the core issue.",
            "date": "2006-12-21T09:34:20.000+0000",
            "id": 7
        },
        {
            "author": "Jukka Zitting",
            "body": "> i'd rather leave this issue open, the core issue (monitor contention with concurrent read access)\n> still exists a thread dumps show. \n>\n> the committed fix affected deprecated methods only and doesn't solve the core issue.\n\nThe issue title and description only mention the deprecated methods. I'd rather open a separate issue with  a better description of the core problem.\n\nAdditionally, from the release and Jira management perspective it's troublesome to have issues that are \"partially fixed\" in a release.",
            "date": "2006-12-21T09:42:27.000+0000",
            "id": 8
        },
        {
            "author": "Jukka Zitting",
            "body": "Resolved. Please continue discussion on the core issue in JCR-688.",
            "date": "2006-12-21T09:47:58.000+0000",
            "id": 9
        }
    ],
    "component": "jackrabbit-core",
    "description": "The methods getQName() and getJCRName() are unnecessarily synchronized and cause monitor contention with concurrent calls to the methods of the NameCache interface (those are also synchronized).\n\nI propose the following change:\n\nIndex: CachingNamespaceResolver.java\n===================================================================\n--- CachingNamespaceResolver.java\t(revision 488245)\n+++ CachingNamespaceResolver.java\t(working copy)\n@@ -84,7 +84,7 @@\n     /**\n      * @deprecated use {@link NameFormat#parse(String, NamespaceResolver)}\n      */\n-    public synchronized QName getQName(String name)\n+    public QName getQName(String name)\n             throws IllegalNameException, UnknownPrefixException {\n         return NameFormat.parse(name, this);\n     }\n@@ -92,7 +92,7 @@\n     /**\n      * @deprecated use {@link NameFormat#format(QName, NamespaceResolver)}\n      */\n-    public synchronized String getJCRName(QName name)\n+    public String getJCRName(QName name)\n             throws NoPrefixDeclaredException {\n         return NameFormat.format(name, this);\n     }\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-685",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Remove some synchronization on CachingNamespaceResolver",
    "systemSpecification": true,
    "version": ""
}