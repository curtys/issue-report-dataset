{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "Proposed fix.",
            "date": "2007-12-14T14:56:34.794+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "Revised patch. Previous version may produce a deadlock.",
            "date": "2007-12-14T15:15:47.138+0000",
            "id": 1
        },
        {
            "author": "Ard Schrijvers",
            "body": "Wouldn't be enough to replace\n\npublic ItemStateReferenceMap() {\n        super(new ReferenceMap(ReferenceMap.HARD, ReferenceMap.WEAK));\n}\n\nwith \n\npublic ItemStateReferenceMap() {\n        super(Collections.synchronizedMap(new ReferenceMap(ReferenceMap.HARD, ReferenceMap.WEAK)));\n}\n\nand only make those parts synchronized on the map where we iterate over some collection of the map? I must be missing something :-) \n\nhttp://java.sun.com/j2se/1.4.2/docs/api/java/util/Collections.html#synchronizedMap(java.util.Map)",
            "date": "2007-12-14T15:34:08.359+0000",
            "id": 2
        },
        {
            "author": "Marcel Reutegger",
            "body": "This will turn ItemStateReferenceMap into a synchonized map, which is not necessary for other usages. Furthermore there is also the ItemStateReferenceCache.cache, which might not be thread-safe as well.",
            "date": "2007-12-14T16:06:00.910+0000",
            "id": 3
        },
        {
            "author": "Ard Schrijvers",
            "body": "Okay.\n\nDo you know/experience if you changes regarding synchronized make things slower or is this hardly noticeable?",
            "date": "2007-12-14T16:16:18.258+0000",
            "id": 4
        },
        {
            "author": "Marcel Reutegger",
            "body": "Well, as with any synchronization it will slow down execution. But if I can to choose between a correct program and a slightly faster one that is incorrect, I will go for the first one...",
            "date": "2007-12-18T10:13:04.294+0000",
            "id": 5
        },
        {
            "author": "Ard Schrijvers",
            "body": ":-) \n\nTrue, but if it is like a big difference, other options might be worth looking at. But, I agree, incorrect is worse....obviously :-) ",
            "date": "2007-12-18T10:17:45.514+0000",
            "id": 6
        },
        {
            "author": "Marcel Reutegger",
            "body": "AFAICS, the difference is minimal. Running times for tests only differ slightly.",
            "date": "2007-12-18T10:57:06.084+0000",
            "id": 7
        },
        {
            "author": "Jukka Zitting",
            "body": "Could we not fix the problem at its source instead of in a synchronization wrapper? I'd just synchronize the methods in ItemStateReferenceCache.",
            "date": "2007-12-18T12:01:24.836+0000",
            "id": 8
        },
        {
            "author": "Marcel Reutegger",
            "body": "That would be an alternative, but as mentioned before there are use cases where synchronization is not needed. The cache in SharedItemStateManager does not need additional synchronization when DefaultISMLocking is used.\n\nWe have three potential usages of ItemStateReferenceCache:\n\n1) LocalItemStateManager#cache\n2) SharedItemStateManager#cache with DefaultISMLocking\n3) SharedItemStateManager#cache with FineGrainedLocking\n\n1) and 3) require a thread-safe ItemStateCache implementation. 2) does not have to be thread-safe.\n\nI'm also OK with synchronizing the ItemStateReferenceCache directly.\n\nWDOT?",
            "date": "2007-12-18T13:03:42.790+0000",
            "id": 9
        },
        {
            "author": "Jukka Zitting",
            "body": "Our codebase is already pretty complex, so avoiding an extra wrapper class and the complexity of \"is this thread-safe and does it need to be?\" is IMHO well worth the minor overhead of synchronization. Especially if in the long run we're even going to get rid of the only case that doesn't need to be thread-safe.",
            "date": "2007-12-18T13:44:51.917+0000",
            "id": 10
        },
        {
            "author": "Marcel Reutegger",
            "body": "This patch turns ItemStateReferenceCache into a thread-safe implementation. I also had to tweak LocalItemStateManager to avoid an deadlock in getItemState().",
            "date": "2007-12-18T15:26:47.448+0000",
            "id": 11
        },
        {
            "author": "Jukka Zitting",
            "body": "Attached (JCR-1271.jz.patch) is a slight revision of your latest patch. This one replaces the size(), keySet(), and values() methods in ItemStateCache with a single retrieveAll() method that nicely avoids all need for external synchronization.",
            "date": "2007-12-18T17:12:35.519+0000",
            "id": 12
        },
        {
            "author": "Marcel Reutegger",
            "body": "Definitively better than mine.\n\nCommitted Jukkas patch in revision: 605510",
            "date": "2007-12-19T10:50:29.870+0000",
            "id": 13
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.3 branch in revision 641272.",
            "date": "2008-03-26T12:02:02.467+0000",
            "id": 14
        }
    ],
    "component": "jackrabbit-core",
    "description": "Running ConcurrentReadWriteTest (NUM_NODES=5, NUM_THREADS=3, RUN_NUM_SECONDS=120) resulted in a NullPointerException:\n\nException in thread \"Thread-11\" java.lang.NullPointerException\n\tat org.apache.commons.collections.map.AbstractReferenceMap$ReferenceEntry.getValue(AbstractReferenceMap.java:596)\n\tat org.apache.commons.collections.map.AbstractReferenceMap.containsKey(AbstractReferenceMap.java:204)\n\tat org.apache.jackrabbit.core.state.ItemStateMap.contains(ItemStateMap.java:66)\n\tat org.apache.jackrabbit.core.state.ItemStateReferenceCache.isCached(ItemStateReferenceCache.java:91)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.hasItemState(LocalItemStateManager.java:173)\n\tat org.apache.jackrabbit.core.state.XAItemStateManager.hasItemState(XAItemStateManager.java:252)\n\tat org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(SessionItemStateManager.java:174)\n\tat org.apache.jackrabbit.core.ItemManager.createItemInstance(ItemManager.java:495)\n\tat org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:326)\n\tat org.apache.jackrabbit.core.LazyItemIterator.prefetchNext(LazyItemIterator.java:90)\n\tat org.apache.jackrabbit.core.LazyItemIterator.next(LazyItemIterator.java:203)\n\tat org.apache.jackrabbit.core.LazyItemIterator.nextProperty(LazyItemIterator.java:118)\n\tat org.apache.jackrabbit.core.ConcurrentReadWriteTest$1$1.execute(ConcurrentReadWriteTest.java:64)\n\tat org.apache.jackrabbit.core.AbstractConcurrencyTest$Executor.run(AbstractConcurrencyTest.java:110)\n\tat java.lang.Thread.run(Thread.java:619)\n\nThe cache is not synchronized and is accessed at the same time by the current thread and another thread that notified ItemStates about changes.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1271",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "NullPointerException when iterating over properties",
    "systemSpecification": true,
    "version": ""
}