{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "One possible solution is to ask the JSR 283 EG to declare those abstract flags as implementation variants. And mark those node types as non-abstract in jackrabbit.\n\nBut in any case we'll have to fix the test cases.",
            "date": "2009-06-19T07:11:58.346+0000",
            "id": 0
        },
        {
            "author": "Tobias Bocanegra",
            "body": "the only usecase i can imagine of creating nt:base nodes is, when you only work with mixin types. so you can alter the \"nodetype\" as you wish. but since jcr2.0 now supports Node.setPrimaryType(), this usecase is obsolete.",
            "date": "2009-06-19T08:37:19.278+0000",
            "id": 1
        },
        {
            "author": "Stefan Guggisberg",
            "body": "the only other use case is when you write a TCK test and you need to create a node using a mandatory built-in node type that does not allow child nodes... ;)\n\nthat's why all those test cases fail now",
            "date": "2009-06-19T10:26:21.356+0000",
            "id": 2
        },
        {
            "author": "Tobias Bocanegra",
            "body": "suggested to JSR283 to keep the abstract attribute on nt:base and nt:hierarchy node and i will adjust the tests, if no one objects.\n",
            "date": "2009-07-21T08:14:57.637+0000",
            "id": 3
        },
        {
            "author": "Tobias Bocanegra",
            "body": "fixed by using nt:address as nt:base replacement, since it does not allow childnodes and has no mandatory or autocreated properties.\n\nCommitted revision 796876.\n",
            "date": "2009-07-22T20:56:14.161+0000",
            "id": 4
        }
    ],
    "component": "jackrabbit-jcr-tests",
    "description": "JSR283 introduces a new node type attribute 'abstract' and defines nt:base and nt:hierarchyNode as such.\nwhen changing those nodetypes, the following test cases fail:\n\nFailed tests: \n  testDefinedAndLegalType(org.apache.jackrabbit.test.api.nodetype.CanAddChildNodeCallWithNodeTypeTest)\n  testResidualAndLegalType(org.apache.jackrabbit.test.api.nodetype.CanAddChildNodeCallWithNodeTypeTest)\n\nTests in error: \n  testAddNodeConstraintViolationExceptionUndefinedNodeType(org.apache.jackrabbit.test.api.NodeTest)\n  testRemoveMandatoryNode(org.apache.jackrabbit.test.api.NodeTest)\n  testCloneNodesConstraintViolationException(org.apache.jackrabbit.test.api.WorkspaceCloneTest)\n  testCopyNodesConstraintViolationException(org.apache.jackrabbit.test.api.WorkspaceCopyBetweenWorkspacesTest)\n  testCopyNodesConstraintViolationException(org.apache.jackrabbit.test.api.WorkspaceCopyTest)\n  testMoveNodesConstraintViolationException(org.apache.jackrabbit.test.api.WorkspaceMoveTest)\n  testNodeTypeConstraintViolationWorkspaceWithHandler(org.apache.jackrabbit.test.api.SerializationTest)\n  testNodeTypeConstraintViolationSessionWithHandler(org.apache.jackrabbit.test.api.SerializationTest)\n  testNodeTypeConstraintViolationWorkspace(org.apache.jackrabbit.test.api.SerializationTest)\n  testNodeTypeConstraintViolationSession(org.apache.jackrabbit.test.api.SerializationTest)\n  testJoinFilterPrimaryType(org.apache.jackrabbit.test.api.query.SQLJoinTest)\n  testElementTest(org.apache.jackrabbit.test.api.query.ElementTest)\n  testElementTestAnyNode(org.apache.jackrabbit.test.api.query.ElementTest)\n  testElementTestAnyNodeNtBase(org.apache.jackrabbit.test.api.query.ElementTest)\n  testElementTestAnyNodeSomeNT(org.apache.jackrabbit.test.api.query.ElementTest)\n  testElementTestNameTest(org.apache.jackrabbit.test.api.query.ElementTest)\n  testElementTestNameTestNtBase(org.apache.jackrabbit.test.api.query.ElementTest)\n  testElementTestNameTestSomeNT(org.apache.jackrabbit.test.api.query.ElementTest)\n  testElementTestNameTestSomeNTWithSNS(org.apache.jackrabbit.test.api.query.ElementTest)\n  testNodeType(org.apache.jackrabbit.test.api.observation.AddEventListenerTest)\n\n\nhere's a stacktrace of a failing test:\n\njavax.jcr.nodetype.ConstraintViolationException: nt:hierarchyNode: is an abstract node type.\n        at org.apache.jackrabbit.core.NodeImpl.internalAddChildNode(NodeImpl.java:768)\n        at org.apache.jackrabbit.core.NodeImpl.internalAddNode(NodeImpl.java:737)\n        at org.apache.jackrabbit.core.NodeImpl.internalAddNode(NodeImpl.java:691)\n        at org.apache.jackrabbit.core.NodeImpl.addNode(NodeImpl.java:2147)\n        at org.apache.jackrabbit.test.api.SessionTest.testMoveItemExistsException(SessionTest.java:69)\n\n\nthe failing tests are actually a backwards compatibility issue. nt:base and nt:hierarchyNode were\nnon-abstract in JCR 1.0, i.e. \n\n     node.addNode(\"foo\", \"nt:base\");\n\nwas perfectly legal.\n\nhowever, as of JCR 2.0, above statement fails. all above mentioned tests fail because they \ncreate nodes of type nt:base or nt:hierarchyNode.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2159",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Blocker",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Several test cases fail when declaring nt:base / nt:hierarchy node types as 'abstract' ",
    "systemSpecification": true,
    "version": "2.0"
}