{
    "comments": [
        {
            "author": "Peter Dettman",
            "body": "Patch modifies FileDataStore to check the return value from setLastModified as appropriate (raises an exception if it failed), and makes sure ACCESS_TIME_RESOLUTION is used in addRecord.\n\nAlso modifies GarbageCollector to check for -1 return value from Property.getLength since exceptions don't necessarily propagate.\n",
            "date": "2010-07-14T19:09:12.860+0000",
            "id": 0
        },
        {
            "author": "Thomas Mueller",
            "body": "Thanks a lot for the patch! It is now committed (in the trunk only so far). I made an additional change in addRecord: currently it's \"if (file.lastModified() < now)\" - I will change that to \"if (file.lastModified() < now + ACCESS_TIME_RESOLUTION)\".\n\nAgain about addRecord: your code only throws an exception if file.canWrite() returns true - is that for read-only file systems / access rights? Or does it have a different reason?\n\n> check for -1 return value from Property.getLength\n\nYou mean the exception from FileDataStore.getRecordIfStored() is swallowed? That's wouldn't be nice. Anyway, your change is OK.",
            "date": "2010-07-15T10:14:00.140+0000",
            "id": 1
        },
        {
            "author": "Peter Dettman",
            "body": "1. My feeling is that \"if (file.lastModified() < now + ACCESS_TIME_RESOLUTION)\" is not necessary, since the lastModified value will already be truncated to the system resolution, but I do not think it is harmful.\n\n2. I chose to throw exception only if file.canWrite, because I was trying to minimise the impact of the change. It's not clear to me whether setLastModified might work when !file.canWrite. However, it certainly must work (because of GC) if file.canWrite. I would consider moving the canWrite test outside of the setLastModified call, similar to getRecordIfStored, it just wasn't necessary to fix the immediate problem.\n\n3. Well, not swallowed exactly, but caught and converted to failure return code (-1) e.g. see BLOBInDataStore.getSize. In any case, the javadoc for Property.getLength/getLengths documents -1 as a possible \"failure\" return code, so it had to be tested. I think if Property.getLength/getLengths throws an exception, that is already correctly handled.\n\nThanks for the quick response.\n\n",
            "date": "2010-07-15T11:11:27.500+0000",
            "id": 2
        }
    ],
    "component": "jackrabbit-core",
    "description": "Garbage collection depends on the file modification date being successfully updated when records are \"touched\" during the mark phase. The result of a silent failure is the catastrophic loss of the file in the sweep phase.\n\nFileDataStore.getRecordIfStored does not, however, check the return code from setLastModified.\n\nI believe I was bitten by this when my dev deployment ran out of disk space. A substantial portion of my datastore was deleted, and the best explanation I can come up with is that the setLastModified calls started (silently) failing, leading to massive overkill in the sweep.\n\nThere is also a call to setLastModified in FileDataStore.addRecord which is not strictly correct in the face of GC (i.e. it needs the resolution offset, and also must succeed if the file is writable or risk incorrect collection).\n\nPatch to follow.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2674",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Critical",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "FileDataStore ignores return code from setLastModified",
    "systemSpecification": true,
    "version": "2.1"
}