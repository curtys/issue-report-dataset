{
    "comments": [
        {
            "author": "Edgar Poce",
            "body": "Patch",
            "date": "2005-03-13T08:12:16.000+0000",
            "id": 0
        },
        {
            "author": "Serge Huber",
            "body": "Does this patch address all the issues, especially the thread safe ones ? I'm not the expert with OJB and I'm not sure if the PBFactory returns thread safe instances at all.\n\nApart from that the proposed changes look good.",
            "date": "2005-03-18T01:35:22.000+0000",
            "id": 1
        },
        {
            "author": "Edgar Poce",
            "body": "I'm not an expert in OJB but I use it pretty much. AFAIK The persistence broker wraps a single connection and performs any action through it. \n\nRegarding transactions in multi-threaded environments, if a single broker is used it might lead to unpredictable behaviour.\n\nThe broker must be obtained and released in the single method that handles the entire trasaction, store(ChangeLog log) in this case. And the broker instance should be passed to any private method that adds an action in the transaction, e.g. store(NodeState). I think that would be thread-safe beacuse a new broker would be obtained from the pool on each request.\n\nThe same applies to hibernate, it's not an OJB specific issue.",
            "date": "2005-03-18T03:08:16.000+0000",
            "id": 2
        },
        {
            "author": "Edgar Poce",
            "body": "I didn't answer your question, sorry. The patch adresses all the issues.",
            "date": "2005-03-18T03:10:31.000+0000",
            "id": 3
        },
        {
            "author": "Serge Huber",
            "body": "Ok I've tested the patch and it looks all good. Thanks.",
            "date": "2005-03-18T18:58:38.000+0000",
            "id": 4
        },
        {
            "author": "Stefan Guggisberg",
            "body": "Serge Huber approved patch, \ncommitted patch on behalf of Serge Huber\nrev.158047",
            "date": "2005-03-18T19:24:35.000+0000",
            "id": 5
        }
    ],
    "component": "",
    "description": "OJBPersistenceManager seems to have the following problems\n\n1. OJBPersistenceBroker inherites from AbstractPersistenceBroker. There's no \nneed of using a non transactional implementation as the feature is available in \njdbc. \n\n2. A single broker is used and It's not thread-safe. This is not a problem now \nbecause it inherits from AbstractPersistenceManager, and the store(ChangeLog ) \nmethod is synchronized.\n\n3. The broker is never closed so it leaves an open connection.\n\n4. There's no pooling with only one broker.\n\n5 Each write method (e.g. store(NodeState state)) starts its own transaction \nbut the transaction should start and end in store(ChangeLog log).\n\n6. It never rollbacks, even when an item in the changelog can't be persisted.\n\n7. The mysql example create MyISAM tables which don't support transactions. \nInnodb tables would be more appropriate.\n\n8. jdbc to java type mapping is wrong for \nclass: org.apache.jackrabbit.core.state.orm.ORMBlobValue\nfield: size\nChanged from INTEGER to BIGINT\n\n9. When a Blob value is loaded a ArrayStoreException is thrown because in \nload(PropertyId id) BlobFileValues are added to internalValueList instead of \nInternalValue instances.\n\n10. in store(NodeReferences). When storing a NodeReferences which have some (but not all) the references deleted the OJB persistence Manager doesn't delete any one.\n\nSome of this problems are present in the Hibernate implementation.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-63",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "/contrib/orm-persistence/ OJBPersistenceManager",
    "systemSpecification": true,
    "version": ""
}