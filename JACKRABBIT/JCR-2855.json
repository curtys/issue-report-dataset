{
    "comments": [
        {
            "author": "Jukka Zitting",
            "body": "You tested this with 2.1.3, right? This seems related to JCR-2820, but is probably a slightly different problem since JCR-2820 is already fixed in 2.1.3.\n\nCan you still reproduce the problem with 2.2.x? If you can, please post a thread dump to make it easier to analyze the problem.",
            "date": "2011-01-05T17:52:59.073+0000",
            "id": 0
        },
        {
            "author": "Yoav Landman",
            "body": "I am seeing a similar behavior with 2.2.1 (took me a while to get to upgrading for testing this again).\nA thread (thread 1 from my other comment) is blocked in org.apache.jackrabbit.core.state.FineGrainedISMLocking.acquireWriteLock (FineGrainedISMLocking.java:143). Debugging shows that the activeWriterId in this frame is actually of a (pooled) thread that is idle and no longer doing any jcr activity .\nI am not closely familiar with the design, so perhaps I'm completely off, but it is unclear to me why writers that are downgraded to readers do not clean up the activeWriterId (in addition to nullifying the activeWriter - FineGrainedISMLocking.java:191). This seems to cause waiting writers not to get notified upon release of the read lock. Adding activeWriterId=null to WriteLockImpl.downgrade() seems to fix the problem for me while passing all the jackrabbit-core tests.\n\npool-2-thread-27@8112, prio=5, in group 'main', status: 'waiting'\n  java.lang.Thread.State: WAITING\n\t  at java.lang.Object.wait(Object.java:-1)\n\t  at java.lang.Object.wait(Object.java:485)\n\t  at EDU.oswego.cs.dl.util.concurrent.Latch.acquire(Unknown Source:-1)\n\t  at org.apache.jackrabbit.core.state.FineGrainedISMLocking.acquireWriteLock(FineGrainedISMLocking.java:143) <-- activeWriterId is of a thread that is no longer active\n\t  at org.apache.jackrabbit.core.state.SharedItemStateManager.acquireWriteLock(SharedItemStateManager.java:1850)\n\t  at org.apache.jackrabbit.core.state.SharedItemStateManager.access$200(SharedItemStateManager.java:115)\n\t  at org.apache.jackrabbit.core.state.SharedItemStateManager$Update.begin(SharedItemStateManager.java:565)\n\t  at org.apache.jackrabbit.core.state.SharedItemStateManager.beginUpdate(SharedItemStateManager.java:1459)\n\t  at org.apache.jackrabbit.core.state.XAItemStateManager.prepare(XAItemStateManager.java:163)\n\t  at org.apache.jackrabbit.core.TransactionContext.prepare(TransactionContext.java:157)\n\t  - locked <0x2041> (a org.apache.jackrabbit.core.TransactionContext)\n\t  at org.apache.jackrabbit.core.XASessionImpl.prepare(XASessionImpl.java:312)\n\t  at org.springframework.extensions.jcr.jackrabbit.support.JackRabbitUserTransaction.commit(JackRabbitUserTransaction.java:91)\n\t  at org.springframework.extensions.jcr.jackrabbit.LocalTransactionManager.doCommit(LocalTransactionManager.java:189)\n\t  at org.artifactory.jcr.JcrTransactionManager.doCommit(JcrTransactionManager.java:75)\n\t  at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754)\n\t  at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723)\n\t  at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:393)\n\t  at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:120)\n          ...",
            "date": "2011-01-28T00:11:15.722+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Fixed in revision 1066059 by keeping count of active readers, and clearing the activeWriterId when all reader and writer locks have been released. Merged to the 2.2 branch in revision 1066061.\n\nThe activeWriterId needs to be left non-null for a downgraded write lock so that a concurrent reader in the same transaction can re-enter the lock even if there is another writer waiting. See JCR-2753 for more background.",
            "date": "2011-02-01T15:20:34.747+0000",
            "id": 2
        }
    ],
    "component": "jackrabbit-core",
    "description": "Thread 1 calls Session.save() and has a write lock.\n\nThread 2 is in XA prepare() and is waiting on thread 1 in FineGrainedISMLocking.acquireWriteLock().\n\nThread 1's save calls SharedItemStateManager.Update#end() and performs a write-lock downgrade to a read-lock, then (at the end of Update#end()) it calls readLock.release(). FineGrainedISMLocking.ReadLockImpl#release thinks activeWriterId is of the current transation and does not notify any writers (activeWriterId is not being reset on downgrade in what seems to be a related to JCR-2753).\nThread 1 waits forever.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2855",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Writers blocked forever when waiting on update operations  ",
    "systemSpecification": true,
    "version": "2.1.3, 2.2.1"
}