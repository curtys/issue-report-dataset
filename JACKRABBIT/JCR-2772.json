{
    "comments": [
        {
            "author": "Tobias Bocanegra",
            "body": "ideally, unneeded mixin types are not removed until the save call.",
            "date": "2010-10-08T19:33:40.115+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "> checks to avoid redundant mixin\n\nis this mandated by the specification?",
            "date": "2010-10-11T08:49:22.822+0000",
            "id": 1
        },
        {
            "author": "Stefan Guggisberg",
            "body": "not a bug since the current behavior is according to the spec.",
            "date": "2010-10-11T09:34:09.880+0000",
            "id": 2
        },
        {
            "author": "Stefan Guggisberg",
            "body": "> > checks to avoid redundant mixin \n>\n> is this mandated by the specification?\n\nyes, see [1].\n\n<quote>\nIf this node is already of type mixinName (either due to a previously added mixin or due to its primary type, through inheritance) then this method has no effect. Otherwise mixinName is added to this node's jcr:mixinTypes property.\n</quote>\n\nthere's also a TCK test which expects the current behavior (adding a redundant mixin results in a nop).\n\n[1] http://www.day.com/maven/jsr170/javadocs/jcr-2.0/javax/jcr/Node.html#addMixin(java.lang.String)",
            "date": "2010-10-11T15:51:23.481+0000",
            "id": 3
        },
        {
            "author": "Stefan Guggisberg",
            "body": "JCR-2788 resolves this issue by providing a JackrabbitNode#setMixins() method",
            "date": "2010-10-25T16:24:37.549+0000",
            "id": 4
        },
        {
            "author": "Stefan Guggisberg",
            "body": "resolved as duplicate of JCR-2788",
            "date": "2010-10-25T16:25:49.044+0000",
            "id": 5
        }
    ],
    "component": "jackrabbit-core",
    "description": "node.addMixin() / node.removeMixin() have some checks to avoid redundant mixin settings on a node and not only when the node is saved.\n\neg: have 2 mixins: mix:A and mix:AA where mix:AA > mix:A and a node (N with mix:AA) on it.\n\nthen, N.addMixin(mix:A)  has no effect, since it's regarded as redundant.  so you have to remove mix:AA first and then add mix:A.\nthere is the first problem when applying mixin types programmatically, just be sure to remove them first before adding new ones.\n\nthe 2nd problem occurs when mix:A has a mandatory property. then somehow when downgrading from mix:AA to mix:A, some information is lost, and a save call results in\n\nUnable to save node 'N': javax.jcr.nodetype.ConstraintViolationException: /test/A: mandatory property {}prop does not exist.\nyou need to \"touch\" the property, otherwise it will not work.\n\nso only this works:\n\nN.removeMixin(\"mix:AA\");\nN.addMixin(\"mix:A\");\nN.setProperty(\"prop\", N.getProperty(\"prop\").getValue());\nsession.save();\n\n\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2772",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "replacing an extended mixin with it's supertype is problematic",
    "systemSpecification": true,
    "version": "2.0"
}