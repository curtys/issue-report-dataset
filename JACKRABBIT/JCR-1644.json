{
    "comments": [
        {
            "author": "Philippe Marschall",
            "body": "patch to rewrite method",
            "date": "2008-06-08T11:09:43.955+0000",
            "id": 0
        },
        {
            "author": "Philippe Marschall",
            "body": "patched class",
            "date": "2008-06-08T11:10:40.469+0000",
            "id": 1
        },
        {
            "author": "Philippe Marschall",
            "body": "A patch and the new class are attached.",
            "date": "2008-06-08T11:11:24.874+0000",
            "id": 2
        },
        {
            "author": "fabrizio giustina",
            "body": "I got the StackOverflowError too while trying to import large xml files with jackrabbit 1.4.5:\n\njava.lang.StackOverflowError\n\tat java.util.HashMap.get(HashMap.java:305)\n\tat org.apache.jackrabbit.core.xml.NamespaceContext.getURI(NamespaceContext.java:93)\n\tat org.apache.jackrabbit.core.xml.NamespaceContext.getURI(NamespaceContext.java:97)\n\tat org.apache.jackrabbit.core.xml.NamespaceContext.getURI(NamespaceContext.java:97)\n\t[...]\n\nlooks pretty much a bug than an improvement...",
            "date": "2008-06-15T20:24:23.674+0000",
            "id": 3
        },
        {
            "author": "fabrizio giustina",
            "body": "In order to successfully import s large xml file I had to patch bot getPrefix() and getURI() using iteration as suggested by Philippe, no other way to make jackrabbit handle it...\n\nCan I suggest to change this improvement to a bug \"Unable to import large xml files\"?",
            "date": "2008-07-27T07:47:21.850+0000",
            "id": 4
        },
        {
            "author": "fabrizio giustina",
            "body": "new patch, covering both getUri() and getPrefix().\n\nNote: I tried creating a testcase to reproduce the issue, but looks like there that the number of recursions allowed can be very different due to the environment or other factor. On a testcase I had to create an xml system with with about 5000 nested nodes, while on a real case I saw it crashing after few hundreds of nested nodes.\n",
            "date": "2008-07-27T13:52:34.502+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "What on earth are you doing with 5000 levels of nested elements? Even a few hundred nestings with two elements per every ten or so levels creates a document that won't fit any normal hard drives!\n\nSince there's already a patch and apparently an existing use case I guess I should apply the fix, but I would certainly not recommend dealing with so deep document structures. I just don't see how or where such a structure would make sense.",
            "date": "2008-07-27T15:06:52.101+0000",
            "id": 6
        },
        {
            "author": "Jukka Zitting",
            "body": "Patch applied in revision 680135.",
            "date": "2008-07-27T16:04:25.436+0000",
            "id": 7
        },
        {
            "author": "fabrizio giustina",
            "body": "thanks Jukka\n\n> What on earth are you doing with 5000 levels of nested elements?\n\nwell, as said that is what I got when trying to create a simple testcase in order to reproduce the problem, but in a real case I can successfully reproduce it with a 100MB system view file with only (just checked) approximatively 30-40 levels of nesting... probably the problem is triggered by some other factors I couldn't reproduce in a test\n",
            "date": "2008-07-29T06:05:36.485+0000",
            "id": 8
        },
        {
            "author": "Jukka Zitting",
            "body": "Are you sure the problem you were seeing was a stack overflow and not an out of memory condition? Currently Jackrabbit keeps the entire import in memory (in a format that's even more memory-intensive than DOM) before persisting the changes.",
            "date": "2008-07-29T08:45:07.478+0000",
            "id": 9
        },
        {
            "author": "Philippe Marschall",
            "body": "I am absolutely positive that it was a stack overflow:\n- the exception was java.lang.StackOverflowError\n- there was a stack trace in the log that was more than a dozen screens recursively in org.apache.jackrabbit.core.xml.NamespaceContext.getURI",
            "date": "2008-07-29T17:37:02.939+0000",
            "id": 10
        },
        {
            "author": "fabrizio giustina",
            "body": "I also can confirm it definitively was a StackOverflow, and that with the patch (without changing any other setting) I am able to successfully import the file.\n",
            "date": "2008-07-30T08:56:39.151+0000",
            "id": 11
        },
        {
            "author": "Jukka Zitting",
            "body": "The stack overflows on NamespaceContext should really only be caused by excessively nested XML elements (at least hundredths, probably thousands, of levels of nesting). If this happens on documents with less than 100 levels of nesting, then I suspect that there's something else wrong with the code; like the NamespaceContext stack not being correctly rewound.\n\nI tried reviewing the related code, but couldn't find any obvious errors. Could you perhaps send me a troublesome XML document or come up with a cleaned up example that illustrates the problem? It's not high priority as it seems like the issue is already solved by the patch, but I'd rather verify that we actually fixed the root cause instead of just working around it.",
            "date": "2008-07-30T14:43:39.443+0000",
            "id": 12
        },
        {
            "author": "Gr\u00e9gory Joseph",
            "body": "Any chance we could get the patch in the 1.4 branch ?",
            "date": "2008-08-01T01:41:42.045+0000",
            "id": 13
        },
        {
            "author": "Philippe Marschall",
            "body": "I attached a file that should produce a large stack in NamespaceContext.getUR. It might or might not cause a stack overflow on your system.",
            "date": "2008-08-02T21:11:07.834+0000",
            "id": 14
        },
        {
            "author": "Jukka Zitting",
            "body": "Based on demand I merged this to the 1.4 branch in revision 682313. The fix will be included in jackrabbit-core 1.4.6.\n\nThanks for the example XML file! I tried importing it (with jackrabbit-core 1.4.1), but the tallest NamespaceContext stack I saw was just 13 levels deep, i.e. nowhere near to cause a stack overflow unless your application already is way too close to the stack limit.",
            "date": "2008-08-04T10:24:40.116+0000",
            "id": 15
        },
        {
            "author": "Gr\u00e9gory Joseph",
            "body": "Thanks for the merge ! :)",
            "date": "2008-08-04T10:46:09.874+0000",
            "id": 16
        }
    ],
    "component": "jackrabbit-core, xml",
    "description": "Currently the method org.apache.jackrabbit.core.xml.NamespaceContext#getPrefix(java.lang.String) uses recursion. For very large XML files (50 MB Magnolia website exports) this causes a stack overflow. The method can easily be rewritten using iteration.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1644",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "make NamespaceContext#getPrefix(java.lang.String) iterative instead of recursive",
    "systemSpecification": true,
    "version": "core 1.4.5"
}