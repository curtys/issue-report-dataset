{
    "comments": [
        {
            "author": "Jukka Zitting",
            "body": "+1 Alternatively we could just set the initial size to the default 16 as the resize logic shouldn't really affect performance to any notable degree.",
            "date": "2010-10-06T12:15:33.716+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "That was actually another point I noticed when I looked at the code. What is the reason that you set the initial size to 1024?",
            "date": "2010-10-06T13:10:54.902+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "> What is the reason that you set the initial size to 1024?\n\nThe three-argument constructor (that's needed to enable LRU behaviour) requires some value there, and since there's no public constant for the default value I simply selected something that seemed reasonable. I chose a high value since I expected most practical cases to in any case use pretty large caches, and since environments with lots of processors would typically also have lots of available memory. I of course forgot to consider the fixed memory limits we specify for our test runs.\n\nEssentially I just picked the value from my proverbial hat, so it's fine to change it to something different, especially if doing so helps prevent problems!",
            "date": "2010-10-06T13:22:23.344+0000",
            "id": 2
        },
        {
            "author": "Marcel Reutegger",
            "body": ">  three-argument constructor\n\nah, right. thanks, that explains it.",
            "date": "2010-10-06T14:17:52.371+0000",
            "id": 3
        },
        {
            "author": "Jukka Zitting",
            "body": "I went ahead and changed the initial size of each cache segment from 1024 to 16. See revision 1005112.",
            "date": "2010-10-06T16:47:42.604+0000",
            "id": 4
        },
        {
            "author": "Jukka Zitting",
            "body": "Resolving as fixed.",
            "date": "2010-10-13T13:13:44.878+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 2.1 branch in revision 1026002.",
            "date": "2010-10-21T13:58:30.522+0000",
            "id": 6
        },
        {
            "author": "Jukka Zitting",
            "body": "And merged to the 2.0 branch in revision 1026027.",
            "date": "2010-10-21T15:28:38.427+0000",
            "id": 7
        }
    ],
    "component": "jackrabbit-core",
    "description": "This causes a build failure on my machine. Tests run into an OOME because the initial memory footprint of a ConcurrentCache on my machine is 8k. Many of the tests keep references to some kind of repository objects (node, session, x-manager), which means ConcurrentCache instances  cannot be garbage collected immediately after a test run.\n\nI think the overall initial size of the cache should be independent of the number of segments. See proposed patch.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2770",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Initial size of ConcurrentCache depends on number of segments (available processors)",
    "systemSpecification": true,
    "version": ""
}