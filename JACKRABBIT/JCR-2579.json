{
    "comments": [
        {
            "author": "Jukka Zitting",
            "body": "Unfortunately I still don't have a fix for this issue, even though I can fairly easily recreate it with the ConcurrentNodeModificationTest class in jackrabbit-core.\n\nSince this is the last bug open for 2.1.0 and the number of use cases it impacts is somewhat limited I'm postponing it to 2.1.1 to avoid holding up the 2.1.0 release too much.",
            "date": "2010-04-16T14:12:36.579+0000",
            "id": 0
        },
        {
            "author": "Dan Diephouse",
            "body": "Thanks for looking into this Jukka. Glad I'm not crazy and you can reproduce it too.",
            "date": "2010-04-16T17:02:55.217+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Fixed in revision 955307 and merged to the 2.1 branch in revision 955314.",
            "date": "2010-06-16T17:30:24.547+0000",
            "id": 2
        },
        {
            "author": "Dan Diephouse",
            "body": "Awesome - thanks!!!",
            "date": "2010-06-16T18:01:56.912+0000",
            "id": 3
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "Would be fine to have these changes in 1.6.3 too.",
            "date": "2010-06-17T12:27:57.458+0000",
            "id": 4
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 2.0 branch in revision 958604.",
            "date": "2010-06-28T15:36:50.774+0000",
            "id": 5
        },
        {
            "author": "Adam Cooney",
            "body": "I can't see that the linked subversion commits fix in v1.6.3.",
            "date": "2010-07-29T08:53:59.062+0000",
            "id": 6
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.6 branch in revision 998331.",
            "date": "2010-09-17T21:21:53.476+0000",
            "id": 7
        }
    ],
    "component": "jackrabbit-core",
    "description": "I'm having some problems doing concurrent addition of nodes to a parent node in Jackrabbit.  I've attached a simple test which starts up a bunch of threads which add nodes to a parent node concurrently. If I add in locks I can get this to work, however according to the mailing list this should work without locks. However, the test always fails with this:\n\njavax.jcr.InvalidItemStateException: Item cannot be saved because it has been modified externally: node /testParent\n\tat org.apache.jackrabbit.core.ItemImpl.getTransientStates(ItemImpl.java:281)\n\tat org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:939)\n\tat org.mule.galaxy.impl.JackrabbitConcurrentWriteTest$1.run(JackrabbitConcurrentWriteTest.java:71)\n\nI'm using Jackrabbit 1.6.1. Here is my (verbose) node type:\n\n  <nodeType name=\"galaxy:noSiblings\" \n    isMixin=\"false\" \n    hasOrderableChildNodes=\"false\"\n    primaryItemName=\"\">\n    <propertyDefinition name=\"*\" requiredType=\"undefined\" onParentVersion=\"COPY\" />\n    <propertyDefinition name=\"*\" requiredType=\"undefined\" onParentVersion=\"COPY\" multiple=\"true\"/>\n    <childNodeDefinition name=\"*\" defaultPrimaryType=\"nt:unstructured\" onParentVersion=\"COPY\" sameNameSiblings=\"false\" />\n    <supertypes>\n        <supertype>nt:base</supertype>\n        <supertype>mix:referenceable</supertype>\n        <supertype>mix:lockable</supertype>\n    </supertypes>\n  </nodeType>\n\nAnd my test:    \n\npackage org.mule.galaxy.impl;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.jcr.LoginException;\nimport javax.jcr.Node;\nimport javax.jcr.Repository;\nimport javax.jcr.RepositoryException;\nimport javax.jcr.Session;\nimport javax.jcr.SimpleCredentials;\n\nimport junit.framework.TestCase;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.jackrabbit.api.JackrabbitNodeTypeManager;\nimport org.apache.jackrabbit.core.RepositoryImpl;\nimport org.apache.jackrabbit.core.TransientRepository;\nimport org.apache.jackrabbit.core.config.RepositoryConfig;\n\npublic class JackrabbitConcurrentWriteTest extends TestCase {\n    \n    private Repository repository;\n    private Session session;\n    private String parentUUID;\n    private boolean continueLoop = true;\n    \n    public void setUp() throws Exception {\n        FileUtils.deleteDirectory(new File(\"repository\"));\n        File repoDir = new File(\"repository\");\n        repoDir.mkdirs();\n        RepositoryConfig config = RepositoryConfig.create(new File(\"src/test/resources/META-INF/jackrabbit-repo-test.xml\"), repoDir);\n        repository = RepositoryImpl.create(config);\n        session = createSession();\n        \n        createCustomNodeTypes(session);\n        \n        parentUUID = session.getRootNode().addNode(\"testParent\", \"galaxy:noSiblings\").getUUID();\n        session.save();\n        session.logout();\n    }\n\n    private Session createSession() throws LoginException, RepositoryException {\n        return repository.login(new SimpleCredentials(\"username\", \"password\".toCharArray()));\n    }\n    \n    public void testConcurrency() throws Exception {\n        final List<Exception> exceptions = new ArrayList<Exception>();\n        int threadCount = 20;\n        final CountDownLatch latch = new CountDownLatch(threadCount);\n        \n        for (int i = 0; i < threadCount; i++) {\n            Thread thread = new Thread() {\n\n                @Override\n                public void run() {\n                    try {\n                        while (continueLoop) {\n                            Session session = createSession();\n                            try {\n                                Node node = session.getNodeByUUID(parentUUID);\n                                node.addNode(UUID.randomUUID().toString());\n                                node.save();\n                                session.save();\n                            } finally {\n                                session.logout();\n                            }   \n                        }\n                    } catch (RepositoryException e) {\n                        exceptions.add(e);\n                        continueLoop = false;\n                    }\n                    latch.countDown();\n                }\n                \n            };\n            thread.start();\n        }\n        \n        latch.await(10, TimeUnit.SECONDS);\n        continueLoop = false;\n        \n        for (Exception e : exceptions) {\n            e.printStackTrace();\n        }\n        assertEquals(0, exceptions.size());\n    }\n    \n    public void createCustomNodeTypes(Session session) throws RepositoryException, IOException {\n        // Get the JackrabbitNodeTypeManager from the Workspace.\n        // Note that it must be cast from the generic JCR NodeTypeManager to\n        // the Jackrabbit-specific implementation.\n        // (see: http://jackrabbit.apache.org/node-types.html)\n        JackrabbitNodeTypeManager manager = (JackrabbitNodeTypeManager) session.getWorkspace().getNodeTypeManager();\n\n        // Register the custom node types defined in the CND file\n        InputStream is = Thread.currentThread().getContextClassLoader()\n                .getResourceAsStream(\"org/mule/galaxy/impl/jcr/nodeTypes.xml\");\n        manager.registerNodeTypes(is, JackrabbitNodeTypeManager.TEXT_XML);\n    }\n}",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2579",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "InvalidItemStateException when attempting concurrent, non conflicting writes",
    "systemSpecification": true,
    "version": "1.6.1, 2.0, 2.1"
}