{
    "comments": [
        {
            "author": "angela",
            "body": "patch adding the checks suggested above (and replacing some for-loops by foreach-loops)\nwas there another possibility to take a look at the child item defs rather than retrieving the child items themselves?\n\n",
            "date": "2009-09-29T08:02:58.650+0000",
            "id": 0
        },
        {
            "author": "angela",
            "body": "alternative patch accessing the ItemData instead of the Item itself in order to retrieve the definition.\ndrawback: ItemManager#getItemData was private -> changed.",
            "date": "2009-09-30T08:01:24.431+0000",
            "id": 1
        }
    ],
    "component": "jackrabbit-core",
    "description": "ItemImpl#validateTransientItems iterates over all mandatory child node/property definitions in order to assert that those items have\nbeen created. However, it only checks if an item with the name defined by the mandatory item definition is present and not if that\nexisting item really has the mandatory definition.\n\nthe example i had:\n- mandatory single-value property.\n- there is the possibility to add residual props\n- added a residual property with the name of the mandatory prop but with multiple values\n\n-> changes are saved without exception.\n-> the node doesn't have a property with the mandatory definition.\n\n((without having tried it out, i think the same would be possible with child nodes))\n\nsuggested fix:\nif there is a child item with the mandatory-item-name -> make sure it's definition is mandatory (or the expected one...)\npatch will follow.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2333",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "ItemImpl#validateTransientItems: Incomplete validation of mandatory child item",
    "systemSpecification": true,
    "version": ""
}