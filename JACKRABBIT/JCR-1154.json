{
    "comments": [
        {
            "author": "Esteban Franqueiro",
            "body": "This is an implementation of a database-based data store. It currently uses SQL Server but this can be changed by subclassing the DatabaseDataStore class and overriding its buildSQLStatements() method as usual. As discussed, this impl uses UUIDs for the record id's, but we'll be working out a solution like the one proposed by Thomas.\nAlso included is a garbage collector (based on the initial implementation by Thomas). The changes are mostly cosmetic, to generalize it for the file and database DS.\nIn RepositoryImpl's constructor is the code to initialize the garbage collector, according to the configuration in the repository.xml file.\nIn the included InternalValue we added methods useDataStore()/setDataStore() so we can avoid relaying on the system property.\nThere are a few tests, for different cases (we couldn't cover every corner case, of course).\nPlease note that there are a few design decisions in which we had to take into account the application we're building on top of Jackrabbit, but we tried very hard to keep these to a minimum while at the same time trying to simplify each time we have to update the version of Jackrabbit, since our application extends some of it's functionality (specifically, the database data store :-) ). I mention the ones I remember now: the boolean parameter in DatabaseDataStore.getConnection(), and the DatabaseRecord implementation. We should further discuss these issues.\nFinally, note that the attachment is NOT a patch since my working version has many patches applied to it.",
            "date": "2007-10-10T18:01:48.984+0000",
            "id": 0
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Changed attachment name.",
            "date": "2007-10-10T18:30:55.959+0000",
            "id": 1
        },
        {
            "author": "Thomas Mueller",
            "body": "Thanks a lot for your help Esteban!\n\nI'm currently trying to integrate this patch into the current jackrabbit trunk. Hopefully the garbage collection problem can be solved more easily than in your patch. I'm not sure if you saw the WeakHashMap 'inUse' in the file data store, what do you think about it?\n\nAlso I like to make sure that the database data store can re-connect to the database automatically; if possible the auto-reconnect feature of the bundle db persistence manager should be used.\n\nAnyway, I'm working on it, but it will take some more time.\n\nThomas\n",
            "date": "2007-10-12T15:19:58.646+0000",
            "id": 2
        },
        {
            "author": "Thomas Mueller",
            "body": "Hi,\n\nThanks again for the patch! And sorry for the delay. I have a few remarks and questions:\n\n- please use spaces, not tabs (Jackrabbit consistently uses spaces)\n- please don't use import ...*\n- byte b[] > byte[] b\n- public is not required in interfaces\n- return does not require (..)\n\nTo fix such problems, I use Checkstyle. If you like I can post the configuration I use.\n\nGarbage collection: I like make garbage collection implementation independent; is it OK for you if I remove those cases? AbstractGarbageCollector and AbstractDataStore are not required then (anyway they are small).\n\nIt would be great if the database data store would automatically re-connect if the connection was lost (important for MySQL). To achieve this, org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager can be used.\n\nIt's quite tricky that DatabaseRecord extends FilterInputStream... However I'm not sure if it is required, is it not possible to just wrap the database BLOB object?\n\nI don't think that FileDataStoreConstants is required.\n\nThose are just my view, and I'm open to discuss them of course.\n\nIf you have time to change it yourself please go ahead. Otherwise I will do it and post the patch here before I commit it - but it will take a few more days. \n\nThanks for your help!\nThomas\n",
            "date": "2007-11-01T11:49:24.275+0000",
            "id": 3
        },
        {
            "author": "Esteban Franqueiro",
            "body": "See http://www.nabble.com/Re%3A--jira--Commented%3A-%28JCR-1154%29-Database-Data-Store-p13535861.html for response.",
            "date": "2007-11-01T19:45:15.965+0000",
            "id": 4
        },
        {
            "author": "Thomas Mueller",
            "body": "In revision 591286, the DataStore throws DataStoreException instead of IOException. This should simplify adding new data stores, for example the DatabaseDataStore.\n",
            "date": "2007-11-02T09:56:04.300+0000",
            "id": 5
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Shouldn't the DataStoreException (as well as every exception, actually) have the DataStoreException(Exception) constructor?",
            "date": "2007-12-10T14:49:43.213+0000",
            "id": 6
        },
        {
            "author": "Thomas Mueller",
            "body": "There is: \"public DataStoreException(String message, Throwable cause)\". Is this not enough? If not, why?\n",
            "date": "2007-12-10T14:55:20.685+0000",
            "id": 7
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Why have to write\ncatch (SomeException e) {\n    throw new DataStoreException(e.getMessage(), e);\n}\nwhen \ncatch (SomeException e) {\n    throw new DataStoreException(e);\n}\ndoes the same?",
            "date": "2007-12-10T15:16:04.806+0000",
            "id": 8
        },
        {
            "author": "Thomas Mueller",
            "body": "The original message may not be very helpful. I think it's better to add as much context information as possible, as in:\n\n        try {\n            return new FileInputStream(file);\n        } catch (IOException e) {\n            throw new DataStoreException(\"Error opening input stream of \" + file.getAbsolutePath(), e);\n        }\n\nbecause the exception from FileInputStream may not contain the absolute path. Or:\n\n        } catch (Exception e) {\n            throw convert(\"Can not init data store, driver=\" + driver + \" url=\" + url + \" user=\" + user, e);\n        }\n\nThe original message will not always have that much context information. But if you need the non-message constructor, it's not a problem, I can add it.\n",
            "date": "2007-12-10T15:30:56.722+0000",
            "id": 9
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Also, I think FileDataRecord class should be public, and the DataRecord interface should have a getLastModified() method. These are for extensibility. Since it's not public, it can't be extended from another package. And the method is the easyest way to get the last modified time of a DB record in my case.",
            "date": "2007-12-10T15:40:40.303+0000",
            "id": 10
        },
        {
            "author": "Thomas Mueller",
            "body": "The current solution is still not perfect (blobs need to fit in memory for MySQL and PostgreSQL), but in a usable state I hope.",
            "date": "2007-12-12T07:41:32.553+0000",
            "id": 11
        },
        {
            "author": "Esteban Franqueiro",
            "body": "I see you have updated the impl. I'm checkin it out right now. I have a few comments:\n* you have to update the javadoc in DbDataStore (it has a wrong package and class name, an also the className attribute should be \"class\"\n* you left the @author tag in Pool and TempFileInputStream classes\n* shouldn't be better to use a larger buffer inTempFileInputStream.writeToFileAndClose()? like 64K perhaps?\n* what happens if two clients request the same binary at the same time? I guess the temp file doesn't overwrite the other one, so the file is copied twice, right?\n\nBTW, thanks for commiting the changes I asked for, but I still think that making RepositoryImpl.getWorkspaceNames() public will be useful (I'm using it for the GC).\n\nRegards",
            "date": "2007-12-12T15:38:06.930+0000",
            "id": 12
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Hi Thomas.\nI noticed that you made the FileDataRecord public, but it's only constructor protected. This way you can't have a class that returns a file data record, because it can't construct one. Maybe I didn't express correctly. I want to use FileDataRecord from another package, so I need both the class and its constructor(s) to be public . For the time being I'm not extending it, but who knows :)\nI would also like to ask for a getLastModified() method in the DataRecord interface.\nRegards",
            "date": "2007-12-12T20:47:43.089+0000",
            "id": 13
        },
        {
            "author": "Stefan Guggisberg",
            "body": "> Esteban Franqueiro commented on JCR-1154:\n> -----------------------------------------\n> \n> [...]\n> \n> BTW, thanks for commiting the changes I asked for, but I still think that making RepositoryImpl.getWorkspaceNames() public will be useful (I'm using it for the GC).\n\nthe said method is not public since it returns *all* workspace names, regardless of user rights. please note that \nthe a session must only see/know about workspaces it is actually allowed to access.   \n\nsee http://www.day.com/maven/jsr170/javadocs/jcr-1.0/javax/jcr/Workspace.html#getAccessibleWorkspaceNames()\n",
            "date": "2007-12-13T09:37:29.403+0000",
            "id": 14
        },
        {
            "author": "Thomas Mueller",
            "body": "Stefan, I don't think we are talking about the same issue. It was never the idea to add this method to JackrabbitRepository. Anyway, I found a workaround to get the workspace names (if you need it):\n\n        RepositoryImpl r = (RepositoryImpl) rep;\n        RepositoryConfig conf = r.getConfig();\n        Collection coll = conf.getWorkspaceConfigs();\n        for(Iterator it = coll.iterator(); it.hasNext();) {\n            WorkspaceConfig wsc = (WorkspaceConfig) it.next();\n            wsc.getName();\n        }\n\nThere is no session required to call those methods. In any case, the workspace names may not be required for the data store garbage collection. I will propose another solution.",
            "date": "2007-12-13T12:47:13.362+0000",
            "id": 15
        },
        {
            "author": "Thomas Mueller",
            "body": "> FileDataRecord class should be public, and the DataRecord interface should have a getLastModified() method. \n\nDo you still need this?\n\n> These are for extensibility. \n\nFileDataRecord is now protected, but why do you want to extend it? I don't think it's a good idea to re-use the class for something that it's not meant for (it would break encapsulation).\n\nRegards,\nThomas\n",
            "date": "2007-12-13T13:32:31.157+0000",
            "id": 16
        },
        {
            "author": "Esteban Franqueiro",
            "body": "> Do you still need this?\n\nYes.\n\n> FileDataRecord is now protected, but why do you want to extend it? I don't think it's a good idea to re-use the class for something that it's not meant for (it would break encapsulation).\n\nLike I said in my last message, I don't want to extend it, I want to use it from another package, so I need both the class and constructor to be public.\n\nRegards",
            "date": "2007-12-13T14:20:48.789+0000",
            "id": 17
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Stefan,\n\n> the said method is not public since it returns *all* workspace names, regardless of user rights. please note that\n> the a session must only see/know about workspaces it is actually allowed to access. \n\nI'm working on a garbage collector for the data store. The GC doesn't care about user rights, or, putting it another way, it must be able to access all workspaces. Ideally I'd like to use a SystemSession, but you can't get one outside RepositoryImpl or o.a.j.c package (i.e., getSystemSession(String) is package private, WorkspaceInfo is protected).\nI understand that these APIs shouldn't be public, but they're useful from within the core. In my case, for the GC.\nI'm very interested in using another way to walk every workspace, but this other way should guarantee that the repository won't shutdown during a walk operation. I'll check the solution Thomas said he'll be proposing, but in the mean time that is what I'm using.\nStill, I don't see why this APIs aren't public.\nRegards",
            "date": "2007-12-13T15:50:33.679+0000",
            "id": 18
        },
        {
            "author": "Thomas Mueller",
            "body": "Hi,\n\nThe solution I am working on right now is: add a method\n\npublic GarbageCollector SessionImpl.createDataStoreGarbageCollector().\n\nThis method creates a data store garbage collector object and initialized it. If all persistence managers are IterablePersistenceManager (a new interface with one method: getAllNodeIds; currently implemented for all BundlePersistenceManager), then it will use this method to scan the repository.\n\nIf not (if other persistence managers are used), it uses the same method as now to scan the repository (however automatically in all workspaces).\n\nThat means the methods don't need to be made public (SessionsImpl is in the same package as RepositoryImpl).\n\nRegards,\nThomas",
            "date": "2007-12-13T16:05:00.021+0000",
            "id": 19
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Really interesting. Have you thought about the use case of the GC running in a background thread? How would you go about it?\nCould you post your code, as a patch maybe, to take a look a it?\nAs you know this feature is very important for us.",
            "date": "2007-12-13T16:16:15.190+0000",
            "id": 20
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Thomas, with the test I posted in JCR-1250 I see that there's still a copy from the DB to the local FS on the save() call (which I believe is unnecessary). Also, there are many calls to touch() inside the data store, and at least one call to getRecord().",
            "date": "2007-12-17T21:01:55.428+0000",
            "id": 21
        },
        {
            "author": "Thomas Mueller",
            "body": "Hi,\n\nI have tested it again and my results are:\n\nWhen storing an object, a temp file is created for most databases to find out how long the binary object is. For databases that support PreparedStatement.setBinaryStream with unknown size (currently only the H2 database), no temp file is created.\n\nWhen retrieving an object (prop.getStream()), the call sequence is: 1) DbDataStore.getRecord(..), which calls touch(..) but touch(..) returns quickly.  2) DbDataRecord.getStream(), which calls touch(..) but touch also doesn't do anything. Here a temp file is created, otherwise the connection would be blocked until the application read the blob. By the way, after running the test, I did not have any leftover temp files.\n\nSo if I run the test, everything looks fine to me.\n",
            "date": "2007-12-18T09:25:36.349+0000",
            "id": 22
        },
        {
            "author": "Esteban Franqueiro",
            "body": "The following javadoc comment should be removed from the DbDataStore class:\n * A three level directory structure is used to avoid placing too many\n * files in a single directory. The chosen structure is designed to scale\n * up to billions of distinct records.\n",
            "date": "2008-02-05T14:18:09.242+0000",
            "id": 23
        },
        {
            "author": "Thomas Mueller",
            "body": "Javadoc comment fixed in revision 618935",
            "date": "2008-02-06T09:33:53.732+0000",
            "id": 24
        },
        {
            "author": "Esteban Franqueiro",
            "body": "The attachment contains a test class for the issue I reported in [1] and a helper class it depends on. Also includes a patch that corrects this issue by allowing pooled connections to remain open until the streams they're serving are closed.\n\n[1] http://mail-archives.apache.org/mod_mbox/jackrabbit-dev/200802.mbox/browser",
            "date": "2008-02-14T19:19:10.271+0000",
            "id": 25
        },
        {
            "author": "Jukka Zitting",
            "body": "Esteban, since this issue has already been closed for 1.4, it would be better if you created new Jira issues for any improvements or other changes. That would make it much easier to track which changes are being included in which release.\n\nAlso, please avoid putting multiple independent changes in a single issue or patch. For example the test cases should go to JCR-1187 and the concurrent read patch should go to a new improvement issue.",
            "date": "2008-02-15T09:40:54.913+0000",
            "id": 26
        }
    ],
    "component": "jackrabbit-core",
    "description": "We want to have a database backed data store implementation.\nAn implementation using files is already available as part of JCR-926.\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1154",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Blocker",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Database Data Store",
    "systemSpecification": true,
    "version": ""
}