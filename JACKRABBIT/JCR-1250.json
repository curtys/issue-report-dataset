{
    "comments": [
        {
            "author": "Thomas Mueller",
            "body": "Hi,\n\nThe problem is that the MS SQL Server JDBC driver tries to load the whole result set in memory by default (including the BLOB). There is a solution:\n\n- Use version 1.2 of the MS SQL Server JDBC driver\n- Apend ;responseBuffering=adaptive to the database URL: jdbc:sqlserver://localhost:4220;DatabaseName=test;responseBuffering=adaptive\n- Don't append ;selectMethod=cursor (if you do, it will run out of memory)\n\nFor more information see:\nhttp://blogs.msdn.com/jdbcteam/archive/2007/05/02/what-is-adaptive-response-buffering-and-why-should-i-use-it.aspx\n\nDownload the 1.2 driver from here:\nhttp://msdn2.microsoft.com/en-us/data/aa937724.aspx\n\nIt looks like this solves the problem. The sample app I have used is:\n\npublic class BigBinaryTest extends JUnitTest {\n    public void testBigBinary() throws Throwable {\n        try {\n            final Repository repository = (Repository) new TransientRepository();\n            Session session = repository.login(new SimpleCredentials(\n                    \"username\", \"password\".toCharArray()));\n            Node root = session.getRootNode();\n            System.out.println(\"setProperty...\");\n            root.setProperty(\"bin\", getStream());\n            System.out.println(\"save...\");\n            session.save();\n            System.out.println(\"done...\");\n            System.out.println(\"getProperty...\");\n            Property prop = root.getProperty(\"bin\");\n            System.out.println(\"getStream...\");\n            InputStream in = prop.getStream();\n            System.out.println(\"compareStreams...\");\n            RandomInputStream.compareStreams(in, getStream());\n            System.out.println(\"close...\");\n            in.close();\n            System.out.println(\"logout...\");\n            session.logout();\n            System.out.println(\"done\");\n        } catch(Throwable e) {\n            e.printStackTrace();\n            throw e;\n        }\n    }\n    \n    private InputStream getStream() {\n        int size = 100 * 1024 * 1024;\n        return new RandomInputStream(0, size, Integer.MAX_VALUE);\n    }\n}\n",
            "date": "2007-12-10T14:32:00.511+0000",
            "id": 0
        },
        {
            "author": "Thomas Mueller",
            "body": "I have added the following javadoc to the DbDataStore:\n\nFor Microsoft SQL Server 2005, there is a problem reading large BLOBs. You will need to use the JDBC driver version 1.2 or newer, and append ;responseBuffering=adaptive to the database URL. Don't append ;selectMethod=cursor, otherwise it will still run out of memory. Example database URL: jdbc:sqlserver://localhost:4220;DatabaseName=test;responseBuffering=adaptive\n\n",
            "date": "2007-12-10T14:34:36.046+0000",
            "id": 1
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Hi.\nI upgraded to version 1.2 of the driver and added responseBuffering=adaptive to my URL, but now I get the following error:\n\njava.lang.OutOfMemoryError: Java heap space\n\tat com.microsoft.sqlserver.jdbc.TDSPacket.<init>(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.TDSReader.readPacket(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.TDSReader.readPacket(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.TDSReader.readResponse(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.TDSCommand.detach(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.execute(Unknown Source)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmtInternal(ConnectionRecoveryManager.java:362)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmtInternal(ConnectionRecoveryManager.java:292)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmt(ConnectionRecoveryManager.java:257)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmt(ConnectionRecoveryManager.java:237)\n\tat org.apache.jackrabbit.core.data.db.DbDataStore.getRecord(DbDataStore.java:457)\n\tat org.apache.jackrabbit.core.value.BLOBInDataStore.getDataRecord(BLOBInDataStore.java:129)\n\tat org.apache.jackrabbit.core.value.BLOBInDataStore.getLength(BLOBInDataStore.java:85)\n\tat org.apache.jackrabbit.core.persistence.util.Serializer.serialize(Serializer.java:201)\n\tat org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager.store(DatabasePersistenceManager.java:476)\n\tat org.apache.jackrabbit.core.persistence.AbstractPersistenceManager.store(AbstractPersistenceManager.java:75)\n\tat org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager.store(DatabasePersistenceManager.java:282)\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager$Update.end(SharedItemStateManager.java:695)\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:864)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:324)\n\tat org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:313)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:300)\n\tat org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:306)\n\tat org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1244)\n\tat org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:897)\n\tat org.apache.jackrabbit.core.data.BigBinaryTest.testBigBinary(BigBinaryTest.java:17)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\nNote that I'm using a database server, not my local machine.\nAdding -Xms200m -Xmx200m seems to solve this problem.",
            "date": "2007-12-17T20:58:57.631+0000",
            "id": 2
        },
        {
            "author": "Thomas Mueller",
            "body": "Hi,\n\nI got this problem when using the old driver: in this case the property is silently ignored. What version of MS SQL Server, and JDBC driver do you use? What is the exact database URL? Maybe the wrong driver is in the classpath. Could you set the log level to 'info' for org.apache.jackrabbit.core.persistence.bundle.util? In this case the database and driver versions are logged (see ConnectionRecoveryManager, line 336).",
            "date": "2007-12-18T09:33:39.200+0000",
            "id": 3
        },
        {
            "author": "Esteban Franqueiro",
            "body": "From jcr.log:\n[main] ConnectionRecoveryManager: Database: Microsoft SQL Server / 9.00.1399 (ConnectionRecoveryManager.java, line 336)\n[main] ConnectionRecoveryManager: Driver: Microsoft SQL Server 2005 JDBC Driver / 1.2.2828.100 (ConnectionRecoveryManager.java, line 337)\n[main] DbDataStore: Using JDBC driver Microsoft SQL Server 2005 JDBC Driver 1.2.2828.100 (DbDataStore.java, line 485)\n\nMy URL:\njdbc:sqlserver://et:1433;databaseName=repotest;responseBuffering=adaptive;",
            "date": "2007-12-18T15:13:52.804+0000",
            "id": 4
        },
        {
            "author": "Thomas Mueller",
            "body": "Hi Esteban,\n\nCould you please run this test and post the result? My results are:\n\nurl: jdbc:sqlserver://localhost:4220;DatabaseName=test;responseBuffering=adaptive\nmeta.url: jdbc:sqlserver://localhost:4220;responseBuffering=adaptive;encrypt=false;\n   databaseName=test;selectMethod=direct;trustServerCertificate=false;\n   lastUpdateCount=true;\nname: Microsoft SQL Server\nversion: 9.00.1399\ndriver name: Microsoft SQL Server 2005 JDBC Driver\ndriver version: 1.2.2828.100\nstoring data...\nselecting data...\nlength: 104857600 expected: 104857600\nreading data...\ndone\n",
            "date": "2007-12-20T13:46:15.384+0000",
            "id": 5
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Here are my results.\n\nurl: jdbc:sqlserver://et:1433;databaseName=repotest;responseBuffering=adaptive\nmeta.url: jdbc:sqlserver://et:1433;responseBuffering=adaptive;encrypt=false;databaseName=repotest;selectMethod=direct;trustServerCertificate=false;lastUpdateCount=true;\nname: Microsoft SQL Server\nversion: 9.00.1399\ndriver name: Microsoft SQL Server 2005 JDBC Driver\ndriver version: 1.2.2828.100\nstoring data...\nselecting data...\nlength: 104857600 expected: 104857600\nreading data...\ndone\n",
            "date": "2007-12-20T16:05:56.915+0000",
            "id": 6
        },
        {
            "author": "Thomas Mueller",
            "body": "Hello Esteban,\n\nSo this test works for you as well. It is the same mechanism as the database data store uses... So maybe there are other components in the system that use a lot of memory? Is it possible to find out what uses so much memory? Usually I use the YourKit Java Profiler, not sure if you know it and if you can use it in your environment.\n\nRegards,\nThomas ",
            "date": "2007-12-21T15:31:50.748+0000",
            "id": 7
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Hi Thomas.\nMy guess is that there is some overhead somewhere, but it's strange that using the same test we get different results. I'm using the FGLS, so I'll try with the default.\nI do know YJP, but never used it before. Still, I'll see if I can run it. Do you have any advice on how to profile Jackrabbit?\nRegards.",
            "date": "2007-12-21T18:29:56.450+0000",
            "id": 8
        },
        {
            "author": "Esteban Franqueiro",
            "body": "I'm just reporting that I run BigBinaryTest with the default ISM locking, and it failed.\nBack to profilers, I have a license of JProfiler here, so I'll see which one is easier. Still, I think that adding some advice to the site/wiki on how to profile Jackrabbit would be useful.\nRegards.",
            "date": "2007-12-21T19:13:26.066+0000",
            "id": 9
        }
    ],
    "component": "jackrabbit-core",
    "description": "Attached is a small test case. It fails during save(). I think this is related to what I mentioned in http://mail-archives.apache.org/mod_mbox/jackrabbit-dev/200711.mbox/%3c00fc01c832b9$f1f08730$7309240a@goku%3e\n\nThe full stacktrace is the following:\n\njavax.jcr.RepositoryException: /: unable to update item.: failed to write property state: cafebabe-cafe-babe-cafe-babecafebabe/{}bin: failed to write property state: cafebabe-cafe-babe-cafe-babecafebabe/{}bin\n\tat org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1252)\n\tat org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:858)\n\tat org.apache.jackrabbit.core.data.BigBinaryTest.testBigBinary(BigBinaryTest.java:16)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat org.apache.jackrabbit.test.AbstractJCRTest.run(AbstractJCRTest.java:404)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\nCaused by: org.apache.jackrabbit.core.state.ItemStateException: failed to write property state: cafebabe-cafe-babe-cafe-babecafebabe/{}bin\n\tat org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager.store(DatabasePersistenceManager.java:487)\n\tat org.apache.jackrabbit.core.persistence.AbstractPersistenceManager.store(AbstractPersistenceManager.java:75)\n\tat org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager.store(DatabasePersistenceManager.java:282)\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager$Update.end(SharedItemStateManager.java:687)\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:856)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:324)\n\tat org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:313)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:300)\n\tat org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:306)\n\tat org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1244)\n\t... 21 more\nCaused by: org.apache.jackrabbit.core.data.DataStoreException: Can not read identifier a2ada2d96d0b05214288efa03be9005a5bb98c9b: Memoria insuficiente. Utilice cursores del servidor para result sets grandes:Java heap space. Tama\u00f1o de result set:104.857.723. Tama\u00f1o memoria total JVM:66.650.112.: Memoria insuficiente. Utilice cursores del servidor para result sets grandes:Java heap space. Tama\u00f1o de result set:104.857.723. Tama\u00f1o memoria total JVM:66.650.112.\n\tat org.apache.jackrabbit.core.data.db.DbDataStore.convert(DbDataStore.java:438)\n\tat org.apache.jackrabbit.core.data.db.DbDataStore.getInputStream(DbDataStore.java:481)\n\tat org.apache.jackrabbit.core.data.db.DbDataRecord.getStream(DbDataRecord.java:61)\n\tat org.apache.jackrabbit.core.value.BLOBInDataStore.getStream(BLOBInDataStore.java:93)\n\tat org.apache.jackrabbit.core.persistence.util.Serializer.serialize(Serializer.java:198)\n\tat org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager.store(DatabasePersistenceManager.java:476)\n\t... 30 more\nCaused by: com.microsoft.sqlserver.jdbc.SQLServerException: Memoria insuficiente. Utilice cursores del servidor para result sets grandes:Java heap space. Tama\u00f1o de result set:104.857.723. Tama\u00f1o memoria total JVM:66.650.112.\n\tat com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDriverError(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.DBComms.receive(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.doExecutePreparedStatement(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement$PreparedStatementExecutionRequest.executeStatement(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.CancelableRequest.execute(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerConnection.executeRequest(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.execute(Unknown Source)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmtInternal(ConnectionRecoveryManager.java:362)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmtInternal(ConnectionRecoveryManager.java:292)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmt(ConnectionRecoveryManager.java:257)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmt(ConnectionRecoveryManager.java:237)\n\tat org.apache.jackrabbit.core.data.db.DbDataStore.getInputStream(DbDataStore.java:474)\n\t... 34 more\norg.apache.jackrabbit.core.state.ItemStateException: failed to write property state: cafebabe-cafe-babe-cafe-babecafebabe/{}bin\n\tat org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager.store(DatabasePersistenceManager.java:487)\n\tat org.apache.jackrabbit.core.persistence.AbstractPersistenceManager.store(AbstractPersistenceManager.java:75)\n\tat org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager.store(DatabasePersistenceManager.java:282)\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager$Update.end(SharedItemStateManager.java:687)\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:856)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:324)\n\tat org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:313)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:300)\n\tat org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:306)\n\tat org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1244)\n\tat org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:858)\n\tat org.apache.jackrabbit.core.data.BigBinaryTest.testBigBinary(BigBinaryTest.java:16)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat org.apache.jackrabbit.test.AbstractJCRTest.run(AbstractJCRTest.java:404)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\nCaused by: org.apache.jackrabbit.core.data.DataStoreException: Can not read identifier a2ada2d96d0b05214288efa03be9005a5bb98c9b: Memoria insuficiente. Utilice cursores del servidor para result sets grandes:Java heap space. Tama\u00f1o de result set:104.857.723. Tama\u00f1o memoria total JVM:66.650.112.: Memoria insuficiente. Utilice cursores del servidor para result sets grandes:Java heap space. Tama\u00f1o de result set:104.857.723. Tama\u00f1o memoria total JVM:66.650.112.\n\tat org.apache.jackrabbit.core.data.db.DbDataStore.convert(DbDataStore.java:438)\n\tat org.apache.jackrabbit.core.data.db.DbDataStore.getInputStream(DbDataStore.java:481)\n\tat org.apache.jackrabbit.core.data.db.DbDataRecord.getStream(DbDataRecord.java:61)\n\tat org.apache.jackrabbit.core.value.BLOBInDataStore.getStream(BLOBInDataStore.java:93)\n\tat org.apache.jackrabbit.core.persistence.util.Serializer.serialize(Serializer.java:198)\n\tat org.apache.jackrabbit.core.persistence.db.DatabasePersistenceManager.store(DatabasePersistenceManager.java:476)\n\t... 30 more\nCaused by: com.microsoft.sqlserver.jdbc.SQLServerException: Memoria insuficiente. Utilice cursores del servidor para result sets grandes:Java heap space. Tama\u00f1o de result set:104.857.723. Tama\u00f1o memoria total JVM:66.650.112.\n\tat com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDriverError(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.DBComms.receive(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.doExecutePreparedStatement(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement$PreparedStatementExecutionRequest.executeStatement(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.CancelableRequest.execute(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerConnection.executeRequest(Unknown Source)\n\tat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.execute(Unknown Source)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmtInternal(ConnectionRecoveryManager.java:362)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmtInternal(ConnectionRecoveryManager.java:292)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmt(ConnectionRecoveryManager.java:257)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmt(ConnectionRecoveryManager.java:237)\n\tat org.apache.jackrabbit.core.data.db.DbDataStore.getInputStream(DbDataStore.java:474)\n\t... 34 more\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1250",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "When adding a large (100MB) binary to the DbDataStore, it fails with an insufficient memory exception",
    "systemSpecification": true,
    "version": ""
}