{
    "comments": [
        {
            "author": "Michael D\u00fcrig",
            "body": "Committed initial implementation at revision 984740:\n\nThere is a new configuration setting for the user manager: groupMembershipSplitSize. If this parameter is present group memberships are collected in a node structure below UserConstants#N_MEMBERS instead of the default multi valued property UserConstants#P_MEMBERS. Its value determines the maximum number of member properties until additional intermediate nodes are inserted. Valid values are integers > 4.\n\n",
            "date": "2010-08-12T12:23:05.250+0000",
            "id": 0
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Remaining issues:\n- Adapt DefaultPrincipalProvider, UserAccessControlProvider and UserImporter to be able to cope with the members node instead of the properties node. ",
            "date": "2010-08-12T12:25:31.103+0000",
            "id": 1
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "A further remaining issue is that we should aim at making the node structure (rep:Members) nodes protected. ",
            "date": "2010-08-12T12:41:26.270+0000",
            "id": 2
        },
        {
            "author": "angela",
            "body": "one minor note: i would really appreciate if you would use our common coding style for indention if it affects code that i have to\nwork with as well... \n\nand notes to overall approach: \ni'm still convinced (and yes this happens rarely) that repository internal information should be kept protected... specially since you \nrely on the structure you are building. if it was just a random stucture without any meaning this was a different story... the way it is built\nnow, i pretty sure that this will cause us troubles.",
            "date": "2010-08-12T12:46:57.817+0000",
            "id": 3
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Ok I'll try to adapt to the common coding style... even though it is wrong ;-)\n\nYes, making things protected is on my agenda. See above comment.",
            "date": "2010-08-12T13:05:43.705+0000",
            "id": 4
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Another remaining issue is scalability of collecting members a group. Currently this is done eagerly. In order to support large number of users we need to change this to a lazy mechanism.",
            "date": "2010-08-12T13:42:51.069+0000",
            "id": 5
        },
        {
            "author": "angela",
            "body": "> - Adapt DefaultPrincipalProvider, \n\ndone. moved to MembershipCache [see JCR-2706] and adjusted to deal with node-base member structure as well.\n\n",
            "date": "2010-08-13T09:59:29.740+0000",
            "id": 6
        },
        {
            "author": "angela",
            "body": "one more comment... while testing JCR-2706 i realized that the rep:Members node type extends from nt:hierarchyNode. \nwhat was the reason for this? i would have expected it to extend from nt:base as i don't see a specific need for that helper structure\nto be hierarchy information.... the hierarchy in this situation consists of authorizable folder nodes and authorizable nodes.",
            "date": "2010-08-13T10:01:36.326+0000",
            "id": 7
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "rep:Members > nt:hierarchyNode: feel free to change that to rep:Members > nt:base. The only reason for choosing nt:hierarchyNode was to be consistent with rep:AuthorizableFolder. However, that additional properties do seem to cause problems now and then.",
            "date": "2010-08-13T10:40:06.520+0000",
            "id": 8
        },
        {
            "author": "angela",
            "body": "> - Adapt ..... , UserAccessControlProvider [...]\n\ndone. [but not created extra tests for that]",
            "date": "2010-08-17T10:38:40.452+0000",
            "id": 9
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Made rep:Member node and properties protected: revision 986297",
            "date": "2010-08-17T12:49:02.372+0000",
            "id": 10
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Fixed user importer in revision 987181\ncredits to Angela",
            "date": "2010-08-19T15:06:23.652+0000",
            "id": 11
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Graph of the performance difference between the two content models for group memberships. The graphs represent the cumulative time for adding new users to a group. The blue graph displays the old content model where group membership is recorded in a multi valued property of weak references. The orange graph display the new content model where group membership is recorded in a b-tree like node structure.  ",
            "date": "2010-08-24T12:07:23.426+0000",
            "id": 12
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "This is basically fixed now. A possible improvement is to make group membership collection lazy. I'll create a separate issue for that. ",
            "date": "2010-08-24T12:13:22.594+0000",
            "id": 13
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "I created JCR-2726 for above improvement. ",
            "date": "2010-08-24T12:20:53.550+0000",
            "id": 14
        }
    ],
    "component": "jackrabbit-core",
    "description": "In the current implementation there are several factors which limit the number of users in a group:\n\n- group membership is recorded in a multi valued property which does not scale well\n- members of groups are collected eagerly which does not scale well\n\nI propose to add complementary support for recording group membership in a node structure to the current solution. That node structure would - similar to users and groups - add intermediate nodes when a group reaches a certain threshold on the number of its users.",
    "hasPatch": false,
    "hasScreenshot": true,
    "id": "JCR-2710",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Add support for large number of users in a group",
    "systemSpecification": true,
    "version": "2.2"
}