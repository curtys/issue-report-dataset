{
    "comments": [
        {
            "author": "S\u00e9bastien Launay",
            "body": "Test for reproducing this bug, dependencies are described in dependencies.txt.",
            "date": "2009-04-07T08:56:38.325+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "As indicated in the environment field, this only happens on a *nix box.\n\nThe RepositoryLock handling in the RepositoryImpl constructor is incorrect. The lock is acquired in a try/catch block with the rest of the initialization code. If anything goes wrong then the shutdown method is called, which also includes releasing the RepositoryLock. This also happens when the initialization fails due to an unsuccessful attempt to acquire the repository lock :-/",
            "date": "2009-04-09T09:11:32.596+0000",
            "id": 1
        },
        {
            "author": "Marcel Reutegger",
            "body": "Fixed in revision: 763617",
            "date": "2009-04-09T12:14:09.692+0000",
            "id": 2
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.5 branch in revision 767069.",
            "date": "2009-04-21T08:35:07.082+0000",
            "id": 3
        }
    ],
    "component": "jackrabbit-core",
    "description": "The following test case can be used to reproduce the bug:\nRepository repo1 = new TransientRepository(repoConfig);\nSession session1_1 = repo1.login(...);\nSession session2_2 = repo1.login(...);\nRepository repo2 = new TransientRepository(repoConfig); // Will not fail (expected)\nSession session2_1 = repo2.login(...); // Will fail with javax.jcr.RepositoryException: The repository home /tmp/_repository appears to be already locked by the current process (expected)\nSession session2_2 = repo2.login(...); // Will work!\nRepository repo3 = new TransientRepository(repoConfig); // Will not fail either (expected)\nSession session3_1 = repo3.login(...); // Will fail with javax.jcr.RepositoryException: The repository home /tmp/_repository appears to be already locked by the current process (expected)\nSession session3_2 = repo3.login(...); // Will fail with javax.jcr.RepositoryException: Directory was previously created with a different LockFactory instance\n\nOpen the first session in repo2 will fails but will also remove the .lock file, thus the second\nsession will succeed and may corrupt the repository because there are multiple session\nopened from multiple repository.\nThe same behaviour occurs for repo3, the .lock file is removed but it is a slightly different case\nas a new exception will be thrown while creating the Lucene index.\n\nThis is a clearly a twisted case as repositories pointing to the same home must not be created\nsimultaneously but i think that it must be more robust to prevent data corruption.\n\nI reproduce the bug on JR 1.4.7 and 1.5.3 but i think it affects at least all versions of JR < 1.5.3.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2057",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "When creating multiple repository instances pointing to the same home, opening a second session will remove the .lock file",
    "systemSpecification": true,
    "version": "core 1.4.7, 1.5.3"
}