{
    "comments": [
        {
            "author": "Thomas Mueller",
            "body": "I can reproduce this problem",
            "date": "2007-08-23T08:16:53.566+0000",
            "id": 0
        },
        {
            "author": "Martijn Hendriks",
            "body": "I think that the following holds for a ChangeLog:\n\n1) state \\in addedStates => no deleted(state) events after the added(state) event.\n2) state \\in modifiedStated => no added(state) event and no deleted(state) event after the modified(state) event\n3) state \\in deletedStates => no added(state) event earlier\n\nThe serialization code should derive an ordering such that these properties hold.",
            "date": "2007-08-23T08:32:27.660+0000",
            "id": 1
        },
        {
            "author": "Martijn Hendriks",
            "body": "Swapping the order of the serialization to:\n1) serialize deletedStates\n2) serialize modifiedStates\n3) serialize addedStates\nin ClusterNode.write(Record record, ChangeLog changeLog, EventStateCollection esc) should work. Here's a patch for it. I tested it on the scenario from the description and it works there.",
            "date": "2007-08-23T09:16:57.261+0000",
            "id": 2
        },
        {
            "author": "Dominique Pfister",
            "body": "Good observation, Martijn. In fact, putting the states in the following order back into the ChangeLog on deserialization should do the trick:\n\n1) deleted (checks added and removed)\n2) modified (checks added only)\n3) added\n",
            "date": "2007-08-23T09:23:30.259+0000",
            "id": 3
        },
        {
            "author": "Dominique Pfister",
            "body": "Wow, that was quick! When comparing my change to yours, the only difference found was the revision number on top. Applied the patch and verified that it solves the problem.\n\nThanks for reporting and submitting a patch, great job!",
            "date": "2007-08-23T09:34:54.374+0000",
            "id": 4
        },
        {
            "author": "Martijn Hendriks",
            "body": "You're welcome. Thanks for responding so quickly on this issue!",
            "date": "2007-08-23T10:03:15.982+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.3 branch in revision 577858.",
            "date": "2007-09-20T18:36:14.466+0000",
            "id": 6
        }
    ],
    "component": "clustering",
    "description": "The ordering of actions is taken into account when a ChangeLog is built through session manipulations (see, for instance,  ChangeLog.deleted(ItemState state)). When it is serialized in ClusterNode.write(Record record, ChangeLog changeLog, EventStateCollection esc), however, this implicit ordering might be changed. As a consequence,  the deserialization in ClusterNode.consume(Record record) might produce a different ChangeLog with the effect that the local caches get out-of-sync with the persistent state of the repository.\n\nThe issue should be reproducable as follows:\n- Setup a clustered environment with two Jackrabbit instances, say A and B.\n- On instance A add a property \"P\" with value \"x\" to some node and save the session.\n- On instance B read property \"P\" -> it will have value \"x\".\n- On instance A delete property P and then add it again with value \"y\" and save the session.\n- On instance B read property \"P\" -> it will still have value \"x\" after the cluster sync...",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1078",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "ChangeLog serialization causes cache inconsistencies",
    "systemSpecification": true,
    "version": "1.2.1, 1.2.2, 1.2.3, 1.3, 1.3.1"
}