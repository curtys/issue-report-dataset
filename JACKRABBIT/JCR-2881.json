{
    "comments": [
        {
            "author": "Dominique Pfister",
            "body": "Patch",
            "date": "2011-02-07T10:21:53.079+0000",
            "id": 0
        },
        {
            "author": "Dominique Pfister",
            "body": "Patch submitted.",
            "date": "2011-02-07T10:22:28.974+0000",
            "id": 1
        },
        {
            "author": "Dominique Pfister",
            "body": "Solution looks as follows: when doing a cluster sync, whether it is for reading or writing, always acquire the version manager's read lock first.",
            "date": "2011-02-07T10:24:50.653+0000",
            "id": 2
        },
        {
            "author": "Dominique Pfister",
            "body": "Fixed in revision 1067901 in trunk.",
            "date": "2011-02-07T10:42:48.377+0000",
            "id": 3
        },
        {
            "author": "Dominique Pfister",
            "body": "Fixed in 2.2 branch in revision 1067910.",
            "date": "2011-02-07T10:55:28.747+0000",
            "id": 4
        },
        {
            "author": "John Langley",
            "body": "I am seeing this same behavior in 2.1.3... What's the likelihood of porting this back to the 2.1 branch? ",
            "date": "2011-02-08T13:21:45.786+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 2.1 branch in revision 1069811.",
            "date": "2011-02-11T14:31:43.833+0000",
            "id": 6
        }
    ],
    "component": "clustering",
    "description": "Version operations in a cluster may end up in a deadlock: a write operation in the version store will acquire the version manager's write lock (N1.VW) and subsequently the cluster journal's write lock (N1.JW). Another cluster node's write operation in some workspace will acquire the journal's write lock (N2.JW) and first process the journal record log: if some of these changes concern the version store, the version manager's read lock (N2.VR) has to be acquired in order to deliver them. If the first cluster node reaches N1.VW, and the second reaches N2.JW, we have a deadlock. The same scenario takes place when the second cluster node synchronizes to the latest journal changes and reaches N2.JR, when the first cluster node is in N1.VW.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2881",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Deadlock on version operations in a clustered environment",
    "systemSpecification": true,
    "version": "2.2.2"
}