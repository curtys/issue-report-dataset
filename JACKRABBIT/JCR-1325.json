{
    "comments": [
        {
            "author": "Sebastian Gomez",
            "body": "Added patch that resolves the issue.",
            "date": "2008-01-28T18:47:42.229+0000",
            "id": 0
        },
        {
            "author": "Christophe Lombart",
            "body": "Fixed. \nI also reviewed the support for Collection & Map. The mapping definition can be simplified with parameterized classes. In this case the elementClassName setting is not necessary. There is a exemple in the unit tests (see the class org.apache.jackrabbit.ocm.testmodel.collection.Main). \n\nMajor interfaces and classes are supported (Collection, List, ArrayList, Vector,Map, HashMap, ...) without creating extra code. \n\nIn summary, there are3 different ways to define a collection or a Map : \n\n1. With a parameterized class, it is not necessary to specify the elementClassName\n\n   @Collection private List<Element> list;\n\n2. Without specifying the element type: in this case, this is mandatory to define the elementClassName\n\n   @Collection (elementClassName=MyContent.class)\n    private List list;\n\n3. Create a descendant of ManageableCollection & ManageableMap for complex collections or maps. elementClassName is still mandatory if the descendant is not parameterized. \n\n\n",
            "date": "2008-04-21T21:52:42.310+0000",
            "id": 1
        }
    ],
    "component": "jackrabbit-ocm",
    "description": "When using a custom list that extends from java.util.AbstractList, ManageableCollectionUtil.getManageableCollection raises a JcrMappingException because it does not consider the custom list to be a java.util.List. This is because it uses \"if (object.getClass().equals(List.class))\" instead of \"if (object instanceof List)\". The same thing will probably happen when using a custom Collection, a custom ArrayList, etc. This is the stack trace:\n\norg.apache.jackrabbit.ocm.exception.JcrMappingException: Unsupported collection \ntype : *********** (MyCustomList class) \n        at org.apache.jackrabbit.ocm.manager.collectionconverter.ManageableColle \nctionUtil.getManageableCollection(ManageableCollectionUtil.java:153) \n        at org.apache.jackrabbit.ocm.manager.objectconverter.impl.ObjectConverte \nrImpl.insertCollectionFields(ObjectConverterImpl.java:780) \n        at org.apache.jackrabbit.ocm.manager.objectconverter.impl.ObjectConverte \nrImpl.insert(ObjectConverterImpl.java:221) \n        at org.apache.jackrabbit.ocm.manager.objectconverter.impl.ObjectConverte \nrImpl.insert(ObjectConverterImpl.java:146) \n        at org.apache.jackrabbit.ocm.manager.impl.ObjectContentManagerImpl.inser \nt(ObjectContentManagerImpl.java:407) \n\nI have come up to this bug using a MyCustomList<MyClass>, with MyCustomList extending java.util.AbstractList<MyClass>.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1325",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Problems mapping custom collections",
    "systemSpecification": true,
    "version": "1.4"
}