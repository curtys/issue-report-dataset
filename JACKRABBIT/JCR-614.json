{
    "comments": [
        {
            "author": "Tobias Bocanegra",
            "body": "fixed.\nNew Revision: 469853",
            "date": "2006-11-01T11:57:03.000+0000",
            "id": 0
        }
    ],
    "component": "jackrabbit-core",
    "description": "in some of our itegration tests the repository sometime locks-up with a stacktrace like this:\n\n\"Thread-38\" daemon prio=5 tid=0x08cb3908 nid=0xdd8 runnable [9fef000..9fefd90]\n        at org.apache.jackrabbit.core.CachingHierarchyManager.removeLRU(CachingHierarchyManager.java:540)\n        - waiting to lock <0x16a9b0e0> (a java.lang.Object)\n        at org.apache.jackrabbit.core.CachingHierarchyManager.cache(CachingHierarchyManager.java:510)\n        - locked <0x16a9b0e0> (a java.lang.Object)\n        at org.apache.jackrabbit.core.CachingHierarchyManager.buildPath(CachingHierarchyManager.java:163)\n        at org.apache.jackrabbit.HierarchyManagerImpl.buildPath(HierarchyManagerImpl.java:296)\n[...]\n\nalthough i think that this sacktrace is valid (a thread holding a monitor waiting to lock it again) this scenario shows up a lot during stress-testing. i assume it's the JIT that messesup synchornization. \n\nthe fix is to remove the double monitor entry in this case.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-614",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Weird locking behaviour in CachingHierarchyManager",
    "systemSpecification": true,
    "version": "1.0.1, 1.1, 1.1.1"
}