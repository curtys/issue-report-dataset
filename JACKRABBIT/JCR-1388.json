{
    "comments": [
        {
            "author": "Esteban Franqueiro",
            "body": "This patch addresses the issue by provinding a wrapper input stream that encapsulates the database resources, and not returning the connection to the pool until the stream is consumed/closed.",
            "date": "2008-02-15T17:47:32.384+0000",
            "id": 0
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Hi.\nDid anyone take a look at this patch?\nRegards\n",
            "date": "2008-02-28T14:47:21.659+0000",
            "id": 1
        },
        {
            "author": "Thomas Mueller",
            "body": "Hi,\n\nI have a few remarks, first about the source code 'style'. I use Eclipse and the Checkstyle plugin, this should find most issues:\n- you should use spaces instead of tabs\n- return doesn't required brackets: return(false) should be changed to return false\n- catch (IOException e) {} should at least have a remark, but it's better to log the exception (with stack trace)\n- you need to replace the file file headers \n- use '} else {', '} finally {' and '} catch (Exception e) {' as in the Sun Java coding guidelines\n- Don't declare all variables at the start of the method as in C. Declare them when / just before using them\n  (for example, getResourceAsReader(), reader; there are others\n- Review the Javadocs rules (add comments, use the @param, @return tags)\n- Only use this. when required\n\nSome other remarks:\n- I didn't see any test cases - please add one\n- Are prepareSchemaObjectPrefix and getResourceAsReader used somewhere? Don't add unused methods\n- close() methods easting exceptions should be called closeSilently()\n- You have removed the SQL statement remark, why? // SELECT ID, DATA FROM DATASTORE WHERE ID = ?\n- If you are removing code, remove the lines, don't remark them (+//lastModified = ...)\n- getDatabaseResources, boolean success is always true\n- You hare remarked \"lastModified = store.touch(getIdentifier(), lastModified)\", why?\n- Don't swallow exceptions (use IOException.initCause in DbInputStream.getStream())\n- Synchronization is very inconsistent (DbInputStream)\n\nRegards,\nThomas\n",
            "date": "2008-02-29T13:40:09.714+0000",
            "id": 2
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Hi.\n\n> I have a few remarks, first about the source code 'style'. I use Eclipse and the Checkstyle plugin, this should find most issues:\n> - you should use spaces instead of tabs\n> - return doesn't required brackets: return(false) should be changed to return false\n> - catch (IOException e) {} should at least have a remark, but it's better to log the exception (with stack trace)\n> - you need to replace the file file headers \n> - use '} else {', '} finally {' and '} catch (Exception e) {' as in the Sun Java coding guidelines\n> - Don't declare all variables at the start of the method as in C. Declare them when / just before using them\n>  (for example, getResourceAsReader(), reader; there are others\n> - Review the Javadocs rules (add comments, use the @param, @return tags)\n> - Only use this. when required\n\nFixed all of those I think.\n\n> Some other remarks:\n> - I didn't see any test cases - please add one\n> - Are prepareSchemaObjectPrefix and getResourceAsReader used somewhere? Don't add unused methods\n\nRemoved them.\n\n> - close() methods easting exceptions should be called closeSilently()\n\nRenamed them.\n\n> - You have removed the SQL statement remark, why? // SELECT ID, DATA FROM DATASTORE WHERE ID = ?\n\nBecause I deleted the entire method.\n\n> - If you are removing code, remove the lines, don't remark them (+//lastModified = ...)\n> - getDatabaseResources, boolean success is always true\n> - You hare remarked \"lastModified = store.touch(getIdentifier(), lastModified)\", why?\n\nFixed those.\n\n> - Don't swallow exceptions (use IOException.initCause in DbInputStream.getStream())\n> - Synchronization is very inconsistent (DbInputStream)\n\nIn what sense? The DbInputStream is not supposed to be used from multiple threads, so I only synchronized the methods that are already synchronized in InputStream.\n\nI'll attach the new patch and test.\n\nRegards.",
            "date": "2008-02-29T16:23:55.290+0000",
            "id": 3
        },
        {
            "author": "Esteban Franqueiro",
            "body": "The new patch corrects the issues pointed by Thomas. The test passes with the patch applied, copyWhenReading=false and storeStream=-1. Without the patch, the test fails with the same conditions.",
            "date": "2008-02-29T16:29:52.118+0000",
            "id": 4
        },
        {
            "author": "Thomas Mueller",
            "body": "Hi,\n\nYour new patch is better, but there are still a few issues:\n\nYou still have tabs in the source code.\n\nDbResources and DatabaseHelper still don't have correct license headers.\n\nThere is still a catch (Exception e) {}.\n\nThere are still some cases where \"} else {\" and so on is not on the same line. Please format the source code. In Eclipse, use [Source] [Format]. I suggest you review the Sun coding guidelines at http://java.sun.com/docs/codeconv/\n\nJavadoc comments are still not correct. getLastModified doesn't have a Javadoc comment. @return tag is still not used.\n\nVariables are still declared at the start of the method in getDatabaseResources(). Please declare them when / just before using them \n\nDbInputStream.mark and reset are synchronized, but nothing else in this class, why?\n\nThe SQL statement remark \"// SELECT ID, DATA FROM DATASTORE WHERE ID = ?\" was\nthere to simplify reading the code (so you don't have to switch to another file to understand it).\nPlease add it where selectDataSQL is used.\n\nAbout the method finalize(): I wouldn't use it. It slows down creating objects. If the wrapped InputStream and resource need finalize(), it is already implemented there.\n\nAbout the test cases:\n\n-  \".classpath\" doesn't exist in all systems (RandomInputStream is better).\n\n- Don't use System.out.println, use a logger.\n\n- Add the test to the TestAll method.\n\n- You have again used return(..) instead of return ..\n\n- The Javadoc comment is empty\n\nRegards,\nThomas\n",
            "date": "2008-02-29T17:04:50.675+0000",
            "id": 5
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Ok, here's a new take at it. I hope I resolved all the issues you pointed out.\n\n> DbInputStream.mark and reset are synchronized, but nothing else in this class, why?\n\nI followed the pattern used in InputStream and FilterInputStream.\n\nRegarding the finalizer, I removed it, but I think that it depends on what your position is regarding improper use of the stream. If the policy is to protect against that kind of mistake or to let it happen so that in the end the user has to fix it's application.",
            "date": "2008-02-29T20:27:39.254+0000",
            "id": 6
        },
        {
            "author": "Thomas Mueller",
            "body": "Hi,\n\nYour new patch is better, but there are still a few issues:\n\nYou still have tabs in the source code: 2 to go ;-)\n\nThere is still a catch (Exception e) {}. catch (IOException e) {} should at least have a remark, but it's better to log the exception (with stack trace) \n\nTestTwoGetStreams.streamToString() expects to read everything with one InputStreamReader.read call. This method could theoretically return a value smaller than requested in length. You should deal with that in some way; for example, use DataInputStream.readFully. Also, the conversion to String expects the data is stored in the current system encoding, that may not be the case.\n\nI wouldn't use new FileInputStream(\"NOTICE.txt\"), I would use new RandomInputStream(0, 10 * 1024 * 1024). You can't be sure that NOTICE.txt will always be there and have that name.\n\nThe method testTwoGetStreams doesn't have any assertion. It doesn't check if the data read from the repository is the same as in the files. Only calling log.info is not a good test I believe.\n\nDatabaseHelper doesn't have a class level javadoc.\n\ngetDatabaseResources: is the 'finally' and the boolean success required? Could the code in 'finally' not be written in the 'catch' block?\n\nDbInputStream.mark and reset are synchronized: I don't understand why this needs to be synchronized in your class as well. I probably need to ask Arthur van Hoff then ;-)\n\nRegards,\nThomas\n\n",
            "date": "2008-03-06T16:38:44.586+0000",
            "id": 7
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Here's a new version. I removed the synchronization from DbInputStream. I'm also posting a new version of the test, and the previous, fixed, version in the patch.\nRegards",
            "date": "2008-03-07T17:09:28.015+0000",
            "id": 8
        },
        {
            "author": "Thomas Mueller",
            "body": "Hi,\n\nIn TestTwoGetStreams there are many 'if' without {}:\n\n            if (i2 != null)\n                i2.close();\n\nAccording to the code style, this should be written\n\n            if (i2 != null) {\n                i2.close();\n            }\n\nAs I wrote before, I suggest you use Checkstyle so that you can find such problems yourself. \n\nWhat is the reason for the following code?\n\n        i1.close();\n        i2.close();\n        try {\n            if (i1 != null)\n                i1.close();\n        } catch (IOException e) {\n            log.info(\"Could not close first input stream: \", e);\n        }\n        try {\n            if (i2 != null)\n                i2.close();\n        } catch (IOException e) {\n            log.info(\"Could not close second input stream: \", e);\n        }\n\nWhy do you close i1 and i2 twice? Why do you check for null?\n\nThe line\nprivate final static int BLOCK_SIZE = 4 * 1024;\nshould be (according to Checkstyle):\nprivate static final int BLOCK_SIZE = 4 * 1024;\n\nYour method assertEquals is incorrect:\n\n            while (n1 != -1 || n2 != -1) {\n                n1 = i1.read(b1);\n                n2 = i2.read(b2);\n                for (int i = 0; i < n1; i++) {\n                    assertEquals(message + \"; byte #\" + i + \" mismatch!\", b2[i], b1[i]);\n                }\n                count1 += n1;\n                count2 += n2;\n            }\n\ni1 and i2 may not return the same number of bytes (n1 != n2). I suggest to test byte by byte.\n\nOtherwise everything looks very good to me.\n\nRegards,\nThomas\n",
            "date": "2008-03-10T09:28:07.939+0000",
            "id": 9
        },
        {
            "author": "Esteban Franqueiro",
            "body": "> As I wrote before, I suggest you use Checkstyle so that you can find such problems yourself. \n\nI'm using it, but I missed those.\n\n> What is the reason for the following code?\n>  ...\n> Why do you close i1 and i2 twice? Why do you check for null?\n\nOops my mistake. Fixed that. I left the try/catch calls, so that it logs the exception. Should I re-throw it?\n",
            "date": "2008-03-11T19:46:10.255+0000",
            "id": 10
        },
        {
            "author": "Esteban Franqueiro",
            "body": "Oops, wrong file. Here is the right one.",
            "date": "2008-03-11T19:48:33.872+0000",
            "id": 11
        },
        {
            "author": "Thomas Mueller",
            "body": "Hi,\nSorry for the delay... I think there is one potential problem in assertEquals(String message, InputStream i1, InputStream i2):\n\n+            int b1 = 0, b2 = 0;\n+            int i = 0;\n+            while (b1 != -1 || b2 != -1) {\n+                b1 = i1.read();\n+                b2 = i2.read();\n+                assertEquals(message + \"; byte #\" + i + \" mismatch!\", (byte) b2, (byte) b1);\n+                ++i;\n+            }\n\nThis test wouldn't detect a problem if b1 is -1 and b2 is 255. I would change the code to:\n\nassertEquals(message + \"; byte #\" + i + \" mismatch!\", b2, b1);\n\nEverything else looks fine to me.\nRegards,\nThomas\n",
            "date": "2008-03-17T16:18:28.236+0000",
            "id": 12
        },
        {
            "author": "Esteban Franqueiro",
            "body": "I agree with you Thomas. Here's the corrected patch.",
            "date": "2008-03-17T19:16:48.425+0000",
            "id": 13
        },
        {
            "author": "Thomas Mueller",
            "body": "+1\nThe patch looks good to me. \n",
            "date": "2008-03-18T15:45:57.605+0000",
            "id": 14
        },
        {
            "author": "Thomas Mueller",
            "body": "Committed in revision 649493 (trunk)",
            "date": "2008-04-18T12:27:45.555+0000",
            "id": 15
        }
    ],
    "component": "jackrabbit-core",
    "description": "Jackrabbit does not allow concurrent reads to the data store if copyWhenReading=false, even if maxConnections>1.\nSee JCR-1184 for a test for this problem (run it with copyWhenReading=false).\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1388",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Jackrabbit does not allow concurrent reads to the data store if copyWhenReading=false",
    "systemSpecification": true,
    "version": "1.4"
}