{
    "comments": [
        {
            "author": "Julian Sedding",
            "body": "I have started working on a patch, which is not fully functional yet. Unfortunately I currently don't have time to finish it off. It should illustrate a possible approach to solve the problem though.",
            "date": "2010-03-18T09:57:34.098+0000",
            "id": 0
        },
        {
            "author": "Thomas Mueller",
            "body": "Thanks a lot for the patch! I think the only remaining issue is that  closeOriginalStream() should not set originalStream to null.\n\nHowever I would like to simplify things a bit by implementing the mark()/reset() features a different layer (use BufferedInputStream if possible).\n\nA similar issue exists with TempFileInputStream by the way.",
            "date": "2010-03-18T11:34:47.099+0000",
            "id": 1
        }
    ],
    "component": "jackrabbit-core",
    "description": "The DbDataStore implementation uses a DbInputStream to read binary properties from the database. When a new binary property is created, Jackrabbit attempts to index it. Tika's CharsetDetector is used in the process, which marks the input stream, reads the first 8000 bytes and then resets the stream.\n\nThis results in the stacktrace shown at the end of the issue, if the following two conditions hold true:\n* the property is larger than the minRecordLength configuration of the Datastore and\n* the property is smaller than 8000 bytes\n\nThe DbInputStream needs to have the following properties:\n1. lazy instantiation of the underlying stream\n2. auto-close underlying stream when EOF is reached\n3. fully support mark()/reset() even if  the underlying stream is auto-closed due to 2.\n\n\n12.03.2010 15:53:28 *WARN * LazyTextExtractorField: Failed to extract text from a binary property (LazyTextExtractorField.java, line 165)\njava.io.EOFException\n        at org.apache.jackrabbit.core.data.db.DbInputStream.reset(DbInputStream.java:180)\n        at org.apache.tika.io.ProxyInputStream.reset(ProxyInputStream.java:156)\n        at org.apache.tika.io.ProxyInputStream.reset(ProxyInputStream.java:156)\n        at org.apache.tika.parser.txt.CharsetDetector.setText(CharsetDetector.java:131)\n        at org.apache.tika.parser.txt.TXTParser.parse(TXTParser.java:77)\n        at org.apache.tika.parser.CompositeParser.parse(CompositeParser.java:120)\n        at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:101)\n        at org.apache.tika.parser.AutoDetectParser.parse(AutoDetectParser.java:114)\n        at org.apache.jackrabbit.core.query.lucene.LazyTextExtractorField$ParsingTask.run(LazyTextExtractorField.java:160)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)\n        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:138)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n        at java.lang.Thread.run(Thread.java:619)\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2576",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "DbInputStream does not support mark()/reset() when exhausted.",
    "systemSpecification": true,
    "version": "2.0"
}