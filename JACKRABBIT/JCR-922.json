{
    "comments": [
        {
            "author": "Christophe Lombart",
            "body": "Just 2 comments : \n\n1/ Concerning the method lock, it should be better to return an object instead of an hashmap. This object could be similar to the Lock object defined in the JCR spec but this is tedious to create a wrapper class for this kind of JCR object. We have exaclty the same kind of issues with the versionning support. \n\n2/ Supporting the mix:lockable node type :  I understand your issue. The ocm framework has to have a better secondary node type support in term of field definition. I think we have to list the different use cases before taking a decision. \n",
            "date": "2007-05-15T09:00:30.970+0000",
            "id": 0
        },
        {
            "author": "ruchi goel",
            "body": "I have a use case to implement where I am locking the checked out nodes and unlocking them after checkin. The latter half cannot be implemented without this feature. So, what is the best and quickest way to resolve this ?",
            "date": "2007-05-15T11:35:12.005+0000",
            "id": 1
        },
        {
            "author": "Christophe Lombart",
            "body": "For the the first issue (see my previous comment) : it is quite easy to implement it with a class instead of an hashmap.\nFor second one, I have no solution until now. Let me think about that but I cannot work on it now. Any kind of proposal is welcome. ",
            "date": "2007-05-15T13:36:34.032+0000",
            "id": 2
        },
        {
            "author": "ruchi goel",
            "body": "If we go by your first comment ,We need the following :\n1. Wrapper class for Lock.\n2. The method lock() should return object  of the wrapper class which can be used by caller to obtain lockowner. \n\nDoes it not break backward compatability ? I mean the same method now returning a different object type ? Is that acceptable ?",
            "date": "2007-05-16T06:09:21.882+0000",
            "id": 3
        },
        {
            "author": "Christophe Lombart",
            "body": "For the second problem, maybe 3 possibilities : \n\n1/ Don't add the Lock info (lockowner, ...)  in the pojo. This solution requires a new  method in the persistence managers (eg. PersistenceManager.getLock(path)).  This method returns the Wrapper Lock object.  \n\n2/ JCR mixin node types can be added and removed at any time. That's the case for the mix:lockable. Each field-descriptor, bean-descriptor and collection-descriptor element can have a  new attribute which specify the associated mixin node type reference. If the mixin node type is not yet assigned to the node, the mapping can be ignored for that attribute. \n\n<class-descriptor className=\"....\" >\n\t<field-descriptor fieldName=\"path\" path=\"true\" />\n\t<field-descriptor fieldName=\"title\" jcrName=\"graffito:title\"/>\n\t<field-descriptor fieldName=\"lockOwner\" jcrName=\"jcr:lockOwner\"   mixintype=\"mix:lockable/>\n</class-descriptor>\n\n  \n3/ Add a collection or a map in the pojo which will contain all available mixin type properties. It should be possible to create a new collection converter specific to mixin type property management. \n\nIn your specific case the first solution is interesting. What is the interest to add lock info in the data value object ? \nOther solutions are more interesting for a generic support of mixin node types. I will create a new JIRA issue for this kind of support. \n\nWhat do you think about that ? Maybe another solution ? ",
            "date": "2007-05-23T08:26:03.631+0000",
            "id": 4
        },
        {
            "author": "ruchi goel",
            "body": "Answering your question \n<What is the interest to add lock info in the data value object ? >\n\nI am designing the checkin/checkout in the following way:\n\nUser A checks out node X.\nUser A locks node X. \n\nUser B cannot update node X since it is locked by User A. \nUser B can read the node X. \n\nUser A  unlocks node X\nUser A checks in the node X. \n\nUser B checks out node X \nUser B locks node X. \n\nBasically, a mutually exclusive lock for a checked  out node. \n\nIn my pojo , I have the following method  which allows checkin only if the lockowner is the one who is trying to checkin\n\n public void checkin(String path)throws CMSException {\n         pm = getPersistenceManager();\n         try{\n            if ((pm.isLocked(path))){\n                String lockOwner = getLockOwner(); //get lockowner          \n                if (lockOwner.equals(session.getUserID())){\n                    String lockToken = doc.getLockToken();\n                    pm.checkin(path);\n                    pm.unlock(path,lockToken); //this call is already adding lock token in the session if that lock token is not present.\n                }                            \n            }\n         }catch(Exception e){\n             throw new CMSException(e.getMessage(),e.getCause());\n         }\n    }\n\nMay be in the above method , I can try  checkin() without checking for the node state (locked or unlocked), since now you have the check of checking in by the lockowner , already incorporated in CheckIfNodeIsLocked . This might just work . \nIn  case lockowner is checking in , this succeeds  else throws exception.\n\nFor a better  understanding , see the following code for checkout.\n\n public void checkout(String path)throws CMSException {\n        pm = getPersistenceManager();\n         try{\n            pm.checkout(path);\n            if (!(pm.isLocked(path))){\n                String lockToken = pm.lock(path,true,false);\n                Document doc = this.getDocument(path);\n                doc.setToken(lockToken);     //currently using property checkedOutBy for persisting lockToken, can be changed later \n                doc.save();\n            }\n         }catch(LockedException le){\n           System.out.println(\"Error: \" + le.getLockedNodePath() + \" is locked by \" + le.getLockOwner());  \n         }catch(Exception e){\n             throw new CMSException(e.getMessage(),e.getCause());\n         }\n    }\n\n",
            "date": "2007-05-23T09:43:13.443+0000",
            "id": 5
        },
        {
            "author": "Christophe Lombart",
            "body": "Can you check the code ? \nI made the following modifications : \n1/ Review the method lock. Now, it returns a Lock object. \n2/ I added new unit tests. See the class PersistenceManagerLockTest. the test called \"testLockWithNodeType\" uses an object containing the attribute lockowner. This attribute is null when the object is not locked and not null when it is locked. \n\nLet me know if it match to your needs. Feel free to comment this issue. \n\n\n\n",
            "date": "2007-06-04T22:04:05.477+0000",
            "id": 6
        },
        {
            "author": "ruchi goel",
            "body": "This looks good. I think this meets all requirements. But I am not still able to build the new jcr-mapping jar . Still getting the same errors. \n\nCan you please comment on my last mail  with subject :\n\nerror compiling jcr-mapping in Jackrabbit source tree",
            "date": "2007-06-05T15:08:34.725+0000",
            "id": 7
        },
        {
            "author": "Christophe Lombart",
            "body": "Ruchi, \n\nCan you tell me if it is ok for you ?\n\nI'm still thinking on a better mix node type support but I think the mix:lockable is well supported and the persistence method now returns a lock object. \n\nThanks",
            "date": "2007-06-16T08:13:16.041+0000",
            "id": 8
        }
    ],
    "component": "jackrabbit-ocm",
    "description": "jcr mapping layer 's  persistencemanager.java  does not expose an API for returning lockowner. Ideally   , the following method \n\npublic String lock(final String absPath, final boolean isDeep, final boolean isSessionScoped) \n\nshould return a hashmap/String array containing locktoken as well as lockowner. \n\nI tried having lockowner as a field in my java object and mapping it to jcr:lockOwner , so that I can just use getLockOwner() . But the problem is this property gets introduced in the node only if  the node is locked. So, when I try to insert a node , before I can even lock it , the insertion fails since there is no property like jcr:lockOwner   till then . \n\nSo, I feel there is need for the above API. It is ok to have it exposed via separate call in order to maintain backward compatability\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-922",
    "issuetypeClassified": "OTHER",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "jcr mapping layer (OCM) should expose lock owner",
    "systemSpecification": true,
    "version": ""
}