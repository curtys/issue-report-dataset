{
    "comments": [
        {
            "author": "Michael D\u00fcrig",
            "body": "This looks very good to me. Do you have some performance figures already?\n\nHowever I think that RelativePath#getElements() need to improve. The current implementations recursively calls getElements() on the parent and adds its own element to the returned array. To do so the returned array needs to be copied. Copying the array once for each recursive invocation effectively results in O(n^2) run time characteristics. I suggest to change the recursive implementation into an iterative one which collects the name elements of all ancestors of the current path into a pre allocated array. ",
            "date": "2010-09-13T13:43:44.823+0000",
            "id": 0
        },
        {
            "author": "Jukka Zitting",
            "body": "The attached graph shows already some performance improvement that I believe is mostly due to these changes. I see some gains also in other benchmarks, but it's hard to say whether it's this or some of the other recent improvements at work.\n\nRe: getElements(); I'm actually hoping to get rid of this method entirely, which is why I so far haven't put too much effort into optimizing it.\n\nGoing even further, I believe we could (and should) merge the Path and Path.Element interfaces to further drop the number of objects we need to instantiate and track.\n",
            "date": "2010-09-13T15:09:05.244+0000",
            "id": 1
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "I'm in favor of further optimizing Path.Element or even trying to get rid of it when it turns out to be feasible. Since getElements() is called from quite many places, we might gain some quick insight into the impact of further optimization from changing the method to an iterative implementation and running the performance test suite. \n\nAlso - if it turn out to be beneficial performance wise - I'd prefer to have an iterative implementation of getElements() in 2.2 if further optimizations won't make it into the release.",
            "date": "2010-09-13T15:20:34.944+0000",
            "id": 2
        },
        {
            "author": "Jukka Zitting",
            "body": "I've now gotten rid of the separate Element objects. The AbstractPath class now implements both the Path and Element interfaces (the latter properly only when dealing with a single-element path).\n\nI also improved the getElements() method to avoid the O(n^2) behaviour.\n\nThe attached plot shows the current performance improvements (about 20% on large transient operations) that are mostly due to these changes. There's still room for additional improvements, but I believe the biggest wins have already been achieved here.",
            "date": "2010-09-16T11:46:21.484+0000",
            "id": 3
        },
        {
            "author": "angela",
            "body": "i think this issue should have been resolved, shouldn't it?",
            "date": "2011-05-04T08:00:15.720+0000",
            "id": 4
        }
    ],
    "component": "jackrabbit-spi, jackrabbit-spi-commons",
    "description": "The path handling code in spi-commons shows quite often in thread dumps and profiling results, as the current implementation does quite a bit of repetitive allocating and copying of path element arrays. We should be able to streamline and simplify the path handling code by only tracking the latest path element and a reference to the parent path. To do this efficiently we may need to adjust some of the Path and PathFactory method declarations (that currently assume element array -based paths) also in the SPI.\n",
    "hasPatch": false,
    "hasScreenshot": true,
    "id": "JCR-2744",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Avoid element arrays in PathImpl",
    "systemSpecification": true,
    "version": ""
}