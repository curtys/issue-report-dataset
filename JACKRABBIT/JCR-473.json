{
    "comments": [
        {
            "author": "Jukka Zitting",
            "body": "+1, I especially like the approach of separating responsibilities from QName and Path.\n\nWould it make sense to go even further along this way, like this:\n\n    public class QName implements ... {\n        public String getNamespaceURI();\n        public String getLocalName();\n        // and the Object and Comparable overrides\n    }\n\n    public class Path implements ... { ... }\n\n    public interface NamespaceResolver {\n        String getURI(String prefix) throws NamespaceException;\n        String getPrefix(String uri) throws NamespaceException;\n    }\n\n    public interface QNameResolver {\n        QName getQName(String jcrName) throws NameException;\n        String getJCRName(String qName) throws NameException;\n    }\n\n    public interface PathResolver {\n        Path getPath(String jcrPath) throws PathException;\n        String getJCRPath(Path path) throws PathException;\n    }1\n\nThis separation of concerns would for example make it possible to implement QName or Path caches as independent and easily composable classes.\n",
            "date": "2006-07-04T14:17:19.000+0000",
            "id": 0
        },
        {
            "author": "angela",
            "body": "regarding interfaces for Path, QName:\ni used to have interfaces for them and keep the implementation in commons. but i felt that the impact on the existing jackrabbit code would be too big. in addition i did not see enough benefit of this approach for the jackrabbit project. but i might be wrong....\n\nregarding split of NamespaceResolver:\nperhaps it's worth taking a closer look at this. at first glance it looks a little exaggerated to me. \n\nin any case (and as long as nobody objects) i would prefer applying the patch as is and discuss additional enhancements in a separate thread. having a patch that shows the impact of a modification makes it easier to decide about the benefits (or drawbacks).\n\nkind regards angela",
            "date": "2006-07-05T13:53:03.000+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Angela:\n> regarding interfaces for Path, QName:\n\nAh, sorry for being a bit unclear. I'd still keep them as concrete classes, preferably final.\n\n> regarding split of NamespaceResolver:\n> perhaps it's worth taking a closer look at this. at first glance it looks a little exaggerated to me.\n>\n> in any case (and as long as nobody objects) i would prefer applying the patch as is and discuss additional enhancements in a separate thread.\n> having a patch that shows the impact of a modification makes it easier to decide about the benefits (or drawbacks).\n\nAgreed, sorry for muddying the water. +1 to this patch.\n\nI'll see if I can come up with compelling enough rationale for the extended proposal, and follow up on the mailing list later on.\n",
            "date": "2006-07-05T14:04:02.000+0000",
            "id": 2
        },
        {
            "author": "Stefan Guggisberg",
            "body": "+1 for applying the patch\n\ncheers\nstefan",
            "date": "2006-07-05T22:57:16.000+0000",
            "id": 3
        },
        {
            "author": "Tobias Bocanegra",
            "body": "> consequently:\n> - modify signature of InternalValue.create that include a value conversion to take a\n>  ValueFactory param and adjust all usages inside the core package. \n\ni don't like the ValueFactory passed all over the classes. this is only because InternalValue now needs it. either we pass the namespace resolver, or the value factory, but not both. especially, since the internal value is an 'internal' representation of the value, and should actually have nothing to do with the string->name/path conversion.\n\nwe should find something nicer. for example, drop the to methods that take the nsresolver:\n\ncreate(Value value, NamespaceResolver nsResolver) is only used 6 times,\ncreate(Value value, int targetType, NamespaceResolver nsResolver) is used 11 times.\ncreate(String value, int targetType, NamespaceResolver nsResolver) is used 8 times.\n\nand put them to the valuehelper. in this case, the caler has to deal with it, and not the InternalValue.\n\n-1 for applying this patch",
            "date": "2006-07-06T00:50:20.000+0000",
            "id": 4
        },
        {
            "author": "angela",
            "body": "InternalValue: \n> we should find something nicer. for example, drop the to methods \n> that take the nsresolver: \n\nmaybe i'm missing your point. from my point of view, the NamespaceResolver is a different story than Value-conversion. While the NamespaceResolver is always used to build a qualified value from a JCR Value (for Name and Path values), the value conversion takes place if the create methods specifies a targetType which may differ from the type of the passed String or Value.\n\nthe conversion helper methods are offered by the ValueHelper, but currently the ValueHelper itself knows about which value objects to create and i would argue, that this should be done by the ValueFactory only. i guess, this was the point of the ValueFactory in jsr170, which was introduced quite a while after the initial version of the spec.\n\nmoving the InternalValue.create to the ValueHelper looks strange to me:\n- the InternalValue is a core functionality (and named 'internal')\n- the ValueHelper is a utility class only and in the commons module.\n- moving the IV-create methods to ValueHelper would require the InternalValue to become a common one.\n- and last it would not solve my point, that the ValueHelper should not know about the Value implementations. \n\n\nSo, not passing the ValueFactory throughout the code, could be solved by:\n\n- don't deprecate InternalValue.create(Value/String, int, NamespaceResolver)\n- remove the new methods in InternalValue that take the ValueFactory\n- in any case: directly use ValueFactoryImpl within InternalValue (such as in the patch) in order to retrieved a converted jcr value from the ValueHelper. Since currently ValueHelper creates Value objects itself (in addition to the ValueFactoryImpl and from the same value implementations, see above), this would not change the resulting InternalValue... i simply didn't like, that the InternalValue knows which ValueFactory to use. but maybe i'm wrong...\n\nwould that be acceptable for you?\n\n\n\n\n",
            "date": "2006-07-06T13:47:19.000+0000",
            "id": 5
        },
        {
            "author": "angela",
            "body": "2. So, not passing the ValueFactory throughout the code, could be solved by: \n\n- leave InternalValue as proposed in the patch\n- remove usage of InternalValue.create(String, int, ValueFactory) and InternalValue.create(Value, int, ValueFactory) and replace it by the original call, whereever the ValueFactory was not accessible before.... means: everywhere except in PropertyImpl and NodeImpl.\n\ni had this during an intermediate stage, since i didn't want to touch too much core classes.\n\nwhatever you like ;)\n\n",
            "date": "2006-07-06T13:59:31.000+0000",
            "id": 6
        },
        {
            "author": "Tobias Bocanegra",
            "body": "jukka, you're right. ValueFactory has nothing to do with resolving names.\n\n> moving the InternalValue.create to the ValueHelper looks strange to me:\nthis was just a first ides but you're right. i didn't thought of moving the create methods to the value helper in commons, but to somewhere in code.\n\nthe InternalValue is a internal abstraction of values, and has nothing to do with jcr Values. Maybe if we look at it as an InternalValueFactory. so we can leave them there. If it's just for the sake for not having duplicate conversion code, we can also use static methods in the ValueFactoryImpl. \n\ni would put all convertion code into ValueHelper, and ValueFactoryImpl and InternalValue can then make use of it.\n",
            "date": "2006-07-06T15:31:14.000+0000",
            "id": 7
        },
        {
            "author": "Tobias Bocanegra",
            "body": "sorry. i'm a bit dizzy today:\n\n- this was just a first ides but you're right.\n+ this was just a first idea but you're right.\n\n- somewhere in code.\n+ somewhere else in core.\n",
            "date": "2006-07-06T15:49:05.000+0000",
            "id": 8
        },
        {
            "author": "Jukka Zitting",
            "body": "Tobias:\n> jukka, you're right\n\nIt was Angela, credit where credit is due. :-)\n\nI think you're right about questioning the excessive passing of parameters around. We should encapsulate the functionality somehow, but I don't think that any of the quick solutions are very clean design-wise. Unfortunately I don't have any better ideas at the top of my head. :-/\n",
            "date": "2006-07-06T16:00:02.000+0000",
            "id": 9
        },
        {
            "author": "angela",
            "body": "a bit? i'm angela not jukka... unfortunately ;)\n\n> i would put all convertion code into ValueHelper, and \n> ValueFactoryImpl and InternalValue can then make use of it. \n\nthe conversion is in fact done by the ValueHelper. this did not changed by the patch.\n\nwhat changes with the patch is:\n\n- ValueHelper does not create the various JCR value object instead it delegates this to the ValueFactory.\n- ValueFactoryImpl: ValueFactory.createValue(String value, int type) does\n  not call the ValueHelper any more. Instead it creates the value objects on its own.\n\n-> the reason this is again, that i think that ValueHelper should not know which JCR values to create. this is what the ValueFactory has been designed for.\n\nyou are right, that currently the InternalValue is both an internal abstraction and factory. however, i tried to fix the problem i considered to be present with the ValueHelper without changing the basic design of core functionality. This would definitely be a different issue.\n\nmaybe you can take a look at my suggestions regarding your original commont tomorrow? or next week? whenever you feel fine again.\n\nif you generally disagree regarding the issue with the ValueHelper, i'd say this a different story, than if you feeling uneasy with the modifications in core classes.\n",
            "date": "2006-07-06T16:04:42.000+0000",
            "id": 10
        },
        {
            "author": "angela",
            "body": "and for the latter (modifications within core classes) i suggested 2 solutions from the top of my head (because i was thinking about this before). if you want me too, i can take a look at the code again. there will be many others....",
            "date": "2006-07-06T16:07:55.000+0000",
            "id": 11
        },
        {
            "author": "Tobias Bocanegra",
            "body": "> Tobias:\n> > jukka, you're right\n>\n> It was Angela, credit where credit is due. :-) \nbut i ment 'jukka'. it was a response to your post :-)\n\n> - ValueFactoryImpl: ValueFactory.createValue(String value, int type) does\n>   not call the ValueHelper any more. Instead it creates the value objects on its own.\nbut it must possible to have both. imo there is a convertion from:\nstring,type -> Value\nstring,type -> Internal-Value-Object\n\nwhere the first needs a value factory and the second the namespace resolver.\ninternal value only uses the second. IMO, this can be all solved in the ValueHelper.\n\nbtw: can we do 2 patches, one with the valuestuff and one with the QName/Path stuff ?\ni think we all agree on the later.",
            "date": "2006-07-06T16:18:58.000+0000",
            "id": 12
        },
        {
            "author": "Jukka Zitting",
            "body": "Tobias:\n> but i ment 'jukka'. it was a response to your post :-) \n\nAh, OK. Just got confused as I didn't mention anything about ValueFactories before my previous comment.\n\n> btw: can we do 2 patches, one with the valuestuff and one with the QName/Path stuff ?\n\n+1\n",
            "date": "2006-07-06T16:30:25.000+0000",
            "id": 13
        },
        {
            "author": "Julian Reschke",
            "body": "Regarding QName...:\n\nDid anybody consider to require JAXP 1.3 (available as seperate download for JDK 1.4), and just to use javax.xml.namespace.QName?\n\n",
            "date": "2006-07-06T16:45:58.000+0000",
            "id": 14
        },
        {
            "author": "Marcel Reutegger",
            "body": "Yes, I did, but the JCR QName are different from an XML QName. E.g. in JCR you may start a name with a digit, which is not possible in an XML name.",
            "date": "2006-07-06T16:58:55.000+0000",
            "id": 15
        },
        {
            "author": "angela",
            "body": "Tobi:\n> but i ment 'jukka'. it was a response to your post :-) \n\ni guess you responded to a post, which gmail considered to be written by jukka...  heh....they start getting subversive... it was me.\n\n> btw: can we do 2 patches, one with the valuestuff and one with \n> the QName/Path stuff ? \n\nwe? do you mean jukka again? or angela?\nbefore i spent a lot of time creating and testing 2 patches, i'd like to get an answer to my questions. are you concerned about the changes in the core (a) or do you disagree regarding the issue i keep pointing out with the ValueHelper (b)?\n\n(a) -> i'd rather find a solution for this than creating 2 patches. 2 proposals are already available. and 'we' may find some more.\n(b) -> tjo...",
            "date": "2006-07-06T16:59:55.000+0000",
            "id": 16
        },
        {
            "author": "Jukka Zitting",
            "body": "Julian:\n> Did anybody consider to require JAXP 1.3 (available as seperate download for JDK 1.4), and just to use javax.xml.namespace.QName?\n\nThe XML QName is slightly different from the JCR QName. Unlike in XML, the JCR prefix is not an inherent part of the QName, and the set of allowed local names is different. Of course these differences are nothing major, but add to the cost of requiring another external dependency. So I prefer to keep the Jackrabbit-specific QName.\n",
            "date": "2006-07-06T17:02:16.000+0000",
            "id": 17
        },
        {
            "author": "Stefan Guggisberg",
            "body": "> Julian Reschke commented on JCR-473:\n> ------------------------------------\n> \n> Regarding QName...:\n> \n> Did anybody consider to require JAXP 1.3 (available as seperate download for JDK 1.4), and just to use javax.xml.namespace.QName?\n\nof course i looked at the various QName classes but none of them filled the bill. the XML QName is very \nsimilar to jackrabbit's QName but there are significant differences. jr's QName is e.g. not interested \nin the prefix, it only stores the ns uri. a JCR localname has a different syntax than an XML NCName.\n\nbtw: the license of the JAXP 1.3 RI (sun's CDDL) is AFAIK not compatible with the apache license.",
            "date": "2006-07-06T17:16:03.000+0000",
            "id": 18
        },
        {
            "author": "Tobias Bocanegra",
            "body": "> i guess you responded to a post, which gmail considered to be written by jukka... \n> heh....they start getting subversive... it was me.\nhmmm....now when i look at the posts again...sorry for this confusion :-) jukkangela :-)\n\n>> btw: can we do 2 patches, one with the valuestuff and one with\n>> the QName/Path stuff ?\n> we? do you mean jukka again? or angela?\nthe patchmaster, i.e. you, angela :-)\n\n> before i spent a lot of time creating and testing 2 patches, i'd like to get an answer to \n> my questions. are you concerned about the changes in the core (a) or do you disagree\n> regarding the issue i keep pointing out with the ValueHelper (b)?\nas i said:\n  i don't like the valuefactory in the internalvalue. there is not need for it there. thats all of my concern. i agree with all the rest, that ValueHelper should be in commons, and that it should use ValueFactory.",
            "date": "2006-07-06T17:20:41.000+0000",
            "id": 19
        },
        {
            "author": "angela",
            "body": "attached a new patch that reverts the modifications made to InternalValue (and the modifications within the core/nodetype and core/xml packages that resulted from them).\n\nI.e. revert\nInternalValue.create(Value, int, NamespaceResolver) and\nInternalValue.create(String, int, NamespaceResolver) \nwhich both need a value conversion to its original form and remove the additional methods taking ValueFactory as additional param.\n\nYou (tobi, stefan) may still discuss together whether the InternalValue should implicitely perform any value conversion or not and whether there exists a smarter solution for this. I would avoid fundamental reworking in the core with this patch.\n\nIf we reached consensus about the enhancements i proposed for the commons module, i would apply the patch.\n\nregards\nangela (aka jukka)\n\nnote: i let the tests run again having the new patch applied (same rev. as before) and no failures occured, that were not present in the untouched checkout (being testRemoveVersion and testMultiValue. according to stefan these are known issues).\n\n",
            "date": "2006-07-07T16:46:17.000+0000",
            "id": 20
        },
        {
            "author": "Tobias Bocanegra",
            "body": "besides some javadoc errors, the patch looks ok.\n\n+1 for patch V2",
            "date": "2006-07-07T17:49:11.000+0000",
            "id": 21
        },
        {
            "author": "Stefan Guggisberg",
            "body": "+1 for 2nd patch from me as well",
            "date": "2006-07-07T23:12:41.000+0000",
            "id": 22
        },
        {
            "author": "angela",
            "body": "merged patch into the latest revision.\ncompleted at revision: 420449  \n",
            "date": "2006-07-10T14:08:44.000+0000",
            "id": 23
        },
        {
            "author": "Tobias Bocanegra",
            "body": "i will adjust all deprecated calls....",
            "date": "2006-07-11T20:03:35.000+0000",
            "id": 24
        },
        {
            "author": "angela",
            "body": "oh. i can help you if you want me to.\n\napart from the deprecated calls, it would be nice to have all the hardcoded index (0, 1), the depth and the name of the root-node replaced by the corresponding constants.\n\ni didn't do that in order to keep the patch as small as possible. \n\nregarding deprecation:\nmaybe QName.toJCRName (and fromJCRName) can be replaced by the corresponding namespace resolver calls. this might be better than the NameFormat calls, since the resolvers may have caches. similar for paths.",
            "date": "2006-07-11T20:36:30.000+0000",
            "id": 25
        },
        {
            "author": "Tobias Bocanegra",
            "body": "> QName.toJCRName (and fromJCRName) can be replaced by the corresponding namespace\n> resolver calls. \ncurrently i avoided this, since IMO the namespace resolver has nothing to do with parsing/formatting QNames and Paths. this should be hidden transparently in the NameFormat.\n\ni resolved the deprecations as follows:\n\nQName.create() -> NameFormat.parse()\nQName.toJCRName() -> NameFormat.format()\nQName.checkFormat() -> NameFormat.checkFormat()\n\nPath.create(path, ns, false) -> PathFormat.parse(path,ns)\nPath.create(path, ns, true) -> PathFormat.parse(path, ns).getNormalizedPath()\nPath.create(parent, path, ns, false) -> PathFormat.parse(parent, path, ns)\nPath.create(parent, path, ns, true) -> PathFormat.parse(parent, path, ns).getCanonicalPath()\nPath.toJCRPath() -> PathFormat.fomat()\nPath.checkFormat() -> PathFormat.checkFormat()\n\nValueHelper.convert(value, type) \n   -> ValueHelper.convert(value, type, ValueFactoryImpl.getInstance())\n\n",
            "date": "2006-07-12T17:13:55.000+0000",
            "id": 26
        }
    ],
    "component": "",
    "description": "I would like to suggest a couple of  enhancements to the commons module. \n\nThe patch was created against rev. 417443 and the tests did not reveal any \nproblems.\n\nSummary of suggestion modifications:\n\nQName\n-------------------------------------------------------------------------------------------------------------------------\n- reduce QName to its core functionality and put conversion from and to JCR name to\n  a separate class 'NameFormat'\n- in order not to break existing code, all methods that deal with the conversion in QName\n  are marked deprecated.\n- add constant for the name of the root node.\n\nPath\n-------------------------------------------------------------------------------------------------------------------------\n- reduce Path to its core functionality and put conversion from and to JCR path to\n  a separate class 'PathFormat'\n- in order not to break existing code, all methods that deal with the conversion in Path\n  are marked deprecated.\n- introduce new constants for UNDEFINED_INDEX (0) and DEFAULT_INDEX (1), that\n   are currently hardcoded throughout  the jackrabbit project.\n- new method Path.getElement(int) [PathElement]\n- make PathElement constants public (used by PathFormat)\n\nPath.PathBuilder\n-------------------------------------------------------------------------------------------------------------------------\n- additional constructor  PathBuilder(Path)\n\nPath.PathElement\n-------------------------------------------------------------------------------------------------------------------------\n- add PathElement.getNormalizedIndex() that always asserts a 1-based index.\n- change subclasses to be private (no usage within the jackrabbit, except inside Path).\n\nPathMap\n-------------------------------------------------------------------------------------------------------------------------\n- move o.a.j.core.PathMap  to o.a.j.util.PathMap in order to make it available in the\n  commons module.\n\nNamespaceResolver\n-------------------------------------------------------------------------------------------------------------------------\n- add methods for resolution of paths:\n   > getQPath(String jcrPath) [Path]\n   > getJCRPath(Path qPath) [String]\n\nNamespaceListener\n-------------------------------------------------------------------------------------------------------------------------\n- add method 'namespaceRemove(String)'\n\nValueHelper\n-------------------------------------------------------------------------------------------------------------------------\ncurrently  JCR value objects are 'manually' created in the ValueHelper despite the\nfact, that JSR170 defines a ValueFactory interface. Consequently the ValueHelper\npresent in the commons module can only be used by implementations that use\nthe same value implementations.\n\n- add new helper methods that take a ValueFactory as argument.\n- in order not to break existing code the original methods are marked deprecated and\n  may be removed at a later time.\n\nconsequently:\n- modify signature of  InternalValue.create that include a value conversion to take a\n  ValueFactory param and adjust all usages inside the core package.\n\nValueFactoryImpl\n-------------------------------------------------------------------------------------------------------------------------\n- createValue(String, int ): used to call the conversion on ValueHelper. with the \n   changes suggested to ValueHelper, the code must be changed in order to\n   created instances of the Value implementations within the factory.\n- together with the modification to ValueHelper, stefan suggested to replace the public \n  constructor with a static 'getInstance' method. All usages within jackrabbit.core, were\n   modified accordingly.\n\nText\n-------------------------------------------------------------------------------------------------------------------------\n- add getName(String, boolean) where the boolean flag indicates whether  a trailing slash \n   should be ignored.\n- add getRelativeParent(String, int, boolean) where the boolean flag indicates whether  a \n  trailing slash should be ignored.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-473",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Some enhancements to jackrabbit commons",
    "systemSpecification": true,
    "version": "1.0"
}