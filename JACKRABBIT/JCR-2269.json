{
    "comments": [
        {
            "author": "Stefan Guggisberg",
            "body": "fixed in svn r810565.\n\nthanks for reporting this issue and providing a test case!\n",
            "date": "2009-09-02T16:03:06.744+0000",
            "id": 0
        }
    ],
    "component": "jackrabbit-core",
    "description": "Hi,\n\nEnclosed below is a test case that can be used to reproduce a\nconcurrency bug. This test case uses two con-current threads to\nexecute Workspace.copy() to copy a node to same destination. The\nparent node has set its allowSameNameSiblings to false. According to\nthe javadoc of Workspace.copy(String srcAbsPath, String destAbsPath) :\n\"This method copies the node at srcAbsPath to the new location at\ndestAbsPath. If successful, the change is persisted immediately, there\nis no need to call save.\".  \"An ItemExistException is thrown if a\nproperty already exists at destAbsPath or a node already exist there,\nand same name siblings are not allowed. \"\n\nHowever in reality this is not the case.  The test case can end up\nwith two child nodes with same names. Please note, not every run can\nreproduce the problem, but generally I can get the problem within 3 to\n10 iterations. I also got an InvalidItemStateException once (only\nonce).  Can someone kindly help to confirm if this is a bug in\nJackrabbit or maybe I am using JackRabbit in a wrong way? The test\ncase has been tested on Jackrabbit 1.6 branch\n(http://svn.apache.org/repos/asf/jackrabbit/tags/1.6.0), Windows\nVista, JDK 1.5.0_14.\n\nThe test case is also attached for your convenience.\n\nThanks,\nJervis Liu\n\npackage org.apache.jackrabbit.core;\n\nimport org.apache.jackrabbit.test.AbstractJCRTest;\nimport javax.jcr.ItemExistsException;\nimport javax.jcr.Node;\nimport javax.jcr.Session;\nimport javax.jcr.Value;\nimport javax.jcr.NodeIterator;\nimport java.util.Random;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport javax.jcr.nodetype.NodeType;\n\nimport org.apache.jackrabbit.test.NotExecutableException;\nimport javax.jcr.RepositoryException;\nimport javax.jcr.nodetype.NodeTypeManager;\n\n\npublic class ConcurrentCopyTest extends AbstractJCRTest {\n\n    private static final int NUM_ITERATIONS = 40;\n    private static final int NUM_SESSIONS = 2;\n\n    String sourcePath;\n    String destPath;\n\n    public void testConcurrentCopy() throws Exception {\n        for (int n = 0; n < NUM_ITERATIONS; n++) {\n            System.out.println(\"---Iteration---- \" + n);\n\n            // clean up testRoot first\n            if (testRootNode.hasNode(\"ConcurrentCopyTestNode\")) {\n                Node testNode = testRootNode.getNode(\"ConcurrentCopyTestNode\");\n                testNode.remove();\n                testRootNode.save();\n                System.out.println(\"---old node removed---\");\n            }\n\n            // create a parent node where allowSameNameSiblings is set to false\n            Node snsfNode = testRootNode.addNode(\"ConcurrentCopyTestNode\",\n                    \"nt:folder\");\n            testRootNode.save();\n            sourcePath = snsfNode.getPath();\n            destPath = sourcePath + \"/\" + \"CopiedFromConcurrentCopyTestNode\";\n            System.out.println(\"---sourcePath-----------------\" + sourcePath);\n            System.out.println(\"---destPath-----------------\" + destPath);\n\n            // firstly we verify it works with single thread.\n            Session rootSession = helper.getSuperuserSession();\n            rootSession.getWorkspace().copy(sourcePath, destPath + \"test\");\n\n            // copy again to same destPath, expect an ItemExistsException\n            try {\n                rootSession.getWorkspace().copy(sourcePath, destPath + \"test\");\n                fail(\"Node exists below '\" + destPath + \"'. Test should fail.\");\n            } catch (ItemExistsException e) {\n            }\n\n            Thread[] threads = new Thread[NUM_SESSIONS];\n            for (int i = 0; i < threads.length; i++) {\n                // create new session\n                Session session = helper.getSuperuserSession();\n                TestSession ts = new TestSession(\"s\" + i, session);\n                Thread t = new Thread(ts);\n                t.setName((NUM_ITERATIONS - n) + \"-s\" + i);\n                t.start();\n                log.println(\"Thread#\" + i + \" started\");\n                threads[i] = t;\n                // Thread.yield();\n                // Thread.sleep(100);\n            }\n            for (int i = 0; i < threads.length; i++) {\n                threads[i].join();\n            }\n\n            NodeIterator results = testRootNode.getNode(\n                    \"ConcurrentCopyTestNode\").getNodes(\n                    \"CopiedFromConcurrentCopyTestNode\");\n            while (results.hasNext()) {\n                Node node = results.nextNode();\n                System.out.println(\"--result node- \" + node.getName());\n            }\n\n            assertEquals(1, results.getSize());\n        }\n    }\n\n    // --------------------------------------------------------< inner classes >\n    class TestSession implements Runnable {\n\n        Session session;\n        String identity;\n        Random r;\n\n        TestSession(String identity, Session s) {\n            session = s;\n            this.identity = identity;\n            r = new Random();\n        }\n\n        private void randomSleep() {\n            long l = r.nextInt(90) + 20;\n            try {\n                Thread.sleep(l);\n            } catch (InterruptedException ie) {\n            }\n        }\n\n        public void run() {\n\n            log.println(\"started.\");\n            String state = \"\";\n            try {\n                this.session.getWorkspace().copy(sourcePath, destPath);\n                session.save();\n                Node newNode =\ntestRootNode.getNode(\"ConcurrentCopyTestNode/CopiedFromConcurrentCopyTestNode\");\n                System.out.println(\"--Added node- \" + newNode.getName());\n\n                session.save();\n                randomSleep();\n            } catch (Exception e) {\n                log.println(\"Exception while \" + state + \": \" + e.getMessage());\n                e.printStackTrace();\n            } finally {\n                session.logout();\n            }\n\n            log.println(\"ended.\");\n        }\n    }\n\n}\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2269",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Possible concurrency bug with Workspace.copy() ",
    "systemSpecification": true,
    "version": "1.6"
}