{
    "comments": [
        {
            "author": "Stefan Guggisberg",
            "body": "> java.io.IOException: ERROR 40XD0: Container has been closed \n\nseems to be DerbyPersistenceManager related (40XD0 is a derby error code).\n\ngoogling \"ERROR 40XD0: Container has been closed \" returns lots of interesting hits.\nseems like this problem only occurs with autoCommit=true.\n\nduring reading a serialized 'bundle' from the db, other stmts might be issued\n(like reading name index) which in turn could cause the original stream to \nbe closed, hence the \"Container has been closed\" IOException.",
            "date": "2007-07-30T10:16:29.641+0000",
            "id": 0
        },
        {
            "author": "Sridhar Raman",
            "body": ">> seems like this problem only occurs with autoCommit=true. \nSo is there any fix that I can use for now?  Any place where I can set the autoCommit to false?  Would this affect other functionalities of Jackrabbit?",
            "date": "2007-08-01T04:44:51.735+0000",
            "id": 1
        },
        {
            "author": "Christoph Kiehl",
            "body": "This is a patch for jackrabbit-core which includes a little test case. Using this test case I can reproduce the bug on my machine. Seems like large string values are the problem. Just adjust the REPOSITORY_HOME constant to match your environment.\nI didn't have time to dig into it though. If someone else with more thorough knowledge of the PMs is willing to give it a shot ... ;)",
            "date": "2007-08-04T14:48:29.848+0000",
            "id": 2
        },
        {
            "author": "Stefan Guggisberg",
            "body": "by using christoph's test case i was able to reproduce the issue.\nthanks, christoph!\n\nsynopsis:\n**********\nthe issue is caused by the fact that while reading a blob from the resultset of a sql stmt a second stmt is executed.\nin autocommit mode resources bound to a resultset may be freed if another stmt is executed on the same connection.\n\nthe problem occurs when the blob exceeds a certain size (i guess 64kb) in which case derby seems to spool \nthe blob to disk.\n\nBundleBinding.readBundle()  consumes the passed stream (from the result set and indirectly calls \nDbNameIndex.getString() which executes another sql stmt. \n\nstack trace:\n\njava.io.IOException: ERROR 40XD0: Container has been closed\n\tat org.apache.derby.impl.store.raw.data.OverflowInputStream.fillByteHolder(Unknown Source)\n\tat org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.read(Unknown Source)\n\tat java.io.DataInputStream.read(DataInputStream.java:224)\n\tat java.io.FilterInputStream.read(FilterInputStream.java:111)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.TrackingInputStream.read(TrackingInputStream.java:118)\n\tat java.io.DataInputStream.read(DataInputStream.java:224)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.BundleBinding.readPropertyEntry(BundleBinding.java:370)\n\tat org.apache.jackrabbit.core.persistence.bundle.util.BundleBinding.readBundle(BundleBinding.java:114)\n\tat org.apache.jackrabbit.core.persistence.bundle.BundleDbPersistenceManager.loadBundle(BundleDbPersistenceManager.java:891)\n\tat org.apache.jackrabbit.core.persistence.bundle.AbstractBundlePersistenceManager.getBundle(AbstractBundlePersistenceManager.java:663)\n\tat org.apache.jackrabbit.core.persistence.bundle.AbstractBundlePersistenceManager.exists(AbstractBundlePersistenceManager.java:488)\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager.hasNonVirtualItemState(SharedItemStateManager.java:1108)\n\tat org.apache.jackrabbit.core.state.SharedItemStateManager.hasItemState(SharedItemStateManager.java:285)\n\tat org.apache.jackrabbit.core.state.LocalItemStateManager.hasItemState(LocalItemStateManager.java:180)\n\tat org.apache.jackrabbit.core.state.XAItemStateManager.hasItemState(XAItemStateManager.java:252)\n\tat org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(SessionItemStateManager.java:174)\n\tat org.apache.jackrabbit.core.ItemManager.createItemInstance(ItemManager.java:494)\n\tat org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:325)\n\tat org.apache.jackrabbit.core.NodeImpl.getNode(NodeImpl.java:2428)\n\tat org.apache.jackrabbit.core.Test.main(Test.java:197)\n\n\npossible solutions:\n*********************\n- buffer data read from stream before handling stream to BundleBinding\n- set autocommit to false and commit explicitly at the end of \n   BundleDbPersistenceManager.loadBundle()\n- read all name indices into hash maps on startup\n",
            "date": "2007-08-06T12:48:03.278+0000",
            "id": 3
        },
        {
            "author": "Stefan Guggisberg",
            "body": "patch that solves this issue by buffering the bundle data.",
            "date": "2007-08-06T13:42:55.424+0000",
            "id": 4
        },
        {
            "author": "Tobias Bocanegra",
            "body": "+1 for this patch",
            "date": "2007-08-08T10:23:29.086+0000",
            "id": 5
        },
        {
            "author": "Stefan Guggisberg",
            "body": "fixed in svn r563900 by committing patch.",
            "date": "2007-08-08T14:35:08.815+0000",
            "id": 6
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.3 branch in revision 577840.",
            "date": "2007-09-20T18:00:01.189+0000",
            "id": 7
        }
    ],
    "component": "jackrabbit-core",
    "description": "Code:\nNodeIterator entiter = null;\nNode root = null, contNode = null, entsNode = null;\n\ntry\n{\n    root = session.getRootNode();\n    contNode = root.getNode(\"sr:cont\");\n    entsNode = contNode.getNode(\"sr:ents\");\n    entiter = entsNode.getNodes();\n}\ncatch (Exception e)\n{\n    logger.error(\"Getting ents nodes\", e);\n}\n\nOutput:\n12359 [http-8080-Processor24] ERROR org.apache.jackrabbit.core.persistence.bundle.BundleDbPersistenceManager - failed to read bundle: c3a09c19-cc6b-45bd-a42e-c4c925b67d02: java.io.IOException: ERROR 40XD0: Container has been closed\n12375 [http-8080-Processor24] ERROR com.taxila.editor.sm.RepoOperations - Getting ents nodes\njavax.jcr.PathNotFoundException: sr:ents\n    at org.apache.jackrabbit.core.NodeImpl.getNode(NodeImpl.java:2435)\n    at com.taxila.editor.sm.RepoOperations.getEntityNodes (RepoOperations.java:4583)\n    at com.taxila.editor.sm.RepoOperations.displayEntities(RepoOperations.java:4159)\n    at com.taxila.editor.sm.RepoOperations.displayEntities(RepoOperations.java:4114)\n    at com.taxila.editor.em.um.MainEntityForm.reset (MainEntityForm.java:215)\n    at org.apache.struts.taglib.html.FormTag.doStartTag(FormTag.java:640)\n    at org.apache.jsp.pages.jsp.entity.MainEntity_jsp._jspService(MainEntity_jsp.java:414)\n    at org.apache.jasper.runtime.HttpJspBase.service (HttpJspBase.java:97)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n    at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:332)\n    at org.apache.jasper.servlet.JspServlet.serviceJspFile (JspServlet.java:314)\n    at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:264)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter (ApplicationFilterChain.java:252)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n    at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java :672)\n    at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:463)\n    at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:398)\n    at org.apache.catalina.core.ApplicationDispatcher.forward (ApplicationDispatcher.java:301)\n    at org.apache.struts.action.RequestProcessor.doForward(RequestProcessor.java:1014)\n    at org.apache.struts.action.RequestProcessor.processForwardConfig(RequestProcessor.java:417)\n    at org.apache.struts.action.RequestProcessor.processActionForward(RequestProcessor.java:390)\n    at org.apache.struts.action.RequestProcessor.process(RequestProcessor.java:271)\n    at org.apache.struts.action.ActionServlet.process (ActionServlet.java:1292)\n    at org.apache.struts.action.ActionServlet.doPost(ActionServlet.java:510)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:709)\n    at javax.servlet.http.HttpServlet.service (HttpServlet.java:802)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java :173)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)\n    at org.apache.catalina.core.StandardHostValve.invoke (StandardHostValve.java:126)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)\n    at org.apache.catalina.connector.CoyoteAdapter.service (CoyoteAdapter.java:148)\n    at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)\n    at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java :664)\n    at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)\n    at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)\n    at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run (ThreadPool.java:684)\n    at java.lang.Thread.run(Unknown Source)\n\nOn the other hand if I do this:\nCode:\ntry\n{\n    root = session.getRootNode ();\n    contNode = root.getNode(\"sr:cont\");\n    entsNode = contNode.getNode(\"sr:ents\");\n    entiter = entsNode.getNodes();\n}\ncatch (Exception e)\n{\n    logger.error(\"Getting ents nodes\", e);\n    try\n    {\n        entsNode = contNode.getNode(\"sr:ents\");\n        entiter = entsNode.getNodes();\n    }\n    catch (Exception e1)\n    {\n        e1.printStackTrace();\n    }\n}\n\nOutput:\nThe first error as in the previous case comes, but the second execution of the entsNode = contNode.getNode(\"sr:ents\"); statement returns the right node, and hence the iterator.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1039",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Bundle Persistence Manager error - failing to read bundle the first time",
    "systemSpecification": true,
    "version": "1.3, 1.3.1"
}