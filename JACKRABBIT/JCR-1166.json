{
    "comments": [
        {
            "author": "angela",
            "body": "i would suggest modify the LazyItemIterator to apply the same logic as present currently in the query.NodeIteratorImpl:\n\n- take the size of original collection as estimation for the number of Items available during iteration.\n- recalculated the size if entries that cannot be resolved to Items are found during the iteration.\n\nthis would have the following benefits:\n- if nothing changes in the meantime the size estimate is accurate\n- no extra effort to calculate the size upon/before creating the iterator\n- don't modify lazy behaviour of the iterator\n\ndrawback:\n- size may shrink during iteration.\n",
            "date": "2007-11-22T18:31:48.281+0000",
            "id": 0
        },
        {
            "author": "angela",
            "body": "julian, would that be suitable for you?",
            "date": "2007-11-22T18:36:46.202+0000",
            "id": 1
        },
        {
            "author": "Julian Reschke",
            "body": "But that would still require to completely iterate through what the SPI implementation returned, right?\n\nI would really prefer if we could avoid iterating through the children if all the caller wants to know is their number.\n ",
            "date": "2007-11-23T12:40:22.477+0000",
            "id": 2
        },
        {
            "author": "angela",
            "body": "noe... you get the size immediately. but it may not be totally accurate if nodes are removed after accessing\nthe iterator (or if nodes are removed by somebody else and cachebehaviour is observation or if you refresh\nthe session after accessing the iterator).\n\nin any case: if during iteration an invalid/removed item is encountered the effective size will be lower.\nthat may happen in any case. \nthat's an built in consequence of the lazy iteration and not an effect of whatever size-value detection.\n\nthe only thing that changes: initially i thought that -1 would be more appropriate than a size value that is\nnot 100% correct.\n\nangela",
            "date": "2007-11-23T13:26:04.142+0000",
            "id": 3
        },
        {
            "author": "angela",
            "body": "for the record (translation of oral communication):\n\nthe problem julian is referring to is 2-folded:\n\n1) the -1 return value of the RangeIterator implementation.\n2) the fact that RepositoryService.getChildInfos returns an Iterator -> thus the caller needs to iterate in order to\n     detect the size. That could be improved thus making not only the ItemIterator lazy but also the code that\n     populates the hierarchy.\n\nLet's put 2) to a separate SPI issue. vale?\n\nIf nobody object i'm going to solve this issue as suggested.\n\nangela\n",
            "date": "2007-11-27T15:22:34.061+0000",
            "id": 4
        },
        {
            "author": "angela",
            "body": "fixed rev: 599349  \n",
            "date": "2007-11-29T08:59:54.249+0000",
            "id": 5
        }
    ],
    "component": "jackrabbit-jcr2spi",
    "description": "Currently, JCR2SPI always returns -1 on RangeIterator.getSize().\n\nThis return value is legal (meaning \"unknown\"), but may cause clients to simply iterate through the whole list when what they really want is simply the count.\n\nUse case:\n\n\"The use case is to count the number of members of a NT_FOLDER without having to open up the NT_FOLDER and count all the members (and I assume load them into memory) \"\n\nTo make this happen we probably need to move away from simple Iterators on the SPI level, and put quite some additional work into JCR2SPI.\n\nFeedback appreciated.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1166",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "JCR2SPI does not provide actual size on RangeIterator.getSize()",
    "systemSpecification": true,
    "version": ""
}