{
    "comments": [
        {
            "author": "Michael D\u00fcrig",
            "body": "I'm in favor of Angela's suggestion. I would generalize the meaning of null returned by ChildInfo[] NodeInfo.getChildInfos() to 'ask me later'. That is, whenever ChildInfo[] NodeInfo.getChildInfos() returns null, the spi implementation cannot or for some reason deliberately does not want to return the ChildInfos. The client would then have to collect the ChildInfos later by a call to RepositoryService.getChildInfos. \n\nAlso I think the client should use the ChildInfos returned by NodeInfo.getChildInfos() whenever possible. It should only call RepositoryService.getChildInfos when absolutely necessary.\n",
            "date": "2008-02-21T13:43:06.308+0000",
            "id": 0
        },
        {
            "author": "angela",
            "body": "> I'm in favor of Angela's suggestion\n\ncredit is due to marcel.\nand i would support the more general interpretation of the null return value suggested by michael.\n\n",
            "date": "2008-02-21T14:08:42.827+0000",
            "id": 1
        },
        {
            "author": "angela",
            "body": "initial draft for NodeInfo.getChildInfos().\n\ndifferences compared to the initial suggestion\n\n1) Don't let NodeInfo extend ChildInfo\n\nI looked at this as well. But the only 'overlapping' method that could be\nremoved from NodeInfo would be 'getIndex()'.\nAfter thinking about it again, i came to the conclusion that 'ChildInfo' actually\nhas a different meaning that ItemInfo... and eventually it's name is wrong or there would have been much better ways to solve the issue, that led to ChildInfo. Still what it actually is from my point of view is: A relative of the NodeId. The problem with NodeId: it may not reveal the name and the index of a Node and can therefore not be used for hierarchical purposes.\n\n2) Return-Value: Iterator.\n\nFor consistency reasons i changed the return value from array to iterator.\nAll of the following methods (that could be compared to the new one)\n- NodeInfo.getPropertyIds\n- RepositoryService.getChildInfos\n- RepositoryService.getItemInfos\nreturn an Iterator.\nWhile thinking about it, i remembered that we once decided that we'd rather user iterators for anything that most certainly will contain more than just a couple (more or less limited amount) of entries.\n\nI adjusted spi-commons, spi2jcr and jcr2spi. It compiles, tests passed but i didn't have time to really test it or write a reasonable test-case.\n\n(i quickly had a look at the sandbox/spi as well... there it only affected spi2dav and the modifications were really trivial).\n\nplease comment\nangela\n\n\n ",
            "date": "2008-02-22T11:00:27.564+0000",
            "id": 2
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "+1 for using an iterator\n+1 for the patch.\n\nThere is a typo in the comment: \"Return the all <code>ChildInfo</code>\". ",
            "date": "2008-02-22T12:52:17.855+0000",
            "id": 3
        },
        {
            "author": "Julian Reschke",
            "body": "Hm, no exceptions allowed?\n",
            "date": "2008-02-22T14:52:11.009+0000",
            "id": 4
        },
        {
            "author": "angela",
            "body": "none of the other methods allows exceptions...",
            "date": "2008-02-22T14:57:08.322+0000",
            "id": 5
        },
        {
            "author": "Julian Reschke",
            "body": "...which I think is a problem as well.\n\nIn this case, the related method on RepositoryService *does* declare RepositoryException.\n\nSo what am I supposed to do when internally an error occurs?\n",
            "date": "2008-02-22T14:59:50.149+0000",
            "id": 6
        },
        {
            "author": "Marcel Reutegger",
            "body": "Julian wrote:\n> So what am I supposed to do when internally an error occurs? \n\nI think you should not even create a NodeInfo in that case. IMO a NodeInfo should be self contained and shouldn't hold resources tied to the underlying repository. \n\nThat's actually also a reason why I don't like changing the return values to an Iterator ;)\nWhenever Iterators are returned it implies that an implementation is allowed (or even encouraged) to lazily retrieve the items. This lazy approach however has some issues. See also JSR 283 mailing list thread 'I whish there was ....'.\n\nThis new method is not intended to return large amounts of ChildInfos that are lazily instanciated and should therefore use an array.",
            "date": "2008-02-22T19:24:51.582+0000",
            "id": 7
        },
        {
            "author": "Julian Reschke",
            "body": "> I think you should not even create a NodeInfo in that case. IMO a NodeInfo should be self contained and shouldn't hold resources tied to the underlying repository.\n\nI disagree with that. \n\nBut anyway, even if it did not an error could occur while building the list of children. I'm really not sure why we're pretending that things always will work when they may not.\n\nThere may be other problems like these (where I currently have to throw unchecked exceptions), will have to check for that.\n\n> That's actually also a reason why I don't like changing the return values to an Iterator ;)\n> Whenever Iterators are returned it implies that an implementation is allowed (or even encouraged) to lazily retrieve the items. This lazy approach however has some issues. See also JSR 283 mailing list thread 'I whish there was ....'.\n\nI think it's a feature (to allow lazy construction); we just need to make sure we handle all cases well.\n \n> This new method is not intended to return large amounts of ChildInfos that are lazily instanciated and should therefore use an array.\n\nSounds kind of arbitrary to me. What is \"large\"? And, if my store doesn't know beforehand (which one does?), do we really want the SPI impl to return null, just for JCR2PI to asking for the same information again through a different method call?\n\n",
            "date": "2008-02-22T20:27:39.189+0000",
            "id": 8
        },
        {
            "author": "angela",
            "body": "julian:\n\nif you cant determine the childinfos upon creating the nodeinfo you should (as stated by the javadoc) simply return null,\nif you cant build the nodeinfo due to some exceptional situation you should throw upon getNodeInfo or getItemInfos\nrespectively.\n\nthe exception with repositoryservice getChildInfo means the same as the one defined with getNodeInfo or getItemInfos:\n- the target node does not exist (any more) in the persistent state\n- the persistent layer cant be accessed or something similar.\n\ntherefore i am with marcels explanation how nodeinfo should be created and work.\n\nin addition, if you decide to do some lazy loading of the childinfos upon NodeInfo.getChildInfos (or upon RepositoryService.getChildInfos) the exception from my point of view is not raised upon building the iterator but upon retrieving the next element.... and there you wont be able to throw repository exception either.\n\nregarding \"large\":\nthis is just one obvious example what could be a reason for the implementation NOT to reveal\nthe child infos upon NodeInfo.getChildInfos. and the description mentions this as example.\nthat it states: if the impl is not willing.\n\nNot willing means that the SPI implementations decides upon internal rules whether the\nchildinfos are included or not. examples: the impl. decides\n\n- based on the internal structure of the persistent layer in general\n- based the cost of retrieving childinfos (given the potential chance of never being asked for)\n- based on the known characteristics of the target node: e.g. we have folder and files and other nodes\n  and we assume that folders will be used for displaying the children so send it. for any other nodes we dont\n- based on the simple amount of child nodes if we know that (dont calc if more than 14)\n- based on a implementation specific configuration\n  that could include nodetypes, number of child nodes, day time, session.userId, random... whatever\n  you feel would be appropriate, reasonable or simply a good thing for your specific store.\n\nthe last is pretty much what we discussed for the getItemInfos method for the batch read. we said\nthat we cant add a config to the spi interfaces and want to leave that to the impl because we would\nnot be able to find something that fits the needs for all potential implementations.\n\nif your store cant retrieve the child info you may\n- create your reposervice with a config and leave the decision to someone else\n- always calculate the child infos\n- never calculate the child infos\n- decide based on the characteristics of the requested node \n-...\n(see above)\n\nso. i am not in favor of adding exceptions to the new method... at least not for the reasons presented so far.\nangela\n\n",
            "date": "2008-02-23T09:49:16.523+0000",
            "id": 9
        },
        {
            "author": "angela",
            "body": "what's the status here? can/should we extend the NodeInfo interface as suggested?",
            "date": "2008-04-18T08:43:00.666+0000",
            "id": 10
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "I'm in favour of the patch as it is. That is, add getChildInfos() to NodeInfo with the following semantics: If NodeInfo.getChildInfos() returns null, jcr2spi must call RepositoryService.getChildInfos() to determine the children of the current node. Otherwise jcr2spi must not (I can also live with 'should not') call RepositoryService.getChildInfos(). \n\nSeparate calls to RepositoryService.getChildInfos() result in additional round-trips in cases where the persistence layer returns the children (infos) along with a node. ",
            "date": "2008-04-24T10:15:53.766+0000",
            "id": 11
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Patch updated to latest revision",
            "date": "2008-05-07T17:58:52.187+0000",
            "id": 12
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "I tested Angela's initial patch and updated it to the latest revision.\n\nThe patch works well. In may case it helps to cut down the number of round-trips to the back-end store significantly:\n\nIn my test case including the ChildInfos within NodeInfo results in 4 calls to RepositoryService.getItemInfos() and in no calls to RepositoryService.getChildInfos() at all. Not including them results in the same 4 calls to RepositoryService.getItemInfos() and additionally in 15 calls to RepositoryService.getChildInfos().\n\nSince the patch does not change existing semantics (just return null for NodeInfo.getChildInfos) but on the other hand has the potential to vastly increase performance in some common case I'd very much like to see this patch applied.",
            "date": "2008-05-07T18:09:46.724+0000",
            "id": 13
        },
        {
            "author": "angela",
            "body": "ok.... if nobody objects within the next couple of days i will apply michaels patch.\nangela",
            "date": "2008-05-08T10:04:27.033+0000",
            "id": 14
        },
        {
            "author": "Julian Reschke",
            "body": "If we have evidence that it actually helps in some cases, +.5.\n\nThat being said, I think it would be great if we would base these things on reliable test data; that's why I started the jcr-benchmark project after all.\n",
            "date": "2008-05-08T12:16:06.825+0000",
            "id": 15
        }
    ],
    "component": "jackrabbit-spi",
    "description": "Improvement suggested by Marcel:\n\nChildInfo is basically a stripped down NodeInfo. With little effort it would even be possible to have NodeInfo extends ChildInfo. Not sure how useful that is, but since we don't have that inheritance in code and at the same time nearly a 100% overlap it makes me suspicious.\n\nHere's another idea:\n\nintroduce a method ChildInfo[] NodeInfo.getChildInfos(). The method either returns:\n\n- all child infos, which also gives the correct number of child nodes. this may also mean that an empty array is returned to indicate there are no child nodes.\n- null, to indicate that there are *lots* of child nodes and the method RepositoryService.getChildInfos() with the iterator should be used. \n\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1405",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "SPI: Introduce NodeInfo.getChildInfos()",
    "systemSpecification": true,
    "version": ""
}