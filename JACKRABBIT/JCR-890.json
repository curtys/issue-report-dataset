{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "I agree that this 'feature' is desirable however I would rather implement sharing read only session in a decoration layer or some sort of proxy on top of the JCR repository. We already have enough synchronization statements in the code and introducing even more will slow down clients that are not interested to share a session, e.g. a client that writes to a session would also be heavily synchronized, which is unnecessary in this case.\n\nI think we should choose a similar approach like the collections framework in java. All collection implementations are not thread-safe (except the very old ones from java 1.0 and 1.1), but there are wrapper classes that make them thread-safe if the client wishes so.\n\nThis approach also has the advantage that the wrapper/decorator/proxy can throw an exception if a client still tries to call a method that writes to the repository. If we build the thread-safeness into the jackrabbit core we don't have this control and clients could still write to a session that is shared.\n\nI therefore propose the following:\n\n- remove all synchronization in the core that is meant to support concurrent read access to a session\n- create a read only decorator that synchronizes access to session\n\nsometing along the lines:\n\nSession session = Util.synchronizedSession(session);\n// use session from multiple threads",
            "date": "2007-05-16T10:49:25.520+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "I hereby withdraw my proposal and state another one:\n\nMove all synchronization in Jackrabbit that deals with concurrent read to the classes that implement the JCR API. In other words, make Jackrabbit entirely thread-safe for a client using the API. This includes all interfaces and not just the Repository.\n\nWhy did I change my mind? With a wrapper approach a client may (by mistake) still use Jackrabbit 'directly' and then use a single session instance from concurrent threads. So far we just say: well,  that's not supported, so it's your fault. If JCR is supposed to be infrastructure than an implementation should be robust and must not break just because some code does not behave as it should.\n\nI even think the performance will be better compared to the current jackrabbit-core because we currently have many low level data structures that need to be synchronized. If we decide to synchronize on a coarser grained level like the API we can get rid of those low level synchronizations and as a result there will be less synchronized blocks that are entered.",
            "date": "2007-08-31T12:32:26.387+0000",
            "id": 1
        },
        {
            "author": "Thomas Mueller",
            "body": "+1\n\nRobustness is very important in my view. Even if it has an effect on performance (I think it does not, but we could measure it).",
            "date": "2007-08-31T12:39:49.569+0000",
            "id": 2
        },
        {
            "author": "Thomas Mueller",
            "body": "Write access within the same session should also be synchronized.\nBut read access is more important.",
            "date": "2007-08-31T12:43:41.600+0000",
            "id": 3
        },
        {
            "author": "Jukka Zitting",
            "body": "So you'd have something like this on all non-trivial API methods:\n\n    /** The session this object is associated with */\n    private final Session session;\n\n    public void someMethod() {\n        synchronized (session) {\n            // do something\n        }\n    }\n\nI like the idea.",
            "date": "2007-08-31T16:20:44.123+0000",
            "id": 4
        },
        {
            "author": "Padraic Hannon",
            "body": "I think this is similar to the discussion from JCR-1050. Perhaps we need a larger effort to look at synchronization within the lower levels of Jackrabbit?",
            "date": "2007-08-31T19:06:38.819+0000",
            "id": 5
        },
        {
            "author": "Thomas Mueller",
            "body": "In a many cases, parameters can be processed outside the synchronized block. Also, I would catch throwables and convert them to RepositoryExceptions, or at least log them:\n\n    public void someMethod(parameters) throws RepositoryException {\n        try {\n            log(...)\n            prepare parameters\n            synchronized (session) {\n                // do something\n            }\n        } catch (Throwable e) {\n            throw logAndConvert(e);\n        }\n    }\n\n> effort to look at synchronization within the lower levels of Jackrabbit?\n\nWhy not. In my view testing with specific use cases / benchmarks helps a lot to find improvements.\n\nThomas",
            "date": "2007-09-01T08:48:05.975+0000",
            "id": 6
        },
        {
            "author": "Jukka Zitting",
            "body": "I'll see what I can do about this in the Jackrabbit 2.2 timescale.\n\nInstead of synchronizing things on the SessionImpl instance, I'm thinking of adding a lower-level SessionState class that encapsulates all per-session state that needs to be guarded from concurrent access.",
            "date": "2010-04-20T14:10:43.170+0000",
            "id": 7
        },
        {
            "author": "Jukka Zitting",
            "body": "As a first step to implementing this, I'd like to make the following moves of session-related classes form o.a.j.core to a new o.a.j.core.session package. As discussed on dev@, the rationale for this change is to be able to better manage the code paths to and from the internal state of each session.\n\n    cd jackrabbit-trunk/src/main/java/org/apache/jackrabbit/core\n    svn mkdir session\n    svn move AbstractNodeData.java session\n    svn move BatchedItemOperations.java session\n    svn move ItemData.java session\n    svn move ItemImpl.java session\n    svn move ItemLifeCycleListener.java session\n    svn move ItemManager.java session\n    svn move ItemValidator.java session\n    svn move LazyItemIterator.java session\n    svn move NodeData.java session\n    svn move NodeDataRef.java session\n    svn move NodeImpl.java session\n    svn move PropertyData.java session\n    svn move PropertyImpl.java session\n    svn move ProtectedItemModifier.java session\n    svn move SessionImpl.java session\n    svn move SessionListener.java session\n    svn move SystemSession.java session\n    svn move VersionManagerImpl.java session\n    svn move WorkspaceImpl.java session\n    svn move XASessionImpl.java session\n    svn move XAWorkspace.java session\n\nThe attached patch (session-class-move.patch) contains all the import statement changes and other minor refactorings required to make the trunk compile and pass all tests after the above moves.\n\nNote that the patch includes dummy child classes in org.apache.jackrabbit.core for the JCR implementation classes ItemImpl, NodeImpl, PropertyImpl, SessionImpl, VersionManagerImpl and WorkspaceImpl. These classes simply inherit the similarly named classes that were moved to o.a.j.core.session. The purpose of these classes is to maintain compatibility with client code that casts JCR objects to Jackrabbit implementation classes. Later on it may be a good idea to turn these classes into facades that access the underlying functionality in o.a.j.core.session after taking care of trivial operations like name/path parsing, etc.\n\nThis step is a purely structural refactoring, it does not introduce any functional changes in the code. All code outside o.a.j.core and o.a.j.core.session can be updated to reflect these changes simply by updating the relevant import statements. To make reviewing the patch easier, I've attached also a version without all the trivial package renames (session-class-move-rename.patch). Note that the new package boundary required changes to the visibility of a number of methods and classes. My plan is to refactor these cases so that we don't expose more of the Jackrabbit internals to client code.",
            "date": "2010-05-17T15:53:47.162+0000",
            "id": 8
        },
        {
            "author": "angela",
            "body": "my comments from a quick first glance at the patches:\n\nwhy is the package called 'session'? from your explanation on the dev list (\"[...] to move most of the session-related classes from o.a.j.core to \na new o.a.j.core.session package [...]\") i would have expected that this is related to either JCR API implementations in close relationship to \nthe Session or modifications on the Session level (aka transient modifications).\nbut now the patch moves classes that i wouldn't have expected to be affected based your explanation: BatchedItemOperations (purely workspace operations on the  item state level), ItemData and subclasses (really internal stuff) just to mention 2 of them. what was the design behind those moves?\n\nsecond i have strong concern regarding changing the visibility of so many classes and methods that i consider to be repository internals.\nmaking them all public feels really wrong to me.... what exactly do you mean by \"My plan is to refactor these cases so that we don't expose more of the Jackrabbit internals to client code.\"? if you plan major refactoring of other core classes not affected by the move, why not addressing this first before\nmoving classes that from my point of view don't belong to the target package?\n\n-1 for the current patch.",
            "date": "2010-05-18T10:37:39.979+0000",
            "id": 9
        },
        {
            "author": "Jukka Zitting",
            "body": "Thanks for the review!\n\n> why is the package called 'session'?\n\nPerhaps some other term than \"session\" would be clearer. The way I see the current Jackrabbit architecture (as muddy as it at times is), there are basically two main parts:\n\n1) \"repository\" part that consists of the global persisted state stored in persistence managers, node type registry, etc. This state is seen and shared by all clients that access the repository.\n\n2) \"session\" part that consist of the transient changes that have not yet been persisted. This part is private to each client. Note that I also consider things like immediately persisted workspace operations (imports, copies and moves, etc.) as part of the \"session\" layer up to the point when the relevant ChangeLog gets persisted. Thus I count also classes like BatchedItemOperations as part of this architectural layer.\n\nWould \"global\" and \"local\" be better terms? Note that I'd rather avoid labels like \"persisted\" and \"transient\" to prevent confusion with things like JCR-2051 (and since \"transient\" is a reserved word in Java).\n\nBasically, when I talk about \"session-related classes\" above, I mean code related to point 2 above.\n\n> visibility\n\nI was planning to move these classes first so I'd have a better picture of these package-private dependencies (as seen in session-class-move-norename.patch) before refactoring them away. Note that in most cases I expect these changes to be minor refactorings, like replacing a call to RepositoryImpl.getSomething() with an injected dependency. But yes, I can take care of this also before other changes.\n",
            "date": "2010-05-18T12:32:27.769+0000",
            "id": 10
        },
        {
            "author": "Stefan Guggisberg",
            "body": "i don't have a strong opinion regarding the suggested refactoring in general.\nif it enables a better tool support, that's ok with me.\n\nhowever, i do share angela's concerns regarding changing the visibility of\ninternal classes/methods. \n\nsince jukka said that he will address those concerns in another patch, \ni'll wait for the next patch.",
            "date": "2010-05-19T15:26:36.750+0000",
            "id": 11
        },
        {
            "author": "Jukka Zitting",
            "body": "See JCR-2640 for a proposed way (and initial patch) to get rid of the troublesome getters.",
            "date": "2010-05-25T13:11:37.534+0000",
            "id": 12
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "Hi Jukka,\nI saw your commits with the new SessionOperations.\nFirst good work but i want to let you know that the locking is only Thread based and we will\nget some problems in a xa environment on a applicationserver because the reentrant calls must not come from the same thread. I would prefere to handle now the whole locking semantic in our own classes to handle this behaviours in a global way.\nSee JCR-2089",
            "date": "2010-06-23T05:54:11.754+0000",
            "id": 13
        },
        {
            "author": "Jukka Zitting",
            "body": "The SessionOperation mechanism is meant to synchronize only session-related JCR API calls, so unlike with XA transactions there should never be a need for two threads to use the same lock concurrently. I'm using a java.util.concurrent lock instead of a synchronized block only to enable more accurate logging of potential concurrency problems.",
            "date": "2010-06-23T07:27:12.722+0000",
            "id": 14
        },
        {
            "author": "Jukka Zitting",
            "body": "I've now updated most of the public Session and Item (incl. Node and Property) method as well as search and versioning operations to use the new SessionOperation mechanism. This should cover the majority of normal use cases, and practically all cases where concurrent session access has caused problems in the past. Resolving as fixed.",
            "date": "2010-08-10T11:54:18.347+0000",
            "id": 15
        }
    ],
    "component": "jackrabbit-core",
    "description": "Even though the JCR specification does not make a statement about Sessions shared across a number of threads I think it would be great for many applications if we could state that sharing a read-only session is supported by Jackrabbit.\nOn many occasions in the mailing lists we stated that there should not be an issue with sharing a read-only session, however I think it has never been thoroughly tested or even specified as a \"design goal\".\n\nIf we can come to an agreement that this is desirable I think it would be great to start including testcases to validate that behaviour and update the documentation respectively.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-890",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "concurrent read-only access to a session",
    "systemSpecification": true,
    "version": ""
}