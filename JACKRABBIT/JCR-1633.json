{
    "comments": [
        {
            "author": "Roman Puchkovskiy",
            "body": "Attaching a full test case. It's a Maven project with one test method.",
            "date": "2008-05-30T15:38:13.701+0000",
            "id": 0
        },
        {
            "author": "Roman Puchkovskiy",
            "body": "Attaching a simplified test case.",
            "date": "2008-05-30T20:08:52.855+0000",
            "id": 1
        },
        {
            "author": "Alexander Klimetschek",
            "body": "Although the exception might not be specific hinting on the error, IMHO this is correct behaviour. A node can only be locked once it is saved: see JCR 1.0 spec (or javadocs), 8.4.11 Node.lock: \"An InvalidItemStateException  is thrown if this node has pending unsaved changes.\" In the context of transactions, validity checks and persistence moves from the save() method to the commit of the transaction.",
            "date": "2008-05-30T22:30:09.490+0000",
            "id": 2
        },
        {
            "author": "Roman Puchkovskiy",
            "body": "Node is actually saved (session.save() in one test, testRootNode.save() in the another). Yes, it's not _persisted_ immediately, but for the caller who is in this transaction this should look like as there's no any transaction. So I don't see what is incorrect here.\nFor instance, for versioning and checkin() there's same situation: you cannot checkin a node with unsaved changes, but node which was just created and saved still may be checked in in a transaction. Following test passes, while its only difference is that it uses checkin() instead of lock():\n\n    public void testCheckinInTx() throws Exception {\n        UserTransaction tx = new UserTransactionImpl(superuser);\n        tx.begin();\n        Node n = testRootNode.addNode(nodeName1);\n        n.addMixin(mixVersionable);\n        testRootNode.save();\n        n.checkin();\n        tx.commit();\n    }",
            "date": "2008-05-31T04:47:53.531+0000",
            "id": 3
        },
        {
            "author": "Jukka Zitting",
            "body": "See also the duplicate JCR-1702 that has an alternative patch and related commentary by Claus K\u00f6ll.",
            "date": "2008-09-17T12:00:02.732+0000",
            "id": 4
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "As Alexander wrote i give him partly right.  I understand the specification in that way that you can not lock a node till it has pending changes.\nIn the context of a transaction it is a little bit difference. I see the Transaction as a atomic operation so you should be able to lock a node after create and save in one transaction\nalthough the persistence moves to the commit of the transaction.\n\nI will provide a patch that handles this behaviour with some more tescases so we can see if it works as described in the specification.",
            "date": "2009-03-03T15:00:07.674+0000",
            "id": 5
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "Testcase testLockNewNode() now enabled and working ...",
            "date": "2009-05-07T10:14:33.512+0000",
            "id": 6
        },
        {
            "author": "Claus K\u00f6ll",
            "body": "resolved in 773483",
            "date": "2009-05-11T07:06:27.956+0000",
            "id": 7
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.x branch in revision 776761.",
            "date": "2009-05-20T16:49:24.318+0000",
            "id": 8
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged the fix further down to the 1.5 branch in revision 778775. This fix will be going out in Jackrabbit 1.5.6.",
            "date": "2009-05-26T15:54:17.732+0000",
            "id": 9
        }
    ],
    "component": "jackrabbit-core",
    "description": "Following code fails when executed inside an XA transaction:\n\nNode n = session.getRootNode().addNode(\"n\");\nn.addMixin(\"mix:lockable\");\nsession.save();\nLock lock = n.lock(false, false);\n\nStacktrace is\n\nCaused by: javax.transaction.xa.XAException\n\tat org.apache.jackrabbit.core.TransactionContext.prepare(TransactionContext.java:155)\n\tat org.apache.jackrabbit.core.XASessionImpl.commit(XASessionImpl.java:337)\n\tat org.apache.jackrabbit.jca.TransactionBoundXAResource.commit(TransactionBoundXAResource.java:39)\n\tat org.apache.geronimo.transaction.manager.WrapperNamedXAResource.commit(WrapperNamedXAResource.java:47)\n\tat org.apache.geronimo.transaction.manager.TransactionImpl.commit(TransactionImpl.java:301)\n\t... 32 more\nCaused by: org.apache.jackrabbit.core.TransactionException: Unable to update.\n\tat org.apache.jackrabbit.core.lock.XAEnvironment.prepare(XAEnvironment.java:275)\n\tat org.apache.jackrabbit.core.lock.XALockManager.prepare(XALockManager.java:245)\n\tat org.apache.jackrabbit.core.TransactionContext.prepare(TransactionContext.java:138)\n\t... 36 more\nCaused by: javax.jcr.ItemNotFoundException: failed to build path of 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5: 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5: 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5\n\tat org.apache.jackrabbit.core.HierarchyManagerImpl.getPath(HierarchyManagerImpl.java:407)\n\tat org.apache.jackrabbit.core.CachingHierarchyManager.getPath(CachingHierarchyManager.java:272)\n\tat org.apache.jackrabbit.core.lock.LockManagerImpl.getPath(LockManagerImpl.java:651)\n\tat org.apache.jackrabbit.core.lock.LockManagerImpl.internalLock(LockManagerImpl.java:276)\n\tat org.apache.jackrabbit.core.lock.XAEnvironment$LockInfo.update(XAEnvironment.java:409)\n\tat org.apache.jackrabbit.core.lock.XAEnvironment.prepare(XAEnvironment.java:273)\n\t... 38 more\nCaused by: org.apache.jackrabbit.core.state.NoSuchItemStateException: 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5\n\tat org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(SessionItemStateManager.java:189)\n\tat org.apache.jackrabbit.core.HierarchyManagerImpl.getItemState(HierarchyManagerImpl.java:188)\n\tat org.apache.jackrabbit.core.HierarchyManagerImpl.getPath(HierarchyManagerImpl.java:402)\n\t... 43 more\n\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1633",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "When node is created and locked in same transaction, exception is thrown",
    "systemSpecification": true,
    "version": "core 1.4.3"
}