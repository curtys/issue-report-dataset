{
    "comments": [
        {
            "author": "Jukka Zitting",
            "body": "Tagged for 1.1",
            "date": "2006-01-11T18:06:56.000+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "All text filter implementations now use a lazy reader which is initialized when a lucene document is added to the index. Text filtering has been moved into this initialization block and is therefore delayed until really needed.\n\nThe following sequence will not cause text filtering anymore:\n- add nt:resource\n- save\n- remove nt:resource\n- save\n\nThe following sequence will cause text filtering before the query can be executed:\n- add nt:resource\n- save\n- execute query (-> will trigger text filtering on nt:resource)\n- remove nt:resource\n- save\n\nPlease note that this fix is backward compatible with the Jackrabbit 1.0 release. You may use a build with revision 392211of jackrabbit-index-filters with jackrabbit-core-1.0.\n\nFixed in revision: 392211",
            "date": "2006-04-07T16:50:04.000+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged for 1.0.1 in revision 409517.",
            "date": "2006-05-26T07:23:01.000+0000",
            "id": 2
        }
    ],
    "component": "indexing",
    "description": "If you want to add a PDF document to a repository using a PdfTextFilter, and you do the following steps:\n\nsession.save()\nnode.checkin();\n\nThe method PdfTextFilter.doFilter() gets called 4 times!!!\n\nsession's save method calls doFilter one time. This is normal\n\nBut checkin method calls doFilter three times. Is this normal? I do not see the sense.\n\n------------------\n\n\t\t\nMarcel Reutegger \t\n<marcel.reutegger@gmx.net> to jackrabbit-dev\n\t More options\t  11:43 am (13 minutes ago)\nHi Martin,\n\nthis is unfortunate and should be improved. the reason why this happens\nis the following:\nthe search index implementation always indexes a node as a whole to\nimprove query performance. that means even if a single property changes\nthe parent node with all its properties is re-indexed.\n\nunfortunately the checkin method sets properties in three separate\n'transactions', causing the search to re-index the according node three\ntimes.\n\nusually this is not an issue, because the index implementation keeps a\nbuffer for pending index work. that is, if you change the same property\nseveral times and save after each setProperty() call, it won't actually\nget re-indexed several times. but text filters behave differently here,\nbecause they extract the text even though the text will never be used.\n\neventually this will improve without any change to the search index\nimplementation, because as soon as versioning participates properly in\ntransactions there will only be one call to index a node on checkin().\n\nas a quick fix we could improve the text filter classes to only parse\nthe binary when the returned reader is acutally used.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-264",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "TextFilters get called three times within checkin() method",
    "systemSpecification": true,
    "version": ""
}