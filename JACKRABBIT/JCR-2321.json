{
    "comments": [
        {
            "author": "Alexander Klimetschek",
            "body": "Added patch for the 1.4 branch that fixed the problem for me.\n\n(In theory, this patch should work on the 1.5 and 1.6 branches as well)",
            "date": "2009-09-23T18:09:36.326+0000",
            "id": 0
        },
        {
            "author": "Alexander Klimetschek",
            "body": "Added patch for the trunk (as the code is using generics there, it required a different patch). Didn't test that one as I couldn't find a way to trigger the issue.",
            "date": "2009-09-23T18:12:45.787+0000",
            "id": 1
        },
        {
            "author": "Stefan Guggisberg",
            "body": "+1 for the patch, thanks!",
            "date": "2009-09-24T10:30:02.745+0000",
            "id": 2
        },
        {
            "author": "Alexander Klimetschek",
            "body": "Fixed in revision 820337 in the trunk for 2.0. As this is less critical, there is no need to backport it to the 1.4, 1.5 or 1.6 branches.",
            "date": "2009-09-30T16:34:52.837+0000",
            "id": 3
        }
    ],
    "component": "jackrabbit-core",
    "description": "The ZombieHierarchyManager currently implements the two getChildNodeEntry methods like this:\n\n1) look up child node in old, overlayed state, which might contain removed child nodes\n2) if not found, ask the super implementation (ie. get the child node from the up-to-date list)\n\nThe purpose of the ZombieHM is to be able to return removed item ids from the attic. However, the behavior above is IMO wrong, as it should first find an existing child node with the given name (or id):\n\n1) look up child node in super implementation (ie. get the child node from the up-to-date list)\n2) if not found, look in the old, overlayed state if it might have been removed\n\nI was able to reproduce this issue when replacing a node (but note the custom access manager in 1.4.x used as explained below): create /replaced/subnode structure, save the session, remove the replaced node and add /replaced and then /replaced/subnode again:\n\n        Node rootNode = session.getRootNode();\n        \n        // 1. create structure /replaced/subnode\n        Node test = rootNode.addNode(\"replaced\", NT);\n        test.addNode(\"subnode\", NT);\n        // 2. persist changes\n        session.save();\n\n        // 3. remove node and recreate it\n        test.remove();\n        test = rootNode.addNode(\"replaced\", NT);\n        \n        // 4. create previous child with same name\n        test.addNode(\"subnode\", NT);\n        \n        // 5. => gives exception\n        test.getNode(\"subnode\").getNodes();\n\nTo complicate things further, this was only triggered by a custom access manager, and all based upon Jackrabbit 1.4.x. Back then (pre-1.5 and new security stuff era), the access manager would get a ZombieHM as its hierarchy manager. If its implementation called resolvePath() on the HM for checking read-access in the final getNodes() call, where the tree will be traversed using the getChildNdeEntry(NodeState, Name, int) method, it would get the old node id and hence fail if it would try to retrieve it from the real item state manager.\n\nThus with a Jackrabbit >= 1.5 and 2.0 the above code will work fine, because the ZombieHM is not used.\n\nHowever, we might want to fix it for 1.4.x and also check the other uses of the ZombieHM in the current trunk, which I couldn't test. These are (explicit and implicit): ChangeLogBasedHierarchyMgr, SessionItemStateManager.getDescendantTransientItemStates(NodeId), ItemImpl.validateTransientItems(Iterable<ItemState>, Iterable<ItemState>) and SessionItemStateManager.getDescendantTransientItemStatesInAttic(NodeId).\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2321",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "ZombieHierarchyManager can return wrong child node entries for replaced nodes",
    "systemSpecification": true,
    "version": "core 1.4.11, 1.5.7, 1.6, 2.0-beta1"
}