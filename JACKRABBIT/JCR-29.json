{
    "comments": [
        {
            "author": "Tobias Bocanegra",
            "body": "yes, this i'm aware to this problem...",
            "date": "2004-12-14T13:30:34.000+0000",
            "id": 0
        },
        {
            "author": "Tobias Bocanegra",
            "body": "should be fast and more scaleable since last reorganization of versioning (r123112)",
            "date": "2004-12-28T14:12:38.000+0000",
            "id": 1
        },
        {
            "author": "Stefan Guggisberg",
            "body": "closing resolved issue",
            "date": "2005-11-11T01:41:55.000+0000",
            "id": 2
        }
    ],
    "component": "",
    "description": "With increasing repository content (and versions), the time to create new nodes increases. For example with around 6500 nodes and 33500 properties, it takes around 3 seconds (!) to just add one single node !\n\nWhen attaching to the application with a Debugger and delibaretly suspending the VM, this stack trace is displayed all the times :\n\n   [ changing internals of access List iterator ]\n   PersistentNodeState(NodeState).getChildNodeEntries(String) line: 362\n   PersistentNode.getName() line: 84\n   PersistentVersionManager.getVersion(String) line: 278\n   VersionManager.getVersion(String) line: 304\n   VersionItemStateProvider.getNodeState(NodeId) line: 124\n   VersionItemStateProvider.hasPropertyState(PropertyId) line: 154\n   VersionItemStateProvider.hasItemState(ItemId) line: 174\n   SessionItemStateManager.getItemState(ItemId) line: 246\n   ItemManager.createItemInstance(ItemId) line: 563\n   ItemManager.getItem(ItemId) line: 332\n   NodeImpl.getProperty(QName) line: 876\n   NodeImpl.hasProperty(QName) line: 893\n   NodeImpl.safeIsCheckedOut() line: 2515\n   NodeImpl.internalAddChildNode(QName, NodeTypeImpl, String) line: 527\n   NodeImpl.internalAddNode(String, NodeTypeImpl, String) line: 475\n   NodeImpl.internalAddNode(String, NodeTypeImpl) line: 436\n   NodeImpl.addNode(String, String) line: 1145\n   ...\n\nIt seems, that virtual item state providers are asked for whatever property is looked for and this in return calls into the version handler, which loops over some child entries (currently around 1100 entries) to find one single entry with a given UUID.\n\nBesides the latter not being optimal and certainly not scaling, the former has its problems in its own right.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-29",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "BUG",
    "priority": "Blocker",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Node.addNode() does not scale with increasing content",
    "systemSpecification": true,
    "version": ""
}