{
    "comments": [
        {
            "author": "Charles Brooking",
            "body": "I think Jackrabbit tries to do too much when it comes to node types. See the similar issue I submitted three months ago: the description is confusing to read (and it was hard to write) because of all the magic that happens in NodeImpl.\n\nThe simplest approach, IMHO, is to view node types as assertions - and to only check the constraints asserted by node types when nodes are saved. Keep node types totally separate from data, and make it the users responsibility to add/remove nodes/properties when they change types. This way there are never any surprises.",
            "date": "2009-06-07T08:46:31.090+0000",
            "id": 0
        },
        {
            "author": "Stefan Guggisberg",
            "body": "changed issue type/priority;\n\nnot a bug since the existing implementation is spec-compliant.",
            "date": "2009-06-07T13:07:03.999+0000",
            "id": 1
        },
        {
            "author": "Stefan Guggisberg",
            "body": "although this issue is similar to JCR-2011, it's not a 'Duplicate'. resolving this issue does not necessarily resolve JCR-2011.",
            "date": "2009-06-07T13:12:53.093+0000",
            "id": 2
        },
        {
            "author": "Stefan Guggisberg",
            "body": "fixed in r783412",
            "date": "2009-06-10T16:13:46.484+0000",
            "id": 3
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.x branch in revision 791794.",
            "date": "2009-07-07T11:15:18.087+0000",
            "id": 4
        }
    ],
    "component": "jackrabbit-core",
    "description": "assume you define a mixin like:\n\n[test] mix\n- aprop (string)\n+ anode (nt:base)\n\nand you add this mixin to a nt:unstructured and add 'anode' and set 'aprop'.\nthen a subsequent node.removeMixin(\"test\") will also remove 'anode' and 'aprop' although they are valid by the definition of nt:unstructured.\n\nimo, the items should only be removed if they become invalid by the definition of the resulting effective node type.\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2130",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Node.removeMixin() should not remove valid items",
    "systemSpecification": true,
    "version": "0.9, 1.0, 1.0.1, 1.1, 1.1.1, 1.2.1, 1.2.2, 1.2.3, 1.3, 1.3.1, 1.3.3, 1.3.4, 1.4, core 1.4.1, core 1.4.2, core 1.4.3, core 1.4.4, core 1.4.5, core 1.4.6, core 1.4.8, core 1.4.7, core 1.4.9, 1.5, 1.5.2, 1.5.3, 1.5.4, 1.5.5"
}