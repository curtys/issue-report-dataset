{
    "comments": [
        {
            "author": "Jukka Zitting",
            "body": "Fixed in revision 919458.",
            "date": "2010-03-05T15:51:51.594+0000",
            "id": 0
        },
        {
            "author": "Andrey Adamovich",
            "body": "+1 we experienced this problem as well",
            "date": "2010-03-08T02:40:41.881+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Marcel and Thomas noted that moving the synchronization from the cache to the SISM instance may just relocate the problem. I think that this decoupling between itemExists() and getItem() should still help, but will set up a test case to verify the actual gains.",
            "date": "2010-03-08T09:30:50.726+0000",
            "id": 2
        },
        {
            "author": "Jukka Zitting",
            "body": "In revision 929506 I narrowed down the synchronization in getNonVirtualItemState to only cover the loading of new items in cases where a cache miss has occurred. Concurrent threads will now be able to continue accessing items in the cache while new items\nare being loaded from the persistence manager.",
            "date": "2010-03-31T12:46:30.679+0000",
            "id": 3
        },
        {
            "author": "nihongye",
            "body": "ItemStateReferenceCache is thread safe,for JMM happen-before rule:\n\n// put it in cache\ncache.cache(state);\n// set parent container\nstate.setContainer(this);\n\nthe statments must be revert:\n\nstate.setContainer(this);\ncache.cache(state);",
            "date": "2010-06-27T08:20:43.061+0000",
            "id": 4
        },
        {
            "author": "Tom Quellenberg",
            "body": "Please find attached a patch for the 1.6 branch",
            "date": "2010-10-01T06:57:39.782+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "Thanks! I committed the patch to the 1.6 branch in revision 1005043.",
            "date": "2010-10-06T14:00:28.492+0000",
            "id": 6
        }
    ],
    "component": "jackrabbit-core",
    "description": "The SharedItemStateManager.getNonVirtualItemState() method contains a loadItemState() call within a \"synchronized (cache)\" block. This prevents all item state cache access while a new item is being loaded from the persistence manager. I have at least one case where this has caused a serious performance drop, essentially synchronizing repository access for all readers.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-2546",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "SISM blocks the item state cache when loading a new item",
    "systemSpecification": true,
    "version": ""
}