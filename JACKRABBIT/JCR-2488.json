{
    "comments": [
        {
            "author": "angela",
            "body": "not sure if i like this idea. it's the behavior of this ACLProvider that the entries inherited from the parent nodes\nare respected.\nhowever, i'm currently working on the performance of ac evaluation and i planned to moved the collection of effective ACEs to a top level class. i could easily add means so you can provide your own collector that doesn't walk up the hierarchy.",
            "date": "2010-02-09T07:46:58.959+0000",
            "id": 0
        },
        {
            "author": "Weston Bustraan",
            "body": "Here's my use case for this behavior:\n\nI have a structure that looks something like this:\n\n/SomeFolder/AnotherFolder/DocTemplate/PrivateItem\n\nUsers need to have jcr:read access to navigate down to the DocTemplate node. Using the template, they then create instance nodes underneath it. However, these nodes (PrivateItem) can potentially contain confidential information, such as sensitive medical information governed by HIPAA laws, so the nodes need to be able to be locked down to only the person who created it and any people they've granted permission to.\n\nIn the current ACL system, PrivateItem will inherit the jcr:read permissions of all the nodes above it, making it virtually impossible to secure the item. Potentially, I *could* add individual DENY ACEs to the PrivateItem that negate all the permissions inherited from the ancestors, but if someone added a new ACE to an ancestor after the fact, then suddenly an unauthorized person could have access. (Other suggestions of how to solve this issue using the current system are welcome.)\n\nMy suggestion would be to add a flag like \"rep:noInherit\" (or something) to rep:ACL that would prevent inheritance only when the property is present. This would allow the default behavior and only prevent inheritance when explicitly set. Doing it like this would not require existing installations to change or do anything different.\n\nThere is a concept almost identical to this in the Windows NTFS filesystem. I'll attach a screenshot of the flag I'm referring to.\n\nHowever, if you decide that this isn't something that would be beneficial to the Jackrabbit user base as a whole, I'm OK with the ability to subclass the ACE collector and alter the behavior. As it stands now, that's how I'm accomplishing this; but it's an ugly hack requiring me to locate my subclass in the {{org.apache.jackrabbit.core.security.authorization.acl}} package in order to make use of the {{ACLTemplate}} class.\n\nDo you know how soon custom collectors functionality might be available?\n\n",
            "date": "2010-02-09T14:31:53.799+0000",
            "id": 1
        },
        {
            "author": "angela",
            "body": "> Do you know how soon custom collectors functionality might be available? \n\ni'll try to get it into jackrabbit 2.2.\n\nregarding your proposal: i'm currently evaluating whether we could add restrictions to the resource-based acl similar to the\nrestrictions present in the principal-based in order to limit the scope of items in the subtree that are affected. if this turns out to \nbe feasible, we may also allow to limit the scope of the acl to the resource it is applied to, which i guess would match your requirement. i have no concrete ideas yet, but just wanted to let you know.",
            "date": "2010-03-09T08:52:23.170+0000",
            "id": 2
        },
        {
            "author": "angela",
            "body": "this should now be possible using the restriction added by JCR-2700. ",
            "date": "2010-08-10T10:22:17.634+0000",
            "id": 3
        }
    ],
    "component": "security",
    "description": "The current ACL implementation will walk the tree from the item being accessed, up to the root, collecting ACL entries for all the ancestors. With this system, there is no easy way to restrict access to subnodes except by adding DENY entries to negate the entries inherited from the parent nodes.\n\nI'd like to request a way to turn this behavior off either at a node level or global level.\n\nThe place where recursion is happening is in org.apache.jackrabbit.core.security.authorization.acl.ACLProvider$Entries.collectEntries(NodeImpl node). Inside this method, it could perhaps check a global parameter or the existence of property of the ACL policy node to determine whether to recurse up the tree.",
    "hasPatch": false,
    "hasScreenshot": true,
    "id": "JCR-2488",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Add the ability to disable inheriting ancestor ACLs",
    "systemSpecification": true,
    "version": "2.0"
}