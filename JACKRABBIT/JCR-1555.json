{
    "comments": [
        {
            "author": "Michael D\u00fcrig",
            "body": "Suggested path. Includes test cases for the new methods",
            "date": "2008-04-25T15:07:06.814+0000",
            "id": 0
        },
        {
            "author": "angela",
            "body": "regarding the patch: \nisn't Boolean#parseBoolean(String)  a new method added with 1.5? if this is true, i think we should avoid it since as far as i know we never dropped the support for 1.4.\n\ngeneral:\ni know that we discussed that at least once in the past and for reasons i don't remember thought\nthe method would not be needed... but apparently the question arises on a regular basis (included me asking julian). if adding the method solves that, i am in favor of the extension.\n\njulian/marcel, do you remember what exactly we decided in the past and why?",
            "date": "2008-04-25T15:23:40.520+0000",
            "id": 1
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Updated patch without dependency on Java 1.5",
            "date": "2008-04-28T08:22:32.441+0000",
            "id": 2
        },
        {
            "author": "Marcel Reutegger",
            "body": "I don't remember exactly, but I guess we wanted to keep the interface as simple as possible.",
            "date": "2008-05-07T10:08:30.232+0000",
            "id": 3
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Sure, but I think this is a source of confusion. And it is not consistent with the rest of the api. After all one could also create longs, dates and all other types from a string. ",
            "date": "2008-05-07T10:21:15.506+0000",
            "id": 4
        },
        {
            "author": "Julian Reschke",
            "body": "The difference is that for Boolean, no real parsing is required.\n",
            "date": "2008-05-07T11:38:26.087+0000",
            "id": 5
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "Yes but from the api consumer's perspective this is an implementation detail. ",
            "date": "2008-05-07T11:56:58.613+0000",
            "id": 6
        },
        {
            "author": "angela",
            "body": "so... can we reach consensus here? i don't have a strong feeling.\n\nif the missing method is source for confusion and we feel that i would not do any\nharm we should probably add it, shouldn't we?",
            "date": "2008-05-08T09:58:29.685+0000",
            "id": 7
        },
        {
            "author": "Julian Reschke",
            "body": "I personally do not really care. If Mchael really wants it, let's add it :-)\n\nThat being said, we are just in the process of removing fluff elsewhere, where the rational is to keep the API minimal. It seems adding the methods discussed here is contrary to that goal :-)\n",
            "date": "2008-05-08T12:24:09.173+0000",
            "id": 8
        },
        {
            "author": "Jukka Zitting",
            "body": "How about if we only added the method to QValueFactoryImpl in spi-commons? An SPI implementation (that AFAIUI is the main use case behind this request) can use the implementation classes directly.",
            "date": "2008-05-08T12:34:31.522+0000",
            "id": 9
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "I dont think adding the method to QValueFactoryImpl will fix the issue. People will still look at the interface and wonder how to create a boolean. ",
            "date": "2008-05-13T08:36:19.613+0000",
            "id": 10
        },
        {
            "author": "Thomas Mueller",
            "body": "> How about if we only added the method to QValueFactoryImpl in spi-commons?\n\nWhy?\n\n+1 for JCR-1555(2).patch as is.\n\n",
            "date": "2008-05-13T08:55:28.128+0000",
            "id": 11
        },
        {
            "author": "angela",
            "body": "julian: \n\n> I personally do not really care. If Mchael really wants it, let's add it :-) \n\nok.\n\n> That being said, we are just in the process of removing fluff elsewhere, where the rational \n> is to keep the API minimal. It seems adding the methods discussed here is contrary to \n> that goal :-) \n\n... maybe. but with respect to keep the API minimal we only had creation from String\ninitially... so... we already compromised and extended the QValue/Factory here. adding\nthe extra methods for the boolean property type somehow is a logic consequence, isn't it?\ni remember that i was wondering once, why it is missing.\n\njukka:\n\n> How about if we only added the method to QValueFactoryImpl in spi-commons? \n> An SPI implementation can use the implementation classes directly. \n\nno... i am not in favour of this.\nadding the method to the interfaces is rather a question of consistency and maybe it is\ncosmetics only. it would be convenient to have it, but not having it isn't a problem.\n\nso. let's come to a conclusion.\n\n> michi, thomas are in favour of the patch.\n> julian wouldn't object if michi wants the method but added a concern.\n\nis there anybody that does object?\notherwise i would add the patch (and in addition replace the QValueFactory.create(string, int) to the new method where the type represents PropertyType.Boolean... there is one or two places...\n\nangela\n\n",
            "date": "2008-05-13T09:13:55.184+0000",
            "id": 12
        },
        {
            "author": "Marcel Reutegger",
            "body": "I'm +1 on adding the methods for boolean properties, but would rather not create a new QValueImpl instance on each call. See attached patch.",
            "date": "2008-05-13T09:40:17.991+0000",
            "id": 13
        },
        {
            "author": "Michael D\u00fcrig",
            "body": "+1 for Marcel's patch",
            "date": "2008-05-13T09:44:03.903+0000",
            "id": 14
        },
        {
            "author": "angela",
            "body": "committed marcels patch at revision 656637.\n\nin addition adjusted\n- BooleanConstraintTest\n- ValueFormat\n- ValueFactoryQImpl\nto use the QValueFactory.create(boolean) method.\n\nand modified QValueFactoryImpl.create(String, int) to return the boolean-type\nconstants.\n",
            "date": "2008-05-15T12:54:26.591+0000",
            "id": 15
        }
    ],
    "component": "jackrabbit-spi, jackrabbit-spi-commons",
    "description": "I suggest to add support for reading and writing boolean values to QValue and QValueFactory. I find it strange that there is such support for the other data types but booleans must be constructed via strings. ",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1555",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Add support for boolean values to QValue",
    "systemSpecification": true,
    "version": ""
}