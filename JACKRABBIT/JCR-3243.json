{
    "comments": [
        {
            "author": "Mete Atamel",
            "body": "Here's the proposed fix with the least amount of changes I could come up with. I basically tried to eliminate Type enum and use String instead whenever I could.",
            "date": "2012-02-23T15:30:51.082+0000",
            "id": 0
        },
        {
            "author": "Mete Atamel",
            "body": "Patch attached.",
            "date": "2012-02-23T15:31:53.961+0000",
            "id": 1
        },
        {
            "author": "Mete Atamel",
            "body": "A slightly improved version of the patch",
            "date": "2012-02-24T13:04:23.975+0000",
            "id": 2
        },
        {
            "author": "Mete Atamel",
            "body": "One last minor tweak to the patch.",
            "date": "2012-02-27T16:14:35.387+0000",
            "id": 3
        },
        {
            "author": "Alex Deparvu",
            "body": "Good work Mete!\n\nThere is still something I believe the patch did not address yet: RepositoryStatisticsImpl implements Iterable.\nThis contract implies that if I call #iterator() I'll get back all the existing entries.\nI would expect that if I define a custom entry, it should still be returned in the #iterator() call, otherwise some consumers of the api will not be able to see all the existing TimeSeries.\n\nAnother minor issue is a method in the RepositoryStatisticsImpl: private Type getType(String type)\nI think this would be better located in the Type enum, as RepositoryStatisticsImpl doesn't really need to deal with identifying a Type by its name.\n\nI find it interesting that there are no unit tests in the patch. One test case could very well be the #iterator() problem described earlier.",
            "date": "2012-03-02T15:33:10.145+0000",
            "id": 4
        },
        {
            "author": "Mete Atamel",
            "body": "Thanks for the feedback. Regarding getType method, yes, definitely, it makes more sense as a static method on Type enum. Regarding the iterator though, I'm not sure how to solve that, that's why I kind of left it the way it is. The problem is that the returned iterator has the following signature: \"Entry<Type, TimeSeries>\". As you know, with the changes, now we can have String as type and I cannot return those String based types from this iterator. I can change the iterator's signature to \"Entry<String, TimeSeries>\" and that would enable me to return all the entries but then I'd be changing a public method. So, I'm not sure which one is worse: return some of the values from the iterator or change a public method.  ",
            "date": "2012-03-02T15:56:11.031+0000",
            "id": 5
        },
        {
            "author": "Alex Deparvu",
            "body": "> So, I'm not sure which one is worse: return some of the values from the iterator or change a public method.\nI'd definitely choose correctness :)\n\nIn my view if this patch goes into jr, it should not introduce unexpected behavior.",
            "date": "2012-03-02T16:30:51.751+0000",
            "id": 6
        },
        {
            "author": "Mete Atamel",
            "body": "The final patch that includes suggestions from Alex and a JUnit test for the iterator.",
            "date": "2012-03-03T16:14:56.840+0000",
            "id": 7
        },
        {
            "author": "Mete Atamel",
            "body": "Can I have someone review and apply this patch please?",
            "date": "2012-03-12T10:21:17.789+0000",
            "id": 8
        },
        {
            "author": "Jukka Zitting",
            "body": "+1 Looks good to me.\n\nRegarding \"RepositoryStatisticsImpl implements Iterable\"; since that's only in jackrabbit-core, I'd consider it an implementation detail that we can change without problems if there's a reason to do so. Only the interfaces in jackrabbit-api need to remain strictly backwards-compatible.",
            "date": "2012-03-12T10:28:35.500+0000",
            "id": 9
        },
        {
            "author": "Marcel Reutegger",
            "body": "Latest patch looks good.\n\nApplied it in revision 1299655.\n\nI also added a TestAll suite to include it the test run.",
            "date": "2012-03-12T12:56:35.222+0000",
            "id": 10
        }
    ],
    "component": "jackrabbit-api, jackrabbit-core",
    "description": "Right now, Jackrabbit reports TimeSeries for things like BUNDLE_READ_COUNTER, BUNDLE_WRITE_COUNTER, etc. but there is no way to extend Jackrabbit and report TimeSeries for additional properties. That's because the type of TimeSeries are defined in RepositoryStatistics class as Type enum. Enums in Java cannot be extended which limits to TimeSeries to the Types defined in RepositoryStatistics. \n\nI suggest that RepositoryStatistics is improved to allow additional TimeSeries. One approach is to define an additional RepositoryStatistics#getType(String) method. ",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-3243",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "RepositoryStatistics should be more flexible",
    "systemSpecification": true,
    "version": ""
}