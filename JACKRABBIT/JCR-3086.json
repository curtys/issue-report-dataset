{
    "comments": [
        {
            "author": "Julian Reschke",
            "body": "Proposed patch that moves the \"fix legacy\" code part out of init(), so it can't cause the recursion.",
            "date": "2011-09-29T12:05:39.346+0000",
            "id": 0
        },
        {
            "author": "Julian Reschke",
            "body": "Fixed with r1177340",
            "date": "2011-09-29T15:53:02.757+0000",
            "id": 1
        },
        {
            "author": "Julian Reschke",
            "body": "Fixed in 2.2 with r1177557.",
            "date": "2011-09-30T10:52:03.635+0000",
            "id": 2
        }
    ],
    "component": "jackrabbit-core",
    "description": "There's an infinite loop waiting to happen when the underlying persisted version storage is defect:\n\n{noformat}\nat\norg.apache.jackrabbit.core.version.InternalVersionImpl.getSuccessors(InternalVersionImpl.java:148)\n\nat\norg.apache.jackrabbit.core.version.InternalVersionHistoryImpl.init(InternalVersionHistoryImpl.java:165)\n\nat\norg.apache.jackrabbit.core.version.InternalVersionHistoryImpl.reload(InternalVersionHistoryImpl.java:180)\n\nat\norg.apache.jackrabbit.core.version.InternalVersionHistoryImpl.getVersion(InternalVersionHistoryImpl.java:299) \n{noformat}\n\n(line numbers from 2.2)\n\nWhat happens here is that when a version can not be instantiated, reload() is called, which in turn calls init(), which, as part of piece of code labeled \"fix legacy\" will call getSuccessors(), which in turn wants to instantiate versions.\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-3086",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "potential infinite loop around InternalVersionImpl.getSuccessors",
    "systemSpecification": true,
    "version": ""
}