{
    "comments": [
        {
            "author": "Vincent Gigu\u00e8re",
            "body": "Hi, \n\nI have coded a new class called: BeanReferenceMapConverterImpl which allows for the conversion of java.util.Map of beans stored as references.\n\nIt pretty much works the same way as the converter for collections of references with the following distinction:\n\nSince the key to the map can NOT be stored on the referenced node (because it is potentially referenced multiple time), \nThe key needs to be part of the relation stored on the collection node.\n\nI chose the following approach: \nI encode both the key and the uuid of the referenced bean in a Value of PropertyType (PropertyType.REFERENCE)\nWhen reloading nodes, both the uuid and the keys are decoded and the map is reconstituted in the ManageableMapImpl.\n\nI do not have credentials to submit code, so, I will attach it to this issue.\n\nThere is a unit test that validates the following: \n- Map of referenced nodes are persisted and reloaded properly\n- Map can persist and restore same node reference under various keys\n- Multiple nodes can reference the same reference node with different keys\n- Converter removes deleted nodes when updating\n- Converter adds new nodes wen updating\n- Converter can simultaneously remove and add new references\n\nIMPORTANT:\nFor the unit test to work, you need to modify the test model : \n\norg.apache.jackrabbit.ocm.testmodel.collection.Main must now have: \n\n@Collection(collectionConverter = BeanReferenceMapConverterImpl.class)\nprivate Map<String, A> referenceMap = new HashMap<String, A>();\nwith getter and setter...\n\n\nNOTE: Make sure that you import org.apache.jackrabbit.ocm.testmodel.uuid.A (not the other A that does not contain a uuid)\n\nRegards,\n\nVincent Gigu\u00e8re",
            "date": "2008-06-10T20:29:59.505+0000",
            "id": 0
        },
        {
            "author": "Vincent Gigu\u00e8re",
            "body": "Unit test for the BeanReferenceMapConverterImpl class",
            "date": "2008-06-10T20:31:25.048+0000",
            "id": 1
        },
        {
            "author": "Vincent Gigu\u00e8re",
            "body": "Unit test for the MapReferenceValueEncoder",
            "date": "2008-06-10T20:31:56.658+0000",
            "id": 2
        },
        {
            "author": "Vincent Gigu\u00e8re",
            "body": "Mapper for Maps of References",
            "date": "2008-06-10T20:32:39.039+0000",
            "id": 3
        },
        {
            "author": "Vincent Gigu\u00e8re",
            "body": "Map key - uuid encoder...",
            "date": "2008-06-10T20:33:09.746+0000",
            "id": 4
        },
        {
            "author": "Christophe Lombart",
            "body": "I am working now on this issue but I got small compile errors. I will fix them.\nIt should be nice to send us a patch instead of new or modified java classes. By this way, we can add new features quickly.  Thanks \n",
            "date": "2008-09-21T08:26:39.275+0000",
            "id": 5
        },
        {
            "author": "Christophe Lombart",
            "body": "The patch has been applied. The unit tests are working. I modified  the test content class \"Main\" otherwise it doesn't compile.\nLet me know if something is wrong. Thanks ",
            "date": "2008-09-22T19:30:00.733+0000",
            "id": 6
        },
        {
            "author": "Vincent Gigu\u00e8re",
            "body": "Hi, \n\nEverything seems to be fine.\n\nHowever, I was wondering if you would have a better idea on how to implement the BeanReferenceMapConverter. I find that my solution is a bit of a hack.\n\nWhen persisting a map of reference, we must save the key in the map and the UUID of the referenced node. But, since there are no implementation of javax.jcr.Value that offer the possibility to store 2 strings (the key and the UUID), I was left with encoding the 2 inside a String:\n\nvalue=\"MAPKEY:*keyInTheMapMAPVALUE:adjklq3e-rcq45f-4g3579-4fsd-345fsd\"\n\nIs there a better way of storing 2 strings as a value in the node?\nIf no, are you comfortable with this approach?\n\n\n",
            "date": "2008-09-23T14:24:27.023+0000",
            "id": 7
        },
        {
            "author": "Christophe Lombart",
            "body": "I'm agree with you but I don't see another solution based on a multi value property. \nAnother solution is to use  subnodes instead of a multivalue prop. Those subnodes can match to each element in the map. in each subnode, we can have a prop for the key (or use the subnode name)  and another property for the reference value\n\nIt is also a bit of hack due to the fact that is not possible to store a map of prop in a JCR node. \n",
            "date": "2008-09-23T14:40:54.456+0000",
            "id": 8
        }
    ],
    "component": "jackrabbit-ocm",
    "description": "OCM should support the mapping of maps of referenced beans.\n\n@Collection(collectionConverter= BeanReferenceCollectionConverterImpl.class)\nprivate java.util.Map<String, ReferencedBean> aMap;\n\nBeanReferenceCollectionConverterImpl (mainly the method doGetCollection) needs to be updated to support the interface ManageableMap interface.\n",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1645",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Add support for Map of referenced beans",
    "systemSpecification": true,
    "version": ""
}