{
    "comments": [
        {
            "author": "Tobias Bocanegra",
            "body": "well, some of those groups are rather interfaces that provide a backend service, and are not usefull for the 'client'. so i would devide:\n\nClient Interface:\n- NodeType stuff\n\nService Provider Interface\n- PersistenceManager \n- FileSystem \n- AccessManager \n- QueryHandler \n- TextFilter \n",
            "date": "2006-01-27T01:39:39.000+0000",
            "id": 0
        },
        {
            "author": "Jukka Zitting",
            "body": "> well, some of those groups are rather interfaces that provide a backend service, and are not usefull for the 'client'\n\nAgreed, that's what I was trying to convey with \"component API\". You are right that SPI is a better term for those interfaces.\n\nPerhaps we should create o.a.j.api for the JCR API extensions and o.a.j.spi for the component interfaces.",
            "date": "2006-01-27T01:57:15.000+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Attached a patch for creating public interfaces for RepositoryImpl.shutdown() and WorkspaceImpl.createWorkspace(String). Does this look OK? If so, I'll go ahead and commit it.\n\nI also investigated the options for doing the same to node type registration. Exposing the current NodeTypeManagerImpl.getNodeTypeRegistry().registerNodeTypes(Collection) method will require also the *Def interfaces (optionally also the *DefImpl classes) to be exposed. This will also bring a dependency to the QName class. Is it OK to expose so much (essentially promising that they will not change much before Jackrabbit 2.0) or should we create an alternative like NodeTypeManagerImpl.registerNodeTypes(InputStream)?",
            "date": "2006-01-31T17:57:49.000+0000",
            "id": 2
        },
        {
            "author": "Stefan Guggisberg",
            "body": "> Attached a patch for creating public interfaces for RepositoryImpl.shutdown() \n> and WorkspaceImpl.createWorkspace(String). Does this look OK? If so, I'll go \n> ahead and commit it. \n\n+1\n\nmaybe we should add an optional Properties argument to the createWorkspace signatur.\n\n> ... or should we create an alternative like NodeTypeManagerImpl.registerNodeTypes(InputStream)?\n\ni prefer NodeTypeManagerImpl.registerNodeTypes(InputStream)",
            "date": "2006-01-31T18:11:06.000+0000",
            "id": 3
        },
        {
            "author": "Tobias Bocanegra",
            "body": "if find NodeTypeManagerImpl.registerNodeTypes(InputStream) very useless. since clients would need to fake XML in order to create the node types.\ni suggest to elaborate NodeType stuff for 2.0 and then expose this api.",
            "date": "2006-01-31T18:28:09.000+0000",
            "id": 4
        },
        {
            "author": "Felix Meschberger",
            "body": "While I tend to agree with Tobias that it would probably be better to have the item definition classes available for the casual use, it would probably also be usefull to be able to just register node types from pre-canned xml files.\n\nImagine a repository application which requires a set of node types. The definitions would be distributed in the form of XML - or better yet the new CND - format and could just be registered by handing a stream to the respective file.\n\nIMHO, the InputStream solution is not the best of all solutions, but it is still far better than nothing.",
            "date": "2006-01-31T18:46:34.000+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "Stefan:\n> maybe we should add an optional Properties argument to the createWorkspace signatur. \n\nWhat should it do? The current WorkspaceImpl.createWorkspace signature doesn't have it so we'd need to specify how the given properties will be interpreted and implement that interpretation.\n\nWe can add JackrabbitWorkspace.createWorkspace(String,Properties) without breaking backwards compatibility also later during the 1.x cycle. I suggest that we do so only when the given properties are actually used.\n\nFelix:\n> IMHO, the InputStream solution is not the best of all solutions, but it is still far better than nothing.\n\nAgreed. We must have at least one officially supported node type registration mechanism in 1.0. The InputStream solution covers at least the basic use case without exposing too much of the Jackrabbit internals.\n\nA more integrated tool can always use the internal Jackrabbit interfaces directly to get more control over the registration process, but there would be no guarantees of backwards compatibility for such clients.",
            "date": "2006-01-31T19:52:40.000+0000",
            "id": 6
        },
        {
            "author": "Tobias Bocanegra",
            "body": "ok. lets add the register nodetype. but i would prefer an 'org.xml.sax.InputSource' instead of the input stream. and maybe an additional content type:\n\npublic NodeType[] NodeTypeManagerImpl.registerNodeTypes(InputSource in, String contentType);\n\ncontentType is either: text/xml or text/cnd\n\nthe advantage of the inputsource is: it has a systemId that can be used to resolve entities (eg: relatvie DVDs), and also for better error reporting.\n\n",
            "date": "2006-01-31T21:25:52.000+0000",
            "id": 7
        },
        {
            "author": "Jukka Zitting",
            "body": "InputSource makes little sense to non-XML data like the CND. How about the following?\n\n    /** Registers node types from the given node type XML stream. */\n    NodeType[] registerNodeTypes(InputSource in) throws ...;\n\n    /** Registers node types from the given input stream of the given type. */\n    NodeType[] registerNodeTypes(InputStream in, String contentType) throws ...;\n\n    // Constants for the supported content types\n    String XML = \"text/xml\";\n    String CND = \"text/x-jcr-cnd\";\n\n(The implementation should also support application/xml as the XML content type.)",
            "date": "2006-01-31T21:44:48.000+0000",
            "id": 8
        },
        {
            "author": "Jukka Zitting",
            "body": "Added the o.a.j.api.JackrabbitNodeTypeManager extension interface in revision 378211. The new API methods are implemented quite simplistically using the existing NodeTypeReader and NodeTypeRegistry methods. Currently only text/xml (and application/xml) are supported, we can add support for CND when the CND parser is promoted from contrib.\n\nTogether with previous commits this should cover the major JCR extensions in Jackrabbit, so I'm resolving this issue as Fixed. Please file a new issue if other public extensions are needed.",
            "date": "2006-02-16T19:06:24.000+0000",
            "id": 9
        }
    ],
    "component": "JCR API",
    "description": "To better document and track the public JCR extensions and component API provided by Jackrabbit and to allow more room for refactoring within the Jackrabbit core, we shoud move (or create) the supported API interfaces to a new org.apache.jackrabbit.api package.\n\nAt least the following interfaces should be moved along with any supporting implementation-independent classes:\n\n    * PersistenceManager\n    * FileSystem\n    * AccessManager\n    * QueryHandler\n    * TextFilter\n\nPossible dependencies to implementation-specific classes should preferably be abstracted using extra interfaces.\n\nAlso the workspace and node type administration methods should be published as Jackrabbit-specific extensions to the JCR API interfaces.\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-309",
    "issuetypeClassified": "REFACTORING",
    "issuetypeTracker": "OTHER",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Extract the public API interfaces from o.a.j.core to o.a.j.api",
    "systemSpecification": false,
    "version": ""
}