{
    "comments": [
        {
            "author": "Stefan Guggisberg",
            "body": "the FileSystem interface is somehow 'under-specified', it doesn't specify e.g. how to handle non-existing intermediate folders in above example.\n\nthe currently existing other FileSystem implementations (local and db-based) silently create non-existing intermediate folders (just like java.io.File#mkdirs() does).\n\ni'd suggest to mimic this behavior in MemoryFileSystem rather than throwing an exception.\n\nBTW: patches are welcome ;-)  ",
            "date": "2008-03-10T16:38:45.577+0000",
            "id": 0
        },
        {
            "author": "Martijn Hendriks",
            "body": "Fixed in revision: 653417\n",
            "date": "2008-05-05T10:41:54.570+0000",
            "id": 1
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.4 branch in revision 661637.",
            "date": "2008-05-30T10:31:09.040+0000",
            "id": 2
        }
    ],
    "component": "jackrabbit-core",
    "description": "It seems there can be a problem with the move method of the MemoryFileSystem class: when looking at its code it looks that it can accept destinations, specifying folders that do not exist in the file system.\nFor example, if there is a \"somefolder/somefile\" file and I call the method passing, say \"somefolder/someotherfolder/somefile\" as the destination. The destination will be accepted by the code even if \"somefolder/someotherfolder\" is not an existing folder and the function execution will result in a file having the \"somefolder/someotherfolder/somefile\" path within a file system having no \"somefolder/someotherfolder\" folder - the code should probably check whether the destination path is really a valid one. Such  validation could be performed , for example, in the following way: take all path elements from the destination path except the last one and insure that the resulting path points to an existing folder, throw an exception otherwise.\nCurrently I have no JackRabbit build/test environment set up and could not verify practically whether the issue described can really take place, the supposition is made after looking at the move method implementation.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1450",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Trivial",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "move method of the MemoryFileSystem may accept invalid destination path resulting in invalid entries in FS",
    "systemSpecification": true,
    "version": "1.4, core 1.4.1, core 1.4.2, core 1.4.3, core 1.4.4"
}