{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "Added o.a.j.commons.query.GQL in revision: 681049.\n\nSee JavaDoc for documentation on how to use it and the exact syntax.\n\nAdded integration test for GQL in jackrabbit-core, svn revision: 681054.",
            "date": "2008-07-30T14:06:23.583+0000",
            "id": 0
        },
        {
            "author": "Paco Avila",
            "body": "The GQL.execute() returns a RowIterator and would be nice to return a QueryResult, so I can make a result.getColumnNames() to get the returned column names. Or perhaps better, make public the method which translates the GQL query to XPath so I can pass it to the QueryManager and execute it.",
            "date": "2010-03-01T21:17:59.435+0000",
            "id": 1
        },
        {
            "author": "Paco Avila",
            "body": "Another option is to handle these kind of queries internally making possible to run it as:\n\nqueryManager.createQuery(statement, type);\n\nWhere \"type\" could be \"gql\" in this case, and the statement a GQL query.",
            "date": "2010-03-01T21:20:04.564+0000",
            "id": 2
        },
        {
            "author": "johann sorel",
            "body": "\"GQL\" has no relation with JCR. it is just a candidate amoung several others  (like Common Query Language or Contextual Query Language) to write a query.\nSee : http://www.loc.gov/standards/sru/specs/cql.html\n\nCQL and GQL are not part of the JCR, and having the \"Google\" name in it does give it any rights to live in the JCR common module.\nIf you need another query language I suggest you add it in a different module,\nthis way you won't force everyone to have it if they don't want it.\n\nSome of my projects rely on the jcr-commun module and  I hope it will remain dedicated to \"pure\" JCR.",
            "date": "2010-03-01T21:52:48.114+0000",
            "id": 3
        },
        {
            "author": "Paco Avila",
            "body": "GQL is already in jcr-commons, so the purity is broken.\n\nAnyway, my principal problem is that I can paginate the result of GQL, because the optimized method seems to be:\n\n((QueryImpl) query).setLimit(limit);\n((QueryImpl) query).setOffset(offset);\n\nand it return a RowIterator. ",
            "date": "2010-03-02T08:50:42.955+0000",
            "id": 4
        },
        {
            "author": "johann sorel",
            "body": "\"GQL is already in jcr-commons, so the purity is broken. \"\nSo there is an issue here. is it too late to move it out ?\n\n\"Anyway, my principal problem is that I can ...\"\nIt looks like it's no big deal for you, it's a matter of modularity. \nwhat's the purpose of making maven module if you don't split things properly ?",
            "date": "2010-03-02T11:22:39.388+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "Please don't use an already closed issue for discussion. If you want to suggest changes, file a new issue with perhaps a reference to this earlier issue.",
            "date": "2010-03-02T11:42:32.986+0000",
            "id": 6
        },
        {
            "author": "Paco Avila",
            "body": "Sorry, I have created a new issue at JCR-2526, so we can move the discussion there.",
            "date": "2010-03-02T12:01:54.256+0000",
            "id": 7
        }
    ],
    "component": "jackrabbit-jcr-commons",
    "description": "In the Sling project there's a need for a simple query language. See SLING-573.\n\nI've created a parser that translates the simple query into an XPath query statement and executes it on a JCR workspace.\n\nI'll commit it to the jackrabbit-jcr-commons module.",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-1697",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Simple Google style query",
    "systemSpecification": true,
    "version": ""
}