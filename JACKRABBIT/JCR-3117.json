{
    "comments": [
        {
            "author": "Alex Deparvu",
            "body": "attached proposed patch",
            "date": "2011-10-17T15:20:33.385+0000",
            "id": 0
        },
        {
            "author": "Stefan Guggisberg",
            "body": "patch looks good, thanks!",
            "date": "2011-10-19T07:57:46.753+0000",
            "id": 1
        },
        {
            "author": "Alex Deparvu",
            "body": "Fixed in revision 1186195.",
            "date": "2011-10-19T13:27:41.042+0000",
            "id": 2
        },
        {
            "author": "Jukka Zitting",
            "body": "Wouldn't it be easier to just use the AtomicLong counters from the TimeSeries mechanism? That way we wouldn't have to add new interfaces and implementations for each piece of statistics we want to collect?",
            "date": "2011-10-20T09:00:42.985+0000",
            "id": 3
        },
        {
            "author": "Alex Deparvu",
            "body": "Hi Jukka,\n\ncan you be a bit more specific? I'm not sure what you want to replace with the TimeSeries:\n\n> Statistics for the PersistenceManager impl that cover: \n>  - bundle cache access count, \n>  - bundle cache miss count, \n>  - bundle cache miss avg duration (this avg includes the penalty of having to load from the underlying storage / can be interpreted as avg read latency as there is no cache involved) \n>  - bundle writes per second \n\nOut of all the stats provided here, I'd say the 'bundle writes per second' fall into the TimeSeries scope. And there, I don't mind replacing the mechanism. \nAs for the rest: \n - the 2 counts are just incremental operations on AtomicLong, I don't really see the added value in using TS; \n - the 'cache miss avg duration' : AFAIK the TS impl does not do averages currently, if it will, I'm open for using it.\n",
            "date": "2011-10-20T09:23:58.331+0000",
            "id": 4
        },
        {
            "author": "Jukka Zitting",
            "body": "The proposed patch switches the PM stats to use the TimeSeries mechanism. This replaces 222 lines of code with just 63, while increasing the amount of collected information.",
            "date": "2011-10-20T09:25:40.625+0000",
            "id": 5
        },
        {
            "author": "Jukka Zitting",
            "body": "> the 2 counts are just incremental operations on AtomicLong, I don't really see the added value in using TS;\n\nThere's two main benefits: 1) we get a full time series of the collected values, and 2) we don't need the extra interface or custom code for accessing this piece of information.\n\n> the 'cache miss avg duration' : AFAIK the TS impl does not do averages currently, if it will, I'm open for using it.\n\nThe average duration is easily calculated by dividing total duration by count per second. It's not currently supported by the TS implementation, but will be easy enough to add.",
            "date": "2011-10-20T09:34:44.367+0000",
            "id": 6
        },
        {
            "author": "Alex Deparvu",
            "body": "> This replaces 222 lines of code with just 63\nthe purpose of saving all these lines is lost on me.\n\n+1 on the patch",
            "date": "2011-10-20T09:38:11.522+0000",
            "id": 7
        },
        {
            "author": "Alex Deparvu",
            "body": "reopening to reconsider new patches",
            "date": "2011-10-20T09:39:08.962+0000",
            "id": 8
        },
        {
            "author": "Jukka Zitting",
            "body": "I added also average time series in revision 1188678.",
            "date": "2011-10-25T15:03:34.393+0000",
            "id": 9
        }
    ],
    "component": "jackrabbit-core",
    "description": "Statistics for the PersistenceManager impl that cover: \n - bundle cache access count, \n - bundle cache miss count, \n - bundle cache miss avg duration (this avg includes the penalty of having to load from the underlying storage / can be interpreted as avg read latency as there is no cache involved) \n - bundle writes per second\n\nWhat it doesn't cover is :\n - number of bundles\n - size of workspace\nas these are values that are expensive to compute on demand, and caching them would imply being able to store the values (which is not possible currently).",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-3117",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Stats for the PersistenceManager",
    "systemSpecification": true,
    "version": ""
}