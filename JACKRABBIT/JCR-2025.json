{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "Proposed patch.",
            "date": "2009-03-16T18:02:37.600+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "Applied patch to trunk in revision: 756432",
            "date": "2009-03-20T12:34:33.504+0000",
            "id": 1
        },
        {
            "author": "Marcel Reutegger",
            "body": "Committed missing class JackrabbitTermQuery in revision: 756445",
            "date": "2009-03-20T13:16:57.357+0000",
            "id": 2
        }
    ],
    "component": "jackrabbit-core",
    "description": "There are a number of bottlenecks that prevent scalability of concurrent queries:\n\n- Fake norms are created repeatedly because a new SearchIndex$CombinedIndexReader is created for each query. This prevents caching of fake norms on the level of the CombinedIndexReader. Creating fake norms for index readers that span multiple sub reader is inefficient and should be avoided. Like with other Jackrabbit specific queries, there should be one for TermQuery, which is aware of sub readers. Its weight should then create one scorer for each sub reader. This effectively reuses the fake norms on the sub reader.\n\n- There should be a  UUID cache that maps document number to UUID. This is basically the inverse of the existing DocNumberCache. UUID lookup is regularly a bottleneck in the SegmentReader where the method document() is synchronized and does I/O.\n\n- Queries often contain constraints that limit the result to nodes with a certain flag set to a literal. These constraints should be cached in the query handler.",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2025",
    "issuetypeClassified": "IMPROVEMENT",
    "issuetypeTracker": "IMPROVEMENT",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Optimize concurrent queries",
    "systemSpecification": true,
    "version": ""
}