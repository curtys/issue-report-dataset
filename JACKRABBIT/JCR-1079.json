{
    "comments": [
        {
            "author": "Ard Schrijvers",
            "body": "Suggested configuration gives complication for implementation:\n\nSince I need to be able to know which analyzer to use based *only* on the the string representation (JCR-style name) of the given property, I can only set an analyzer for a certain property for the entire workspace, and not based on a single index-rule. \n\nThis means that if I use \n\n<index-rule nodeType=\"nt:unstructured\">\n       <property analyzer=\"fr\">myNs:bode_fr</property>\n       <property analyzer=\"de\">myNs:bode_de</property>\n</index-rule>\n\nthat the analyzer for property myNs:bode_fr is set for the entire workspace for all other index-rule's as well. \n\nTherefore, I would like to suggest to add the properties to index with a certain analyzer to the analyzer configuration, so \n\n<analyzer name=\"fr\" class=\"org.apache.lucene.analysis.fr.FrenchAnalyzer\">\n    <property>myNs:bode_fr</property>\n   <property>myNs:intro_fr</property>\n</analyzer> \n\nThis means, nothing changes to the index configuration apart from an analyzer xml block, where workspace global analyzers for certain properties are defined. WDOT?  \n\n",
            "date": "2007-08-27T13:02:01.011+0000",
            "id": 0
        },
        {
            "author": "Marcel Reutegger",
            "body": "That's OK with me, but I think being able to configure an analyzer in an index rule also seems useful to me.",
            "date": "2007-08-28T09:34:04.654+0000",
            "id": 1
        },
        {
            "author": "Ard Schrijvers",
            "body": "> That's OK with me, but I think being able to configure an analyzer in an index rule also seems useful to me.\n\nThat is fine with me, but we do have to realize, that I cannot make a distinction between setting it for a property in a single \"index-rule\" or setting it global like I did describe it. It is because when analyzing or when parsing some query for a field, all I know in the analyzer is the  the string representation (JCR-style name) of the given property. \n\nIf that is fine with you I will add this configuration option and write documentation about it.",
            "date": "2007-08-28T09:45:41.938+0000",
            "id": 2
        },
        {
            "author": "Ard Schrijvers",
            "body": "I have implemented the first part, without enabling configuration of an analyzer in a index rule (because of the implication that it ends up being global, though if wanted, can add it. Let me know). Current configuration looks for example like:\n\n<analyzers> \n        <analyzer class=\"org.apache.lucene.analysis.fr.FrenchAnalyzer\">\n            <property>test:fr_mytext</property>\n            <property>test:fr_body</property>\n        </analyzer>\n        <analyzer class=\"org.apache.lucene.analysis.de.GermanAnalyzer\">\n            <property>test:de_mytext</property>\n            <property>test:de_body</property>\n        </analyzer>\n        <analyzer class=\"org.apache.lucene.analysis.nl.DutchAnalyzer\">\n            <property>test:nl_mytext</property>\n            <property>test:nl_body</property>\n        </analyzer>\n</analyzers>\n\nNow, I want to add some tests showing the possible confusing difference in search results between a property and a node scope search. The only problem is that untill now, I do not see a indexing_configuration.xml in the jackrabbit trunk.  I do see a indexing-configuration-1.0.dtd only.\n\nIs it possible add some tests with respect to some indexing_configuration.xml? It might be a problem that the indexing_configuration.xml holds for all the tests regarding the workspace then, or not? Has anybody an idea how to add some tests for the indexing_configuration.xml? \n\n",
            "date": "2007-08-29T08:33:10.510+0000",
            "id": 3
        },
        {
            "author": "Marcel Reutegger",
            "body": "The DTD is indeed the only file we have. There is no example, except for the wiki page here:\nhttp://wiki.apache.org/jackrabbit/IndexingConfiguration\n\nFor testing you can create a new workspace under jackrabbit-core/applications/test/workspaces. We already have two workspaces, which are used for the JCR tests. Just create a folder, put a workspace.xml and an indexing_configuration.xml in there. You also might have to adapt the build script, otherwise it probably remove the files again when you call: mvn clean.",
            "date": "2007-08-31T13:14:19.463+0000",
            "id": 4
        },
        {
            "author": "Ard Schrijvers",
            "body": ">For testing you can create a new workspace under jackrabbit-core/applications/test/workspaces. We already have two workspaces, which >are used for the JCR tests. Just create a folder, put a workspace.xml and an indexing_configuration.xml in there. You also might have to >adapt the build script, otherwise it probably remove the files again when you call: mvn clean.\n\nI already did this, so testing for me is not a problem. What I was referring to, was to have it available in unit tests in trunk, so people can play with it. But, then, this configuration xml is applied to all the other unit tests. \n\nAnyway, I'll create a patch for the working configurable properties analyzers monday, and add a indexing_configuration.xml that can be used for testing. \n\nDo you still want me to add the possibility for defining an analyzer in an indexing-rule (though defining an analyzer in an indexing-rule for a property will imply that this analyzer is also used for this property outside the specific indexing-rule)?",
            "date": "2007-08-31T13:30:00.326+0000",
            "id": 5
        },
        {
            "author": "Marcel Reutegger",
            "body": "> Do you still want me to add the possibility for defining an analyzer in an indexing-rule (though defining an analyzer in an indexing-rule\n> for a property will imply that this analyzer is also used for this property outside the specific indexing-rule)?\n\nno, I think it's better to have it symmetric. If they can only be used globally then you should only be allowed to configure them globally.",
            "date": "2007-08-31T15:21:49.828+0000",
            "id": 6
        },
        {
            "author": "Ard Schrijvers",
            "body": ">no, I think it's better to have it symmetric. If they can only be used globally then you should only be allowed to configure them globally.\n\nAlso IMO this is best, because it might be very confusing. The reason why it can be only globally configured is in the tokenStream part of the analyzer:\n\npublic TokenStream tokenStream(String fieldName, Reader reader) {\n\nThis one is used for indexing *and* parsing for searching, and the only thing I can distinguish on is the String fieldName (string representation of the QName). There is no way to know which indexing-rule it holds for, hence, the global configuration. \n\n",
            "date": "2007-09-03T07:19:03.779+0000",
            "id": 7
        },
        {
            "author": "Ard Schrijvers",
            "body": "patch against jackrabbit-core rev 571494. \n\nTo use the configurable analyzer per property:\n\nin workspace.xml in <SearchIndex> add\n\n<param name=\"indexingConfiguration\" value=\"applications\\indexing_configuration.xml\"/>\n\nAnd in indexing_configuration, add something like:\n\n<analyzers> \n        <analyzer class=\"org.apache.lucene.analysis.StopAnalyzer\">\n            <property>mytext</property>\n        </analyzer>\n        <analyzer class=\"org.apache.lucene.analysis.WhitespaceAnalyzer\">\n            <property>mytext2</property>\n        </analyzer>\n </analyzers> \n\nif you want to use org.apache.lucene.analysis.fr.FrenchAnalyzer or org.apache.lucene.analysis.de.GermanAnalyzer, etc, make sure you add the lucene-analyzers.jar\n",
            "date": "2007-09-04T09:00:18.428+0000",
            "id": 8
        },
        {
            "author": "Ard Schrijvers",
            "body": "If this patch is applied (or before) I want to add some documentation to http://wiki.apache.org/jackrabbit/IndexingConfiguration to explain how the analyzer configuration works, and what behavior is to be expected. What is the best way to do this? \n\nCan I create a profile myself to edit the wiki? ",
            "date": "2007-09-04T09:04:28.411+0000",
            "id": 9
        },
        {
            "author": "Marcel Reutegger",
            "body": "Thanks a lot for the patch Ard, looks quite good. Just some minor issues:\n\n- There's a System.out in AnalyzerImpl.tokenStream\n- Can you please move AnalyzerImpl to a top level class and maybe rename it to JackrabbitAnalyzer\n- Change the type of SearchIndex.analyzer to match the concrete class, this makes the cast redundant.\n\n> If this patch is applied (or before) I want to add some documentation to http://wiki.apache.org/jackrabbit/IndexingConfiguration\n> to explain how the analyzer configuration works, and what behavior is to be expected. What is the best way to do this?\n\ngo to http://wiki.apache.org/jackrabbit/IndexingConfiguration and add a section about the analyzers ;)\n\n> Can I create a profile myself to edit the wiki?\n\nyes, you can create one here: http://wiki.apache.org/jackrabbit/UserPreferences",
            "date": "2007-09-05T09:20:20.151+0000",
            "id": 10
        },
        {
            "author": "Ard Schrijvers",
            "body": "> - There's a System.out in AnalyzerImpl.tokenStream\n> - Can you please move AnalyzerImpl to a top level class and maybe rename it to JackrabbitAnalyzer\n> - Change the type of SearchIndex.analyzer to match the concrete class, this makes the cast redundant. \n\nAaarrggh, how stupid of mine  to have a System.out, again! I am sorry, I'll check check double check in the future :-)\n\nI am not in the office today, so will create a patch with your suggestions tomorrow and edit the wiki. Thanks for reviewing",
            "date": "2007-09-05T09:27:35.889+0000",
            "id": 11
        },
        {
            "author": "Ard Schrijvers",
            "body": "done:\n\n> - There's a System.out in AnalyzerImpl.tokenStream\n> - Can you please move AnalyzerImpl to a top level class and maybe rename it to JackrabbitAnalyzer\n> - Change the type of SearchIndex.analyzer to match the concrete class, this makes the cast redundant. \n\nIf the patch is ok/applied I'll update http://wiki.apache.org/jackrabbit/IndexingConfiguration.\n\n",
            "date": "2007-09-06T10:11:27.567+0000",
            "id": 12
        },
        {
            "author": "Marcel Reutegger",
            "body": "Applied the patch in revision: 573526.\n\nThanks a lot for the patch and your good work.",
            "date": "2007-09-07T10:10:13.810+0000",
            "id": 13
        },
        {
            "author": "Ard Schrijvers",
            "body": "Thanks. I'll update the http://wiki.apache.org/jackrabbit/IndexingConfiguration later today.\n\n",
            "date": "2007-09-07T10:29:45.213+0000",
            "id": 14
        }
    ],
    "component": "indexing, jackrabbit-core",
    "description": "To the indexing_configuration.xml a xml block of analyzers should be configurable. In each <index-rule> to a property an analyzer can be assigned. This means, that property will be analyzed with that specific analyzer. In the first place, it enables multilingual indexing. \n\nDocumentation needs to be added explaining the difference in searching in the node scope [jcr:contains(.,'foo')] and in some property [jcr:contains(@myprop,'foo')]. The node scope will always be searched and indexed with the default analyzer, which can be configured in the workspace.xml in  the  <SearchIndex> element.\n\nBelow a possible indexing_configuration.xml snippet is shown. Also node the possible enhancement (not sure wether this implementation will have it, because it requires a lot of filter Factories and is probably out of scope). Adding custom filters which do not need a factory might be easier.\n\n<analyzers>\n\t<analyzer name=\"fr\" class=\"org.apache.lucene.analysis.fr.FrenchAnalyzer\"/>\n\t<analyzer name=\"de\" class=\"org.apache.lucene.analysis.de.GermanAnalyzer\"/>\n        <analyzer name=\"compound\" class=\"org.apache.lucene.analysis.SimpleAnalyzer\">\n             <filter class=\"jr.StopFilterFactory\" words=\"stopwords.txt\"/>\n             <filter class=\"jr.EdgeNGramTokenizerFactory\" side=\"front\" minGram=\"1\" maxGram=\"2\"/>\n        </analyzer>\n</analyzers>\n\n<index-rule nodeType=\"nt:unstructured\">\n       <property analyzer=\"fr\">bode_fr</property>\n       <property analyzer=\"de\">bode_de</property>\n</index-rule>",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-1079",
    "issuetypeClassified": "RFE",
    "issuetypeTracker": "RFE",
    "priority": "Minor",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Extend the IndexingConfiguration to allow configuration of reuseable analyzers",
    "systemSpecification": true,
    "version": ""
}