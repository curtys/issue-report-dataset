{
    "comments": [
        {
            "author": "Marcel Reutegger",
            "body": "When you say it happens when you run a test, does that mean you have a test case that allows you to reliable (even if it is just 1 out of 10 runs) reproduce this error? Can you please attach the test class? Thank you.",
            "date": "2007-03-09T13:48:52.372+0000",
            "id": 0
        },
        {
            "author": "Michael Neale",
            "body": "OK looking a little deeper, the problem stems from:\n\n    public Lock makeLock(final String name) {\n        final File lockFile = new File(directory, name);\n        return new Lock() {\n            public boolean obtain() throws IOException {\n                if (DISABLE_LOCKS) {\n                    return true;\n                }\n                return lockFile.createNewFile();\n            }\n\nIn FSDirectory in jackrabbit core. IT seems that it is using an empty file as a lock, yet when you look at JRE source for createNewFile, it EXPLICITLY says not to use this for file locking: \n     * Note: this method should <i>not</i> be used for file-locking, as\n     * the resulting protocol cannot be made to work reliably. The \n     * {@link java.nio.channels.FileLock FileLock}\n     * facility should be used instead. \n\nSo this is a problem I believe. \n",
            "date": "2007-04-22T11:59:54.775+0000",
            "id": 1
        },
        {
            "author": "Michael Neale",
            "body": "started reworking the locking to use NIO, but there is a problem:\n\nrepository/repository/index/_27/write.lock (No such file or directory)\nstuff like that occurs when a lock is requested for a directory that does not exist.",
            "date": "2007-04-22T12:44:13.887+0000",
            "id": 2
        },
        {
            "author": "Michael Neale",
            "body": "ok the problem isn't just with locking Per-se - thats only part. \n\nEven when locking is disabled, the index reader tries to access stuff that just isn't there: \n\njava.io.FileNotFoundException: /home/michael/projects/jboss-rules/drools-repository/repository/repository/index/_42/segments (No such file or directory)\n\tat java.io.RandomAccessFile.open(Native Method)\n\tat java.io.RandomAccessFile.<init>(RandomAccessFile.java:212)\n\tat org.apache.lucene.store.FSIndexInput$Descriptor.<init>(FSDirectory.java:430)\n\tat org.apache.lucene.store.FSIndexInput.<init>(FSDirectory.java:439)\n\tat org.apache.lucene.store.FSDirectory.openInput(FSDirectory.java:329)\n\tat org.apache.jackrabbit.core.query.lucene.FSDirectory.openInput(FSDirectory.java:209)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:45)\n\tat org.apache.lucene.index.IndexReader$1.doBody(IndexReader.java:146)\n\tat org.apache.lucene.store.Lock$With.run(Lock.java:99)\n\tat org.apache.lucene.index.IndexReader.open(IndexReader.java:141)\n\tat org.apache.lucene.index.IndexReader.open(IndexReader.java:136)\n\tat org.apache.jackrabbit.core.query.lucene.AbstractIndex.getReadOnlyIndexReader(AbstractIndex.java:191)\n\tat org.apache.jackrabbit.core.query.lucene.MultiIndex.getIndexReader(MultiIndex.java:616)\n\tat org.apache.jackrabbit.core.query.lucene.SearchIndex.executeQuery(SearchIndex.java:384)\n\tat org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.executeQuery(LazyQueryResultImpl.java:204)\n\tat org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.getResults(LazyQueryResultImpl.java:244)\n\tat org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.<init>(LazyQueryResultImpl.java:161)\n\tat org.apache.jackrabbit.core.query.lucene.QueryImpl.execute(QueryImpl.java:164)\n\tat org.apache.jackrabbit.core.query.QueryImpl.execute(QueryImpl.java:142)\n\tat org.drools.repository.RulesRepository.findAssetsByName(RulesRepository.java:968)\n\tat org.drools.repository.RulesRepository.findAssetsByName(RulesRepository.java:980)\n\tat org.drools.repository.RulesRepositoryTest.testFindRulesByName(RulesRepositoryTest.java:87)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:585)\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:118)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)",
            "date": "2007-04-23T00:39:13.921+0000",
            "id": 3
        },
        {
            "author": "Michael Neale",
            "body": "OK here is a project to reproduce - probably more longer winded then it strictly needs to be, but its hard to know what it causing it.\n\nHow to reproduce (any platform, and it included JR 1.2.2 and a version of LazyQueryResultImpl to print out a stack trace):\n\nUnzip, import into eclipse (has project files), open RulesRepositoryTest.java, run test. Repeat up to 10 or 20 times, and you should see a failre every now and then.\n\nIt seems to be looking for an index directory that does NOT exist - if you remove indexing, it will still fail as it looks for a content item that does not exist.\n\nNote, this creates the database each time (and the first time sets up node type definitions) - by wiping it clean, thats the only thing slightly unusual about this.",
            "date": "2007-04-23T09:27:32.892+0000",
            "id": 4
        },
        {
            "author": "Michael Neale",
            "body": "OK, another thing to try: download http://www.users.on.net/~michaelneale/work/jackrabbit-JCR-778.-corrupt-index-or-data.zip\nand import into eclipse etc.. .run - it will fail immediately. It is a repository in the busted state *after* the index error occurs (you can see its the index subsystem failing every time).\n\n",
            "date": "2007-04-24T00:16:00.345+0000",
            "id": 5
        },
        {
            "author": "Michael Neale",
            "body": "ok this also happens with 1.3 - only in 1.3 its not logging an exception (even worse)  - just not returning results on a query.",
            "date": "2007-04-24T05:38:41.814+0000",
            "id": 6
        },
        {
            "author": "Michael Neale",
            "body": "A simpler way to reproduce: \n    public void testIt() throws Exception {\n        Repository repo = new TransientRepository();\n        Session sess = repo.login(new SimpleCredentials(\"foo\", \"password\".toCharArray()));\n        Node root = sess.getRootNode();\n        \n        for (int i = 0; i < 10; i++) {\n            root.addNode( \"\" + i + System.currentTimeMillis(), \"nt:unstructured\" );\n            sess.save();\n        }\n        \n        \n        Query q = sess.getWorkspace().getQueryManager().createQuery( \"select * from nt:unstructured\", Query.SQL);\n        QueryResult qr = q.execute();\n        NodeIterator ni = qr.getNodes();\n        \n        assertTrue(ni.hasNext());\n        assertNotNull(ni.next());\n        assertNotNull(ni.next());\n        assertNotNull(ni.next());\n        \n//        sess.logout();\n        \n    }\n\nI am just trying out to see if not closing the session can cause this. Take a lot of iterations to reproduce it.",
            "date": "2007-04-24T10:07:46.184+0000",
            "id": 7
        },
        {
            "author": "Marcel Reutegger",
            "body": "Does it also happen when you close the session? If not then this supports my assumption that the error is caused by a combination of repeated cycles of not shutting down jackrabbit and a bug in the index recovery code which is executed when jackrabbit is started up again.",
            "date": "2007-04-25T08:16:00.358+0000",
            "id": 8
        },
        {
            "author": "Marcel Reutegger",
            "body": "The problem was caused by index replace actions in the redo log created by the index merger. This also explains why it does not happen after every test restart, but only after a number of index segments have been created that trigger the index merger. With the default values this happens after 10 segments exist. Hence, the error occurs when the test case is restarted the 11th time.\n\nThe index recovery also replayed the index replacement, which finally resulted in a corrupt index.\n\nFixed in revision: 533080",
            "date": "2007-04-27T12:40:40.544+0000",
            "id": 9
        },
        {
            "author": "Michael Neale",
            "body": "awesome work, nicely done. ",
            "date": "2007-04-28T00:24:22.806+0000",
            "id": 10
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.3 branch in revision 544247.",
            "date": "2007-06-04T20:24:54.063+0000",
            "id": 11
        }
    ],
    "component": "indexing",
    "description": "About 1 in ten times, I get the error as shown in the stack trace below. This happens when I run test, or when I start the app. The only way to resolve (when testing) seems to be to blow away the repository. \n\nIt always happens at the point the query manager is accessed (triggering the query subsystem to start up). It DOES NOT cause an exception to be thrown back to the caller, I just noticed it in the logs. Basically the queries return NO data at all (and show up as test failures of course). \n\nIn each case when I startup the system/test, if the repository exists I use it, and (for tests) clean it by deleting the root node of the user content, and then starting again, otherwise there is nothing that exciting.\n\nPlease let me know if more info is needed.\n\n\nERROR 05-03 15:54:39,386 (LazyQueryResultImpl.java:getResults:266)  -Exception while executing query:\njava.io.IOException : No such file or directory\n    at java.io.UnixFileSystem.createFileExclusively(Native Method)\n    at java.io.File.createNewFile(File.java:850)\n    at org.apache.jackrabbit.core.query.lucene.FSDirectory$1.obtain( FSDirectory.java:119)\n    at org.apache.lucene.store.Lock.obtain(Lock.java:51)\n    at org.apache.lucene.store.Lock$With.run(Lock.java:98)\n    at org.apache.lucene.index.IndexReader.open(IndexReader.java:141)\n    at org.apache.lucene.index.IndexReader.open(IndexReader.java:136)\n    at org.apache.jackrabbit.core.query.lucene.AbstractIndex.getReadOnlyIndexReader(AbstractIndex.java:191)\n    at org.apache.jackrabbit.core.query.lucene.MultiIndex.getIndexReader (MultiIndex.java:616)\n    at org.apache.jackrabbit.core.query.lucene.SearchIndex.executeQuery(SearchIndex.java:384)\n    at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.executeQuery(LazyQueryResultImpl.java :204)\n    at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.getResults(LazyQueryResultImpl.java:244)\n    at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.<init>(LazyQueryResultImpl.java :161)\n    at org.apache.jackrabbit.core.query.lucene.QueryImpl.execute(QueryImpl.java:164)\n    at org.apache.jackrabbit.core.query.QueryImpl.execute(QueryImpl.java:142)",
    "hasPatch": false,
    "hasScreenshot": false,
    "id": "JCR-778",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Major",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Error on query initialization - intermittent",
    "systemSpecification": true,
    "version": "1.1, 1.1.1, 1.2.1, 1.2.2, 1.2.3, 1.3"
}