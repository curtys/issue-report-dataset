{
    "comments": [
        {
            "author": "Martijn Hendriks",
            "body": "Attached a patch which contains two single threaded JUnit testcases for the mentioned problems.",
            "date": "2009-06-09T10:29:15.247+0000",
            "id": 0
        },
        {
            "author": "Martijn Hendriks",
            "body": "Created a separate issue for the references issue because it seems unrelated to the parent-child thing: JCR-2138.",
            "date": "2009-06-11T08:49:58.092+0000",
            "id": 1
        },
        {
            "author": "Martijn Hendriks",
            "body": "Attached a testcase + patch.\n\nThe problem seems to be that the NodeStateMerger cannot distinguish externally added child nodes from locally moved child nodes (both show up in the getRemovedChildNodeEntries result).",
            "date": "2009-06-11T11:49:44.947+0000",
            "id": 2
        },
        {
            "author": "Marcel Reutegger",
            "body": "I'd like to extend the test cases to cover more cases including any combination of add/remove node by one session and move node to/from by another session.\n\nI'll post an updated patch when it is ready....  ",
            "date": "2009-06-25T11:44:52.408+0000",
            "id": 3
        },
        {
            "author": "Marcel Reutegger",
            "body": "Attached is an extended version of Martijns initial patch. It contains more test cases covering various combinations of modifications as well as previously untested modifications.\n\nI also extended the NodeStateMerger.MergeContext with an additional method that allows the merge to distinguish between an externally added/removed node and a locally moved node.\n\nMartijn, can you please test the patch and report back if it works for you? thanks.",
            "date": "2009-06-26T12:14:02.180+0000",
            "id": 4
        },
        {
            "author": "Martijn Hendriks",
            "body": "Marcel, thanks for extending the test cases and creating a new patch, which works fine for me! I see that you improved the merging strategy which is nicer than throwing an ItemStateException.",
            "date": "2009-06-29T09:51:02.823+0000",
            "id": 5
        },
        {
            "author": "Marcel Reutegger",
            "body": "Thank you for the feedback.\n\nCommitted my version of the patch in revision: 789279",
            "date": "2009-06-29T10:30:03.048+0000",
            "id": 6
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.x branch in revision 791842.",
            "date": "2009-07-07T14:09:29.619+0000",
            "id": 7
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.5 branch in revision 794292.",
            "date": "2009-07-15T14:51:12.078+0000",
            "id": 8
        },
        {
            "author": "Jukka Zitting",
            "body": "Merged to the 1.4 branch in revision 948381.",
            "date": "2010-05-26T10:27:42.110+0000",
            "id": 9
        }
    ],
    "component": "jackrabbit-core",
    "description": "There are two places where transient state changes are merged with persisted state: (i) in the SessionISM.stateModified call back method (typically called by a saving thread after it's changes have been saved) and (ii) in the SharedISM.Update.begin method. Sometimes the merge strategy fails in the sense that corrupt data is written to database. \n\nHow to reproduce:\nThe attached test program contains steps to reproduce the issue. The testInconsistency1 method concurrently adds a node D to a node A and moves child node B of A to another place. This sometimes results in a situation in which node A still has a child reference to node B whereas B has another parent. In this situation, Jackrabbit cannot be started anymore if the search index is missing: \n\nJun 8, 2009 2:16:23 PM org.apache.jackrabbit.core.query.OnWorkspaceInconsistency$1 handleMissingChildNode\nSEVERE: Node /A (a7a29e8c-8d13-4fbd-b0ca-4f93f9c0ef42) has missing child 'B' (80aa13c5-1db6-4f62-b576-5e7f626d90c1)\nJun 8, 2009 2:16:23 PM org.apache.jackrabbit.core.RepositoryImpl initStartupWorkspaces\nSEVERE: Failed to initialize workspace 'wm9'\n\nThe testInconsistency2 method concurrently adds a reference property to a node B (the threads do exactly the same). This sometimes results in a situation in which the referenced node can never be removed anymore because there is a \"ghost\" reference to it which cannot be removed. (It gives a ReferentialIntegrityException).\n\nJun 8, 2009 2:19:51 PM org.apache.jackrabbit.core.state.MLRUItemStateCache cache\nWARNING: overwriting cached entry bc28ff87-216d-4ccd-bd73-03e7499ab54e/{}ref to B\nException in thread \"main\" javax.jcr.ReferentialIntegrityException: 9f025634-d3e1-448e-904c-1c285f6b1bf6: the node cannot be removed because it is still being referenced.\n\nIt seems the first problem (the parent-child relation) is caused by an incorrect merge in the NodeStateMerger class. The second problem might also be caused by an incorrect or missed merge, but I am not sure whether that's the real problem.\n\n",
    "hasPatch": true,
    "hasScreenshot": false,
    "id": "JCR-2129",
    "issuetypeClassified": "BUG",
    "issuetypeTracker": "BUG",
    "priority": "Critical",
    "product": "JACKRABBIT",
    "project": "JACKRABBIT",
    "summary": "Prevent data inconsistencies due to incorrect or missed merges in the ItemStateManagers",
    "systemSpecification": true,
    "version": "core 1.4.5"
}